
RobotControlProgram v0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013100  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413100  00413100  00023100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20000000  00413108  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000b63c  200008d0  004139d8  000308d0  2**3
                  ALLOC
  4 .stack        00003004  2000bf0c  0041f014  000308d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000308fa  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c908  00000000  00000000  00030953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006c15  00000000  00000000  0005d25b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016a68  00000000  00000000  00063e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a78  00000000  00000000  0007a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001a00  00000000  00000000  0007c350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013b0d  00000000  00000000  0007dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00029814  00000000  00000000  0009185d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065dd7  00000000  00000000  000bb071  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005a08  00000000  00000000  00120e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000ef10 	.word	0x2000ef10
  400004:	0040594d 	.word	0x0040594d
  400008:	00405935 	.word	0x00405935
  40000c:	00405935 	.word	0x00405935
  400010:	00405935 	.word	0x00405935
  400014:	00405935 	.word	0x00405935
  400018:	00405935 	.word	0x00405935
	...
  40002c:	00405cc5 	.word	0x00405cc5
  400030:	00405935 	.word	0x00405935
  400034:	00000000 	.word	0x00000000
  400038:	00405d41 	.word	0x00405d41
  40003c:	00405d7d 	.word	0x00405d7d
  400040:	00405935 	.word	0x00405935
  400044:	00405935 	.word	0x00405935
  400048:	00405935 	.word	0x00405935
  40004c:	00405935 	.word	0x00405935
  400050:	00405935 	.word	0x00405935
  400054:	00405935 	.word	0x00405935
  400058:	00405935 	.word	0x00405935
  40005c:	00405935 	.word	0x00405935
  400060:	00405935 	.word	0x00405935
  400064:	00405935 	.word	0x00405935
  400068:	00000000 	.word	0x00000000
  40006c:	00405731 	.word	0x00405731
  400070:	00405745 	.word	0x00405745
  400074:	00405759 	.word	0x00405759
  400078:	00405935 	.word	0x00405935
  40007c:	00405935 	.word	0x00405935
	...
  400088:	00405935 	.word	0x00405935
  40008c:	00405935 	.word	0x00405935
  400090:	00405935 	.word	0x00405935
  400094:	00405935 	.word	0x00405935
  400098:	00405935 	.word	0x00405935
  40009c:	00405935 	.word	0x00405935
  4000a0:	00405935 	.word	0x00405935
  4000a4:	00405935 	.word	0x00405935
  4000a8:	00405935 	.word	0x00405935
  4000ac:	00405935 	.word	0x00405935
  4000b0:	00405935 	.word	0x00405935
  4000b4:	00405935 	.word	0x00405935
  4000b8:	00405935 	.word	0x00405935
  4000bc:	00405935 	.word	0x00405935
  4000c0:	00405935 	.word	0x00405935
  4000c4:	00405935 	.word	0x00405935
  4000c8:	00405935 	.word	0x00405935

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008d0 	.word	0x200008d0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00413108 	.word	0x00413108

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200008d4 	.word	0x200008d4
  40011c:	00413108 	.word	0x00413108
  400120:	00413108 	.word	0x00413108
  400124:	00000000 	.word	0x00000000

00400128 <nand_flash_model_find>:
 * \return 0 if  a matching model has been found; otherwise returns
 * NAND_COMMON_ERROR_UNKNOWNMODEL.
 */
uint32_t nand_flash_model_find(const struct nand_flash_model *model_list,
		uint32_t size, uint32_t chip_id, struct nand_flash_model *model)
{
  400128:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t found = 0, id2, id4;
	uint32_t i;
	id2 = (uint8_t)(chip_id >> 8);
  40012a:	f3c2 2507 	ubfx	r5, r2, #8, #8
	id4 = (uint8_t)(chip_id >> 24);

	for (i = 0; i < size; i++) {
  40012e:	2900      	cmp	r1, #0
  400130:	d052      	beq.n	4001d8 <nand_flash_model_find+0xb0>
  400132:	460e      	mov	r6, r1
		if (model_list[i].device_id == id2) {
  400134:	7801      	ldrb	r1, [r0, #0]
  400136:	42a9      	cmp	r1, r5
  400138:	d147      	bne.n	4001ca <nand_flash_model_find+0xa2>
  40013a:	e005      	b.n	400148 <nand_flash_model_find+0x20>
  40013c:	4607      	mov	r7, r0
  40013e:	f810 4b0c 	ldrb.w	r4, [r0], #12
  400142:	42ac      	cmp	r4, r5
  400144:	d143      	bne.n	4001ce <nand_flash_model_find+0xa6>
  400146:	e000      	b.n	40014a <nand_flash_model_find+0x22>
  400148:	4607      	mov	r7, r0
			found = 1;

			if (model) {
  40014a:	2b00      	cmp	r3, #0
  40014c:	d057      	beq.n	4001fe <nand_flash_model_find+0xd6>
				memcpy(model, &model_list[i], sizeof(struct nand_flash_model));
  40014e:	683c      	ldr	r4, [r7, #0]
  400150:	6878      	ldr	r0, [r7, #4]
  400152:	68b9      	ldr	r1, [r7, #8]
  400154:	601c      	str	r4, [r3, #0]
  400156:	6058      	str	r0, [r3, #4]
  400158:	6099      	str	r1, [r3, #8]

				if ((model->block_size_in_kilobytes == 0)
  40015a:	88d9      	ldrh	r1, [r3, #6]
  40015c:	b111      	cbz	r1, 400164 <nand_flash_model_find+0x3c>
						|| (model->page_size_in_bytes == 0)) {
  40015e:	8859      	ldrh	r1, [r3, #2]
  400160:	2900      	cmp	r1, #0
  400162:	d14c      	bne.n	4001fe <nand_flash_model_find+0xd6>
					 * 0   0   64K      || 0   0   1K
					 * 0   1   128K     || 0   1   2K
					 * 1   0   256K     || 1   0   4K
					 * 1   1   512K     || 1   1   8k
					 */
					switch (id4 & 0x03) {
  400164:	0e12      	lsrs	r2, r2, #24
  400166:	f002 0103 	and.w	r1, r2, #3
  40016a:	2903      	cmp	r1, #3
  40016c:	d813      	bhi.n	400196 <nand_flash_model_find+0x6e>
  40016e:	e8df f001 	tbb	[pc, r1]
  400172:	0602      	.short	0x0602
  400174:	0e0a      	.short	0x0e0a
					case 0x00:
						model->page_size_in_bytes =	1024;
  400176:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40017a:	8059      	strh	r1, [r3, #2]
						break;
  40017c:	e032      	b.n	4001e4 <nand_flash_model_find+0xbc>
					case 0x01:
						model->page_size_in_bytes =	2048;
  40017e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400182:	8059      	strh	r1, [r3, #2]
						break;
  400184:	e02e      	b.n	4001e4 <nand_flash_model_find+0xbc>
					case 0x02:
						model->page_size_in_bytes =	4096;
  400186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40018a:	8059      	strh	r1, [r3, #2]
						break;
  40018c:	e02a      	b.n	4001e4 <nand_flash_model_find+0xbc>
					case 0x03:
						model->page_size_in_bytes =	8192;
  40018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400192:	8059      	strh	r1, [r3, #2]
						break;
  400194:	e026      	b.n	4001e4 <nand_flash_model_find+0xbc>
					}
					switch (id4 & 0x30) {
  400196:	f002 0230 	and.w	r2, r2, #48	; 0x30
  40019a:	2a10      	cmp	r2, #16
  40019c:	d00a      	beq.n	4001b4 <nand_flash_model_find+0x8c>
  40019e:	dc01      	bgt.n	4001a4 <nand_flash_model_find+0x7c>
  4001a0:	b12a      	cbz	r2, 4001ae <nand_flash_model_find+0x86>
  4001a2:	e01b      	b.n	4001dc <nand_flash_model_find+0xb4>
  4001a4:	2a20      	cmp	r2, #32
  4001a6:	d008      	beq.n	4001ba <nand_flash_model_find+0x92>
  4001a8:	2a30      	cmp	r2, #48	; 0x30
  4001aa:	d00a      	beq.n	4001c2 <nand_flash_model_find+0x9a>
  4001ac:	e016      	b.n	4001dc <nand_flash_model_find+0xb4>
					case 0x00:
						model->block_size_in_kilobytes = 64;
  4001ae:	2240      	movs	r2, #64	; 0x40
  4001b0:	80da      	strh	r2, [r3, #6]
						break;
  4001b2:	e024      	b.n	4001fe <nand_flash_model_find+0xd6>
					case 0x10:
						model->block_size_in_kilobytes = 128;
  4001b4:	2280      	movs	r2, #128	; 0x80
  4001b6:	80da      	strh	r2, [r3, #6]
						break;
  4001b8:	e021      	b.n	4001fe <nand_flash_model_find+0xd6>
					case 0x20:
						model->block_size_in_kilobytes = 256;
  4001ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  4001be:	80da      	strh	r2, [r3, #6]
						break;
  4001c0:	e01d      	b.n	4001fe <nand_flash_model_find+0xd6>
					case 0x30:
						model->block_size_in_kilobytes = 512;
  4001c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4001c6:	80da      	strh	r2, [r3, #6]
						break;
  4001c8:	e019      	b.n	4001fe <nand_flash_model_find+0xd6>
  4001ca:	300c      	adds	r0, #12
	uint32_t i;
	id2 = (uint8_t)(chip_id >> 8);
	id4 = (uint8_t)(chip_id >> 24);

	for (i = 0; i < size; i++) {
		if (model_list[i].device_id == id2) {
  4001cc:	2100      	movs	r1, #0
	uint8_t found = 0, id2, id4;
	uint32_t i;
	id2 = (uint8_t)(chip_id >> 8);
	id4 = (uint8_t)(chip_id >> 24);

	for (i = 0; i < size; i++) {
  4001ce:	3101      	adds	r1, #1
  4001d0:	428e      	cmp	r6, r1
  4001d2:	d1b3      	bne.n	40013c <nand_flash_model_find+0x14>

	/* Check if chip has been detected */
	if (found) {
		return 0;
	} else {
		return NAND_COMMON_ERROR_UNKNOWNMODEL;
  4001d4:	2008      	movs	r0, #8
  4001d6:	e013      	b.n	400200 <nand_flash_model_find+0xd8>
  4001d8:	2008      	movs	r0, #8
  4001da:	e011      	b.n	400200 <nand_flash_model_find+0xd8>
		}
	}

	/* Check if chip has been detected */
	if (found) {
		return 0;
  4001dc:	2000      	movs	r0, #0
  4001de:	e00f      	b.n	400200 <nand_flash_model_find+0xd8>
  4001e0:	2000      	movs	r0, #0
  4001e2:	e00d      	b.n	400200 <nand_flash_model_find+0xd8>
						break;
					case 0x03:
						model->page_size_in_bytes =	8192;
						break;
					}
					switch (id4 & 0x30) {
  4001e4:	f002 0230 	and.w	r2, r2, #48	; 0x30
  4001e8:	2a10      	cmp	r2, #16
  4001ea:	d0e3      	beq.n	4001b4 <nand_flash_model_find+0x8c>
  4001ec:	dc02      	bgt.n	4001f4 <nand_flash_model_find+0xcc>
  4001ee:	2a00      	cmp	r2, #0
  4001f0:	d0dd      	beq.n	4001ae <nand_flash_model_find+0x86>
  4001f2:	e7f5      	b.n	4001e0 <nand_flash_model_find+0xb8>
  4001f4:	2a20      	cmp	r2, #32
  4001f6:	d0e0      	beq.n	4001ba <nand_flash_model_find+0x92>
  4001f8:	2a30      	cmp	r2, #48	; 0x30
  4001fa:	d0e2      	beq.n	4001c2 <nand_flash_model_find+0x9a>
  4001fc:	e7f0      	b.n	4001e0 <nand_flash_model_find+0xb8>
		}
	}

	/* Check if chip has been detected */
	if (found) {
		return 0;
  4001fe:	2000      	movs	r0, #0
	} else {
		return NAND_COMMON_ERROR_UNKNOWNMODEL;
	}
}
  400200:	bcf0      	pop	{r4, r5, r6, r7}
  400202:	4770      	bx	lr

00400204 <nand_flash_model_get_device_size_in_blocks>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint16_t nand_flash_model_get_device_size_in_blocks(const struct
		nand_flash_model *model)
{
	return (1024 * model->device_size_in_megabytes) /
  400204:	8883      	ldrh	r3, [r0, #4]
  400206:	029b      	lsls	r3, r3, #10
  400208:	88c0      	ldrh	r0, [r0, #6]
  40020a:	fb93 f0f0 	sdiv	r0, r3, r0
			model->block_size_in_kilobytes;
}
  40020e:	b280      	uxth	r0, r0
  400210:	4770      	bx	lr
  400212:	bf00      	nop

00400214 <nand_flash_model_get_device_size_in_pages>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint16_t nand_flash_model_get_device_size_in_blocks(const struct
		nand_flash_model *model)
{
	return (1024 * model->device_size_in_megabytes) /
  400214:	88c2      	ldrh	r2, [r0, #6]
 * \param model  Pointer to a nand_flash_model instance.
 */
uint32_t nand_flash_model_get_device_size_in_pages(const struct nand_flash_model
		*model)
{
	return (uint32_t) nand_flash_model_get_device_size_in_blocks(model) *
  400216:	8883      	ldrh	r3, [r0, #4]
  400218:	029b      	lsls	r3, r3, #10
  40021a:	fb93 f3f2 	sdiv	r3, r3, r2
  40021e:	b29b      	uxth	r3, r3
  400220:	0292      	lsls	r2, r2, #10
  400222:	8840      	ldrh	r0, [r0, #2]
  400224:	fb92 f0f0 	sdiv	r0, r2, r0
			nand_flash_model_get_block_size_in_pages(model);
}
  400228:	fb00 f003 	mul.w	r0, r0, r3
  40022c:	4770      	bx	lr
  40022e:	bf00      	nop

00400230 <nand_flash_model_get_device_size_in_bytes>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint64_t nand_flash_model_get_device_size_in_bytes(const struct nand_flash_model
		*model)
{
	return ((uint64_t) model->device_size_in_megabytes) << 20;
  400230:	8882      	ldrh	r2, [r0, #4]
}
  400232:	0510      	lsls	r0, r2, #20
  400234:	0b11      	lsrs	r1, r2, #12
  400236:	4770      	bx	lr

00400238 <nand_flash_model_get_block_size_in_pages>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint32_t nand_flash_model_get_block_size_in_pages(const struct nand_flash_model
		*model)
{
	return (model->block_size_in_kilobytes * 1024) /
  400238:	88c3      	ldrh	r3, [r0, #6]
  40023a:	029b      	lsls	r3, r3, #10
  40023c:	8840      	ldrh	r0, [r0, #2]
			model->page_size_in_bytes;
}
  40023e:	fb93 f0f0 	sdiv	r0, r3, r0
  400242:	4770      	bx	lr

00400244 <nand_flash_model_get_block_size_in_bytes>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint32_t nand_flash_model_get_block_size_in_bytes(const struct nand_flash_model
		*model)
{
	return (model->block_size_in_kilobytes * 1024);
  400244:	88c0      	ldrh	r0, [r0, #6]
}
  400246:	0280      	lsls	r0, r0, #10
  400248:	4770      	bx	lr
  40024a:	bf00      	nop

0040024c <nand_flash_model_get_page_data_size>:
 */
uint16_t nand_flash_model_get_page_data_size(const struct nand_flash_model
		*model)
{
	return model->page_size_in_bytes;
}
  40024c:	8840      	ldrh	r0, [r0, #2]
  40024e:	4770      	bx	lr

00400250 <nand_flash_model_get_page_spare_size>:
 */
uint16_t nand_flash_model_get_page_spare_size(const struct nand_flash_model
		*model)
{
	/* Spare size is 16/512 of data size */
	return (model->page_size_in_bytes >> 5);
  400250:	8840      	ldrh	r0, [r0, #2]
}
  400252:	0940      	lsrs	r0, r0, #5
  400254:	4770      	bx	lr
  400256:	bf00      	nop

00400258 <nand_flash_model_get_data_bus_width>:
 * \param model  Pointer to a nand_flash_model instance.
 */
uint32_t nand_flash_model_get_data_bus_width(const struct nand_flash_model
		*model)
{
	return (model->options & NAND_FLASH_MODEL_DATA_BUS_16) ? 16 : 8;
  400258:	7843      	ldrb	r3, [r0, #1]
  40025a:	f003 0301 	and.w	r3, r3, #1
  40025e:	2b00      	cmp	r3, #0
}
  400260:	bf14      	ite	ne
  400262:	2010      	movne	r0, #16
  400264:	2008      	moveq	r0, #8
  400266:	4770      	bx	lr

00400268 <nand_flash_model_small_block>:
 * \param model  Pointer to a nand_flash_model instance.
 * \return 1 if the model uses the "small blocks/pages"; otherwise return 0.
 */
uint32_t nand_flash_model_small_block(const struct nand_flash_model *model)
{
	return (model->page_size_in_bytes <= 512) ? 1 : 0;
  400268:	8840      	ldrh	r0, [r0, #2]
}
  40026a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  40026e:	bf8c      	ite	hi
  400270:	2000      	movhi	r0, #0
  400272:	2001      	movls	r0, #1
  400274:	4770      	bx	lr
  400276:	bf00      	nop

00400278 <check_status>:
 */
static uint32_t check_status(const struct nand_flash_raw *raw)
{
	uint32_t status;

	WRITE_COMMAND(raw, NAND_COMMAND_STATUS);
  400278:	68c3      	ldr	r3, [r0, #12]
  40027a:	2270      	movs	r2, #112	; 0x70
  40027c:	701a      	strb	r2, [r3, #0]

	status = READ_DATA8(raw);
  40027e:	6943      	ldr	r3, [r0, #20]
  400280:	7818      	ldrb	r0, [r3, #0]
  400282:	f000 0041 	and.w	r0, r0, #65	; 0x41
	if (((status & NAND_STATUS_READY) != NAND_STATUS_READY) ||
			((status & NAND_STATUS_ERROR) != 0)) {
		return 0;
	}
	return 1;
}
  400286:	2840      	cmp	r0, #64	; 0x40
  400288:	bf14      	ite	ne
  40028a:	2000      	movne	r0, #0
  40028c:	2001      	moveq	r0, #1
  40028e:	4770      	bx	lr

00400290 <wait_ready>:

/**
 * \brief Wait for the completion of a page program, erase and random read completion.
 */
static void wait_ready(void)
{
  400290:	b538      	push	{r3, r4, r5, lr}
	while (gpio_pin_is_low(PIN_NF_RB_IDX)) {
  400292:	254d      	movs	r5, #77	; 0x4d
  400294:	4c02      	ldr	r4, [pc, #8]	; (4002a0 <wait_ready+0x10>)
  400296:	4628      	mov	r0, r5
  400298:	47a0      	blx	r4
  40029a:	2800      	cmp	r0, #0
  40029c:	d0fb      	beq.n	400296 <wait_ready+0x6>
	}
}
  40029e:	bd38      	pop	{r3, r4, r5, pc}
  4002a0:	0040539d 	.word	0x0040539d

004002a4 <write_row_address>:
 * \param raw  Pointer to a nand_flash_raw instance.
 * \param row_address  Row address to send.
 */
static void write_row_address(const struct nand_flash_raw *raw,
		uint32_t row_address)
{
  4002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4002a6:	4606      	mov	r6, r0
  4002a8:	460d      	mov	r5, r1
	uint32_t num_page =
  4002aa:	4b08      	ldr	r3, [pc, #32]	; (4002cc <write_row_address+0x28>)
  4002ac:	4798      	blx	r3
			nand_flash_model_get_device_size_in_pages(MODEL(raw));

	while (num_page > 0) {
  4002ae:	b160      	cbz	r0, 4002ca <write_row_address+0x26>
  4002b0:	4604      	mov	r4, r0
		if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
  4002b2:	4f07      	ldr	r7, [pc, #28]	; (4002d0 <write_row_address+0x2c>)
  4002b4:	4630      	mov	r0, r6
  4002b6:	47b8      	blx	r7
  4002b8:	2810      	cmp	r0, #16
			WRITE_ADDRESS16(raw, (row_address & 0xFF));
  4002ba:	6933      	ldr	r3, [r6, #16]
  4002bc:	b2ea      	uxtb	r2, r5
  4002be:	bf0c      	ite	eq
  4002c0:	801a      	strheq	r2, [r3, #0]
		} else {
			WRITE_ADDRESS(raw, (row_address & 0xFF));
  4002c2:	701a      	strbne	r2, [r3, #0]
		}

		num_page >>= 8;
		row_address >>= 8;
  4002c4:	0a2d      	lsrs	r5, r5, #8
		uint32_t row_address)
{
	uint32_t num_page =
			nand_flash_model_get_device_size_in_pages(MODEL(raw));

	while (num_page > 0) {
  4002c6:	0a24      	lsrs	r4, r4, #8
  4002c8:	d1f4      	bne.n	4002b4 <write_row_address+0x10>
  4002ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4002cc:	00400215 	.word	0x00400215
  4002d0:	00400259 	.word	0x00400259

004002d4 <read_data>:
 * \param buffer  Pointer to data buffer.
 * \param size  Number of bytes that will be written.
 */
static void read_data(const struct nand_flash_raw *raw,
		uint8_t *buffer, uint32_t size)
{
  4002d4:	b570      	push	{r4, r5, r6, lr}
  4002d6:	4605      	mov	r5, r0
  4002d8:	460e      	mov	r6, r1
  4002da:	4614      	mov	r4, r2
	uint32_t i;

	/* Check the chip data bus width */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
  4002dc:	4b19      	ldr	r3, [pc, #100]	; (400344 <read_data+0x70>)
  4002de:	4798      	blx	r3
  4002e0:	2810      	cmp	r0, #16
  4002e2:	d001      	beq.n	4002e8 <read_data+0x14>
			for (i = 0; i < size; i++) {
				buffer16[i] = READ_DATA16(raw);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
  4002e4:	bb2c      	cbnz	r4, 400332 <read_data+0x5e>
  4002e6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i;

	/* Check the chip data bus width */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
		/* Not aligned: read 16-bit and store by byte */
		if (((uint32_t)buffer & 0x1u) || (size & 0x1u))  {
  4002e8:	ea46 0304 	orr.w	r3, r6, r4
  4002ec:	f013 0f01 	tst.w	r3, #1
  4002f0:	d013      	beq.n	40031a <read_data+0x46>
  4002f2:	1c72      	adds	r2, r6, #1
  4002f4:	f024 0001 	bic.w	r0, r4, #1
  4002f8:	2100      	movs	r1, #0
  4002fa:	e003      	b.n	400304 <read_data+0x30>
			uint16_t tmp16;
			for (i = 0; i < size;) {
				tmp16 = READ_DATA16(raw);
				buffer[i++] = tmp16 & 0xFF;
				if (i < size) {
					buffer[i++] = (tmp16 >> 8) & 0xFF;
  4002fc:	3102      	adds	r1, #2
  4002fe:	0a1b      	lsrs	r3, r3, #8
  400300:	f802 3c02 	strb.w	r3, [r2, #-2]
	/* Check the chip data bus width */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
		/* Not aligned: read 16-bit and store by byte */
		if (((uint32_t)buffer & 0x1u) || (size & 0x1u))  {
			uint16_t tmp16;
			for (i = 0; i < size;) {
  400304:	428c      	cmp	r4, r1
  400306:	d91c      	bls.n	400342 <read_data+0x6e>
				tmp16 = READ_DATA16(raw);
  400308:	696b      	ldr	r3, [r5, #20]
  40030a:	881b      	ldrh	r3, [r3, #0]
  40030c:	b29b      	uxth	r3, r3
				buffer[i++] = tmp16 & 0xFF;
  40030e:	f802 3c01 	strb.w	r3, [r2, #-1]
  400312:	3202      	adds	r2, #2
				if (i < size) {
  400314:	4281      	cmp	r1, r0
  400316:	d014      	beq.n	400342 <read_data+0x6e>
  400318:	e7f0      	b.n	4002fc <read_data+0x28>
		} else {
			/* Aligned, uses 16b pointer */
			uint16_t *buffer16 = (uint16_t *)(uint32_t)buffer;
			size >>= 1;

			for (i = 0; i < size; i++) {
  40031a:	0862      	lsrs	r2, r4, #1
  40031c:	d011      	beq.n	400342 <read_data+0x6e>
  40031e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
  400322:	4632      	mov	r2, r6
				buffer16[i] = READ_DATA16(raw);
  400324:	696b      	ldr	r3, [r5, #20]
  400326:	881b      	ldrh	r3, [r3, #0]
  400328:	f822 3b02 	strh.w	r3, [r2], #2
		} else {
			/* Aligned, uses 16b pointer */
			uint16_t *buffer16 = (uint16_t *)(uint32_t)buffer;
			size >>= 1;

			for (i = 0; i < size; i++) {
  40032c:	428a      	cmp	r2, r1
  40032e:	d1f9      	bne.n	400324 <read_data+0x50>
  400330:	bd70      	pop	{r4, r5, r6, pc}
  400332:	4633      	mov	r3, r6
  400334:	1932      	adds	r2, r6, r4
				buffer16[i] = READ_DATA16(raw);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
			buffer[i] = READ_DATA8(raw);
  400336:	6968      	ldr	r0, [r5, #20]
  400338:	7800      	ldrb	r0, [r0, #0]
  40033a:	f803 0b01 	strb.w	r0, [r3], #1
			for (i = 0; i < size; i++) {
				buffer16[i] = READ_DATA16(raw);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
  40033e:	4293      	cmp	r3, r2
  400340:	d1f9      	bne.n	400336 <read_data+0x62>
  400342:	bd70      	pop	{r4, r5, r6, pc}
  400344:	00400259 	.word	0x00400259

00400348 <write_data>:
 * \param buffer  Pointer to data buffer.
 * \param size  Number of bytes that will be written.
 */
static void write_data(const struct nand_flash_raw *raw,
		uint8_t *buffer, uint32_t size)
{
  400348:	b570      	push	{r4, r5, r6, lr}
  40034a:	4605      	mov	r5, r0
  40034c:	460e      	mov	r6, r1
  40034e:	4614      	mov	r4, r2
	uint32_t i;

	/* Check the data bus width of the NAND Flash */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
  400350:	4b1b      	ldr	r3, [pc, #108]	; (4003c0 <write_data+0x78>)
  400352:	4798      	blx	r3
  400354:	2810      	cmp	r0, #16
  400356:	d001      	beq.n	40035c <write_data+0x14>
			for (i = 0; i < size; i++) {
				WRITE_DATA16(raw, buffer16[i]);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
  400358:	bb44      	cbnz	r4, 4003ac <write_data+0x64>
  40035a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i;

	/* Check the data bus width of the NAND Flash */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
		/* Not aligned, get data by byte */
		if (((uint32_t)buffer & 0x1u) || (size & 0x1u)) {
  40035c:	ea46 0304 	orr.w	r3, r6, r4
  400360:	f013 0f01 	tst.w	r3, #1
  400364:	d016      	beq.n	400394 <write_data+0x4c>
			uint16_t tmp16;
			for (i = 0; i < size;) {
  400366:	b34c      	cbz	r4, 4003bc <write_data+0x74>
  400368:	2101      	movs	r1, #1
  40036a:	2200      	movs	r2, #0
				tmp16 = buffer[i++];
  40036c:	5cb3      	ldrb	r3, [r6, r2]
				if (i < size) {
  40036e:	428c      	cmp	r4, r1
  400370:	d90a      	bls.n	400388 <write_data+0x40>
					tmp16 += buffer[i++] << 8;
  400372:	3202      	adds	r2, #2
  400374:	5c70      	ldrb	r0, [r6, r1]
  400376:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  40037a:	b29b      	uxth	r3, r3
				} else {
					tmp16 += 0xFF00; // Write FF if no data
				}
				WRITE_DATA16(raw, tmp16);
  40037c:	6968      	ldr	r0, [r5, #20]
  40037e:	8003      	strh	r3, [r0, #0]
  400380:	3102      	adds	r1, #2
	/* Check the data bus width of the NAND Flash */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
		/* Not aligned, get data by byte */
		if (((uint32_t)buffer & 0x1u) || (size & 0x1u)) {
			uint16_t tmp16;
			for (i = 0; i < size;) {
  400382:	4294      	cmp	r4, r2
  400384:	d8f2      	bhi.n	40036c <write_data+0x24>
  400386:	bd70      	pop	{r4, r5, r6, pc}
				tmp16 = buffer[i++];
				if (i < size) {
					tmp16 += buffer[i++] << 8;
				} else {
					tmp16 += 0xFF00; // Write FF if no data
  400388:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
  40038c:	b29b      	uxth	r3, r3
				}
				WRITE_DATA16(raw, tmp16);
  40038e:	696a      	ldr	r2, [r5, #20]
  400390:	8013      	strh	r3, [r2, #0]
  400392:	bd70      	pop	{r4, r5, r6, pc}
			}
		} else {
			uint16_t *buffer16 = (uint16_t *)(uint32_t)buffer;
			size >>= 1;
			for (i = 0; i < size; i++) {
  400394:	0862      	lsrs	r2, r4, #1
  400396:	d011      	beq.n	4003bc <write_data+0x74>
  400398:	eb06 0042 	add.w	r0, r6, r2, lsl #1
  40039c:	4632      	mov	r2, r6
				WRITE_DATA16(raw, buffer16[i]);
  40039e:	696b      	ldr	r3, [r5, #20]
  4003a0:	f832 1b02 	ldrh.w	r1, [r2], #2
  4003a4:	8019      	strh	r1, [r3, #0]
				WRITE_DATA16(raw, tmp16);
			}
		} else {
			uint16_t *buffer16 = (uint16_t *)(uint32_t)buffer;
			size >>= 1;
			for (i = 0; i < size; i++) {
  4003a6:	4290      	cmp	r0, r2
  4003a8:	d1f9      	bne.n	40039e <write_data+0x56>
  4003aa:	bd70      	pop	{r4, r5, r6, pc}
  4003ac:	4633      	mov	r3, r6
  4003ae:	1932      	adds	r2, r6, r4
				WRITE_DATA16(raw, buffer16[i]);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
			WRITE_DATA8(raw, buffer[i]);
  4003b0:	6968      	ldr	r0, [r5, #20]
  4003b2:	f813 4b01 	ldrb.w	r4, [r3], #1
  4003b6:	7004      	strb	r4, [r0, #0]
			for (i = 0; i < size; i++) {
				WRITE_DATA16(raw, buffer16[i]);
			}
		}
	} else {
		for (i = 0; i < size; i++) {
  4003b8:	429a      	cmp	r2, r3
  4003ba:	d1f9      	bne.n	4003b0 <write_data+0x68>
  4003bc:	bd70      	pop	{r4, r5, r6, pc}
  4003be:	bf00      	nop
  4003c0:	00400259 	.word	0x00400259

004003c4 <write_column_address>:
 * \param raw  Pointer to a nand_flash_raw instance.
 * \param column_address  Column address to send.
 */
static void write_column_address(const struct nand_flash_raw *raw,
		uint16_t column_address)
{
  4003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4003c6:	4606      	mov	r6, r0
  4003c8:	460d      	mov	r5, r1
	uint16_t page_data_size =
  4003ca:	4b0d      	ldr	r3, [pc, #52]	; (400400 <write_column_address+0x3c>)
  4003cc:	4798      	blx	r3
  4003ce:	4604      	mov	r4, r0
			nand_flash_model_get_page_data_size(MODEL(raw));

	/* Check the data bus width of the NAND Flash */
	if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
  4003d0:	4630      	mov	r0, r6
  4003d2:	4b0c      	ldr	r3, [pc, #48]	; (400404 <write_column_address+0x40>)
  4003d4:	4798      	blx	r3
  4003d6:	2810      	cmp	r0, #16
		/* Div 2 is because we address in word and not in byte */
		column_address >>= 1;
  4003d8:	bf08      	it	eq
  4003da:	086d      	lsreq	r5, r5, #1
	}
	/*
	 * Send single column address byte for small block devices,
	 * or two column address bytes for large block devices.
	 */
	while (page_data_size > 2) {
  4003dc:	2c02      	cmp	r4, #2
  4003de:	d90d      	bls.n	4003fc <write_column_address+0x38>
		if (nand_flash_model_get_data_bus_width(MODEL(raw)) == 16) {
  4003e0:	4f08      	ldr	r7, [pc, #32]	; (400404 <write_column_address+0x40>)
  4003e2:	4630      	mov	r0, r6
  4003e4:	47b8      	blx	r7
  4003e6:	2810      	cmp	r0, #16
			WRITE_ADDRESS16(raw, (column_address & 0xFF));
  4003e8:	6933      	ldr	r3, [r6, #16]
  4003ea:	b2ea      	uxtb	r2, r5
  4003ec:	bf0c      	ite	eq
  4003ee:	801a      	strheq	r2, [r3, #0]
		} else {
			WRITE_ADDRESS(raw, (column_address & 0xFF));
  4003f0:	701a      	strbne	r2, [r3, #0]
		}

		page_data_size >>= 8;
  4003f2:	f3c4 240f 	ubfx	r4, r4, #8, #16
		column_address >>= 8;
  4003f6:	0a2d      	lsrs	r5, r5, #8
	}
	/*
	 * Send single column address byte for small block devices,
	 * or two column address bytes for large block devices.
	 */
	while (page_data_size > 2) {
  4003f8:	2c02      	cmp	r4, #2
  4003fa:	d8f2      	bhi.n	4003e2 <write_column_address+0x1e>
  4003fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003fe:	bf00      	nop
  400400:	0040024d 	.word	0x0040024d
  400404:	00400259 	.word	0x00400259

00400408 <nand_flash_raw_reset>:
 * \brief Reset a NAND Flash device.
 *
 * \param raw  Pointer to a nand_flash_raw instance.
 */
void nand_flash_raw_reset(const struct nand_flash_raw *raw)
{
  400408:	b510      	push	{r4, lr}
  40040a:	4604      	mov	r4, r0
	ENABLE_CE(raw);
  40040c:	204e      	movs	r0, #78	; 0x4e
  40040e:	4b05      	ldr	r3, [pc, #20]	; (400424 <nand_flash_raw_reset+0x1c>)
  400410:	4798      	blx	r3
	WRITE_COMMAND(raw, NAND_COMMAND_RESET);
  400412:	68e3      	ldr	r3, [r4, #12]
  400414:	22ff      	movs	r2, #255	; 0xff
  400416:	701a      	strb	r2, [r3, #0]
	wait_ready();
  400418:	4b03      	ldr	r3, [pc, #12]	; (400428 <nand_flash_raw_reset+0x20>)
  40041a:	4798      	blx	r3
	DISABLE_CE(raw);
  40041c:	204e      	movs	r0, #78	; 0x4e
  40041e:	4b03      	ldr	r3, [pc, #12]	; (40042c <nand_flash_raw_reset+0x24>)
  400420:	4798      	blx	r3
  400422:	bd10      	pop	{r4, pc}
  400424:	004053d5 	.word	0x004053d5
  400428:	00400291 	.word	0x00400291
  40042c:	004053b9 	.word	0x004053b9

00400430 <nand_flash_raw_read_id>:
 * \param raw  Pointer to a nand_flash_raw instance.
 *
 * \return id1|(id2<<8)|(id3<<16)|(id4<<24)
 */
uint32_t nand_flash_raw_read_id(const struct nand_flash_raw *raw)
{
  400430:	b510      	push	{r4, lr}
  400432:	4604      	mov	r4, r0
	uint32_t chip_id;

	ENABLE_CE(raw);
  400434:	204e      	movs	r0, #78	; 0x4e
  400436:	4b0e      	ldr	r3, [pc, #56]	; (400470 <nand_flash_raw_read_id+0x40>)
  400438:	4798      	blx	r3

	WRITE_COMMAND(raw, NAND_COMMAND_READID);
  40043a:	68e3      	ldr	r3, [r4, #12]
  40043c:	2290      	movs	r2, #144	; 0x90
  40043e:	701a      	strb	r2, [r3, #0]
	WRITE_ADDRESS(raw, 0);
  400440:	6923      	ldr	r3, [r4, #16]
  400442:	2200      	movs	r2, #0
  400444:	701a      	strb	r2, [r3, #0]

	/* make sure ready */
	delay_us(1);
  400446:	2009      	movs	r0, #9
  400448:	4b0a      	ldr	r3, [pc, #40]	; (400474 <nand_flash_raw_read_id+0x44>)
  40044a:	4798      	blx	r3

	chip_id = READ_DATA8(raw);
  40044c:	6961      	ldr	r1, [r4, #20]
  40044e:	7808      	ldrb	r0, [r1, #0]
	chip_id |= (READ_DATA8(raw) << 8);
  400450:	780c      	ldrb	r4, [r1, #0]
	chip_id |= (READ_DATA8(raw) << 16);
  400452:	780a      	ldrb	r2, [r1, #0]
  400454:	0412      	lsls	r2, r2, #16
  400456:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
  40045a:	ea40 0304 	orr.w	r3, r0, r4
	chip_id |= (READ_DATA8(raw) << 24);
  40045e:	780c      	ldrb	r4, [r1, #0]
  400460:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
	DISABLE_CE(raw);
  400464:	204e      	movs	r0, #78	; 0x4e
  400466:	4b04      	ldr	r3, [pc, #16]	; (400478 <nand_flash_raw_read_id+0x48>)
  400468:	4798      	blx	r3

	return chip_id;
}
  40046a:	4620      	mov	r0, r4
  40046c:	bd10      	pop	{r4, pc}
  40046e:	bf00      	nop
  400470:	004053d5 	.word	0x004053d5
  400474:	20000001 	.word	0x20000001
  400478:	004053b9 	.word	0x004053b9

0040047c <nand_flash_raw_initialize>:
 * \return 0 if successful; otherwise returns NAND_COMMON_ERROR_UNKNOWNMODEL.
 */
uint32_t nand_flash_raw_initialize(struct nand_flash_raw *raw,
		const struct nand_flash_model *model, uint32_t command_address,
		uint32_t address_address, uint32_t data_address)
{
  40047c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400480:	4604      	mov	r4, r0
  400482:	460e      	mov	r6, r1
  400484:	4690      	mov	r8, r2
  400486:	461f      	mov	r7, r3
#if SAM
	/* Configure SMC for NAND Flash accesses */
	/* Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  400488:	200a      	movs	r0, #10
  40048a:	4d1f      	ldr	r5, [pc, #124]	; (400508 <nand_flash_raw_initialize+0x8c>)
  40048c:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_PIOC),
  40048e:	200d      	movs	r0, #13
  400490:	47a8      	blx	r5

	/* CS setting in matrix */
	matrix_set_nandflash_cs(0x1u << BOARD_NAND_CS);
  400492:	2001      	movs	r0, #1
  400494:	4b1d      	ldr	r3, [pc, #116]	; (40050c <nand_flash_raw_initialize+0x90>)
  400496:	4798      	blx	r3
		ioport_set_pin_dir(PIN_NF_RB_IDX, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(PIN_NF_RB_IDX, IOPORT_MODE_PULLUP);
	}
#endif
	/* Configure SMC interface for NAND Flash */
	smc_set_setup_timing(SMC, BOARD_NAND_CS, CONF_NF_SETUP_TIMING);
  400498:	4d1d      	ldr	r5, [pc, #116]	; (400510 <nand_flash_raw_initialize+0x94>)
  40049a:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
  40049e:	2100      	movs	r1, #0
  4004a0:	4628      	mov	r0, r5
  4004a2:	4b1c      	ldr	r3, [pc, #112]	; (400514 <nand_flash_raw_initialize+0x98>)
  4004a4:	4798      	blx	r3
	smc_set_pulse_timing(SMC, BOARD_NAND_CS, CONF_NF_PULSE_TIMING);
  4004a6:	4a1c      	ldr	r2, [pc, #112]	; (400518 <nand_flash_raw_initialize+0x9c>)
  4004a8:	2100      	movs	r1, #0
  4004aa:	4628      	mov	r0, r5
  4004ac:	4b1b      	ldr	r3, [pc, #108]	; (40051c <nand_flash_raw_initialize+0xa0>)
  4004ae:	4798      	blx	r3
	smc_set_cycle_timing(SMC, BOARD_NAND_CS, CONF_NF_CYCLE_TIMING);
  4004b0:	4a1b      	ldr	r2, [pc, #108]	; (400520 <nand_flash_raw_initialize+0xa4>)
  4004b2:	2100      	movs	r1, #0
  4004b4:	4628      	mov	r0, r5
  4004b6:	4b1b      	ldr	r3, [pc, #108]	; (400524 <nand_flash_raw_initialize+0xa8>)
  4004b8:	4798      	blx	r3
	if (CONF_NF_BUSWIDTH == 8) {
		smc_set_mode(SMC, BOARD_NAND_CS, SMC_MODE_READ_MODE
  4004ba:	2203      	movs	r2, #3
  4004bc:	2100      	movs	r1, #0
  4004be:	4628      	mov	r0, r5
  4004c0:	4b19      	ldr	r3, [pc, #100]	; (400528 <nand_flash_raw_initialize+0xac>)
  4004c2:	4798      	blx	r3
	/* Unprotect all the flashes */
	gpio_set_gpio_pin(NF_WP_PIN);
#endif

	/* Initialize fields */
	raw->command_address = command_address;
  4004c4:	f8c4 800c 	str.w	r8, [r4, #12]
	raw->address_address = address_address;
  4004c8:	6127      	str	r7, [r4, #16]
	raw->data_address = data_address;
  4004ca:	9b06      	ldr	r3, [sp, #24]
  4004cc:	6163      	str	r3, [r4, #20]

	/* Reset */
	nand_flash_raw_reset(raw);
  4004ce:	4620      	mov	r0, r4
  4004d0:	4b16      	ldr	r3, [pc, #88]	; (40052c <nand_flash_raw_initialize+0xb0>)
  4004d2:	4798      	blx	r3

	/* make sure for reset ready */
	delay_ms(1);
  4004d4:	f242 107c 	movw	r0, #8572	; 0x217c
  4004d8:	4b15      	ldr	r3, [pc, #84]	; (400530 <nand_flash_raw_initialize+0xb4>)
  4004da:	4798      	blx	r3

	/* If model is not provided, autodetect it */
	if (!model) {
  4004dc:	b96e      	cbnz	r6, 4004fa <nand_flash_raw_initialize+0x7e>
		if (nand_flash_model_find(nand_flash_model_list,
  4004de:	4620      	mov	r0, r4
  4004e0:	4b14      	ldr	r3, [pc, #80]	; (400534 <nand_flash_raw_initialize+0xb8>)
  4004e2:	4798      	blx	r3
  4004e4:	4623      	mov	r3, r4
  4004e6:	4602      	mov	r2, r0
  4004e8:	213a      	movs	r1, #58	; 0x3a
  4004ea:	4813      	ldr	r0, [pc, #76]	; (400538 <nand_flash_raw_initialize+0xbc>)
  4004ec:	4c13      	ldr	r4, [pc, #76]	; (40053c <nand_flash_raw_initialize+0xc0>)
  4004ee:	47a0      	blx	r4
  4004f0:	2800      	cmp	r0, #0
				NAND_FLASH_MODEL_LIST_SIZE, nand_flash_raw_read_id(raw),
				&(raw->model))) {
			return NAND_COMMON_ERROR_UNKNOWNMODEL;
  4004f2:	bf18      	it	ne
  4004f4:	2008      	movne	r0, #8
  4004f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	} else {
		/* Copy provided model */
		raw->model = *model;
  4004fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  4004fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	return 0;
  400502:	2000      	movs	r0, #0
}
  400504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400508:	004058d9 	.word	0x004058d9
  40050c:	00400805 	.word	0x00400805
  400510:	400e0000 	.word	0x400e0000
  400514:	004007e5 	.word	0x004007e5
  400518:	04040302 	.word	0x04040302
  40051c:	004007ed 	.word	0x004007ed
  400520:	00070004 	.word	0x00070004
  400524:	004007f5 	.word	0x004007f5
  400528:	004007fd 	.word	0x004007fd
  40052c:	00400409 	.word	0x00400409
  400530:	20000001 	.word	0x20000001
  400534:	00400431 	.word	0x00400431
  400538:	00410db0 	.word	0x00410db0
  40053c:	00400129 	.word	0x00400129

00400540 <nand_flash_raw_erase_block>:
 *
 * \return 0 if successful; otherwise returns NAND_COMMON_ERROR_BADBLOCK.
 */
uint32_t nand_flash_raw_erase_block(const struct nand_flash_raw *raw,
		uint16_t block)
{
  400540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400544:	4604      	mov	r4, r0
  400546:	4689      	mov	r9, r1
  400548:	2502      	movs	r5, #2
	uint32_t error = 0;
	uint32_t row_address;

	/* Calculate address used for erase */
	row_address = block *
			nand_flash_model_get_block_size_in_pages(MODEL(raw));
  40054a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4005b8 <nand_flash_raw_erase_block+0x78>

	/* Start erase */
	ENABLE_CE(raw);
  40054e:	4f14      	ldr	r7, [pc, #80]	; (4005a0 <nand_flash_raw_erase_block+0x60>)
	WRITE_COMMAND(raw, NAND_COMMAND_ERASE_1);
	write_row_address(raw, row_address);
  400550:	4e14      	ldr	r6, [pc, #80]	; (4005a4 <nand_flash_raw_erase_block+0x64>)
	uint32_t error = 0;
	uint32_t row_address;

	/* Calculate address used for erase */
	row_address = block *
			nand_flash_model_get_block_size_in_pages(MODEL(raw));
  400552:	4620      	mov	r0, r4
  400554:	47c0      	blx	r8
{
	uint32_t error = 0;
	uint32_t row_address;

	/* Calculate address used for erase */
	row_address = block *
  400556:	fb00 fa09 	mul.w	sl, r0, r9
			nand_flash_model_get_block_size_in_pages(MODEL(raw));

	/* Start erase */
	ENABLE_CE(raw);
  40055a:	204e      	movs	r0, #78	; 0x4e
  40055c:	47b8      	blx	r7
	WRITE_COMMAND(raw, NAND_COMMAND_ERASE_1);
  40055e:	68e3      	ldr	r3, [r4, #12]
  400560:	2260      	movs	r2, #96	; 0x60
  400562:	701a      	strb	r2, [r3, #0]
	write_row_address(raw, row_address);
  400564:	4651      	mov	r1, sl
  400566:	4620      	mov	r0, r4
  400568:	47b0      	blx	r6
	WRITE_COMMAND(raw, NAND_COMMAND_ERASE_2);
  40056a:	68e3      	ldr	r3, [r4, #12]
  40056c:	22d0      	movs	r2, #208	; 0xd0
  40056e:	701a      	strb	r2, [r3, #0]

	/* make sure for erase ready */
	delay_ms(3);
  400570:	f246 4073 	movw	r0, #25715	; 0x6473
  400574:	4b0c      	ldr	r3, [pc, #48]	; (4005a8 <nand_flash_raw_erase_block+0x68>)
  400576:	4798      	blx	r3

	wait_ready();
  400578:	4b0c      	ldr	r3, [pc, #48]	; (4005ac <nand_flash_raw_erase_block+0x6c>)
  40057a:	4798      	blx	r3

	if (!check_status(raw)) {
  40057c:	4620      	mov	r0, r4
  40057e:	4b0c      	ldr	r3, [pc, #48]	; (4005b0 <nand_flash_raw_erase_block+0x70>)
  400580:	4798      	blx	r3
  400582:	b128      	cbz	r0, 400590 <nand_flash_raw_erase_block+0x50>
		error = NAND_COMMON_ERROR_CANNOTERASE;
	}

	DISABLE_CE(raw);
  400584:	204e      	movs	r0, #78	; 0x4e
  400586:	4b0b      	ldr	r3, [pc, #44]	; (4005b4 <nand_flash_raw_erase_block+0x74>)
  400588:	4798      	blx	r3
{
	uint32_t num_try = CONF_NF_ERASE_NUM_TRY;

	while (num_try > 0) {
		if (!erase_block(raw, block)) {
			return 0;
  40058a:	2000      	movs	r0, #0
  40058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	if (!check_status(raw)) {
		error = NAND_COMMON_ERROR_CANNOTERASE;
	}

	DISABLE_CE(raw);
  400590:	204e      	movs	r0, #78	; 0x4e
  400592:	4b08      	ldr	r3, [pc, #32]	; (4005b4 <nand_flash_raw_erase_block+0x74>)
  400594:	4798      	blx	r3
uint32_t nand_flash_raw_erase_block(const struct nand_flash_raw *raw,
		uint16_t block)
{
	uint32_t num_try = CONF_NF_ERASE_NUM_TRY;

	while (num_try > 0) {
  400596:	3d01      	subs	r5, #1
  400598:	d1db      	bne.n	400552 <nand_flash_raw_erase_block+0x12>
		}

		num_try--;
	}

	return NAND_COMMON_ERROR_BADBLOCK;
  40059a:	200c      	movs	r0, #12
}
  40059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005a0:	004053d5 	.word	0x004053d5
  4005a4:	004002a5 	.word	0x004002a5
  4005a8:	20000001 	.word	0x20000001
  4005ac:	00400291 	.word	0x00400291
  4005b0:	00400279 	.word	0x00400279
  4005b4:	004053b9 	.word	0x004053b9
  4005b8:	00400239 	.word	0x00400239

004005bc <nand_flash_raw_read_page>:
 *
 * \note If one of the buffer pointer is 0, the corresponding area is not read.
 */
void nand_flash_raw_read_page(const struct nand_flash_raw *raw,
		uint16_t block, uint16_t page, uint8_t *data, uint8_t *spare)
{
  4005bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4005c0:	4604      	mov	r4, r0
  4005c2:	468a      	mov	sl, r1
  4005c4:	4615      	mov	r5, r2
  4005c6:	461e      	mov	r6, r3
	uint32_t small_block = nand_flash_model_small_block(MODEL(raw));
  4005c8:	4b32      	ldr	r3, [pc, #200]	; (400694 <nand_flash_raw_read_page+0xd8>)
  4005ca:	4798      	blx	r3
  4005cc:	4680      	mov	r8, r0
	uint32_t page_data_size =
			nand_flash_model_get_page_data_size(MODEL(raw));
  4005ce:	4620      	mov	r0, r4
  4005d0:	4b31      	ldr	r3, [pc, #196]	; (400698 <nand_flash_raw_read_page+0xdc>)
  4005d2:	4798      	blx	r3
  4005d4:	4607      	mov	r7, r0
	uint32_t page_spare_size =
			nand_flash_model_get_page_spare_size(MODEL(raw));
  4005d6:	4620      	mov	r0, r4
  4005d8:	4b30      	ldr	r3, [pc, #192]	; (40069c <nand_flash_raw_read_page+0xe0>)
  4005da:	4798      	blx	r3
  4005dc:	4681      	mov	r9, r0
	uint32_t col_address;
	uint32_t row_address;

	/* Calculate actual address of the page */
	row_address = block *
			nand_flash_model_get_block_size_in_pages(MODEL(raw)) + page;
  4005de:	4620      	mov	r0, r4
  4005e0:	4b2f      	ldr	r3, [pc, #188]	; (4006a0 <nand_flash_raw_read_page+0xe4>)
  4005e2:	4798      	blx	r3
			nand_flash_model_get_page_spare_size(MODEL(raw));
	uint32_t col_address;
	uint32_t row_address;

	/* Calculate actual address of the page */
	row_address = block *
  4005e4:	fb00 550a 	mla	r5, r0, sl, r5
			nand_flash_model_get_block_size_in_pages(MODEL(raw)) + page;

	/* Start operation */
	ENABLE_CE(raw);
  4005e8:	204e      	movs	r0, #78	; 0x4e
  4005ea:	4b2e      	ldr	r3, [pc, #184]	; (4006a4 <nand_flash_raw_read_page+0xe8>)
  4005ec:	4798      	blx	r3

	if (data) {
  4005ee:	2e00      	cmp	r6, #0
  4005f0:	d14a      	bne.n	400688 <nand_flash_raw_read_page+0xcc>
		/* to read spare area in sequential access */
		col_address = page_data_size;
	}

	/* Use either small blocks or large blocks data area read */
	if (small_block) {
  4005f2:	f1b8 0f00 	cmp.w	r8, #0
  4005f6:	d011      	beq.n	40061c <nand_flash_raw_read_page+0x60>
		if (col_address == 0) {
  4005f8:	b91f      	cbnz	r7, 400602 <nand_flash_raw_read_page+0x46>
			WRITE_COMMAND(raw, NAND_COMMAND_READ_A);
  4005fa:	68e3      	ldr	r3, [r4, #12]
  4005fc:	2100      	movs	r1, #0
  4005fe:	7019      	strb	r1, [r3, #0]
  400600:	e003      	b.n	40060a <nand_flash_raw_read_page+0x4e>
		} else if (col_address == page_data_size) {
			WRITE_COMMAND(raw, NAND_COMMAND_READ_C);
  400602:	68e3      	ldr	r3, [r4, #12]
  400604:	2250      	movs	r2, #80	; 0x50
  400606:	701a      	strb	r2, [r3, #0]

	if (data) {
		col_address = 0;
	} else {
		/* to read spare area in sequential access */
		col_address = page_data_size;
  400608:	4639      	mov	r1, r7
			WRITE_COMMAND(raw, NAND_COMMAND_READ_A);
		} else if (col_address == page_data_size) {
			WRITE_COMMAND(raw, NAND_COMMAND_READ_C);
		}

		write_column_address(raw, col_address);
  40060a:	b289      	uxth	r1, r1
  40060c:	4620      	mov	r0, r4
  40060e:	4b26      	ldr	r3, [pc, #152]	; (4006a8 <nand_flash_raw_read_page+0xec>)
  400610:	4798      	blx	r3
		write_row_address(raw, row_address);
  400612:	4629      	mov	r1, r5
  400614:	4620      	mov	r0, r4
  400616:	4b25      	ldr	r3, [pc, #148]	; (4006ac <nand_flash_raw_read_page+0xf0>)
  400618:	4798      	blx	r3
  40061a:	e00e      	b.n	40063a <nand_flash_raw_read_page+0x7e>

	if (data) {
		col_address = 0;
	} else {
		/* to read spare area in sequential access */
		col_address = page_data_size;
  40061c:	4639      	mov	r1, r7
		}

		write_column_address(raw, col_address);
		write_row_address(raw, row_address);
	} else {
		WRITE_COMMAND(raw, NAND_COMMAND_READ_1);
  40061e:	68e3      	ldr	r3, [r4, #12]
  400620:	2200      	movs	r2, #0
  400622:	701a      	strb	r2, [r3, #0]
		write_column_address(raw, col_address);
  400624:	b289      	uxth	r1, r1
  400626:	4620      	mov	r0, r4
  400628:	4b1f      	ldr	r3, [pc, #124]	; (4006a8 <nand_flash_raw_read_page+0xec>)
  40062a:	4798      	blx	r3
		write_row_address(raw, row_address);
  40062c:	4629      	mov	r1, r5
  40062e:	4620      	mov	r0, r4
  400630:	4b1e      	ldr	r3, [pc, #120]	; (4006ac <nand_flash_raw_read_page+0xf0>)
  400632:	4798      	blx	r3
		WRITE_COMMAND(raw, NAND_COMMAND_READ_2);
  400634:	68e3      	ldr	r3, [r4, #12]
  400636:	2230      	movs	r2, #48	; 0x30
  400638:	701a      	strb	r2, [r3, #0]
	}

	/* make sure ready */
	delay_us(30);
  40063a:	f44f 7081 	mov.w	r0, #258	; 0x102
  40063e:	4b1c      	ldr	r3, [pc, #112]	; (4006b0 <nand_flash_raw_read_page+0xf4>)
  400640:	4798      	blx	r3
	/* Wait for the NAND to be ready */
	wait_ready();
  400642:	4b1c      	ldr	r3, [pc, #112]	; (4006b4 <nand_flash_raw_read_page+0xf8>)
  400644:	4798      	blx	r3

	/* Read data area if needed */
	if (data) {
  400646:	b196      	cbz	r6, 40066e <nand_flash_raw_read_page+0xb2>
		WRITE_COMMAND(raw, NAND_COMMAND_READ_1);
  400648:	68e3      	ldr	r3, [r4, #12]
  40064a:	2200      	movs	r2, #0
  40064c:	701a      	strb	r2, [r3, #0]
		/* make sure ready */
		delay_us(1);
  40064e:	2009      	movs	r0, #9
  400650:	4b17      	ldr	r3, [pc, #92]	; (4006b0 <nand_flash_raw_read_page+0xf4>)
  400652:	4798      	blx	r3

		read_data(raw, data, page_data_size);
  400654:	463a      	mov	r2, r7
  400656:	4631      	mov	r1, r6
  400658:	4620      	mov	r0, r4
  40065a:	4b17      	ldr	r3, [pc, #92]	; (4006b8 <nand_flash_raw_read_page+0xfc>)
  40065c:	4798      	blx	r3

		if (spare) {
  40065e:	9b08      	ldr	r3, [sp, #32]
  400660:	b16b      	cbz	r3, 40067e <nand_flash_raw_read_page+0xc2>
			read_data(raw, spare, page_spare_size);
  400662:	464a      	mov	r2, r9
  400664:	4619      	mov	r1, r3
  400666:	4620      	mov	r0, r4
  400668:	4b13      	ldr	r3, [pc, #76]	; (4006b8 <nand_flash_raw_read_page+0xfc>)
  40066a:	4798      	blx	r3
  40066c:	e007      	b.n	40067e <nand_flash_raw_read_page+0xc2>
		}
	} else {
		/* Read spare area only */
		WRITE_COMMAND(raw, NAND_COMMAND_READ_1);
  40066e:	68e3      	ldr	r3, [r4, #12]
  400670:	2200      	movs	r2, #0
  400672:	701a      	strb	r2, [r3, #0]
		read_data(raw, spare, page_spare_size);
  400674:	464a      	mov	r2, r9
  400676:	9908      	ldr	r1, [sp, #32]
  400678:	4620      	mov	r0, r4
  40067a:	4b0f      	ldr	r3, [pc, #60]	; (4006b8 <nand_flash_raw_read_page+0xfc>)
  40067c:	4798      	blx	r3
	}

	/* Disable CE */
	DISABLE_CE(raw);
  40067e:	204e      	movs	r0, #78	; 0x4e
  400680:	4b0e      	ldr	r3, [pc, #56]	; (4006bc <nand_flash_raw_read_page+0x100>)
  400682:	4798      	blx	r3
}
  400684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* to read spare area in sequential access */
		col_address = page_data_size;
	}

	/* Use either small blocks or large blocks data area read */
	if (small_block) {
  400688:	f1b8 0f00 	cmp.w	r8, #0
  40068c:	d1b5      	bne.n	4005fa <nand_flash_raw_read_page+0x3e>

	/* Start operation */
	ENABLE_CE(raw);

	if (data) {
		col_address = 0;
  40068e:	2100      	movs	r1, #0
  400690:	e7c5      	b.n	40061e <nand_flash_raw_read_page+0x62>
  400692:	bf00      	nop
  400694:	00400269 	.word	0x00400269
  400698:	0040024d 	.word	0x0040024d
  40069c:	00400251 	.word	0x00400251
  4006a0:	00400239 	.word	0x00400239
  4006a4:	004053d5 	.word	0x004053d5
  4006a8:	004003c5 	.word	0x004003c5
  4006ac:	004002a5 	.word	0x004002a5
  4006b0:	20000001 	.word	0x20000001
  4006b4:	00400291 	.word	0x00400291
  4006b8:	004002d5 	.word	0x004002d5
  4006bc:	004053b9 	.word	0x004053b9

004006c0 <nand_flash_raw_write_page>:
 * \note If one of the buffer pointer is 0, the corresponding area is not
 * written.
 */
uint32_t nand_flash_raw_write_page(const struct nand_flash_raw *raw,
		uint16_t block, uint16_t page, uint8_t *data, uint8_t *spare)
{
  4006c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006c4:	b087      	sub	sp, #28
  4006c6:	4604      	mov	r4, r0
  4006c8:	4688      	mov	r8, r1
  4006ca:	4691      	mov	r9, r2
  4006cc:	9301      	str	r3, [sp, #4]
  4006ce:	2502      	movs	r5, #2
static uint32_t write_page(const struct nand_flash_raw *raw,
		uint16_t block, uint16_t page, void *data, void *spare)
{
	uint32_t error = 0;
	uint32_t page_data_size =
			nand_flash_model_get_page_data_size(MODEL(raw));
  4006d0:	f8df b108 	ldr.w	fp, [pc, #264]	; 4007dc <nand_flash_raw_write_page+0x11c>
	uint32_t page_spare_size =
			nand_flash_model_get_page_spare_size(MODEL(raw));
  4006d4:	f8df a108 	ldr.w	sl, [pc, #264]	; 4007e0 <nand_flash_raw_write_page+0x120>
	uint16_t dummy_byte;
	uint32_t row_address;

	/* Calculate physical address of the page */
	row_address = block *
			nand_flash_model_get_block_size_in_pages(MODEL(raw)) + page;
  4006d8:	4e37      	ldr	r6, [pc, #220]	; (4007b8 <nand_flash_raw_write_page+0xf8>)
static uint32_t write_page(const struct nand_flash_raw *raw,
		uint16_t block, uint16_t page, void *data, void *spare)
{
	uint32_t error = 0;
	uint32_t page_data_size =
			nand_flash_model_get_page_data_size(MODEL(raw));
  4006da:	4620      	mov	r0, r4
  4006dc:	47d8      	blx	fp
  4006de:	9002      	str	r0, [sp, #8]
	uint32_t page_spare_size =
			nand_flash_model_get_page_spare_size(MODEL(raw));
  4006e0:	4620      	mov	r0, r4
  4006e2:	47d0      	blx	sl
  4006e4:	9003      	str	r0, [sp, #12]
	uint16_t dummy_byte;
	uint32_t row_address;

	/* Calculate physical address of the page */
	row_address = block *
			nand_flash_model_get_block_size_in_pages(MODEL(raw)) + page;
  4006e6:	4620      	mov	r0, r4
  4006e8:	47b0      	blx	r6
			nand_flash_model_get_page_spare_size(MODEL(raw));
	uint16_t dummy_byte;
	uint32_t row_address;

	/* Calculate physical address of the page */
	row_address = block *
  4006ea:	fb00 9708 	mla	r7, r0, r8, r9
			nand_flash_model_get_block_size_in_pages(MODEL(raw)) + page;

	/* Start write operation */
	ENABLE_CE(raw);
  4006ee:	204e      	movs	r0, #78	; 0x4e
  4006f0:	4b32      	ldr	r3, [pc, #200]	; (4007bc <nand_flash_raw_write_page+0xfc>)
  4006f2:	4798      	blx	r3

	/* Write data area if needed */
	if (data) {
  4006f4:	9b01      	ldr	r3, [sp, #4]
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d046      	beq.n	400788 <nand_flash_raw_write_page+0xc8>
		WRITE_COMMAND(raw, NAND_COMMAND_WRITE_1);
  4006fa:	68e3      	ldr	r3, [r4, #12]
  4006fc:	2280      	movs	r2, #128	; 0x80
  4006fe:	701a      	strb	r2, [r3, #0]
		write_column_address(raw, 0);
  400700:	2100      	movs	r1, #0
  400702:	4620      	mov	r0, r4
  400704:	4b2e      	ldr	r3, [pc, #184]	; (4007c0 <nand_flash_raw_write_page+0x100>)
  400706:	4798      	blx	r3
		write_row_address(raw, row_address);
  400708:	4639      	mov	r1, r7
  40070a:	4620      	mov	r0, r4
  40070c:	4b2d      	ldr	r3, [pc, #180]	; (4007c4 <nand_flash_raw_write_page+0x104>)
  40070e:	4798      	blx	r3
		write_data(raw, (uint8_t *)data, page_data_size);
  400710:	9a02      	ldr	r2, [sp, #8]
  400712:	9901      	ldr	r1, [sp, #4]
  400714:	4620      	mov	r0, r4
  400716:	4b2c      	ldr	r3, [pc, #176]	; (4007c8 <nand_flash_raw_write_page+0x108>)
  400718:	4798      	blx	r3

		/* Spare is written here as well since it is more efficient */
		if (spare) {
  40071a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40071c:	b12b      	cbz	r3, 40072a <nand_flash_raw_write_page+0x6a>
			write_data(raw, (uint8_t *)spare, page_spare_size);
  40071e:	9a03      	ldr	r2, [sp, #12]
  400720:	4619      	mov	r1, r3
  400722:	4620      	mov	r0, r4
  400724:	4b28      	ldr	r3, [pc, #160]	; (4007c8 <nand_flash_raw_write_page+0x108>)
  400726:	4798      	blx	r3
  400728:	e005      	b.n	400736 <nand_flash_raw_write_page+0x76>
			 * ECC results are available as soon as the counter reaches the
			 * end of the main area. But when reach page size for an example,
			 * it could not generate last ECC_PR. The workaround is to receive
			 * page size plus one.
			 */
			read_data(raw, (uint8_t *)(&dummy_byte), 2);
  40072a:	2202      	movs	r2, #2
  40072c:	f10d 0116 	add.w	r1, sp, #22
  400730:	4620      	mov	r0, r4
  400732:	4b26      	ldr	r3, [pc, #152]	; (4007cc <nand_flash_raw_write_page+0x10c>)
  400734:	4798      	blx	r3
		}

		WRITE_COMMAND(raw, NAND_COMMAND_WRITE_2);
  400736:	68e3      	ldr	r3, [r4, #12]
  400738:	2210      	movs	r2, #16
  40073a:	701a      	strb	r2, [r3, #0]

		wait_ready();
  40073c:	4b24      	ldr	r3, [pc, #144]	; (4007d0 <nand_flash_raw_write_page+0x110>)
  40073e:	4798      	blx	r3
		if (!check_status(raw)) {
  400740:	4620      	mov	r0, r4
  400742:	4b24      	ldr	r3, [pc, #144]	; (4007d4 <nand_flash_raw_write_page+0x114>)
  400744:	4798      	blx	r3
  400746:	2800      	cmp	r0, #0
  400748:	d02b      	beq.n	4007a2 <nand_flash_raw_write_page+0xe2>
  40074a:	e02e      	b.n	4007aa <nand_flash_raw_write_page+0xea>
		}
	}

	/* Write spare area alone if needed */
	if (spare && (!data)) {
		WRITE_COMMAND(raw, NAND_COMMAND_WRITE_1);
  40074c:	68e3      	ldr	r3, [r4, #12]
  40074e:	2280      	movs	r2, #128	; 0x80
  400750:	701a      	strb	r2, [r3, #0]
		write_column_address(raw, page_data_size);
  400752:	9902      	ldr	r1, [sp, #8]
  400754:	4620      	mov	r0, r4
  400756:	4b1a      	ldr	r3, [pc, #104]	; (4007c0 <nand_flash_raw_write_page+0x100>)
  400758:	4798      	blx	r3
		write_row_address(raw, row_address);
  40075a:	4639      	mov	r1, r7
  40075c:	4620      	mov	r0, r4
  40075e:	4b19      	ldr	r3, [pc, #100]	; (4007c4 <nand_flash_raw_write_page+0x104>)
  400760:	4798      	blx	r3
		write_data(raw, (uint8_t *)spare, page_spare_size);
  400762:	9a03      	ldr	r2, [sp, #12]
  400764:	9910      	ldr	r1, [sp, #64]	; 0x40
  400766:	4620      	mov	r0, r4
  400768:	4b17      	ldr	r3, [pc, #92]	; (4007c8 <nand_flash_raw_write_page+0x108>)
  40076a:	4798      	blx	r3
		WRITE_COMMAND(raw, NAND_COMMAND_WRITE_2);
  40076c:	68e3      	ldr	r3, [r4, #12]
  40076e:	2210      	movs	r2, #16
  400770:	701a      	strb	r2, [r3, #0]

		wait_ready();
  400772:	4b17      	ldr	r3, [pc, #92]	; (4007d0 <nand_flash_raw_write_page+0x110>)
  400774:	4798      	blx	r3
		if (!check_status(raw)) {
  400776:	4620      	mov	r0, r4
  400778:	4b16      	ldr	r3, [pc, #88]	; (4007d4 <nand_flash_raw_write_page+0x114>)
  40077a:	4798      	blx	r3
  40077c:	b140      	cbz	r0, 400790 <nand_flash_raw_write_page+0xd0>
  40077e:	e00b      	b.n	400798 <nand_flash_raw_write_page+0xd8>
uint32_t nand_flash_raw_write_page(const struct nand_flash_raw *raw,
		uint16_t block, uint16_t page, uint8_t *data, uint8_t *spare)
{
	uint32_t num_try = CONF_NF_WRITE_NUM_TRY;

	while (num_try > 0) {
  400780:	3d01      	subs	r5, #1
  400782:	d1aa      	bne.n	4006da <nand_flash_raw_write_page+0x1a>
		}

		num_try--;
	}

	return NAND_COMMON_ERROR_BADBLOCK;
  400784:	200c      	movs	r0, #12
  400786:	e014      	b.n	4007b2 <nand_flash_raw_write_page+0xf2>
			error = NAND_COMMON_ERROR_CANNOTWRITE;
		}
	}

	/* Write spare area alone if needed */
	if (spare && (!data)) {
  400788:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40078a:	2b00      	cmp	r3, #0
  40078c:	d1de      	bne.n	40074c <nand_flash_raw_write_page+0x8c>
  40078e:	e003      	b.n	400798 <nand_flash_raw_write_page+0xd8>
			error = NAND_COMMON_ERROR_CANNOTWRITE;
		}
	}

	/* Disable chip */
	DISABLE_CE(raw);
  400790:	204e      	movs	r0, #78	; 0x4e
  400792:	4b11      	ldr	r3, [pc, #68]	; (4007d8 <nand_flash_raw_write_page+0x118>)
  400794:	4798      	blx	r3
  400796:	e7f3      	b.n	400780 <nand_flash_raw_write_page+0xc0>
  400798:	204e      	movs	r0, #78	; 0x4e
  40079a:	4b0f      	ldr	r3, [pc, #60]	; (4007d8 <nand_flash_raw_write_page+0x118>)
  40079c:	4798      	blx	r3
{
	uint32_t num_try = CONF_NF_WRITE_NUM_TRY;

	while (num_try > 0) {
		if (!write_page(raw, block, page, data, spare)) {
			return 0;
  40079e:	2000      	movs	r0, #0
  4007a0:	e007      	b.n	4007b2 <nand_flash_raw_write_page+0xf2>
			error = NAND_COMMON_ERROR_CANNOTWRITE;
		}
	}

	/* Disable chip */
	DISABLE_CE(raw);
  4007a2:	204e      	movs	r0, #78	; 0x4e
  4007a4:	4b0c      	ldr	r3, [pc, #48]	; (4007d8 <nand_flash_raw_write_page+0x118>)
  4007a6:	4798      	blx	r3
  4007a8:	e7ea      	b.n	400780 <nand_flash_raw_write_page+0xc0>
  4007aa:	204e      	movs	r0, #78	; 0x4e
  4007ac:	4b0a      	ldr	r3, [pc, #40]	; (4007d8 <nand_flash_raw_write_page+0x118>)
  4007ae:	4798      	blx	r3
{
	uint32_t num_try = CONF_NF_WRITE_NUM_TRY;

	while (num_try > 0) {
		if (!write_page(raw, block, page, data, spare)) {
			return 0;
  4007b0:	2000      	movs	r0, #0

		num_try--;
	}

	return NAND_COMMON_ERROR_BADBLOCK;
}
  4007b2:	b007      	add	sp, #28
  4007b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4007b8:	00400239 	.word	0x00400239
  4007bc:	004053d5 	.word	0x004053d5
  4007c0:	004003c5 	.word	0x004003c5
  4007c4:	004002a5 	.word	0x004002a5
  4007c8:	00400349 	.word	0x00400349
  4007cc:	004002d5 	.word	0x004002d5
  4007d0:	00400291 	.word	0x00400291
  4007d4:	00400279 	.word	0x00400279
  4007d8:	004053b9 	.word	0x004053b9
  4007dc:	0040024d 	.word	0x0040024d
  4007e0:	00400251 	.word	0x00400251

004007e4 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  4007e4:	0109      	lsls	r1, r1, #4
  4007e6:	5042      	str	r2, [r0, r1]
  4007e8:	4770      	bx	lr
  4007ea:	bf00      	nop

004007ec <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4007ec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4007f0:	604a      	str	r2, [r1, #4]
  4007f2:	4770      	bx	lr

004007f4 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  4007f4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4007f8:	608a      	str	r2, [r1, #8]
  4007fa:	4770      	bx	lr

004007fc <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4007fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400800:	60ca      	str	r2, [r1, #12]
  400802:	4770      	bx	lr

00400804 <matrix_set_nandflash_cs>:

	p_matrix->MATRIX_SMCNFCS = ul_cs;

#else

	p_matrix->CCFG_SMCNFCS = ul_cs;
  400804:	4b01      	ldr	r3, [pc, #4]	; (40080c <matrix_set_nandflash_cs+0x8>)
  400806:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
  40080a:	4770      	bx	lr
  40080c:	400e0200 	.word	0x400e0200

00400810 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400810:	b4f0      	push	{r4, r5, r6, r7}
  400812:	b08c      	sub	sp, #48	; 0x30
  400814:	4607      	mov	r7, r0
  400816:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400818:	ac01      	add	r4, sp, #4
  40081a:	4d11      	ldr	r5, [pc, #68]	; (400860 <pwm_clocks_generate+0x50>)
  40081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400828:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40082c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40082e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400830:	f852 3b04 	ldr.w	r3, [r2], #4
  400834:	fbb6 f3f3 	udiv	r3, r6, r3
  400838:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40083c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400840:	d905      	bls.n	40084e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  400842:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400844:	280b      	cmp	r0, #11
  400846:	d1f3      	bne.n	400830 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400848:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40084c:	e005      	b.n	40085a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40084e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  400850:	bf94      	ite	ls
  400852:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  400856:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  40085a:	b00c      	add	sp, #48	; 0x30
  40085c:	bcf0      	pop	{r4, r5, r6, r7}
  40085e:	4770      	bx	lr
  400860:	004111f4 	.word	0x004111f4

00400864 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400864:	b570      	push	{r4, r5, r6, lr}
  400866:	4606      	mov	r6, r0
  400868:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40086a:	6808      	ldr	r0, [r1, #0]
  40086c:	b140      	cbz	r0, 400880 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40086e:	6889      	ldr	r1, [r1, #8]
  400870:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <pwm_init+0x48>)
  400872:	4798      	blx	r3
  400874:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400876:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40087a:	4298      	cmp	r0, r3
  40087c:	d101      	bne.n	400882 <pwm_init+0x1e>
  40087e:	e00e      	b.n	40089e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400880:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400882:	6860      	ldr	r0, [r4, #4]
  400884:	b140      	cbz	r0, 400898 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400886:	68a1      	ldr	r1, [r4, #8]
  400888:	4b08      	ldr	r3, [pc, #32]	; (4008ac <pwm_init+0x48>)
  40088a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40088c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400890:	4298      	cmp	r0, r3
  400892:	d007      	beq.n	4008a4 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  400894:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400898:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40089a:	2000      	movs	r0, #0
  40089c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40089e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4008a2:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  4008a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  4008a8:	bd70      	pop	{r4, r5, r6, pc}
  4008aa:	bf00      	nop
  4008ac:	00400811 	.word	0x00400811

004008b0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4008b0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4008b2:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4008b4:	684a      	ldr	r2, [r1, #4]
  4008b6:	f002 020f 	and.w	r2, r2, #15
  4008ba:	8a8c      	ldrh	r4, [r1, #20]
  4008bc:	4322      	orrs	r2, r4
  4008be:	890c      	ldrh	r4, [r1, #8]
  4008c0:	4322      	orrs	r2, r4
  4008c2:	7a8c      	ldrb	r4, [r1, #10]
  4008c4:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4008c8:	7d8c      	ldrb	r4, [r1, #22]
  4008ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4008ce:	7dcc      	ldrb	r4, [r1, #23]
  4008d0:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4008d4:	7e0c      	ldrb	r4, [r1, #24]
  4008d6:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4008da:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4008de:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4008e2:	68ca      	ldr	r2, [r1, #12]
  4008e4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4008e8:	690a      	ldr	r2, [r1, #16]
  4008ea:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4008ee:	7d8a      	ldrb	r2, [r1, #22]
  4008f0:	b13a      	cbz	r2, 400902 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4008f2:	8b8c      	ldrh	r4, [r1, #28]
  4008f4:	8b4a      	ldrh	r2, [r1, #26]
  4008f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4008fa:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4008fe:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  400902:	6c84      	ldr	r4, [r0, #72]	; 0x48
  400904:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  400908:	409a      	lsls	r2, r3
  40090a:	43d2      	mvns	r2, r2
  40090c:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400910:	7fcc      	ldrb	r4, [r1, #31]
  400912:	fa04 f603 	lsl.w	r6, r4, r3
  400916:	7f8c      	ldrb	r4, [r1, #30]
  400918:	409c      	lsls	r4, r3
  40091a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40091e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  400920:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  400922:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400924:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400926:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40092a:	fa04 f503 	lsl.w	r5, r4, r3
  40092e:	f891 4020 	ldrb.w	r4, [r1, #32]
  400932:	409c      	lsls	r4, r3
  400934:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400938:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  40093a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40093c:	2201      	movs	r2, #1
  40093e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  400940:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400944:	b11c      	cbz	r4, 40094e <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  400946:	6a04      	ldr	r4, [r0, #32]
  400948:	4314      	orrs	r4, r2
  40094a:	6204      	str	r4, [r0, #32]
  40094c:	e003      	b.n	400956 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40094e:	6a04      	ldr	r4, [r0, #32]
  400950:	ea24 0402 	bic.w	r4, r4, r2
  400954:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400956:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40095a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  40095c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40095e:	bf0c      	ite	eq
  400960:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  400962:	4394      	bicne	r4, r2
  400964:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400966:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40096a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  40096c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40096e:	bf0c      	ite	eq
  400970:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  400974:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  400978:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40097a:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  40097c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40097e:	22ff      	movs	r2, #255	; 0xff
  400980:	409a      	lsls	r2, r3
  400982:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400986:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  40098a:	fa01 f303 	lsl.w	r3, r1, r3
  40098e:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  400990:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400992:	2000      	movs	r0, #0
  400994:	bc70      	pop	{r4, r5, r6}
  400996:	4770      	bx	lr

00400998 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400998:	690b      	ldr	r3, [r1, #16]
  40099a:	4293      	cmp	r3, r2
  40099c:	d307      	bcc.n	4009ae <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  40099e:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  4009a0:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4009a2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4009a6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  4009aa:	2000      	movs	r0, #0
  4009ac:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  4009ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4009b2:	4770      	bx	lr

004009b4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4009b4:	2301      	movs	r3, #1
  4009b6:	fa03 f101 	lsl.w	r1, r3, r1
  4009ba:	6041      	str	r1, [r0, #4]
  4009bc:	4770      	bx	lr
  4009be:	bf00      	nop

004009c0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4009c0:	2301      	movs	r3, #1
  4009c2:	fa03 f101 	lsl.w	r1, r3, r1
  4009c6:	6081      	str	r1, [r0, #8]
  4009c8:	4770      	bx	lr
  4009ca:	bf00      	nop

004009cc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4009cc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4009ce:	0189      	lsls	r1, r1, #6
  4009d0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4009d2:	2402      	movs	r4, #2
  4009d4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4009d6:	f04f 31ff 	mov.w	r1, #4294967295
  4009da:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4009dc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4009de:	605a      	str	r2, [r3, #4]
}
  4009e0:	bc10      	pop	{r4}
  4009e2:	4770      	bx	lr

004009e4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4009e4:	0189      	lsls	r1, r1, #6
  4009e6:	2305      	movs	r3, #5
  4009e8:	5043      	str	r3, [r0, r1]
  4009ea:	4770      	bx	lr

004009ec <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  4009ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4009f0:	614a      	str	r2, [r1, #20]
  4009f2:	4770      	bx	lr

004009f4 <tc_write_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
  4009f4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4009f8:	618a      	str	r2, [r1, #24]
  4009fa:	4770      	bx	lr

004009fc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4009fc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400a00:	61ca      	str	r2, [r1, #28]
  400a02:	4770      	bx	lr

00400a04 <nand_flash_storage_init>:

uint32_t error;

/* Initialize external NAND Flash */
int8_t nand_flash_storage_init(void)
{
  400a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a08:	b082      	sub	sp, #8
	int8_t ret = 0;
	block = 0;
  400a0a:	2100      	movs	r1, #0
  400a0c:	4b29      	ldr	r3, [pc, #164]	; (400ab4 <nand_flash_storage_init+0xb0>)
  400a0e:	8019      	strh	r1, [r3, #0]
	memset(&nf_raw, 0, sizeof(nf_raw));
  400a10:	4829      	ldr	r0, [pc, #164]	; (400ab8 <nand_flash_storage_init+0xb4>)
  400a12:	6001      	str	r1, [r0, #0]
  400a14:	6041      	str	r1, [r0, #4]
  400a16:	6081      	str	r1, [r0, #8]
  400a18:	60c1      	str	r1, [r0, #12]
  400a1a:	6101      	str	r1, [r0, #16]
  400a1c:	6141      	str	r1, [r0, #20]

	if (nand_flash_raw_initialize(&nf_raw, 0, cmd_address,
  400a1e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  400a22:	9300      	str	r3, [sp, #0]
  400a24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400a28:	4a24      	ldr	r2, [pc, #144]	; (400abc <nand_flash_storage_init+0xb8>)
  400a2a:	4c25      	ldr	r4, [pc, #148]	; (400ac0 <nand_flash_storage_init+0xbc>)
  400a2c:	47a0      	blx	r4
  400a2e:	b128      	cbz	r0, 400a3c <nand_flash_storage_init+0x38>
	addr_address, data_address)) {

		printf("-E- Device Unknown\r\n");
  400a30:	4824      	ldr	r0, [pc, #144]	; (400ac4 <nand_flash_storage_init+0xc0>)
  400a32:	4b25      	ldr	r3, [pc, #148]	; (400ac8 <nand_flash_storage_init+0xc4>)
  400a34:	4798      	blx	r3
		ret = -1;
  400a36:	f04f 3aff 	mov.w	sl, #4294967295
  400a3a:	e004      	b.n	400a46 <nand_flash_storage_init+0x42>
	} else {
		printf("-I- NAND Flash driver initialized\r\n");
  400a3c:	4823      	ldr	r0, [pc, #140]	; (400acc <nand_flash_storage_init+0xc8>)
  400a3e:	4b22      	ldr	r3, [pc, #136]	; (400ac8 <nand_flash_storage_init+0xc4>)
  400a40:	4798      	blx	r3
uint32_t error;

/* Initialize external NAND Flash */
int8_t nand_flash_storage_init(void)
{
	int8_t ret = 0;
  400a42:	f04f 0a00 	mov.w	sl, #0
	} else {
		printf("-I- NAND Flash driver initialized\r\n");
	}

	/* Get device parameters */
	mem_size = nand_flash_model_get_device_size_in_bytes(&nf_raw.model);
  400a46:	4c1c      	ldr	r4, [pc, #112]	; (400ab8 <nand_flash_storage_init+0xb4>)
  400a48:	4620      	mov	r0, r4
  400a4a:	4b21      	ldr	r3, [pc, #132]	; (400ad0 <nand_flash_storage_init+0xcc>)
  400a4c:	4798      	blx	r3
  400a4e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400b08 <nand_flash_storage_init+0x104>
  400a52:	f8c9 0000 	str.w	r0, [r9]
	block_size = nand_flash_model_get_block_size_in_bytes(&nf_raw.model);
  400a56:	4620      	mov	r0, r4
  400a58:	4b1e      	ldr	r3, [pc, #120]	; (400ad4 <nand_flash_storage_init+0xd0>)
  400a5a:	4798      	blx	r3
  400a5c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 400b0c <nand_flash_storage_init+0x108>
  400a60:	f8c8 0000 	str.w	r0, [r8]
	num_block = nand_flash_model_get_device_size_in_blocks(&nf_raw.model);
  400a64:	4620      	mov	r0, r4
  400a66:	4b1c      	ldr	r3, [pc, #112]	; (400ad8 <nand_flash_storage_init+0xd4>)
  400a68:	4798      	blx	r3
  400a6a:	4f1c      	ldr	r7, [pc, #112]	; (400adc <nand_flash_storage_init+0xd8>)
  400a6c:	6038      	str	r0, [r7, #0]
	page_size = nand_flash_model_get_page_data_size(&nf_raw.model);
  400a6e:	4620      	mov	r0, r4
  400a70:	4b1b      	ldr	r3, [pc, #108]	; (400ae0 <nand_flash_storage_init+0xdc>)
  400a72:	4798      	blx	r3
  400a74:	4e1b      	ldr	r6, [pc, #108]	; (400ae4 <nand_flash_storage_init+0xe0>)
  400a76:	6030      	str	r0, [r6, #0]
	pages_per_block = nand_flash_model_get_block_size_in_pages(&nf_raw.model);
  400a78:	4620      	mov	r0, r4
  400a7a:	4b1b      	ldr	r3, [pc, #108]	; (400ae8 <nand_flash_storage_init+0xe4>)
  400a7c:	4798      	blx	r3
  400a7e:	4d1b      	ldr	r5, [pc, #108]	; (400aec <nand_flash_storage_init+0xe8>)
  400a80:	6028      	str	r0, [r5, #0]

	printf("-I- Size of the whole device in bytes : 0x%x \r\n", mem_size);
  400a82:	f8d9 1000 	ldr.w	r1, [r9]
  400a86:	481a      	ldr	r0, [pc, #104]	; (400af0 <nand_flash_storage_init+0xec>)
  400a88:	4c0f      	ldr	r4, [pc, #60]	; (400ac8 <nand_flash_storage_init+0xc4>)
  400a8a:	47a0      	blx	r4
	printf("-I- Size in bytes of one single block of a device : 0x%x \r\n",	block_size);
  400a8c:	f8d8 1000 	ldr.w	r1, [r8]
  400a90:	4818      	ldr	r0, [pc, #96]	; (400af4 <nand_flash_storage_init+0xf0>)
  400a92:	47a0      	blx	r4
	printf("-I- Number of blocks in the entire device : 0x%x \r\n",	num_block);
  400a94:	6839      	ldr	r1, [r7, #0]
  400a96:	4818      	ldr	r0, [pc, #96]	; (400af8 <nand_flash_storage_init+0xf4>)
  400a98:	47a0      	blx	r4
	printf("-I- Number of blocks used by the application : 0x%x \r\n", BLOCK_USAGE);
  400a9a:	210a      	movs	r1, #10
  400a9c:	4817      	ldr	r0, [pc, #92]	; (400afc <nand_flash_storage_init+0xf8>)
  400a9e:	47a0      	blx	r4
	printf("-I- Size of the data area of a page in bytes : 0x%x \r\n", page_size);
  400aa0:	6831      	ldr	r1, [r6, #0]
  400aa2:	4817      	ldr	r0, [pc, #92]	; (400b00 <nand_flash_storage_init+0xfc>)
  400aa4:	47a0      	blx	r4
	printf("-I- Number of pages in the entire device : 0x%x \r\n", pages_per_block);
  400aa6:	6829      	ldr	r1, [r5, #0]
  400aa8:	4816      	ldr	r0, [pc, #88]	; (400b04 <nand_flash_storage_init+0x100>)
  400aaa:	47a0      	blx	r4
	
	// TODO: Bad block handling
	
	return ret;
}
  400aac:	4650      	mov	r0, sl
  400aae:	b002      	add	sp, #8
  400ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ab4:	2000ad58 	.word	0x2000ad58
  400ab8:	200008f0 	.word	0x200008f0
  400abc:	60400000 	.word	0x60400000
  400ac0:	0040047d 	.word	0x0040047d
  400ac4:	00411220 	.word	0x00411220
  400ac8:	00408a5d 	.word	0x00408a5d
  400acc:	00411238 	.word	0x00411238
  400ad0:	00400231 	.word	0x00400231
  400ad4:	00400245 	.word	0x00400245
  400ad8:	00400205 	.word	0x00400205
  400adc:	20000908 	.word	0x20000908
  400ae0:	0040024d 	.word	0x0040024d
  400ae4:	20000910 	.word	0x20000910
  400ae8:	00400239 	.word	0x00400239
  400aec:	20000914 	.word	0x20000914
  400af0:	0041125c 	.word	0x0041125c
  400af4:	0041128c 	.word	0x0041128c
  400af8:	004112c8 	.word	0x004112c8
  400afc:	004112fc 	.word	0x004112fc
  400b00:	00411334 	.word	0x00411334
  400b04:	0041136c 	.word	0x0041136c
  400b08:	200008ec 	.word	0x200008ec
  400b0c:	2000090c 	.word	0x2000090c

00400b10 <nand_flash_storage_write>:

/* Write a page to the first good block in the NAND flash */
int8_t nand_flash_storage_write(uint8_t* buf, uint8_t size)
{
  400b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400b14:	b083      	sub	sp, #12
  400b16:	4605      	mov	r5, r0
  400b18:	460c      	mov	r4, r1
	if(size > PAGE_SIZE)
		size = PAGE_SIZE;
	
	uint8_t ret = 0;
	error = -1;
  400b1a:	f04f 32ff 	mov.w	r2, #4294967295
  400b1e:	4b27      	ldr	r3, [pc, #156]	; (400bbc <nand_flash_storage_write+0xac>)
  400b20:	601a      	str	r2, [r3, #0]
	/* Prepare buffer in SRAM. */
	if(DEBUG) printf("-I- Preparing buffer in SRAM ...\r\n");
  400b22:	4827      	ldr	r0, [pc, #156]	; (400bc0 <nand_flash_storage_write+0xb0>)
  400b24:	4b27      	ldr	r3, [pc, #156]	; (400bc4 <nand_flash_storage_write+0xb4>)
  400b26:	4798      	blx	r3
	write_buffer[0] = size;								//First byte is size of data block 
  400b28:	4827      	ldr	r0, [pc, #156]	; (400bc8 <nand_flash_storage_write+0xb8>)
  400b2a:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(write_buffer+1,buf,size);
  400b2e:	4622      	mov	r2, r4
  400b30:	4629      	mov	r1, r5
  400b32:	4b26      	ldr	r3, [pc, #152]	; (400bcc <nand_flash_storage_write+0xbc>)
  400b34:	4798      	blx	r3

	/* Select a page. */
	page = 0;
  400b36:	2300      	movs	r3, #0
  400b38:	4a25      	ldr	r2, [pc, #148]	; (400bd0 <nand_flash_storage_write+0xc0>)
  400b3a:	8013      	strh	r3, [r2, #0]
	/* Iterate through blocks until a successful write is performed. Starting from block 0. */
	for (i = 0; i < BLOCK_USAGE; i++) {
  400b3c:	4a25      	ldr	r2, [pc, #148]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400b3e:	6013      	str	r3, [r2, #0]
  400b40:	4619      	mov	r1, r3
  400b42:	4698      	mov	r8, r3
		/* Erase the block in the NAND flash */
		error = nand_flash_raw_erase_block(&nf_raw, i);
  400b44:	4d24      	ldr	r5, [pc, #144]	; (400bd8 <nand_flash_storage_write+0xc8>)
  400b46:	4e25      	ldr	r6, [pc, #148]	; (400bdc <nand_flash_storage_write+0xcc>)
  400b48:	4c1c      	ldr	r4, [pc, #112]	; (400bbc <nand_flash_storage_write+0xac>)
  400b4a:	b289      	uxth	r1, r1
  400b4c:	4628      	mov	r0, r5
  400b4e:	47b0      	blx	r6
  400b50:	6020      	str	r0, [r4, #0]

		if (error == NAND_COMMON_ERROR_BADBLOCK) {
  400b52:	280c      	cmp	r0, #12
  400b54:	d105      	bne.n	400b62 <nand_flash_storage_write+0x52>
			printf("-E- Block %u is BAD block.\r\n", i);
  400b56:	4b1f      	ldr	r3, [pc, #124]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400b58:	6819      	ldr	r1, [r3, #0]
  400b5a:	4821      	ldr	r0, [pc, #132]	; (400be0 <nand_flash_storage_write+0xd0>)
  400b5c:	4b19      	ldr	r3, [pc, #100]	; (400bc4 <nand_flash_storage_write+0xb4>)
  400b5e:	4798      	blx	r3
  400b60:	e01f      	b.n	400ba2 <nand_flash_storage_write+0x92>
			ret = -1;
		} else {
			/* Write a page to the NAND Flash. */
			if(DEBUG) printf("-I- Writing the buffer in page %d of block %d without ECC\r\n", page, i);
  400b62:	4f1c      	ldr	r7, [pc, #112]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400b64:	f8df 9068 	ldr.w	r9, [pc, #104]	; 400bd0 <nand_flash_storage_write+0xc0>
  400b68:	683a      	ldr	r2, [r7, #0]
  400b6a:	f8b9 1000 	ldrh.w	r1, [r9]
  400b6e:	481d      	ldr	r0, [pc, #116]	; (400be4 <nand_flash_storage_write+0xd4>)
  400b70:	4b14      	ldr	r3, [pc, #80]	; (400bc4 <nand_flash_storage_write+0xb4>)
  400b72:	4798      	blx	r3
			error = nand_flash_raw_write_page(&nf_raw, i, page, write_buffer, 0);
  400b74:	f8b9 2000 	ldrh.w	r2, [r9]
  400b78:	8839      	ldrh	r1, [r7, #0]
  400b7a:	2300      	movs	r3, #0
  400b7c:	9300      	str	r3, [sp, #0]
  400b7e:	4b12      	ldr	r3, [pc, #72]	; (400bc8 <nand_flash_storage_write+0xb8>)
  400b80:	4628      	mov	r0, r5
  400b82:	4f19      	ldr	r7, [pc, #100]	; (400be8 <nand_flash_storage_write+0xd8>)
  400b84:	47b8      	blx	r7
  400b86:	6020      	str	r0, [r4, #0]
			if (!error) {
  400b88:	b920      	cbnz	r0, 400b94 <nand_flash_storage_write+0x84>
				block = i;
  400b8a:	4b12      	ldr	r3, [pc, #72]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400b8c:	681a      	ldr	r2, [r3, #0]
  400b8e:	4b17      	ldr	r3, [pc, #92]	; (400bec <nand_flash_storage_write+0xdc>)
  400b90:	801a      	strh	r2, [r3, #0]
				break;
  400b92:	e00e      	b.n	400bb2 <nand_flash_storage_write+0xa2>
			}
			printf("-E- Cannot write page %d of block %d. Trying next block...\r\n", page, i);
  400b94:	4b0f      	ldr	r3, [pc, #60]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400b96:	681a      	ldr	r2, [r3, #0]
  400b98:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <nand_flash_storage_write+0xc0>)
  400b9a:	8819      	ldrh	r1, [r3, #0]
  400b9c:	4814      	ldr	r0, [pc, #80]	; (400bf0 <nand_flash_storage_write+0xe0>)
  400b9e:	4b09      	ldr	r3, [pc, #36]	; (400bc4 <nand_flash_storage_write+0xb4>)
  400ba0:	4798      	blx	r3
	memcpy(write_buffer+1,buf,size);

	/* Select a page. */
	page = 0;
	/* Iterate through blocks until a successful write is performed. Starting from block 0. */
	for (i = 0; i < BLOCK_USAGE; i++) {
  400ba2:	4b0c      	ldr	r3, [pc, #48]	; (400bd4 <nand_flash_storage_write+0xc4>)
  400ba4:	6819      	ldr	r1, [r3, #0]
  400ba6:	3101      	adds	r1, #1
  400ba8:	6019      	str	r1, [r3, #0]
  400baa:	f04f 08ff 	mov.w	r8, #255	; 0xff
  400bae:	2909      	cmp	r1, #9
  400bb0:	d9cb      	bls.n	400b4a <nand_flash_storage_write+0x3a>
			printf("-E- Cannot write page %d of block %d. Trying next block...\r\n", page, i);
			ret = -1;
		}
	}
	return ret;
}
  400bb2:	fa4f f088 	sxtb.w	r0, r8
  400bb6:	b003      	add	sp, #12
  400bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400bbc:	2000b5a0 	.word	0x2000b5a0
  400bc0:	004113a0 	.word	0x004113a0
  400bc4:	00408a5d 	.word	0x00408a5d
  400bc8:	2000b5a8 	.word	0x2000b5a8
  400bcc:	00409015 	.word	0x00409015
  400bd0:	2000b5a4 	.word	0x2000b5a4
  400bd4:	2000ad5c 	.word	0x2000ad5c
  400bd8:	200008f0 	.word	0x200008f0
  400bdc:	00400541 	.word	0x00400541
  400be0:	004113c4 	.word	0x004113c4
  400be4:	004113e4 	.word	0x004113e4
  400be8:	004006c1 	.word	0x004006c1
  400bec:	2000ad58 	.word	0x2000ad58
  400bf0:	00411420 	.word	0x00411420

00400bf4 <nand_flash_storage_read>:

/* Read a page from the first good block in the NAND flash */
int16_t nand_flash_storage_read(uint8_t* buf)
{
  400bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bf8:	b083      	sub	sp, #12
  400bfa:	4680      	mov	r8, r0
	int16_t ret;
	error = 0;
  400bfc:	2300      	movs	r3, #0
  400bfe:	4a1d      	ldr	r2, [pc, #116]	; (400c74 <nand_flash_storage_read+0x80>)
  400c00:	6013      	str	r3, [r2, #0]
	/* Read the data page from the NAND Flash. */
	page = 0;
  400c02:	4a1d      	ldr	r2, [pc, #116]	; (400c78 <nand_flash_storage_read+0x84>)
  400c04:	8013      	strh	r3, [r2, #0]
	/* Iterate through blocks until a successful read is performed. Data is written to the first good block. */
	for (i = block; i < BLOCK_USAGE; i++) {
  400c06:	4b1d      	ldr	r3, [pc, #116]	; (400c7c <nand_flash_storage_read+0x88>)
  400c08:	881a      	ldrh	r2, [r3, #0]
  400c0a:	4b1d      	ldr	r3, [pc, #116]	; (400c80 <nand_flash_storage_read+0x8c>)
  400c0c:	601a      	str	r2, [r3, #0]
  400c0e:	2a09      	cmp	r2, #9
  400c10:	d825      	bhi.n	400c5e <nand_flash_storage_read+0x6a>
		/* Read a page from the NAND Flash. */
		if(DEBUG) printf("-I- Reading page %d of block %d\r\n", page, i);
  400c12:	4d19      	ldr	r5, [pc, #100]	; (400c78 <nand_flash_storage_read+0x84>)
  400c14:	f8df 9088 	ldr.w	r9, [pc, #136]	; 400ca0 <nand_flash_storage_read+0xac>
  400c18:	4e1a      	ldr	r6, [pc, #104]	; (400c84 <nand_flash_storage_read+0x90>)
  400c1a:	8829      	ldrh	r1, [r5, #0]
  400c1c:	4648      	mov	r0, r9
  400c1e:	47b0      	blx	r6
		nand_flash_raw_read_page(&nf_raw, i, page, read_buffer, spare_area_buffer);
  400c20:	882a      	ldrh	r2, [r5, #0]
  400c22:	4b17      	ldr	r3, [pc, #92]	; (400c80 <nand_flash_storage_read+0x8c>)
  400c24:	8819      	ldrh	r1, [r3, #0]
  400c26:	4c18      	ldr	r4, [pc, #96]	; (400c88 <nand_flash_storage_read+0x94>)
  400c28:	9400      	str	r4, [sp, #0]
  400c2a:	4b18      	ldr	r3, [pc, #96]	; (400c8c <nand_flash_storage_read+0x98>)
  400c2c:	4818      	ldr	r0, [pc, #96]	; (400c90 <nand_flash_storage_read+0x9c>)
  400c2e:	4f19      	ldr	r7, [pc, #100]	; (400c94 <nand_flash_storage_read+0xa0>)
  400c30:	47b8      	blx	r7
		if(spare_area_buffer[0] == 0xFF) {
  400c32:	7823      	ldrb	r3, [r4, #0]
  400c34:	2bff      	cmp	r3, #255	; 0xff
  400c36:	d104      	bne.n	400c42 <nand_flash_storage_read+0x4e>
			block = i;
  400c38:	4b11      	ldr	r3, [pc, #68]	; (400c80 <nand_flash_storage_read+0x8c>)
  400c3a:	681a      	ldr	r2, [r3, #0]
  400c3c:	4b0f      	ldr	r3, [pc, #60]	; (400c7c <nand_flash_storage_read+0x88>)
  400c3e:	801a      	strh	r2, [r3, #0]
			break;
  400c40:	e00d      	b.n	400c5e <nand_flash_storage_read+0x6a>
		}
		error = -1;
  400c42:	f04f 32ff 	mov.w	r2, #4294967295
  400c46:	4b0b      	ldr	r3, [pc, #44]	; (400c74 <nand_flash_storage_read+0x80>)
  400c48:	601a      	str	r2, [r3, #0]
		printf("-E- Cannot read page %d of block %d. Trying next block...\r\n", page, i);
  400c4a:	4c0d      	ldr	r4, [pc, #52]	; (400c80 <nand_flash_storage_read+0x8c>)
  400c4c:	6822      	ldr	r2, [r4, #0]
  400c4e:	8829      	ldrh	r1, [r5, #0]
  400c50:	4811      	ldr	r0, [pc, #68]	; (400c98 <nand_flash_storage_read+0xa4>)
  400c52:	47b0      	blx	r6
	int16_t ret;
	error = 0;
	/* Read the data page from the NAND Flash. */
	page = 0;
	/* Iterate through blocks until a successful read is performed. Data is written to the first good block. */
	for (i = block; i < BLOCK_USAGE; i++) {
  400c54:	6822      	ldr	r2, [r4, #0]
  400c56:	3201      	adds	r2, #1
  400c58:	6022      	str	r2, [r4, #0]
  400c5a:	2a09      	cmp	r2, #9
  400c5c:	d9dd      	bls.n	400c1a <nand_flash_storage_read+0x26>
	
	if(error < 0) {
		printf("-E- Could not read any blocks\r\n");
		ret = error;
	} else {
		uint8_t data_size = read_buffer[0];
  400c5e:	490b      	ldr	r1, [pc, #44]	; (400c8c <nand_flash_storage_read+0x98>)
  400c60:	f811 4b01 	ldrb.w	r4, [r1], #1
		memcpy(buf,read_buffer+1,data_size);
  400c64:	4622      	mov	r2, r4
  400c66:	4640      	mov	r0, r8
  400c68:	4b0c      	ldr	r3, [pc, #48]	; (400c9c <nand_flash_storage_read+0xa8>)
  400c6a:	4798      	blx	r3
		ret = data_size;
	}
	return ret;
}
  400c6c:	4620      	mov	r0, r4
  400c6e:	b003      	add	sp, #12
  400c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400c74:	2000b5a0 	.word	0x2000b5a0
  400c78:	2000b5a4 	.word	0x2000b5a4
  400c7c:	2000ad58 	.word	0x2000ad58
  400c80:	2000ad5c 	.word	0x2000ad5c
  400c84:	00408a5d 	.word	0x00408a5d
  400c88:	2000ad60 	.word	0x2000ad60
  400c8c:	2000ada0 	.word	0x2000ada0
  400c90:	200008f0 	.word	0x200008f0
  400c94:	004005bd 	.word	0x004005bd
  400c98:	00411484 	.word	0x00411484
  400c9c:	00409015 	.word	0x00409015
  400ca0:	00411460 	.word	0x00411460

00400ca4 <network_establish_connection>:
		}
	}
}

void network_establish_connection(uint32_t address)
{
  400ca4:	b510      	push	{r4, lr}
  400ca6:	b084      	sub	sp, #16
	int8_t ret;
	struct sockaddr_in addr;
	
	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  400ca8:	2302      	movs	r3, #2
  400caa:	f8ad 3000 	strh.w	r3, [sp]
	addr.sin_port = _htons(GO_PORT);
  400cae:	f640 7327 	movw	r3, #3879	; 0xf27
  400cb2:	f8ad 3002 	strh.w	r3, [sp, #2]
	addr.sin_addr.s_addr = _htonl(address);
  400cb6:	0e03      	lsrs	r3, r0, #24
  400cb8:	ea43 6200 	orr.w	r2, r3, r0, lsl #24
  400cbc:	0203      	lsls	r3, r0, #8
  400cbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  400cc2:	4313      	orrs	r3, r2
  400cc4:	0a00      	lsrs	r0, r0, #8
  400cc6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  400cca:	4318      	orrs	r0, r3
  400ccc:	9001      	str	r0, [sp, #4]
	
	/* Initialize socket module */
	socketInit();
  400cce:	4b18      	ldr	r3, [pc, #96]	; (400d30 <network_establish_connection+0x8c>)
  400cd0:	4798      	blx	r3
	registerSocketCallback(socket_event_handler_cb, NULL);
  400cd2:	2100      	movs	r1, #0
  400cd4:	4817      	ldr	r0, [pc, #92]	; (400d34 <network_establish_connection+0x90>)
  400cd6:	4b18      	ldr	r3, [pc, #96]	; (400d38 <network_establish_connection+0x94>)
  400cd8:	4798      	blx	r3
	
	/* Open client socket. */
	if (tcp_connection_est_socket < 0) {
  400cda:	4b18      	ldr	r3, [pc, #96]	; (400d3c <network_establish_connection+0x98>)
  400cdc:	f993 3000 	ldrsb.w	r3, [r3]
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	da22      	bge.n	400d2a <network_establish_connection+0x86>
		if ((tcp_connection_est_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  400ce4:	2200      	movs	r2, #0
  400ce6:	2101      	movs	r1, #1
  400ce8:	2002      	movs	r0, #2
  400cea:	4b15      	ldr	r3, [pc, #84]	; (400d40 <network_establish_connection+0x9c>)
  400cec:	4798      	blx	r3
  400cee:	4b13      	ldr	r3, [pc, #76]	; (400d3c <network_establish_connection+0x98>)
  400cf0:	7018      	strb	r0, [r3, #0]
  400cf2:	2800      	cmp	r0, #0
  400cf4:	da04      	bge.n	400d00 <network_establish_connection+0x5c>
			printf("-E- Networking: failed to create TCP client socket error!\r\n");
  400cf6:	4813      	ldr	r0, [pc, #76]	; (400d44 <network_establish_connection+0xa0>)
  400cf8:	4b13      	ldr	r3, [pc, #76]	; (400d48 <network_establish_connection+0xa4>)
  400cfa:	4798      	blx	r3
			m2m_wifi_disconnect();
  400cfc:	4b13      	ldr	r3, [pc, #76]	; (400d4c <network_establish_connection+0xa8>)
  400cfe:	4798      	blx	r3
		}

		/* Connect server */
		ret = connect(tcp_connection_est_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
  400d00:	2210      	movs	r2, #16
  400d02:	4669      	mov	r1, sp
  400d04:	4b0d      	ldr	r3, [pc, #52]	; (400d3c <network_establish_connection+0x98>)
  400d06:	f993 0000 	ldrsb.w	r0, [r3]
  400d0a:	4b11      	ldr	r3, [pc, #68]	; (400d50 <network_establish_connection+0xac>)
  400d0c:	4798      	blx	r3

		if (ret < 0) {
  400d0e:	2800      	cmp	r0, #0
  400d10:	da0b      	bge.n	400d2a <network_establish_connection+0x86>
			printf("-E- Networking: failed to connect TCP client socket error!\r\n");
  400d12:	4810      	ldr	r0, [pc, #64]	; (400d54 <network_establish_connection+0xb0>)
  400d14:	4b0c      	ldr	r3, [pc, #48]	; (400d48 <network_establish_connection+0xa4>)
  400d16:	4798      	blx	r3
			close(tcp_connection_est_socket);
  400d18:	4c08      	ldr	r4, [pc, #32]	; (400d3c <network_establish_connection+0x98>)
  400d1a:	f994 0000 	ldrsb.w	r0, [r4]
  400d1e:	4b0e      	ldr	r3, [pc, #56]	; (400d58 <network_establish_connection+0xb4>)
  400d20:	4798      	blx	r3
			tcp_connection_est_socket = -1;
  400d22:	23ff      	movs	r3, #255	; 0xff
  400d24:	7023      	strb	r3, [r4, #0]
			m2m_wifi_disconnect();
  400d26:	4b09      	ldr	r3, [pc, #36]	; (400d4c <network_establish_connection+0xa8>)
  400d28:	4798      	blx	r3
		}
	}	
}
  400d2a:	b004      	add	sp, #16
  400d2c:	bd10      	pop	{r4, pc}
  400d2e:	bf00      	nop
  400d30:	004047f1 	.word	0x004047f1
  400d34:	00400ec9 	.word	0x00400ec9
  400d38:	00404835 	.word	0x00404835
  400d3c:	2000000f 	.word	0x2000000f
  400d40:	00404849 	.word	0x00404849
  400d44:	004114e0 	.word	0x004114e0
  400d48:	00408a5d 	.word	0x00408a5d
  400d4c:	00403321 	.word	0x00403321
  400d50:	00404a25 	.word	0x00404a25
  400d54:	0041151c 	.word	0x0041151c
  400d58:	00404cc1 	.word	0x00404cc1

00400d5c <network_listen_for_commands>:

void network_listen_for_commands(void)
{
  400d5c:	b500      	push	{lr}
  400d5e:	b085      	sub	sp, #20
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  400d60:	4b0e      	ldr	r3, [pc, #56]	; (400d9c <network_listen_for_commands+0x40>)
  400d62:	4798      	blx	r3
	
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  400d64:	2100      	movs	r1, #0
  400d66:	480e      	ldr	r0, [pc, #56]	; (400da0 <network_listen_for_commands+0x44>)
  400d68:	4b0e      	ldr	r3, [pc, #56]	; (400da4 <network_listen_for_commands+0x48>)
  400d6a:	4798      	blx	r3
	
	// Open socket
	udp_command_socket = socket(AF_INET,SOCK_DGRAM,0);
  400d6c:	2200      	movs	r2, #0
  400d6e:	2102      	movs	r1, #2
  400d70:	4608      	mov	r0, r1
  400d72:	4b0d      	ldr	r3, [pc, #52]	; (400da8 <network_listen_for_commands+0x4c>)
  400d74:	4798      	blx	r3
  400d76:	4b0d      	ldr	r3, [pc, #52]	; (400dac <network_listen_for_commands+0x50>)
  400d78:	7018      	strb	r0, [r3, #0]
	
	// Bind socket and listen from any address
	strAddr.sin_family = AF_INET;
  400d7a:	2302      	movs	r3, #2
  400d7c:	f8ad 3000 	strh.w	r3, [sp]
	strAddr.sin_port = _htons(UDP_COMMAND_PORT);
  400d80:	f248 6313 	movw	r3, #34323	; 0x8613
  400d84:	f8ad 3002 	strh.w	r3, [sp, #2]
	strAddr.sin_addr.s_addr = 0; //INADDR_ANY
  400d88:	2300      	movs	r3, #0
  400d8a:	9301      	str	r3, [sp, #4]
	bind(udp_command_socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
  400d8c:	2210      	movs	r2, #16
  400d8e:	4669      	mov	r1, sp
  400d90:	4b07      	ldr	r3, [pc, #28]	; (400db0 <network_listen_for_commands+0x54>)
  400d92:	4798      	blx	r3
}
  400d94:	b005      	add	sp, #20
  400d96:	f85d fb04 	ldr.w	pc, [sp], #4
  400d9a:	bf00      	nop
  400d9c:	004047f1 	.word	0x004047f1
  400da0:	00400ec9 	.word	0x00400ec9
  400da4:	00404835 	.word	0x00404835
  400da8:	00404849 	.word	0x00404849
  400dac:	2000000d 	.word	0x2000000d
  400db0:	00404929 	.word	0x00404929

00400db4 <network_listen_for_settings>:

void network_listen_for_settings(void)
{
  400db4:	b500      	push	{lr}
  400db6:	b085      	sub	sp, #20
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  400db8:	4b0f      	ldr	r3, [pc, #60]	; (400df8 <network_listen_for_settings+0x44>)
  400dba:	4798      	blx	r3
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  400dbc:	2100      	movs	r1, #0
  400dbe:	480f      	ldr	r0, [pc, #60]	; (400dfc <network_listen_for_settings+0x48>)
  400dc0:	4b0f      	ldr	r3, [pc, #60]	; (400e00 <network_listen_for_settings+0x4c>)
  400dc2:	4798      	blx	r3
	// Create the server listen socket.
	tcp_settings_listen_socket = socket(AF_INET, SOCK_STREAM, 0);
  400dc4:	2200      	movs	r2, #0
  400dc6:	2101      	movs	r1, #1
  400dc8:	2002      	movs	r0, #2
  400dca:	4b0e      	ldr	r3, [pc, #56]	; (400e04 <network_listen_for_settings+0x50>)
  400dcc:	4798      	blx	r3
  400dce:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <network_listen_for_settings+0x54>)
  400dd0:	7018      	strb	r0, [r3, #0]
	if(tcp_settings_listen_socket >= 0)
  400dd2:	2800      	cmp	r0, #0
  400dd4:	db0c      	blt.n	400df0 <network_listen_for_settings+0x3c>
	{
		strAddr.sin_family = AF_INET;
  400dd6:	2302      	movs	r3, #2
  400dd8:	f8ad 3000 	strh.w	r3, [sp]
		strAddr.sin_port = _htons(TCP_SETTINGS_PORT);
  400ddc:	f248 7313 	movw	r3, #34579	; 0x8713
  400de0:	f8ad 3002 	strh.w	r3, [sp, #2]
		strAddr.sin_addr.s_addr = 0; //INADDR_ANY
  400de4:	2300      	movs	r3, #0
  400de6:	9301      	str	r3, [sp, #4]
		
		bind(tcp_settings_listen_socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
  400de8:	2210      	movs	r2, #16
  400dea:	4669      	mov	r1, sp
  400dec:	4b07      	ldr	r3, [pc, #28]	; (400e0c <network_listen_for_settings+0x58>)
  400dee:	4798      	blx	r3
	}
}
  400df0:	b005      	add	sp, #20
  400df2:	f85d fb04 	ldr.w	pc, [sp], #4
  400df6:	bf00      	nop
  400df8:	004047f1 	.word	0x004047f1
  400dfc:	00400ec9 	.word	0x00400ec9
  400e00:	00404835 	.word	0x00404835
  400e04:	00404849 	.word	0x00404849
  400e08:	2000000e 	.word	0x2000000e
  400e0c:	00404929 	.word	0x00404929

00400e10 <network_send_status>:

void network_send_status(char* msg, uint32_t address)
{
  400e10:	b570      	push	{r4, r5, r6, lr}
  400e12:	b0c6      	sub	sp, #280	; 0x118
  400e14:	4606      	mov	r6, r0
  400e16:	460c      	mov	r4, r1
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  400e18:	4b1b      	ldr	r3, [pc, #108]	; (400e88 <network_send_status+0x78>)
  400e1a:	4798      	blx	r3
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  400e1c:	2100      	movs	r1, #0
  400e1e:	481b      	ldr	r0, [pc, #108]	; (400e8c <network_send_status+0x7c>)
  400e20:	4b1b      	ldr	r3, [pc, #108]	; (400e90 <network_send_status+0x80>)
  400e22:	4798      	blx	r3
	udp_status_socket = socket(AF_INET,SOCK_DGRAM,0);
  400e24:	2200      	movs	r2, #0
  400e26:	2102      	movs	r1, #2
  400e28:	4608      	mov	r0, r1
  400e2a:	4b1a      	ldr	r3, [pc, #104]	; (400e94 <network_send_status+0x84>)
  400e2c:	4798      	blx	r3
  400e2e:	4b1a      	ldr	r3, [pc, #104]	; (400e98 <network_send_status+0x88>)
  400e30:	7018      	strb	r0, [r3, #0]
	if(udp_status_socket >= 0)
  400e32:	2800      	cmp	r0, #0
  400e34:	db26      	blt.n	400e84 <network_send_status+0x74>
  400e36:	4605      	mov	r5, r0
	{
	strAddr.sin_family = AF_INET;
  400e38:	2302      	movs	r3, #2
  400e3a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
	strAddr.sin_port = _htons(host_udp_port);
  400e3e:	4b17      	ldr	r3, [pc, #92]	; (400e9c <network_send_status+0x8c>)
  400e40:	881a      	ldrh	r2, [r3, #0]
  400e42:	0a13      	lsrs	r3, r2, #8
  400e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e48:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
	strAddr.sin_addr.s_addr = _htonl(address);
  400e4c:	0e23      	lsrs	r3, r4, #24
  400e4e:	ea43 6204 	orr.w	r2, r3, r4, lsl #24
  400e52:	0223      	lsls	r3, r4, #8
  400e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  400e58:	4313      	orrs	r3, r2
  400e5a:	0a24      	lsrs	r4, r4, #8
  400e5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
  400e60:	431c      	orrs	r4, r3
  400e62:	9443      	str	r4, [sp, #268]	; 0x10c
		
	// Fill in data
	s_msg_status status_msg;
	memcpy(status_msg.status,msg,PACKET_SIZE);
  400e64:	24ff      	movs	r4, #255	; 0xff
  400e66:	4622      	mov	r2, r4
  400e68:	4631      	mov	r1, r6
  400e6a:	a802      	add	r0, sp, #8
  400e6c:	4b0c      	ldr	r3, [pc, #48]	; (400ea0 <network_send_status+0x90>)
  400e6e:	4798      	blx	r3

	// Format and send status message
	sendto(udp_status_socket, &status_msg, sizeof(s_msg_status), 0, (struct sockaddr*)&strAddr,
  400e70:	2310      	movs	r3, #16
  400e72:	9301      	str	r3, [sp, #4]
  400e74:	ab42      	add	r3, sp, #264	; 0x108
  400e76:	9300      	str	r3, [sp, #0]
  400e78:	2300      	movs	r3, #0
  400e7a:	4622      	mov	r2, r4
  400e7c:	a902      	add	r1, sp, #8
  400e7e:	4628      	mov	r0, r5
  400e80:	4c08      	ldr	r4, [pc, #32]	; (400ea4 <network_send_status+0x94>)
  400e82:	47a0      	blx	r4
	sizeof(struct sockaddr_in));
	}
}
  400e84:	b046      	add	sp, #280	; 0x118
  400e86:	bd70      	pop	{r4, r5, r6, pc}
  400e88:	004047f1 	.word	0x004047f1
  400e8c:	00400ec9 	.word	0x00400ec9
  400e90:	00404835 	.word	0x00404835
  400e94:	00404849 	.word	0x00404849
  400e98:	2000000c 	.word	0x2000000c
  400e9c:	2000be30 	.word	0x2000be30
  400ea0:	00409015 	.word	0x00409015
  400ea4:	00404b65 	.word	0x00404b65

00400ea8 <network_connected>:

void network_connected(void)
{
  400ea8:	b508      	push	{r3, lr}
	network_is_connected = IS_CONNECTED;
  400eaa:	2201      	movs	r2, #1
  400eac:	4b03      	ldr	r3, [pc, #12]	; (400ebc <network_connected+0x14>)
  400eae:	701a      	strb	r2, [r3, #0]
	network_listen_for_commands();
  400eb0:	4b03      	ldr	r3, [pc, #12]	; (400ec0 <network_connected+0x18>)
  400eb2:	4798      	blx	r3
	network_listen_for_settings();
  400eb4:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <network_connected+0x1c>)
  400eb6:	4798      	blx	r3
  400eb8:	bd08      	pop	{r3, pc}
  400eba:	bf00      	nop
  400ebc:	2000bdb0 	.word	0x2000bdb0
  400ec0:	00400d5d 	.word	0x00400d5d
  400ec4:	00400db5 	.word	0x00400db5

00400ec8 <socket_event_handler_cb>:

/**
 * Callback to handle socket events
 */
static void socket_event_handler_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  400ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ecc:	b0c4      	sub	sp, #272	; 0x110
  400ece:	4615      	mov	r5, r2
	/** Establishing connection */
	if(sock == tcp_connection_est_socket)
  400ed0:	4b98      	ldr	r3, [pc, #608]	; (401134 <socket_event_handler_cb+0x26c>)
  400ed2:	f993 4000 	ldrsb.w	r4, [r3]
  400ed6:	4284      	cmp	r4, r0
  400ed8:	f040 8083 	bne.w	400fe2 <socket_event_handler_cb+0x11a>
	{
		/* Socket connected */
		if(u8Msg == SOCKET_MSG_CONNECT)
  400edc:	2905      	cmp	r1, #5
  400ede:	d156      	bne.n	400f8e <socket_event_handler_cb+0xc6>
		{
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
			if (pstrConnect && pstrConnect->s8Error >= 0) {
  400ee0:	2a00      	cmp	r2, #0
  400ee2:	d047      	beq.n	400f74 <socket_event_handler_cb+0xac>
  400ee4:	f992 3001 	ldrsb.w	r3, [r2, #1]
  400ee8:	2b00      	cmp	r3, #0
  400eea:	db43      	blt.n	400f74 <socket_event_handler_cb+0xac>
				// Perform data exchange.
				s_msg_port port_msg;
				s_msg_settings settings_msg;
			
				// Send UDP command port
				sprintf(port_msg.port, "%d", UDP_COMMAND_PORT);
  400eec:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 4011c8 <socket_event_handler_cb+0x300>
  400ef0:	f241 3286 	movw	r2, #4998	; 0x1386
  400ef4:	4641      	mov	r1, r8
  400ef6:	a803      	add	r0, sp, #12
  400ef8:	4f8f      	ldr	r7, [pc, #572]	; (401138 <socket_event_handler_cb+0x270>)
  400efa:	47b8      	blx	r7
				send(tcp_connection_est_socket, &port_msg, sizeof(s_msg_port), 0);
  400efc:	4e8d      	ldr	r6, [pc, #564]	; (401134 <socket_event_handler_cb+0x26c>)
  400efe:	2300      	movs	r3, #0
  400f00:	2204      	movs	r2, #4
  400f02:	a903      	add	r1, sp, #12
  400f04:	f996 0000 	ldrsb.w	r0, [r6]
  400f08:	4d8c      	ldr	r5, [pc, #560]	; (40113c <socket_event_handler_cb+0x274>)
  400f0a:	47a8      	blx	r5
				
				// Send TCP settings port
				sprintf(port_msg.port, "%d", TCP_SETTINGS_PORT);
  400f0c:	f241 3287 	movw	r2, #4999	; 0x1387
  400f10:	4641      	mov	r1, r8
  400f12:	a803      	add	r0, sp, #12
  400f14:	47b8      	blx	r7
				send(tcp_connection_est_socket, &port_msg, sizeof(s_msg_port), 0);
  400f16:	2300      	movs	r3, #0
  400f18:	2204      	movs	r2, #4
  400f1a:	a903      	add	r1, sp, #12
  400f1c:	f996 0000 	ldrsb.w	r0, [r6]
  400f20:	47a8      	blx	r5
			
				// Send TCP settings port
				sprintf(port_msg.port, "%d", HTTP_VIDEO_PORT);
  400f22:	f241 3285 	movw	r2, #4997	; 0x1385
  400f26:	4641      	mov	r1, r8
  400f28:	a803      	add	r0, sp, #12
  400f2a:	47b8      	blx	r7
				send(tcp_connection_est_socket, &port_msg, sizeof(s_msg_port), 0);
  400f2c:	2300      	movs	r3, #0
  400f2e:	2204      	movs	r2, #4
  400f30:	a903      	add	r1, sp, #12
  400f32:	f996 0000 	ldrsb.w	r0, [r6]
  400f36:	47a8      	blx	r5
			
				// Recv. UDP status port
				recv(sock, TCPConnectionEstRxBuffer, sizeof(TCPConnectionEstRxBuffer), 0);
  400f38:	2300      	movs	r3, #0
  400f3a:	2204      	movs	r2, #4
  400f3c:	4980      	ldr	r1, [pc, #512]	; (401140 <socket_event_handler_cb+0x278>)
  400f3e:	4620      	mov	r0, r4
  400f40:	4c80      	ldr	r4, [pc, #512]	; (401144 <socket_event_handler_cb+0x27c>)
  400f42:	47a0      	blx	r4
				
				// Send current settings
				if(generate_settings_packet(settings_msg.settings, 
  400f44:	4b80      	ldr	r3, [pc, #512]	; (401148 <socket_event_handler_cb+0x280>)
  400f46:	f993 3000 	ldrsb.w	r3, [r3]
  400f4a:	4a80      	ldr	r2, [pc, #512]	; (40114c <socket_event_handler_cb+0x284>)
  400f4c:	f992 2000 	ldrsb.w	r2, [r2]
  400f50:	497f      	ldr	r1, [pc, #508]	; (401150 <socket_event_handler_cb+0x288>)
  400f52:	6809      	ldr	r1, [r1, #0]
  400f54:	487f      	ldr	r0, [pc, #508]	; (401154 <socket_event_handler_cb+0x28c>)
  400f56:	7800      	ldrb	r0, [r0, #0]
  400f58:	9000      	str	r0, [sp, #0]
  400f5a:	a804      	add	r0, sp, #16
  400f5c:	4c7e      	ldr	r4, [pc, #504]	; (401158 <socket_event_handler_cb+0x290>)
  400f5e:	47a0      	blx	r4
  400f60:	2800      	cmp	r0, #0
  400f62:	f000 8160 	beq.w	401226 <socket_event_handler_cb+0x35e>
											device_name,
											iPower_save_mode,
											iAssisted_drive_mode,
											uiVideo_quality)) {
					send(tcp_connection_est_socket,&settings_msg,sizeof(s_msg_settings), 0);
  400f66:	2300      	movs	r3, #0
  400f68:	22ff      	movs	r2, #255	; 0xff
  400f6a:	a904      	add	r1, sp, #16
  400f6c:	f996 0000 	ldrsb.w	r0, [r6]
  400f70:	47a8      	blx	r5
	{
		/* Socket connected */
		if(u8Msg == SOCKET_MSG_CONNECT)
		{
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
			if (pstrConnect && pstrConnect->s8Error >= 0) {
  400f72:	e158      	b.n	401226 <socket_event_handler_cb+0x35e>
											uiVideo_quality)) {
					send(tcp_connection_est_socket,&settings_msg,sizeof(s_msg_settings), 0);
				}
		
			} else {
				printf("-E- tcp_connection_est_socket: connect error!\r\n");
  400f74:	4879      	ldr	r0, [pc, #484]	; (40115c <socket_event_handler_cb+0x294>)
  400f76:	4b7a      	ldr	r3, [pc, #488]	; (401160 <socket_event_handler_cb+0x298>)
  400f78:	4798      	blx	r3
				close(tcp_connection_est_socket);
  400f7a:	4c6e      	ldr	r4, [pc, #440]	; (401134 <socket_event_handler_cb+0x26c>)
  400f7c:	f994 0000 	ldrsb.w	r0, [r4]
  400f80:	4b78      	ldr	r3, [pc, #480]	; (401164 <socket_event_handler_cb+0x29c>)
  400f82:	4798      	blx	r3
				tcp_connection_est_socket = -1;
  400f84:	23ff      	movs	r3, #255	; 0xff
  400f86:	7023      	strb	r3, [r4, #0]
				m2m_wifi_disconnect();
  400f88:	4b77      	ldr	r3, [pc, #476]	; (401168 <socket_event_handler_cb+0x2a0>)
  400f8a:	4798      	blx	r3
  400f8c:	e14b      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
		/* Message receive */
		else if(u8Msg == SOCKET_MSG_RECV)
  400f8e:	2906      	cmp	r1, #6
  400f90:	f040 8149 	bne.w	401226 <socket_event_handler_cb+0x35e>
		{
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  400f94:	b1c2      	cbz	r2, 400fc8 <socket_event_handler_cb+0x100>
  400f96:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	dd14      	ble.n	400fc8 <socket_event_handler_cb+0x100>
				if(DEBUG) printf("-I- tcp_connection_est_socket: recv success!\r\n");
				char *ptr;
				host_udp_port = strtol(TCPConnectionEstRxBuffer,ptr,10);
  400f9e:	220a      	movs	r2, #10
  400fa0:	2100      	movs	r1, #0
  400fa2:	4867      	ldr	r0, [pc, #412]	; (401140 <socket_event_handler_cb+0x278>)
  400fa4:	4b71      	ldr	r3, [pc, #452]	; (40116c <socket_event_handler_cb+0x2a4>)
  400fa6:	4798      	blx	r3
  400fa8:	4b71      	ldr	r3, [pc, #452]	; (401170 <socket_event_handler_cb+0x2a8>)
  400faa:	8018      	strh	r0, [r3, #0]
				printf("-I- Host port resolved to: (%d)\r\n",host_udp_port);
  400fac:	b281      	uxth	r1, r0
  400fae:	4871      	ldr	r0, [pc, #452]	; (401174 <socket_event_handler_cb+0x2ac>)
  400fb0:	4b6b      	ldr	r3, [pc, #428]	; (401160 <socket_event_handler_cb+0x298>)
  400fb2:	4798      	blx	r3
				close(tcp_connection_est_socket);
  400fb4:	4c5f      	ldr	r4, [pc, #380]	; (401134 <socket_event_handler_cb+0x26c>)
  400fb6:	f994 0000 	ldrsb.w	r0, [r4]
  400fba:	4b6a      	ldr	r3, [pc, #424]	; (401164 <socket_event_handler_cb+0x29c>)
  400fbc:	4798      	blx	r3
				tcp_connection_est_socket = -1;
  400fbe:	23ff      	movs	r3, #255	; 0xff
  400fc0:	7023      	strb	r3, [r4, #0]
				network_connected();
  400fc2:	4b6d      	ldr	r3, [pc, #436]	; (401178 <socket_event_handler_cb+0x2b0>)
  400fc4:	4798      	blx	r3
		}
		/* Message receive */
		else if(u8Msg == SOCKET_MSG_RECV)
		{
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  400fc6:	e12e      	b.n	401226 <socket_event_handler_cb+0x35e>
				printf("-I- Host port resolved to: (%d)\r\n",host_udp_port);
				close(tcp_connection_est_socket);
				tcp_connection_est_socket = -1;
				network_connected();
			} else {
				printf("-E- tcp_connection_est_socket: recv error!\r\n");
  400fc8:	486c      	ldr	r0, [pc, #432]	; (40117c <socket_event_handler_cb+0x2b4>)
  400fca:	4b65      	ldr	r3, [pc, #404]	; (401160 <socket_event_handler_cb+0x298>)
  400fcc:	4798      	blx	r3
				close(tcp_connection_est_socket);
  400fce:	4c59      	ldr	r4, [pc, #356]	; (401134 <socket_event_handler_cb+0x26c>)
  400fd0:	f994 0000 	ldrsb.w	r0, [r4]
  400fd4:	4b63      	ldr	r3, [pc, #396]	; (401164 <socket_event_handler_cb+0x29c>)
  400fd6:	4798      	blx	r3
				tcp_connection_est_socket = -1;
  400fd8:	23ff      	movs	r3, #255	; 0xff
  400fda:	7023      	strb	r3, [r4, #0]
				m2m_wifi_disconnect();
  400fdc:	4b62      	ldr	r3, [pc, #392]	; (401168 <socket_event_handler_cb+0x2a0>)
  400fde:	4798      	blx	r3
  400fe0:	e121      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
	}
	/** Listening for control commands */
	else if(sock == udp_command_socket)
  400fe2:	4b67      	ldr	r3, [pc, #412]	; (401180 <socket_event_handler_cb+0x2b8>)
  400fe4:	f993 3000 	ldrsb.w	r3, [r3]
  400fe8:	4283      	cmp	r3, r0
  400fea:	d128      	bne.n	40103e <socket_event_handler_cb+0x176>
	{
		/** Socket bound */
		if(u8Msg == SOCKET_MSG_BIND)
  400fec:	2901      	cmp	r1, #1
  400fee:	d10b      	bne.n	401008 <socket_event_handler_cb+0x140>
		{
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*)pvMsg;
			if(pstrBind->status == 0)
  400ff0:	f992 3000 	ldrsb.w	r3, [r2]
  400ff4:	b923      	cbnz	r3, 401000 <socket_event_handler_cb+0x138>
			{
				// call Recv
				recvfrom(udp_command_socket, UDPCommandRxBuffer, sizeof(UDPCommandRxBuffer), 0);
  400ff6:	22ff      	movs	r2, #255	; 0xff
  400ff8:	4962      	ldr	r1, [pc, #392]	; (401184 <socket_event_handler_cb+0x2bc>)
  400ffa:	4c63      	ldr	r4, [pc, #396]	; (401188 <socket_event_handler_cb+0x2c0>)
  400ffc:	47a0      	blx	r4
  400ffe:	e015      	b.n	40102c <socket_event_handler_cb+0x164>
			}
			else
			{
				printf("-E- udp_command_socket: Bind Failed\n");
  401000:	4862      	ldr	r0, [pc, #392]	; (40118c <socket_event_handler_cb+0x2c4>)
  401002:	4b57      	ldr	r3, [pc, #348]	; (401160 <socket_event_handler_cb+0x298>)
  401004:	4798      	blx	r3
  401006:	e011      	b.n	40102c <socket_event_handler_cb+0x164>
			}
		}
		/** Command received */
		else if((u8Msg == SOCKET_MSG_RECV) || (u8Msg == SOCKET_MSG_RECVFROM))
  401008:	2906      	cmp	r1, #6
  40100a:	d001      	beq.n	401010 <socket_event_handler_cb+0x148>
  40100c:	2909      	cmp	r1, #9
  40100e:	d10d      	bne.n	40102c <socket_event_handler_cb+0x164>
		{
			tstrSocketRecvMsg *pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
			if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
  401010:	682b      	ldr	r3, [r5, #0]
  401012:	b15b      	cbz	r3, 40102c <socket_event_handler_cb+0x164>
			{
				if(DEBUG) printf("-I- udp_command_socket: recvfrom success!\r\n");
				
				if(pstrRecvMsg->s16BufferSize == UDP_COMMAND_BUFFER_SIZE)
  401014:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  401018:	2bff      	cmp	r3, #255	; 0xff
  40101a:	d107      	bne.n	40102c <socket_event_handler_cb+0x164>
				{
					printf("-I- udp_command_socket: command received: %s\r\n",UDPCommandRxBuffer);
  40101c:	4c59      	ldr	r4, [pc, #356]	; (401184 <socket_event_handler_cb+0x2bc>)
  40101e:	4621      	mov	r1, r4
  401020:	485b      	ldr	r0, [pc, #364]	; (401190 <socket_event_handler_cb+0x2c8>)
  401022:	4b4f      	ldr	r3, [pc, #316]	; (401160 <socket_event_handler_cb+0x298>)
  401024:	4798      	blx	r3
					//xQueueSendToFront(xControl_Msg_Queue_handle, UDPCommandRxBuffer, 0);
					network_message_handler(UDPCommandRxBuffer);
  401026:	4620      	mov	r0, r4
  401028:	4b5a      	ldr	r3, [pc, #360]	; (401194 <socket_event_handler_cb+0x2cc>)
  40102a:	4798      	blx	r3
				}
			}
		}
		recvfrom(udp_command_socket, UDPCommandRxBuffer, sizeof(UDPCommandRxBuffer), 0);
  40102c:	2300      	movs	r3, #0
  40102e:	22ff      	movs	r2, #255	; 0xff
  401030:	4954      	ldr	r1, [pc, #336]	; (401184 <socket_event_handler_cb+0x2bc>)
  401032:	4853      	ldr	r0, [pc, #332]	; (401180 <socket_event_handler_cb+0x2b8>)
  401034:	f990 0000 	ldrsb.w	r0, [r0]
  401038:	4c53      	ldr	r4, [pc, #332]	; (401188 <socket_event_handler_cb+0x2c0>)
  40103a:	47a0      	blx	r4
  40103c:	e0f3      	b.n	401226 <socket_event_handler_cb+0x35e>
	}
	/** Server socket listening for connection request to transfer settings command */
	else if(sock == tcp_settings_listen_socket)
  40103e:	4b56      	ldr	r3, [pc, #344]	; (401198 <socket_event_handler_cb+0x2d0>)
  401040:	f993 3000 	ldrsb.w	r3, [r3]
  401044:	4283      	cmp	r3, r0
  401046:	d146      	bne.n	4010d6 <socket_event_handler_cb+0x20e>
	{
		/** Socket bound */
		if(u8Msg == SOCKET_MSG_BIND)
  401048:	2901      	cmp	r1, #1
  40104a:	d111      	bne.n	401070 <socket_event_handler_cb+0x1a8>
		{
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*)pvMsg;
			if(pstrBind->status == 0)
  40104c:	f992 3000 	ldrsb.w	r3, [r2]
  401050:	b91b      	cbnz	r3, 40105a <socket_event_handler_cb+0x192>
			{
				listen(tcp_settings_listen_socket, 0);
  401052:	2100      	movs	r1, #0
  401054:	4b51      	ldr	r3, [pc, #324]	; (40119c <socket_event_handler_cb+0x2d4>)
  401056:	4798      	blx	r3
  401058:	e0e5      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
			else
			{
				printf("-E- tcp_settings_listen_socket: Bind Failed\n");
  40105a:	4851      	ldr	r0, [pc, #324]	; (4011a0 <socket_event_handler_cb+0x2d8>)
  40105c:	4b40      	ldr	r3, [pc, #256]	; (401160 <socket_event_handler_cb+0x298>)
  40105e:	4798      	blx	r3
				close(tcp_settings_listen_socket);
  401060:	4c4d      	ldr	r4, [pc, #308]	; (401198 <socket_event_handler_cb+0x2d0>)
  401062:	f994 0000 	ldrsb.w	r0, [r4]
  401066:	4b3f      	ldr	r3, [pc, #252]	; (401164 <socket_event_handler_cb+0x29c>)
  401068:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  40106a:	23ff      	movs	r3, #255	; 0xff
  40106c:	7023      	strb	r3, [r4, #0]
  40106e:	e0da      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
		/** Socket listening */
		else if(u8Msg == SOCKET_MSG_LISTEN)
  401070:	2902      	cmp	r1, #2
  401072:	d113      	bne.n	40109c <socket_event_handler_cb+0x1d4>
		{
			tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg*)pvMsg;
			if (pstrListen && pstrListen->status == 0) {
  401074:	b13a      	cbz	r2, 401086 <socket_event_handler_cb+0x1be>
  401076:	f992 3000 	ldrsb.w	r3, [r2]
  40107a:	b923      	cbnz	r3, 401086 <socket_event_handler_cb+0x1be>
				if(DEBUG) printf("-I- tcp_settings_listen_socket: listen success!\r\n");
				accept(tcp_settings_listen_socket, NULL, NULL);
  40107c:	2200      	movs	r2, #0
  40107e:	4611      	mov	r1, r2
  401080:	4b48      	ldr	r3, [pc, #288]	; (4011a4 <socket_event_handler_cb+0x2dc>)
  401082:	4798      	blx	r3
  401084:	e0cf      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
			else
			{
				close(tcp_settings_listen_socket);
  401086:	4b37      	ldr	r3, [pc, #220]	; (401164 <socket_event_handler_cb+0x29c>)
  401088:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  40108a:	22ff      	movs	r2, #255	; 0xff
  40108c:	4b42      	ldr	r3, [pc, #264]	; (401198 <socket_event_handler_cb+0x2d0>)
  40108e:	701a      	strb	r2, [r3, #0]
				printf("-E- tcp_settings_listen_socket: listen Failed. Restarting...\n");
  401090:	4845      	ldr	r0, [pc, #276]	; (4011a8 <socket_event_handler_cb+0x2e0>)
  401092:	4b33      	ldr	r3, [pc, #204]	; (401160 <socket_event_handler_cb+0x298>)
  401094:	4798      	blx	r3
				network_listen_for_settings();
  401096:	4b45      	ldr	r3, [pc, #276]	; (4011ac <socket_event_handler_cb+0x2e4>)
  401098:	4798      	blx	r3
  40109a:	e0c4      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
		/** Accepting incoming connection */
		else if(u8Msg == SOCKET_MSG_ACCEPT)
  40109c:	2904      	cmp	r1, #4
  40109e:	f040 80c2 	bne.w	401226 <socket_event_handler_cb+0x35e>
		{
			// Socket is accepted.
			tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
			if(pstrAccept)
  4010a2:	b16a      	cbz	r2, 4010c0 <socket_event_handler_cb+0x1f8>
			{
				if(DEBUG) printf("-I- tcp_settings_listen_socket: accept success!\r\n");
				accept(tcp_settings_listen_socket, NULL, NULL);
  4010a4:	2200      	movs	r2, #0
  4010a6:	4611      	mov	r1, r2
  4010a8:	4b3e      	ldr	r3, [pc, #248]	; (4011a4 <socket_event_handler_cb+0x2dc>)
  4010aa:	4798      	blx	r3
				tcp_settings_data_socket = pstrAccept->sock;
  4010ac:	f995 0000 	ldrsb.w	r0, [r5]
  4010b0:	4b3f      	ldr	r3, [pc, #252]	; (4011b0 <socket_event_handler_cb+0x2e8>)
  4010b2:	7018      	strb	r0, [r3, #0]
				recv(tcp_settings_data_socket, TCPSettingsRxBuffer, sizeof(TCPSettingsRxBuffer), 0);
  4010b4:	2300      	movs	r3, #0
  4010b6:	22ff      	movs	r2, #255	; 0xff
  4010b8:	493e      	ldr	r1, [pc, #248]	; (4011b4 <socket_event_handler_cb+0x2ec>)
  4010ba:	4c22      	ldr	r4, [pc, #136]	; (401144 <socket_event_handler_cb+0x27c>)
  4010bc:	47a0      	blx	r4
  4010be:	e0b2      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
			else
			{
				close(tcp_settings_listen_socket);
  4010c0:	4b28      	ldr	r3, [pc, #160]	; (401164 <socket_event_handler_cb+0x29c>)
  4010c2:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  4010c4:	22ff      	movs	r2, #255	; 0xff
  4010c6:	4b34      	ldr	r3, [pc, #208]	; (401198 <socket_event_handler_cb+0x2d0>)
  4010c8:	701a      	strb	r2, [r3, #0]
				printf("-E- tcp_settings_listen_socket: Accept Failed\n");
  4010ca:	483b      	ldr	r0, [pc, #236]	; (4011b8 <socket_event_handler_cb+0x2f0>)
  4010cc:	4b24      	ldr	r3, [pc, #144]	; (401160 <socket_event_handler_cb+0x298>)
  4010ce:	4798      	blx	r3
				network_listen_for_settings();
  4010d0:	4b36      	ldr	r3, [pc, #216]	; (4011ac <socket_event_handler_cb+0x2e4>)
  4010d2:	4798      	blx	r3
  4010d4:	e0a7      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
	}
	/** Accepted connection for transfer of settings command */
	else if(sock == tcp_settings_data_socket)
  4010d6:	4b36      	ldr	r3, [pc, #216]	; (4011b0 <socket_event_handler_cb+0x2e8>)
  4010d8:	f993 3000 	ldrsb.w	r3, [r3]
  4010dc:	4283      	cmp	r3, r0
  4010de:	f040 808e 	bne.w	4011fe <socket_event_handler_cb+0x336>
	{
		if(u8Msg == SOCKET_MSG_RECV)
  4010e2:	2906      	cmp	r1, #6
  4010e4:	f040 809f 	bne.w	401226 <socket_event_handler_cb+0x35e>
		{
			tstrSocketRecvMsg *pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
			if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
  4010e8:	6813      	ldr	r3, [r2, #0]
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	f000 809b 	beq.w	401226 <socket_event_handler_cb+0x35e>
  4010f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4010f4:	2b00      	cmp	r3, #0
  4010f6:	f340 8096 	ble.w	401226 <socket_event_handler_cb+0x35e>
			{			
				// Process the received message
				printf("-I- tcp_settings_data_socket: settings received: %s\r\n",TCPSettingsRxBuffer);
  4010fa:	4c2e      	ldr	r4, [pc, #184]	; (4011b4 <socket_event_handler_cb+0x2ec>)
  4010fc:	4621      	mov	r1, r4
  4010fe:	482f      	ldr	r0, [pc, #188]	; (4011bc <socket_event_handler_cb+0x2f4>)
  401100:	4b17      	ldr	r3, [pc, #92]	; (401160 <socket_event_handler_cb+0x298>)
  401102:	4798      	blx	r3
				s_msg_ack msg;
				if(network_message_handler(TCPSettingsRxBuffer) == PARSER_SUCCESS) {
  401104:	4620      	mov	r0, r4
  401106:	4b23      	ldr	r3, [pc, #140]	; (401194 <socket_event_handler_cb+0x2cc>)
  401108:	4798      	blx	r3
  40110a:	2800      	cmp	r0, #0
  40110c:	d15e      	bne.n	4011cc <socket_event_handler_cb+0x304>
					strncpy(msg.ack,CMD_ACK,CMD_SPECIFIER_SIZE);
  40110e:	4b2c      	ldr	r3, [pc, #176]	; (4011c0 <socket_event_handler_cb+0x2f8>)
  401110:	e893 0003 	ldmia.w	r3, {r0, r1}
  401114:	9004      	str	r0, [sp, #16]
  401116:	f8ad 1014 	strh.w	r1, [sp, #20]
					printf("-I- tcp_settings_data_socket: configuration successful. Sending ACK...\r\n");
  40111a:	482a      	ldr	r0, [pc, #168]	; (4011c4 <socket_event_handler_cb+0x2fc>)
  40111c:	4b10      	ldr	r3, [pc, #64]	; (401160 <socket_event_handler_cb+0x298>)
  40111e:	4798      	blx	r3
					send(tcp_settings_data_socket, &msg, sizeof(s_msg_ack), 0);
  401120:	2300      	movs	r3, #0
  401122:	2206      	movs	r2, #6
  401124:	a904      	add	r1, sp, #16
  401126:	4822      	ldr	r0, [pc, #136]	; (4011b0 <socket_event_handler_cb+0x2e8>)
  401128:	f990 0000 	ldrsb.w	r0, [r0]
  40112c:	4c03      	ldr	r4, [pc, #12]	; (40113c <socket_event_handler_cb+0x274>)
  40112e:	47a0      	blx	r4
  401130:	e05d      	b.n	4011ee <socket_event_handler_cb+0x326>
  401132:	bf00      	nop
  401134:	2000000f 	.word	0x2000000f
  401138:	00409371 	.word	0x00409371
  40113c:	00404ac5 	.word	0x00404ac5
  401140:	20000b18 	.word	0x20000b18
  401144:	00404c1d 	.word	0x00404c1d
  401148:	2000bdfc 	.word	0x2000bdfc
  40114c:	2000bdcc 	.word	0x2000bdcc
  401150:	2000be28 	.word	0x2000be28
  401154:	2000bdb8 	.word	0x2000bdb8
  401158:	00401bb1 	.word	0x00401bb1
  40115c:	00411560 	.word	0x00411560
  401160:	00408a5d 	.word	0x00408a5d
  401164:	00404cc1 	.word	0x00404cc1
  401168:	00403321 	.word	0x00403321
  40116c:	0040af1d 	.word	0x0040af1d
  401170:	2000be30 	.word	0x2000be30
  401174:	00411590 	.word	0x00411590
  401178:	00400ea9 	.word	0x00400ea9
  40117c:	004115b4 	.word	0x004115b4
  401180:	2000000d 	.word	0x2000000d
  401184:	20000918 	.word	0x20000918
  401188:	00404d45 	.word	0x00404d45
  40118c:	004115e4 	.word	0x004115e4
  401190:	0041160c 	.word	0x0041160c
  401194:	00401581 	.word	0x00401581
  401198:	2000000e 	.word	0x2000000e
  40119c:	004049a1 	.word	0x004049a1
  4011a0:	0041163c 	.word	0x0041163c
  4011a4:	00404a01 	.word	0x00404a01
  4011a8:	0041166c 	.word	0x0041166c
  4011ac:	00400db5 	.word	0x00400db5
  4011b0:	20000010 	.word	0x20000010
  4011b4:	20000a18 	.word	0x20000a18
  4011b8:	004116ac 	.word	0x004116ac
  4011bc:	004116dc 	.word	0x004116dc
  4011c0:	00411714 	.word	0x00411714
  4011c4:	0041171c 	.word	0x0041171c
  4011c8:	0041155c 	.word	0x0041155c
				} else {
					strncpy(msg.ack,CMD_NACK,CMD_SPECIFIER_SIZE);
  4011cc:	4b17      	ldr	r3, [pc, #92]	; (40122c <socket_event_handler_cb+0x364>)
  4011ce:	e893 0003 	ldmia.w	r3, {r0, r1}
  4011d2:	9004      	str	r0, [sp, #16]
  4011d4:	f8ad 1014 	strh.w	r1, [sp, #20]
					printf("-I- tcp_settings_data_socket: configuration was not successful. Sending NACK...\r\n");
  4011d8:	4815      	ldr	r0, [pc, #84]	; (401230 <socket_event_handler_cb+0x368>)
  4011da:	4b16      	ldr	r3, [pc, #88]	; (401234 <socket_event_handler_cb+0x36c>)
  4011dc:	4798      	blx	r3
					send(tcp_settings_data_socket, &msg, sizeof(s_msg_ack), 0);
  4011de:	2300      	movs	r3, #0
  4011e0:	2206      	movs	r2, #6
  4011e2:	a904      	add	r1, sp, #16
  4011e4:	4814      	ldr	r0, [pc, #80]	; (401238 <socket_event_handler_cb+0x370>)
  4011e6:	f990 0000 	ldrsb.w	r0, [r0]
  4011ea:	4c14      	ldr	r4, [pc, #80]	; (40123c <socket_event_handler_cb+0x374>)
  4011ec:	47a0      	blx	r4
				}
				
				// Close the accepted socket when finished.
				close(tcp_settings_data_socket);
  4011ee:	4c12      	ldr	r4, [pc, #72]	; (401238 <socket_event_handler_cb+0x370>)
  4011f0:	f994 0000 	ldrsb.w	r0, [r4]
  4011f4:	4b12      	ldr	r3, [pc, #72]	; (401240 <socket_event_handler_cb+0x378>)
  4011f6:	4798      	blx	r3
				tcp_settings_data_socket = -1;
  4011f8:	23ff      	movs	r3, #255	; 0xff
  4011fa:	7023      	strb	r3, [r4, #0]
  4011fc:	e013      	b.n	401226 <socket_event_handler_cb+0x35e>
			}
		}
	}
	else if(sock == udp_status_socket)
  4011fe:	4b11      	ldr	r3, [pc, #68]	; (401244 <socket_event_handler_cb+0x37c>)
  401200:	f993 3000 	ldrsb.w	r3, [r3]
  401204:	4283      	cmp	r3, r0
  401206:	d10e      	bne.n	401226 <socket_event_handler_cb+0x35e>
	{
		if(u8Msg == SOCKET_MSG_SENDTO)
  401208:	2908      	cmp	r1, #8
  40120a:	d10c      	bne.n	401226 <socket_event_handler_cb+0x35e>
		{
			printf("-I- udp_status_socket: Status sent!\r\n");
  40120c:	480e      	ldr	r0, [pc, #56]	; (401248 <socket_event_handler_cb+0x380>)
  40120e:	4b09      	ldr	r3, [pc, #36]	; (401234 <socket_event_handler_cb+0x36c>)
  401210:	4798      	blx	r3
			if(udp_status_socket > 0) {
  401212:	4b0c      	ldr	r3, [pc, #48]	; (401244 <socket_event_handler_cb+0x37c>)
  401214:	f993 0000 	ldrsb.w	r0, [r3]
  401218:	2800      	cmp	r0, #0
  40121a:	dd04      	ble.n	401226 <socket_event_handler_cb+0x35e>
				close(udp_status_socket);
  40121c:	4b08      	ldr	r3, [pc, #32]	; (401240 <socket_event_handler_cb+0x378>)
  40121e:	4798      	blx	r3
				udp_status_socket = -1;
  401220:	22ff      	movs	r2, #255	; 0xff
  401222:	4b08      	ldr	r3, [pc, #32]	; (401244 <socket_event_handler_cb+0x37c>)
  401224:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
  401226:	b044      	add	sp, #272	; 0x110
  401228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40122c:	00411768 	.word	0x00411768
  401230:	00411770 	.word	0x00411770
  401234:	00408a5d 	.word	0x00408a5d
  401238:	20000010 	.word	0x20000010
  40123c:	00404ac5 	.word	0x00404ac5
  401240:	00404cc1 	.word	0x00404cc1
  401244:	2000000c 	.word	0x2000000c
  401248:	004117c4 	.word	0x004117c4

0040124c <network_disconnected>:
	network_listen_for_commands();
	network_listen_for_settings();
}

void network_disconnected(void)
{
  40124c:	b508      	push	{r3, lr}
	network_is_connected = NOT_CONNECTED;
  40124e:	22ff      	movs	r2, #255	; 0xff
  401250:	4b15      	ldr	r3, [pc, #84]	; (4012a8 <network_disconnected+0x5c>)
  401252:	701a      	strb	r2, [r3, #0]
	if(tcp_connection_est_socket > 0)
  401254:	4b15      	ldr	r3, [pc, #84]	; (4012ac <network_disconnected+0x60>)
  401256:	f993 0000 	ldrsb.w	r0, [r3]
  40125a:	2800      	cmp	r0, #0
  40125c:	dd04      	ble.n	401268 <network_disconnected+0x1c>
	{
		close(tcp_connection_est_socket);
  40125e:	4b14      	ldr	r3, [pc, #80]	; (4012b0 <network_disconnected+0x64>)
  401260:	4798      	blx	r3
		tcp_connection_est_socket = -1;
  401262:	22ff      	movs	r2, #255	; 0xff
  401264:	4b11      	ldr	r3, [pc, #68]	; (4012ac <network_disconnected+0x60>)
  401266:	701a      	strb	r2, [r3, #0]
	}
	if(udp_command_socket > 0)
  401268:	4b12      	ldr	r3, [pc, #72]	; (4012b4 <network_disconnected+0x68>)
  40126a:	f993 0000 	ldrsb.w	r0, [r3]
  40126e:	2800      	cmp	r0, #0
  401270:	dd04      	ble.n	40127c <network_disconnected+0x30>
	{
		close(udp_command_socket);
  401272:	4b0f      	ldr	r3, [pc, #60]	; (4012b0 <network_disconnected+0x64>)
  401274:	4798      	blx	r3
		udp_command_socket = -1;		
  401276:	22ff      	movs	r2, #255	; 0xff
  401278:	4b0e      	ldr	r3, [pc, #56]	; (4012b4 <network_disconnected+0x68>)
  40127a:	701a      	strb	r2, [r3, #0]
	}
	if(tcp_settings_listen_socket > 0)
  40127c:	4b0e      	ldr	r3, [pc, #56]	; (4012b8 <network_disconnected+0x6c>)
  40127e:	f993 0000 	ldrsb.w	r0, [r3]
  401282:	2800      	cmp	r0, #0
  401284:	dd04      	ble.n	401290 <network_disconnected+0x44>
	{
		close(tcp_settings_listen_socket);
  401286:	4b0a      	ldr	r3, [pc, #40]	; (4012b0 <network_disconnected+0x64>)
  401288:	4798      	blx	r3
		tcp_settings_listen_socket = -1;
  40128a:	22ff      	movs	r2, #255	; 0xff
  40128c:	4b0a      	ldr	r3, [pc, #40]	; (4012b8 <network_disconnected+0x6c>)
  40128e:	701a      	strb	r2, [r3, #0]
	}
	if(tcp_settings_data_socket > 0)
  401290:	4b0a      	ldr	r3, [pc, #40]	; (4012bc <network_disconnected+0x70>)
  401292:	f993 0000 	ldrsb.w	r0, [r3]
  401296:	2800      	cmp	r0, #0
  401298:	dd04      	ble.n	4012a4 <network_disconnected+0x58>
	{
		close(tcp_settings_data_socket);
  40129a:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <network_disconnected+0x64>)
  40129c:	4798      	blx	r3
		tcp_settings_data_socket = -1;
  40129e:	22ff      	movs	r2, #255	; 0xff
  4012a0:	4b06      	ldr	r3, [pc, #24]	; (4012bc <network_disconnected+0x70>)
  4012a2:	701a      	strb	r2, [r3, #0]
  4012a4:	bd08      	pop	{r3, pc}
  4012a6:	bf00      	nop
  4012a8:	2000bdb0 	.word	0x2000bdb0
  4012ac:	2000000f 	.word	0x2000000f
  4012b0:	00404cc1 	.word	0x00404cc1
  4012b4:	2000000d 	.word	0x2000000d
  4012b8:	2000000e 	.word	0x2000000e
  4012bc:	20000010 	.word	0x20000010

004012c0 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  4012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4012c2:	b083      	sub	sp, #12
  4012c4:	460c      	mov	r4, r1
	switch (u8MsgType) {
  4012c6:	282f      	cmp	r0, #47	; 0x2f
  4012c8:	d03b      	beq.n	401342 <wifi_cb+0x82>
  4012ca:	2832      	cmp	r0, #50	; 0x32
  4012cc:	d012      	beq.n	4012f4 <wifi_cb+0x34>
  4012ce:	282c      	cmp	r0, #44	; 0x2c
  4012d0:	d15f      	bne.n	401392 <wifi_cb+0xd2>
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4012d2:	780b      	ldrb	r3, [r1, #0]
  4012d4:	2b01      	cmp	r3, #1
  4012d6:	d102      	bne.n	4012de <wifi_cb+0x1e>
				m2m_wifi_request_dhcp_client();
  4012d8:	4b2f      	ldr	r3, [pc, #188]	; (401398 <wifi_cb+0xd8>)
  4012da:	4798      	blx	r3
  4012dc:	e059      	b.n	401392 <wifi_cb+0xd2>
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d157      	bne.n	401392 <wifi_cb+0xd2>
				WIFI_CONNECTION_STATE = 0;
  4012e2:	2200      	movs	r2, #0
  4012e4:	4b2d      	ldr	r3, [pc, #180]	; (40139c <wifi_cb+0xdc>)
  4012e6:	701a      	strb	r2, [r3, #0]
				printf("-I- Wi-Fi disconnected\r\n");
  4012e8:	482d      	ldr	r0, [pc, #180]	; (4013a0 <wifi_cb+0xe0>)
  4012ea:	4b2e      	ldr	r3, [pc, #184]	; (4013a4 <wifi_cb+0xe4>)
  4012ec:	4798      	blx	r3
				network_disconnected();
  4012ee:	4b2e      	ldr	r3, [pc, #184]	; (4013a8 <wifi_cb+0xe8>)
  4012f0:	4798      	blx	r3
  4012f2:	e04e      	b.n	401392 <wifi_cb+0xd2>
			break;
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			WIFI_CONNECTION_STATE = 1;
  4012f4:	2201      	movs	r2, #1
  4012f6:	4b29      	ldr	r3, [pc, #164]	; (40139c <wifi_cb+0xdc>)
  4012f8:	701a      	strb	r2, [r3, #0]
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("-I- Wi-Fi connected\r\n");
  4012fa:	482c      	ldr	r0, [pc, #176]	; (4013ac <wifi_cb+0xec>)
  4012fc:	4d29      	ldr	r5, [pc, #164]	; (4013a4 <wifi_cb+0xe4>)
  4012fe:	47a8      	blx	r5
			printf("-I- Wi-Fi IP is %u.%u.%u.%u\r\n",
  401300:	78a3      	ldrb	r3, [r4, #2]
  401302:	7862      	ldrb	r2, [r4, #1]
  401304:	7821      	ldrb	r1, [r4, #0]
  401306:	78e0      	ldrb	r0, [r4, #3]
  401308:	9000      	str	r0, [sp, #0]
  40130a:	4829      	ldr	r0, [pc, #164]	; (4013b0 <wifi_cb+0xf0>)
  40130c:	47a8      	blx	r5
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			printf("-I- Wi-Fi Group owner IP is %u.%u.%u.%u\r\n",
  40130e:	79a3      	ldrb	r3, [r4, #6]
  401310:	7962      	ldrb	r2, [r4, #5]
  401312:	7921      	ldrb	r1, [r4, #4]
  401314:	79e0      	ldrb	r0, [r4, #7]
  401316:	9000      	str	r0, [sp, #0]
  401318:	4826      	ldr	r0, [pc, #152]	; (4013b4 <wifi_cb+0xf4>)
  40131a:	47a8      	blx	r5
			pu8IPAddress[4], pu8IPAddress[5], pu8IPAddress[6], pu8IPAddress[7]);
			
			// Convert IP address from uint8 array to uint32
			peer_address = pu8IPAddress[4]<<24 | pu8IPAddress[5]<<16 | pu8IPAddress[6]<<8 | pu8IPAddress[7];
  40131c:	4d26      	ldr	r5, [pc, #152]	; (4013b8 <wifi_cb+0xf8>)
  40131e:	7921      	ldrb	r1, [r4, #4]
  401320:	7962      	ldrb	r2, [r4, #5]
  401322:	0413      	lsls	r3, r2, #16
  401324:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  401328:	79e3      	ldrb	r3, [r4, #7]
  40132a:	4313      	orrs	r3, r2
  40132c:	79a2      	ldrb	r2, [r4, #6]
  40132e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401332:	602b      	str	r3, [r5, #0]
			delay_ms(100);	// Delay necessary to allow app to open socket
  401334:	4821      	ldr	r0, [pc, #132]	; (4013bc <wifi_cb+0xfc>)
  401336:	4b22      	ldr	r3, [pc, #136]	; (4013c0 <wifi_cb+0x100>)
  401338:	4798      	blx	r3
			network_establish_connection(peer_address);
  40133a:	6828      	ldr	r0, [r5, #0]
  40133c:	4b21      	ldr	r3, [pc, #132]	; (4013c4 <wifi_cb+0x104>)
  40133e:	4798      	blx	r3
			break;
  401340:	e027      	b.n	401392 <wifi_cb+0xd2>
		}
		
		case M2M_WIFI_REQ_WPS:
		{
			tstrM2MWPSInfo *pstrWPS = (tstrM2MWPSInfo*)pvMsg;
			if(pstrWPS->u8AuthType != 0)
  401342:	780b      	ldrb	r3, [r1, #0]
  401344:	b313      	cbz	r3, 40138c <wifi_cb+0xcc>
			{
				printf("-I- WPS SSID : %s\n",pstrWPS->au8SSID);
  401346:	1c8d      	adds	r5, r1, #2
  401348:	4629      	mov	r1, r5
  40134a:	481f      	ldr	r0, [pc, #124]	; (4013c8 <wifi_cb+0x108>)
  40134c:	4f15      	ldr	r7, [pc, #84]	; (4013a4 <wifi_cb+0xe4>)
  40134e:	47b8      	blx	r7
				printf("-I- WPS PSK : %s\n",pstrWPS->au8PSK);
  401350:	f104 0623 	add.w	r6, r4, #35	; 0x23
  401354:	4631      	mov	r1, r6
  401356:	481d      	ldr	r0, [pc, #116]	; (4013cc <wifi_cb+0x10c>)
  401358:	47b8      	blx	r7
				printf("-I- WPS SSID Auth Type : %s\n",
  40135a:	7821      	ldrb	r1, [r4, #0]
  40135c:	4b1c      	ldr	r3, [pc, #112]	; (4013d0 <wifi_cb+0x110>)
  40135e:	4a1d      	ldr	r2, [pc, #116]	; (4013d4 <wifi_cb+0x114>)
  401360:	2901      	cmp	r1, #1
  401362:	bf0c      	ite	eq
  401364:	4611      	moveq	r1, r2
  401366:	4619      	movne	r1, r3
  401368:	481b      	ldr	r0, [pc, #108]	; (4013d8 <wifi_cb+0x118>)
  40136a:	47b8      	blx	r7
				pstrWPS->u8AuthType == M2M_WIFI_SEC_OPEN ? "OPEN" : "WPA/WPA2");
				printf("-I- WPS Channel : %d\n",pstrWPS->u8Ch + 1);
  40136c:	7861      	ldrb	r1, [r4, #1]
  40136e:	3101      	adds	r1, #1
  401370:	481a      	ldr	r0, [pc, #104]	; (4013dc <wifi_cb+0x11c>)
  401372:	47b8      	blx	r7
				// Establish Wi-Fi connection
				m2m_wifi_connect((char*)pstrWPS->au8SSID, (uint8)m2m_strlen(pstrWPS->au8SSID),
  401374:	4628      	mov	r0, r5
  401376:	4b1a      	ldr	r3, [pc, #104]	; (4013e0 <wifi_cb+0x120>)
  401378:	4798      	blx	r3
  40137a:	7822      	ldrb	r2, [r4, #0]
  40137c:	7863      	ldrb	r3, [r4, #1]
  40137e:	9300      	str	r3, [sp, #0]
  401380:	4633      	mov	r3, r6
  401382:	b2c1      	uxtb	r1, r0
  401384:	4628      	mov	r0, r5
  401386:	4c17      	ldr	r4, [pc, #92]	; (4013e4 <wifi_cb+0x124>)
  401388:	47a0      	blx	r4
  40138a:	e002      	b.n	401392 <wifi_cb+0xd2>
				pstrWPS->u8AuthType, pstrWPS->au8PSK, pstrWPS->u8Ch);
			}
			else
			{
				printf("-E- WPS Is not enabled OR Timed out\n");
  40138c:	4816      	ldr	r0, [pc, #88]	; (4013e8 <wifi_cb+0x128>)
  40138e:	4b05      	ldr	r3, [pc, #20]	; (4013a4 <wifi_cb+0xe4>)
  401390:	4798      	blx	r3
		default:
		{
			break;
		}
	}
}
  401392:	b003      	add	sp, #12
  401394:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401396:	bf00      	nop
  401398:	00403341 	.word	0x00403341
  40139c:	20000b1c 	.word	0x20000b1c
  4013a0:	00411800 	.word	0x00411800
  4013a4:	00408a5d 	.word	0x00408a5d
  4013a8:	0040124d 	.word	0x0040124d
  4013ac:	0041181c 	.word	0x0041181c
  4013b0:	00411834 	.word	0x00411834
  4013b4:	00411854 	.word	0x00411854
  4013b8:	2000bdb4 	.word	0x2000bdb4
  4013bc:	000d1437 	.word	0x000d1437
  4013c0:	20000001 	.word	0x20000001
  4013c4:	00400ca5 	.word	0x00400ca5
  4013c8:	00411880 	.word	0x00411880
  4013cc:	00411894 	.word	0x00411894
  4013d0:	004117f4 	.word	0x004117f4
  4013d4:	004117ec 	.word	0x004117ec
  4013d8:	004118a8 	.word	0x004118a8
  4013dc:	004118c8 	.word	0x004118c8
  4013e0:	004024c5 	.word	0x004024c5
  4013e4:	00403305 	.word	0x00403305
  4013e8:	004118e0 	.word	0x004118e0

004013ec <wifi_init>:
/**
 * \Function to initialize the Wi-Fi module. 
 * \ Sets the status callback and device name
 */
void wifi_init(void)
{
  4013ec:	b500      	push	{lr}
  4013ee:	b087      	sub	sp, #28
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4013f0:	2300      	movs	r3, #0
  4013f2:	9301      	str	r3, [sp, #4]
  4013f4:	9302      	str	r3, [sp, #8]
  4013f6:	9303      	str	r3, [sp, #12]
  4013f8:	9304      	str	r3, [sp, #16]
  4013fa:	9305      	str	r3, [sp, #20]

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  4013fc:	4b06      	ldr	r3, [pc, #24]	; (401418 <wifi_init+0x2c>)
  4013fe:	9300      	str	r3, [sp, #0]
	ret = m2m_wifi_init(&param);
  401400:	4668      	mov	r0, sp
  401402:	4b06      	ldr	r3, [pc, #24]	; (40141c <wifi_init+0x30>)
  401404:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401406:	b120      	cbz	r0, 401412 <wifi_init+0x26>
  401408:	4601      	mov	r1, r0
		printf("WiFi_P2P: m2m_wifi_init call error!(%d)\r\n", ret);
  40140a:	4805      	ldr	r0, [pc, #20]	; (401420 <wifi_init+0x34>)
  40140c:	4b05      	ldr	r3, [pc, #20]	; (401424 <wifi_init+0x38>)
  40140e:	4798      	blx	r3
  401410:	e7fe      	b.n	401410 <wifi_init+0x24>
		}
	} else {
		// Trigger WPS in Push button mode.
		//m2m_wifi_wps(WPS_PBC_TRIGGER, NULL);
	}
}
  401412:	b007      	add	sp, #28
  401414:	f85d fb04 	ldr.w	pc, [sp], #4
  401418:	004012c1 	.word	0x004012c1
  40141c:	00402fb9 	.word	0x00402fb9
  401420:	00411908 	.word	0x00411908
  401424:	00408a5d 	.word	0x00408a5d

00401428 <wifi_p2p_start>:

/**
 * \Function to start the Wi-Fi module in P2P mode.
 */
void wifi_p2p_start(void)
{
  401428:	b508      	push	{r3, lr}
		int8_t ret;
		
		/* Bring up P2P mode with channel number. */
		ret = m2m_wifi_p2p(M2M_WIFI_CH_6);
  40142a:	2005      	movs	r0, #5
  40142c:	4b05      	ldr	r3, [pc, #20]	; (401444 <wifi_p2p_start+0x1c>)
  40142e:	4798      	blx	r3
		if (M2M_SUCCESS != ret) {
  401430:	b110      	cbz	r0, 401438 <wifi_p2p_start+0x10>
			printf("-E- WiFi_P2P: m2m_wifi_p2p call error!\r\n");
  401432:	4805      	ldr	r0, [pc, #20]	; (401448 <wifi_p2p_start+0x20>)
  401434:	4b05      	ldr	r3, [pc, #20]	; (40144c <wifi_p2p_start+0x24>)
  401436:	4798      	blx	r3
		}

		printf("-I- P2P mode started. %s is awaiting connection.\r\n", (char *)device_name);
  401438:	4b05      	ldr	r3, [pc, #20]	; (401450 <wifi_p2p_start+0x28>)
  40143a:	6819      	ldr	r1, [r3, #0]
  40143c:	4805      	ldr	r0, [pc, #20]	; (401454 <wifi_p2p_start+0x2c>)
  40143e:	4b03      	ldr	r3, [pc, #12]	; (40144c <wifi_p2p_start+0x24>)
  401440:	4798      	blx	r3
  401442:	bd08      	pop	{r3, pc}
  401444:	00403345 	.word	0x00403345
  401448:	00411934 	.word	0x00411934
  40144c:	00408a5d 	.word	0x00408a5d
  401450:	2000be28 	.word	0x2000be28
  401454:	00411960 	.word	0x00411960

00401458 <wifi_set_device_name>:

/*
 * Set the peer device name
*/
int8_t wifi_set_device_name(char* name, uint8_t size)
{
  401458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40145c:	af00      	add	r7, sp, #0
  40145e:	4605      	mov	r5, r0
  401460:	460c      	mov	r4, r1
	int8_t ret = 0;
	if(strcmp(name, device_name) != 0)
  401462:	4b1c      	ldr	r3, [pc, #112]	; (4014d4 <wifi_set_device_name+0x7c>)
  401464:	6819      	ldr	r1, [r3, #0]
  401466:	4b1c      	ldr	r3, [pc, #112]	; (4014d8 <wifi_set_device_name+0x80>)
  401468:	4798      	blx	r3
  40146a:	2800      	cmp	r0, #0
  40146c:	d02d      	beq.n	4014ca <wifi_set_device_name+0x72>
	{
  40146e:	46e8      	mov	r8, sp
		volatile char tmp[strlen(SYSTEM_IDENTIFIER)+size];
  401470:	f104 0314 	add.w	r3, r4, #20
  401474:	f023 0307 	bic.w	r3, r3, #7
  401478:	ebad 0d03 	sub.w	sp, sp, r3
		memcpy(tmp,SYSTEM_IDENTIFIER,strlen(SYSTEM_IDENTIFIER));
  40147c:	4b17      	ldr	r3, [pc, #92]	; (4014dc <wifi_set_device_name+0x84>)
  40147e:	cb07      	ldmia	r3!, {r0, r1, r2}
  401480:	9000      	str	r0, [sp, #0]
  401482:	9101      	str	r1, [sp, #4]
  401484:	9202      	str	r2, [sp, #8]
  401486:	781b      	ldrb	r3, [r3, #0]
  401488:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(tmp+strlen(SYSTEM_IDENTIFIER),name,size);
  40148c:	4622      	mov	r2, r4
  40148e:	4629      	mov	r1, r5
  401490:	f10d 000d 	add.w	r0, sp, #13
  401494:	4b12      	ldr	r3, [pc, #72]	; (4014e0 <wifi_set_device_name+0x88>)
  401496:	4798      	blx	r3
						
		/* Set device name to be shown in peer device. */
		ret = m2m_wifi_set_device_name((uint8_t *)tmp, strlen(tmp));
  401498:	4668      	mov	r0, sp
  40149a:	4b12      	ldr	r3, [pc, #72]	; (4014e4 <wifi_set_device_name+0x8c>)
  40149c:	4798      	blx	r3
  40149e:	b2c1      	uxtb	r1, r0
  4014a0:	4668      	mov	r0, sp
  4014a2:	4b11      	ldr	r3, [pc, #68]	; (4014e8 <wifi_set_device_name+0x90>)
  4014a4:	4798      	blx	r3
		if (M2M_SUCCESS != ret) {
  4014a6:	b118      	cbz	r0, 4014b0 <wifi_set_device_name+0x58>
			printf("-E- WiFi_P2P: m2m_wifi_set_device_name call error!\r\n");
  4014a8:	4810      	ldr	r0, [pc, #64]	; (4014ec <wifi_set_device_name+0x94>)
  4014aa:	4b11      	ldr	r3, [pc, #68]	; (4014f0 <wifi_set_device_name+0x98>)
  4014ac:	4798      	blx	r3
  4014ae:	e7fe      	b.n	4014ae <wifi_set_device_name+0x56>
			while (1) {
			}
		} else {
			free(device_name);
  4014b0:	4e08      	ldr	r6, [pc, #32]	; (4014d4 <wifi_set_device_name+0x7c>)
  4014b2:	6830      	ldr	r0, [r6, #0]
  4014b4:	4b0f      	ldr	r3, [pc, #60]	; (4014f4 <wifi_set_device_name+0x9c>)
  4014b6:	4798      	blx	r3
			device_name = malloc(size);
  4014b8:	4620      	mov	r0, r4
  4014ba:	4b0f      	ldr	r3, [pc, #60]	; (4014f8 <wifi_set_device_name+0xa0>)
  4014bc:	4798      	blx	r3
  4014be:	6030      	str	r0, [r6, #0]
			memcpy(device_name,name,size);
  4014c0:	4622      	mov	r2, r4
  4014c2:	4629      	mov	r1, r5
  4014c4:	4b06      	ldr	r3, [pc, #24]	; (4014e0 <wifi_set_device_name+0x88>)
  4014c6:	4798      	blx	r3
  4014c8:	46c5      	mov	sp, r8
		}
	}
	return ret;
  4014ca:	2000      	movs	r0, #0
  4014cc:	46bd      	mov	sp, r7
  4014ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014d2:	bf00      	nop
  4014d4:	2000be28 	.word	0x2000be28
  4014d8:	004094a9 	.word	0x004094a9
  4014dc:	00411994 	.word	0x00411994
  4014e0:	00409015 	.word	0x00409015
  4014e4:	00409781 	.word	0x00409781
  4014e8:	004033a9 	.word	0x004033a9
  4014ec:	004119a4 	.word	0x004119a4
  4014f0:	00408a5d 	.word	0x00408a5d
  4014f4:	00408a95 	.word	0x00408a95
  4014f8:	00408a85 	.word	0x00408a85

004014fc <propeller_motor1_start>:
#include "propeller_motors.h"
#include "pwm_generator/pwm_generator.h"

/* Propeller 1 motor - PWM1H/PC19/Ext2-7 */
void propeller_motor1_start(uint8_t speed)
{
  4014fc:	b508      	push	{r3, lr}
  4014fe:	2864      	cmp	r0, #100	; 0x64
  401500:	bf28      	it	cs
  401502:	2064      	movcs	r0, #100	; 0x64
	if(speed > 100)
		speed = 100;
	
	if(speed > 0) {		// Motor should spin
  401504:	b188      	cbz	r0, 40152a <propeller_motor1_start+0x2e>
		uint32_t duty_cycle_reg = DUTY_CYCLE_REG_MIN + speed*DUTY_CYCLE_REG_PER_SPEED_PCT;
		pwm_ch1_start(MOTOR_CTRL_PWM_FREQUENCY_HZ,MOTOR_CTRL_PERIOD_REG,duty_cycle_reg);
  401506:	f44f 63e1 	mov.w	r3, #1800	; 0x708
  40150a:	fb03 f000 	mul.w	r0, r3, r0
  40150e:	4a0b      	ldr	r2, [pc, #44]	; (40153c <propeller_motor1_start+0x40>)
  401510:	fb82 3200 	smull	r3, r2, r2, r0
  401514:	17c0      	asrs	r0, r0, #31
  401516:	ebc0 1262 	rsb	r2, r0, r2, asr #5
  40151a:	f502 7216 	add.w	r2, r2, #600	; 0x258
  40151e:	f640 31b8 	movw	r1, #3000	; 0xbb8
  401522:	2064      	movs	r0, #100	; 0x64
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <propeller_motor1_start+0x44>)
  401526:	4798      	blx	r3
  401528:	bd08      	pop	{r3, pc}
	} else {			// Motor should stop
		pwm_ch1_start(MOTOR_CTRL_PWM_FREQUENCY_HZ,MOTOR_CTRL_PERIOD_REG,MOTOR_OFF_DUTY_CYCLE_REG);
  40152a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40152e:	f640 31b8 	movw	r1, #3000	; 0xbb8
  401532:	2064      	movs	r0, #100	; 0x64
  401534:	4b02      	ldr	r3, [pc, #8]	; (401540 <propeller_motor1_start+0x44>)
  401536:	4798      	blx	r3
  401538:	bd08      	pop	{r3, pc}
  40153a:	bf00      	nop
  40153c:	51eb851f 	.word	0x51eb851f
  401540:	00401e45 	.word	0x00401e45

00401544 <propeller_motor1_set_speed>:
{
	pwm_ch1_set_duty_cycle(MOTOR_OFF_DUTY_CYCLE_REG);
}

void propeller_motor1_set_speed(uint8_t speed)
{
  401544:	b508      	push	{r3, lr}
  401546:	2864      	cmp	r0, #100	; 0x64
  401548:	bf28      	it	cs
  40154a:	2064      	movcs	r0, #100	; 0x64
	if(speed > 100)
		speed = 100;
	
	if(speed > 0) {		// Motor should spin
  40154c:	b170      	cbz	r0, 40156c <propeller_motor1_set_speed+0x28>
		uint32_t duty_cycle_reg = DUTY_CYCLE_REG_MIN + speed*DUTY_CYCLE_REG_PER_SPEED_PCT;
		pwm_ch1_set_duty_cycle(duty_cycle_reg);
  40154e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
  401552:	fb03 f000 	mul.w	r0, r3, r0
  401556:	4b08      	ldr	r3, [pc, #32]	; (401578 <propeller_motor1_set_speed+0x34>)
  401558:	fb83 2300 	smull	r2, r3, r3, r0
  40155c:	17c0      	asrs	r0, r0, #31
  40155e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
  401562:	f500 7016 	add.w	r0, r0, #600	; 0x258
  401566:	4b05      	ldr	r3, [pc, #20]	; (40157c <propeller_motor1_set_speed+0x38>)
  401568:	4798      	blx	r3
  40156a:	bd08      	pop	{r3, pc}
	} else {			// Motor should stop
		pwm_ch1_set_duty_cycle(MOTOR_OFF_DUTY_CYCLE_REG);
  40156c:	f44f 7096 	mov.w	r0, #300	; 0x12c
  401570:	4b02      	ldr	r3, [pc, #8]	; (40157c <propeller_motor1_set_speed+0x38>)
  401572:	4798      	blx	r3
  401574:	bd08      	pop	{r3, pc}
  401576:	bf00      	nop
  401578:	51eb851f 	.word	0x51eb851f
  40157c:	00401ecd 	.word	0x00401ecd

00401580 <network_message_handler>:
#include "freertos_tasks.h"
#include "nand_flash_storage/nand_flash_storage.h"

/** Event handler for network messages */
int8_t network_message_handler(char *msg)
{
  401580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401584:	b0cd      	sub	sp, #308	; 0x134
  401586:	4601      	mov	r1, r0
  401588:	9001      	str	r0, [sp, #4]
	int8_t error = PARSER_ERROR;
	char cmd[PACKET_SIZE];
	memcpy( cmd, msg, PACKET_SIZE );
  40158a:	22ff      	movs	r2, #255	; 0xff
  40158c:	a80c      	add	r0, sp, #48	; 0x30
  40158e:	4b89      	ldr	r3, [pc, #548]	; (4017b4 <network_message_handler+0x234>)
  401590:	4798      	blx	r3
	
	/** Control message received */
	if(strstr(cmd, CMD_CONTROL) != NULL)
  401592:	4989      	ldr	r1, [pc, #548]	; (4017b8 <network_message_handler+0x238>)
  401594:	a80c      	add	r0, sp, #48	; 0x30
  401596:	4b89      	ldr	r3, [pc, #548]	; (4017bc <network_message_handler+0x23c>)
  401598:	4798      	blx	r3
  40159a:	2800      	cmp	r0, #0
  40159c:	f000 8098 	beq.w	4016d0 <network_message_handler+0x150>
	{
		char *token;
		
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
  4015a0:	4987      	ldr	r1, [pc, #540]	; (4017c0 <network_message_handler+0x240>)
  4015a2:	a80c      	add	r0, sp, #48	; 0x30
  4015a4:	4b87      	ldr	r3, [pc, #540]	; (4017c4 <network_message_handler+0x244>)
  4015a6:	4798      	blx	r3
		portBASE_TYPE xStatus;
		uint8_t uValidCoords = 0;
		uint8_t uValidPowerAng = 0;
		
		/* walk through other tokens */
		while(token != NULL)
  4015a8:	4605      	mov	r5, r0
  4015aa:	2800      	cmp	r0, #0
  4015ac:	f000 808d 	beq.w	4016ca <network_message_handler+0x14a>
  4015b0:	f04f 0a00 	mov.w	sl, #0
  4015b4:	4654      	mov	r4, sl
  4015b6:	f04f 38ff 	mov.w	r8, #4294967295
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  4015ba:	4f83      	ldr	r7, [pc, #524]	; (4017c8 <network_message_handler+0x248>)
					power_ang[ANG] = iAng;
					uValidPowerAng++;
				}
				
				/* Write to queue */
				xStatus = xQueueReset(xControl_Msg_Queue_handle);				// clear queue
  4015bc:	f8df 9258 	ldr.w	r9, [pc, #600]	; 401818 <network_message_handler+0x298>
  4015c0:	4656      	mov	r6, sl
		
		/* walk through other tokens */
		while(token != NULL)
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  4015c2:	213a      	movs	r1, #58	; 0x3a
  4015c4:	4628      	mov	r0, r5
  4015c6:	47b8      	blx	r7
			if(value)
  4015c8:	f110 0b01 	adds.w	fp, r0, #1
  4015cc:	d074      	beq.n	4016b8 <network_message_handler+0x138>
			{				
				/** X coordinate */
				if(strstr(token, TAG_CONTROL_STEERING_X) != NULL)
  4015ce:	2158      	movs	r1, #88	; 0x58
  4015d0:	4628      	mov	r0, r5
  4015d2:	47b8      	blx	r7
  4015d4:	b150      	cbz	r0, 4015ec <network_message_handler+0x6c>
				{
					float x_coord = strtof(value,NULL);
  4015d6:	4631      	mov	r1, r6
  4015d8:	4658      	mov	r0, fp
  4015da:	4b7c      	ldr	r3, [pc, #496]	; (4017cc <network_message_handler+0x24c>)
  4015dc:	4798      	blx	r3
					if(DEBUG) printf("X: %s (%d)\r\n",value,(int)x_coord);
					int8_t iX_coord = (int8_t)x_coord;
					coords[X_COORD] = iX_coord;
  4015de:	4b7c      	ldr	r3, [pc, #496]	; (4017d0 <network_message_handler+0x250>)
  4015e0:	4798      	blx	r3
  4015e2:	f88d 000c 	strb.w	r0, [sp, #12]
					uValidCoords++;
  4015e6:	3401      	adds	r4, #1
  4015e8:	b2e4      	uxtb	r4, r4
  4015ea:	e031      	b.n	401650 <network_message_handler+0xd0>
				}
				/** Y coordinate */
				else if(strstr(token, TAG_CONTROL_STEERING_Y) != NULL)
  4015ec:	2159      	movs	r1, #89	; 0x59
  4015ee:	4628      	mov	r0, r5
  4015f0:	47b8      	blx	r7
  4015f2:	b150      	cbz	r0, 40160a <network_message_handler+0x8a>
				{
					float y_coord = strtof(value,NULL);
  4015f4:	4631      	mov	r1, r6
  4015f6:	4658      	mov	r0, fp
  4015f8:	4b74      	ldr	r3, [pc, #464]	; (4017cc <network_message_handler+0x24c>)
  4015fa:	4798      	blx	r3
					if(DEBUG) printf("Y: %s (%d)\r\n",value,(int)y_coord);
					int8_t iY_coord = (int8_t)y_coord;
					coords[Y_COORD] = iY_coord;
  4015fc:	4b74      	ldr	r3, [pc, #464]	; (4017d0 <network_message_handler+0x250>)
  4015fe:	4798      	blx	r3
  401600:	f88d 000d 	strb.w	r0, [sp, #13]
					uValidCoords++;
  401604:	3401      	adds	r4, #1
  401606:	b2e4      	uxtb	r4, r4
  401608:	e022      	b.n	401650 <network_message_handler+0xd0>
				}
				/** Power */
				else if(strstr(token, TAG_CONTROL_STEERING_POWER) != NULL)
  40160a:	4972      	ldr	r1, [pc, #456]	; (4017d4 <network_message_handler+0x254>)
  40160c:	4628      	mov	r0, r5
  40160e:	4b6b      	ldr	r3, [pc, #428]	; (4017bc <network_message_handler+0x23c>)
  401610:	4798      	blx	r3
  401612:	b160      	cbz	r0, 40162e <network_message_handler+0xae>
				{
					float power = strtof(value,NULL);
  401614:	4631      	mov	r1, r6
  401616:	4658      	mov	r0, fp
  401618:	4b6c      	ldr	r3, [pc, #432]	; (4017cc <network_message_handler+0x24c>)
  40161a:	4798      	blx	r3
					if(DEBUG) printf("Pwr: %s (%d)\r\n",value,(int)power);
					int8_t iPow = (int8_t)power;
					power_ang[POW] = iPow;
  40161c:	4b6c      	ldr	r3, [pc, #432]	; (4017d0 <network_message_handler+0x250>)
  40161e:	4798      	blx	r3
  401620:	f88d 0010 	strb.w	r0, [sp, #16]
					uValidPowerAng++;
  401624:	f10a 0a01 	add.w	sl, sl, #1
  401628:	fa5f fa8a 	uxtb.w	sl, sl
  40162c:	e010      	b.n	401650 <network_message_handler+0xd0>
				}
				/** Angle */
				else if(strstr(token, TAG_CONTROL_STEERING_ANGLE) != NULL)
  40162e:	496a      	ldr	r1, [pc, #424]	; (4017d8 <network_message_handler+0x258>)
  401630:	4628      	mov	r0, r5
  401632:	4b62      	ldr	r3, [pc, #392]	; (4017bc <network_message_handler+0x23c>)
  401634:	4798      	blx	r3
  401636:	b158      	cbz	r0, 401650 <network_message_handler+0xd0>
				{
					float angle = strtof(value,NULL);
  401638:	4631      	mov	r1, r6
  40163a:	4658      	mov	r0, fp
  40163c:	4b63      	ldr	r3, [pc, #396]	; (4017cc <network_message_handler+0x24c>)
  40163e:	4798      	blx	r3
					if(DEBUG) printf("Ang: %s (%d)\r\n",value,(int)angle);
					int8_t iAng = (int8_t)angle;
					power_ang[ANG] = iAng;
  401640:	4b63      	ldr	r3, [pc, #396]	; (4017d0 <network_message_handler+0x250>)
  401642:	4798      	blx	r3
  401644:	f88d 0011 	strb.w	r0, [sp, #17]
					uValidPowerAng++;
  401648:	f10a 0a01 	add.w	sl, sl, #1
  40164c:	fa5f fa8a 	uxtb.w	sl, sl
				}
				
				/* Write to queue */
				xStatus = xQueueReset(xControl_Msg_Queue_handle);				// clear queue
  401650:	4631      	mov	r1, r6
  401652:	f8d9 0000 	ldr.w	r0, [r9]
  401656:	4b61      	ldr	r3, [pc, #388]	; (4017dc <network_message_handler+0x25c>)
  401658:	4798      	blx	r3
				if(xStatus == pdPASS || xStatus == errQUEUE_EMPTY) { // Queue successfully cleared
  40165a:	2801      	cmp	r0, #1
  40165c:	d820      	bhi.n	4016a0 <network_message_handler+0x120>
					if (uValidCoords == 2) {
  40165e:	2c02      	cmp	r4, #2
  401660:	d10d      	bne.n	40167e <network_message_handler+0xfe>
						xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, coords, 0);
  401662:	4633      	mov	r3, r6
  401664:	4632      	mov	r2, r6
  401666:	a903      	add	r1, sp, #12
  401668:	f8d9 0000 	ldr.w	r0, [r9]
  40166c:	4d5c      	ldr	r5, [pc, #368]	; (4017e0 <network_message_handler+0x260>)
  40166e:	47a8      	blx	r5
						if ((xStatus == pdPASS))
  401670:	2801      	cmp	r0, #1
  401672:	d01b      	beq.n	4016ac <network_message_handler+0x12c>
						{
							if(DEBUG) printf("-I- Coordinates written to queue\r\n");
							error = PARSER_SUCCESS;
						}
						else if((xStatus == errQUEUE_FULL))
  401674:	bb00      	cbnz	r0, 4016b8 <network_message_handler+0x138>
						{
							printf("-E- Control queue is full\r\n");
  401676:	485b      	ldr	r0, [pc, #364]	; (4017e4 <network_message_handler+0x264>)
  401678:	4b5b      	ldr	r3, [pc, #364]	; (4017e8 <network_message_handler+0x268>)
  40167a:	4798      	blx	r3
  40167c:	e01c      	b.n	4016b8 <network_message_handler+0x138>
						}
					}  else if (uValidPowerAng == 2) {
  40167e:	f1ba 0f02 	cmp.w	sl, #2
  401682:	d115      	bne.n	4016b0 <network_message_handler+0x130>
						xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, power_ang, 0);
  401684:	4633      	mov	r3, r6
  401686:	4632      	mov	r2, r6
  401688:	a904      	add	r1, sp, #16
  40168a:	f8d9 0000 	ldr.w	r0, [r9]
  40168e:	4d54      	ldr	r5, [pc, #336]	; (4017e0 <network_message_handler+0x260>)
  401690:	47a8      	blx	r5
						if ((xStatus == pdPASS))
  401692:	2801      	cmp	r0, #1
  401694:	d00f      	beq.n	4016b6 <network_message_handler+0x136>
						{
							if(DEBUG) printf("-I- Power/Ang. written to queue\r\n");
							error = PARSER_SUCCESS;
						}
						else if((xStatus == errQUEUE_FULL))
  401696:	b978      	cbnz	r0, 4016b8 <network_message_handler+0x138>
						{
							printf("-E- Control queue is full\r\n");
  401698:	4852      	ldr	r0, [pc, #328]	; (4017e4 <network_message_handler+0x264>)
  40169a:	4b53      	ldr	r3, [pc, #332]	; (4017e8 <network_message_handler+0x268>)
  40169c:	4798      	blx	r3
  40169e:	e00b      	b.n	4016b8 <network_message_handler+0x138>
						}
					} else {
						error = CONTROL_INPUT_ERROR;
					}				
				} else {
					printf("-E- Queue could not be cleared\r\n");
  4016a0:	4852      	ldr	r0, [pc, #328]	; (4017ec <network_message_handler+0x26c>)
  4016a2:	4b51      	ldr	r3, [pc, #324]	; (4017e8 <network_message_handler+0x268>)
  4016a4:	4798      	blx	r3
					error = CONTROL_INPUT_ERROR;
  4016a6:	f06f 0801 	mvn.w	r8, #1
  4016aa:	e005      	b.n	4016b8 <network_message_handler+0x138>
					if (uValidCoords == 2) {
						xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, coords, 0);
						if ((xStatus == pdPASS))
						{
							if(DEBUG) printf("-I- Coordinates written to queue\r\n");
							error = PARSER_SUCCESS;
  4016ac:	46b0      	mov	r8, r6
  4016ae:	e003      	b.n	4016b8 <network_message_handler+0x138>
						else if((xStatus == errQUEUE_FULL))
						{
							printf("-E- Control queue is full\r\n");
						}
					} else {
						error = CONTROL_INPUT_ERROR;
  4016b0:	f06f 0801 	mvn.w	r8, #1
  4016b4:	e000      	b.n	4016b8 <network_message_handler+0x138>
					}  else if (uValidPowerAng == 2) {
						xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, power_ang, 0);
						if ((xStatus == pdPASS))
						{
							if(DEBUG) printf("-I- Power/Ang. written to queue\r\n");
							error = PARSER_SUCCESS;
  4016b6:	46b0      	mov	r8, r6
					printf("-E- Queue could not be cleared\r\n");
					error = CONTROL_INPUT_ERROR;
				}
			}	
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
  4016b8:	4941      	ldr	r1, [pc, #260]	; (4017c0 <network_message_handler+0x240>)
  4016ba:	4630      	mov	r0, r6
  4016bc:	4b41      	ldr	r3, [pc, #260]	; (4017c4 <network_message_handler+0x244>)
  4016be:	4798      	blx	r3
		portBASE_TYPE xStatus;
		uint8_t uValidCoords = 0;
		uint8_t uValidPowerAng = 0;
		
		/* walk through other tokens */
		while(token != NULL)
  4016c0:	4605      	mov	r5, r0
  4016c2:	2800      	cmp	r0, #0
  4016c4:	f47f af7d 	bne.w	4015c2 <network_message_handler+0x42>
  4016c8:	e121      	b.n	40190e <network_message_handler+0x38e>
#include "nand_flash_storage/nand_flash_storage.h"

/** Event handler for network messages */
int8_t network_message_handler(char *msg)
{
	int8_t error = PARSER_ERROR;
  4016ca:	f04f 38ff 	mov.w	r8, #4294967295
  4016ce:	e11e      	b.n	40190e <network_message_handler+0x38e>
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
		}
	}
	/** Settings message received*/
	else if(strstr(cmd, CMD_SETTINGS) != NULL)
  4016d0:	4947      	ldr	r1, [pc, #284]	; (4017f0 <network_message_handler+0x270>)
  4016d2:	a80c      	add	r0, sp, #48	; 0x30
  4016d4:	4b39      	ldr	r3, [pc, #228]	; (4017bc <network_message_handler+0x23c>)
  4016d6:	4798      	blx	r3
  4016d8:	2800      	cmp	r0, #0
  4016da:	f000 80fd 	beq.w	4018d8 <network_message_handler+0x358>
		int8_t assisted_drive_mode = -1;
		int8_t power_save_mode = -1;
		int8_t video_quality = -1;
			
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
  4016de:	4938      	ldr	r1, [pc, #224]	; (4017c0 <network_message_handler+0x240>)
  4016e0:	a80c      	add	r0, sp, #48	; 0x30
  4016e2:	4b38      	ldr	r3, [pc, #224]	; (4017c4 <network_message_handler+0x244>)
  4016e4:	4798      	blx	r3
		
		/* walk through other tokens */
		while(token != NULL)
  4016e6:	4604      	mov	r4, r0
  4016e8:	2800      	cmp	r0, #0
  4016ea:	f000 80f8 	beq.w	4018de <network_message_handler+0x35e>
  4016ee:	f04f 3aff 	mov.w	sl, #4294967295
  4016f2:	46d1      	mov	r9, sl
  4016f4:	46d3      	mov	fp, sl
  4016f6:	2600      	movs	r6, #0
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  4016f8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4017c8 <network_message_handler+0x248>
			if(value)
			{
				/** Robot name setting */
				if(strstr(token, TAG_SETTINGS_NAME) != NULL)
  4016fc:	4f2f      	ldr	r7, [pc, #188]	; (4017bc <network_message_handler+0x23c>)
		
		/* walk through other tokens */
		while(token != NULL)
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  4016fe:	213a      	movs	r1, #58	; 0x3a
  401700:	4620      	mov	r0, r4
  401702:	47c0      	blx	r8
			if(value)
  401704:	1c45      	adds	r5, r0, #1
  401706:	d028      	beq.n	40175a <network_message_handler+0x1da>
			{
				/** Robot name setting */
				if(strstr(token, TAG_SETTINGS_NAME) != NULL)
  401708:	493a      	ldr	r1, [pc, #232]	; (4017f4 <network_message_handler+0x274>)
  40170a:	4620      	mov	r0, r4
  40170c:	47b8      	blx	r7
  40170e:	bb18      	cbnz	r0, 401758 <network_message_handler+0x1d8>
				{	
					name = value;
				}
				/** Assisted Driving Mode setting */
				else if(strstr(token, TAG_SETTINGS_ASSISTED_DRIVE_MODE) != NULL)
  401710:	4939      	ldr	r1, [pc, #228]	; (4017f8 <network_message_handler+0x278>)
  401712:	4620      	mov	r0, r4
  401714:	47b8      	blx	r7
  401716:	b138      	cbz	r0, 401728 <network_message_handler+0x1a8>
				{
					char* ptr;
					assisted_drive_mode = strtol(value,ptr,10);
  401718:	220a      	movs	r2, #10
  40171a:	2100      	movs	r1, #0
  40171c:	4628      	mov	r0, r5
  40171e:	4b37      	ldr	r3, [pc, #220]	; (4017fc <network_message_handler+0x27c>)
  401720:	4798      	blx	r3
  401722:	fa4f fb80 	sxtb.w	fp, r0
  401726:	e018      	b.n	40175a <network_message_handler+0x1da>
				}
				/** Power Save Mode setting */
				else if(strstr(token, TAG_SETTINGS_POWER_SAVE_MODE) != NULL)
  401728:	4935      	ldr	r1, [pc, #212]	; (401800 <network_message_handler+0x280>)
  40172a:	4620      	mov	r0, r4
  40172c:	47b8      	blx	r7
  40172e:	b138      	cbz	r0, 401740 <network_message_handler+0x1c0>
				{
					char* ptr;
					power_save_mode = strtol(value,ptr,10);
  401730:	220a      	movs	r2, #10
  401732:	2100      	movs	r1, #0
  401734:	4628      	mov	r0, r5
  401736:	4b31      	ldr	r3, [pc, #196]	; (4017fc <network_message_handler+0x27c>)
  401738:	4798      	blx	r3
  40173a:	fa4f f980 	sxtb.w	r9, r0
  40173e:	e00c      	b.n	40175a <network_message_handler+0x1da>
				}
				/** Video Quality setting*/
				else if(strstr(token, TAG_SETTINGS_VIDEO_QUALITY) != NULL)
  401740:	4930      	ldr	r1, [pc, #192]	; (401804 <network_message_handler+0x284>)
  401742:	4620      	mov	r0, r4
  401744:	47b8      	blx	r7
  401746:	b140      	cbz	r0, 40175a <network_message_handler+0x1da>
				{
					char* ptr;
					video_quality = strtol(value,ptr,10);
  401748:	220a      	movs	r2, #10
  40174a:	2100      	movs	r1, #0
  40174c:	4628      	mov	r0, r5
  40174e:	4b2b      	ldr	r3, [pc, #172]	; (4017fc <network_message_handler+0x27c>)
  401750:	4798      	blx	r3
  401752:	fa4f fa80 	sxtb.w	sl, r0
  401756:	e000      	b.n	40175a <network_message_handler+0x1da>
			if(value)
			{
				/** Robot name setting */
				if(strstr(token, TAG_SETTINGS_NAME) != NULL)
				{	
					name = value;
  401758:	462e      	mov	r6, r5
					video_quality = strtol(value,ptr,10);
				}
			}
			
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
  40175a:	4919      	ldr	r1, [pc, #100]	; (4017c0 <network_message_handler+0x240>)
  40175c:	2000      	movs	r0, #0
  40175e:	4b19      	ldr	r3, [pc, #100]	; (4017c4 <network_message_handler+0x244>)
  401760:	4798      	blx	r3
			
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
		
		/* walk through other tokens */
		while(token != NULL)
  401762:	4604      	mov	r4, r0
  401764:	2800      	cmp	r0, #0
  401766:	d1ca      	bne.n	4016fe <network_message_handler+0x17e>
			
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
		}
		// Only configure robot if all settings have been parsed
		if(name && assisted_drive_mode >= 0 && power_save_mode >= 0 && video_quality >= 0)
  401768:	2e00      	cmp	r6, #0
  40176a:	f000 80bb 	beq.w	4018e4 <network_message_handler+0x364>
  40176e:	f1bb 0f00 	cmp.w	fp, #0
  401772:	f2c0 80ba 	blt.w	4018ea <network_message_handler+0x36a>
  401776:	f1b9 0f00 	cmp.w	r9, #0
  40177a:	f2c0 80b9 	blt.w	4018f0 <network_message_handler+0x370>
  40177e:	f1ba 0f00 	cmp.w	sl, #0
  401782:	f2c0 80b8 	blt.w	4018f6 <network_message_handler+0x376>
		{	
			/* Configure device name */
			uint8_t size = strlen(name);	
  401786:	4630      	mov	r0, r6
  401788:	4b1f      	ldr	r3, [pc, #124]	; (401808 <network_message_handler+0x288>)
  40178a:	4798      	blx	r3
			int8_t ret = wifi_set_device_name(name, size+1);	// include NUL-terminator
  40178c:	1c41      	adds	r1, r0, #1
  40178e:	b2c9      	uxtb	r1, r1
  401790:	4630      	mov	r0, r6
  401792:	4b1e      	ldr	r3, [pc, #120]	; (40180c <network_message_handler+0x28c>)
  401794:	4798      	blx	r3
			if(ret) {
  401796:	2800      	cmp	r0, #0
  401798:	f000 80b0 	beq.w	4018fc <network_message_handler+0x37c>
				printf("-E- Could not set device name\r\n");
  40179c:	481c      	ldr	r0, [pc, #112]	; (401810 <network_message_handler+0x290>)
  40179e:	4b12      	ldr	r3, [pc, #72]	; (4017e8 <network_message_handler+0x268>)
  4017a0:	4798      	blx	r3
  4017a2:	f06f 0802 	mvn.w	r8, #2
  4017a6:	e0b2      	b.n	40190e <network_message_handler+0x38e>
				/* Store settings in non-volatile memory */
				nand_flash_storage_write(msg,PACKET_SIZE);
				
				/* Save current settings to RAM */
				if(power_save_mode > 0) {
					iPower_save_mode = SETTING_ENABLED;
  4017a8:	2301      	movs	r3, #1
  4017aa:	4a1a      	ldr	r2, [pc, #104]	; (401814 <network_message_handler+0x294>)
  4017ac:	7013      	strb	r3, [r2, #0]
					settings_buf[POWER_SAVE_MODE] = SETTING_ENABLED;
  4017ae:	f88d 300c 	strb.w	r3, [sp, #12]
  4017b2:	e038      	b.n	401826 <network_message_handler+0x2a6>
  4017b4:	00409015 	.word	0x00409015
  4017b8:	004119dc 	.word	0x004119dc
  4017bc:	00409c1d 	.word	0x00409c1d
  4017c0:	004119e4 	.word	0x004119e4
  4017c4:	0040ad81 	.word	0x0040ad81
  4017c8:	004093bd 	.word	0x004093bd
  4017cc:	0040ad4d 	.word	0x0040ad4d
  4017d0:	00408975 	.word	0x00408975
  4017d4:	004119e8 	.word	0x004119e8
  4017d8:	004119ec 	.word	0x004119ec
  4017dc:	00406075 	.word	0x00406075
  4017e0:	00406149 	.word	0x00406149
  4017e4:	004119f0 	.word	0x004119f0
  4017e8:	00408a5d 	.word	0x00408a5d
  4017ec:	00411a0c 	.word	0x00411a0c
  4017f0:	00411a30 	.word	0x00411a30
  4017f4:	00411a38 	.word	0x00411a38
  4017f8:	00411a40 	.word	0x00411a40
  4017fc:	0040af1d 	.word	0x0040af1d
  401800:	00411a4c 	.word	0x00411a4c
  401804:	00411a58 	.word	0x00411a58
  401808:	00409781 	.word	0x00409781
  40180c:	00401459 	.word	0x00401459
  401810:	00411a68 	.word	0x00411a68
  401814:	2000bdcc 	.word	0x2000bdcc
  401818:	2000bdc4 	.word	0x2000bdc4
				} else {
					iPower_save_mode = SETTING_DISABLED;
  40181c:	23ff      	movs	r3, #255	; 0xff
  40181e:	4a3e      	ldr	r2, [pc, #248]	; (401918 <network_message_handler+0x398>)
  401820:	7013      	strb	r3, [r2, #0]
					settings_buf[POWER_SAVE_MODE] = SETTING_DISABLED;
  401822:	f88d 300c 	strb.w	r3, [sp, #12]
				}
				
				if(assisted_drive_mode > 0) {
  401826:	f1bb 0f00 	cmp.w	fp, #0
					iAssisted_drive_mode = SETTING_ENABLED;
  40182a:	bfcc      	ite	gt
  40182c:	2301      	movgt	r3, #1
					settings_buf[ASSISTED_DRIVE_MODE] = SETTING_ENABLED;
				} else {
					iAssisted_drive_mode = SETTING_DISABLED;
  40182e:	23ff      	movle	r3, #255	; 0xff
  401830:	4a3a      	ldr	r2, [pc, #232]	; (40191c <network_message_handler+0x39c>)
  401832:	7013      	strb	r3, [r2, #0]
					settings_buf[ASSISTED_DRIVE_MODE] = SETTING_DISABLED;
  401834:	f88d 300d 	strb.w	r3, [sp, #13]

				}

				uiVideo_quality = video_quality;
  401838:	4b39      	ldr	r3, [pc, #228]	; (401920 <network_message_handler+0x3a0>)
  40183a:	f883 a000 	strb.w	sl, [r3]
				settings_buf[VIDEO_QUALITY] = video_quality;
  40183e:	f88d a00e 	strb.w	sl, [sp, #14]
				
				/* Write name to queue */
				portBASE_TYPE xStatus;
				xStatus = xQueueReset(xName_Queue_handle);						// clear queue
  401842:	2100      	movs	r1, #0
  401844:	4b37      	ldr	r3, [pc, #220]	; (401924 <network_message_handler+0x3a4>)
  401846:	6818      	ldr	r0, [r3, #0]
  401848:	4b37      	ldr	r3, [pc, #220]	; (401928 <network_message_handler+0x3a8>)
  40184a:	4798      	blx	r3
				if(xStatus == pdPASS || xStatus == errQUEUE_EMPTY) {			// Queue successfully cleared
  40184c:	2801      	cmp	r0, #1
  40184e:	d81b      	bhi.n	401888 <network_message_handler+0x308>
					name_buf[NAME_SIZE] = strlen(name)+1;
  401850:	4630      	mov	r0, r6
  401852:	4c36      	ldr	r4, [pc, #216]	; (40192c <network_message_handler+0x3ac>)
  401854:	47a0      	blx	r4
  401856:	3001      	adds	r0, #1
  401858:	f88d 0010 	strb.w	r0, [sp, #16]
					memcpy(name_buf+1,name,strlen(name)+1);
  40185c:	4630      	mov	r0, r6
  40185e:	47a0      	blx	r4
  401860:	1c42      	adds	r2, r0, #1
  401862:	4631      	mov	r1, r6
  401864:	f10d 0011 	add.w	r0, sp, #17
  401868:	4b31      	ldr	r3, [pc, #196]	; (401930 <network_message_handler+0x3b0>)
  40186a:	4798      	blx	r3
					xStatus = xQueueSendToBack(xName_Queue_handle, name_buf, 0);
  40186c:	2300      	movs	r3, #0
  40186e:	461a      	mov	r2, r3
  401870:	a904      	add	r1, sp, #16
  401872:	482c      	ldr	r0, [pc, #176]	; (401924 <network_message_handler+0x3a4>)
  401874:	6800      	ldr	r0, [r0, #0]
  401876:	4c2f      	ldr	r4, [pc, #188]	; (401934 <network_message_handler+0x3b4>)
  401878:	47a0      	blx	r4
					if ((xStatus == pdPASS)) {
						if(DEBUG) printf("-I- Name written to queue\r\n");
						error = PARSER_SUCCESS;
					} else if((xStatus == errQUEUE_FULL)) {
  40187a:	b958      	cbnz	r0, 401894 <network_message_handler+0x314>
						printf("-E- Name queue is full\r\n");
  40187c:	482e      	ldr	r0, [pc, #184]	; (401938 <network_message_handler+0x3b8>)
  40187e:	4b2f      	ldr	r3, [pc, #188]	; (40193c <network_message_handler+0x3bc>)
  401880:	4798      	blx	r3
						error = PARSER_ERROR;
  401882:	f04f 38ff 	mov.w	r8, #4294967295
  401886:	e007      	b.n	401898 <network_message_handler+0x318>
					}
				} else {
					printf("-E- Queue could not be cleared\r\n");
  401888:	482d      	ldr	r0, [pc, #180]	; (401940 <network_message_handler+0x3c0>)
  40188a:	4b2c      	ldr	r3, [pc, #176]	; (40193c <network_message_handler+0x3bc>)
  40188c:	4798      	blx	r3
					error = PARSER_ERROR;
  40188e:	f04f 38ff 	mov.w	r8, #4294967295
  401892:	e001      	b.n	401898 <network_message_handler+0x318>
			if(ret) {
				printf("-E- Could not set device name\r\n");
				error = SETTINGS_ERROR;
			} else {
				if(DEBUG) printf("-I- Name: %s\r\n",name);
				error = PARSER_SUCCESS;
  401894:	f04f 0800 	mov.w	r8, #0
					printf("-E- Queue could not be cleared\r\n");
					error = PARSER_ERROR;
				}
						
				/* Write settings to queue */
				xStatus = xQueueReset(xSettings_Msg_Queue_handle);				// clear queue
  401898:	2100      	movs	r1, #0
  40189a:	4b2a      	ldr	r3, [pc, #168]	; (401944 <network_message_handler+0x3c4>)
  40189c:	6818      	ldr	r0, [r3, #0]
  40189e:	4b22      	ldr	r3, [pc, #136]	; (401928 <network_message_handler+0x3a8>)
  4018a0:	4798      	blx	r3
				if(xStatus == pdPASS) {											// Queue successfully cleared
  4018a2:	2801      	cmp	r0, #1
  4018a4:	d10f      	bne.n	4018c6 <network_message_handler+0x346>
					xStatus = xQueueSendToBack(xSettings_Msg_Queue_handle, settings_buf, 0);
  4018a6:	2300      	movs	r3, #0
  4018a8:	461a      	mov	r2, r3
  4018aa:	a903      	add	r1, sp, #12
  4018ac:	4825      	ldr	r0, [pc, #148]	; (401944 <network_message_handler+0x3c4>)
  4018ae:	6800      	ldr	r0, [r0, #0]
  4018b0:	4c20      	ldr	r4, [pc, #128]	; (401934 <network_message_handler+0x3b4>)
  4018b2:	47a0      	blx	r4
					if ((xStatus == pdPASS)) {
  4018b4:	2801      	cmp	r0, #1
  4018b6:	d00c      	beq.n	4018d2 <network_message_handler+0x352>
						if(DEBUG) printf("-I- Settings written to queue\r\n");
						error = PARSER_SUCCESS;
					} else if((xStatus == errQUEUE_FULL)) {
  4018b8:	bb48      	cbnz	r0, 40190e <network_message_handler+0x38e>
						printf("-E- Settings queue is full\r\n");
  4018ba:	4823      	ldr	r0, [pc, #140]	; (401948 <network_message_handler+0x3c8>)
  4018bc:	4b1f      	ldr	r3, [pc, #124]	; (40193c <network_message_handler+0x3bc>)
  4018be:	4798      	blx	r3
						error = PARSER_ERROR;
  4018c0:	f04f 38ff 	mov.w	r8, #4294967295
  4018c4:	e023      	b.n	40190e <network_message_handler+0x38e>
					}
				} else {
					printf("-E- Queue could not be cleared\r\n");
  4018c6:	481e      	ldr	r0, [pc, #120]	; (401940 <network_message_handler+0x3c0>)
  4018c8:	4b1c      	ldr	r3, [pc, #112]	; (40193c <network_message_handler+0x3bc>)
  4018ca:	4798      	blx	r3
					error = PARSER_ERROR;
  4018cc:	f04f 38ff 	mov.w	r8, #4294967295
  4018d0:	e01d      	b.n	40190e <network_message_handler+0x38e>
				xStatus = xQueueReset(xSettings_Msg_Queue_handle);				// clear queue
				if(xStatus == pdPASS) {											// Queue successfully cleared
					xStatus = xQueueSendToBack(xSettings_Msg_Queue_handle, settings_buf, 0);
					if ((xStatus == pdPASS)) {
						if(DEBUG) printf("-I- Settings written to queue\r\n");
						error = PARSER_SUCCESS;
  4018d2:	f04f 0800 	mov.w	r8, #0
  4018d6:	e01a      	b.n	40190e <network_message_handler+0x38e>
#include "nand_flash_storage/nand_flash_storage.h"

/** Event handler for network messages */
int8_t network_message_handler(char *msg)
{
	int8_t error = PARSER_ERROR;
  4018d8:	f04f 38ff 	mov.w	r8, #4294967295
  4018dc:	e017      	b.n	40190e <network_message_handler+0x38e>
					printf("-E- Queue could not be cleared\r\n");
					error = PARSER_ERROR;
				}
			}
		} else {
			error = SETTINGS_ERROR;
  4018de:	f06f 0802 	mvn.w	r8, #2
  4018e2:	e014      	b.n	40190e <network_message_handler+0x38e>
  4018e4:	f06f 0802 	mvn.w	r8, #2
  4018e8:	e011      	b.n	40190e <network_message_handler+0x38e>
  4018ea:	f06f 0802 	mvn.w	r8, #2
  4018ee:	e00e      	b.n	40190e <network_message_handler+0x38e>
  4018f0:	f06f 0802 	mvn.w	r8, #2
  4018f4:	e00b      	b.n	40190e <network_message_handler+0x38e>
  4018f6:	f06f 0802 	mvn.w	r8, #2
		}
	}
	return error;
  4018fa:	e008      	b.n	40190e <network_message_handler+0x38e>
			if(error != SETTINGS_ERROR) {
				int8_t settings_buf[SETTINGS_MSG_QUEUE_ITEM_SIZE];
				uint8 name_buf[NAME_QUEUE_ITEM_SIZE];
				
				/* Store settings in non-volatile memory */
				nand_flash_storage_write(msg,PACKET_SIZE);
  4018fc:	21ff      	movs	r1, #255	; 0xff
  4018fe:	9801      	ldr	r0, [sp, #4]
  401900:	4b12      	ldr	r3, [pc, #72]	; (40194c <network_message_handler+0x3cc>)
  401902:	4798      	blx	r3
				
				/* Save current settings to RAM */
				if(power_save_mode > 0) {
  401904:	f1b9 0f00 	cmp.w	r9, #0
  401908:	f73f af4e 	bgt.w	4017a8 <network_message_handler+0x228>
  40190c:	e786      	b.n	40181c <network_message_handler+0x29c>
		} else {
			error = SETTINGS_ERROR;
		}
	}
	return error;
}
  40190e:	4640      	mov	r0, r8
  401910:	b04d      	add	sp, #308	; 0x134
  401912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401916:	bf00      	nop
  401918:	2000bdcc 	.word	0x2000bdcc
  40191c:	2000bdfc 	.word	0x2000bdfc
  401920:	2000bdb8 	.word	0x2000bdb8
  401924:	2000bdac 	.word	0x2000bdac
  401928:	00406075 	.word	0x00406075
  40192c:	00409781 	.word	0x00409781
  401930:	00409015 	.word	0x00409015
  401934:	00406149 	.word	0x00406149
  401938:	00411a88 	.word	0x00411a88
  40193c:	00408a5d 	.word	0x00408a5d
  401940:	00411a0c 	.word	0x00411a0c
  401944:	2000bdbc 	.word	0x2000bdbc
  401948:	00411aa4 	.word	0x00411aa4
  40194c:	00400b11 	.word	0x00400b11

00401950 <generate_status_packet>:
									char* name,
									uint8_t battery,
									int8_t camera,
									uint16_t space,
									uint16_t remaining_space)
{
  401950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401954:	b083      	sub	sp, #12
  401956:	af00      	add	r7, sp, #0
  401958:	4605      	mov	r5, r0
  40195a:	468a      	mov	sl, r1
  40195c:	4690      	mov	r8, r2
  40195e:	469b      	mov	fp, r3
  401960:	f8b7 9030 	ldrh.w	r9, [r7, #48]	; 0x30
  401964:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
	/** Multiple use tag sizes */
	uint8_t data_spacing_size = strlen(DATA_TAG_SPACING);
	uint8_t tag_separator_size = strlen(TAG_SEPARATOR);
		
	/** Initialize packet to zero */
	memset(packet,0,PACKET_SIZE);
  401966:	22ff      	movs	r2, #255	; 0xff
  401968:	2100      	movs	r1, #0
  40196a:	4b86      	ldr	r3, [pc, #536]	; (401b84 <generate_status_packet+0x234>)
  40196c:	4798      	blx	r3
		
	/** Cmd specifier */
	memcpy(packet,CMD_STATUS,CMD_SPECIFIER_SIZE);
  40196e:	4b86      	ldr	r3, [pc, #536]	; (401b88 <generate_status_packet+0x238>)
  401970:	6818      	ldr	r0, [r3, #0]
  401972:	6028      	str	r0, [r5, #0]
  401974:	889b      	ldrh	r3, [r3, #4]
  401976:	80ab      	strh	r3, [r5, #4]
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
  401978:	233b      	movs	r3, #59	; 0x3b
  40197a:	71ab      	strb	r3, [r5, #6]
	index = index + tag_separator_size;			
		
	/** Name */
	if(name != NULL)
  40197c:	f1ba 0f00 	cmp.w	sl, #0
  401980:	d017      	beq.n	4019b2 <generate_status_packet+0x62>
	{
		if(sizeof(name) <= 30)
		{
			uint8_t tag_size = strlen(TAG_STATUS_NAME);
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_NAME,tag_size);
  401982:	4b82      	ldr	r3, [pc, #520]	; (401b8c <generate_status_packet+0x23c>)
  401984:	6818      	ldr	r0, [r3, #0]
  401986:	f8c5 0007 	str.w	r0, [r5, #7]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  40198a:	233a      	movs	r3, #58	; 0x3a
  40198c:	72eb      	strb	r3, [r5, #11]
			index = index + data_spacing_size;
				
			// Data
			uint8_t data_size = strlen(name);
  40198e:	4650      	mov	r0, sl
  401990:	4b7f      	ldr	r3, [pc, #508]	; (401b90 <generate_status_packet+0x240>)
  401992:	4798      	blx	r3
  401994:	b2c4      	uxtb	r4, r0
			memcpy(packet+index,name,data_size);
  401996:	4622      	mov	r2, r4
  401998:	4651      	mov	r1, sl
  40199a:	f105 000c 	add.w	r0, r5, #12
  40199e:	4b7d      	ldr	r3, [pc, #500]	; (401b94 <generate_status_packet+0x244>)
  4019a0:	4798      	blx	r3
			index = index + data_size;
				
			// Tag separator
			packet[index] = TAG_SEPARATOR[0];
  4019a2:	f104 030c 	add.w	r3, r4, #12
  4019a6:	b2db      	uxtb	r3, r3
  4019a8:	223b      	movs	r2, #59	; 0x3b
  4019aa:	54ea      	strb	r2, [r5, r3]
			index = index + tag_separator_size;
  4019ac:	340d      	adds	r4, #13
  4019ae:	b2e4      	uxtb	r4, r4
  4019b0:	e000      	b.n	4019b4 <generate_status_packet+0x64>
		
	/** Cmd specifier */
	memcpy(packet,CMD_STATUS,CMD_SPECIFIER_SIZE);
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
	index = index + tag_separator_size;			
  4019b2:	2407      	movs	r4, #7
			ret = -1;
		}
	}
		
	/** Battery */
	if(battery != NULL)
  4019b4:	f1b8 0f00 	cmp.w	r8, #0
  4019b8:	d031      	beq.n	401a1e <generate_status_packet+0xce>
	{
  4019ba:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t tag_size = strlen(TAG_STATUS_BATTERY);
		// Data tag specifier
		memcpy(packet+index,TAG_STATUS_BATTERY,tag_size);
  4019be:	192a      	adds	r2, r5, r4
  4019c0:	4b75      	ldr	r3, [pc, #468]	; (401b98 <generate_status_packet+0x248>)
  4019c2:	6818      	ldr	r0, [r3, #0]
  4019c4:	5128      	str	r0, [r5, r4]
  4019c6:	8899      	ldrh	r1, [r3, #4]
  4019c8:	799b      	ldrb	r3, [r3, #6]
  4019ca:	8091      	strh	r1, [r2, #4]
  4019cc:	7193      	strb	r3, [r2, #6]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  4019ce:	1de3      	adds	r3, r4, #7
  4019d0:	b2db      	uxtb	r3, r3
  4019d2:	223a      	movs	r2, #58	; 0x3a
  4019d4:	54ea      	strb	r2, [r5, r3]
		index = index + data_spacing_size;	
  4019d6:	3408      	adds	r4, #8
  4019d8:	b2e4      	uxtb	r4, r4
			
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
  4019da:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
			battery = 100;
			digits = 3;
		}
		else
		{
			digits = 2;
  4019de:	bf92      	itee	ls
  4019e0:	f04f 0a02 	movls.w	sl, #2
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
		{
			battery = 100;
			digits = 3;
  4019e4:	f04f 0a03 	movhi.w	sl, #3
			
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
		{
			battery = 100;
  4019e8:	f04f 0864 	movhi.w	r8, #100	; 0x64
		else
		{
			digits = 2;
		}
		// Data
		char* tmp[digits];
  4019ec:	ea4f 038a 	mov.w	r3, sl, lsl #2
  4019f0:	330a      	adds	r3, #10
  4019f2:	f023 0307 	bic.w	r3, r3, #7
  4019f6:	ebad 0d03 	sub.w	sp, sp, r3
		sprintf(tmp, "%d", battery);
  4019fa:	4642      	mov	r2, r8
  4019fc:	4967      	ldr	r1, [pc, #412]	; (401b9c <generate_status_packet+0x24c>)
  4019fe:	4668      	mov	r0, sp
  401a00:	4b67      	ldr	r3, [pc, #412]	; (401ba0 <generate_status_packet+0x250>)
  401a02:	4798      	blx	r3
		memcpy(packet+index,tmp,digits);
  401a04:	4652      	mov	r2, sl
  401a06:	4669      	mov	r1, sp
  401a08:	1928      	adds	r0, r5, r4
  401a0a:	4b62      	ldr	r3, [pc, #392]	; (401b94 <generate_status_packet+0x244>)
  401a0c:	4798      	blx	r3
		index = index + digits;
  401a0e:	4454      	add	r4, sl
  401a10:	b2e4      	uxtb	r4, r4
			
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  401a12:	233b      	movs	r3, #59	; 0x3b
  401a14:	552b      	strb	r3, [r5, r4]
		index = index + tag_separator_size;
  401a16:	3401      	adds	r4, #1
  401a18:	b2e4      	uxtb	r4, r4
  401a1a:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}
		
	/** Camera */
	if(camera != NULL)
  401a1e:	f1bb 0f00 	cmp.w	fp, #0
  401a22:	d017      	beq.n	401a54 <generate_status_packet+0x104>
	{
		uint8_t tag_size = strlen(TAG_STATUS_CAMERA);
		// Data tag specifier
		memcpy(packet+index,TAG_STATUS_CAMERA,tag_size);
  401a24:	192b      	adds	r3, r5, r4
  401a26:	4a5f      	ldr	r2, [pc, #380]	; (401ba4 <generate_status_packet+0x254>)
  401a28:	6810      	ldr	r0, [r2, #0]
  401a2a:	5128      	str	r0, [r5, r4]
  401a2c:	8892      	ldrh	r2, [r2, #4]
  401a2e:	809a      	strh	r2, [r3, #4]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  401a30:	1da3      	adds	r3, r4, #6
  401a32:	b2db      	uxtb	r3, r3
  401a34:	223a      	movs	r2, #58	; 0x3a
  401a36:	54ea      	strb	r2, [r5, r3]
		index = index + data_spacing_size;	
  401a38:	1de3      	adds	r3, r4, #7
  401a3a:	b2db      	uxtb	r3, r3
			
		// Data
		if(camera < 0)
  401a3c:	f1bb 0f00 	cmp.w	fp, #0
		{
			packet[index] = VALUE_FALSE[0];
  401a40:	bfb4      	ite	lt
  401a42:	2230      	movlt	r2, #48	; 0x30
			index = index + sizeof(VALUE_FALSE[0]);
		}
		else
		{
			packet[index] = VALUE_TRUE[0];
  401a44:	2231      	movge	r2, #49	; 0x31
  401a46:	54ea      	strb	r2, [r5, r3]
			index = index + sizeof(VALUE_TRUE[0]);
  401a48:	3408      	adds	r4, #8
  401a4a:	b2e4      	uxtb	r4, r4
		}
			
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  401a4c:	233b      	movs	r3, #59	; 0x3b
  401a4e:	552b      	strb	r3, [r5, r4]
		index = index + tag_separator_size;
  401a50:	3401      	adds	r4, #1
  401a52:	b2e4      	uxtb	r4, r4
	}
		
	/** Storage space */
	if(space != NULL)
  401a54:	f1b9 0f00 	cmp.w	r9, #0
  401a58:	d042      	beq.n	401ae0 <generate_status_packet+0x190>
	{
		// Remaining space must also be set
		if(remaining_space!= NULL)
  401a5a:	2e00      	cmp	r6, #0
  401a5c:	f000 8086 	beq.w	401b6c <generate_status_packet+0x21c>
		{
  401a60:	46e8      	mov	r8, sp
			uint8_t tag_size = strlen(TAG_STATUS_STORAGE_SPACE);
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_STORAGE_SPACE,tag_size);
  401a62:	192a      	adds	r2, r5, r4
  401a64:	4b50      	ldr	r3, [pc, #320]	; (401ba8 <generate_status_packet+0x258>)
  401a66:	6818      	ldr	r0, [r3, #0]
  401a68:	5128      	str	r0, [r5, r4]
  401a6a:	791b      	ldrb	r3, [r3, #4]
  401a6c:	7113      	strb	r3, [r2, #4]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  401a6e:	1d63      	adds	r3, r4, #5
  401a70:	b2db      	uxtb	r3, r3
  401a72:	223a      	movs	r2, #58	; 0x3a
  401a74:	54ea      	strb	r2, [r5, r3]
			index = index + data_spacing_size;		
  401a76:	3406      	adds	r4, #6
  401a78:	b2e4      	uxtb	r4, r4
						
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
  401a7a:	2e09      	cmp	r6, #9
  401a7c:	d90d      	bls.n	401a9a <generate_status_packet+0x14a>
			{
				digits = 1;
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
  401a7e:	2e63      	cmp	r6, #99	; 0x63
  401a80:	d90e      	bls.n	401aa0 <generate_status_packet+0x150>
			{
				digits = 2;
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
  401a82:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
  401a86:	d30e      	bcc.n	401aa6 <generate_status_packet+0x156>
				digits = 4;
			}
			// 10000-65536 = 5 digits
			else
			{
				digits = 5;
  401a88:	f242 7a0f 	movw	sl, #9999	; 0x270f
  401a8c:	4556      	cmp	r6, sl
  401a8e:	bf94      	ite	ls
  401a90:	f04f 0a04 	movls.w	sl, #4
  401a94:	f04f 0a05 	movhi.w	sl, #5
  401a98:	e007      	b.n	401aaa <generate_status_packet+0x15a>
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
			{
				digits = 1;
  401a9a:	f04f 0a01 	mov.w	sl, #1
  401a9e:	e004      	b.n	401aaa <generate_status_packet+0x15a>
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
			{
				digits = 2;
  401aa0:	f04f 0a02 	mov.w	sl, #2
  401aa4:	e001      	b.n	401aaa <generate_status_packet+0x15a>
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
			{
				digits = 3;
  401aa6:	f04f 0a03 	mov.w	sl, #3
			{
				digits = 5;
			}
				
			// Data
			char* tmp[digits];
  401aaa:	ea4f 038a 	mov.w	r3, sl, lsl #2
  401aae:	330a      	adds	r3, #10
  401ab0:	f023 0307 	bic.w	r3, r3, #7
  401ab4:	ebad 0d03 	sub.w	sp, sp, r3
			sprintf(tmp, "%d", space);
  401ab8:	464a      	mov	r2, r9
  401aba:	4938      	ldr	r1, [pc, #224]	; (401b9c <generate_status_packet+0x24c>)
  401abc:	4668      	mov	r0, sp
  401abe:	4b38      	ldr	r3, [pc, #224]	; (401ba0 <generate_status_packet+0x250>)
  401ac0:	4798      	blx	r3
			memcpy(packet+index,tmp,digits);
  401ac2:	4652      	mov	r2, sl
  401ac4:	4669      	mov	r1, sp
  401ac6:	1928      	adds	r0, r5, r4
  401ac8:	4b32      	ldr	r3, [pc, #200]	; (401b94 <generate_status_packet+0x244>)
  401aca:	4798      	blx	r3
			index = index + digits;
  401acc:	4454      	add	r4, sl
  401ace:	b2e4      	uxtb	r4, r4
				
			// Tag separator
			packet[index] = TAG_SEPARATOR[0];
  401ad0:	233b      	movs	r3, #59	; 0x3b
  401ad2:	552b      	strb	r3, [r5, r4]
			index = index + tag_separator_size;	
  401ad4:	1c63      	adds	r3, r4, #1
  401ad6:	b2db      	uxtb	r3, r3
  401ad8:	46c5      	mov	sp, r8
					
	/** Remaining storage space */
	if(remaining_space != NULL)
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
  401ada:	45b1      	cmp	r9, r6
  401adc:	d949      	bls.n	401b72 <generate_status_packet+0x222>
  401ade:	e002      	b.n	401ae6 <generate_status_packet+0x196>
			ret = -1;
		}
	}
					
	/** Remaining storage space */
	if(remaining_space != NULL)
  401ae0:	2e00      	cmp	r6, #0
  401ae2:	d146      	bne.n	401b72 <generate_status_packet+0x222>
  401ae4:	e048      	b.n	401b78 <generate_status_packet+0x228>
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
		{
  401ae6:	46e8      	mov	r8, sp
			uint8_t tag_size = strlen(TAG_STATUS_STORAGE_REMAINING);
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_STORAGE_REMAINING,tag_size);
  401ae8:	eb05 0e03 	add.w	lr, r5, r3
  401aec:	4a2f      	ldr	r2, [pc, #188]	; (401bac <generate_status_packet+0x25c>)
  401aee:	ca03      	ldmia	r2!, {r0, r1}
  401af0:	50e8      	str	r0, [r5, r3]
  401af2:	f8ce 1004 	str.w	r1, [lr, #4]
  401af6:	7813      	ldrb	r3, [r2, #0]
  401af8:	f88e 3008 	strb.w	r3, [lr, #8]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  401afc:	f104 030a 	add.w	r3, r4, #10
  401b00:	b2db      	uxtb	r3, r3
  401b02:	223a      	movs	r2, #58	; 0x3a
  401b04:	54ea      	strb	r2, [r5, r3]
			index = index + data_spacing_size;
  401b06:	340b      	adds	r4, #11
  401b08:	b2e4      	uxtb	r4, r4
			
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
  401b0a:	2e09      	cmp	r6, #9
  401b0c:	d90d      	bls.n	401b2a <generate_status_packet+0x1da>
			{
				digits = 1;
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
  401b0e:	2e63      	cmp	r6, #99	; 0x63
  401b10:	d90e      	bls.n	401b30 <generate_status_packet+0x1e0>
			{
				digits = 2;
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
  401b12:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
  401b16:	d30e      	bcc.n	401b36 <generate_status_packet+0x1e6>
				digits = 4;
			}
			// 10000-65536 = 5 digits
			else
			{
				digits = 5;
  401b18:	f242 790f 	movw	r9, #9999	; 0x270f
  401b1c:	454e      	cmp	r6, r9
  401b1e:	bf94      	ite	ls
  401b20:	f04f 0904 	movls.w	r9, #4
  401b24:	f04f 0905 	movhi.w	r9, #5
  401b28:	e007      	b.n	401b3a <generate_status_packet+0x1ea>
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
			{
				digits = 1;
  401b2a:	f04f 0901 	mov.w	r9, #1
  401b2e:	e004      	b.n	401b3a <generate_status_packet+0x1ea>
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
			{
				digits = 2;
  401b30:	f04f 0902 	mov.w	r9, #2
  401b34:	e001      	b.n	401b3a <generate_status_packet+0x1ea>
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
			{
				digits = 3;
  401b36:	f04f 0903 	mov.w	r9, #3
			{
				digits = 5;
			}
				
			// Data
			char* tmp[digits];
  401b3a:	ea4f 0389 	mov.w	r3, r9, lsl #2
  401b3e:	330a      	adds	r3, #10
  401b40:	f023 0307 	bic.w	r3, r3, #7
  401b44:	ebad 0d03 	sub.w	sp, sp, r3
			sprintf(tmp, "%d", remaining_space);
  401b48:	4632      	mov	r2, r6
  401b4a:	4914      	ldr	r1, [pc, #80]	; (401b9c <generate_status_packet+0x24c>)
  401b4c:	4668      	mov	r0, sp
  401b4e:	4b14      	ldr	r3, [pc, #80]	; (401ba0 <generate_status_packet+0x250>)
  401b50:	4798      	blx	r3
			memcpy(packet+index,tmp,digits);
  401b52:	464a      	mov	r2, r9
  401b54:	4669      	mov	r1, sp
  401b56:	1928      	adds	r0, r5, r4
  401b58:	4b0e      	ldr	r3, [pc, #56]	; (401b94 <generate_status_packet+0x244>)
  401b5a:	4798      	blx	r3
				
			// Tag separator
			index = index + digits;
  401b5c:	444c      	add	r4, r9
  401b5e:	b2e4      	uxtb	r4, r4
			packet[index] = TAG_SEPARATOR[0];
  401b60:	233b      	movs	r3, #59	; 0x3b
  401b62:	552b      	strb	r3, [r5, r4]
			index = index + tag_separator_size;
  401b64:	3401      	adds	r4, #1
  401b66:	b2e4      	uxtb	r4, r4
  401b68:	46c5      	mov	sp, r8
	/** Remaining storage space */
	if(remaining_space != NULL)
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
		{
  401b6a:	e005      	b.n	401b78 <generate_status_packet+0x228>
			packet[index] = TAG_SEPARATOR[0];
			index = index + tag_separator_size;	
		}
		else
		{
			ret = -1;
  401b6c:	f04f 30ff 	mov.w	r0, #4294967295
  401b70:	e003      	b.n	401b7a <generate_status_packet+0x22a>
  401b72:	f04f 30ff 	mov.w	r0, #4294967295
  401b76:	e000      	b.n	401b7a <generate_status_packet+0x22a>
	}	
	
	if(ret < 0)
		return ret;
	else
		return index;
  401b78:	b260      	sxtb	r0, r4
}
  401b7a:	370c      	adds	r7, #12
  401b7c:	46bd      	mov	sp, r7
  401b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b82:	bf00      	nop
  401b84:	00409149 	.word	0x00409149
  401b88:	00411ac4 	.word	0x00411ac4
  401b8c:	00411a38 	.word	0x00411a38
  401b90:	00409781 	.word	0x00409781
  401b94:	00409015 	.word	0x00409015
  401b98:	00411acc 	.word	0x00411acc
  401b9c:	0041155c 	.word	0x0041155c
  401ba0:	00409371 	.word	0x00409371
  401ba4:	00411ad4 	.word	0x00411ad4
  401ba8:	00411adc 	.word	0x00411adc
  401bac:	00411ae4 	.word	0x00411ae4

00401bb0 <generate_settings_packet>:
int8_t generate_settings_packet(char* packet,
								char* name,
								int8_t power_mode,
								int8_t assisted_drive,
								uint8_t video_quality)
{
  401bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bb4:	af00      	add	r7, sp, #0
  401bb6:	4680      	mov	r8, r0
  401bb8:	460d      	mov	r5, r1
  401bba:	4616      	mov	r6, r2
  401bbc:	461c      	mov	r4, r3
  401bbe:	f897 9028 	ldrb.w	r9, [r7, #40]	; 0x28
	/** Multiple use tag sizes */
	uint8_t data_spacing_size = strlen(DATA_TAG_SPACING);
	uint8_t tag_separator_size = strlen(TAG_SEPARATOR);	
	
	/** Initialize packet to zero */
	memset(packet,0,PACKET_SIZE);
  401bc2:	22ff      	movs	r2, #255	; 0xff
  401bc4:	2100      	movs	r1, #0
  401bc6:	4b5e      	ldr	r3, [pc, #376]	; (401d40 <generate_settings_packet+0x190>)
  401bc8:	4798      	blx	r3
	
	/** Cmd specifier */
	memcpy(packet,CMD_SETTINGS,CMD_SPECIFIER_SIZE);
  401bca:	4b5e      	ldr	r3, [pc, #376]	; (401d44 <generate_settings_packet+0x194>)
  401bcc:	6818      	ldr	r0, [r3, #0]
  401bce:	f8c8 0000 	str.w	r0, [r8]
  401bd2:	889b      	ldrh	r3, [r3, #4]
  401bd4:	f8a8 3004 	strh.w	r3, [r8, #4]
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
  401bd8:	233b      	movs	r3, #59	; 0x3b
  401bda:	f888 3006 	strb.w	r3, [r8, #6]
	index = index + tag_separator_size;
	
	/** Name */
	if(name != NULL)
  401bde:	b30d      	cbz	r5, 401c24 <generate_settings_packet+0x74>
	{
		if(strlen(name) <= 30)
  401be0:	4628      	mov	r0, r5
  401be2:	4b59      	ldr	r3, [pc, #356]	; (401d48 <generate_settings_packet+0x198>)
  401be4:	4798      	blx	r3
  401be6:	281e      	cmp	r0, #30
  401be8:	d81f      	bhi.n	401c2a <generate_settings_packet+0x7a>
		{
			uint8_t tag_size = strlen(TAG_SETTINGS_NAME);	//ignore NUL-terminator
			// Data tag specifier
			memcpy(packet+index,TAG_SETTINGS_NAME,tag_size);
  401bea:	4b58      	ldr	r3, [pc, #352]	; (401d4c <generate_settings_packet+0x19c>)
  401bec:	6818      	ldr	r0, [r3, #0]
  401bee:	f8c8 0007 	str.w	r0, [r8, #7]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  401bf2:	233a      	movs	r3, #58	; 0x3a
  401bf4:	f888 300b 	strb.w	r3, [r8, #11]
			index = index + data_spacing_size;
			
			// Data
			uint8_t data_size = strlen(name);				
  401bf8:	4628      	mov	r0, r5
  401bfa:	4b53      	ldr	r3, [pc, #332]	; (401d48 <generate_settings_packet+0x198>)
  401bfc:	4798      	blx	r3
  401bfe:	fa5f fa80 	uxtb.w	sl, r0
			memcpy(packet+index,name,data_size);
  401c02:	4652      	mov	r2, sl
  401c04:	4629      	mov	r1, r5
  401c06:	f108 000c 	add.w	r0, r8, #12
  401c0a:	4b51      	ldr	r3, [pc, #324]	; (401d50 <generate_settings_packet+0x1a0>)
  401c0c:	4798      	blx	r3
			index = index + data_size;
			
			// Tag separator
			packet[index] = TAG_SEPARATOR[0];
  401c0e:	f10a 030c 	add.w	r3, sl, #12
  401c12:	b2db      	uxtb	r3, r3
  401c14:	223b      	movs	r2, #59	; 0x3b
  401c16:	f808 2003 	strb.w	r2, [r8, r3]
			index = index + tag_separator_size;
  401c1a:	f10a 030d 	add.w	r3, sl, #13
  401c1e:	b2db      	uxtb	r3, r3
								char* name,
								int8_t power_mode,
								int8_t assisted_drive,
								uint8_t video_quality)
{
	int8_t ret = 0;
  401c20:	2500      	movs	r5, #0
  401c22:	e005      	b.n	401c30 <generate_settings_packet+0x80>
	
	/** Cmd specifier */
	memcpy(packet,CMD_SETTINGS,CMD_SPECIFIER_SIZE);
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
	index = index + tag_separator_size;
  401c24:	2307      	movs	r3, #7
								char* name,
								int8_t power_mode,
								int8_t assisted_drive,
								uint8_t video_quality)
{
	int8_t ret = 0;
  401c26:	2500      	movs	r5, #0
  401c28:	e002      	b.n	401c30 <generate_settings_packet+0x80>
	
	/** Cmd specifier */
	memcpy(packet,CMD_SETTINGS,CMD_SPECIFIER_SIZE);
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
	index = index + tag_separator_size;
  401c2a:	2307      	movs	r3, #7
			packet[index] = TAG_SEPARATOR[0];
			index = index + tag_separator_size;
		}
		else
		{
			ret = -1;
  401c2c:	f04f 35ff 	mov.w	r5, #4294967295
		}
	}
	
	/** Power Save Mode */
	if(power_mode != NULL)
  401c30:	b316      	cbz	r6, 401c78 <generate_settings_packet+0xc8>
	{
		uint8_t tag_size = strlen(TAG_SETTINGS_POWER_SAVE_MODE);	//ignore NUL-terminator
		// Data tag specifier
		memcpy(packet+index,TAG_SETTINGS_POWER_SAVE_MODE,tag_size);
  401c32:	eb08 0e03 	add.w	lr, r8, r3
  401c36:	4a47      	ldr	r2, [pc, #284]	; (401d54 <generate_settings_packet+0x1a4>)
  401c38:	ca03      	ldmia	r2!, {r0, r1}
  401c3a:	f848 0003 	str.w	r0, [r8, r3]
  401c3e:	4670      	mov	r0, lr
  401c40:	f8ce 1004 	str.w	r1, [lr, #4]
  401c44:	7812      	ldrb	r2, [r2, #0]
  401c46:	f88e 2008 	strb.w	r2, [lr, #8]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  401c4a:	f103 0209 	add.w	r2, r3, #9
  401c4e:	b2d2      	uxtb	r2, r2
  401c50:	213a      	movs	r1, #58	; 0x3a
  401c52:	f808 1002 	strb.w	r1, [r8, r2]
		index = index + data_spacing_size;
  401c56:	f103 020a 	add.w	r2, r3, #10
  401c5a:	b2d2      	uxtb	r2, r2
		
		// Data
		if(power_mode < 0 )			// Activated
  401c5c:	2e00      	cmp	r6, #0
			packet[index] = VALUE_FALSE[0];
  401c5e:	bfb4      	ite	lt
  401c60:	2130      	movlt	r1, #48	; 0x30
		else						// Deactivated
			packet[index] = VALUE_TRUE[0];
  401c62:	2131      	movge	r1, #49	; 0x31
  401c64:	f808 1002 	strb.w	r1, [r8, r2]

		index = index + 1;
		
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  401c68:	f103 020b 	add.w	r2, r3, #11
  401c6c:	b2d2      	uxtb	r2, r2
  401c6e:	213b      	movs	r1, #59	; 0x3b
  401c70:	f808 1002 	strb.w	r1, [r8, r2]
		index = index + tag_separator_size;
  401c74:	330c      	adds	r3, #12
  401c76:	b2db      	uxtb	r3, r3
	}
	
	/** Assisted Drive Mode */
	if(assisted_drive != NULL)
  401c78:	b1ec      	cbz	r4, 401cb6 <generate_settings_packet+0x106>
	{
		uint8_t tag_size = strlen(TAG_SETTINGS_ASSISTED_DRIVE_MODE);
		// Data tag specifier
		memcpy(packet+index,TAG_SETTINGS_ASSISTED_DRIVE_MODE,tag_size);
  401c7a:	eb08 0603 	add.w	r6, r8, r3
  401c7e:	4a36      	ldr	r2, [pc, #216]	; (401d58 <generate_settings_packet+0x1a8>)
  401c80:	ca03      	ldmia	r2!, {r0, r1}
  401c82:	f848 0003 	str.w	r0, [r8, r3]
  401c86:	6071      	str	r1, [r6, #4]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  401c88:	f103 0208 	add.w	r2, r3, #8
  401c8c:	b2d2      	uxtb	r2, r2
  401c8e:	213a      	movs	r1, #58	; 0x3a
  401c90:	f808 1002 	strb.w	r1, [r8, r2]
		index = index + data_spacing_size;
  401c94:	f103 0209 	add.w	r2, r3, #9
  401c98:	b2d2      	uxtb	r2, r2
		
		// Data
		if(assisted_drive < 0)
  401c9a:	2c00      	cmp	r4, #0
			packet[index] = VALUE_FALSE[0];
  401c9c:	bfb4      	ite	lt
  401c9e:	2130      	movlt	r1, #48	; 0x30
		else
			packet[index] = VALUE_TRUE[0];
  401ca0:	2131      	movge	r1, #49	; 0x31
  401ca2:	f808 1002 	strb.w	r1, [r8, r2]
		
		index = index + 1;
		
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  401ca6:	f103 020a 	add.w	r2, r3, #10
  401caa:	b2d2      	uxtb	r2, r2
  401cac:	213b      	movs	r1, #59	; 0x3b
  401cae:	f808 1002 	strb.w	r1, [r8, r2]
		index = index + tag_separator_size;
  401cb2:	330b      	adds	r3, #11
  401cb4:	b2db      	uxtb	r3, r3
	}
	
	/** Video Quality */
	if(video_quality != NULL)
  401cb6:	f1b9 0f00 	cmp.w	r9, #0
  401cba:	d03a      	beq.n	401d32 <generate_settings_packet+0x182>
	{
  401cbc:	466e      	mov	r6, sp
		uint8_t tag_size = strlen(TAG_SETTINGS_VIDEO_QUALITY);
		// Data tag specifier
		memcpy(packet+index,TAG_SETTINGS_VIDEO_QUALITY,tag_size);
  401cbe:	eb08 0e03 	add.w	lr, r8, r3
  401cc2:	4c26      	ldr	r4, [pc, #152]	; (401d5c <generate_settings_packet+0x1ac>)
  401cc4:	cc07      	ldmia	r4!, {r0, r1, r2}
  401cc6:	f848 0003 	str.w	r0, [r8, r3]
  401cca:	f8ce 1004 	str.w	r1, [lr, #4]
  401cce:	f8ce 2008 	str.w	r2, [lr, #8]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  401cd2:	f103 020c 	add.w	r2, r3, #12
  401cd6:	b2d2      	uxtb	r2, r2
  401cd8:	213a      	movs	r1, #58	; 0x3a
  401cda:	f808 1002 	strb.w	r1, [r8, r2]
		index = index + data_spacing_size;
  401cde:	330d      	adds	r3, #13
  401ce0:	b2dc      	uxtb	r4, r3
			
		// Find number of characters needed to represent the number
		uint8_t digits;
		// 0-9 = 1 digit
		if(video_quality < 10)
  401ce2:	f1b9 0f09 	cmp.w	r9, #9
  401ce6:	d907      	bls.n	401cf8 <generate_settings_packet+0x148>
			digits = 2;
		}
		// 100-255 = 3 digits
		else
		{
			digits = 3;
  401ce8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
  401cec:	bf34      	ite	cc
  401cee:	f04f 0a02 	movcc.w	sl, #2
  401cf2:	f04f 0a03 	movcs.w	sl, #3
  401cf6:	e001      	b.n	401cfc <generate_settings_packet+0x14c>
		// Find number of characters needed to represent the number
		uint8_t digits;
		// 0-9 = 1 digit
		if(video_quality < 10)
		{
			digits = 1;
  401cf8:	f04f 0a01 	mov.w	sl, #1
		{
			digits = 3;
		}
			
		// Data
		char* tmp[digits];
  401cfc:	ea4f 038a 	mov.w	r3, sl, lsl #2
  401d00:	330a      	adds	r3, #10
  401d02:	f023 0307 	bic.w	r3, r3, #7
  401d06:	ebad 0d03 	sub.w	sp, sp, r3
		sprintf(tmp, "%d", video_quality);
  401d0a:	464a      	mov	r2, r9
  401d0c:	4914      	ldr	r1, [pc, #80]	; (401d60 <generate_settings_packet+0x1b0>)
  401d0e:	4668      	mov	r0, sp
  401d10:	4b14      	ldr	r3, [pc, #80]	; (401d64 <generate_settings_packet+0x1b4>)
  401d12:	4798      	blx	r3
		memcpy(packet+index,tmp,digits);
  401d14:	4652      	mov	r2, sl
  401d16:	4669      	mov	r1, sp
  401d18:	eb08 0004 	add.w	r0, r8, r4
  401d1c:	4b0c      	ldr	r3, [pc, #48]	; (401d50 <generate_settings_packet+0x1a0>)
  401d1e:	4798      	blx	r3
		index = index + digits;
  401d20:	eb0a 0304 	add.w	r3, sl, r4
  401d24:	b2db      	uxtb	r3, r3
			
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  401d26:	223b      	movs	r2, #59	; 0x3b
  401d28:	f808 2003 	strb.w	r2, [r8, r3]
		index = index + tag_separator_size;
  401d2c:	3301      	adds	r3, #1
  401d2e:	b2db      	uxtb	r3, r3
  401d30:	46b5      	mov	sp, r6
	}
	
	if(ret < 0)
  401d32:	2d00      	cmp	r5, #0
		return ret;
	else
		return index;
  401d34:	bfac      	ite	ge
  401d36:	b258      	sxtbge	r0, r3
		packet[index] = TAG_SEPARATOR[0];
		index = index + tag_separator_size;
	}
	
	if(ret < 0)
		return ret;
  401d38:	4628      	movlt	r0, r5
	else
		return index;
}
  401d3a:	46bd      	mov	sp, r7
  401d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d40:	00409149 	.word	0x00409149
  401d44:	00411a30 	.word	0x00411a30
  401d48:	00409781 	.word	0x00409781
  401d4c:	00411a38 	.word	0x00411a38
  401d50:	00409015 	.word	0x00409015
  401d54:	00411a4c 	.word	0x00411a4c
  401d58:	00411a40 	.word	0x00411a40
  401d5c:	00411a58 	.word	0x00411a58
  401d60:	0041155c 	.word	0x0041155c
  401d64:	00409371 	.word	0x00409371

00401d68 <apply_default_settings>:

int8_t apply_default_settings(void) 
{
  401d68:	b510      	push	{r4, lr}
  401d6a:	b08a      	sub	sp, #40	; 0x28
	portBASE_TYPE xStatus;
	int8_t error = PARSER_ERROR;

	/* Configure device name */
	uint8_t size = strlen(DEFAULT_WLAN_DEVICE_NAME);
	int8_t ret = wifi_set_device_name(DEFAULT_WLAN_DEVICE_NAME, size+1);	// include NUL-terminator
  401d6c:	2109      	movs	r1, #9
  401d6e:	482a      	ldr	r0, [pc, #168]	; (401e18 <apply_default_settings+0xb0>)
  401d70:	4b2a      	ldr	r3, [pc, #168]	; (401e1c <apply_default_settings+0xb4>)
  401d72:	4798      	blx	r3
	if(ret) {
  401d74:	b110      	cbz	r0, 401d7c <apply_default_settings+0x14>
		printf("-E- Could not set device name\r\n");
  401d76:	482a      	ldr	r0, [pc, #168]	; (401e20 <apply_default_settings+0xb8>)
  401d78:	4b2a      	ldr	r3, [pc, #168]	; (401e24 <apply_default_settings+0xbc>)
  401d7a:	4798      	blx	r3
		} else {
		if(DEBUG) printf("-I- Name: %s\r\n",DEFAULT_WLAN_DEVICE_NAME);
	}
	
	/* Write name to queue */
	xStatus = xQueueReset(xName_Queue_handle);						// clear queue
  401d7c:	2100      	movs	r1, #0
  401d7e:	4b2a      	ldr	r3, [pc, #168]	; (401e28 <apply_default_settings+0xc0>)
  401d80:	6818      	ldr	r0, [r3, #0]
  401d82:	4b2a      	ldr	r3, [pc, #168]	; (401e2c <apply_default_settings+0xc4>)
  401d84:	4798      	blx	r3
	if(xStatus == pdPASS || xStatus == errQUEUE_EMPTY) {			// Queue successfully cleared
  401d86:	2801      	cmp	r0, #1
  401d88:	d818      	bhi.n	401dbc <apply_default_settings+0x54>
		name_buf[NAME_SIZE] = strlen(DEFAULT_WLAN_DEVICE_NAME)+1;
  401d8a:	ac0a      	add	r4, sp, #40	; 0x28
  401d8c:	2309      	movs	r3, #9
  401d8e:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(name_buf+1,DEFAULT_WLAN_DEVICE_NAME,strlen(DEFAULT_WLAN_DEVICE_NAME)+1);
  401d92:	4b21      	ldr	r3, [pc, #132]	; (401e18 <apply_default_settings+0xb0>)
  401d94:	cb03      	ldmia	r3!, {r0, r1}
  401d96:	f8cd 0005 	str.w	r0, [sp, #5]
  401d9a:	f8cd 1009 	str.w	r1, [sp, #9]
  401d9e:	781b      	ldrb	r3, [r3, #0]
  401da0:	f88d 300d 	strb.w	r3, [sp, #13]
		xStatus = xQueueSendToBack(xName_Queue_handle, name_buf, 0);
  401da4:	2300      	movs	r3, #0
  401da6:	461a      	mov	r2, r3
  401da8:	4621      	mov	r1, r4
  401daa:	481f      	ldr	r0, [pc, #124]	; (401e28 <apply_default_settings+0xc0>)
  401dac:	6800      	ldr	r0, [r0, #0]
  401dae:	4c20      	ldr	r4, [pc, #128]	; (401e30 <apply_default_settings+0xc8>)
  401db0:	47a0      	blx	r4
		if ((xStatus == pdPASS)) {
			if(DEBUG) printf("-I- Name written to queue\r\n");
			} else if((xStatus == errQUEUE_FULL)) {
  401db2:	b930      	cbnz	r0, 401dc2 <apply_default_settings+0x5a>
			printf("-E- Name queue is full\r\n");
  401db4:	481f      	ldr	r0, [pc, #124]	; (401e34 <apply_default_settings+0xcc>)
  401db6:	4b1b      	ldr	r3, [pc, #108]	; (401e24 <apply_default_settings+0xbc>)
  401db8:	4798      	blx	r3
  401dba:	e002      	b.n	401dc2 <apply_default_settings+0x5a>
		}
		} else {
		printf("-E- Queue could not be cleared\r\n");
  401dbc:	481e      	ldr	r0, [pc, #120]	; (401e38 <apply_default_settings+0xd0>)
  401dbe:	4b19      	ldr	r3, [pc, #100]	; (401e24 <apply_default_settings+0xbc>)
  401dc0:	4798      	blx	r3
		error = PARSER_ERROR;
	}

	settings_buf[POWER_SAVE_MODE] = DEFAULT_POWER_SAVE_MODE;
  401dc2:	23ff      	movs	r3, #255	; 0xff
  401dc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	settings_buf[ASSISTED_DRIVE_MODE] = DEFAULT_ASSISTED_DRIVE_MODE;
  401dc8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	settings_buf[VIDEO_QUALITY] = DEFAULT_VIDEO_QUALITY;
  401dcc:	2301      	movs	r3, #1
  401dce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	
	/* Write settings to queue */
	xStatus = xQueueReset(xSettings_Msg_Queue_handle);		// clear queue
  401dd2:	2100      	movs	r1, #0
  401dd4:	4b19      	ldr	r3, [pc, #100]	; (401e3c <apply_default_settings+0xd4>)
  401dd6:	6818      	ldr	r0, [r3, #0]
  401dd8:	4b14      	ldr	r3, [pc, #80]	; (401e2c <apply_default_settings+0xc4>)
  401dda:	4798      	blx	r3
	if(xStatus == pdPASS) {									// Queue successfully cleared
  401ddc:	2801      	cmp	r0, #1
  401dde:	d10f      	bne.n	401e00 <apply_default_settings+0x98>
		xStatus = xQueueSendToBack(xSettings_Msg_Queue_handle, settings_buf, 0);
  401de0:	2300      	movs	r3, #0
  401de2:	461a      	mov	r2, r3
  401de4:	a909      	add	r1, sp, #36	; 0x24
  401de6:	4815      	ldr	r0, [pc, #84]	; (401e3c <apply_default_settings+0xd4>)
  401de8:	6800      	ldr	r0, [r0, #0]
  401dea:	4c11      	ldr	r4, [pc, #68]	; (401e30 <apply_default_settings+0xc8>)
  401dec:	47a0      	blx	r4
		if ((xStatus == pdPASS)) {
  401dee:	2801      	cmp	r0, #1
  401df0:	d00c      	beq.n	401e0c <apply_default_settings+0xa4>
			if(DEBUG) printf("-I- Settings written to queue\r\n");
			error = PARSER_SUCCESS;
		} else if((xStatus == errQUEUE_FULL)) {
  401df2:	b968      	cbnz	r0, 401e10 <apply_default_settings+0xa8>
			printf("-E- Settings queue is full\r\n");
  401df4:	4812      	ldr	r0, [pc, #72]	; (401e40 <apply_default_settings+0xd8>)
  401df6:	4b0b      	ldr	r3, [pc, #44]	; (401e24 <apply_default_settings+0xbc>)
  401df8:	4798      	blx	r3
			error = PARSER_ERROR;
  401dfa:	f04f 30ff 	mov.w	r0, #4294967295
  401dfe:	e009      	b.n	401e14 <apply_default_settings+0xac>
		}
	} else {
		printf("-E- Queue could not be cleared\r\n");
  401e00:	480d      	ldr	r0, [pc, #52]	; (401e38 <apply_default_settings+0xd0>)
  401e02:	4b08      	ldr	r3, [pc, #32]	; (401e24 <apply_default_settings+0xbc>)
  401e04:	4798      	blx	r3
		error = PARSER_ERROR;
  401e06:	f04f 30ff 	mov.w	r0, #4294967295
  401e0a:	e003      	b.n	401e14 <apply_default_settings+0xac>
	xStatus = xQueueReset(xSettings_Msg_Queue_handle);		// clear queue
	if(xStatus == pdPASS) {									// Queue successfully cleared
		xStatus = xQueueSendToBack(xSettings_Msg_Queue_handle, settings_buf, 0);
		if ((xStatus == pdPASS)) {
			if(DEBUG) printf("-I- Settings written to queue\r\n");
			error = PARSER_SUCCESS;
  401e0c:	2000      	movs	r0, #0
  401e0e:	e001      	b.n	401e14 <apply_default_settings+0xac>
  401e10:	f04f 30ff 	mov.w	r0, #4294967295
		printf("-E- Queue could not be cleared\r\n");
		error = PARSER_ERROR;
	}
	
	return error;
  401e14:	b00a      	add	sp, #40	; 0x28
  401e16:	bd10      	pop	{r4, pc}
  401e18:	00411af0 	.word	0x00411af0
  401e1c:	00401459 	.word	0x00401459
  401e20:	00411a68 	.word	0x00411a68
  401e24:	00408a5d 	.word	0x00408a5d
  401e28:	2000bdac 	.word	0x2000bdac
  401e2c:	00406075 	.word	0x00406075
  401e30:	00406149 	.word	0x00406149
  401e34:	00411a88 	.word	0x00411a88
  401e38:	00411a0c 	.word	0x00411a0c
  401e3c:	2000bdbc 	.word	0x2000bdbc
  401e40:	00411aa4 	.word	0x00411aa4

00401e44 <pwm_ch1_start>:
#include "pwm_generator.h"

/* PWM Modules */
/** Configure and start PWM channel 1 */
void pwm_ch1_start(uint32_t freq, uint32_t period_value, uint32_t duty_cycle_value)
{
  401e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e48:	b084      	sub	sp, #16
  401e4a:	4605      	mov	r5, r0
  401e4c:	460e      	mov	r6, r1
  401e4e:	4690      	mov	r8, r2
	// Configure IO pin
	pio_configure_pin(PWM1_DAC, PIO_TYPE_PIO_PERIPH_B);
  401e50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e54:	2053      	movs	r0, #83	; 0x53
  401e56:	4b14      	ldr	r3, [pc, #80]	; (401ea8 <pwm_ch1_start+0x64>)
  401e58:	4798      	blx	r3
	
	// Enable PWM peripheral clock
	pmc_enable_periph_clk(ID_PWM);
  401e5a:	201f      	movs	r0, #31
  401e5c:	4b13      	ldr	r3, [pc, #76]	; (401eac <pwm_ch1_start+0x68>)
  401e5e:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
  401e60:	4c13      	ldr	r4, [pc, #76]	; (401eb0 <pwm_ch1_start+0x6c>)
  401e62:	2101      	movs	r1, #1
  401e64:	4620      	mov	r0, r4
  401e66:	4b13      	ldr	r3, [pc, #76]	; (401eb4 <pwm_ch1_start+0x70>)
  401e68:	4798      	blx	r3
	
	// Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used).
	pwm_clock_t clock_setting = {
  401e6a:	fb06 f505 	mul.w	r5, r6, r5
  401e6e:	9501      	str	r5, [sp, #4]
  401e70:	2700      	movs	r7, #0
  401e72:	9702      	str	r7, [sp, #8]
  401e74:	4b10      	ldr	r3, [pc, #64]	; (401eb8 <pwm_ch1_start+0x74>)
  401e76:	9303      	str	r3, [sp, #12]
		.ul_clka = freq * period_value,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
  401e78:	a901      	add	r1, sp, #4
  401e7a:	4620      	mov	r0, r4
  401e7c:	4b0f      	ldr	r3, [pc, #60]	; (401ebc <pwm_ch1_start+0x78>)
  401e7e:	4798      	blx	r3
	
	// Configure PWM waveform
	g_pwm_channel_1.channel = PWM_CHANNEL_1;			// Set PWM channel
  401e80:	490f      	ldr	r1, [pc, #60]	; (401ec0 <pwm_ch1_start+0x7c>)
  401e82:	2501      	movs	r5, #1
  401e84:	600d      	str	r5, [r1, #0]
	g_pwm_channel_1.alignment = PWM_ALIGN_LEFT;			// Period is left-aligned.
  401e86:	810f      	strh	r7, [r1, #8]
	g_pwm_channel_1.polarity = PWM_HIGH;				// Output waveform starts at a low level.
  401e88:	728d      	strb	r5, [r1, #10]
	g_pwm_channel_1.ul_prescaler = PWM_CMR_CPRE_CLKA;	// Use PWM clock A as source clock.
  401e8a:	230b      	movs	r3, #11
  401e8c:	604b      	str	r3, [r1, #4]
	g_pwm_channel_1.ul_period = period_value;			// Period value of output waveform.
  401e8e:	610e      	str	r6, [r1, #16]
	g_pwm_channel_1.ul_duty = duty_cycle_value;			// Duty cycle value of output waveform.
  401e90:	f8c1 800c 	str.w	r8, [r1, #12]
	pwm_channel_init(PWM, &g_pwm_channel_1);
  401e94:	4620      	mov	r0, r4
  401e96:	4b0b      	ldr	r3, [pc, #44]	; (401ec4 <pwm_ch1_start+0x80>)
  401e98:	4798      	blx	r3
	
	// Enable output from PWM channel 1
	pwm_channel_enable(PWM, PWM_CHANNEL_1);	
  401e9a:	4629      	mov	r1, r5
  401e9c:	4620      	mov	r0, r4
  401e9e:	4b0a      	ldr	r3, [pc, #40]	; (401ec8 <pwm_ch1_start+0x84>)
  401ea0:	4798      	blx	r3
}
  401ea2:	b004      	add	sp, #16
  401ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ea8:	004053f1 	.word	0x004053f1
  401eac:	004058d9 	.word	0x004058d9
  401eb0:	40020000 	.word	0x40020000
  401eb4:	004009c1 	.word	0x004009c1
  401eb8:	07270e00 	.word	0x07270e00
  401ebc:	00400865 	.word	0x00400865
  401ec0:	2000bdd0 	.word	0x2000bdd0
  401ec4:	004008b1 	.word	0x004008b1
  401ec8:	004009b5 	.word	0x004009b5

00401ecc <pwm_ch1_set_duty_cycle>:
	pwm_channel_disable(PWM, PWM_CHANNEL_1);	
}

/** Set duty cycle for PWM channel 1 */
void pwm_ch1_set_duty_cycle(uint32_t duty_cycle_value)
{
  401ecc:	b508      	push	{r3, lr}
	g_pwm_channel_1.channel = PWM_CHANNEL_1;
  401ece:	4904      	ldr	r1, [pc, #16]	; (401ee0 <pwm_ch1_set_duty_cycle+0x14>)
  401ed0:	2301      	movs	r3, #1
  401ed2:	600b      	str	r3, [r1, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel_1, duty_cycle_value);	
  401ed4:	4602      	mov	r2, r0
  401ed6:	4803      	ldr	r0, [pc, #12]	; (401ee4 <pwm_ch1_set_duty_cycle+0x18>)
  401ed8:	4b03      	ldr	r3, [pc, #12]	; (401ee8 <pwm_ch1_set_duty_cycle+0x1c>)
  401eda:	4798      	blx	r3
  401edc:	bd08      	pop	{r3, pc}
  401ede:	bf00      	nop
  401ee0:	2000bdd0 	.word	0x2000bdd0
  401ee4:	40020000 	.word	0x40020000
  401ee8:	00400999 	.word	0x00400999

00401eec <tc1_ch1_waveform_start>:

///////////////////////////////////////////////////////////////////////////

/** Timer Counter 1 - Channel 1 - TIOA4 & TIOB4 */
void tc1_ch1_waveform_start(uint32_t freq, float duty_cycle_a, float duty_cycle_b)
{
  401eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ef0:	4607      	mov	r7, r0
  401ef2:	460e      	mov	r6, r1
  401ef4:	4615      	mov	r5, r2
	uint32_t ra, rb;
	
	if(duty_cycle_a > 1)
  401ef6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  401efa:	4630      	mov	r0, r6
  401efc:	4b2d      	ldr	r3, [pc, #180]	; (401fb4 <tc1_ch1_waveform_start+0xc8>)
  401efe:	4798      	blx	r3
  401f00:	b930      	cbnz	r0, 401f10 <tc1_ch1_waveform_start+0x24>
		duty_cycle_a = 1;
	else if(duty_cycle_a < 0)
  401f02:	2100      	movs	r1, #0
  401f04:	4630      	mov	r0, r6
  401f06:	4b2c      	ldr	r3, [pc, #176]	; (401fb8 <tc1_ch1_waveform_start+0xcc>)
  401f08:	4798      	blx	r3
  401f0a:	b118      	cbz	r0, 401f14 <tc1_ch1_waveform_start+0x28>
		duty_cycle_a = 0;
  401f0c:	2600      	movs	r6, #0
  401f0e:	e001      	b.n	401f14 <tc1_ch1_waveform_start+0x28>
void tc1_ch1_waveform_start(uint32_t freq, float duty_cycle_a, float duty_cycle_b)
{
	uint32_t ra, rb;
	
	if(duty_cycle_a > 1)
		duty_cycle_a = 1;
  401f10:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
	else if(duty_cycle_a < 0)
		duty_cycle_a = 0;
		
	if(duty_cycle_b > 1)
  401f14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  401f18:	4628      	mov	r0, r5
  401f1a:	4b26      	ldr	r3, [pc, #152]	; (401fb4 <tc1_ch1_waveform_start+0xc8>)
  401f1c:	4798      	blx	r3
  401f1e:	b930      	cbnz	r0, 401f2e <tc1_ch1_waveform_start+0x42>
		duty_cycle_b = 1;
	else if(duty_cycle_b < 0)
  401f20:	2100      	movs	r1, #0
  401f22:	4628      	mov	r0, r5
  401f24:	4b24      	ldr	r3, [pc, #144]	; (401fb8 <tc1_ch1_waveform_start+0xcc>)
  401f26:	4798      	blx	r3
  401f28:	b118      	cbz	r0, 401f32 <tc1_ch1_waveform_start+0x46>
		duty_cycle_b = 0;
  401f2a:	2500      	movs	r5, #0
  401f2c:	e001      	b.n	401f32 <tc1_ch1_waveform_start+0x46>
		duty_cycle_a = 1;
	else if(duty_cycle_a < 0)
		duty_cycle_a = 0;
		
	if(duty_cycle_b > 1)
		duty_cycle_b = 1;
  401f2e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	else if(duty_cycle_b < 0)
		duty_cycle_b = 0;
	
	// Configure IO pins
	pio_configure_pin(TC1_TIOA_CH4, PIO_TYPE_PIO_PERIPH_B);
  401f32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f36:	205a      	movs	r0, #90	; 0x5a
  401f38:	4c20      	ldr	r4, [pc, #128]	; (401fbc <tc1_ch1_waveform_start+0xd0>)
  401f3a:	47a0      	blx	r4
	pio_configure_pin(TC1_TIOB_CH4, PIO_TYPE_PIO_PERIPH_B);
  401f3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f40:	205b      	movs	r0, #91	; 0x5b
  401f42:	47a0      	blx	r4
	
	pmc_enable_periph_clk(ID_TC4);
  401f44:	201b      	movs	r0, #27
  401f46:	4b1e      	ldr	r3, [pc, #120]	; (401fc0 <tc1_ch1_waveform_start+0xd4>)
  401f48:	4798      	blx	r3
	
	tc_init(TC1, TC1_CHANNEL1,
  401f4a:	4c1e      	ldr	r4, [pc, #120]	; (401fc4 <tc1_ch1_waveform_start+0xd8>)
  401f4c:	4a1e      	ldr	r2, [pc, #120]	; (401fc8 <tc1_ch1_waveform_start+0xdc>)
  401f4e:	2101      	movs	r1, #1
  401f50:	4620      	mov	r0, r4
  401f52:	4b1e      	ldr	r3, [pc, #120]	; (401fcc <tc1_ch1_waveform_start+0xe0>)
  401f54:	4798      	blx	r3
	| TC_CMR_BCPC_CLEAR				// TIOB RC Compare Effect: clear
	| TC_CMR_WAVSEL_UP_RC			// UP mode with automatic trigger on RC Compare
	);
	
	// Configure waveform frequency and duty cycle.
	tc1_ch1_rc = ((sysclk_get_peripheral_bus_hz(TC1) / TIMER_CLOCK_4_DIVISOR) / freq);	// RC = sys_clk / pre_scaler / freq
  401f56:	4a1e      	ldr	r2, [pc, #120]	; (401fd0 <tc1_ch1_waveform_start+0xe4>)
  401f58:	fbb2 f2f7 	udiv	r2, r2, r7
  401f5c:	4f1d      	ldr	r7, [pc, #116]	; (401fd4 <tc1_ch1_waveform_start+0xe8>)
  401f5e:	603a      	str	r2, [r7, #0]
	tc_write_rc(TC1, TC1_CHANNEL1, tc1_ch1_rc);
  401f60:	2101      	movs	r1, #1
  401f62:	4620      	mov	r0, r4
  401f64:	4b1c      	ldr	r3, [pc, #112]	; (401fd8 <tc1_ch1_waveform_start+0xec>)
  401f66:	4798      	blx	r3
	ra = ((1-duty_cycle_a) * tc1_ch1_rc);
  401f68:	6838      	ldr	r0, [r7, #0]
  401f6a:	4b1c      	ldr	r3, [pc, #112]	; (401fdc <tc1_ch1_waveform_start+0xf0>)
  401f6c:	4798      	blx	r3
  401f6e:	4680      	mov	r8, r0
	rb = ((1-duty_cycle_b) * tc1_ch1_rc);
	tc_write_ra(TC1, TC1_CHANNEL1, ra);
  401f70:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401ff4 <tc1_ch1_waveform_start+0x108>
  401f74:	4631      	mov	r1, r6
  401f76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  401f7a:	47c8      	blx	r9
  401f7c:	4f18      	ldr	r7, [pc, #96]	; (401fe0 <tc1_ch1_waveform_start+0xf4>)
  401f7e:	4641      	mov	r1, r8
  401f80:	47b8      	blx	r7
  401f82:	4e18      	ldr	r6, [pc, #96]	; (401fe4 <tc1_ch1_waveform_start+0xf8>)
  401f84:	47b0      	blx	r6
  401f86:	4602      	mov	r2, r0
  401f88:	2101      	movs	r1, #1
  401f8a:	4620      	mov	r0, r4
  401f8c:	4b16      	ldr	r3, [pc, #88]	; (401fe8 <tc1_ch1_waveform_start+0xfc>)
  401f8e:	4798      	blx	r3
	tc_write_rb(TC1, TC1_CHANNEL1, rb);
  401f90:	4629      	mov	r1, r5
  401f92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  401f96:	47c8      	blx	r9
  401f98:	4641      	mov	r1, r8
  401f9a:	47b8      	blx	r7
  401f9c:	47b0      	blx	r6
  401f9e:	4602      	mov	r2, r0
  401fa0:	2101      	movs	r1, #1
  401fa2:	4620      	mov	r0, r4
  401fa4:	4b11      	ldr	r3, [pc, #68]	; (401fec <tc1_ch1_waveform_start+0x100>)
  401fa6:	4798      	blx	r3
	tc_start(TC1, TC1_CHANNEL1);	
  401fa8:	2101      	movs	r1, #1
  401faa:	4620      	mov	r0, r4
  401fac:	4b10      	ldr	r3, [pc, #64]	; (401ff0 <tc1_ch1_waveform_start+0x104>)
  401fae:	4798      	blx	r3
  401fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fb4:	00408961 	.word	0x00408961
  401fb8:	00408925 	.word	0x00408925
  401fbc:	004053f1 	.word	0x004053f1
  401fc0:	004058d9 	.word	0x004058d9
  401fc4:	40014000 	.word	0x40014000
  401fc8:	0909c403 	.word	0x0909c403
  401fcc:	004009cd 	.word	0x004009cd
  401fd0:	000e4e1c 	.word	0x000e4e1c
  401fd4:	2000bda8 	.word	0x2000bda8
  401fd8:	004009fd 	.word	0x004009fd
  401fdc:	00408539 	.word	0x00408539
  401fe0:	004085e9 	.word	0x004085e9
  401fe4:	004089c1 	.word	0x004089c1
  401fe8:	004009ed 	.word	0x004009ed
  401fec:	004009f5 	.word	0x004009f5
  401ff0:	004009e5 	.word	0x004009e5
  401ff4:	004083d5 	.word	0x004083d5

00401ff8 <tc1_ch1a_set_duty_cycle>:
}

/** Set duty cycle for TIOA4 waveform */
void tc1_ch1a_set_duty_cycle(float duty_cycle)
{
  401ff8:	b538      	push	{r3, r4, r5, lr}
  401ffa:	4604      	mov	r4, r0
	if(duty_cycle > 1)
  401ffc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402000:	4b10      	ldr	r3, [pc, #64]	; (402044 <tc1_ch1a_set_duty_cycle+0x4c>)
  402002:	4798      	blx	r3
  402004:	b930      	cbnz	r0, 402014 <tc1_ch1a_set_duty_cycle+0x1c>
		duty_cycle = 1;
	else if(duty_cycle < 0)
  402006:	2100      	movs	r1, #0
  402008:	4620      	mov	r0, r4
  40200a:	4b0f      	ldr	r3, [pc, #60]	; (402048 <tc1_ch1a_set_duty_cycle+0x50>)
  40200c:	4798      	blx	r3
  40200e:	b118      	cbz	r0, 402018 <tc1_ch1a_set_duty_cycle+0x20>
		duty_cycle = 0;
  402010:	2400      	movs	r4, #0
  402012:	e001      	b.n	402018 <tc1_ch1a_set_duty_cycle+0x20>

/** Set duty cycle for TIOA4 waveform */
void tc1_ch1a_set_duty_cycle(float duty_cycle)
{
	if(duty_cycle > 1)
		duty_cycle = 1;
  402014:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	else if(duty_cycle < 0)
		duty_cycle = 0;
	
	uint32_t ra;
	ra = ((1-duty_cycle) * tc1_ch1_rc);
  402018:	4b0c      	ldr	r3, [pc, #48]	; (40204c <tc1_ch1a_set_duty_cycle+0x54>)
	tc_write_ra(TC1, TC1_CHANNEL1, ra);	
  40201a:	6818      	ldr	r0, [r3, #0]
  40201c:	4b0c      	ldr	r3, [pc, #48]	; (402050 <tc1_ch1a_set_duty_cycle+0x58>)
  40201e:	4798      	blx	r3
  402020:	4605      	mov	r5, r0
  402022:	4621      	mov	r1, r4
  402024:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  402028:	4b0a      	ldr	r3, [pc, #40]	; (402054 <tc1_ch1a_set_duty_cycle+0x5c>)
  40202a:	4798      	blx	r3
  40202c:	4601      	mov	r1, r0
  40202e:	4628      	mov	r0, r5
  402030:	4b09      	ldr	r3, [pc, #36]	; (402058 <tc1_ch1a_set_duty_cycle+0x60>)
  402032:	4798      	blx	r3
  402034:	4b09      	ldr	r3, [pc, #36]	; (40205c <tc1_ch1a_set_duty_cycle+0x64>)
  402036:	4798      	blx	r3
  402038:	4602      	mov	r2, r0
  40203a:	2101      	movs	r1, #1
  40203c:	4808      	ldr	r0, [pc, #32]	; (402060 <tc1_ch1a_set_duty_cycle+0x68>)
  40203e:	4b09      	ldr	r3, [pc, #36]	; (402064 <tc1_ch1a_set_duty_cycle+0x6c>)
  402040:	4798      	blx	r3
  402042:	bd38      	pop	{r3, r4, r5, pc}
  402044:	00408961 	.word	0x00408961
  402048:	00408925 	.word	0x00408925
  40204c:	2000bda8 	.word	0x2000bda8
  402050:	00408539 	.word	0x00408539
  402054:	004083d5 	.word	0x004083d5
  402058:	004085e9 	.word	0x004085e9
  40205c:	004089c1 	.word	0x004089c1
  402060:	40014000 	.word	0x40014000
  402064:	004009ed 	.word	0x004009ed

00402068 <tc1_ch1b_set_duty_cycle>:
}

/** Set duty cycle for TIOB4 waveform */
void tc1_ch1b_set_duty_cycle(float duty_cycle)
{
  402068:	b538      	push	{r3, r4, r5, lr}
  40206a:	4604      	mov	r4, r0
	if(duty_cycle > 1)
  40206c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402070:	4b10      	ldr	r3, [pc, #64]	; (4020b4 <tc1_ch1b_set_duty_cycle+0x4c>)
  402072:	4798      	blx	r3
  402074:	b930      	cbnz	r0, 402084 <tc1_ch1b_set_duty_cycle+0x1c>
		duty_cycle = 1;
	else if(duty_cycle < 0)
  402076:	2100      	movs	r1, #0
  402078:	4620      	mov	r0, r4
  40207a:	4b0f      	ldr	r3, [pc, #60]	; (4020b8 <tc1_ch1b_set_duty_cycle+0x50>)
  40207c:	4798      	blx	r3
  40207e:	b118      	cbz	r0, 402088 <tc1_ch1b_set_duty_cycle+0x20>
		duty_cycle = 0;
  402080:	2400      	movs	r4, #0
  402082:	e001      	b.n	402088 <tc1_ch1b_set_duty_cycle+0x20>

/** Set duty cycle for TIOB4 waveform */
void tc1_ch1b_set_duty_cycle(float duty_cycle)
{
	if(duty_cycle > 1)
		duty_cycle = 1;
  402084:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	else if(duty_cycle < 0)
		duty_cycle = 0;
	
	uint32_t rb;
	rb = ((1-duty_cycle) * tc1_ch1_rc);
  402088:	4b0c      	ldr	r3, [pc, #48]	; (4020bc <tc1_ch1b_set_duty_cycle+0x54>)
	tc_write_rb(TC1, TC1_CHANNEL1, rb);	
  40208a:	6818      	ldr	r0, [r3, #0]
  40208c:	4b0c      	ldr	r3, [pc, #48]	; (4020c0 <tc1_ch1b_set_duty_cycle+0x58>)
  40208e:	4798      	blx	r3
  402090:	4605      	mov	r5, r0
  402092:	4621      	mov	r1, r4
  402094:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  402098:	4b0a      	ldr	r3, [pc, #40]	; (4020c4 <tc1_ch1b_set_duty_cycle+0x5c>)
  40209a:	4798      	blx	r3
  40209c:	4601      	mov	r1, r0
  40209e:	4628      	mov	r0, r5
  4020a0:	4b09      	ldr	r3, [pc, #36]	; (4020c8 <tc1_ch1b_set_duty_cycle+0x60>)
  4020a2:	4798      	blx	r3
  4020a4:	4b09      	ldr	r3, [pc, #36]	; (4020cc <tc1_ch1b_set_duty_cycle+0x64>)
  4020a6:	4798      	blx	r3
  4020a8:	4602      	mov	r2, r0
  4020aa:	2101      	movs	r1, #1
  4020ac:	4808      	ldr	r0, [pc, #32]	; (4020d0 <tc1_ch1b_set_duty_cycle+0x68>)
  4020ae:	4b09      	ldr	r3, [pc, #36]	; (4020d4 <tc1_ch1b_set_duty_cycle+0x6c>)
  4020b0:	4798      	blx	r3
  4020b2:	bd38      	pop	{r3, r4, r5, pc}
  4020b4:	00408961 	.word	0x00408961
  4020b8:	00408925 	.word	0x00408925
  4020bc:	2000bda8 	.word	0x2000bda8
  4020c0:	00408539 	.word	0x00408539
  4020c4:	004083d5 	.word	0x004083d5
  4020c8:	004085e9 	.word	0x004085e9
  4020cc:	004089c1 	.word	0x004089c1
  4020d0:	40014000 	.word	0x40014000
  4020d4:	004009f5 	.word	0x004009f5

004020d8 <servos_propeller1_start>:

/** Start the servo motors for propeller 1
  * Servo starting positions are extreme left, which corresponds to a duty cycle of 1ms or 5% of the 50Hz PWM.  
 */
void servos_propeller1_start(void)
{
  4020d8:	b508      	push	{r3, lr}
	tc1_ch1_waveform_start(SERVO_PWM_FREQUENCY,INNER_SERVO_STARTING_DC,OUTER_SERVO_STARTING_DC);
  4020da:	4903      	ldr	r1, [pc, #12]	; (4020e8 <servos_propeller1_start+0x10>)
  4020dc:	460a      	mov	r2, r1
  4020de:	2032      	movs	r0, #50	; 0x32
  4020e0:	4b02      	ldr	r3, [pc, #8]	; (4020ec <servos_propeller1_start+0x14>)
  4020e2:	4798      	blx	r3
  4020e4:	bd08      	pop	{r3, pc}
  4020e6:	bf00      	nop
  4020e8:	3d99999a 	.word	0x3d99999a
  4020ec:	00401eed 	.word	0x00401eed

004020f0 <servos_propeller1_inner_set_position>:
  *
  * Servo position is encoded in the PWM duty cycle. The servo have a position from 
  * 0-180 deg, which is encoded as a duty cycle between 1-2ms or 5-10%.
 */
void servos_propeller1_inner_set_position(uint8_t deg)
{
  4020f0:	b510      	push	{r4, lr}
	// Servo max rotation is 180 deg.
	if(deg > 180)
		deg = 180;
		
	float duty_cycle = SMALL_SERVO_DC_MIN + deg*SMALL_SERVO_DEG_PER_PCT_DC;
	tc1_ch1a_set_duty_cycle(duty_cycle);
  4020f2:	28b4      	cmp	r0, #180	; 0xb4
  4020f4:	bf28      	it	cs
  4020f6:	20b4      	movcs	r0, #180	; 0xb4
  4020f8:	4b0d      	ldr	r3, [pc, #52]	; (402130 <servos_propeller1_inner_set_position+0x40>)
  4020fa:	4798      	blx	r3
  4020fc:	a30a      	add	r3, pc, #40	; (adr r3, 402128 <servos_propeller1_inner_set_position+0x38>)
  4020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402102:	4c0c      	ldr	r4, [pc, #48]	; (402134 <servos_propeller1_inner_set_position+0x44>)
  402104:	47a0      	blx	r4
  402106:	2200      	movs	r2, #0
  402108:	4b0b      	ldr	r3, [pc, #44]	; (402138 <servos_propeller1_inner_set_position+0x48>)
  40210a:	4c0c      	ldr	r4, [pc, #48]	; (40213c <servos_propeller1_inner_set_position+0x4c>)
  40210c:	47a0      	blx	r4
  40210e:	a306      	add	r3, pc, #24	; (adr r3, 402128 <servos_propeller1_inner_set_position+0x38>)
  402110:	e9d3 2300 	ldrd	r2, r3, [r3]
  402114:	4c0a      	ldr	r4, [pc, #40]	; (402140 <servos_propeller1_inner_set_position+0x50>)
  402116:	47a0      	blx	r4
  402118:	4b0a      	ldr	r3, [pc, #40]	; (402144 <servos_propeller1_inner_set_position+0x54>)
  40211a:	4798      	blx	r3
  40211c:	4b0a      	ldr	r3, [pc, #40]	; (402148 <servos_propeller1_inner_set_position+0x58>)
  40211e:	4798      	blx	r3
  402120:	bd10      	pop	{r4, pc}
  402122:	bf00      	nop
  402124:	f3af 8000 	nop.w
  402128:	9999999a 	.word	0x9999999a
  40212c:	3fa99999 	.word	0x3fa99999
  402130:	00407cc1 	.word	0x00407cc1
  402134:	00407d8d 	.word	0x00407d8d
  402138:	40668000 	.word	0x40668000
  40213c:	00407fe1 	.word	0x00407fe1
  402140:	00407a29 	.word	0x00407a29
  402144:	0040832d 	.word	0x0040832d
  402148:	00401ff9 	.word	0x00401ff9
  40214c:	00000000 	.word	0x00000000

00402150 <servos_propeller1_outer_set_position>:
  *
  * Servo position is encoded in the PWM duty cycle. The servo has a position from 
  * 0-180 deg, which is encoded as a duty cycle between 1-2ms or 5-10%.
 */
void servos_propeller1_outer_set_position(uint8_t deg)
{
  402150:	b510      	push	{r4, lr}
	// Servo max rotation is 90 deg.
	if(deg > 180)
		deg = 180;
		
	float duty_cycle = LARGE_SERVO_DC_MIN + deg*LARGE_SERVO_DEG_PER_PCT_DC;
	tc1_ch1b_set_duty_cycle(duty_cycle);
  402152:	28b4      	cmp	r0, #180	; 0xb4
  402154:	bf28      	it	cs
  402156:	20b4      	movcs	r0, #180	; 0xb4
  402158:	4b0d      	ldr	r3, [pc, #52]	; (402190 <servos_propeller1_outer_set_position+0x40>)
  40215a:	4798      	blx	r3
  40215c:	a30a      	add	r3, pc, #40	; (adr r3, 402188 <servos_propeller1_outer_set_position+0x38>)
  40215e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402162:	4c0c      	ldr	r4, [pc, #48]	; (402194 <servos_propeller1_outer_set_position+0x44>)
  402164:	47a0      	blx	r4
  402166:	2200      	movs	r2, #0
  402168:	4b0b      	ldr	r3, [pc, #44]	; (402198 <servos_propeller1_outer_set_position+0x48>)
  40216a:	4c0c      	ldr	r4, [pc, #48]	; (40219c <servos_propeller1_outer_set_position+0x4c>)
  40216c:	47a0      	blx	r4
  40216e:	a306      	add	r3, pc, #24	; (adr r3, 402188 <servos_propeller1_outer_set_position+0x38>)
  402170:	e9d3 2300 	ldrd	r2, r3, [r3]
  402174:	4c0a      	ldr	r4, [pc, #40]	; (4021a0 <servos_propeller1_outer_set_position+0x50>)
  402176:	47a0      	blx	r4
  402178:	4b0a      	ldr	r3, [pc, #40]	; (4021a4 <servos_propeller1_outer_set_position+0x54>)
  40217a:	4798      	blx	r3
  40217c:	4b0a      	ldr	r3, [pc, #40]	; (4021a8 <servos_propeller1_outer_set_position+0x58>)
  40217e:	4798      	blx	r3
  402180:	bd10      	pop	{r4, pc}
  402182:	bf00      	nop
  402184:	f3af 8000 	nop.w
  402188:	9999999a 	.word	0x9999999a
  40218c:	3fa99999 	.word	0x3fa99999
  402190:	00407cc1 	.word	0x00407cc1
  402194:	00407d8d 	.word	0x00407d8d
  402198:	40668000 	.word	0x40668000
  40219c:	00407fe1 	.word	0x00407fe1
  4021a0:	00407a29 	.word	0x00407a29
  4021a4:	0040832d 	.word	0x0040832d
  4021a8:	00402069 	.word	0x00402069

004021ac <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4021ac:	280b      	cmp	r0, #11
  4021ae:	d107      	bne.n	4021c0 <chip_isr+0x14>
  4021b0:	2902      	cmp	r1, #2
  4021b2:	d105      	bne.n	4021c0 <chip_isr+0x14>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4021b4:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4021b6:	4b03      	ldr	r3, [pc, #12]	; (4021c4 <chip_isr+0x18>)
  4021b8:	681b      	ldr	r3, [r3, #0]
  4021ba:	b103      	cbz	r3, 4021be <chip_isr+0x12>
			gpfIsr();
  4021bc:	4798      	blx	r3
  4021be:	bd08      	pop	{r3, pc}
  4021c0:	4770      	bx	lr
  4021c2:	bf00      	nop
  4021c4:	20000b20 	.word	0x20000b20

004021c8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4021c8:	b148      	cbz	r0, 4021de <nm_bsp_sleep+0x16>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4021ca:	b570      	push	{r4, r5, r6, lr}
  4021cc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(1);
  4021ce:	f242 167c 	movw	r6, #8572	; 0x217c
  4021d2:	4d03      	ldr	r5, [pc, #12]	; (4021e0 <nm_bsp_sleep+0x18>)
  4021d4:	4630      	mov	r0, r6
  4021d6:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4021d8:	3c01      	subs	r4, #1
  4021da:	d1fb      	bne.n	4021d4 <nm_bsp_sleep+0xc>
  4021dc:	bd70      	pop	{r4, r5, r6, pc}
  4021de:	4770      	bx	lr
  4021e0:	20000001 	.word	0x20000001

004021e4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4021e4:	b538      	push	{r3, r4, r5, lr}
	pio_set_pin_low(CONF_WINC_PIN_CHIP_ENABLE);
  4021e6:	2006      	movs	r0, #6
  4021e8:	4c08      	ldr	r4, [pc, #32]	; (40220c <nm_bsp_reset+0x28>)
  4021ea:	47a0      	blx	r4
	pio_set_pin_low(CONF_WINC_PIN_RESET);
  4021ec:	2018      	movs	r0, #24
  4021ee:	47a0      	blx	r4
	nm_bsp_sleep(100);
  4021f0:	2064      	movs	r0, #100	; 0x64
  4021f2:	4c07      	ldr	r4, [pc, #28]	; (402210 <nm_bsp_reset+0x2c>)
  4021f4:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_PIN_CHIP_ENABLE);
  4021f6:	2006      	movs	r0, #6
  4021f8:	4d06      	ldr	r5, [pc, #24]	; (402214 <nm_bsp_reset+0x30>)
  4021fa:	47a8      	blx	r5
	nm_bsp_sleep(10);
  4021fc:	200a      	movs	r0, #10
  4021fe:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_PIN_RESET);
  402200:	2018      	movs	r0, #24
  402202:	47a8      	blx	r5
	nm_bsp_sleep(10);
  402204:	200a      	movs	r0, #10
  402206:	47a0      	blx	r4
  402208:	bd38      	pop	{r3, r4, r5, pc}
  40220a:	bf00      	nop
  40220c:	004053d5 	.word	0x004053d5
  402210:	004021c9 	.word	0x004021c9
  402214:	004053b9 	.word	0x004053b9

00402218 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  402218:	b538      	push	{r3, r4, r5, lr}
	gpfIsr = NULL;
  40221a:	2200      	movs	r2, #0
  40221c:	4b0e      	ldr	r3, [pc, #56]	; (402258 <nm_bsp_init+0x40>)
  40221e:	601a      	str	r2, [r3, #0]
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
#ifdef __SAM4SD32C__
	pio_configure_pin(CONF_WINC_PIN_RESET, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  402220:	4d0e      	ldr	r5, [pc, #56]	; (40225c <nm_bsp_init+0x44>)
  402222:	4629      	mov	r1, r5
  402224:	2018      	movs	r0, #24
  402226:	4c0e      	ldr	r4, [pc, #56]	; (402260 <nm_bsp_init+0x48>)
  402228:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_PIN_CHIP_ENABLE, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  40222a:	4629      	mov	r1, r5
  40222c:	2006      	movs	r0, #6
  40222e:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_PIN_WAKE, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  402230:	4629      	mov	r1, r5
  402232:	2019      	movs	r0, #25
  402234:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_SPI_CS_GPIO, PIO_DEFAULT|PIO_PULLUP);
  402236:	2101      	movs	r1, #1
  402238:	200b      	movs	r0, #11
  40223a:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_SPI_CS_GPIO);
  40223c:	200b      	movs	r0, #11
  40223e:	4b09      	ldr	r3, [pc, #36]	; (402264 <nm_bsp_init+0x4c>)
  402240:	4798      	blx	r3

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  402242:	4b09      	ldr	r3, [pc, #36]	; (402268 <nm_bsp_init+0x50>)
  402244:	681b      	ldr	r3, [r3, #0]
  402246:	f013 0f01 	tst.w	r3, #1
  40224a:	bf1c      	itt	ne
  40224c:	4b06      	ldrne	r3, [pc, #24]	; (402268 <nm_bsp_init+0x50>)
  40224e:	681b      	ldrne	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  402250:	4b06      	ldr	r3, [pc, #24]	; (40226c <nm_bsp_init+0x54>)
  402252:	4798      	blx	r3

	return 0;
}
  402254:	2000      	movs	r0, #0
  402256:	bd38      	pop	{r3, r4, r5, pc}
  402258:	20000b20 	.word	0x20000b20
  40225c:	30000001 	.word	0x30000001
  402260:	004053f1 	.word	0x004053f1
  402264:	004053b9 	.word	0x004053b9
  402268:	e000e010 	.word	0xe000e010
  40226c:	004021e5 	.word	0x004021e5

00402270 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  402270:	b510      	push	{r4, lr}
	gpfIsr = pfIsr;
  402272:	4b11      	ldr	r3, [pc, #68]	; (4022b8 <nm_bsp_register_isr+0x48>)
  402274:	6018      	str	r0, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402276:	200b      	movs	r0, #11
  402278:	4b10      	ldr	r3, [pc, #64]	; (4022bc <nm_bsp_register_isr+0x4c>)
  40227a:	4798      	blx	r3

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	sysclk_enable_peripheral_clock(CONF_WINC_SPI_INT_PIO_ID);
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40227c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402280:	2001      	movs	r0, #1
  402282:	4b0f      	ldr	r3, [pc, #60]	; (4022c0 <nm_bsp_register_isr+0x50>)
  402284:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  402286:	4c0f      	ldr	r4, [pc, #60]	; (4022c4 <nm_bsp_register_isr+0x54>)
  402288:	2201      	movs	r2, #1
  40228a:	2102      	movs	r1, #2
  40228c:	4620      	mov	r0, r4
  40228e:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <nm_bsp_register_isr+0x58>)
  402290:	4798      	blx	r3
//	pio_set_debounce_filter(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, 10);
	pio_handler_set_pin(CONF_WINC_SPI_INT_PIN, PIO_IT_LOW_LEVEL, chip_isr);
  402292:	4a0e      	ldr	r2, [pc, #56]	; (4022cc <nm_bsp_register_isr+0x5c>)
  402294:	2110      	movs	r1, #16
  402296:	2001      	movs	r0, #1
  402298:	4b0d      	ldr	r3, [pc, #52]	; (4022d0 <nm_bsp_register_isr+0x60>)
  40229a:	4798      	blx	r3
	pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  40229c:	4620      	mov	r0, r4
  40229e:	4b0d      	ldr	r3, [pc, #52]	; (4022d4 <nm_bsp_register_isr+0x64>)
  4022a0:	4798      	blx	r3
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4022a2:	2102      	movs	r1, #2
  4022a4:	4620      	mov	r0, r4
  4022a6:	4b0c      	ldr	r3, [pc, #48]	; (4022d8 <nm_bsp_register_isr+0x68>)
  4022a8:	4798      	blx	r3
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4022aa:	2200      	movs	r2, #0
  4022ac:	210b      	movs	r1, #11
  4022ae:	4620      	mov	r0, r4
  4022b0:	4b0a      	ldr	r3, [pc, #40]	; (4022dc <nm_bsp_register_isr+0x6c>)
  4022b2:	4798      	blx	r3
  4022b4:	bd10      	pop	{r4, pc}
  4022b6:	bf00      	nop
  4022b8:	20000b20 	.word	0x20000b20
  4022bc:	004058d9 	.word	0x004058d9
  4022c0:	004053f1 	.word	0x004053f1
  4022c4:	400e0e00 	.word	0x400e0e00
  4022c8:	00405265 	.word	0x00405265
  4022cc:	004021ad 	.word	0x004021ad
  4022d0:	004056e9 	.word	0x004056e9
  4022d4:	00405395 	.word	0x00405395
  4022d8:	0040538d 	.word	0x0040538d
  4022dc:	0040576d 	.word	0x0040576d

004022e0 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4022e0:	b510      	push	{r4, lr}
	if (u8Enable) {
  4022e2:	b140      	cbz	r0, 4022f6 <nm_bsp_interrupt_ctrl+0x16>
		pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  4022e4:	4c06      	ldr	r4, [pc, #24]	; (402300 <nm_bsp_interrupt_ctrl+0x20>)
  4022e6:	4620      	mov	r0, r4
  4022e8:	4b06      	ldr	r3, [pc, #24]	; (402304 <nm_bsp_interrupt_ctrl+0x24>)
  4022ea:	4798      	blx	r3
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4022ec:	2102      	movs	r1, #2
  4022ee:	4620      	mov	r0, r4
  4022f0:	4b05      	ldr	r3, [pc, #20]	; (402308 <nm_bsp_interrupt_ctrl+0x28>)
  4022f2:	4798      	blx	r3
  4022f4:	bd10      	pop	{r4, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4022f6:	2102      	movs	r1, #2
  4022f8:	4801      	ldr	r0, [pc, #4]	; (402300 <nm_bsp_interrupt_ctrl+0x20>)
  4022fa:	4b04      	ldr	r3, [pc, #16]	; (40230c <nm_bsp_interrupt_ctrl+0x2c>)
  4022fc:	4798      	blx	r3
  4022fe:	bd10      	pop	{r4, pc}
  402300:	400e0e00 	.word	0x400e0e00
  402304:	00405395 	.word	0x00405395
  402308:	0040538d 	.word	0x0040538d
  40230c:	00405391 	.word	0x00405391

00402310 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
  402310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 result = M2M_SUCCESS;
#ifdef CONF_WINC_USE_I2C

#elif defined CONF_WINC_USE_SPI
	/* Configure SPI pins. */
	gpio_configure_pin(CONF_WINC_SPI_MISO_GPIO, CONF_WINC_SPI_MISO_FLAGS);
  402312:	4d29      	ldr	r5, [pc, #164]	; (4023b8 <nm_bus_init+0xa8>)
  402314:	4629      	mov	r1, r5
  402316:	200c      	movs	r0, #12
  402318:	4c28      	ldr	r4, [pc, #160]	; (4023bc <nm_bus_init+0xac>)
  40231a:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_MOSI_GPIO, CONF_WINC_SPI_MOSI_FLAGS);
  40231c:	4629      	mov	r1, r5
  40231e:	200d      	movs	r0, #13
  402320:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_CLK_GPIO, CONF_WINC_SPI_CLK_FLAGS);
  402322:	4629      	mov	r1, r5
  402324:	200e      	movs	r0, #14
  402326:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_CS_GPIO, CONF_WINC_SPI_CS_FLAGS);
  402328:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40232c:	200b      	movs	r0, #11
  40232e:	47a0      	blx	r4

	/* Get the PIO instance used for CS. */
	p_pio_cs = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (CONF_WINC_SPI_CS_GPIO >> 5)));
  402330:	4e23      	ldr	r6, [pc, #140]	; (4023c0 <nm_bus_init+0xb0>)
  402332:	4b24      	ldr	r3, [pc, #144]	; (4023c4 <nm_bus_init+0xb4>)
  402334:	6033      	str	r3, [r6, #0]
	SPI_DEASSERT_CS();
  402336:	f44f 6500 	mov.w	r5, #2048	; 0x800
  40233a:	631d      	str	r5, [r3, #48]	; 0x30

	/* Configure SPI module. */
	spi_enable_clock(CONF_WINC_SPI);
  40233c:	4c22      	ldr	r4, [pc, #136]	; (4023c8 <nm_bus_init+0xb8>)
  40233e:	4620      	mov	r0, r4
  402340:	4b22      	ldr	r3, [pc, #136]	; (4023cc <nm_bus_init+0xbc>)
  402342:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402344:	2302      	movs	r3, #2
  402346:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  402348:	2380      	movs	r3, #128	; 0x80
  40234a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40234c:	6863      	ldr	r3, [r4, #4]
  40234e:	f043 0301 	orr.w	r3, r3, #1
  402352:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402354:	6863      	ldr	r3, [r4, #4]
  402356:	f043 0310 	orr.w	r3, r3, #16
  40235a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40235c:	6863      	ldr	r3, [r4, #4]
  40235e:	f023 0302 	bic.w	r3, r3, #2
  402362:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(CONF_WINC_SPI);
#else
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
#endif

	spi_set_clock_polarity(CONF_WINC_SPI,
  402364:	2200      	movs	r2, #0
  402366:	4611      	mov	r1, r2
  402368:	4620      	mov	r0, r4
  40236a:	4b19      	ldr	r3, [pc, #100]	; (4023d0 <nm_bus_init+0xc0>)
  40236c:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  40236e:	2201      	movs	r2, #1
  402370:	2100      	movs	r1, #0
  402372:	4620      	mov	r0, r4
  402374:	4b17      	ldr	r3, [pc, #92]	; (4023d4 <nm_bus_init+0xc4>)
  402376:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  402378:	2200      	movs	r2, #0
  40237a:	4611      	mov	r1, r2
  40237c:	4620      	mov	r0, r4
  40237e:	4b16      	ldr	r3, [pc, #88]	; (4023d8 <nm_bus_init+0xc8>)
  402380:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  402382:	2203      	movs	r2, #3
  402384:	2100      	movs	r1, #0
  402386:	4620      	mov	r0, r4
  402388:	4b14      	ldr	r3, [pc, #80]	; (4023dc <nm_bus_init+0xcc>)
  40238a:	4798      	blx	r3
			div_ceil(sysclk_get_peripheral_hz(), CONF_WINC_SPI_CLOCK));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40238c:	2300      	movs	r3, #0
  40238e:	461a      	mov	r2, r3
  402390:	4619      	mov	r1, r3
  402392:	4620      	mov	r0, r4
  402394:	4f12      	ldr	r7, [pc, #72]	; (4023e0 <nm_bus_init+0xd0>)
  402396:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402398:	2301      	movs	r3, #1
  40239a:	6023      	str	r3, [r4, #0]
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
	return (Pdc *)&(p_spi->SPI_RPR);
  40239c:	4811      	ldr	r0, [pc, #68]	; (4023e4 <nm_bus_init+0xd4>)
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);

	/* Get pointer to SPI master PDC register base. */
	g_p_pdc_spi = spi_get_pdc_base(CONF_WINC_SPI);
  40239e:	4b12      	ldr	r3, [pc, #72]	; (4023e8 <nm_bus_init+0xd8>)
  4023a0:	6018      	str	r0, [r3, #0]
	pdc_disable_transfer(g_p_pdc_spi, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4023a2:	f240 2102 	movw	r1, #514	; 0x202
  4023a6:	4b11      	ldr	r3, [pc, #68]	; (4023ec <nm_bus_init+0xdc>)
  4023a8:	4798      	blx	r3

	nm_bsp_reset();
  4023aa:	4b11      	ldr	r3, [pc, #68]	; (4023f0 <nm_bus_init+0xe0>)
  4023ac:	4798      	blx	r3
	SPI_DEASSERT_CS();
  4023ae:	6833      	ldr	r3, [r6, #0]
  4023b0:	631d      	str	r5, [r3, #48]	; 0x30
#endif
	return result;
}
  4023b2:	2000      	movs	r0, #0
  4023b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023b6:	bf00      	nop
  4023b8:	08000001 	.word	0x08000001
  4023bc:	004053f1 	.word	0x004053f1
  4023c0:	2000be34 	.word	0x2000be34
  4023c4:	400e0e00 	.word	0x400e0e00
  4023c8:	40008000 	.word	0x40008000
  4023cc:	00404f55 	.word	0x00404f55
  4023d0:	00404f65 	.word	0x00404f65
  4023d4:	00404f85 	.word	0x00404f85
  4023d8:	00404fa5 	.word	0x00404fa5
  4023dc:	00404fb9 	.word	0x00404fb9
  4023e0:	00404fe1 	.word	0x00404fe1
  4023e4:	40008100 	.word	0x40008100
  4023e8:	20000b24 	.word	0x20000b24
  4023ec:	00404f45 	.word	0x00404f45
  4023f0:	004021e5 	.word	0x004021e5

004023f4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4023f4:	b510      	push	{r4, lr}
  4023f6:	b084      	sub	sp, #16
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4023f8:	2803      	cmp	r0, #3
  4023fa:	d12d      	bne.n	402458 <nm_bus_ioctl+0x64>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4023fc:	684b      	ldr	r3, [r1, #4]
  4023fe:	890a      	ldrh	r2, [r1, #8]

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	pdc_packet_t pdc_spi_tx_packet, pdc_spi_rx_packet;

	pdc_spi_tx_packet.ul_addr = (uint32_t)pu8Mosi;;
  402400:	6809      	ldr	r1, [r1, #0]
  402402:	9100      	str	r1, [sp, #0]
	pdc_spi_rx_packet.ul_addr = (uint32_t)pu8Miso;
  402404:	9302      	str	r3, [sp, #8]
	pdc_spi_tx_packet.ul_size = u16Sz;
  402406:	9201      	str	r2, [sp, #4]
	pdc_spi_rx_packet.ul_size = u16Sz;
  402408:	9203      	str	r2, [sp, #12]

	if (pu8Miso == 0) {
  40240a:	b913      	cbnz	r3, 402412 <nm_bus_ioctl+0x1e>
		pdc_spi_rx_packet.ul_addr = (uint32_t)0x400000;
  40240c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402410:	9302      	str	r3, [sp, #8]
	}

	/* Trigger SPI PDC transfer. */
	SPI_ASSERT_CS();
  402412:	4b18      	ldr	r3, [pc, #96]	; (402474 <nm_bus_ioctl+0x80>)
  402414:	681b      	ldr	r3, [r3, #0]
  402416:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40241a:	635a      	str	r2, [r3, #52]	; 0x34
	pdc_tx_init(g_p_pdc_spi, &pdc_spi_tx_packet, NULL);
  40241c:	4c16      	ldr	r4, [pc, #88]	; (402478 <nm_bus_ioctl+0x84>)
  40241e:	2200      	movs	r2, #0
  402420:	4669      	mov	r1, sp
  402422:	6820      	ldr	r0, [r4, #0]
  402424:	4b15      	ldr	r3, [pc, #84]	; (40247c <nm_bus_ioctl+0x88>)
  402426:	4798      	blx	r3
	pdc_rx_init(g_p_pdc_spi, &pdc_spi_rx_packet, NULL);
  402428:	2200      	movs	r2, #0
  40242a:	a902      	add	r1, sp, #8
  40242c:	6820      	ldr	r0, [r4, #0]
  40242e:	4b14      	ldr	r3, [pc, #80]	; (402480 <nm_bus_ioctl+0x8c>)
  402430:	4798      	blx	r3
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN;
  402432:	6821      	ldr	r1, [r4, #0]
  402434:	f240 1301 	movw	r3, #257	; 0x101
  402438:	620b      	str	r3, [r1, #32]
	while ((CONF_WINC_SPI->SPI_SR & SPI_SR_RXBUFF) == 0)
  40243a:	4a12      	ldr	r2, [pc, #72]	; (402484 <nm_bus_ioctl+0x90>)
  40243c:	6913      	ldr	r3, [r2, #16]
  40243e:	f013 0f40 	tst.w	r3, #64	; 0x40
  402442:	d0fb      	beq.n	40243c <nm_bus_ioctl+0x48>
		;
	SPI_DEASSERT_CS();
  402444:	4b0b      	ldr	r3, [pc, #44]	; (402474 <nm_bus_ioctl+0x80>)
  402446:	681b      	ldr	r3, [r3, #0]
  402448:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40244c:	631a      	str	r2, [r3, #48]	; 0x30
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS;
  40244e:	f240 2302 	movw	r3, #514	; 0x202
  402452:	620b      	str	r3, [r1, #32]
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  402454:	2000      	movs	r0, #0
		}
		break;
  402456:	e00a      	b.n	40246e <nm_bus_ioctl+0x7a>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
  402458:	22d6      	movs	r2, #214	; 0xd6
  40245a:	490b      	ldr	r1, [pc, #44]	; (402488 <nm_bus_ioctl+0x94>)
  40245c:	480b      	ldr	r0, [pc, #44]	; (40248c <nm_bus_ioctl+0x98>)
  40245e:	4c0c      	ldr	r4, [pc, #48]	; (402490 <nm_bus_ioctl+0x9c>)
  402460:	47a0      	blx	r4
  402462:	480c      	ldr	r0, [pc, #48]	; (402494 <nm_bus_ioctl+0xa0>)
  402464:	47a0      	blx	r4
  402466:	480c      	ldr	r0, [pc, #48]	; (402498 <nm_bus_ioctl+0xa4>)
  402468:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  40246a:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
  40246e:	b004      	add	sp, #16
  402470:	bd10      	pop	{r4, pc}
  402472:	bf00      	nop
  402474:	2000be34 	.word	0x2000be34
  402478:	20000b24 	.word	0x20000b24
  40247c:	00404f15 	.word	0x00404f15
  402480:	00404f2d 	.word	0x00404f2d
  402484:	40008000 	.word	0x40008000
  402488:	00411b28 	.word	0x00411b28
  40248c:	00411afc 	.word	0x00411afc
  402490:	00408a5d 	.word	0x00408a5d
  402494:	00411b10 	.word	0x00411b10
  402498:	00411b24 	.word	0x00411b24

0040249c <nm_bus_deinit>:
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
  40249c:	2000      	movs	r0, #0
  40249e:	4770      	bx	lr

004024a0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4024a0:	b13a      	cbz	r2, 4024b2 <m2m_memcpy+0x12>
  4024a2:	3901      	subs	r1, #1
  4024a4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4024a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4024aa:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4024ae:	4290      	cmp	r0, r2
  4024b0:	d1f9      	bne.n	4024a6 <m2m_memcpy+0x6>
  4024b2:	4770      	bx	lr

004024b4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4024b4:	b122      	cbz	r2, 4024c0 <m2m_memset+0xc>
  4024b6:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  4024b8:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  4024bc:	4290      	cmp	r0, r2
  4024be:	d1fb      	bne.n	4024b8 <m2m_memset+0x4>
  4024c0:	4770      	bx	lr
  4024c2:	bf00      	nop

004024c4 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  4024c4:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  4024c6:	7802      	ldrb	r2, [r0, #0]
  4024c8:	b13a      	cbz	r2, 4024da <m2m_strlen+0x16>
  4024ca:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  4024cc:	3001      	adds	r0, #1
  4024ce:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  4024d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4024d4:	2a00      	cmp	r2, #0
  4024d6:	d1f9      	bne.n	4024cc <m2m_strlen+0x8>
  4024d8:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  4024da:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  4024dc:	4770      	bx	lr
  4024de:	bf00      	nop

004024e0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4024e0:	4770      	bx	lr
  4024e2:	bf00      	nop

004024e4 <hif_set_rx_done>:
	{
		taskYIELD();
	}
}
static sint8 hif_set_rx_done(void)
{
  4024e4:	b510      	push	{r4, lr}
  4024e6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4024e8:	a901      	add	r1, sp, #4
  4024ea:	f241 0070 	movw	r0, #4208	; 0x1070
  4024ee:	4b0a      	ldr	r3, [pc, #40]	; (402518 <hif_set_rx_done+0x34>)
  4024f0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4024f2:	4604      	mov	r4, r0
  4024f4:	b960      	cbnz	r0, 402510 <hif_set_rx_done+0x2c>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  4024f6:	9901      	ldr	r1, [sp, #4]
  4024f8:	f041 0102 	orr.w	r1, r1, #2
  4024fc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4024fe:	f241 0070 	movw	r0, #4208	; 0x1070
  402502:	4b06      	ldr	r3, [pc, #24]	; (40251c <hif_set_rx_done+0x38>)
  402504:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402506:	4604      	mov	r4, r0
  402508:	b910      	cbnz	r0, 402510 <hif_set_rx_done+0x2c>
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  40250a:	2001      	movs	r0, #1
  40250c:	4b04      	ldr	r3, [pc, #16]	; (402520 <hif_set_rx_done+0x3c>)
  40250e:	4798      	blx	r3
#endif
ERR1:
	return ret;

}
  402510:	4620      	mov	r0, r4
  402512:	b002      	add	sp, #8
  402514:	bd10      	pop	{r4, pc}
  402516:	bf00      	nop
  402518:	00403895 	.word	0x00403895
  40251c:	004038a1 	.word	0x004038a1
  402520:	004022e1 	.word	0x004022e1

00402524 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
  402524:	b538      	push	{r3, r4, r5, lr}
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	xSemaphoreGiveFromISR(xWINC_Semaphore_handle, &xHigherPriorityTaskWoken);
  402526:	4c0b      	ldr	r4, [pc, #44]	; (402554 <isr+0x30>)
  402528:	2300      	movs	r3, #0
  40252a:	4622      	mov	r2, r4
  40252c:	4619      	mov	r1, r3
  40252e:	480a      	ldr	r0, [pc, #40]	; (402558 <isr+0x34>)
  402530:	6800      	ldr	r0, [r0, #0]
  402532:	4d0a      	ldr	r5, [pc, #40]	; (40255c <isr+0x38>)
  402534:	47a8      	blx	r5
	gu8Interrupt++;
  402536:	4a0a      	ldr	r2, [pc, #40]	; (402560 <isr+0x3c>)
  402538:	7813      	ldrb	r3, [r2, #0]
  40253a:	3301      	adds	r3, #1
  40253c:	b2db      	uxtb	r3, r3
  40253e:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
  402540:	2000      	movs	r0, #0
  402542:	4b08      	ldr	r3, [pc, #32]	; (402564 <isr+0x40>)
  402544:	4798      	blx	r3
#endif
	
	if (xHigherPriorityTaskWoken == pdTRUE)
  402546:	6823      	ldr	r3, [r4, #0]
  402548:	2b01      	cmp	r3, #1
  40254a:	d101      	bne.n	402550 <isr+0x2c>
	{
		taskYIELD();
  40254c:	4b06      	ldr	r3, [pc, #24]	; (402568 <isr+0x44>)
  40254e:	4798      	blx	r3
  402550:	bd38      	pop	{r3, r4, r5, pc}
  402552:	bf00      	nop
  402554:	20000b34 	.word	0x20000b34
  402558:	2000bdc0 	.word	0x2000bdc0
  40255c:	00406269 	.word	0x00406269
  402560:	20000b30 	.word	0x20000b30
  402564:	004022e1 	.word	0x004022e1
  402568:	00405ce5 	.word	0x00405ce5

0040256c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  40256c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40256e:	4b11      	ldr	r3, [pc, #68]	; (4025b4 <hif_chip_wake+0x48>)
  402570:	781b      	ldrb	r3, [r3, #0]
  402572:	f013 0fff 	tst.w	r3, #255	; 0xff
  402576:	d115      	bne.n	4025a4 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402578:	4b0f      	ldr	r3, [pc, #60]	; (4025b8 <hif_chip_wake+0x4c>)
  40257a:	781b      	ldrb	r3, [r3, #0]
  40257c:	b2db      	uxtb	r3, r3
  40257e:	2b03      	cmp	r3, #3
  402580:	d004      	beq.n	40258c <hif_chip_wake+0x20>
  402582:	4b0d      	ldr	r3, [pc, #52]	; (4025b8 <hif_chip_wake+0x4c>)
  402584:	781b      	ldrb	r3, [r3, #0]
  402586:	b2db      	uxtb	r3, r3
  402588:	2b04      	cmp	r3, #4
  40258a:	d10b      	bne.n	4025a4 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  40258c:	4b0b      	ldr	r3, [pc, #44]	; (4025bc <hif_chip_wake+0x50>)
  40258e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402590:	4603      	mov	r3, r0
  402592:	b968      	cbnz	r0, 4025b0 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  402594:	f245 6178 	movw	r1, #22136	; 0x5678
  402598:	f241 0074 	movw	r0, #4212	; 0x1074
  40259c:	4b08      	ldr	r3, [pc, #32]	; (4025c0 <hif_chip_wake+0x54>)
  40259e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4025a0:	4603      	mov	r3, r0
  4025a2:	b928      	cbnz	r0, 4025b0 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4025a4:	4a03      	ldr	r2, [pc, #12]	; (4025b4 <hif_chip_wake+0x48>)
  4025a6:	7813      	ldrb	r3, [r2, #0]
  4025a8:	3301      	adds	r3, #1
  4025aa:	b2db      	uxtb	r3, r3
  4025ac:	7013      	strb	r3, [r2, #0]
  4025ae:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4025b0:	4618      	mov	r0, r3
  4025b2:	bd08      	pop	{r3, pc}
  4025b4:	20000b50 	.word	0x20000b50
  4025b8:	20000b40 	.word	0x20000b40
  4025bc:	0040341d 	.word	0x0040341d
  4025c0:	004038a1 	.word	0x004038a1

004025c4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4025c4:	b500      	push	{lr}
  4025c6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4025c8:	4b1d      	ldr	r3, [pc, #116]	; (402640 <hif_chip_sleep+0x7c>)
  4025ca:	781b      	ldrb	r3, [r3, #0]
  4025cc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4025d0:	d004      	beq.n	4025dc <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  4025d2:	4a1b      	ldr	r2, [pc, #108]	; (402640 <hif_chip_sleep+0x7c>)
  4025d4:	7813      	ldrb	r3, [r2, #0]
  4025d6:	3b01      	subs	r3, #1
  4025d8:	b2db      	uxtb	r3, r3
  4025da:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4025dc:	4b18      	ldr	r3, [pc, #96]	; (402640 <hif_chip_sleep+0x7c>)
  4025de:	781b      	ldrb	r3, [r3, #0]
  4025e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4025e4:	d125      	bne.n	402632 <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4025e6:	4b17      	ldr	r3, [pc, #92]	; (402644 <hif_chip_sleep+0x80>)
  4025e8:	781b      	ldrb	r3, [r3, #0]
  4025ea:	b2db      	uxtb	r3, r3
  4025ec:	2b03      	cmp	r3, #3
  4025ee:	d004      	beq.n	4025fa <hif_chip_sleep+0x36>
  4025f0:	4b14      	ldr	r3, [pc, #80]	; (402644 <hif_chip_sleep+0x80>)
  4025f2:	781b      	ldrb	r3, [r3, #0]
  4025f4:	b2db      	uxtb	r3, r3
  4025f6:	2b04      	cmp	r3, #4
  4025f8:	d11d      	bne.n	402636 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  4025fa:	2300      	movs	r3, #0
  4025fc:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  4025fe:	f244 3121 	movw	r1, #17185	; 0x4321
  402602:	f241 0074 	movw	r0, #4212	; 0x1074
  402606:	4b10      	ldr	r3, [pc, #64]	; (402648 <hif_chip_sleep+0x84>)
  402608:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40260a:	4603      	mov	r3, r0
  40260c:	b9a0      	cbnz	r0, 402638 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40260e:	a901      	add	r1, sp, #4
  402610:	2001      	movs	r0, #1
  402612:	4b0e      	ldr	r3, [pc, #56]	; (40264c <hif_chip_sleep+0x88>)
  402614:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402616:	4603      	mov	r3, r0
  402618:	b970      	cbnz	r0, 402638 <hif_chip_sleep+0x74>
			if(reg&0x2)
  40261a:	9901      	ldr	r1, [sp, #4]
  40261c:	f011 0f02 	tst.w	r1, #2
  402620:	d00a      	beq.n	402638 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  402622:	f021 0102 	bic.w	r1, r1, #2
  402626:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402628:	2001      	movs	r0, #1
  40262a:	4b07      	ldr	r3, [pc, #28]	; (402648 <hif_chip_sleep+0x84>)
  40262c:	4798      	blx	r3
  40262e:	4603      	mov	r3, r0
  402630:	e002      	b.n	402638 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  402632:	2300      	movs	r3, #0
  402634:	e000      	b.n	402638 <hif_chip_sleep+0x74>
  402636:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  402638:	4618      	mov	r0, r3
  40263a:	b003      	add	sp, #12
  40263c:	f85d fb04 	ldr.w	pc, [sp], #4
  402640:	20000b50 	.word	0x20000b50
  402644:	20000b40 	.word	0x20000b40
  402648:	004038a1 	.word	0x004038a1
  40264c:	00403895 	.word	0x00403895

00402650 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  402650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402654:	b087      	sub	sp, #28
  402656:	4680      	mov	r8, r0
  402658:	460f      	mov	r7, r1
  40265a:	4692      	mov	sl, r2
  40265c:	4699      	mov	r9, r3
  40265e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402660:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402664:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  402668:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40266c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  402670:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402674:	2308      	movs	r3, #8
  402676:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40267a:	b144      	cbz	r4, 40268e <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  40267c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402680:	fa16 f383 	uxtah	r3, r6, r3
  402684:	442b      	add	r3, r5
  402686:	b29b      	uxth	r3, r3
  402688:	f8ad 3016 	strh.w	r3, [sp, #22]
  40268c:	e006      	b.n	40269c <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40268e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402692:	fa19 f383 	uxtah	r3, r9, r3
  402696:	b29b      	uxth	r3, r3
  402698:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  40269c:	4b57      	ldr	r3, [pc, #348]	; (4027fc <hif_send+0x1ac>)
  40269e:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4026a0:	4683      	mov	fp, r0
  4026a2:	2800      	cmp	r0, #0
  4026a4:	f040 8095 	bne.w	4027d2 <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4026a8:	2300      	movs	r3, #0
  4026aa:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4026ac:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4026b0:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4026b2:	9b02      	ldr	r3, [sp, #8]
  4026b4:	ea48 0303 	orr.w	r3, r8, r3
  4026b8:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4026ba:	9b02      	ldr	r3, [sp, #8]
  4026bc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4026c0:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4026c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4026c6:	9b02      	ldr	r3, [sp, #8]
  4026c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4026cc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4026ce:	9902      	ldr	r1, [sp, #8]
  4026d0:	f241 008c 	movw	r0, #4236	; 0x108c
  4026d4:	4b4a      	ldr	r3, [pc, #296]	; (402800 <hif_send+0x1b0>)
  4026d6:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4026d8:	4683      	mov	fp, r0
  4026da:	2800      	cmp	r0, #0
  4026dc:	f040 808a 	bne.w	4027f4 <hif_send+0x1a4>


		reg = 0;
  4026e0:	2300      	movs	r3, #0
  4026e2:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4026e4:	9b02      	ldr	r3, [sp, #8]
  4026e6:	f043 0302 	orr.w	r3, r3, #2
  4026ea:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4026ec:	9902      	ldr	r1, [sp, #8]
  4026ee:	f241 0078 	movw	r0, #4216	; 0x1078
  4026f2:	4b43      	ldr	r3, [pc, #268]	; (402800 <hif_send+0x1b0>)
  4026f4:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4026f6:	4683      	mov	fp, r0
  4026f8:	2800      	cmp	r0, #0
  4026fa:	d17b      	bne.n	4027f4 <hif_send+0x1a4>
		dma_addr = 0;
  4026fc:	2300      	movs	r3, #0
  4026fe:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402700:	f8ad 3006 	strh.w	r3, [sp, #6]
  402704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402708:	b29b      	uxth	r3, r3
  40270a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40270e:	d21e      	bcs.n	40274e <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402710:	f241 0878 	movw	r8, #4216	; 0x1078
  402714:	4f3b      	ldr	r7, [pc, #236]	; (402804 <hif_send+0x1b4>)
  402716:	a902      	add	r1, sp, #8
  402718:	4640      	mov	r0, r8
  40271a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  40271c:	b9b8      	cbnz	r0, 40274e <hif_send+0xfe>
			if (!(reg & 0x2))
  40271e:	9b02      	ldr	r3, [sp, #8]
  402720:	f013 0f02 	tst.w	r3, #2
  402724:	d107      	bne.n	402736 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402726:	a903      	add	r1, sp, #12
  402728:	4837      	ldr	r0, [pc, #220]	; (402808 <hif_send+0x1b8>)
  40272a:	4b36      	ldr	r3, [pc, #216]	; (402804 <hif_send+0x1b4>)
  40272c:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40272e:	b170      	cbz	r0, 40274e <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  402730:	2300      	movs	r3, #0
  402732:	9303      	str	r3, [sp, #12]
  402734:	e00b      	b.n	40274e <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402736:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40273a:	3301      	adds	r3, #1
  40273c:	b29b      	uxth	r3, r3
  40273e:	f8ad 3006 	strh.w	r3, [sp, #6]
  402742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402746:	b29b      	uxth	r3, r3
  402748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40274c:	d3e3      	bcc.n	402716 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40274e:	9b03      	ldr	r3, [sp, #12]
  402750:	2b00      	cmp	r3, #0
  402752:	d04d      	beq.n	4027f0 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  402754:	9b03      	ldr	r3, [sp, #12]
  402756:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402758:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40275c:	b29b      	uxth	r3, r3
  40275e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  402762:	9804      	ldr	r0, [sp, #16]
  402764:	2208      	movs	r2, #8
  402766:	a905      	add	r1, sp, #20
  402768:	4b28      	ldr	r3, [pc, #160]	; (40280c <hif_send+0x1bc>)
  40276a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  40276c:	4683      	mov	fp, r0
  40276e:	2800      	cmp	r0, #0
  402770:	d140      	bne.n	4027f4 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  402772:	9b04      	ldr	r3, [sp, #16]
  402774:	3308      	adds	r3, #8
  402776:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  402778:	f1ba 0f00 	cmp.w	sl, #0
  40277c:	d00a      	beq.n	402794 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  40277e:	9804      	ldr	r0, [sp, #16]
  402780:	464a      	mov	r2, r9
  402782:	4651      	mov	r1, sl
  402784:	4b21      	ldr	r3, [pc, #132]	; (40280c <hif_send+0x1bc>)
  402786:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  402788:	4683      	mov	fp, r0
  40278a:	2800      	cmp	r0, #0
  40278c:	d132      	bne.n	4027f4 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40278e:	9b04      	ldr	r3, [sp, #16]
  402790:	444b      	add	r3, r9
  402792:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402794:	b174      	cbz	r4, 4027b4 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  402796:	9b04      	ldr	r3, [sp, #16]
  402798:	ebc9 0505 	rsb	r5, r9, r5
  40279c:	441d      	add	r5, r3
  40279e:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4027a0:	9804      	ldr	r0, [sp, #16]
  4027a2:	4632      	mov	r2, r6
  4027a4:	4621      	mov	r1, r4
  4027a6:	4b19      	ldr	r3, [pc, #100]	; (40280c <hif_send+0x1bc>)
  4027a8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4027aa:	4683      	mov	fp, r0
  4027ac:	bb10      	cbnz	r0, 4027f4 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4027ae:	9b04      	ldr	r3, [sp, #16]
  4027b0:	441e      	add	r6, r3
  4027b2:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4027b4:	9b03      	ldr	r3, [sp, #12]
  4027b6:	009b      	lsls	r3, r3, #2
  4027b8:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4027ba:	9b02      	ldr	r3, [sp, #8]
  4027bc:	f043 0302 	orr.w	r3, r3, #2
  4027c0:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4027c2:	9902      	ldr	r1, [sp, #8]
  4027c4:	f241 006c 	movw	r0, #4204	; 0x106c
  4027c8:	4b0d      	ldr	r3, [pc, #52]	; (402800 <hif_send+0x1b0>)
  4027ca:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4027cc:	4683      	mov	fp, r0
  4027ce:	b988      	cbnz	r0, 4027f4 <hif_send+0x1a4>
  4027d0:	e00a      	b.n	4027e8 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4027d2:	f240 12ab 	movw	r2, #427	; 0x1ab
  4027d6:	490e      	ldr	r1, [pc, #56]	; (402810 <hif_send+0x1c0>)
  4027d8:	480e      	ldr	r0, [pc, #56]	; (402814 <hif_send+0x1c4>)
  4027da:	4c0f      	ldr	r4, [pc, #60]	; (402818 <hif_send+0x1c8>)
  4027dc:	47a0      	blx	r4
  4027de:	480f      	ldr	r0, [pc, #60]	; (40281c <hif_send+0x1cc>)
  4027e0:	47a0      	blx	r4
  4027e2:	480f      	ldr	r0, [pc, #60]	; (402820 <hif_send+0x1d0>)
  4027e4:	47a0      	blx	r4
		goto ERR1;
  4027e6:	e005      	b.n	4027f4 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  4027e8:	4b0e      	ldr	r3, [pc, #56]	; (402824 <hif_send+0x1d4>)
  4027ea:	4798      	blx	r3
  4027ec:	4683      	mov	fp, r0
  4027ee:	e001      	b.n	4027f4 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  4027f0:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  4027f4:	4658      	mov	r0, fp
  4027f6:	b007      	add	sp, #28
  4027f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027fc:	0040256d 	.word	0x0040256d
  402800:	004038a1 	.word	0x004038a1
  402804:	00403895 	.word	0x00403895
  402808:	00150400 	.word	0x00150400
  40280c:	0040390d 	.word	0x0040390d
  402810:	00411da0 	.word	0x00411da0
  402814:	00411afc 	.word	0x00411afc
  402818:	00408a5d 	.word	0x00408a5d
  40281c:	00411b6c 	.word	0x00411b6c
  402820:	00411b24 	.word	0x00411b24
  402824:	004025c5 	.word	0x004025c5

00402828 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40282c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40282e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 402b2c <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  402832:	4fa3      	ldr	r7, [pc, #652]	; (402ac0 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402834:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 402b30 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402838:	4ea2      	ldr	r6, [pc, #648]	; (402ac4 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40283a:	e17b      	b.n	402b34 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  40283c:	f899 3000 	ldrb.w	r3, [r9]
  402840:	3b01      	subs	r3, #1
  402842:	b2db      	uxtb	r3, r3
  402844:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  402848:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40284a:	4604      	mov	r4, r0
  40284c:	2800      	cmp	r0, #0
  40284e:	f040 811a 	bne.w	402a86 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402852:	a903      	add	r1, sp, #12
  402854:	f241 0070 	movw	r0, #4208	; 0x1070
  402858:	4b9b      	ldr	r3, [pc, #620]	; (402ac8 <hif_handle_isr+0x2a0>)
  40285a:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  40285c:	4604      	mov	r4, r0
  40285e:	2800      	cmp	r0, #0
  402860:	f040 8106 	bne.w	402a70 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  402864:	9b03      	ldr	r3, [sp, #12]
  402866:	f013 0f01 	tst.w	r3, #1
  40286a:	f000 80f5 	beq.w	402a58 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  40286e:	4b97      	ldr	r3, [pc, #604]	; (402acc <hif_handle_isr+0x2a4>)
  402870:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  402872:	9903      	ldr	r1, [sp, #12]
  402874:	f021 0101 	bic.w	r1, r1, #1
  402878:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40287a:	f241 0070 	movw	r0, #4208	; 0x1070
  40287e:	4b94      	ldr	r3, [pc, #592]	; (402ad0 <hif_handle_isr+0x2a8>)
  402880:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402882:	4604      	mov	r4, r0
  402884:	2800      	cmp	r0, #0
  402886:	f040 810e 	bne.w	402aa6 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  40288a:	2200      	movs	r2, #0
  40288c:	4b91      	ldr	r3, [pc, #580]	; (402ad4 <hif_handle_isr+0x2ac>)
  40288e:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402890:	9d03      	ldr	r5, [sp, #12]
  402892:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402896:	2d00      	cmp	r5, #0
  402898:	f000 80d1 	beq.w	402a3e <hif_handle_isr+0x216>
					uint32 address = 0;
  40289c:	a906      	add	r1, sp, #24
  40289e:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4028a2:	f241 0084 	movw	r0, #4228	; 0x1084
  4028a6:	4b88      	ldr	r3, [pc, #544]	; (402ac8 <hif_handle_isr+0x2a0>)
  4028a8:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4028aa:	4604      	mov	r4, r0
  4028ac:	b168      	cbz	r0, 4028ca <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4028ae:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  4028b2:	4641      	mov	r1, r8
  4028b4:	4630      	mov	r0, r6
  4028b6:	4d88      	ldr	r5, [pc, #544]	; (402ad8 <hif_handle_isr+0x2b0>)
  4028b8:	47a8      	blx	r5
  4028ba:	4888      	ldr	r0, [pc, #544]	; (402adc <hif_handle_isr+0x2b4>)
  4028bc:	47a8      	blx	r5
  4028be:	4888      	ldr	r0, [pc, #544]	; (402ae0 <hif_handle_isr+0x2b8>)
  4028c0:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4028c2:	2001      	movs	r0, #1
  4028c4:	4b81      	ldr	r3, [pc, #516]	; (402acc <hif_handle_isr+0x2a4>)
  4028c6:	4798      	blx	r3
  4028c8:	e0eb      	b.n	402aa2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4028ca:	2204      	movs	r2, #4
  4028cc:	a904      	add	r1, sp, #16
  4028ce:	9805      	ldr	r0, [sp, #20]
  4028d0:	4b84      	ldr	r3, [pc, #528]	; (402ae4 <hif_handle_isr+0x2bc>)
  4028d2:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4028d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4028d8:	b29b      	uxth	r3, r3
  4028da:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4028de:	4604      	mov	r4, r0
  4028e0:	b168      	cbz	r0, 4028fe <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  4028e2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
  4028e6:	4641      	mov	r1, r8
  4028e8:	4630      	mov	r0, r6
  4028ea:	4d7b      	ldr	r5, [pc, #492]	; (402ad8 <hif_handle_isr+0x2b0>)
  4028ec:	47a8      	blx	r5
  4028ee:	487e      	ldr	r0, [pc, #504]	; (402ae8 <hif_handle_isr+0x2c0>)
  4028f0:	47a8      	blx	r5
  4028f2:	487b      	ldr	r0, [pc, #492]	; (402ae0 <hif_handle_isr+0x2b8>)
  4028f4:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4028f6:	2001      	movs	r0, #1
  4028f8:	4b74      	ldr	r3, [pc, #464]	; (402acc <hif_handle_isr+0x2a4>)
  4028fa:	4798      	blx	r3
  4028fc:	e0d1      	b.n	402aa2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  4028fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402902:	b29b      	uxth	r3, r3
  402904:	429d      	cmp	r5, r3
  402906:	d01e      	beq.n	402946 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  402908:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40290c:	b29b      	uxth	r3, r3
  40290e:	1aeb      	subs	r3, r5, r3
  402910:	2b04      	cmp	r3, #4
  402912:	dd18      	ble.n	402946 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402914:	f240 12eb 	movw	r2, #491	; 0x1eb
  402918:	4641      	mov	r1, r8
  40291a:	4630      	mov	r0, r6
  40291c:	4c6e      	ldr	r4, [pc, #440]	; (402ad8 <hif_handle_isr+0x2b0>)
  40291e:	47a0      	blx	r4
  402920:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402924:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402928:	f89d 1011 	ldrb.w	r1, [sp, #17]
  40292c:	9100      	str	r1, [sp, #0]
  40292e:	b292      	uxth	r2, r2
  402930:	4629      	mov	r1, r5
  402932:	486e      	ldr	r0, [pc, #440]	; (402aec <hif_handle_isr+0x2c4>)
  402934:	47a0      	blx	r4
  402936:	486a      	ldr	r0, [pc, #424]	; (402ae0 <hif_handle_isr+0x2b8>)
  402938:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  40293a:	2001      	movs	r0, #1
  40293c:	4b63      	ldr	r3, [pc, #396]	; (402acc <hif_handle_isr+0x2a4>)
  40293e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402940:	f06f 0405 	mvn.w	r4, #5
  402944:	e0ad      	b.n	402aa2 <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402946:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40294a:	b2db      	uxtb	r3, r3
  40294c:	2b01      	cmp	r3, #1
  40294e:	d10d      	bne.n	40296c <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  402950:	4b67      	ldr	r3, [pc, #412]	; (402af0 <hif_handle_isr+0x2c8>)
  402952:	681b      	ldr	r3, [r3, #0]
  402954:	2b00      	cmp	r3, #0
  402956:	d060      	beq.n	402a1a <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402958:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40295c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402960:	3908      	subs	r1, #8
  402962:	9a05      	ldr	r2, [sp, #20]
  402964:	3208      	adds	r2, #8
  402966:	b289      	uxth	r1, r1
  402968:	4798      	blx	r3
  40296a:	e056      	b.n	402a1a <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40296c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402970:	b2db      	uxtb	r3, r3
  402972:	2b02      	cmp	r3, #2
  402974:	d10d      	bne.n	402992 <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  402976:	4b5f      	ldr	r3, [pc, #380]	; (402af4 <hif_handle_isr+0x2cc>)
  402978:	681b      	ldr	r3, [r3, #0]
  40297a:	2b00      	cmp	r3, #0
  40297c:	d04d      	beq.n	402a1a <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40297e:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402982:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402986:	3908      	subs	r1, #8
  402988:	9a05      	ldr	r2, [sp, #20]
  40298a:	3208      	adds	r2, #8
  40298c:	b289      	uxth	r1, r1
  40298e:	4798      	blx	r3
  402990:	e043      	b.n	402a1a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402992:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402996:	b2db      	uxtb	r3, r3
  402998:	2b04      	cmp	r3, #4
  40299a:	d10d      	bne.n	4029b8 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  40299c:	4b56      	ldr	r3, [pc, #344]	; (402af8 <hif_handle_isr+0x2d0>)
  40299e:	681b      	ldr	r3, [r3, #0]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d03a      	beq.n	402a1a <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029ac:	3908      	subs	r1, #8
  4029ae:	9a05      	ldr	r2, [sp, #20]
  4029b0:	3208      	adds	r2, #8
  4029b2:	b289      	uxth	r1, r1
  4029b4:	4798      	blx	r3
  4029b6:	e030      	b.n	402a1a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4029b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029bc:	b2db      	uxtb	r3, r3
  4029be:	2b06      	cmp	r3, #6
  4029c0:	d10c      	bne.n	4029dc <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4029c2:	4b4e      	ldr	r3, [pc, #312]	; (402afc <hif_handle_isr+0x2d4>)
  4029c4:	681b      	ldr	r3, [r3, #0]
  4029c6:	b343      	cbz	r3, 402a1a <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029c8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029cc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029d0:	3908      	subs	r1, #8
  4029d2:	9a05      	ldr	r2, [sp, #20]
  4029d4:	3208      	adds	r2, #8
  4029d6:	b289      	uxth	r1, r1
  4029d8:	4798      	blx	r3
  4029da:	e01e      	b.n	402a1a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4029dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029e0:	b2db      	uxtb	r3, r3
  4029e2:	2b07      	cmp	r3, #7
  4029e4:	d10c      	bne.n	402a00 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  4029e6:	4b46      	ldr	r3, [pc, #280]	; (402b00 <hif_handle_isr+0x2d8>)
  4029e8:	681b      	ldr	r3, [r3, #0]
  4029ea:	b1b3      	cbz	r3, 402a1a <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029ec:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029f0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029f4:	3908      	subs	r1, #8
  4029f6:	9a05      	ldr	r2, [sp, #20]
  4029f8:	3208      	adds	r2, #8
  4029fa:	b289      	uxth	r1, r1
  4029fc:	4798      	blx	r3
  4029fe:	e00c      	b.n	402a1a <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  402a00:	f240 220e 	movw	r2, #526	; 0x20e
  402a04:	4641      	mov	r1, r8
  402a06:	4630      	mov	r0, r6
  402a08:	4c33      	ldr	r4, [pc, #204]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a0a:	47a0      	blx	r4
  402a0c:	483d      	ldr	r0, [pc, #244]	; (402b04 <hif_handle_isr+0x2dc>)
  402a0e:	47a0      	blx	r4
  402a10:	4833      	ldr	r0, [pc, #204]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a12:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  402a14:	f06f 0405 	mvn.w	r4, #5
  402a18:	e043      	b.n	402aa2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  402a1a:	4b2e      	ldr	r3, [pc, #184]	; (402ad4 <hif_handle_isr+0x2ac>)
  402a1c:	781b      	ldrb	r3, [r3, #0]
  402a1e:	f013 0fff 	tst.w	r3, #255	; 0xff
  402a22:	d13b      	bne.n	402a9c <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402a24:	f240 2215 	movw	r2, #533	; 0x215
  402a28:	4641      	mov	r1, r8
  402a2a:	4630      	mov	r0, r6
  402a2c:	4c2a      	ldr	r4, [pc, #168]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a2e:	47a0      	blx	r4
  402a30:	4835      	ldr	r0, [pc, #212]	; (402b08 <hif_handle_isr+0x2e0>)
  402a32:	47a0      	blx	r4
  402a34:	482a      	ldr	r0, [pc, #168]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a36:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402a38:	4b34      	ldr	r3, [pc, #208]	; (402b0c <hif_handle_isr+0x2e4>)
  402a3a:	4798      	blx	r3
  402a3c:	e02e      	b.n	402a9c <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  402a3e:	f240 221d 	movw	r2, #541	; 0x21d
  402a42:	4641      	mov	r1, r8
  402a44:	4630      	mov	r0, r6
  402a46:	4c24      	ldr	r4, [pc, #144]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a48:	47a0      	blx	r4
  402a4a:	4831      	ldr	r0, [pc, #196]	; (402b10 <hif_handle_isr+0x2e8>)
  402a4c:	47a0      	blx	r4
  402a4e:	4824      	ldr	r0, [pc, #144]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a50:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  402a52:	f06f 0401 	mvn.w	r4, #1
  402a56:	e026      	b.n	402aa6 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  402a58:	f44f 7209 	mov.w	r2, #548	; 0x224
  402a5c:	4641      	mov	r1, r8
  402a5e:	4630      	mov	r0, r6
  402a60:	4c1d      	ldr	r4, [pc, #116]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a62:	47a0      	blx	r4
  402a64:	9903      	ldr	r1, [sp, #12]
  402a66:	482b      	ldr	r0, [pc, #172]	; (402b14 <hif_handle_isr+0x2ec>)
  402a68:	47a0      	blx	r4
  402a6a:	481d      	ldr	r0, [pc, #116]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a6c:	47a0      	blx	r4
  402a6e:	e015      	b.n	402a9c <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402a70:	f240 222a 	movw	r2, #554	; 0x22a
  402a74:	4641      	mov	r1, r8
  402a76:	4630      	mov	r0, r6
  402a78:	4d17      	ldr	r5, [pc, #92]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a7a:	47a8      	blx	r5
  402a7c:	4826      	ldr	r0, [pc, #152]	; (402b18 <hif_handle_isr+0x2f0>)
  402a7e:	47a8      	blx	r5
  402a80:	4817      	ldr	r0, [pc, #92]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a82:	47a8      	blx	r5
  402a84:	e00f      	b.n	402aa6 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402a86:	f44f 720c 	mov.w	r2, #560	; 0x230
  402a8a:	4641      	mov	r1, r8
  402a8c:	4630      	mov	r0, r6
  402a8e:	4d12      	ldr	r5, [pc, #72]	; (402ad8 <hif_handle_isr+0x2b0>)
  402a90:	47a8      	blx	r5
  402a92:	4822      	ldr	r0, [pc, #136]	; (402b1c <hif_handle_isr+0x2f4>)
  402a94:	47a8      	blx	r5
  402a96:	4812      	ldr	r0, [pc, #72]	; (402ae0 <hif_handle_isr+0x2b8>)
  402a98:	47a8      	blx	r5
  402a9a:	e004      	b.n	402aa6 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  402a9c:	4b20      	ldr	r3, [pc, #128]	; (402b20 <hif_handle_isr+0x2f8>)
  402a9e:	4798      	blx	r3
  402aa0:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  402aa2:	2c00      	cmp	r4, #0
  402aa4:	d046      	beq.n	402b34 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402aa6:	f240 224f 	movw	r2, #591	; 0x24f
  402aaa:	491e      	ldr	r1, [pc, #120]	; (402b24 <hif_handle_isr+0x2fc>)
  402aac:	4630      	mov	r0, r6
  402aae:	4d0a      	ldr	r5, [pc, #40]	; (402ad8 <hif_handle_isr+0x2b0>)
  402ab0:	47a8      	blx	r5
  402ab2:	4621      	mov	r1, r4
  402ab4:	481c      	ldr	r0, [pc, #112]	; (402b28 <hif_handle_isr+0x300>)
  402ab6:	47a8      	blx	r5
  402ab8:	4809      	ldr	r0, [pc, #36]	; (402ae0 <hif_handle_isr+0x2b8>)
  402aba:	47a8      	blx	r5
			}
		}
  402abc:	e6c4      	b.n	402848 <hif_handle_isr+0x20>
  402abe:	bf00      	nop
  402ac0:	0040256d 	.word	0x0040256d
  402ac4:	00411afc 	.word	0x00411afc
  402ac8:	00403895 	.word	0x00403895
  402acc:	004022e1 	.word	0x004022e1
  402ad0:	004038a1 	.word	0x004038a1
  402ad4:	20000b48 	.word	0x20000b48
  402ad8:	00408a5d 	.word	0x00408a5d
  402adc:	00411b8c 	.word	0x00411b8c
  402ae0:	00411b24 	.word	0x00411b24
  402ae4:	004038ad 	.word	0x004038ad
  402ae8:	00411bb4 	.word	0x00411bb4
  402aec:	00411bcc 	.word	0x00411bcc
  402af0:	20000b2c 	.word	0x20000b2c
  402af4:	20000b44 	.word	0x20000b44
  402af8:	20000b4c 	.word	0x20000b4c
  402afc:	20000b28 	.word	0x20000b28
  402b00:	20000b3c 	.word	0x20000b3c
  402b04:	00411c0c 	.word	0x00411c0c
  402b08:	00411c24 	.word	0x00411c24
  402b0c:	004024e5 	.word	0x004024e5
  402b10:	00411c48 	.word	0x00411c48
  402b14:	00411c5c 	.word	0x00411c5c
  402b18:	00411c78 	.word	0x00411c78
  402b1c:	00411c9c 	.word	0x00411c9c
  402b20:	004025c5 	.word	0x004025c5
  402b24:	00411b50 	.word	0x00411b50
  402b28:	00411cbc 	.word	0x00411cbc
  402b2c:	20000b30 	.word	0x20000b30
  402b30:	00411b48 	.word	0x00411b48

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  402b34:	f899 3000 	ldrb.w	r3, [r9]
  402b38:	f013 0fff 	tst.w	r3, #255	; 0xff
  402b3c:	f47f ae7e 	bne.w	40283c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  402b40:	2000      	movs	r0, #0
  402b42:	b007      	add	sp, #28
  402b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402b48 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b4c:	b083      	sub	sp, #12
  402b4e:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402b50:	b120      	cbz	r0, 402b5c <hif_receive+0x14>
  402b52:	460d      	mov	r5, r1
  402b54:	4616      	mov	r6, r2
  402b56:	4607      	mov	r7, r0
  402b58:	b101      	cbz	r1, 402b5c <hif_receive+0x14>
  402b5a:	b9a2      	cbnz	r2, 402b86 <hif_receive+0x3e>
	{
		if(isDone)
  402b5c:	b134      	cbz	r4, 402b6c <hif_receive+0x24>
		{
			gu8HifSizeDone = 1;
  402b5e:	2201      	movs	r2, #1
  402b60:	4b31      	ldr	r3, [pc, #196]	; (402c28 <hif_receive+0xe0>)
  402b62:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402b64:	4b31      	ldr	r3, [pc, #196]	; (402c2c <hif_receive+0xe4>)
  402b66:	4798      	blx	r3
  402b68:	4603      	mov	r3, r0
  402b6a:	e058      	b.n	402c1e <hif_receive+0xd6>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  402b6c:	f240 2275 	movw	r2, #629	; 0x275
  402b70:	492f      	ldr	r1, [pc, #188]	; (402c30 <hif_receive+0xe8>)
  402b72:	4830      	ldr	r0, [pc, #192]	; (402c34 <hif_receive+0xec>)
  402b74:	4c30      	ldr	r4, [pc, #192]	; (402c38 <hif_receive+0xf0>)
  402b76:	47a0      	blx	r4
  402b78:	4830      	ldr	r0, [pc, #192]	; (402c3c <hif_receive+0xf4>)
  402b7a:	47a0      	blx	r4
  402b7c:	4830      	ldr	r0, [pc, #192]	; (402c40 <hif_receive+0xf8>)
  402b7e:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  402b80:	f06f 030b 	mvn.w	r3, #11
  402b84:	e04b      	b.n	402c1e <hif_receive+0xd6>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402b86:	4669      	mov	r1, sp
  402b88:	f241 0070 	movw	r0, #4208	; 0x1070
  402b8c:	4b2d      	ldr	r3, [pc, #180]	; (402c44 <hif_receive+0xfc>)
  402b8e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402b90:	4603      	mov	r3, r0
  402b92:	2800      	cmp	r0, #0
  402b94:	d143      	bne.n	402c1e <hif_receive+0xd6>


	size = (uint16)((reg >> 2) & 0xfff);
  402b96:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402b9a:	a901      	add	r1, sp, #4
  402b9c:	f241 0084 	movw	r0, #4228	; 0x1084
  402ba0:	4b28      	ldr	r3, [pc, #160]	; (402c44 <hif_receive+0xfc>)
  402ba2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402ba4:	4603      	mov	r3, r0
  402ba6:	2800      	cmp	r0, #0
  402ba8:	d139      	bne.n	402c1e <hif_receive+0xd6>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  402baa:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  402bae:	4546      	cmp	r6, r8
  402bb0:	d90e      	bls.n	402bd0 <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402bb2:	f240 2286 	movw	r2, #646	; 0x286
  402bb6:	491e      	ldr	r1, [pc, #120]	; (402c30 <hif_receive+0xe8>)
  402bb8:	481e      	ldr	r0, [pc, #120]	; (402c34 <hif_receive+0xec>)
  402bba:	4c1f      	ldr	r4, [pc, #124]	; (402c38 <hif_receive+0xf0>)
  402bbc:	47a0      	blx	r4
  402bbe:	4642      	mov	r2, r8
  402bc0:	4631      	mov	r1, r6
  402bc2:	4821      	ldr	r0, [pc, #132]	; (402c48 <hif_receive+0x100>)
  402bc4:	47a0      	blx	r4
  402bc6:	481e      	ldr	r0, [pc, #120]	; (402c40 <hif_receive+0xf8>)
  402bc8:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  402bca:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  402bce:	e026      	b.n	402c1e <hif_receive+0xd6>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402bd0:	9b01      	ldr	r3, [sp, #4]
  402bd2:	429f      	cmp	r7, r3
  402bd4:	d304      	bcc.n	402be0 <hif_receive+0x98>
  402bd6:	eb07 0906 	add.w	r9, r7, r6
  402bda:	4443      	add	r3, r8
  402bdc:	4599      	cmp	r9, r3
  402bde:	d90c      	bls.n	402bfa <hif_receive+0xb2>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402be0:	f44f 7223 	mov.w	r2, #652	; 0x28c
  402be4:	4912      	ldr	r1, [pc, #72]	; (402c30 <hif_receive+0xe8>)
  402be6:	4813      	ldr	r0, [pc, #76]	; (402c34 <hif_receive+0xec>)
  402be8:	4c13      	ldr	r4, [pc, #76]	; (402c38 <hif_receive+0xf0>)
  402bea:	47a0      	blx	r4
  402bec:	4817      	ldr	r0, [pc, #92]	; (402c4c <hif_receive+0x104>)
  402bee:	47a0      	blx	r4
  402bf0:	4813      	ldr	r0, [pc, #76]	; (402c40 <hif_receive+0xf8>)
  402bf2:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  402bf4:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  402bf8:	e011      	b.n	402c1e <hif_receive+0xd6>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402bfa:	4632      	mov	r2, r6
  402bfc:	4629      	mov	r1, r5
  402bfe:	4638      	mov	r0, r7
  402c00:	4b13      	ldr	r3, [pc, #76]	; (402c50 <hif_receive+0x108>)
  402c02:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402c04:	4603      	mov	r3, r0
  402c06:	b950      	cbnz	r0, 402c1e <hif_receive+0xd6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402c08:	9a01      	ldr	r2, [sp, #4]
  402c0a:	4442      	add	r2, r8
  402c0c:	4591      	cmp	r9, r2
  402c0e:	d000      	beq.n	402c12 <hif_receive+0xca>
  402c10:	b12c      	cbz	r4, 402c1e <hif_receive+0xd6>
	{
		gu8HifSizeDone = 1;
  402c12:	2201      	movs	r2, #1
  402c14:	4b04      	ldr	r3, [pc, #16]	; (402c28 <hif_receive+0xe0>)
  402c16:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  402c18:	4b04      	ldr	r3, [pc, #16]	; (402c2c <hif_receive+0xe4>)
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402c1e:	4618      	mov	r0, r3
  402c20:	b003      	add	sp, #12
  402c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402c26:	bf00      	nop
  402c28:	20000b48 	.word	0x20000b48
  402c2c:	004024e5 	.word	0x004024e5
  402c30:	00411b60 	.word	0x00411b60
  402c34:	00411afc 	.word	0x00411afc
  402c38:	00408a5d 	.word	0x00408a5d
  402c3c:	00411cec 	.word	0x00411cec
  402c40:	00411b24 	.word	0x00411b24
  402c44:	00403895 	.word	0x00403895
  402c48:	00411d0c 	.word	0x00411d0c
  402c4c:	00411d50 	.word	0x00411d50
  402c50:	004038ad 	.word	0x004038ad

00402c54 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402c54:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402c56:	1e43      	subs	r3, r0, #1
  402c58:	2b06      	cmp	r3, #6
  402c5a:	d81d      	bhi.n	402c98 <hif_register_cb+0x44>
  402c5c:	e8df f003 	tbb	[pc, r3]
  402c60:	0c100408 	.word	0x0c100408
  402c64:	141c      	.short	0x141c
  402c66:	18          	.byte	0x18
  402c67:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402c68:	4b13      	ldr	r3, [pc, #76]	; (402cb8 <hif_register_cb+0x64>)
  402c6a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c6c:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  402c6e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402c70:	4b12      	ldr	r3, [pc, #72]	; (402cbc <hif_register_cb+0x68>)
  402c72:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c74:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  402c76:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402c78:	4b11      	ldr	r3, [pc, #68]	; (402cc0 <hif_register_cb+0x6c>)
  402c7a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c7c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  402c7e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402c80:	4b10      	ldr	r3, [pc, #64]	; (402cc4 <hif_register_cb+0x70>)
  402c82:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c84:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  402c86:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402c88:	4b0f      	ldr	r3, [pc, #60]	; (402cc8 <hif_register_cb+0x74>)
  402c8a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c8c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  402c8e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402c90:	4b0e      	ldr	r3, [pc, #56]	; (402ccc <hif_register_cb+0x78>)
  402c92:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  402c94:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  402c96:	bd38      	pop	{r3, r4, r5, pc}
  402c98:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402c9a:	f240 22c5 	movw	r2, #709	; 0x2c5
  402c9e:	490c      	ldr	r1, [pc, #48]	; (402cd0 <hif_register_cb+0x7c>)
  402ca0:	480c      	ldr	r0, [pc, #48]	; (402cd4 <hif_register_cb+0x80>)
  402ca2:	4d0d      	ldr	r5, [pc, #52]	; (402cd8 <hif_register_cb+0x84>)
  402ca4:	47a8      	blx	r5
  402ca6:	4621      	mov	r1, r4
  402ca8:	480c      	ldr	r0, [pc, #48]	; (402cdc <hif_register_cb+0x88>)
  402caa:	47a8      	blx	r5
  402cac:	480c      	ldr	r0, [pc, #48]	; (402ce0 <hif_register_cb+0x8c>)
  402cae:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402cb0:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402cb4:	bd38      	pop	{r3, r4, r5, pc}
  402cb6:	bf00      	nop
  402cb8:	20000b44 	.word	0x20000b44
  402cbc:	20000b2c 	.word	0x20000b2c
  402cc0:	20000b4c 	.word	0x20000b4c
  402cc4:	20000b38 	.word	0x20000b38
  402cc8:	20000b28 	.word	0x20000b28
  402ccc:	20000b3c 	.word	0x20000b3c
  402cd0:	00411b38 	.word	0x00411b38
  402cd4:	00411afc 	.word	0x00411afc
  402cd8:	00408a5d 	.word	0x00408a5d
  402cdc:	00411d94 	.word	0x00411d94
  402ce0:	00411b24 	.word	0x00411b24

00402ce4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  402ce4:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402ce6:	2400      	movs	r4, #0
  402ce8:	4b09      	ldr	r3, [pc, #36]	; (402d10 <hif_init+0x2c>)
  402cea:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402cec:	4b09      	ldr	r3, [pc, #36]	; (402d14 <hif_init+0x30>)
  402cee:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  402cf0:	4b09      	ldr	r3, [pc, #36]	; (402d18 <hif_init+0x34>)
  402cf2:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402cf4:	4b09      	ldr	r3, [pc, #36]	; (402d1c <hif_init+0x38>)
  402cf6:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  402cf8:	4b09      	ldr	r3, [pc, #36]	; (402d20 <hif_init+0x3c>)
  402cfa:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402cfc:	4809      	ldr	r0, [pc, #36]	; (402d24 <hif_init+0x40>)
  402cfe:	4b0a      	ldr	r3, [pc, #40]	; (402d28 <hif_init+0x44>)
  402d00:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402d02:	490a      	ldr	r1, [pc, #40]	; (402d2c <hif_init+0x48>)
  402d04:	2003      	movs	r0, #3
  402d06:	4b0a      	ldr	r3, [pc, #40]	; (402d30 <hif_init+0x4c>)
  402d08:	4798      	blx	r3

	return M2M_SUCCESS;
}
  402d0a:	4620      	mov	r0, r4
  402d0c:	bd10      	pop	{r4, pc}
  402d0e:	bf00      	nop
  402d10:	20000b2c 	.word	0x20000b2c
  402d14:	20000b44 	.word	0x20000b44
  402d18:	20000b50 	.word	0x20000b50
  402d1c:	20000b40 	.word	0x20000b40
  402d20:	20000b30 	.word	0x20000b30
  402d24:	00402525 	.word	0x00402525
  402d28:	00402271 	.word	0x00402271
  402d2c:	004024e1 	.word	0x004024e1
  402d30:	00402c55 	.word	0x00402c55

00402d34 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402d34:	b530      	push	{r4, r5, lr}
  402d36:	b09f      	sub	sp, #124	; 0x7c
  402d38:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402d3a:	282c      	cmp	r0, #44	; 0x2c
  402d3c:	d111      	bne.n	402d62 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402d3e:	2300      	movs	r3, #0
  402d40:	2204      	movs	r2, #4
  402d42:	a903      	add	r1, sp, #12
  402d44:	4628      	mov	r0, r5
  402d46:	4c90      	ldr	r4, [pc, #576]	; (402f88 <m2m_wifi_cb+0x254>)
  402d48:	47a0      	blx	r4
  402d4a:	2800      	cmp	r0, #0
  402d4c:	f040 8119 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402d50:	4b8e      	ldr	r3, [pc, #568]	; (402f8c <m2m_wifi_cb+0x258>)
  402d52:	681b      	ldr	r3, [r3, #0]
  402d54:	2b00      	cmp	r3, #0
  402d56:	f000 8114 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402d5a:	a903      	add	r1, sp, #12
  402d5c:	202c      	movs	r0, #44	; 0x2c
  402d5e:	4798      	blx	r3
  402d60:	e10f      	b.n	402f82 <m2m_wifi_cb+0x24e>
  402d62:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402d64:	281b      	cmp	r0, #27
  402d66:	d111      	bne.n	402d8c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402d68:	2300      	movs	r3, #0
  402d6a:	2208      	movs	r2, #8
  402d6c:	a903      	add	r1, sp, #12
  402d6e:	4628      	mov	r0, r5
  402d70:	4c85      	ldr	r4, [pc, #532]	; (402f88 <m2m_wifi_cb+0x254>)
  402d72:	47a0      	blx	r4
  402d74:	2800      	cmp	r0, #0
  402d76:	f040 8104 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402d7a:	4b84      	ldr	r3, [pc, #528]	; (402f8c <m2m_wifi_cb+0x258>)
  402d7c:	681b      	ldr	r3, [r3, #0]
  402d7e:	2b00      	cmp	r3, #0
  402d80:	f000 80ff 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402d84:	a903      	add	r1, sp, #12
  402d86:	201b      	movs	r0, #27
  402d88:	4798      	blx	r3
  402d8a:	e0fa      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402d8c:	2806      	cmp	r0, #6
  402d8e:	d111      	bne.n	402db4 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402d90:	2301      	movs	r3, #1
  402d92:	2230      	movs	r2, #48	; 0x30
  402d94:	a903      	add	r1, sp, #12
  402d96:	4628      	mov	r0, r5
  402d98:	4c7b      	ldr	r4, [pc, #492]	; (402f88 <m2m_wifi_cb+0x254>)
  402d9a:	47a0      	blx	r4
  402d9c:	2800      	cmp	r0, #0
  402d9e:	f040 80f0 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  402da2:	4b7a      	ldr	r3, [pc, #488]	; (402f8c <m2m_wifi_cb+0x258>)
  402da4:	681b      	ldr	r3, [r3, #0]
  402da6:	2b00      	cmp	r3, #0
  402da8:	f000 80eb 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402dac:	a903      	add	r1, sp, #12
  402dae:	2006      	movs	r0, #6
  402db0:	4798      	blx	r3
  402db2:	e0e6      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402db4:	280e      	cmp	r0, #14
  402db6:	f000 80e4 	beq.w	402f82 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402dba:	2832      	cmp	r0, #50	; 0x32
  402dbc:	d111      	bne.n	402de2 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402dbe:	2300      	movs	r3, #0
  402dc0:	2210      	movs	r2, #16
  402dc2:	a903      	add	r1, sp, #12
  402dc4:	4628      	mov	r0, r5
  402dc6:	4c70      	ldr	r4, [pc, #448]	; (402f88 <m2m_wifi_cb+0x254>)
  402dc8:	47a0      	blx	r4
  402dca:	2800      	cmp	r0, #0
  402dcc:	f040 80d9 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402dd0:	4b6e      	ldr	r3, [pc, #440]	; (402f8c <m2m_wifi_cb+0x258>)
  402dd2:	681b      	ldr	r3, [r3, #0]
  402dd4:	2b00      	cmp	r3, #0
  402dd6:	f000 80d4 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402dda:	a903      	add	r1, sp, #12
  402ddc:	2032      	movs	r0, #50	; 0x32
  402dde:	4798      	blx	r3
  402de0:	e0cf      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402de2:	282f      	cmp	r0, #47	; 0x2f
  402de4:	d116      	bne.n	402e14 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402de6:	2264      	movs	r2, #100	; 0x64
  402de8:	2100      	movs	r1, #0
  402dea:	a803      	add	r0, sp, #12
  402dec:	4b68      	ldr	r3, [pc, #416]	; (402f90 <m2m_wifi_cb+0x25c>)
  402dee:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402df0:	2300      	movs	r3, #0
  402df2:	2264      	movs	r2, #100	; 0x64
  402df4:	a903      	add	r1, sp, #12
  402df6:	4628      	mov	r0, r5
  402df8:	4c63      	ldr	r4, [pc, #396]	; (402f88 <m2m_wifi_cb+0x254>)
  402dfa:	47a0      	blx	r4
  402dfc:	2800      	cmp	r0, #0
  402dfe:	f040 80c0 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402e02:	4b62      	ldr	r3, [pc, #392]	; (402f8c <m2m_wifi_cb+0x258>)
  402e04:	681b      	ldr	r3, [r3, #0]
  402e06:	2b00      	cmp	r3, #0
  402e08:	f000 80bb 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402e0c:	a903      	add	r1, sp, #12
  402e0e:	202f      	movs	r0, #47	; 0x2f
  402e10:	4798      	blx	r3
  402e12:	e0b6      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402e14:	2834      	cmp	r0, #52	; 0x34
  402e16:	d120      	bne.n	402e5a <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402e18:	2300      	movs	r3, #0
  402e1a:	2204      	movs	r2, #4
  402e1c:	a903      	add	r1, sp, #12
  402e1e:	4628      	mov	r0, r5
  402e20:	4c59      	ldr	r4, [pc, #356]	; (402f88 <m2m_wifi_cb+0x254>)
  402e22:	47a0      	blx	r4
  402e24:	2800      	cmp	r0, #0
  402e26:	f040 80ac 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402e2a:	485a      	ldr	r0, [pc, #360]	; (402f94 <m2m_wifi_cb+0x260>)
  402e2c:	4c5a      	ldr	r4, [pc, #360]	; (402f98 <m2m_wifi_cb+0x264>)
  402e2e:	47a0      	blx	r4
  402e30:	9903      	ldr	r1, [sp, #12]
  402e32:	0e0b      	lsrs	r3, r1, #24
  402e34:	9300      	str	r3, [sp, #0]
  402e36:	f3c1 4307 	ubfx	r3, r1, #16, #8
  402e3a:	f3c1 2207 	ubfx	r2, r1, #8, #8
  402e3e:	b2c9      	uxtb	r1, r1
  402e40:	4856      	ldr	r0, [pc, #344]	; (402f9c <m2m_wifi_cb+0x268>)
  402e42:	47a0      	blx	r4
  402e44:	4856      	ldr	r0, [pc, #344]	; (402fa0 <m2m_wifi_cb+0x26c>)
  402e46:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  402e48:	4b50      	ldr	r3, [pc, #320]	; (402f8c <m2m_wifi_cb+0x258>)
  402e4a:	681b      	ldr	r3, [r3, #0]
  402e4c:	2b00      	cmp	r3, #0
  402e4e:	f000 8098 	beq.w	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402e52:	2100      	movs	r1, #0
  402e54:	2034      	movs	r0, #52	; 0x34
  402e56:	4798      	blx	r3
  402e58:	e093      	b.n	402f82 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402e5a:	2811      	cmp	r0, #17
  402e5c:	d116      	bne.n	402e8c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  402e5e:	2300      	movs	r3, #0
  402e60:	4a50      	ldr	r2, [pc, #320]	; (402fa4 <m2m_wifi_cb+0x270>)
  402e62:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402e64:	2204      	movs	r2, #4
  402e66:	a903      	add	r1, sp, #12
  402e68:	4628      	mov	r0, r5
  402e6a:	4c47      	ldr	r4, [pc, #284]	; (402f88 <m2m_wifi_cb+0x254>)
  402e6c:	47a0      	blx	r4
  402e6e:	2800      	cmp	r0, #0
  402e70:	f040 8087 	bne.w	402f82 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  402e74:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402e78:	4b4b      	ldr	r3, [pc, #300]	; (402fa8 <m2m_wifi_cb+0x274>)
  402e7a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402e7c:	4b43      	ldr	r3, [pc, #268]	; (402f8c <m2m_wifi_cb+0x258>)
  402e7e:	681b      	ldr	r3, [r3, #0]
  402e80:	2b00      	cmp	r3, #0
  402e82:	d07e      	beq.n	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402e84:	a903      	add	r1, sp, #12
  402e86:	2011      	movs	r0, #17
  402e88:	4798      	blx	r3
  402e8a:	e07a      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402e8c:	2813      	cmp	r0, #19
  402e8e:	d10f      	bne.n	402eb0 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402e90:	2300      	movs	r3, #0
  402e92:	222c      	movs	r2, #44	; 0x2c
  402e94:	a903      	add	r1, sp, #12
  402e96:	4628      	mov	r0, r5
  402e98:	4c3b      	ldr	r4, [pc, #236]	; (402f88 <m2m_wifi_cb+0x254>)
  402e9a:	47a0      	blx	r4
  402e9c:	2800      	cmp	r0, #0
  402e9e:	d170      	bne.n	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402ea0:	4b3a      	ldr	r3, [pc, #232]	; (402f8c <m2m_wifi_cb+0x258>)
  402ea2:	681b      	ldr	r3, [r3, #0]
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	d06c      	beq.n	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402ea8:	a903      	add	r1, sp, #12
  402eaa:	2013      	movs	r0, #19
  402eac:	4798      	blx	r3
  402eae:	e068      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402eb0:	2804      	cmp	r0, #4
  402eb2:	d10f      	bne.n	402ed4 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402eb4:	2300      	movs	r3, #0
  402eb6:	2204      	movs	r2, #4
  402eb8:	a91c      	add	r1, sp, #112	; 0x70
  402eba:	4628      	mov	r0, r5
  402ebc:	4c32      	ldr	r4, [pc, #200]	; (402f88 <m2m_wifi_cb+0x254>)
  402ebe:	47a0      	blx	r4
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d15e      	bne.n	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402ec4:	4b31      	ldr	r3, [pc, #196]	; (402f8c <m2m_wifi_cb+0x258>)
  402ec6:	681b      	ldr	r3, [r3, #0]
  402ec8:	2b00      	cmp	r3, #0
  402eca:	d05a      	beq.n	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402ecc:	a91c      	add	r1, sp, #112	; 0x70
  402ece:	2004      	movs	r0, #4
  402ed0:	4798      	blx	r3
  402ed2:	e056      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402ed4:	2865      	cmp	r0, #101	; 0x65
  402ed6:	d10f      	bne.n	402ef8 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402ed8:	2300      	movs	r3, #0
  402eda:	2204      	movs	r2, #4
  402edc:	a91c      	add	r1, sp, #112	; 0x70
  402ede:	4628      	mov	r0, r5
  402ee0:	4c29      	ldr	r4, [pc, #164]	; (402f88 <m2m_wifi_cb+0x254>)
  402ee2:	47a0      	blx	r4
  402ee4:	2800      	cmp	r0, #0
  402ee6:	d14c      	bne.n	402f82 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  402ee8:	4b28      	ldr	r3, [pc, #160]	; (402f8c <m2m_wifi_cb+0x258>)
  402eea:	681b      	ldr	r3, [r3, #0]
  402eec:	2b00      	cmp	r3, #0
  402eee:	d048      	beq.n	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402ef0:	a91c      	add	r1, sp, #112	; 0x70
  402ef2:	2065      	movs	r0, #101	; 0x65
  402ef4:	4798      	blx	r3
  402ef6:	e044      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402ef8:	2809      	cmp	r0, #9
  402efa:	d10f      	bne.n	402f1c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402efc:	2301      	movs	r3, #1
  402efe:	2264      	movs	r2, #100	; 0x64
  402f00:	a903      	add	r1, sp, #12
  402f02:	4628      	mov	r0, r5
  402f04:	4c20      	ldr	r4, [pc, #128]	; (402f88 <m2m_wifi_cb+0x254>)
  402f06:	47a0      	blx	r4
  402f08:	2800      	cmp	r0, #0
  402f0a:	d13a      	bne.n	402f82 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  402f0c:	4b1f      	ldr	r3, [pc, #124]	; (402f8c <m2m_wifi_cb+0x258>)
  402f0e:	681b      	ldr	r3, [r3, #0]
  402f10:	2b00      	cmp	r3, #0
  402f12:	d036      	beq.n	402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402f14:	a903      	add	r1, sp, #12
  402f16:	2009      	movs	r0, #9
  402f18:	4798      	blx	r3
  402f1a:	e032      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402f1c:	282a      	cmp	r0, #42	; 0x2a
  402f1e:	d10d      	bne.n	402f3c <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402f20:	2301      	movs	r3, #1
  402f22:	2204      	movs	r2, #4
  402f24:	a903      	add	r1, sp, #12
  402f26:	4628      	mov	r0, r5
  402f28:	4c17      	ldr	r4, [pc, #92]	; (402f88 <m2m_wifi_cb+0x254>)
  402f2a:	47a0      	blx	r4
  402f2c:	bb48      	cbnz	r0, 402f82 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  402f2e:	4b17      	ldr	r3, [pc, #92]	; (402f8c <m2m_wifi_cb+0x258>)
  402f30:	681b      	ldr	r3, [r3, #0]
  402f32:	b333      	cbz	r3, 402f82 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402f34:	a903      	add	r1, sp, #12
  402f36:	202a      	movs	r0, #42	; 0x2a
  402f38:	4798      	blx	r3
  402f3a:	e022      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402f3c:	2820      	cmp	r0, #32
  402f3e:	d115      	bne.n	402f6c <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402f40:	2300      	movs	r3, #0
  402f42:	2208      	movs	r2, #8
  402f44:	a903      	add	r1, sp, #12
  402f46:	4628      	mov	r0, r5
  402f48:	4c0f      	ldr	r4, [pc, #60]	; (402f88 <m2m_wifi_cb+0x254>)
  402f4a:	47a0      	blx	r4
  402f4c:	b9c8      	cbnz	r0, 402f82 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402f4e:	2301      	movs	r3, #1
  402f50:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402f54:	9903      	ldr	r1, [sp, #12]
  402f56:	f105 0008 	add.w	r0, r5, #8
  402f5a:	47a0      	blx	r4
  402f5c:	b988      	cbnz	r0, 402f82 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  402f5e:	4b0b      	ldr	r3, [pc, #44]	; (402f8c <m2m_wifi_cb+0x258>)
  402f60:	681b      	ldr	r3, [r3, #0]
  402f62:	b173      	cbz	r3, 402f82 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402f64:	a903      	add	r1, sp, #12
  402f66:	2020      	movs	r0, #32
  402f68:	4798      	blx	r3
  402f6a:	e00a      	b.n	402f82 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402f6c:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402f70:	490e      	ldr	r1, [pc, #56]	; (402fac <m2m_wifi_cb+0x278>)
  402f72:	480f      	ldr	r0, [pc, #60]	; (402fb0 <m2m_wifi_cb+0x27c>)
  402f74:	4d08      	ldr	r5, [pc, #32]	; (402f98 <m2m_wifi_cb+0x264>)
  402f76:	47a8      	blx	r5
  402f78:	4621      	mov	r1, r4
  402f7a:	480e      	ldr	r0, [pc, #56]	; (402fb4 <m2m_wifi_cb+0x280>)
  402f7c:	47a8      	blx	r5
  402f7e:	4808      	ldr	r0, [pc, #32]	; (402fa0 <m2m_wifi_cb+0x26c>)
  402f80:	47a8      	blx	r5
	}
}
  402f82:	b01f      	add	sp, #124	; 0x7c
  402f84:	bd30      	pop	{r4, r5, pc}
  402f86:	bf00      	nop
  402f88:	00402b49 	.word	0x00402b49
  402f8c:	20000b54 	.word	0x20000b54
  402f90:	004024b5 	.word	0x004024b5
  402f94:	00411dec 	.word	0x00411dec
  402f98:	00408a5d 	.word	0x00408a5d
  402f9c:	00411df8 	.word	0x00411df8
  402fa0:	00411b24 	.word	0x00411b24
  402fa4:	20000b58 	.word	0x20000b58
  402fa8:	20000b59 	.word	0x20000b59
  402fac:	00411dc0 	.word	0x00411dc0
  402fb0:	00411afc 	.word	0x00411afc
  402fb4:	00411e18 	.word	0x00411e18

00402fb8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fba:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402fbc:	2301      	movs	r3, #1
  402fbe:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402fc2:	2800      	cmp	r0, #0
  402fc4:	d04e      	beq.n	403064 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402fc6:	6802      	ldr	r2, [r0, #0]
  402fc8:	4b29      	ldr	r3, [pc, #164]	; (403070 <m2m_wifi_init+0xb8>)
  402fca:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402fcc:	2200      	movs	r2, #0
  402fce:	4b29      	ldr	r3, [pc, #164]	; (403074 <m2m_wifi_init+0xbc>)
  402fd0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402fd2:	f10d 0007 	add.w	r0, sp, #7
  402fd6:	4b28      	ldr	r3, [pc, #160]	; (403078 <m2m_wifi_init+0xc0>)
  402fd8:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402fda:	4604      	mov	r4, r0
  402fdc:	2800      	cmp	r0, #0
  402fde:	d143      	bne.n	403068 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  402fe0:	4b26      	ldr	r3, [pc, #152]	; (40307c <m2m_wifi_init+0xc4>)
  402fe2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402fe4:	4604      	mov	r4, r0
  402fe6:	2800      	cmp	r0, #0
  402fe8:	d138      	bne.n	40305c <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402fea:	4925      	ldr	r1, [pc, #148]	; (403080 <m2m_wifi_init+0xc8>)
  402fec:	2001      	movs	r0, #1
  402fee:	4b25      	ldr	r3, [pc, #148]	; (403084 <m2m_wifi_init+0xcc>)
  402ff0:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  402ff2:	a802      	add	r0, sp, #8
  402ff4:	4b24      	ldr	r3, [pc, #144]	; (403088 <m2m_wifi_init+0xd0>)
  402ff6:	4798      	blx	r3
  402ff8:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402ffa:	4f24      	ldr	r7, [pc, #144]	; (40308c <m2m_wifi_init+0xd4>)
  402ffc:	4638      	mov	r0, r7
  402ffe:	4d24      	ldr	r5, [pc, #144]	; (403090 <m2m_wifi_init+0xd8>)
  403000:	47a8      	blx	r5
  403002:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403006:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40300a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40300e:	4821      	ldr	r0, [pc, #132]	; (403094 <m2m_wifi_init+0xdc>)
  403010:	47a8      	blx	r5
  403012:	4e21      	ldr	r6, [pc, #132]	; (403098 <m2m_wifi_init+0xe0>)
  403014:	4630      	mov	r0, r6
  403016:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  403018:	4638      	mov	r0, r7
  40301a:	47a8      	blx	r5
  40301c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403020:	f89d 2010 	ldrb.w	r2, [sp, #16]
  403024:	f89d 100f 	ldrb.w	r1, [sp, #15]
  403028:	481c      	ldr	r0, [pc, #112]	; (40309c <m2m_wifi_init+0xe4>)
  40302a:	47a8      	blx	r5
  40302c:	4630      	mov	r0, r6
  40302e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  403030:	4638      	mov	r0, r7
  403032:	47a8      	blx	r5
  403034:	2300      	movs	r3, #0
  403036:	2203      	movs	r2, #3
  403038:	2113      	movs	r1, #19
  40303a:	4819      	ldr	r0, [pc, #100]	; (4030a0 <m2m_wifi_init+0xe8>)
  40303c:	47a8      	blx	r5
  40303e:	4630      	mov	r0, r6
  403040:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  403042:	f114 0f0d 	cmn.w	r4, #13
  403046:	d10f      	bne.n	403068 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  403048:	f240 12d5 	movw	r2, #469	; 0x1d5
  40304c:	4915      	ldr	r1, [pc, #84]	; (4030a4 <m2m_wifi_init+0xec>)
  40304e:	4816      	ldr	r0, [pc, #88]	; (4030a8 <m2m_wifi_init+0xf0>)
  403050:	47a8      	blx	r5
  403052:	4816      	ldr	r0, [pc, #88]	; (4030ac <m2m_wifi_init+0xf4>)
  403054:	47a8      	blx	r5
  403056:	4630      	mov	r0, r6
  403058:	47a8      	blx	r5
  40305a:	e005      	b.n	403068 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  40305c:	2000      	movs	r0, #0
  40305e:	4b14      	ldr	r3, [pc, #80]	; (4030b0 <m2m_wifi_init+0xf8>)
  403060:	4798      	blx	r3
  403062:	e001      	b.n	403068 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  403064:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  403068:	4620      	mov	r0, r4
  40306a:	b00b      	add	sp, #44	; 0x2c
  40306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40306e:	bf00      	nop
  403070:	20000b54 	.word	0x20000b54
  403074:	20000b58 	.word	0x20000b58
  403078:	00403a19 	.word	0x00403a19
  40307c:	00402ce5 	.word	0x00402ce5
  403080:	00402d35 	.word	0x00402d35
  403084:	00402c55 	.word	0x00402c55
  403088:	0040396d 	.word	0x0040396d
  40308c:	00411dec 	.word	0x00411dec
  403090:	00408a5d 	.word	0x00408a5d
  403094:	00411ed0 	.word	0x00411ed0
  403098:	00411b24 	.word	0x00411b24
  40309c:	00411eec 	.word	0x00411eec
  4030a0:	00411f08 	.word	0x00411f08
  4030a4:	00411ddc 	.word	0x00411ddc
  4030a8:	00411afc 	.word	0x00411afc
  4030ac:	00411f24 	.word	0x00411f24
  4030b0:	00403ae1 	.word	0x00403ae1

004030b4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4030b4:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4030b6:	4b01      	ldr	r3, [pc, #4]	; (4030bc <m2m_wifi_handle_events+0x8>)
  4030b8:	4798      	blx	r3
}
  4030ba:	bd08      	pop	{r3, pc}
  4030bc:	00402829 	.word	0x00402829

004030c0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4030c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030c4:	b0a0      	sub	sp, #128	; 0x80
  4030c6:	4680      	mov	r8, r0
  4030c8:	460d      	mov	r5, r1
  4030ca:	4614      	mov	r4, r2
  4030cc:	461e      	mov	r6, r3
  4030ce:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4030d2:	2a01      	cmp	r2, #1
  4030d4:	d045      	beq.n	403162 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  4030d6:	b963      	cbnz	r3, 4030f2 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  4030d8:	f240 2203 	movw	r2, #515	; 0x203
  4030dc:	497a      	ldr	r1, [pc, #488]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  4030de:	487b      	ldr	r0, [pc, #492]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  4030e0:	4c7b      	ldr	r4, [pc, #492]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  4030e2:	47a0      	blx	r4
  4030e4:	487b      	ldr	r0, [pc, #492]	; (4032d4 <m2m_wifi_connect_sc+0x214>)
  4030e6:	47a0      	blx	r4
  4030e8:	487b      	ldr	r0, [pc, #492]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  4030ea:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4030ec:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4030f0:	e0e7      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4030f2:	2a02      	cmp	r2, #2
  4030f4:	d135      	bne.n	403162 <m2m_wifi_connect_sc+0xa2>
  4030f6:	4618      	mov	r0, r3
  4030f8:	4b78      	ldr	r3, [pc, #480]	; (4032dc <m2m_wifi_connect_sc+0x21c>)
  4030fa:	4798      	blx	r3
  4030fc:	2840      	cmp	r0, #64	; 0x40
  4030fe:	d130      	bne.n	403162 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  403100:	7833      	ldrb	r3, [r6, #0]
  403102:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403106:	b2d2      	uxtb	r2, r2
  403108:	2a36      	cmp	r2, #54	; 0x36
  40310a:	d81b      	bhi.n	403144 <m2m_wifi_connect_sc+0x84>
  40310c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  403110:	b2d2      	uxtb	r2, r2
  403112:	2a06      	cmp	r2, #6
  403114:	d916      	bls.n	403144 <m2m_wifi_connect_sc+0x84>
  403116:	3b47      	subs	r3, #71	; 0x47
  403118:	b2db      	uxtb	r3, r3
  40311a:	2b19      	cmp	r3, #25
  40311c:	d912      	bls.n	403144 <m2m_wifi_connect_sc+0x84>
  40311e:	4631      	mov	r1, r6
  403120:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  403124:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403128:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40312c:	b2d2      	uxtb	r2, r2
  40312e:	2a36      	cmp	r2, #54	; 0x36
  403130:	d808      	bhi.n	403144 <m2m_wifi_connect_sc+0x84>
  403132:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  403136:	b2d2      	uxtb	r2, r2
  403138:	2a06      	cmp	r2, #6
  40313a:	d903      	bls.n	403144 <m2m_wifi_connect_sc+0x84>
  40313c:	3b47      	subs	r3, #71	; 0x47
  40313e:	b2db      	uxtb	r3, r3
  403140:	2b19      	cmp	r3, #25
  403142:	d80c      	bhi.n	40315e <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  403144:	f240 220f 	movw	r2, #527	; 0x20f
  403148:	495f      	ldr	r1, [pc, #380]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  40314a:	4860      	ldr	r0, [pc, #384]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  40314c:	4c60      	ldr	r4, [pc, #384]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  40314e:	47a0      	blx	r4
  403150:	4863      	ldr	r0, [pc, #396]	; (4032e0 <m2m_wifi_connect_sc+0x220>)
  403152:	47a0      	blx	r4
  403154:	4860      	ldr	r0, [pc, #384]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  403156:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  403158:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40315c:	e0b1      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  40315e:	4281      	cmp	r1, r0
  403160:	d1e0      	bne.n	403124 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  403162:	1e6b      	subs	r3, r5, #1
  403164:	b2db      	uxtb	r3, r3
  403166:	2b1f      	cmp	r3, #31
  403168:	d90c      	bls.n	403184 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  40316a:	f240 2219 	movw	r2, #537	; 0x219
  40316e:	4956      	ldr	r1, [pc, #344]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  403170:	4856      	ldr	r0, [pc, #344]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  403172:	4c57      	ldr	r4, [pc, #348]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  403174:	47a0      	blx	r4
  403176:	485b      	ldr	r0, [pc, #364]	; (4032e4 <m2m_wifi_connect_sc+0x224>)
  403178:	47a0      	blx	r4
  40317a:	4857      	ldr	r0, [pc, #348]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  40317c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40317e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403182:	e09e      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
  403184:	2f0d      	cmp	r7, #13
  403186:	d90e      	bls.n	4031a6 <m2m_wifi_connect_sc+0xe6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  403188:	2fff      	cmp	r7, #255	; 0xff
  40318a:	d00c      	beq.n	4031a6 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  40318c:	f240 2222 	movw	r2, #546	; 0x222
  403190:	494d      	ldr	r1, [pc, #308]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  403192:	484e      	ldr	r0, [pc, #312]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  403194:	4c4e      	ldr	r4, [pc, #312]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  403196:	47a0      	blx	r4
  403198:	4853      	ldr	r0, [pc, #332]	; (4032e8 <m2m_wifi_connect_sc+0x228>)
  40319a:	47a0      	blx	r4
  40319c:	484e      	ldr	r0, [pc, #312]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  40319e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4031a0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4031a4:	e08d      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4031a6:	462a      	mov	r2, r5
  4031a8:	4641      	mov	r1, r8
  4031aa:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4031ae:	4b4f      	ldr	r3, [pc, #316]	; (4032ec <m2m_wifi_connect_sc+0x22c>)
  4031b0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4031b2:	ab20      	add	r3, sp, #128	; 0x80
  4031b4:	441d      	add	r5, r3
  4031b6:	2300      	movs	r3, #0
  4031b8:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4031bc:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4031c0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4031c4:	3300      	adds	r3, #0
  4031c6:	bf18      	it	ne
  4031c8:	2301      	movne	r3, #1
  4031ca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4031ce:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4031d2:	2c03      	cmp	r4, #3
  4031d4:	d138      	bne.n	403248 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4031d6:	7833      	ldrb	r3, [r6, #0]
  4031d8:	3b01      	subs	r3, #1
  4031da:	b2db      	uxtb	r3, r3
  4031dc:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4031e0:	2b03      	cmp	r3, #3
  4031e2:	d90e      	bls.n	403202 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4031e4:	f240 2239 	movw	r2, #569	; 0x239
  4031e8:	4937      	ldr	r1, [pc, #220]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  4031ea:	4838      	ldr	r0, [pc, #224]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  4031ec:	4c38      	ldr	r4, [pc, #224]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  4031ee:	47a0      	blx	r4
  4031f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4031f4:	483e      	ldr	r0, [pc, #248]	; (4032f0 <m2m_wifi_connect_sc+0x230>)
  4031f6:	47a0      	blx	r4
  4031f8:	4837      	ldr	r0, [pc, #220]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  4031fa:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4031fc:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403200:	e05f      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403202:	7872      	ldrb	r2, [r6, #1]
  403204:	1e53      	subs	r3, r2, #1
  403206:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40320a:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40320e:	2b0b      	cmp	r3, #11
  403210:	d00e      	beq.n	403230 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  403212:	f44f 7210 	mov.w	r2, #576	; 0x240
  403216:	492c      	ldr	r1, [pc, #176]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  403218:	482c      	ldr	r0, [pc, #176]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  40321a:	4c2d      	ldr	r4, [pc, #180]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  40321c:	47a0      	blx	r4
  40321e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  403222:	4834      	ldr	r0, [pc, #208]	; (4032f4 <m2m_wifi_connect_sc+0x234>)
  403224:	47a0      	blx	r4
  403226:	482c      	ldr	r0, [pc, #176]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  403228:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40322a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40322e:	e048      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403230:	1cb1      	adds	r1, r6, #2
  403232:	f10d 0016 	add.w	r0, sp, #22
  403236:	4b2d      	ldr	r3, [pc, #180]	; (4032ec <m2m_wifi_connect_sc+0x22c>)
  403238:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40323a:	7873      	ldrb	r3, [r6, #1]
  40323c:	aa20      	add	r2, sp, #128	; 0x80
  40323e:	4413      	add	r3, r2
  403240:	2200      	movs	r2, #0
  403242:	f803 2c6a 	strb.w	r2, [r3, #-106]
  403246:	e032      	b.n	4032ae <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  403248:	2c02      	cmp	r4, #2
  40324a:	d119      	bne.n	403280 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  40324c:	4630      	mov	r0, r6
  40324e:	4b23      	ldr	r3, [pc, #140]	; (4032dc <m2m_wifi_connect_sc+0x21c>)
  403250:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  403252:	1e43      	subs	r3, r0, #1
  403254:	b29b      	uxth	r3, r3
  403256:	2b3f      	cmp	r3, #63	; 0x3f
  403258:	d90c      	bls.n	403274 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  40325a:	f240 224f 	movw	r2, #591	; 0x24f
  40325e:	491a      	ldr	r1, [pc, #104]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  403260:	481a      	ldr	r0, [pc, #104]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  403262:	4c1b      	ldr	r4, [pc, #108]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  403264:	47a0      	blx	r4
  403266:	4824      	ldr	r0, [pc, #144]	; (4032f8 <m2m_wifi_connect_sc+0x238>)
  403268:	47a0      	blx	r4
  40326a:	481b      	ldr	r0, [pc, #108]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  40326c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40326e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403272:	e026      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  403274:	1c42      	adds	r2, r0, #1
  403276:	4631      	mov	r1, r6
  403278:	a805      	add	r0, sp, #20
  40327a:	4b1c      	ldr	r3, [pc, #112]	; (4032ec <m2m_wifi_connect_sc+0x22c>)
  40327c:	4798      	blx	r3
  40327e:	e016      	b.n	4032ae <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403280:	2c04      	cmp	r4, #4
  403282:	d105      	bne.n	403290 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  403284:	223e      	movs	r2, #62	; 0x3e
  403286:	4631      	mov	r1, r6
  403288:	a805      	add	r0, sp, #20
  40328a:	4b18      	ldr	r3, [pc, #96]	; (4032ec <m2m_wifi_connect_sc+0x22c>)
  40328c:	4798      	blx	r3
  40328e:	e00e      	b.n	4032ae <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  403290:	2c01      	cmp	r4, #1
  403292:	d00c      	beq.n	4032ae <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  403294:	f240 225f 	movw	r2, #607	; 0x25f
  403298:	490b      	ldr	r1, [pc, #44]	; (4032c8 <m2m_wifi_connect_sc+0x208>)
  40329a:	480c      	ldr	r0, [pc, #48]	; (4032cc <m2m_wifi_connect_sc+0x20c>)
  40329c:	4c0c      	ldr	r4, [pc, #48]	; (4032d0 <m2m_wifi_connect_sc+0x210>)
  40329e:	47a0      	blx	r4
  4032a0:	4816      	ldr	r0, [pc, #88]	; (4032fc <m2m_wifi_connect_sc+0x23c>)
  4032a2:	47a0      	blx	r4
  4032a4:	480c      	ldr	r0, [pc, #48]	; (4032d8 <m2m_wifi_connect_sc+0x218>)
  4032a6:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4032a8:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4032ac:	e009      	b.n	4032c2 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4032ae:	2300      	movs	r3, #0
  4032b0:	9302      	str	r3, [sp, #8]
  4032b2:	9301      	str	r3, [sp, #4]
  4032b4:	9300      	str	r3, [sp, #0]
  4032b6:	236c      	movs	r3, #108	; 0x6c
  4032b8:	aa05      	add	r2, sp, #20
  4032ba:	2128      	movs	r1, #40	; 0x28
  4032bc:	2001      	movs	r0, #1
  4032be:	4c10      	ldr	r4, [pc, #64]	; (403300 <m2m_wifi_connect_sc+0x240>)
  4032c0:	47a0      	blx	r4

ERR1:
	return ret;
}
  4032c2:	b020      	add	sp, #128	; 0x80
  4032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032c8:	00411dac 	.word	0x00411dac
  4032cc:	00411afc 	.word	0x00411afc
  4032d0:	00408a5d 	.word	0x00408a5d
  4032d4:	00411f40 	.word	0x00411f40
  4032d8:	00411b24 	.word	0x00411b24
  4032dc:	004024c5 	.word	0x004024c5
  4032e0:	00411f54 	.word	0x00411f54
  4032e4:	00411f64 	.word	0x00411f64
  4032e8:	00411f78 	.word	0x00411f78
  4032ec:	004024a1 	.word	0x004024a1
  4032f0:	00411f84 	.word	0x00411f84
  4032f4:	00411fa0 	.word	0x00411fa0
  4032f8:	00411fbc 	.word	0x00411fbc
  4032fc:	00411fd8 	.word	0x00411fd8
  403300:	00402651 	.word	0x00402651

00403304 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  403304:	b510      	push	{r4, lr}
  403306:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403308:	2400      	movs	r4, #0
  40330a:	9401      	str	r4, [sp, #4]
  40330c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403310:	9400      	str	r4, [sp, #0]
  403312:	4c02      	ldr	r4, [pc, #8]	; (40331c <m2m_wifi_connect+0x18>)
  403314:	47a0      	blx	r4
}
  403316:	b002      	add	sp, #8
  403318:	bd10      	pop	{r4, pc}
  40331a:	bf00      	nop
  40331c:	004030c1 	.word	0x004030c1

00403320 <m2m_wifi_disconnect>:
ERR1:
	return ret;
}

sint8 m2m_wifi_disconnect(void)
{
  403320:	b510      	push	{r4, lr}
  403322:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
  403324:	2200      	movs	r2, #0
  403326:	9202      	str	r2, [sp, #8]
  403328:	9201      	str	r2, [sp, #4]
  40332a:	9200      	str	r2, [sp, #0]
  40332c:	4613      	mov	r3, r2
  40332e:	212b      	movs	r1, #43	; 0x2b
  403330:	2001      	movs	r0, #1
  403332:	4c02      	ldr	r4, [pc, #8]	; (40333c <m2m_wifi_disconnect+0x1c>)
  403334:	47a0      	blx	r4
}
  403336:	b004      	add	sp, #16
  403338:	bd10      	pop	{r4, pc}
  40333a:	bf00      	nop
  40333c:	00402651 	.word	0x00402651

00403340 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403340:	2000      	movs	r0, #0
  403342:	4770      	bx	lr

00403344 <m2m_wifi_p2p>:
	M2M_ERR("_PS_SERVER_ is not defined\n");
#endif
	return ret;
}
sint8 m2m_wifi_p2p(uint8 u8Channel)
{
  403344:	b510      	push	{r4, lr}
  403346:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;
	if((u8Channel == M2M_WIFI_CH_1) || (u8Channel == M2M_WIFI_CH_6) || (u8Channel == M2M_WIFI_CH_11))
  403348:	280a      	cmp	r0, #10
  40334a:	d812      	bhi.n	403372 <m2m_wifi_p2p+0x2e>
  40334c:	f240 4321 	movw	r3, #1057	; 0x421
  403350:	40c3      	lsrs	r3, r0
  403352:	f013 0f01 	tst.w	r3, #1
  403356:	d00c      	beq.n	403372 <m2m_wifi_p2p+0x2e>
	{
		tstrM2MP2PConnect strtmp;
		strtmp.u8ListenChannel = u8Channel;
  403358:	aa06      	add	r2, sp, #24
  40335a:	f802 0d04 	strb.w	r0, [r2, #-4]!
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_P2P, (uint8*)&strtmp, sizeof(tstrM2MP2PConnect), NULL, 0,0);
  40335e:	2300      	movs	r3, #0
  403360:	9302      	str	r3, [sp, #8]
  403362:	9301      	str	r3, [sp, #4]
  403364:	9300      	str	r3, [sp, #0]
  403366:	2304      	movs	r3, #4
  403368:	215b      	movs	r1, #91	; 0x5b
  40336a:	2001      	movs	r0, #1
  40336c:	4c08      	ldr	r4, [pc, #32]	; (403390 <m2m_wifi_p2p+0x4c>)
  40336e:	47a0      	blx	r4
}
sint8 m2m_wifi_p2p(uint8 u8Channel)
{
	sint8 ret = M2M_SUCCESS;
	if((u8Channel == M2M_WIFI_CH_1) || (u8Channel == M2M_WIFI_CH_6) || (u8Channel == M2M_WIFI_CH_11))
	{
  403370:	e00b      	b.n	40338a <m2m_wifi_p2p+0x46>
		strtmp.u8ListenChannel = u8Channel;
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_P2P, (uint8*)&strtmp, sizeof(tstrM2MP2PConnect), NULL, 0,0);
	}
	else
	{
		M2M_ERR("Listen channel should only be 1, 6 or 11\n");
  403372:	f44f 724b 	mov.w	r2, #812	; 0x32c
  403376:	4907      	ldr	r1, [pc, #28]	; (403394 <m2m_wifi_p2p+0x50>)
  403378:	4807      	ldr	r0, [pc, #28]	; (403398 <m2m_wifi_p2p+0x54>)
  40337a:	4c08      	ldr	r4, [pc, #32]	; (40339c <m2m_wifi_p2p+0x58>)
  40337c:	47a0      	blx	r4
  40337e:	4808      	ldr	r0, [pc, #32]	; (4033a0 <m2m_wifi_p2p+0x5c>)
  403380:	47a0      	blx	r4
  403382:	4808      	ldr	r0, [pc, #32]	; (4033a4 <m2m_wifi_p2p+0x60>)
  403384:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403386:	f06f 000b 	mvn.w	r0, #11
	}
	return ret;
}
  40338a:	b006      	add	sp, #24
  40338c:	bd10      	pop	{r4, pc}
  40338e:	bf00      	nop
  403390:	00402651 	.word	0x00402651
  403394:	00411dcc 	.word	0x00411dcc
  403398:	00411afc 	.word	0x00411afc
  40339c:	00408a5d 	.word	0x00408a5d
  4033a0:	00412088 	.word	0x00412088
  4033a4:	00411b24 	.word	0x00411b24

004033a8 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
  4033a8:	b510      	push	{r4, lr}
  4033aa:	b090      	sub	sp, #64	; 0x40
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
  4033ac:	2930      	cmp	r1, #48	; 0x30
  4033ae:	bf28      	it	cs
  4033b0:	2130      	movcs	r1, #48	; 0x30
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
  4033b2:	1c4a      	adds	r2, r1, #1
  4033b4:	b2d2      	uxtb	r2, r2
  4033b6:	4601      	mov	r1, r0
  4033b8:	a804      	add	r0, sp, #16
  4033ba:	4b07      	ldr	r3, [pc, #28]	; (4033d8 <m2m_wifi_set_device_name+0x30>)
  4033bc:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
  4033be:	2300      	movs	r3, #0
  4033c0:	9302      	str	r3, [sp, #8]
  4033c2:	9301      	str	r3, [sp, #4]
  4033c4:	9300      	str	r3, [sp, #0]
  4033c6:	2330      	movs	r3, #48	; 0x30
  4033c8:	aa04      	add	r2, sp, #16
  4033ca:	2107      	movs	r1, #7
  4033cc:	2001      	movs	r0, #1
  4033ce:	4c03      	ldr	r4, [pc, #12]	; (4033dc <m2m_wifi_set_device_name+0x34>)
  4033d0:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
  4033d2:	b010      	add	sp, #64	; 0x40
  4033d4:	bd10      	pop	{r4, pc}
  4033d6:	bf00      	nop
  4033d8:	004024a1 	.word	0x004024a1
  4033dc:	00402651 	.word	0x00402651

004033e0 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033e2:	b083      	sub	sp, #12
  4033e4:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4033e6:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4033ea:	4e0a      	ldr	r6, [pc, #40]	; (403414 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4033ec:	4f0a      	ldr	r7, [pc, #40]	; (403418 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4033ee:	4621      	mov	r1, r4
  4033f0:	4628      	mov	r0, r5
  4033f2:	47b0      	blx	r6
		if(val32 != 0) {		
  4033f4:	b154      	cbz	r4, 40340c <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4033f6:	a902      	add	r1, sp, #8
  4033f8:	2300      	movs	r3, #0
  4033fa:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4033fe:	4628      	mov	r0, r5
  403400:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  403402:	2800      	cmp	r0, #0
  403404:	d1f3      	bne.n	4033ee <chip_apply_conf+0xe>
				if(reg == val32)
  403406:	9b01      	ldr	r3, [sp, #4]
  403408:	429c      	cmp	r4, r3
  40340a:	d1f0      	bne.n	4033ee <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  40340c:	2000      	movs	r0, #0
  40340e:	b003      	add	sp, #12
  403410:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403412:	bf00      	nop
  403414:	004038a1 	.word	0x004038a1
  403418:	00403895 	.word	0x00403895

0040341c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  40341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403420:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  403422:	2001      	movs	r0, #1
  403424:	4b3d      	ldr	r3, [pc, #244]	; (40351c <nm_clkless_wake+0x100>)
  403426:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  403428:	a901      	add	r1, sp, #4
  40342a:	2001      	movs	r0, #1
  40342c:	4b3c      	ldr	r3, [pc, #240]	; (403520 <nm_clkless_wake+0x104>)
  40342e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403430:	4682      	mov	sl, r0
  403432:	b148      	cbz	r0, 403448 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  403434:	2272      	movs	r2, #114	; 0x72
  403436:	493b      	ldr	r1, [pc, #236]	; (403524 <nm_clkless_wake+0x108>)
  403438:	483b      	ldr	r0, [pc, #236]	; (403528 <nm_clkless_wake+0x10c>)
  40343a:	4c3c      	ldr	r4, [pc, #240]	; (40352c <nm_clkless_wake+0x110>)
  40343c:	47a0      	blx	r4
  40343e:	483c      	ldr	r0, [pc, #240]	; (403530 <nm_clkless_wake+0x114>)
  403440:	47a0      	blx	r4
  403442:	483c      	ldr	r0, [pc, #240]	; (403534 <nm_clkless_wake+0x118>)
  403444:	47a0      	blx	r4
		goto _WAKE_EXIT;
  403446:	e064      	b.n	403512 <nm_clkless_wake+0xf6>
  403448:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40344a:	f04f 0801 	mov.w	r8, #1
  40344e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 403548 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403452:	4d32      	ldr	r5, [pc, #200]	; (40351c <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403454:	4f38      	ldr	r7, [pc, #224]	; (403538 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  403456:	9901      	ldr	r1, [sp, #4]
  403458:	f041 0102 	orr.w	r1, r1, #2
  40345c:	4640      	mov	r0, r8
  40345e:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403460:	4640      	mov	r0, r8
  403462:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403464:	4669      	mov	r1, sp
  403466:	4b35      	ldr	r3, [pc, #212]	; (40353c <nm_clkless_wake+0x120>)
  403468:	6818      	ldr	r0, [r3, #0]
  40346a:	4b2d      	ldr	r3, [pc, #180]	; (403520 <nm_clkless_wake+0x104>)
  40346c:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40346e:	b918      	cbnz	r0, 403478 <nm_clkless_wake+0x5c>
  403470:	9b00      	ldr	r3, [sp, #0]
  403472:	b10b      	cbz	r3, 403478 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403474:	4e31      	ldr	r6, [pc, #196]	; (40353c <nm_clkless_wake+0x120>)
  403476:	e037      	b.n	4034e8 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  403478:	4e30      	ldr	r6, [pc, #192]	; (40353c <nm_clkless_wake+0x120>)
  40347a:	230e      	movs	r3, #14
  40347c:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  40347e:	4640      	mov	r0, r8
  403480:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403482:	4669      	mov	r1, sp
  403484:	6830      	ldr	r0, [r6, #0]
  403486:	4b26      	ldr	r3, [pc, #152]	; (403520 <nm_clkless_wake+0x104>)
  403488:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40348a:	b910      	cbnz	r0, 403492 <nm_clkless_wake+0x76>
  40348c:	9b00      	ldr	r3, [sp, #0]
  40348e:	2b00      	cmp	r3, #0
  403490:	d1f0      	bne.n	403474 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  403492:	4e2a      	ldr	r6, [pc, #168]	; (40353c <nm_clkless_wake+0x120>)
  403494:	2313      	movs	r3, #19
  403496:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  403498:	4640      	mov	r0, r8
  40349a:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40349c:	4669      	mov	r1, sp
  40349e:	6830      	ldr	r0, [r6, #0]
  4034a0:	4b1f      	ldr	r3, [pc, #124]	; (403520 <nm_clkless_wake+0x104>)
  4034a2:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  4034a4:	4606      	mov	r6, r0
  4034a6:	2800      	cmp	r0, #0
  4034a8:	d0e4      	beq.n	403474 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4034aa:	2296      	movs	r2, #150	; 0x96
  4034ac:	491d      	ldr	r1, [pc, #116]	; (403524 <nm_clkless_wake+0x108>)
  4034ae:	481e      	ldr	r0, [pc, #120]	; (403528 <nm_clkless_wake+0x10c>)
  4034b0:	4c1e      	ldr	r4, [pc, #120]	; (40352c <nm_clkless_wake+0x110>)
  4034b2:	47a0      	blx	r4
  4034b4:	4822      	ldr	r0, [pc, #136]	; (403540 <nm_clkless_wake+0x124>)
  4034b6:	47a0      	blx	r4
  4034b8:	481e      	ldr	r0, [pc, #120]	; (403534 <nm_clkless_wake+0x118>)
  4034ba:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034bc:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  4034be:	e028      	b.n	403512 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  4034c0:	2002      	movs	r0, #2
  4034c2:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034c4:	4669      	mov	r1, sp
  4034c6:	6830      	ldr	r0, [r6, #0]
  4034c8:	4b15      	ldr	r3, [pc, #84]	; (403520 <nm_clkless_wake+0x104>)
  4034ca:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  4034cc:	9b00      	ldr	r3, [sp, #0]
  4034ce:	f013 0f04 	tst.w	r3, #4
  4034d2:	d109      	bne.n	4034e8 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4034d4:	22aa      	movs	r2, #170	; 0xaa
  4034d6:	4913      	ldr	r1, [pc, #76]	; (403524 <nm_clkless_wake+0x108>)
  4034d8:	4813      	ldr	r0, [pc, #76]	; (403528 <nm_clkless_wake+0x10c>)
  4034da:	f8df b050 	ldr.w	fp, [pc, #80]	; 40352c <nm_clkless_wake+0x110>
  4034de:	47d8      	blx	fp
  4034e0:	4818      	ldr	r0, [pc, #96]	; (403544 <nm_clkless_wake+0x128>)
  4034e2:	47d8      	blx	fp
  4034e4:	4813      	ldr	r0, [pc, #76]	; (403534 <nm_clkless_wake+0x118>)
  4034e6:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4034e8:	9b00      	ldr	r3, [sp, #0]
  4034ea:	f013 0f04 	tst.w	r3, #4
  4034ee:	d110      	bne.n	403512 <nm_clkless_wake+0xf6>
  4034f0:	3401      	adds	r4, #1
  4034f2:	fba7 2304 	umull	r2, r3, r7, r4
  4034f6:	085b      	lsrs	r3, r3, #1
  4034f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4034fc:	429c      	cmp	r4, r3
  4034fe:	d0df      	beq.n	4034c0 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  403500:	9901      	ldr	r1, [sp, #4]
  403502:	f041 0102 	orr.w	r1, r1, #2
  403506:	4640      	mov	r0, r8
  403508:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  40350a:	9b00      	ldr	r3, [sp, #0]
  40350c:	f013 0f04 	tst.w	r3, #4
  403510:	d0a1      	beq.n	403456 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  403512:	4650      	mov	r0, sl
  403514:	b003      	add	sp, #12
  403516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40351a:	bf00      	nop
  40351c:	004021c9 	.word	0x004021c9
  403520:	00403895 	.word	0x00403895
  403524:	00412114 	.word	0x00412114
  403528:	00411afc 	.word	0x00411afc
  40352c:	00408a5d 	.word	0x00408a5d
  403530:	00412124 	.word	0x00412124
  403534:	00411b24 	.word	0x00411b24
  403538:	aaaaaaab 	.word	0xaaaaaaab
  40353c:	20000018 	.word	0x20000018
  403540:	00412144 	.word	0x00412144
  403544:	00412164 	.word	0x00412164
  403548:	004038a1 	.word	0x004038a1

0040354c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40354c:	b500      	push	{lr}
  40354e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403550:	a901      	add	r1, sp, #4
  403552:	f241 4008 	movw	r0, #5128	; 0x1408
  403556:	4b15      	ldr	r3, [pc, #84]	; (4035ac <enable_interrupts+0x60>)
  403558:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40355a:	b9e0      	cbnz	r0, 403596 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  40355c:	9901      	ldr	r1, [sp, #4]
  40355e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403562:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403564:	f241 4008 	movw	r0, #5128	; 0x1408
  403568:	4b11      	ldr	r3, [pc, #68]	; (4035b0 <enable_interrupts+0x64>)
  40356a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40356c:	b9b0      	cbnz	r0, 40359c <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40356e:	a901      	add	r1, sp, #4
  403570:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403574:	4b0d      	ldr	r3, [pc, #52]	; (4035ac <enable_interrupts+0x60>)
  403576:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403578:	b998      	cbnz	r0, 4035a2 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40357a:	9901      	ldr	r1, [sp, #4]
  40357c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403580:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403582:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403586:	4b0a      	ldr	r3, [pc, #40]	; (4035b0 <enable_interrupts+0x64>)
  403588:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40358a:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  40358c:	bf14      	ite	ne
  40358e:	f06f 0005 	mvnne.w	r0, #5
  403592:	2000      	moveq	r0, #0
  403594:	e007      	b.n	4035a6 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  403596:	f06f 0005 	mvn.w	r0, #5
  40359a:	e004      	b.n	4035a6 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40359c:	f06f 0005 	mvn.w	r0, #5
  4035a0:	e001      	b.n	4035a6 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4035a2:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  4035a6:	b003      	add	sp, #12
  4035a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4035ac:	00403895 	.word	0x00403895
  4035b0:	004038a1 	.word	0x004038a1

004035b4 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4035b4:	b510      	push	{r4, lr}
  4035b6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4035b8:	4b24      	ldr	r3, [pc, #144]	; (40364c <nmi_get_chipid+0x98>)
  4035ba:	681c      	ldr	r4, [r3, #0]
  4035bc:	2c00      	cmp	r4, #0
  4035be:	d140      	bne.n	403642 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4035c0:	4619      	mov	r1, r3
  4035c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4035c6:	4b22      	ldr	r3, [pc, #136]	; (403650 <nmi_get_chipid+0x9c>)
  4035c8:	4798      	blx	r3
  4035ca:	b118      	cbz	r0, 4035d4 <nmi_get_chipid+0x20>
			chipid = 0;
  4035cc:	2200      	movs	r2, #0
  4035ce:	4b1f      	ldr	r3, [pc, #124]	; (40364c <nmi_get_chipid+0x98>)
  4035d0:	601a      	str	r2, [r3, #0]
			return 0;
  4035d2:	e038      	b.n	403646 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4035d4:	a901      	add	r1, sp, #4
  4035d6:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4035da:	4b1d      	ldr	r3, [pc, #116]	; (403650 <nmi_get_chipid+0x9c>)
  4035dc:	4798      	blx	r3
  4035de:	b118      	cbz	r0, 4035e8 <nmi_get_chipid+0x34>
			chipid = 0;
  4035e0:	2200      	movs	r2, #0
  4035e2:	4b1a      	ldr	r3, [pc, #104]	; (40364c <nmi_get_chipid+0x98>)
  4035e4:	601a      	str	r2, [r3, #0]
			return 0;
  4035e6:	e02e      	b.n	403646 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  4035e8:	4b18      	ldr	r3, [pc, #96]	; (40364c <nmi_get_chipid+0x98>)
  4035ea:	681b      	ldr	r3, [r3, #0]
  4035ec:	4a19      	ldr	r2, [pc, #100]	; (403654 <nmi_get_chipid+0xa0>)
  4035ee:	4293      	cmp	r3, r2
  4035f0:	d106      	bne.n	403600 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4035f2:	9b01      	ldr	r3, [sp, #4]
  4035f4:	2b01      	cmp	r3, #1
  4035f6:	d01d      	beq.n	403634 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4035f8:	3201      	adds	r2, #1
  4035fa:	4b14      	ldr	r3, [pc, #80]	; (40364c <nmi_get_chipid+0x98>)
  4035fc:	601a      	str	r2, [r3, #0]
  4035fe:	e019      	b.n	403634 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  403600:	4a15      	ldr	r2, [pc, #84]	; (403658 <nmi_get_chipid+0xa4>)
  403602:	4293      	cmp	r3, r2
  403604:	d109      	bne.n	40361a <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  403606:	9b01      	ldr	r3, [sp, #4]
  403608:	2b03      	cmp	r3, #3
  40360a:	d013      	beq.n	403634 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  40360c:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40360e:	bf0c      	ite	eq
  403610:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  403612:	4a12      	ldrne	r2, [pc, #72]	; (40365c <nmi_get_chipid+0xa8>)
  403614:	4b0d      	ldr	r3, [pc, #52]	; (40364c <nmi_get_chipid+0x98>)
  403616:	601a      	str	r2, [r3, #0]
  403618:	e00c      	b.n	403634 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  40361a:	4a11      	ldr	r2, [pc, #68]	; (403660 <nmi_get_chipid+0xac>)
  40361c:	4293      	cmp	r3, r2
  40361e:	d109      	bne.n	403634 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  403620:	490a      	ldr	r1, [pc, #40]	; (40364c <nmi_get_chipid+0x98>)
  403622:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  403626:	4b0a      	ldr	r3, [pc, #40]	; (403650 <nmi_get_chipid+0x9c>)
  403628:	4798      	blx	r3
  40362a:	b118      	cbz	r0, 403634 <nmi_get_chipid+0x80>
			chipid = 0;
  40362c:	2200      	movs	r2, #0
  40362e:	4b07      	ldr	r3, [pc, #28]	; (40364c <nmi_get_chipid+0x98>)
  403630:	601a      	str	r2, [r3, #0]
			return 0;
  403632:	e008      	b.n	403646 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  403634:	4a05      	ldr	r2, [pc, #20]	; (40364c <nmi_get_chipid+0x98>)
  403636:	6813      	ldr	r3, [r2, #0]
  403638:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40363c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  403640:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  403642:	4b02      	ldr	r3, [pc, #8]	; (40364c <nmi_get_chipid+0x98>)
  403644:	681c      	ldr	r4, [r3, #0]
}
  403646:	4620      	mov	r0, r4
  403648:	b002      	add	sp, #8
  40364a:	bd10      	pop	{r4, pc}
  40364c:	20000b5c 	.word	0x20000b5c
  403650:	00403895 	.word	0x00403895
  403654:	001002a0 	.word	0x001002a0
  403658:	001002b0 	.word	0x001002b0
  40365c:	001002b2 	.word	0x001002b2
  403660:	001000f0 	.word	0x001000f0

00403664 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403666:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403668:	f241 0514 	movw	r5, #4116	; 0x1014
  40366c:	4c24      	ldr	r4, [pc, #144]	; (403700 <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40366e:	4e25      	ldr	r6, [pc, #148]	; (403704 <wait_for_bootrom+0xa0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403670:	4628      	mov	r0, r5
  403672:	47a0      	blx	r4
		if (reg & 0x80000000) {
  403674:	2800      	cmp	r0, #0
  403676:	db02      	blt.n	40367e <wait_for_bootrom+0x1a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403678:	2001      	movs	r0, #1
  40367a:	47b0      	blx	r6
	}
  40367c:	e7f8      	b.n	403670 <wait_for_bootrom+0xc>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40367e:	4822      	ldr	r0, [pc, #136]	; (403708 <wait_for_bootrom+0xa4>)
  403680:	4b1f      	ldr	r3, [pc, #124]	; (403700 <wait_for_bootrom+0x9c>)
  403682:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  403684:	f010 0f01 	tst.w	r0, #1
  403688:	d109      	bne.n	40369e <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  40368a:	4e1e      	ldr	r6, [pc, #120]	; (403704 <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
  40368c:	4d1c      	ldr	r5, [pc, #112]	; (403700 <wait_for_bootrom+0x9c>)

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40368e:	4c1f      	ldr	r4, [pc, #124]	; (40370c <wait_for_bootrom+0xa8>)
		{
			nm_bsp_sleep(1);
  403690:	2001      	movs	r0, #1
  403692:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
  403694:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403698:	47a8      	blx	r5

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40369a:	42a0      	cmp	r0, r4
  40369c:	d1f8      	bne.n	403690 <wait_for_bootrom+0x2c>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40369e:	2f02      	cmp	r7, #2
  4036a0:	d10a      	bne.n	4036b8 <wait_for_bootrom+0x54>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4036a2:	491b      	ldr	r1, [pc, #108]	; (403710 <wait_for_bootrom+0xac>)
  4036a4:	481b      	ldr	r0, [pc, #108]	; (403714 <wait_for_bootrom+0xb0>)
  4036a6:	4c1c      	ldr	r4, [pc, #112]	; (403718 <wait_for_bootrom+0xb4>)
  4036a8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4036aa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4036ae:	f241 008c 	movw	r0, #4236	; 0x108c
  4036b2:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4036b4:	2400      	movs	r4, #0
  4036b6:	e00f      	b.n	4036d8 <wait_for_bootrom+0x74>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4036b8:	2f03      	cmp	r7, #3
  4036ba:	d109      	bne.n	4036d0 <wait_for_bootrom+0x6c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4036bc:	4914      	ldr	r1, [pc, #80]	; (403710 <wait_for_bootrom+0xac>)
  4036be:	4815      	ldr	r0, [pc, #84]	; (403714 <wait_for_bootrom+0xb0>)
  4036c0:	4c15      	ldr	r4, [pc, #84]	; (403718 <wait_for_bootrom+0xb4>)
  4036c2:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4036c4:	2100      	movs	r1, #0
  4036c6:	f241 008c 	movw	r0, #4236	; 0x108c
  4036ca:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4036cc:	2400      	movs	r4, #0
  4036ce:	e003      	b.n	4036d8 <wait_for_bootrom+0x74>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4036d0:	2f04      	cmp	r7, #4
  4036d2:	bf14      	ite	ne
  4036d4:	2400      	movne	r4, #0
  4036d6:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4036d8:	4b10      	ldr	r3, [pc, #64]	; (40371c <wait_for_bootrom+0xb8>)
  4036da:	4798      	blx	r3
  4036dc:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4036e0:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4036e4:	bf0c      	ite	eq
  4036e6:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4036ea:	4620      	movne	r0, r4
  4036ec:	4b0c      	ldr	r3, [pc, #48]	; (403720 <wait_for_bootrom+0xbc>)
  4036ee:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4036f0:	490c      	ldr	r1, [pc, #48]	; (403724 <wait_for_bootrom+0xc0>)
  4036f2:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4036f6:	4b08      	ldr	r3, [pc, #32]	; (403718 <wait_for_bootrom+0xb4>)
  4036f8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4036fa:	2000      	movs	r0, #0
  4036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4036fe:	bf00      	nop
  403700:	00403889 	.word	0x00403889
  403704:	004021c9 	.word	0x004021c9
  403708:	000207bc 	.word	0x000207bc
  40370c:	10add09e 	.word	0x10add09e
  403710:	3c1cd57d 	.word	0x3c1cd57d
  403714:	000207ac 	.word	0x000207ac
  403718:	004038a1 	.word	0x004038a1
  40371c:	004035b5 	.word	0x004035b5
  403720:	004033e1 	.word	0x004033e1
  403724:	ef522f61 	.word	0xef522f61

00403728 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403728:	b5f0      	push	{r4, r5, r6, r7, lr}
  40372a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  40372c:	f241 038c 	movw	r3, #4236	; 0x108c
  403730:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403732:	4b18      	ldr	r3, [pc, #96]	; (403794 <wait_for_firmware_start+0x6c>)
  403734:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403736:	3802      	subs	r0, #2
  403738:	b2c0      	uxtb	r0, r0
  40373a:	2801      	cmp	r0, #1
  40373c:	d810      	bhi.n	403760 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  40373e:	4b16      	ldr	r3, [pc, #88]	; (403798 <wait_for_firmware_start+0x70>)
  403740:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403742:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  403746:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40374a:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  40374e:	9300      	str	r3, [sp, #0]
  403750:	e006      	b.n	403760 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403752:	4638      	mov	r0, r7
  403754:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403756:	9801      	ldr	r0, [sp, #4]
  403758:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40375a:	3c01      	subs	r4, #1
  40375c:	d106      	bne.n	40376c <wait_for_firmware_start+0x44>
  40375e:	e013      	b.n	403788 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  403760:	f04f 34ff 	mov.w	r4, #4294967295
  403764:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403766:	2702      	movs	r7, #2
  403768:	4e0c      	ldr	r6, [pc, #48]	; (40379c <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40376a:	4d0d      	ldr	r5, [pc, #52]	; (4037a0 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  40376c:	9b00      	ldr	r3, [sp, #0]
  40376e:	4298      	cmp	r0, r3
  403770:	d1ef      	bne.n	403752 <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403772:	9a00      	ldr	r2, [sp, #0]
  403774:	4b07      	ldr	r3, [pc, #28]	; (403794 <wait_for_firmware_start+0x6c>)
  403776:	429a      	cmp	r2, r3
  403778:	d109      	bne.n	40378e <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  40377a:	2100      	movs	r1, #0
  40377c:	f241 008c 	movw	r0, #4236	; 0x108c
  403780:	4b08      	ldr	r3, [pc, #32]	; (4037a4 <wait_for_firmware_start+0x7c>)
  403782:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  403784:	2000      	movs	r0, #0
  403786:	e003      	b.n	403790 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403788:	f06f 0004 	mvn.w	r0, #4
  40378c:	e000      	b.n	403790 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40378e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403790:	b003      	add	sp, #12
  403792:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403794:	02532636 	.word	0x02532636
  403798:	000207ac 	.word	0x000207ac
  40379c:	004021c9 	.word	0x004021c9
  4037a0:	00403889 	.word	0x00403889
  4037a4:	004038a1 	.word	0x004038a1

004037a8 <chip_deinit>:

sint8 chip_deinit(void)
{
  4037a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037aa:	b083      	sub	sp, #12
	uint32 reg = 0;
  4037ac:	a902      	add	r1, sp, #8
  4037ae:	2300      	movs	r3, #0
  4037b0:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4037b4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4037b8:	4b24      	ldr	r3, [pc, #144]	; (40384c <chip_deinit+0xa4>)
  4037ba:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4037bc:	b148      	cbz	r0, 4037d2 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  4037be:	f240 222f 	movw	r2, #559	; 0x22f
  4037c2:	4923      	ldr	r1, [pc, #140]	; (403850 <chip_deinit+0xa8>)
  4037c4:	4823      	ldr	r0, [pc, #140]	; (403854 <chip_deinit+0xac>)
  4037c6:	4c24      	ldr	r4, [pc, #144]	; (403858 <chip_deinit+0xb0>)
  4037c8:	47a0      	blx	r4
  4037ca:	4824      	ldr	r0, [pc, #144]	; (40385c <chip_deinit+0xb4>)
  4037cc:	47a0      	blx	r4
  4037ce:	4824      	ldr	r0, [pc, #144]	; (403860 <chip_deinit+0xb8>)
  4037d0:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  4037d2:	9901      	ldr	r1, [sp, #4]
  4037d4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4037d8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4037da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4037de:	4b21      	ldr	r3, [pc, #132]	; (403864 <chip_deinit+0xbc>)
  4037e0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4037e2:	4605      	mov	r5, r0
  4037e4:	b158      	cbz	r0, 4037fe <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  4037e6:	f240 2235 	movw	r2, #565	; 0x235
  4037ea:	4919      	ldr	r1, [pc, #100]	; (403850 <chip_deinit+0xa8>)
  4037ec:	4819      	ldr	r0, [pc, #100]	; (403854 <chip_deinit+0xac>)
  4037ee:	4c1a      	ldr	r4, [pc, #104]	; (403858 <chip_deinit+0xb0>)
  4037f0:	47a0      	blx	r4
  4037f2:	481d      	ldr	r0, [pc, #116]	; (403868 <chip_deinit+0xc0>)
  4037f4:	47a0      	blx	r4
  4037f6:	481a      	ldr	r0, [pc, #104]	; (403860 <chip_deinit+0xb8>)
  4037f8:	47a0      	blx	r4
		return ret;
  4037fa:	4628      	mov	r0, r5
  4037fc:	e024      	b.n	403848 <chip_deinit+0xa0>
  4037fe:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403800:	4e12      	ldr	r6, [pc, #72]	; (40384c <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403802:	4f18      	ldr	r7, [pc, #96]	; (403864 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403804:	a901      	add	r1, sp, #4
  403806:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40380a:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  40380c:	4605      	mov	r5, r0
  40380e:	b158      	cbz	r0, 403828 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  403810:	f44f 720f 	mov.w	r2, #572	; 0x23c
  403814:	490e      	ldr	r1, [pc, #56]	; (403850 <chip_deinit+0xa8>)
  403816:	480f      	ldr	r0, [pc, #60]	; (403854 <chip_deinit+0xac>)
  403818:	4c0f      	ldr	r4, [pc, #60]	; (403858 <chip_deinit+0xb0>)
  40381a:	47a0      	blx	r4
  40381c:	4813      	ldr	r0, [pc, #76]	; (40386c <chip_deinit+0xc4>)
  40381e:	47a0      	blx	r4
  403820:	480f      	ldr	r0, [pc, #60]	; (403860 <chip_deinit+0xb8>)
  403822:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403824:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  403826:	e00f      	b.n	403848 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  403828:	9901      	ldr	r1, [sp, #4]
  40382a:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40382e:	d00a      	beq.n	403846 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  403830:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403834:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403836:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40383a:	47b8      	blx	r7
  40383c:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  40383e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403842:	d1df      	bne.n	403804 <chip_deinit+0x5c>
  403844:	e000      	b.n	403848 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403846:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  403848:	b003      	add	sp, #12
  40384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40384c:	00403895 	.word	0x00403895
  403850:	00412244 	.word	0x00412244
  403854:	00411afc 	.word	0x00411afc
  403858:	00408a5d 	.word	0x00408a5d
  40385c:	004121b0 	.word	0x004121b0
  403860:	00411b24 	.word	0x00411b24
  403864:	004038a1 	.word	0x004038a1
  403868:	004121cc 	.word	0x004121cc
  40386c:	004121e8 	.word	0x004121e8

00403870 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403870:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403872:	4b01      	ldr	r3, [pc, #4]	; (403878 <nm_bus_iface_init+0x8>)
  403874:	4798      	blx	r3

	return ret;
}
  403876:	bd08      	pop	{r3, pc}
  403878:	00402311 	.word	0x00402311

0040387c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40387c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40387e:	4b01      	ldr	r3, [pc, #4]	; (403884 <nm_bus_iface_deinit+0x8>)
  403880:	4798      	blx	r3

	return ret;
}
  403882:	bd08      	pop	{r3, pc}
  403884:	0040249d 	.word	0x0040249d

00403888 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403888:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40388a:	4b01      	ldr	r3, [pc, #4]	; (403890 <nm_read_reg+0x8>)
  40388c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40388e:	bd08      	pop	{r3, pc}
  403890:	004040d9 	.word	0x004040d9

00403894 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403894:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  403896:	4b01      	ldr	r3, [pc, #4]	; (40389c <nm_read_reg_with_ret+0x8>)
  403898:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40389a:	bd08      	pop	{r3, pc}
  40389c:	004040f1 	.word	0x004040f1

004038a0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4038a0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4038a2:	4b01      	ldr	r3, [pc, #4]	; (4038a8 <nm_write_reg+0x8>)
  4038a4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4038a6:	bd08      	pop	{r3, pc}
  4038a8:	00404109 	.word	0x00404109

004038ac <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4038ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038b0:	4607      	mov	r7, r0
  4038b2:	4689      	mov	r9, r1
  4038b4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4038b6:	4b13      	ldr	r3, [pc, #76]	; (403904 <nm_read_block+0x58>)
  4038b8:	f8b3 8000 	ldrh.w	r8, [r3]
  4038bc:	f1a8 0808 	sub.w	r8, r8, #8
  4038c0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4038c4:	4542      	cmp	r2, r8
  4038c6:	d808      	bhi.n	4038da <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4038c8:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4038ca:	b2aa      	uxth	r2, r5
  4038cc:	eb09 0106 	add.w	r1, r9, r6
  4038d0:	4638      	mov	r0, r7
  4038d2:	4b0d      	ldr	r3, [pc, #52]	; (403908 <nm_read_block+0x5c>)
  4038d4:	4798      	blx	r3
  4038d6:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4038d8:	e010      	b.n	4038fc <nm_read_block+0x50>
  4038da:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4038dc:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4038de:	f8df a028 	ldr.w	sl, [pc, #40]	; 403908 <nm_read_block+0x5c>
  4038e2:	4642      	mov	r2, r8
  4038e4:	eb09 0106 	add.w	r1, r9, r6
  4038e8:	4638      	mov	r0, r7
  4038ea:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4038ec:	4603      	mov	r3, r0
  4038ee:	b928      	cbnz	r0, 4038fc <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4038f0:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4038f2:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4038f4:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4038f6:	42a5      	cmp	r5, r4
  4038f8:	d8f3      	bhi.n	4038e2 <nm_read_block+0x36>
  4038fa:	e7e6      	b.n	4038ca <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4038fc:	4618      	mov	r0, r3
  4038fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403902:	bf00      	nop
  403904:	20000014 	.word	0x20000014
  403908:	0040422d 	.word	0x0040422d

0040390c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403910:	4607      	mov	r7, r0
  403912:	4689      	mov	r9, r1
  403914:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403916:	4b13      	ldr	r3, [pc, #76]	; (403964 <nm_write_block+0x58>)
  403918:	f8b3 8000 	ldrh.w	r8, [r3]
  40391c:	f1a8 0808 	sub.w	r8, r8, #8
  403920:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403924:	4542      	cmp	r2, r8
  403926:	d808      	bhi.n	40393a <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  403928:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40392a:	b2aa      	uxth	r2, r5
  40392c:	eb09 0106 	add.w	r1, r9, r6
  403930:	4638      	mov	r0, r7
  403932:	4b0d      	ldr	r3, [pc, #52]	; (403968 <nm_write_block+0x5c>)
  403934:	4798      	blx	r3
  403936:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  403938:	e010      	b.n	40395c <nm_write_block+0x50>
  40393a:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40393c:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40393e:	f8df a028 	ldr.w	sl, [pc, #40]	; 403968 <nm_write_block+0x5c>
  403942:	4642      	mov	r2, r8
  403944:	eb09 0106 	add.w	r1, r9, r6
  403948:	4638      	mov	r0, r7
  40394a:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40394c:	4603      	mov	r3, r0
  40394e:	b928      	cbnz	r0, 40395c <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  403950:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403952:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403954:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403956:	42a5      	cmp	r5, r4
  403958:	d8f3      	bhi.n	403942 <nm_write_block+0x36>
  40395a:	e7e6      	b.n	40392a <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  40395c:	4618      	mov	r0, r3
  40395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403962:	bf00      	nop
  403964:	20000014 	.word	0x20000014
  403968:	004042f9 	.word	0x004042f9

0040396c <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  40396c:	b530      	push	{r4, r5, lr}
  40396e:	b083      	sub	sp, #12
  403970:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  403972:	a902      	add	r1, sp, #8
  403974:	2300      	movs	r3, #0
  403976:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  40397a:	4823      	ldr	r0, [pc, #140]	; (403a08 <nm_get_firmware_info+0x9c>)
  40397c:	4b23      	ldr	r3, [pc, #140]	; (403a0c <nm_get_firmware_info+0xa0>)
  40397e:	4798      	blx	r3
  403980:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  403982:	9a01      	ldr	r2, [sp, #4]
  403984:	4b22      	ldr	r3, [pc, #136]	; (403a10 <nm_get_firmware_info+0xa4>)
  403986:	429a      	cmp	r2, r3
  403988:	d105      	bne.n	403996 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  40398a:	a901      	add	r1, sp, #4
  40398c:	f241 0048 	movw	r0, #4168	; 0x1048
  403990:	4b1e      	ldr	r3, [pc, #120]	; (403a0c <nm_get_firmware_info+0xa0>)
  403992:	4798      	blx	r3
  403994:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403996:	9b01      	ldr	r3, [sp, #4]
  403998:	0c1a      	lsrs	r2, r3, #16
  40399a:	1211      	asrs	r1, r2, #8
  40399c:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40399e:	f3c2 1103 	ubfx	r1, r2, #4, #4
  4039a2:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4039a4:	f002 020f 	and.w	r2, r2, #15
  4039a8:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4039aa:	121a      	asrs	r2, r3, #8
  4039ac:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4039ae:	f3c3 1203 	ubfx	r2, r3, #4, #4
  4039b2:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4039b4:	f003 030f 	and.w	r3, r3, #15
  4039b8:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4039ba:	4b16      	ldr	r3, [pc, #88]	; (403a14 <nm_get_firmware_info+0xa8>)
  4039bc:	4798      	blx	r3
  4039be:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4039c0:	7922      	ldrb	r2, [r4, #4]
  4039c2:	79a3      	ldrb	r3, [r4, #6]
  4039c4:	f003 030f 	and.w	r3, r3, #15
  4039c8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4039cc:	7963      	ldrb	r3, [r4, #5]
  4039ce:	011b      	lsls	r3, r3, #4
  4039d0:	b2db      	uxtb	r3, r3
  4039d2:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  4039d4:	79e1      	ldrb	r1, [r4, #7]
  4039d6:	7a62      	ldrb	r2, [r4, #9]
  4039d8:	f002 020f 	and.w	r2, r2, #15
  4039dc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  4039e0:	7a22      	ldrb	r2, [r4, #8]
  4039e2:	0112      	lsls	r2, r2, #4
  4039e4:	b2d2      	uxtb	r2, r2
  4039e6:	430a      	orrs	r2, r1
  4039e8:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4039ec:	428a      	cmp	r2, r1
  4039ee:	bf88      	it	hi
  4039f0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4039f4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4039f8:	4293      	cmp	r3, r2
	}
	return ret;
}
  4039fa:	bf8c      	ite	hi
  4039fc:	4628      	movhi	r0, r5
  4039fe:	f06f 000c 	mvnls.w	r0, #12
  403a02:	b003      	add	sp, #12
  403a04:	bd30      	pop	{r4, r5, pc}
  403a06:	bf00      	nop
  403a08:	000207ac 	.word	0x000207ac
  403a0c:	00403895 	.word	0x00403895
  403a10:	d75dc1c3 	.word	0xd75dc1c3
  403a14:	004035b5 	.word	0x004035b5

00403a18 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403a18:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403a1a:	b130      	cbz	r0, 403a2a <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  403a1c:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403a1e:	1e63      	subs	r3, r4, #1
  403a20:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403a22:	2b04      	cmp	r3, #4
  403a24:	bf28      	it	cs
  403a26:	2401      	movcs	r4, #1
  403a28:	e000      	b.n	403a2c <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403a2a:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  403a2c:	2000      	movs	r0, #0
  403a2e:	4b1d      	ldr	r3, [pc, #116]	; (403aa4 <nm_drv_init+0x8c>)
  403a30:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a32:	4605      	mov	r5, r0
  403a34:	b150      	cbz	r0, 403a4c <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  403a36:	f44f 7292 	mov.w	r2, #292	; 0x124
  403a3a:	491b      	ldr	r1, [pc, #108]	; (403aa8 <nm_drv_init+0x90>)
  403a3c:	481b      	ldr	r0, [pc, #108]	; (403aac <nm_drv_init+0x94>)
  403a3e:	4c1c      	ldr	r4, [pc, #112]	; (403ab0 <nm_drv_init+0x98>)
  403a40:	47a0      	blx	r4
  403a42:	481c      	ldr	r0, [pc, #112]	; (403ab4 <nm_drv_init+0x9c>)
  403a44:	47a0      	blx	r4
  403a46:	481c      	ldr	r0, [pc, #112]	; (403ab8 <nm_drv_init+0xa0>)
  403a48:	47a0      	blx	r4
		goto ERR1;
  403a4a:	e029      	b.n	403aa0 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403a4c:	481b      	ldr	r0, [pc, #108]	; (403abc <nm_drv_init+0xa4>)
  403a4e:	4d18      	ldr	r5, [pc, #96]	; (403ab0 <nm_drv_init+0x98>)
  403a50:	47a8      	blx	r5
  403a52:	4b1b      	ldr	r3, [pc, #108]	; (403ac0 <nm_drv_init+0xa8>)
  403a54:	4798      	blx	r3
  403a56:	4601      	mov	r1, r0
  403a58:	481a      	ldr	r0, [pc, #104]	; (403ac4 <nm_drv_init+0xac>)
  403a5a:	47a8      	blx	r5
  403a5c:	4816      	ldr	r0, [pc, #88]	; (403ab8 <nm_drv_init+0xa0>)
  403a5e:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403a60:	4b19      	ldr	r3, [pc, #100]	; (403ac8 <nm_drv_init+0xb0>)
  403a62:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403a64:	4620      	mov	r0, r4
  403a66:	4b19      	ldr	r3, [pc, #100]	; (403acc <nm_drv_init+0xb4>)
  403a68:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a6a:	4605      	mov	r5, r0
  403a6c:	b9b0      	cbnz	r0, 403a9c <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403a6e:	4620      	mov	r0, r4
  403a70:	4b17      	ldr	r3, [pc, #92]	; (403ad0 <nm_drv_init+0xb8>)
  403a72:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a74:	4605      	mov	r5, r0
  403a76:	b988      	cbnz	r0, 403a9c <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403a78:	3c02      	subs	r4, #2
  403a7a:	b2e4      	uxtb	r4, r4
  403a7c:	2c01      	cmp	r4, #1
  403a7e:	d90f      	bls.n	403aa0 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403a80:	4b14      	ldr	r3, [pc, #80]	; (403ad4 <nm_drv_init+0xbc>)
  403a82:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a84:	4605      	mov	r5, r0
  403a86:	b158      	cbz	r0, 403aa0 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  403a88:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403a8c:	4906      	ldr	r1, [pc, #24]	; (403aa8 <nm_drv_init+0x90>)
  403a8e:	4807      	ldr	r0, [pc, #28]	; (403aac <nm_drv_init+0x94>)
  403a90:	4c07      	ldr	r4, [pc, #28]	; (403ab0 <nm_drv_init+0x98>)
  403a92:	47a0      	blx	r4
  403a94:	4810      	ldr	r0, [pc, #64]	; (403ad8 <nm_drv_init+0xc0>)
  403a96:	47a0      	blx	r4
  403a98:	4807      	ldr	r0, [pc, #28]	; (403ab8 <nm_drv_init+0xa0>)
  403a9a:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403a9c:	4b0f      	ldr	r3, [pc, #60]	; (403adc <nm_drv_init+0xc4>)
  403a9e:	4798      	blx	r3
ERR1:
	return ret;
}
  403aa0:	4628      	mov	r0, r5
  403aa2:	bd38      	pop	{r3, r4, r5, pc}
  403aa4:	00403871 	.word	0x00403871
  403aa8:	004122fc 	.word	0x004122fc
  403aac:	00411afc 	.word	0x00411afc
  403ab0:	00408a5d 	.word	0x00408a5d
  403ab4:	00412250 	.word	0x00412250
  403ab8:	00411b24 	.word	0x00411b24
  403abc:	00411dec 	.word	0x00411dec
  403ac0:	004035b5 	.word	0x004035b5
  403ac4:	0041226c 	.word	0x0041226c
  403ac8:	00404121 	.word	0x00404121
  403acc:	00403665 	.word	0x00403665
  403ad0:	00403729 	.word	0x00403729
  403ad4:	0040354d 	.word	0x0040354d
  403ad8:	0041227c 	.word	0x0041227c
  403adc:	0040387d 	.word	0x0040387d

00403ae0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403ae0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403ae2:	4b19      	ldr	r3, [pc, #100]	; (403b48 <nm_drv_deinit+0x68>)
  403ae4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ae6:	b158      	cbz	r0, 403b00 <nm_drv_deinit+0x20>
  403ae8:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403aea:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403aee:	4917      	ldr	r1, [pc, #92]	; (403b4c <nm_drv_deinit+0x6c>)
  403af0:	4817      	ldr	r0, [pc, #92]	; (403b50 <nm_drv_deinit+0x70>)
  403af2:	4d18      	ldr	r5, [pc, #96]	; (403b54 <nm_drv_deinit+0x74>)
  403af4:	47a8      	blx	r5
  403af6:	4818      	ldr	r0, [pc, #96]	; (403b58 <nm_drv_deinit+0x78>)
  403af8:	47a8      	blx	r5
  403afa:	4818      	ldr	r0, [pc, #96]	; (403b5c <nm_drv_deinit+0x7c>)
  403afc:	47a8      	blx	r5
		goto ERR1;
  403afe:	e020      	b.n	403b42 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403b00:	2000      	movs	r0, #0
  403b02:	4b17      	ldr	r3, [pc, #92]	; (403b60 <nm_drv_deinit+0x80>)
  403b04:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b06:	4604      	mov	r4, r0
  403b08:	b150      	cbz	r0, 403b20 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403b0a:	f240 127b 	movw	r2, #379	; 0x17b
  403b0e:	490f      	ldr	r1, [pc, #60]	; (403b4c <nm_drv_deinit+0x6c>)
  403b10:	480f      	ldr	r0, [pc, #60]	; (403b50 <nm_drv_deinit+0x70>)
  403b12:	4d10      	ldr	r5, [pc, #64]	; (403b54 <nm_drv_deinit+0x74>)
  403b14:	47a8      	blx	r5
  403b16:	4813      	ldr	r0, [pc, #76]	; (403b64 <nm_drv_deinit+0x84>)
  403b18:	47a8      	blx	r5
  403b1a:	4810      	ldr	r0, [pc, #64]	; (403b5c <nm_drv_deinit+0x7c>)
  403b1c:	47a8      	blx	r5
		goto ERR1;
  403b1e:	e010      	b.n	403b42 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  403b20:	4b11      	ldr	r3, [pc, #68]	; (403b68 <nm_drv_deinit+0x88>)
  403b22:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b24:	4604      	mov	r4, r0
  403b26:	b150      	cbz	r0, 403b3e <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403b28:	f240 1281 	movw	r2, #385	; 0x181
  403b2c:	4907      	ldr	r1, [pc, #28]	; (403b4c <nm_drv_deinit+0x6c>)
  403b2e:	4808      	ldr	r0, [pc, #32]	; (403b50 <nm_drv_deinit+0x70>)
  403b30:	4d08      	ldr	r5, [pc, #32]	; (403b54 <nm_drv_deinit+0x74>)
  403b32:	47a8      	blx	r5
  403b34:	480d      	ldr	r0, [pc, #52]	; (403b6c <nm_drv_deinit+0x8c>)
  403b36:	47a8      	blx	r5
  403b38:	4808      	ldr	r0, [pc, #32]	; (403b5c <nm_drv_deinit+0x7c>)
  403b3a:	47a8      	blx	r5
		goto ERR1;
  403b3c:	e001      	b.n	403b42 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403b3e:	4b0c      	ldr	r3, [pc, #48]	; (403b70 <nm_drv_deinit+0x90>)
  403b40:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  403b42:	4620      	mov	r0, r4
  403b44:	bd38      	pop	{r3, r4, r5, pc}
  403b46:	bf00      	nop
  403b48:	004037a9 	.word	0x004037a9
  403b4c:	00412308 	.word	0x00412308
  403b50:	00411afc 	.word	0x00411afc
  403b54:	00408a5d 	.word	0x00408a5d
  403b58:	0041229c 	.word	0x0041229c
  403b5c:	00411b24 	.word	0x00411b24
  403b60:	00404df1 	.word	0x00404df1
  403b64:	004122bc 	.word	0x004122bc
  403b68:	0040387d 	.word	0x0040387d
  403b6c:	004122e0 	.word	0x004122e0
  403b70:	004040cd 	.word	0x004040cd

00403b74 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403b74:	b500      	push	{lr}
  403b76:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403b78:	2300      	movs	r3, #0
  403b7a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403b7c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403b7e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403b82:	a901      	add	r1, sp, #4
  403b84:	2003      	movs	r0, #3
  403b86:	4b02      	ldr	r3, [pc, #8]	; (403b90 <nmi_spi_read+0x1c>)
  403b88:	4798      	blx	r3
}
  403b8a:	b005      	add	sp, #20
  403b8c:	f85d fb04 	ldr.w	pc, [sp], #4
  403b90:	004023f5 	.word	0x004023f5

00403b94 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403b94:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b96:	b083      	sub	sp, #12
  403b98:	4605      	mov	r5, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
  403b9a:	28cf      	cmp	r0, #207	; 0xcf
  403b9c:	d004      	beq.n	403ba8 <spi_cmd_rsp+0x14>
  403b9e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403ba2:	b2db      	uxtb	r3, r3
  403ba4:	2b01      	cmp	r3, #1
  403ba6:	d806      	bhi.n	403bb6 <spi_cmd_rsp+0x22>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403ba8:	2101      	movs	r1, #1
  403baa:	f10d 0007 	add.w	r0, sp, #7
  403bae:	4b22      	ldr	r3, [pc, #136]	; (403c38 <spi_cmd_rsp+0xa4>)
  403bb0:	4798      	blx	r3
  403bb2:	2800      	cmp	r0, #0
  403bb4:	d13a      	bne.n	403c2c <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403bb6:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403bb8:	2701      	movs	r7, #1
  403bba:	4e1f      	ldr	r6, [pc, #124]	; (403c38 <spi_cmd_rsp+0xa4>)
  403bbc:	4639      	mov	r1, r7
  403bbe:	f10d 0007 	add.w	r0, sp, #7
  403bc2:	47b0      	blx	r6
  403bc4:	b158      	cbz	r0, 403bde <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403bc6:	f240 1227 	movw	r2, #295	; 0x127
  403bca:	491c      	ldr	r1, [pc, #112]	; (403c3c <spi_cmd_rsp+0xa8>)
  403bcc:	481c      	ldr	r0, [pc, #112]	; (403c40 <spi_cmd_rsp+0xac>)
  403bce:	4c1d      	ldr	r4, [pc, #116]	; (403c44 <spi_cmd_rsp+0xb0>)
  403bd0:	47a0      	blx	r4
  403bd2:	481d      	ldr	r0, [pc, #116]	; (403c48 <spi_cmd_rsp+0xb4>)
  403bd4:	47a0      	blx	r4
  403bd6:	481d      	ldr	r0, [pc, #116]	; (403c4c <spi_cmd_rsp+0xb8>)
  403bd8:	47a0      	blx	r4
			result = N_FAIL;
  403bda:	2000      	movs	r0, #0
			goto _fail_;
  403bdc:	e029      	b.n	403c32 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403be2:	42ab      	cmp	r3, r5
  403be4:	d005      	beq.n	403bf2 <spi_cmd_rsp+0x5e>
  403be6:	1e63      	subs	r3, r4, #1
  403be8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403bec:	d1e6      	bne.n	403bbc <spi_cmd_rsp+0x28>
  403bee:	240b      	movs	r4, #11
  403bf0:	e000      	b.n	403bf4 <spi_cmd_rsp+0x60>
  403bf2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403bf4:	2601      	movs	r6, #1
  403bf6:	4d10      	ldr	r5, [pc, #64]	; (403c38 <spi_cmd_rsp+0xa4>)
  403bf8:	4631      	mov	r1, r6
  403bfa:	f10d 0007 	add.w	r0, sp, #7
  403bfe:	47a8      	blx	r5
  403c00:	b158      	cbz	r0, 403c1a <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403c02:	f240 1235 	movw	r2, #309	; 0x135
  403c06:	490d      	ldr	r1, [pc, #52]	; (403c3c <spi_cmd_rsp+0xa8>)
  403c08:	480d      	ldr	r0, [pc, #52]	; (403c40 <spi_cmd_rsp+0xac>)
  403c0a:	4c0e      	ldr	r4, [pc, #56]	; (403c44 <spi_cmd_rsp+0xb0>)
  403c0c:	47a0      	blx	r4
  403c0e:	480e      	ldr	r0, [pc, #56]	; (403c48 <spi_cmd_rsp+0xb4>)
  403c10:	47a0      	blx	r4
  403c12:	480e      	ldr	r0, [pc, #56]	; (403c4c <spi_cmd_rsp+0xb8>)
  403c14:	47a0      	blx	r4
			result = N_FAIL;
  403c16:	2000      	movs	r0, #0
			goto _fail_;
  403c18:	e00b      	b.n	403c32 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403c1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c1e:	b13b      	cbz	r3, 403c30 <spi_cmd_rsp+0x9c>
  403c20:	1e63      	subs	r3, r4, #1
  403c22:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c26:	d1e7      	bne.n	403bf8 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  403c28:	2001      	movs	r0, #1
  403c2a:	e002      	b.n	403c32 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  403c2c:	2000      	movs	r0, #0
  403c2e:	e000      	b.n	403c32 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  403c30:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  403c32:	b003      	add	sp, #12
  403c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c36:	bf00      	nop
  403c38:	00403b75 	.word	0x00403b75
  403c3c:	00412820 	.word	0x00412820
  403c40:	00411afc 	.word	0x00411afc
  403c44:	00408a5d 	.word	0x00408a5d
  403c48:	00412364 	.word	0x00412364
  403c4c:	00411b24 	.word	0x00411b24

00403c50 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c54:	b083      	sub	sp, #12
  403c56:	4682      	mov	sl, r0
  403c58:	4689      	mov	r9, r1
  403c5a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403c5c:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c60:	4d35      	ldr	r5, [pc, #212]	; (403d38 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  403c62:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  403c66:	bf94      	ite	ls
  403c68:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  403c6c:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  403c70:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c72:	2601      	movs	r6, #1
  403c74:	4631      	mov	r1, r6
  403c76:	f10d 0003 	add.w	r0, sp, #3
  403c7a:	47a8      	blx	r5
  403c7c:	b158      	cbz	r0, 403c96 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403c7e:	f240 1257 	movw	r2, #343	; 0x157
  403c82:	492e      	ldr	r1, [pc, #184]	; (403d3c <spi_data_read+0xec>)
  403c84:	482e      	ldr	r0, [pc, #184]	; (403d40 <spi_data_read+0xf0>)
  403c86:	4c2f      	ldr	r4, [pc, #188]	; (403d44 <spi_data_read+0xf4>)
  403c88:	47a0      	blx	r4
  403c8a:	482f      	ldr	r0, [pc, #188]	; (403d48 <spi_data_read+0xf8>)
  403c8c:	47a0      	blx	r4
  403c8e:	482f      	ldr	r0, [pc, #188]	; (403d4c <spi_data_read+0xfc>)
  403c90:	47a0      	blx	r4
  403c92:	2000      	movs	r0, #0
  403c94:	e04d      	b.n	403d32 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  403c96:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403c9a:	091b      	lsrs	r3, r3, #4
  403c9c:	2b0f      	cmp	r3, #15
  403c9e:	d005      	beq.n	403cac <spi_data_read+0x5c>
  403ca0:	3c01      	subs	r4, #1
  403ca2:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  403ca4:	f1b4 3fff 	cmp.w	r4, #4294967295
  403ca8:	d1e4      	bne.n	403c74 <spi_data_read+0x24>
  403caa:	e001      	b.n	403cb0 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  403cac:	2c00      	cmp	r4, #0
  403cae:	dc0d      	bgt.n	403ccc <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403cb0:	f240 1263 	movw	r2, #355	; 0x163
  403cb4:	4921      	ldr	r1, [pc, #132]	; (403d3c <spi_data_read+0xec>)
  403cb6:	4822      	ldr	r0, [pc, #136]	; (403d40 <spi_data_read+0xf0>)
  403cb8:	4c22      	ldr	r4, [pc, #136]	; (403d44 <spi_data_read+0xf4>)
  403cba:	47a0      	blx	r4
  403cbc:	f89d 1003 	ldrb.w	r1, [sp, #3]
  403cc0:	4823      	ldr	r0, [pc, #140]	; (403d50 <spi_data_read+0x100>)
  403cc2:	47a0      	blx	r4
  403cc4:	4821      	ldr	r0, [pc, #132]	; (403d4c <spi_data_read+0xfc>)
  403cc6:	47a0      	blx	r4
			result = N_FAIL;
  403cc8:	2000      	movs	r0, #0
			break;
  403cca:	e032      	b.n	403d32 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403ccc:	b2bf      	uxth	r7, r7
  403cce:	4639      	mov	r1, r7
  403cd0:	eb0a 0008 	add.w	r0, sl, r8
  403cd4:	47a8      	blx	r5
  403cd6:	b158      	cbz	r0, 403cf0 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403cd8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403cdc:	4917      	ldr	r1, [pc, #92]	; (403d3c <spi_data_read+0xec>)
  403cde:	4818      	ldr	r0, [pc, #96]	; (403d40 <spi_data_read+0xf0>)
  403ce0:	4c18      	ldr	r4, [pc, #96]	; (403d44 <spi_data_read+0xf4>)
  403ce2:	47a0      	blx	r4
  403ce4:	481b      	ldr	r0, [pc, #108]	; (403d54 <spi_data_read+0x104>)
  403ce6:	47a0      	blx	r4
  403ce8:	4818      	ldr	r0, [pc, #96]	; (403d4c <spi_data_read+0xfc>)
  403cea:	47a0      	blx	r4
			result = N_FAIL;
  403cec:	2000      	movs	r0, #0
			break;
  403cee:	e020      	b.n	403d32 <spi_data_read+0xe2>
		}
		if(!clockless)
  403cf0:	f1bb 0f00 	cmp.w	fp, #0
  403cf4:	d112      	bne.n	403d1c <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  403cf6:	4b18      	ldr	r3, [pc, #96]	; (403d58 <spi_data_read+0x108>)
  403cf8:	781b      	ldrb	r3, [r3, #0]
  403cfa:	b97b      	cbnz	r3, 403d1c <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403cfc:	2102      	movs	r1, #2
  403cfe:	a801      	add	r0, sp, #4
  403d00:	47a8      	blx	r5
  403d02:	b158      	cbz	r0, 403d1c <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403d04:	f240 1277 	movw	r2, #375	; 0x177
  403d08:	490c      	ldr	r1, [pc, #48]	; (403d3c <spi_data_read+0xec>)
  403d0a:	480d      	ldr	r0, [pc, #52]	; (403d40 <spi_data_read+0xf0>)
  403d0c:	4c0d      	ldr	r4, [pc, #52]	; (403d44 <spi_data_read+0xf4>)
  403d0e:	47a0      	blx	r4
  403d10:	4812      	ldr	r0, [pc, #72]	; (403d5c <spi_data_read+0x10c>)
  403d12:	47a0      	blx	r4
  403d14:	480d      	ldr	r0, [pc, #52]	; (403d4c <spi_data_read+0xfc>)
  403d16:	47a0      	blx	r4
					result = N_FAIL;
  403d18:	2000      	movs	r0, #0
					break;
  403d1a:	e00a      	b.n	403d32 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  403d1c:	44b8      	add	r8, r7
  403d1e:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  403d22:	ebc7 0709 	rsb	r7, r7, r9
  403d26:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  403d2a:	f1b9 0f00 	cmp.w	r9, #0
  403d2e:	d198      	bne.n	403c62 <spi_data_read+0x12>
  403d30:	2001      	movs	r0, #1

	return result;
}
  403d32:	b003      	add	sp, #12
  403d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d38:	00403b75 	.word	0x00403b75
  403d3c:	00412938 	.word	0x00412938
  403d40:	00411afc 	.word	0x00411afc
  403d44:	00408a5d 	.word	0x00408a5d
  403d48:	00412398 	.word	0x00412398
  403d4c:	00411b24 	.word	0x00411b24
  403d50:	004123cc 	.word	0x004123cc
  403d54:	004123fc 	.word	0x004123fc
  403d58:	20000b60 	.word	0x20000b60
  403d5c:	00412430 	.word	0x00412430

00403d60 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  403d60:	b500      	push	{lr}
  403d62:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  403d64:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403d66:	2300      	movs	r3, #0
  403d68:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403d6a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403d6e:	a901      	add	r1, sp, #4
  403d70:	2003      	movs	r0, #3
  403d72:	4b02      	ldr	r3, [pc, #8]	; (403d7c <nmi_spi_write+0x1c>)
  403d74:	4798      	blx	r3
}
  403d76:	b005      	add	sp, #20
  403d78:	f85d fb04 	ldr.w	pc, [sp], #4
  403d7c:	004023f5 	.word	0x004023f5

00403d80 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  403d80:	b570      	push	{r4, r5, r6, lr}
  403d82:	b084      	sub	sp, #16
  403d84:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  403d88:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403d8c:	38c1      	subs	r0, #193	; 0xc1
  403d8e:	280e      	cmp	r0, #14
  403d90:	f200 80ae 	bhi.w	403ef0 <spi_cmd+0x170>
  403d94:	e8df f000 	tbb	[pc, r0]
  403d98:	125f3e3e 	.word	0x125f3e3e
  403d9c:	4d4d2c23 	.word	0x4d4d2c23
  403da0:	acac0878 	.word	0xacac0878
  403da4:	acac      	.short	0xacac
  403da6:	35          	.byte	0x35
  403da7:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  403da8:	0c0b      	lsrs	r3, r1, #16
  403daa:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403dae:	0a0b      	lsrs	r3, r1, #8
  403db0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403db4:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403db8:	2105      	movs	r1, #5
		break;
  403dba:	e0a4      	b.n	403f06 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  403dbc:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403dc0:	b914      	cbnz	r4, 403dc8 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  403dc2:	f88d 3005 	strb.w	r3, [sp, #5]
  403dc6:	e003      	b.n	403dd0 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  403dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403dcc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403dd0:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403dd4:	2300      	movs	r3, #0
  403dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403dda:	2105      	movs	r1, #5
		break;
  403ddc:	e093      	b.n	403f06 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  403dde:	2300      	movs	r3, #0
  403de0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403de4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403de8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403dec:	2105      	movs	r1, #5
		break;
  403dee:	e08a      	b.n	403f06 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  403df0:	2300      	movs	r3, #0
  403df2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403df6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403dfa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403dfe:	2105      	movs	r1, #5
		break;
  403e00:	e081      	b.n	403f06 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  403e02:	23ff      	movs	r3, #255	; 0xff
  403e04:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403e08:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403e0c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e10:	2105      	movs	r1, #5
		break;
  403e12:	e078      	b.n	403f06 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  403e14:	0c0a      	lsrs	r2, r1, #16
  403e16:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e1a:	0a0a      	lsrs	r2, r1, #8
  403e1c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403e20:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403e24:	0a1a      	lsrs	r2, r3, #8
  403e26:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403e2a:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403e2e:	2107      	movs	r1, #7
		break;
  403e30:	e069      	b.n	403f06 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  403e32:	0c0a      	lsrs	r2, r1, #16
  403e34:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e38:	0a0a      	lsrs	r2, r1, #8
  403e3a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403e3e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403e42:	0c1a      	lsrs	r2, r3, #16
  403e44:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403e48:	0a1a      	lsrs	r2, r3, #8
  403e4a:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403e4e:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403e52:	2108      	movs	r1, #8
		break;
  403e54:	e057      	b.n	403f06 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  403e56:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403e5a:	b914      	cbnz	r4, 403e62 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  403e5c:	f88d 3005 	strb.w	r3, [sp, #5]
  403e60:	e003      	b.n	403e6a <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  403e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403e66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403e6a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403e6e:	0e13      	lsrs	r3, r2, #24
  403e70:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403e74:	0c13      	lsrs	r3, r2, #16
  403e76:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403e7a:	0a13      	lsrs	r3, r2, #8
  403e7c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403e80:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403e84:	2108      	movs	r1, #8
		break;
  403e86:	e03e      	b.n	403f06 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  403e88:	0c0b      	lsrs	r3, r1, #16
  403e8a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e8e:	0a0b      	lsrs	r3, r1, #8
  403e90:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403e94:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403e98:	0e13      	lsrs	r3, r2, #24
  403e9a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403e9e:	0c13      	lsrs	r3, r2, #16
  403ea0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403ea4:	0a13      	lsrs	r3, r2, #8
  403ea6:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403eaa:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403eae:	2109      	movs	r1, #9
		break;
  403eb0:	e029      	b.n	403f06 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  403eb2:	f812 3b01 	ldrb.w	r3, [r2], #1
  403eb6:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403eba:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  403ebc:	4295      	cmp	r5, r2
  403ebe:	d1f8      	bne.n	403eb2 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403ec0:	ab04      	add	r3, sp, #16
  403ec2:	441e      	add	r6, r3
  403ec4:	0043      	lsls	r3, r0, #1
  403ec6:	f806 3c0c 	strb.w	r3, [r6, #-12]
  403eca:	e001      	b.n	403ed0 <spi_cmd+0x150>
		else
			len-=1;
  403ecc:	3901      	subs	r1, #1
  403ece:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403ed0:	a801      	add	r0, sp, #4
  403ed2:	4b10      	ldr	r3, [pc, #64]	; (403f14 <spi_cmd+0x194>)
  403ed4:	4798      	blx	r3
  403ed6:	b168      	cbz	r0, 403ef4 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403ed8:	f44f 7284 	mov.w	r2, #264	; 0x108
  403edc:	490e      	ldr	r1, [pc, #56]	; (403f18 <spi_cmd+0x198>)
  403ede:	480f      	ldr	r0, [pc, #60]	; (403f1c <spi_cmd+0x19c>)
  403ee0:	4c0f      	ldr	r4, [pc, #60]	; (403f20 <spi_cmd+0x1a0>)
  403ee2:	47a0      	blx	r4
  403ee4:	480f      	ldr	r0, [pc, #60]	; (403f24 <spi_cmd+0x1a4>)
  403ee6:	47a0      	blx	r4
  403ee8:	480f      	ldr	r0, [pc, #60]	; (403f28 <spi_cmd+0x1a8>)
  403eea:	47a0      	blx	r4
			result = N_FAIL;
  403eec:	2000      	movs	r0, #0
  403eee:	e00f      	b.n	403f10 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  403ef0:	2000      	movs	r0, #0
  403ef2:	e00d      	b.n	403f10 <spi_cmd+0x190>
  403ef4:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  403ef6:	e00b      	b.n	403f10 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403ef8:	1e4e      	subs	r6, r1, #1
  403efa:	ab01      	add	r3, sp, #4
  403efc:	199d      	adds	r5, r3, r6
  403efe:	207f      	movs	r0, #127	; 0x7f
  403f00:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  403f02:	4c0a      	ldr	r4, [pc, #40]	; (403f2c <spi_cmd+0x1ac>)
  403f04:	e7d5      	b.n	403eb2 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  403f06:	4b0a      	ldr	r3, [pc, #40]	; (403f30 <spi_cmd+0x1b0>)
  403f08:	781b      	ldrb	r3, [r3, #0]
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	d1de      	bne.n	403ecc <spi_cmd+0x14c>
  403f0e:	e7f3      	b.n	403ef8 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  403f10:	b004      	add	sp, #16
  403f12:	bd70      	pop	{r4, r5, r6, pc}
  403f14:	00403d61 	.word	0x00403d61
  403f18:	00412818 	.word	0x00412818
  403f1c:	00411afc 	.word	0x00411afc
  403f20:	00408a5d 	.word	0x00408a5d
  403f24:	00412468 	.word	0x00412468
  403f28:	00411b24 	.word	0x00411b24
  403f2c:	00412838 	.word	0x00412838
  403f30:	20000b60 	.word	0x20000b60

00403f34 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403f34:	b570      	push	{r4, r5, r6, lr}
  403f36:	b082      	sub	sp, #8
  403f38:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403f3a:	2831      	cmp	r0, #49	; 0x31
  403f3c:	bf35      	itete	cc
  403f3e:	2301      	movcc	r3, #1
  403f40:	2300      	movcs	r3, #0
  403f42:	25c3      	movcc	r5, #195	; 0xc3
  403f44:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403f46:	9300      	str	r3, [sp, #0]
  403f48:	2304      	movs	r3, #4
  403f4a:	460a      	mov	r2, r1
  403f4c:	4601      	mov	r1, r0
  403f4e:	4628      	mov	r0, r5
  403f50:	4e16      	ldr	r6, [pc, #88]	; (403fac <spi_write_reg+0x78>)
  403f52:	47b0      	blx	r6
	if (result != N_OK) {
  403f54:	2801      	cmp	r0, #1
  403f56:	d00c      	beq.n	403f72 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403f58:	f240 12eb 	movw	r2, #491	; 0x1eb
  403f5c:	4914      	ldr	r1, [pc, #80]	; (403fb0 <spi_write_reg+0x7c>)
  403f5e:	4815      	ldr	r0, [pc, #84]	; (403fb4 <spi_write_reg+0x80>)
  403f60:	4d15      	ldr	r5, [pc, #84]	; (403fb8 <spi_write_reg+0x84>)
  403f62:	47a8      	blx	r5
  403f64:	4621      	mov	r1, r4
  403f66:	4815      	ldr	r0, [pc, #84]	; (403fbc <spi_write_reg+0x88>)
  403f68:	47a8      	blx	r5
  403f6a:	4815      	ldr	r0, [pc, #84]	; (403fc0 <spi_write_reg+0x8c>)
  403f6c:	47a8      	blx	r5
		return N_FAIL;
  403f6e:	2000      	movs	r0, #0
  403f70:	e01a      	b.n	403fa8 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  403f72:	4628      	mov	r0, r5
  403f74:	4b13      	ldr	r3, [pc, #76]	; (403fc4 <spi_write_reg+0x90>)
  403f76:	4798      	blx	r3
	if (result != N_OK) {
  403f78:	2801      	cmp	r0, #1
  403f7a:	d014      	beq.n	403fa6 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403f7c:	f240 12f1 	movw	r2, #497	; 0x1f1
  403f80:	490b      	ldr	r1, [pc, #44]	; (403fb0 <spi_write_reg+0x7c>)
  403f82:	480c      	ldr	r0, [pc, #48]	; (403fb4 <spi_write_reg+0x80>)
  403f84:	4d0c      	ldr	r5, [pc, #48]	; (403fb8 <spi_write_reg+0x84>)
  403f86:	47a8      	blx	r5
  403f88:	4621      	mov	r1, r4
  403f8a:	480f      	ldr	r0, [pc, #60]	; (403fc8 <spi_write_reg+0x94>)
  403f8c:	47a8      	blx	r5
  403f8e:	480c      	ldr	r0, [pc, #48]	; (403fc0 <spi_write_reg+0x8c>)
  403f90:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403f92:	2400      	movs	r4, #0
  403f94:	9400      	str	r4, [sp, #0]
  403f96:	4623      	mov	r3, r4
  403f98:	4622      	mov	r2, r4
  403f9a:	4621      	mov	r1, r4
  403f9c:	20cf      	movs	r0, #207	; 0xcf
  403f9e:	4d03      	ldr	r5, [pc, #12]	; (403fac <spi_write_reg+0x78>)
  403fa0:	47a8      	blx	r5
		return N_FAIL;
  403fa2:	4620      	mov	r0, r4
  403fa4:	e000      	b.n	403fa8 <spi_write_reg+0x74>
	}

	return N_OK;
  403fa6:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  403fa8:	b002      	add	sp, #8
  403faa:	bd70      	pop	{r4, r5, r6, pc}
  403fac:	00403d81 	.word	0x00403d81
  403fb0:	00412334 	.word	0x00412334
  403fb4:	00411afc 	.word	0x00411afc
  403fb8:	00408a5d 	.word	0x00408a5d
  403fbc:	00412494 	.word	0x00412494
  403fc0:	00411b24 	.word	0x00411b24
  403fc4:	00403b95 	.word	0x00403b95
  403fc8:	004124c0 	.word	0x004124c0

00403fcc <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fd0:	b084      	sub	sp, #16
  403fd2:	4604      	mov	r4, r0
  403fd4:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403fd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403fda:	bf35      	itete	cc
  403fdc:	2601      	movcc	r6, #1
  403fde:	2600      	movcs	r6, #0
  403fe0:	25c4      	movcc	r5, #196	; 0xc4
  403fe2:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403fe4:	9600      	str	r6, [sp, #0]
  403fe6:	2304      	movs	r3, #4
  403fe8:	2200      	movs	r2, #0
  403fea:	4601      	mov	r1, r0
  403fec:	4628      	mov	r0, r5
  403fee:	4f2d      	ldr	r7, [pc, #180]	; (4040a4 <spi_read_reg+0xd8>)
  403ff0:	47b8      	blx	r7
	if (result != N_OK) {
  403ff2:	2801      	cmp	r0, #1
  403ff4:	d00c      	beq.n	404010 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403ff6:	f240 2245 	movw	r2, #581	; 0x245
  403ffa:	492b      	ldr	r1, [pc, #172]	; (4040a8 <spi_read_reg+0xdc>)
  403ffc:	482b      	ldr	r0, [pc, #172]	; (4040ac <spi_read_reg+0xe0>)
  403ffe:	4d2c      	ldr	r5, [pc, #176]	; (4040b0 <spi_read_reg+0xe4>)
  404000:	47a8      	blx	r5
  404002:	4621      	mov	r1, r4
  404004:	482b      	ldr	r0, [pc, #172]	; (4040b4 <spi_read_reg+0xe8>)
  404006:	47a8      	blx	r5
  404008:	482b      	ldr	r0, [pc, #172]	; (4040b8 <spi_read_reg+0xec>)
  40400a:	47a8      	blx	r5
		return N_FAIL;
  40400c:	2000      	movs	r0, #0
  40400e:	e045      	b.n	40409c <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  404010:	4628      	mov	r0, r5
  404012:	4b2a      	ldr	r3, [pc, #168]	; (4040bc <spi_read_reg+0xf0>)
  404014:	4798      	blx	r3
	if (result != N_OK) {
  404016:	2801      	cmp	r0, #1
  404018:	d014      	beq.n	404044 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40401a:	f240 224b 	movw	r2, #587	; 0x24b
  40401e:	4922      	ldr	r1, [pc, #136]	; (4040a8 <spi_read_reg+0xdc>)
  404020:	4822      	ldr	r0, [pc, #136]	; (4040ac <spi_read_reg+0xe0>)
  404022:	4d23      	ldr	r5, [pc, #140]	; (4040b0 <spi_read_reg+0xe4>)
  404024:	47a8      	blx	r5
  404026:	4621      	mov	r1, r4
  404028:	4825      	ldr	r0, [pc, #148]	; (4040c0 <spi_read_reg+0xf4>)
  40402a:	47a8      	blx	r5
  40402c:	4822      	ldr	r0, [pc, #136]	; (4040b8 <spi_read_reg+0xec>)
  40402e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404030:	2400      	movs	r4, #0
  404032:	9400      	str	r4, [sp, #0]
  404034:	4623      	mov	r3, r4
  404036:	4622      	mov	r2, r4
  404038:	4621      	mov	r1, r4
  40403a:	20cf      	movs	r0, #207	; 0xcf
  40403c:	4d19      	ldr	r5, [pc, #100]	; (4040a4 <spi_read_reg+0xd8>)
  40403e:	47a8      	blx	r5
		return N_FAIL;
  404040:	4620      	mov	r0, r4
  404042:	e02b      	b.n	40409c <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  404044:	4632      	mov	r2, r6
  404046:	2104      	movs	r1, #4
  404048:	a803      	add	r0, sp, #12
  40404a:	4b1e      	ldr	r3, [pc, #120]	; (4040c4 <spi_read_reg+0xf8>)
  40404c:	4798      	blx	r3
	if (result != N_OK) {
  40404e:	2801      	cmp	r0, #1
  404050:	d013      	beq.n	40407a <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  404052:	f240 2253 	movw	r2, #595	; 0x253
  404056:	4914      	ldr	r1, [pc, #80]	; (4040a8 <spi_read_reg+0xdc>)
  404058:	4814      	ldr	r0, [pc, #80]	; (4040ac <spi_read_reg+0xe0>)
  40405a:	4c15      	ldr	r4, [pc, #84]	; (4040b0 <spi_read_reg+0xe4>)
  40405c:	47a0      	blx	r4
  40405e:	481a      	ldr	r0, [pc, #104]	; (4040c8 <spi_read_reg+0xfc>)
  404060:	47a0      	blx	r4
  404062:	4815      	ldr	r0, [pc, #84]	; (4040b8 <spi_read_reg+0xec>)
  404064:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404066:	2400      	movs	r4, #0
  404068:	9400      	str	r4, [sp, #0]
  40406a:	4623      	mov	r3, r4
  40406c:	4622      	mov	r2, r4
  40406e:	4621      	mov	r1, r4
  404070:	20cf      	movs	r0, #207	; 0xcf
  404072:	4d0c      	ldr	r5, [pc, #48]	; (4040a4 <spi_read_reg+0xd8>)
  404074:	47a8      	blx	r5
		return N_FAIL;
  404076:	4620      	mov	r0, r4
  404078:	e010      	b.n	40409c <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  40407a:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40407e:	f89d 200e 	ldrb.w	r2, [sp, #14]
  404082:	0413      	lsls	r3, r2, #16
  404084:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  404088:	f89d 300c 	ldrb.w	r3, [sp, #12]
  40408c:	4313      	orrs	r3, r2
  40408e:	f89d 200f 	ldrb.w	r2, [sp, #15]
  404092:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404096:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40409a:	2001      	movs	r0, #1
}
  40409c:	b004      	add	sp, #16
  40409e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4040a2:	bf00      	nop
  4040a4:	00403d81 	.word	0x00403d81
  4040a8:	00412344 	.word	0x00412344
  4040ac:	00411afc 	.word	0x00411afc
  4040b0:	00408a5d 	.word	0x00408a5d
  4040b4:	004124f8 	.word	0x004124f8
  4040b8:	00411b24 	.word	0x00411b24
  4040bc:	00403b95 	.word	0x00403b95
  4040c0:	00412524 	.word	0x00412524
  4040c4:	00403c51 	.word	0x00403c51
  4040c8:	00412558 	.word	0x00412558

004040cc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4040cc:	2000      	movs	r0, #0
  4040ce:	4b01      	ldr	r3, [pc, #4]	; (4040d4 <nm_spi_deinit+0x8>)
  4040d0:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4040d2:	4770      	bx	lr
  4040d4:	20000b60 	.word	0x20000b60

004040d8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4040d8:	b500      	push	{lr}
  4040da:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4040dc:	a901      	add	r1, sp, #4
  4040de:	4b03      	ldr	r3, [pc, #12]	; (4040ec <nm_spi_read_reg+0x14>)
  4040e0:	4798      	blx	r3

	return u32Val;
}
  4040e2:	9801      	ldr	r0, [sp, #4]
  4040e4:	b003      	add	sp, #12
  4040e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4040ea:	bf00      	nop
  4040ec:	00403fcd 	.word	0x00403fcd

004040f0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4040f0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4040f2:	4b04      	ldr	r3, [pc, #16]	; (404104 <nm_spi_read_reg_with_ret+0x14>)
  4040f4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4040f6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4040f8:	bf0c      	ite	eq
  4040fa:	2000      	moveq	r0, #0
  4040fc:	f06f 0005 	mvnne.w	r0, #5
  404100:	bd08      	pop	{r3, pc}
  404102:	bf00      	nop
  404104:	00403fcd 	.word	0x00403fcd

00404108 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  404108:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40410a:	4b04      	ldr	r3, [pc, #16]	; (40411c <nm_spi_write_reg+0x14>)
  40410c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40410e:	2801      	cmp	r0, #1

	return s8Ret;
}
  404110:	bf0c      	ite	eq
  404112:	2000      	moveq	r0, #0
  404114:	f06f 0005 	mvnne.w	r0, #5
  404118:	bd08      	pop	{r3, pc}
  40411a:	bf00      	nop
  40411c:	00403f35 	.word	0x00403f35

00404120 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  404120:	b530      	push	{r4, r5, lr}
  404122:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  404124:	2300      	movs	r3, #0
  404126:	a902      	add	r1, sp, #8
  404128:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  40412c:	4a32      	ldr	r2, [pc, #200]	; (4041f8 <nm_spi_init+0xd8>)
  40412e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  404130:	f64e 0024 	movw	r0, #59428	; 0xe824
  404134:	4b31      	ldr	r3, [pc, #196]	; (4041fc <nm_spi_init+0xdc>)
  404136:	4798      	blx	r3
  404138:	b9f0      	cbnz	r0, 404178 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  40413a:	2201      	movs	r2, #1
  40413c:	4b2e      	ldr	r3, [pc, #184]	; (4041f8 <nm_spi_init+0xd8>)
  40413e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  404140:	f240 22c5 	movw	r2, #709	; 0x2c5
  404144:	492e      	ldr	r1, [pc, #184]	; (404200 <nm_spi_init+0xe0>)
  404146:	482f      	ldr	r0, [pc, #188]	; (404204 <nm_spi_init+0xe4>)
  404148:	4c2f      	ldr	r4, [pc, #188]	; (404208 <nm_spi_init+0xe8>)
  40414a:	47a0      	blx	r4
  40414c:	482f      	ldr	r0, [pc, #188]	; (40420c <nm_spi_init+0xec>)
  40414e:	47a0      	blx	r4
  404150:	482f      	ldr	r0, [pc, #188]	; (404210 <nm_spi_init+0xf0>)
  404152:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404154:	4669      	mov	r1, sp
  404156:	f64e 0024 	movw	r0, #59428	; 0xe824
  40415a:	4b28      	ldr	r3, [pc, #160]	; (4041fc <nm_spi_init+0xdc>)
  40415c:	4798      	blx	r3
  40415e:	4604      	mov	r4, r0
  404160:	b950      	cbnz	r0, 404178 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404162:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  404166:	4926      	ldr	r1, [pc, #152]	; (404200 <nm_spi_init+0xe0>)
  404168:	4826      	ldr	r0, [pc, #152]	; (404204 <nm_spi_init+0xe4>)
  40416a:	4d27      	ldr	r5, [pc, #156]	; (404208 <nm_spi_init+0xe8>)
  40416c:	47a8      	blx	r5
  40416e:	4829      	ldr	r0, [pc, #164]	; (404214 <nm_spi_init+0xf4>)
  404170:	47a8      	blx	r5
  404172:	4827      	ldr	r0, [pc, #156]	; (404210 <nm_spi_init+0xf0>)
  404174:	47a8      	blx	r5
			return 0;
  404176:	e03c      	b.n	4041f2 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  404178:	4b1f      	ldr	r3, [pc, #124]	; (4041f8 <nm_spi_init+0xd8>)
  40417a:	781b      	ldrb	r3, [r3, #0]
  40417c:	b9cb      	cbnz	r3, 4041b2 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  40417e:	9900      	ldr	r1, [sp, #0]
  404180:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  404184:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404188:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  40418a:	f64e 0024 	movw	r0, #59428	; 0xe824
  40418e:	4b22      	ldr	r3, [pc, #136]	; (404218 <nm_spi_init+0xf8>)
  404190:	4798      	blx	r3
  404192:	4604      	mov	r4, r0
  404194:	b950      	cbnz	r0, 4041ac <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  404196:	f240 22d2 	movw	r2, #722	; 0x2d2
  40419a:	4919      	ldr	r1, [pc, #100]	; (404200 <nm_spi_init+0xe0>)
  40419c:	4819      	ldr	r0, [pc, #100]	; (404204 <nm_spi_init+0xe4>)
  40419e:	4d1a      	ldr	r5, [pc, #104]	; (404208 <nm_spi_init+0xe8>)
  4041a0:	47a8      	blx	r5
  4041a2:	481e      	ldr	r0, [pc, #120]	; (40421c <nm_spi_init+0xfc>)
  4041a4:	47a8      	blx	r5
  4041a6:	481a      	ldr	r0, [pc, #104]	; (404210 <nm_spi_init+0xf0>)
  4041a8:	47a8      	blx	r5
			return 0;
  4041aa:	e022      	b.n	4041f2 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  4041ac:	2201      	movs	r2, #1
  4041ae:	4b12      	ldr	r3, [pc, #72]	; (4041f8 <nm_spi_init+0xd8>)
  4041b0:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  4041b2:	a901      	add	r1, sp, #4
  4041b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4041b8:	4b10      	ldr	r3, [pc, #64]	; (4041fc <nm_spi_init+0xdc>)
  4041ba:	4798      	blx	r3
  4041bc:	b960      	cbnz	r0, 4041d8 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4041be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4041c2:	490f      	ldr	r1, [pc, #60]	; (404200 <nm_spi_init+0xe0>)
  4041c4:	480f      	ldr	r0, [pc, #60]	; (404204 <nm_spi_init+0xe4>)
  4041c6:	4c10      	ldr	r4, [pc, #64]	; (404208 <nm_spi_init+0xe8>)
  4041c8:	47a0      	blx	r4
  4041ca:	4815      	ldr	r0, [pc, #84]	; (404220 <nm_spi_init+0x100>)
  4041cc:	47a0      	blx	r4
  4041ce:	4810      	ldr	r0, [pc, #64]	; (404210 <nm_spi_init+0xf0>)
  4041d0:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4041d2:	f06f 0405 	mvn.w	r4, #5
  4041d6:	e00c      	b.n	4041f2 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4041d8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041dc:	4b11      	ldr	r3, [pc, #68]	; (404224 <nm_spi_init+0x104>)
  4041de:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4041e0:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4041e4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4041e8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041ec:	4b0e      	ldr	r3, [pc, #56]	; (404228 <nm_spi_init+0x108>)
  4041ee:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  4041f0:	2400      	movs	r4, #0
}
  4041f2:	4620      	mov	r0, r4
  4041f4:	b003      	add	sp, #12
  4041f6:	bd30      	pop	{r4, r5, pc}
  4041f8:	20000b60 	.word	0x20000b60
  4041fc:	00403fcd 	.word	0x00403fcd
  404200:	00412318 	.word	0x00412318
  404204:	00411afc 	.word	0x00411afc
  404208:	00408a5d 	.word	0x00408a5d
  40420c:	00412578 	.word	0x00412578
  404210:	00411b24 	.word	0x00411b24
  404214:	004125c8 	.word	0x004125c8
  404218:	00403f35 	.word	0x00403f35
  40421c:	004125f8 	.word	0x004125f8
  404220:	0041262c 	.word	0x0041262c
  404224:	004040d9 	.word	0x004040d9
  404228:	00404109 	.word	0x00404109

0040422c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40422c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40422e:	b083      	sub	sp, #12
  404230:	4604      	mov	r4, r0
  404232:	460f      	mov	r7, r1
  404234:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  404236:	2200      	movs	r2, #0
  404238:	9200      	str	r2, [sp, #0]
  40423a:	462b      	mov	r3, r5
  40423c:	4601      	mov	r1, r0
  40423e:	20c8      	movs	r0, #200	; 0xc8
  404240:	4e23      	ldr	r6, [pc, #140]	; (4042d0 <nm_spi_read_block+0xa4>)
  404242:	47b0      	blx	r6
	if (result != N_OK) {
  404244:	2801      	cmp	r0, #1
  404246:	d00b      	beq.n	404260 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  404248:	f44f 721d 	mov.w	r2, #628	; 0x274
  40424c:	4921      	ldr	r1, [pc, #132]	; (4042d4 <nm_spi_read_block+0xa8>)
  40424e:	4822      	ldr	r0, [pc, #136]	; (4042d8 <nm_spi_read_block+0xac>)
  404250:	4d22      	ldr	r5, [pc, #136]	; (4042dc <nm_spi_read_block+0xb0>)
  404252:	47a8      	blx	r5
  404254:	4621      	mov	r1, r4
  404256:	4822      	ldr	r0, [pc, #136]	; (4042e0 <nm_spi_read_block+0xb4>)
  404258:	47a8      	blx	r5
  40425a:	4822      	ldr	r0, [pc, #136]	; (4042e4 <nm_spi_read_block+0xb8>)
  40425c:	47a8      	blx	r5
  40425e:	e032      	b.n	4042c6 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  404260:	20c8      	movs	r0, #200	; 0xc8
  404262:	4b21      	ldr	r3, [pc, #132]	; (4042e8 <nm_spi_read_block+0xbc>)
  404264:	4798      	blx	r3
	if (result != N_OK) {
  404266:	2801      	cmp	r0, #1
  404268:	d012      	beq.n	404290 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  40426a:	f240 227a 	movw	r2, #634	; 0x27a
  40426e:	4919      	ldr	r1, [pc, #100]	; (4042d4 <nm_spi_read_block+0xa8>)
  404270:	4819      	ldr	r0, [pc, #100]	; (4042d8 <nm_spi_read_block+0xac>)
  404272:	4d1a      	ldr	r5, [pc, #104]	; (4042dc <nm_spi_read_block+0xb0>)
  404274:	47a8      	blx	r5
  404276:	4621      	mov	r1, r4
  404278:	481c      	ldr	r0, [pc, #112]	; (4042ec <nm_spi_read_block+0xc0>)
  40427a:	47a8      	blx	r5
  40427c:	4819      	ldr	r0, [pc, #100]	; (4042e4 <nm_spi_read_block+0xb8>)
  40427e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404280:	2100      	movs	r1, #0
  404282:	9100      	str	r1, [sp, #0]
  404284:	460b      	mov	r3, r1
  404286:	460a      	mov	r2, r1
  404288:	20cf      	movs	r0, #207	; 0xcf
  40428a:	4c11      	ldr	r4, [pc, #68]	; (4042d0 <nm_spi_read_block+0xa4>)
  40428c:	47a0      	blx	r4
  40428e:	e01a      	b.n	4042c6 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  404290:	2200      	movs	r2, #0
  404292:	4629      	mov	r1, r5
  404294:	4638      	mov	r0, r7
  404296:	4b16      	ldr	r3, [pc, #88]	; (4042f0 <nm_spi_read_block+0xc4>)
  404298:	4798      	blx	r3
	if (result != N_OK) {
  40429a:	2801      	cmp	r0, #1
  40429c:	d011      	beq.n	4042c2 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40429e:	f44f 7221 	mov.w	r2, #644	; 0x284
  4042a2:	490c      	ldr	r1, [pc, #48]	; (4042d4 <nm_spi_read_block+0xa8>)
  4042a4:	480c      	ldr	r0, [pc, #48]	; (4042d8 <nm_spi_read_block+0xac>)
  4042a6:	4c0d      	ldr	r4, [pc, #52]	; (4042dc <nm_spi_read_block+0xb0>)
  4042a8:	47a0      	blx	r4
  4042aa:	4812      	ldr	r0, [pc, #72]	; (4042f4 <nm_spi_read_block+0xc8>)
  4042ac:	47a0      	blx	r4
  4042ae:	480d      	ldr	r0, [pc, #52]	; (4042e4 <nm_spi_read_block+0xb8>)
  4042b0:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4042b2:	2100      	movs	r1, #0
  4042b4:	9100      	str	r1, [sp, #0]
  4042b6:	460b      	mov	r3, r1
  4042b8:	460a      	mov	r2, r1
  4042ba:	20cf      	movs	r0, #207	; 0xcf
  4042bc:	4c04      	ldr	r4, [pc, #16]	; (4042d0 <nm_spi_read_block+0xa4>)
  4042be:	47a0      	blx	r4
  4042c0:	e001      	b.n	4042c6 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4042c2:	2000      	movs	r0, #0
  4042c4:	e001      	b.n	4042ca <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4042c6:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4042ca:	b003      	add	sp, #12
  4042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4042ce:	bf00      	nop
  4042d0:	00403d81 	.word	0x00403d81
  4042d4:	0041282c 	.word	0x0041282c
  4042d8:	00411afc 	.word	0x00411afc
  4042dc:	00408a5d 	.word	0x00408a5d
  4042e0:	00412654 	.word	0x00412654
  4042e4:	00411b24 	.word	0x00411b24
  4042e8:	00403b95 	.word	0x00403b95
  4042ec:	00412684 	.word	0x00412684
  4042f0:	00403c51 	.word	0x00403c51
  4042f4:	004126bc 	.word	0x004126bc

004042f8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4042f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4042fc:	b085      	sub	sp, #20
  4042fe:	4604      	mov	r4, r0
  404300:	4688      	mov	r8, r1
  404302:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  404304:	2200      	movs	r2, #0
  404306:	9200      	str	r2, [sp, #0]
  404308:	462b      	mov	r3, r5
  40430a:	4601      	mov	r1, r0
  40430c:	20c7      	movs	r0, #199	; 0xc7
  40430e:	4e4c      	ldr	r6, [pc, #304]	; (404440 <nm_spi_write_block+0x148>)
  404310:	47b0      	blx	r6
	if (result != N_OK) {
  404312:	2801      	cmp	r0, #1
  404314:	d00b      	beq.n	40432e <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  404316:	f240 220f 	movw	r2, #527	; 0x20f
  40431a:	494a      	ldr	r1, [pc, #296]	; (404444 <nm_spi_write_block+0x14c>)
  40431c:	484a      	ldr	r0, [pc, #296]	; (404448 <nm_spi_write_block+0x150>)
  40431e:	4d4b      	ldr	r5, [pc, #300]	; (40444c <nm_spi_write_block+0x154>)
  404320:	47a8      	blx	r5
  404322:	4621      	mov	r1, r4
  404324:	484a      	ldr	r0, [pc, #296]	; (404450 <nm_spi_write_block+0x158>)
  404326:	47a8      	blx	r5
  404328:	484a      	ldr	r0, [pc, #296]	; (404454 <nm_spi_write_block+0x15c>)
  40432a:	47a8      	blx	r5
  40432c:	e082      	b.n	404434 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40432e:	20c7      	movs	r0, #199	; 0xc7
  404330:	4b49      	ldr	r3, [pc, #292]	; (404458 <nm_spi_write_block+0x160>)
  404332:	4798      	blx	r3
	if (result != N_OK) {
  404334:	2801      	cmp	r0, #1
  404336:	d012      	beq.n	40435e <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  404338:	f240 2215 	movw	r2, #533	; 0x215
  40433c:	4941      	ldr	r1, [pc, #260]	; (404444 <nm_spi_write_block+0x14c>)
  40433e:	4842      	ldr	r0, [pc, #264]	; (404448 <nm_spi_write_block+0x150>)
  404340:	4d42      	ldr	r5, [pc, #264]	; (40444c <nm_spi_write_block+0x154>)
  404342:	47a8      	blx	r5
  404344:	4621      	mov	r1, r4
  404346:	4845      	ldr	r0, [pc, #276]	; (40445c <nm_spi_write_block+0x164>)
  404348:	47a8      	blx	r5
  40434a:	4842      	ldr	r0, [pc, #264]	; (404454 <nm_spi_write_block+0x15c>)
  40434c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40434e:	2100      	movs	r1, #0
  404350:	9100      	str	r1, [sp, #0]
  404352:	460b      	mov	r3, r1
  404354:	460a      	mov	r2, r1
  404356:	20cf      	movs	r0, #207	; 0xcf
  404358:	4c39      	ldr	r4, [pc, #228]	; (404440 <nm_spi_write_block+0x148>)
  40435a:	47a0      	blx	r4
  40435c:	e06a      	b.n	404434 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  40435e:	2400      	movs	r4, #0
  404360:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404364:	4f3e      	ldr	r7, [pc, #248]	; (404460 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  404366:	f8df 9110 	ldr.w	r9, [pc, #272]	; 404478 <nm_spi_write_block+0x180>
  40436a:	462e      	mov	r6, r5
  40436c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404370:	bf28      	it	cs
  404372:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  404376:	b92c      	cbnz	r4, 404384 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  404378:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40437c:	bf94      	ite	ls
  40437e:	2303      	movls	r3, #3
  404380:	2301      	movhi	r3, #1
  404382:	e004      	b.n	40438e <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  404384:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404388:	bf94      	ite	ls
  40438a:	2303      	movls	r3, #3
  40438c:	2302      	movhi	r3, #2
		}
		cmd |= order;
  40438e:	f063 030f 	orn	r3, r3, #15
  404392:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404396:	2101      	movs	r1, #1
  404398:	f10d 000b 	add.w	r0, sp, #11
  40439c:	47b8      	blx	r7
  40439e:	b150      	cbz	r0, 4043b6 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4043a0:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4043a4:	492f      	ldr	r1, [pc, #188]	; (404464 <nm_spi_write_block+0x16c>)
  4043a6:	4828      	ldr	r0, [pc, #160]	; (404448 <nm_spi_write_block+0x150>)
  4043a8:	4c28      	ldr	r4, [pc, #160]	; (40444c <nm_spi_write_block+0x154>)
  4043aa:	47a0      	blx	r4
  4043ac:	482e      	ldr	r0, [pc, #184]	; (404468 <nm_spi_write_block+0x170>)
  4043ae:	47a0      	blx	r4
  4043b0:	4828      	ldr	r0, [pc, #160]	; (404454 <nm_spi_write_block+0x15c>)
  4043b2:	47a0      	blx	r4
  4043b4:	e028      	b.n	404408 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4043b6:	4631      	mov	r1, r6
  4043b8:	eb08 0004 	add.w	r0, r8, r4
  4043bc:	47b8      	blx	r7
  4043be:	b150      	cbz	r0, 4043d6 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4043c0:	f240 12b1 	movw	r2, #433	; 0x1b1
  4043c4:	4927      	ldr	r1, [pc, #156]	; (404464 <nm_spi_write_block+0x16c>)
  4043c6:	4820      	ldr	r0, [pc, #128]	; (404448 <nm_spi_write_block+0x150>)
  4043c8:	4c20      	ldr	r4, [pc, #128]	; (40444c <nm_spi_write_block+0x154>)
  4043ca:	47a0      	blx	r4
  4043cc:	4827      	ldr	r0, [pc, #156]	; (40446c <nm_spi_write_block+0x174>)
  4043ce:	47a0      	blx	r4
  4043d0:	4820      	ldr	r0, [pc, #128]	; (404454 <nm_spi_write_block+0x15c>)
  4043d2:	47a0      	blx	r4
  4043d4:	e018      	b.n	404408 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4043d6:	f899 3000 	ldrb.w	r3, [r9]
  4043da:	b973      	cbnz	r3, 4043fa <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4043dc:	2102      	movs	r1, #2
  4043de:	a803      	add	r0, sp, #12
  4043e0:	47b8      	blx	r7
  4043e2:	b150      	cbz	r0, 4043fa <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4043e4:	f240 12bb 	movw	r2, #443	; 0x1bb
  4043e8:	491e      	ldr	r1, [pc, #120]	; (404464 <nm_spi_write_block+0x16c>)
  4043ea:	4817      	ldr	r0, [pc, #92]	; (404448 <nm_spi_write_block+0x150>)
  4043ec:	4c17      	ldr	r4, [pc, #92]	; (40444c <nm_spi_write_block+0x154>)
  4043ee:	47a0      	blx	r4
  4043f0:	481f      	ldr	r0, [pc, #124]	; (404470 <nm_spi_write_block+0x178>)
  4043f2:	47a0      	blx	r4
  4043f4:	4817      	ldr	r0, [pc, #92]	; (404454 <nm_spi_write_block+0x15c>)
  4043f6:	47a0      	blx	r4
  4043f8:	e006      	b.n	404408 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  4043fa:	4434      	add	r4, r6
  4043fc:	b224      	sxth	r4, r4
		sz -= nbytes;
  4043fe:	1bad      	subs	r5, r5, r6
  404400:	b2ad      	uxth	r5, r5
	} while (sz);
  404402:	2d00      	cmp	r5, #0
  404404:	d1b1      	bne.n	40436a <nm_spi_write_block+0x72>
  404406:	e013      	b.n	404430 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  404408:	f240 2226 	movw	r2, #550	; 0x226
  40440c:	490d      	ldr	r1, [pc, #52]	; (404444 <nm_spi_write_block+0x14c>)
  40440e:	480e      	ldr	r0, [pc, #56]	; (404448 <nm_spi_write_block+0x150>)
  404410:	4c0e      	ldr	r4, [pc, #56]	; (40444c <nm_spi_write_block+0x154>)
  404412:	47a0      	blx	r4
  404414:	4817      	ldr	r0, [pc, #92]	; (404474 <nm_spi_write_block+0x17c>)
  404416:	47a0      	blx	r4
  404418:	480e      	ldr	r0, [pc, #56]	; (404454 <nm_spi_write_block+0x15c>)
  40441a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40441c:	2400      	movs	r4, #0
  40441e:	9400      	str	r4, [sp, #0]
  404420:	4623      	mov	r3, r4
  404422:	4622      	mov	r2, r4
  404424:	4621      	mov	r1, r4
  404426:	20cf      	movs	r0, #207	; 0xcf
  404428:	4d05      	ldr	r5, [pc, #20]	; (404440 <nm_spi_write_block+0x148>)
  40442a:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40442c:	4620      	mov	r0, r4
  40442e:	e003      	b.n	404438 <nm_spi_write_block+0x140>
  404430:	2000      	movs	r0, #0
  404432:	e001      	b.n	404438 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  404434:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404438:	b005      	add	sp, #20
  40443a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40443e:	bf00      	nop
  404440:	00403d81 	.word	0x00403d81
  404444:	00412354 	.word	0x00412354
  404448:	00411afc 	.word	0x00411afc
  40444c:	00408a5d 	.word	0x00408a5d
  404450:	004126e4 	.word	0x004126e4
  404454:	00411b24 	.word	0x00411b24
  404458:	00403b95 	.word	0x00403b95
  40445c:	00412714 	.word	0x00412714
  404460:	00403d61 	.word	0x00403d61
  404464:	00412324 	.word	0x00412324
  404468:	0041274c 	.word	0x0041274c
  40446c:	00412784 	.word	0x00412784
  404470:	004127b8 	.word	0x004127b8
  404474:	004127f0 	.word	0x004127f0
  404478:	20000b60 	.word	0x20000b60

0040447c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40447c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404480:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404484:	2c00      	cmp	r4, #0
  404486:	d047      	beq.n	404518 <Socket_ReadSocketData+0x9c>
  404488:	4681      	mov	r9, r0
  40448a:	460e      	mov	r6, r1
  40448c:	4692      	mov	sl, r2
  40448e:	4698      	mov	r8, r3
  404490:	0103      	lsls	r3, r0, #4
  404492:	4922      	ldr	r1, [pc, #136]	; (40451c <Socket_ReadSocketData+0xa0>)
  404494:	58cb      	ldr	r3, [r1, r3]
  404496:	2b00      	cmp	r3, #0
  404498:	d03e      	beq.n	404518 <Socket_ReadSocketData+0x9c>
  40449a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40449e:	889b      	ldrh	r3, [r3, #4]
  4044a0:	b29b      	uxth	r3, r3
  4044a2:	2b00      	cmp	r3, #0
  4044a4:	d038      	beq.n	404518 <Socket_ReadSocketData+0x9c>
  4044a6:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4044aa:	7a9b      	ldrb	r3, [r3, #10]
  4044ac:	b2db      	uxtb	r3, r3
  4044ae:	2b01      	cmp	r3, #1
  4044b0:	d132      	bne.n	404518 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4044b2:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4044b4:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4044b8:	f8df b078 	ldr.w	fp, [pc, #120]	; 404534 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4044bc:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  4044be:	1ae3      	subs	r3, r4, r3
  4044c0:	b21b      	sxth	r3, r3
  4044c2:	2b00      	cmp	r3, #0
  4044c4:	dd03      	ble.n	4044ce <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4044c6:	88bd      	ldrh	r5, [r7, #4]
  4044c8:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  4044ca:	2300      	movs	r3, #0
  4044cc:	e001      	b.n	4044d2 <Socket_ReadSocketData+0x56>
  4044ce:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  4044d0:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4044d2:	6839      	ldr	r1, [r7, #0]
  4044d4:	462a      	mov	r2, r5
  4044d6:	4640      	mov	r0, r8
  4044d8:	47d8      	blx	fp
  4044da:	b9a8      	cbnz	r0, 404508 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4044dc:	683b      	ldr	r3, [r7, #0]
  4044de:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4044e0:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4044e2:	88f3      	ldrh	r3, [r6, #6]
  4044e4:	1b5b      	subs	r3, r3, r5
  4044e6:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  4044e8:	4b0d      	ldr	r3, [pc, #52]	; (404520 <Socket_ReadSocketData+0xa4>)
  4044ea:	681b      	ldr	r3, [r3, #0]
  4044ec:	b12b      	cbz	r3, 4044fa <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4044ee:	4b0c      	ldr	r3, [pc, #48]	; (404520 <Socket_ReadSocketData+0xa4>)
  4044f0:	681b      	ldr	r3, [r3, #0]
  4044f2:	4632      	mov	r2, r6
  4044f4:	4651      	mov	r1, sl
  4044f6:	4648      	mov	r0, r9
  4044f8:	4798      	blx	r3

				u16ReadCount -= u16Read;
  4044fa:	1b64      	subs	r4, r4, r5
  4044fc:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4044fe:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  404500:	2c00      	cmp	r4, #0
  404502:	d1db      	bne.n	4044bc <Socket_ReadSocketData+0x40>
  404504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404508:	4806      	ldr	r0, [pc, #24]	; (404524 <Socket_ReadSocketData+0xa8>)
  40450a:	4d07      	ldr	r5, [pc, #28]	; (404528 <Socket_ReadSocketData+0xac>)
  40450c:	47a8      	blx	r5
  40450e:	4621      	mov	r1, r4
  404510:	4806      	ldr	r0, [pc, #24]	; (40452c <Socket_ReadSocketData+0xb0>)
  404512:	47a8      	blx	r5
  404514:	4806      	ldr	r0, [pc, #24]	; (404530 <Socket_ReadSocketData+0xb4>)
  404516:	47a8      	blx	r5
  404518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40451c:	2000be3c 	.word	0x2000be3c
  404520:	2000beec 	.word	0x2000beec
  404524:	00411dec 	.word	0x00411dec
  404528:	00408a5d 	.word	0x00408a5d
  40452c:	00412948 	.word	0x00412948
  404530:	00411b24 	.word	0x00411b24
  404534:	00402b49 	.word	0x00402b49

00404538 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404538:	b5f0      	push	{r4, r5, r6, r7, lr}
  40453a:	b099      	sub	sp, #100	; 0x64
  40453c:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40453e:	2841      	cmp	r0, #65	; 0x41
  404540:	d119      	bne.n	404576 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404542:	2300      	movs	r3, #0
  404544:	2204      	movs	r2, #4
  404546:	a907      	add	r1, sp, #28
  404548:	4620      	mov	r0, r4
  40454a:	4ca2      	ldr	r4, [pc, #648]	; (4047d4 <m2m_ip_cb+0x29c>)
  40454c:	47a0      	blx	r4
  40454e:	2800      	cmp	r0, #0
  404550:	f040 813e 	bne.w	4047d0 <m2m_ip_cb+0x298>
		{
			strBind.status = strBindReply.s8Status;
  404554:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404558:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40455c:	4b9e      	ldr	r3, [pc, #632]	; (4047d8 <m2m_ip_cb+0x2a0>)
  40455e:	681b      	ldr	r3, [r3, #0]
  404560:	2b00      	cmp	r3, #0
  404562:	f000 8135 	beq.w	4047d0 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  404566:	4b9c      	ldr	r3, [pc, #624]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404568:	681b      	ldr	r3, [r3, #0]
  40456a:	aa03      	add	r2, sp, #12
  40456c:	2101      	movs	r1, #1
  40456e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404572:	4798      	blx	r3
  404574:	e12c      	b.n	4047d0 <m2m_ip_cb+0x298>
  404576:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404578:	2842      	cmp	r0, #66	; 0x42
  40457a:	d119      	bne.n	4045b0 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  40457c:	2300      	movs	r3, #0
  40457e:	2204      	movs	r2, #4
  404580:	a907      	add	r1, sp, #28
  404582:	4620      	mov	r0, r4
  404584:	4c93      	ldr	r4, [pc, #588]	; (4047d4 <m2m_ip_cb+0x29c>)
  404586:	47a0      	blx	r4
  404588:	2800      	cmp	r0, #0
  40458a:	f040 8121 	bne.w	4047d0 <m2m_ip_cb+0x298>
		{
			strListen.status = strListenReply.s8Status;
  40458e:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404592:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404596:	4b90      	ldr	r3, [pc, #576]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404598:	681b      	ldr	r3, [r3, #0]
  40459a:	2b00      	cmp	r3, #0
  40459c:	f000 8118 	beq.w	4047d0 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  4045a0:	4b8d      	ldr	r3, [pc, #564]	; (4047d8 <m2m_ip_cb+0x2a0>)
  4045a2:	681b      	ldr	r3, [r3, #0]
  4045a4:	aa03      	add	r2, sp, #12
  4045a6:	2102      	movs	r1, #2
  4045a8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4045ac:	4798      	blx	r3
  4045ae:	e10f      	b.n	4047d0 <m2m_ip_cb+0x298>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  4045b0:	2843      	cmp	r0, #67	; 0x43
  4045b2:	d13f      	bne.n	404634 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  4045b4:	2300      	movs	r3, #0
  4045b6:	220c      	movs	r2, #12
  4045b8:	eb0d 0102 	add.w	r1, sp, r2
  4045bc:	4620      	mov	r0, r4
  4045be:	4c85      	ldr	r4, [pc, #532]	; (4047d4 <m2m_ip_cb+0x29c>)
  4045c0:	47a0      	blx	r4
  4045c2:	2800      	cmp	r0, #0
  4045c4:	f040 8104 	bne.w	4047d0 <m2m_ip_cb+0x298>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  4045c8:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  4045cc:	2b00      	cmp	r3, #0
  4045ce:	db19      	blt.n	404604 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4045d0:	4a82      	ldr	r2, [pc, #520]	; (4047dc <m2m_ip_cb+0x2a4>)
  4045d2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4045d6:	2100      	movs	r1, #0
  4045d8:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4045da:	2101      	movs	r1, #1
  4045dc:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4045de:	4980      	ldr	r1, [pc, #512]	; (4047e0 <m2m_ip_cb+0x2a8>)
  4045e0:	880a      	ldrh	r2, [r1, #0]
  4045e2:	3201      	adds	r2, #1
  4045e4:	b292      	uxth	r2, r2
  4045e6:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  4045e8:	880a      	ldrh	r2, [r1, #0]
  4045ea:	b292      	uxth	r2, r2
  4045ec:	b91a      	cbnz	r2, 4045f6 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  4045ee:	880a      	ldrh	r2, [r1, #0]
  4045f0:	3201      	adds	r2, #1
  4045f2:	b292      	uxth	r2, r2
  4045f4:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4045f6:	4a7a      	ldr	r2, [pc, #488]	; (4047e0 <m2m_ip_cb+0x2a8>)
  4045f8:	8811      	ldrh	r1, [r2, #0]
  4045fa:	b289      	uxth	r1, r1
  4045fc:	4a77      	ldr	r2, [pc, #476]	; (4047dc <m2m_ip_cb+0x2a4>)
  4045fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404602:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  404604:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  404608:	2302      	movs	r3, #2
  40460a:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  40460e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404612:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404616:	9b04      	ldr	r3, [sp, #16]
  404618:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  40461a:	4b6f      	ldr	r3, [pc, #444]	; (4047d8 <m2m_ip_cb+0x2a0>)
  40461c:	681b      	ldr	r3, [r3, #0]
  40461e:	2b00      	cmp	r3, #0
  404620:	f000 80d6 	beq.w	4047d0 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  404624:	4b6c      	ldr	r3, [pc, #432]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404626:	681b      	ldr	r3, [r3, #0]
  404628:	aa07      	add	r2, sp, #28
  40462a:	2104      	movs	r1, #4
  40462c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  404630:	4798      	blx	r3
  404632:	e0cd      	b.n	4047d0 <m2m_ip_cb+0x298>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404634:	2844      	cmp	r0, #68	; 0x44
  404636:	d001      	beq.n	40463c <m2m_ip_cb+0x104>
  404638:	284b      	cmp	r0, #75	; 0x4b
  40463a:	d124      	bne.n	404686 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  40463c:	2300      	movs	r3, #0
  40463e:	2204      	movs	r2, #4
  404640:	a907      	add	r1, sp, #28
  404642:	4620      	mov	r0, r4
  404644:	4c63      	ldr	r4, [pc, #396]	; (4047d4 <m2m_ip_cb+0x29c>)
  404646:	47a0      	blx	r4
  404648:	2800      	cmp	r0, #0
  40464a:	f040 80c1 	bne.w	4047d0 <m2m_ip_cb+0x298>
		{
			strConnMsg.sock		= strConnectReply.sock;
  40464e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404652:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404656:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  40465a:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  40465e:	b93b      	cbnz	r3, 404670 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  404660:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404664:	3b08      	subs	r3, #8
  404666:	b29b      	uxth	r3, r3
  404668:	4a5c      	ldr	r2, [pc, #368]	; (4047dc <m2m_ip_cb+0x2a4>)
  40466a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40466e:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  404670:	4b59      	ldr	r3, [pc, #356]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404672:	681b      	ldr	r3, [r3, #0]
  404674:	2b00      	cmp	r3, #0
  404676:	f000 80ab 	beq.w	4047d0 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  40467a:	4b57      	ldr	r3, [pc, #348]	; (4047d8 <m2m_ip_cb+0x2a0>)
  40467c:	681b      	ldr	r3, [r3, #0]
  40467e:	aa03      	add	r2, sp, #12
  404680:	2105      	movs	r1, #5
  404682:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  404684:	e0a4      	b.n	4047d0 <m2m_ip_cb+0x298>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404686:	284a      	cmp	r0, #74	; 0x4a
  404688:	d113      	bne.n	4046b2 <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  40468a:	2300      	movs	r3, #0
  40468c:	2244      	movs	r2, #68	; 0x44
  40468e:	a907      	add	r1, sp, #28
  404690:	4620      	mov	r0, r4
  404692:	4c50      	ldr	r4, [pc, #320]	; (4047d4 <m2m_ip_cb+0x29c>)
  404694:	47a0      	blx	r4
  404696:	2800      	cmp	r0, #0
  404698:	f040 809a 	bne.w	4047d0 <m2m_ip_cb+0x298>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  40469c:	4b51      	ldr	r3, [pc, #324]	; (4047e4 <m2m_ip_cb+0x2ac>)
  40469e:	681b      	ldr	r3, [r3, #0]
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	f000 8095 	beq.w	4047d0 <m2m_ip_cb+0x298>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4046a6:	4b4f      	ldr	r3, [pc, #316]	; (4047e4 <m2m_ip_cb+0x2ac>)
  4046a8:	681b      	ldr	r3, [r3, #0]
  4046aa:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4046ac:	a807      	add	r0, sp, #28
  4046ae:	4798      	blx	r3
  4046b0:	e08e      	b.n	4047d0 <m2m_ip_cb+0x298>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  4046b2:	2846      	cmp	r0, #70	; 0x46
  4046b4:	d005      	beq.n	4046c2 <m2m_ip_cb+0x18a>
  4046b6:	2848      	cmp	r0, #72	; 0x48
  4046b8:	d005      	beq.n	4046c6 <m2m_ip_cb+0x18e>
  4046ba:	284d      	cmp	r0, #77	; 0x4d
  4046bc:	d148      	bne.n	404750 <m2m_ip_cb+0x218>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
  4046be:	2706      	movs	r7, #6
  4046c0:	e002      	b.n	4046c8 <m2m_ip_cb+0x190>
  4046c2:	2706      	movs	r7, #6
  4046c4:	e000      	b.n	4046c8 <m2m_ip_cb+0x190>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  4046c6:	2709      	movs	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4046c8:	2300      	movs	r3, #0
  4046ca:	2210      	movs	r2, #16
  4046cc:	a903      	add	r1, sp, #12
  4046ce:	4620      	mov	r0, r4
  4046d0:	4e40      	ldr	r6, [pc, #256]	; (4047d4 <m2m_ip_cb+0x29c>)
  4046d2:	47b0      	blx	r6
  4046d4:	2800      	cmp	r0, #0
  4046d6:	d17b      	bne.n	4047d0 <m2m_ip_cb+0x298>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4046d8:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4046dc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4046e0:	4a3e      	ldr	r2, [pc, #248]	; (4047dc <m2m_ip_cb+0x2a4>)
  4046e2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4046e6:	2300      	movs	r3, #0
  4046e8:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4046ea:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4046ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4046f2:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4046f6:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4046fa:	9e04      	ldr	r6, [sp, #16]
  4046fc:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4046fe:	88d2      	ldrh	r2, [r2, #6]
  404700:	b292      	uxth	r2, r2
  404702:	4291      	cmp	r1, r2
  404704:	d11b      	bne.n	40473e <m2m_ip_cb+0x206>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404706:	f1be 0f00 	cmp.w	lr, #0
  40470a:	dd0a      	ble.n	404722 <m2m_ip_cb+0x1ea>
  40470c:	45ae      	cmp	lr, r5
  40470e:	da08      	bge.n	404722 <m2m_ip_cb+0x1ea>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404710:	fa1f f28e 	uxth.w	r2, lr
  404714:	9200      	str	r2, [sp, #0]
  404716:	4423      	add	r3, r4
  404718:	463a      	mov	r2, r7
  40471a:	a907      	add	r1, sp, #28
  40471c:	4c32      	ldr	r4, [pc, #200]	; (4047e8 <m2m_ip_cb+0x2b0>)
  40471e:	47a0      	blx	r4
  404720:	e056      	b.n	4047d0 <m2m_ip_cb+0x298>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404722:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404726:	2300      	movs	r3, #0
  404728:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40472a:	4b2b      	ldr	r3, [pc, #172]	; (4047d8 <m2m_ip_cb+0x2a0>)
  40472c:	681b      	ldr	r3, [r3, #0]
  40472e:	2b00      	cmp	r3, #0
  404730:	d04e      	beq.n	4047d0 <m2m_ip_cb+0x298>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404732:	4b29      	ldr	r3, [pc, #164]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404734:	681b      	ldr	r3, [r3, #0]
  404736:	aa07      	add	r2, sp, #28
  404738:	4639      	mov	r1, r7
  40473a:	4798      	blx	r3
  40473c:	e048      	b.n	4047d0 <m2m_ip_cb+0x298>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  40473e:	2d10      	cmp	r5, #16
  404740:	d946      	bls.n	4047d0 <m2m_ip_cb+0x298>
					hif_receive(0, NULL, 0, 1);
  404742:	2301      	movs	r3, #1
  404744:	2200      	movs	r2, #0
  404746:	4611      	mov	r1, r2
  404748:	4610      	mov	r0, r2
  40474a:	4c22      	ldr	r4, [pc, #136]	; (4047d4 <m2m_ip_cb+0x29c>)
  40474c:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  40474e:	e03f      	b.n	4047d0 <m2m_ip_cb+0x298>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404750:	2845      	cmp	r0, #69	; 0x45
  404752:	d005      	beq.n	404760 <m2m_ip_cb+0x228>
  404754:	2847      	cmp	r0, #71	; 0x47
  404756:	d005      	beq.n	404764 <m2m_ip_cb+0x22c>
  404758:	284c      	cmp	r0, #76	; 0x4c
  40475a:	d124      	bne.n	4047a6 <m2m_ip_cb+0x26e>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
  40475c:	2507      	movs	r5, #7
  40475e:	e002      	b.n	404766 <m2m_ip_cb+0x22e>
  404760:	2507      	movs	r5, #7
  404762:	e000      	b.n	404766 <m2m_ip_cb+0x22e>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  404764:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404766:	2300      	movs	r3, #0
  404768:	2208      	movs	r2, #8
  40476a:	a907      	add	r1, sp, #28
  40476c:	4620      	mov	r0, r4
  40476e:	4c19      	ldr	r4, [pc, #100]	; (4047d4 <m2m_ip_cb+0x29c>)
  404770:	47a0      	blx	r4
  404772:	2800      	cmp	r0, #0
  404774:	d12c      	bne.n	4047d0 <m2m_ip_cb+0x298>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  404776:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40477a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40477e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404782:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404786:	4b15      	ldr	r3, [pc, #84]	; (4047dc <m2m_ip_cb+0x2a4>)
  404788:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40478c:	88db      	ldrh	r3, [r3, #6]
  40478e:	b29b      	uxth	r3, r3
  404790:	429a      	cmp	r2, r3
  404792:	d11d      	bne.n	4047d0 <m2m_ip_cb+0x298>
			{
				if(gpfAppSocketCb)
  404794:	4b10      	ldr	r3, [pc, #64]	; (4047d8 <m2m_ip_cb+0x2a0>)
  404796:	681b      	ldr	r3, [r3, #0]
  404798:	b1d3      	cbz	r3, 4047d0 <m2m_ip_cb+0x298>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40479a:	4b0f      	ldr	r3, [pc, #60]	; (4047d8 <m2m_ip_cb+0x2a0>)
  40479c:	681b      	ldr	r3, [r3, #0]
  40479e:	aa03      	add	r2, sp, #12
  4047a0:	4629      	mov	r1, r5
  4047a2:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  4047a4:	e014      	b.n	4047d0 <m2m_ip_cb+0x298>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  4047a6:	2852      	cmp	r0, #82	; 0x52
  4047a8:	d112      	bne.n	4047d0 <m2m_ip_cb+0x298>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  4047aa:	2301      	movs	r3, #1
  4047ac:	2214      	movs	r2, #20
  4047ae:	a907      	add	r1, sp, #28
  4047b0:	4620      	mov	r0, r4
  4047b2:	4c08      	ldr	r4, [pc, #32]	; (4047d4 <m2m_ip_cb+0x29c>)
  4047b4:	47a0      	blx	r4
  4047b6:	b958      	cbnz	r0, 4047d0 <m2m_ip_cb+0x298>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  4047b8:	4b0c      	ldr	r3, [pc, #48]	; (4047ec <m2m_ip_cb+0x2b4>)
  4047ba:	9a08      	ldr	r2, [sp, #32]
  4047bc:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4047be:	681b      	ldr	r3, [r3, #0]
  4047c0:	b133      	cbz	r3, 4047d0 <m2m_ip_cb+0x298>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4047c2:	4b0a      	ldr	r3, [pc, #40]	; (4047ec <m2m_ip_cb+0x2b4>)
  4047c4:	681b      	ldr	r3, [r3, #0]
  4047c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4047ca:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047cc:	9807      	ldr	r0, [sp, #28]
  4047ce:	4798      	blx	r3
			}
		}
	}
}
  4047d0:	b019      	add	sp, #100	; 0x64
  4047d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047d4:	00402b49 	.word	0x00402b49
  4047d8:	2000beec 	.word	0x2000beec
  4047dc:	2000be3c 	.word	0x2000be3c
  4047e0:	20000b62 	.word	0x20000b62
  4047e4:	2000bef4 	.word	0x2000bef4
  4047e8:	0040447d 	.word	0x0040447d
  4047ec:	2000bef0 	.word	0x2000bef0

004047f0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4047f0:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4047f2:	4b0a      	ldr	r3, [pc, #40]	; (40481c <socketInit+0x2c>)
  4047f4:	781b      	ldrb	r3, [r3, #0]
  4047f6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4047fa:	d10e      	bne.n	40481a <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4047fc:	22b0      	movs	r2, #176	; 0xb0
  4047fe:	2100      	movs	r1, #0
  404800:	4807      	ldr	r0, [pc, #28]	; (404820 <socketInit+0x30>)
  404802:	4b08      	ldr	r3, [pc, #32]	; (404824 <socketInit+0x34>)
  404804:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404806:	4908      	ldr	r1, [pc, #32]	; (404828 <socketInit+0x38>)
  404808:	2002      	movs	r0, #2
  40480a:	4b08      	ldr	r3, [pc, #32]	; (40482c <socketInit+0x3c>)
  40480c:	4798      	blx	r3
		gbSocketInit=1;
  40480e:	2201      	movs	r2, #1
  404810:	4b02      	ldr	r3, [pc, #8]	; (40481c <socketInit+0x2c>)
  404812:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404814:	2200      	movs	r2, #0
  404816:	4b06      	ldr	r3, [pc, #24]	; (404830 <socketInit+0x40>)
  404818:	801a      	strh	r2, [r3, #0]
  40481a:	bd08      	pop	{r3, pc}
  40481c:	20000b61 	.word	0x20000b61
  404820:	2000be3c 	.word	0x2000be3c
  404824:	004024b5 	.word	0x004024b5
  404828:	00404539 	.word	0x00404539
  40482c:	00402c55 	.word	0x00402c55
  404830:	20000b62 	.word	0x20000b62

00404834 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404834:	4b02      	ldr	r3, [pc, #8]	; (404840 <registerSocketCallback+0xc>)
  404836:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404838:	4b02      	ldr	r3, [pc, #8]	; (404844 <registerSocketCallback+0x10>)
  40483a:	6019      	str	r1, [r3, #0]
  40483c:	4770      	bx	lr
  40483e:	bf00      	nop
  404840:	2000beec 	.word	0x2000beec
  404844:	2000bef4 	.word	0x2000bef4

00404848 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404848:	b570      	push	{r4, r5, r6, lr}
  40484a:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40484c:	2802      	cmp	r0, #2
  40484e:	d14c      	bne.n	4048ea <socket+0xa2>
	{
		if(u8Type == SOCK_STREAM)
  404850:	2901      	cmp	r1, #1
  404852:	d04d      	beq.n	4048f0 <socket+0xa8>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404854:	2902      	cmp	r1, #2
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  404856:	bf18      	it	ne
  404858:	f04f 34ff 	movne.w	r4, #4294967295
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  40485c:	d159      	bne.n	404912 <socket+0xca>
  40485e:	e04a      	b.n	4048f6 <socket+0xae>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404860:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404862:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  404866:	7a9b      	ldrb	r3, [r3, #10]
  404868:	f013 0fff 	tst.w	r3, #255	; 0xff
  40486c:	d136      	bne.n	4048dc <socket+0x94>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40486e:	482a      	ldr	r0, [pc, #168]	; (404918 <socket+0xd0>)
  404870:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404874:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404876:	2210      	movs	r2, #16
  404878:	2100      	movs	r1, #0
  40487a:	4b28      	ldr	r3, [pc, #160]	; (40491c <socket+0xd4>)
  40487c:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  40487e:	4b26      	ldr	r3, [pc, #152]	; (404918 <socket+0xd0>)
  404880:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404884:	2201      	movs	r2, #1
  404886:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  404888:	4a25      	ldr	r2, [pc, #148]	; (404920 <socket+0xd8>)
  40488a:	8813      	ldrh	r3, [r2, #0]
  40488c:	3301      	adds	r3, #1
  40488e:	b29b      	uxth	r3, r3
  404890:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404892:	8813      	ldrh	r3, [r2, #0]
  404894:	b29b      	uxth	r3, r3
  404896:	b91b      	cbnz	r3, 4048a0 <socket+0x58>
					++gu16SessionID;
  404898:	8813      	ldrh	r3, [r2, #0]
  40489a:	3301      	adds	r3, #1
  40489c:	b29b      	uxth	r3, r3
  40489e:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4048a0:	4b1f      	ldr	r3, [pc, #124]	; (404920 <socket+0xd8>)
  4048a2:	881a      	ldrh	r2, [r3, #0]
  4048a4:	b292      	uxth	r2, r2
  4048a6:	4b1c      	ldr	r3, [pc, #112]	; (404918 <socket+0xd0>)
  4048a8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4048ac:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4048ae:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4048b0:	f016 0f01 	tst.w	r6, #1
  4048b4:	d02d      	beq.n	404912 <socket+0xca>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4048b6:	aa06      	add	r2, sp, #24
  4048b8:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4048bc:	4b16      	ldr	r3, [pc, #88]	; (404918 <socket+0xd0>)
  4048be:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4048c2:	2321      	movs	r3, #33	; 0x21
  4048c4:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4048c6:	2300      	movs	r3, #0
  4048c8:	9302      	str	r3, [sp, #8]
  4048ca:	9301      	str	r3, [sp, #4]
  4048cc:	9300      	str	r3, [sp, #0]
  4048ce:	2304      	movs	r3, #4
  4048d0:	2150      	movs	r1, #80	; 0x50
  4048d2:	2002      	movs	r0, #2
  4048d4:	4d13      	ldr	r5, [pc, #76]	; (404924 <socket+0xdc>)
  4048d6:	47a8      	blx	r5
  4048d8:	e01b      	b.n	404912 <socket+0xca>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  4048da:	480f      	ldr	r0, [pc, #60]	; (404918 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  4048dc:	3401      	adds	r4, #1
  4048de:	b2e4      	uxtb	r4, r4
  4048e0:	428c      	cmp	r4, r1
  4048e2:	d3bd      	bcc.n	404860 <socket+0x18>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  4048e4:	f04f 34ff 	mov.w	r4, #4294967295
  4048e8:	e013      	b.n	404912 <socket+0xca>
  4048ea:	f04f 34ff 	mov.w	r4, #4294967295
  4048ee:	e010      	b.n	404912 <socket+0xca>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  4048f0:	2107      	movs	r1, #7
			u8Count = 0;
  4048f2:	2400      	movs	r4, #0
  4048f4:	e001      	b.n	4048fa <socket+0xb2>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4048f6:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  4048f8:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4048fa:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4048fc:	4b06      	ldr	r3, [pc, #24]	; (404918 <socket+0xd0>)
  4048fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404902:	7a9b      	ldrb	r3, [r3, #10]
  404904:	f013 0fff 	tst.w	r3, #255	; 0xff
  404908:	d1e7      	bne.n	4048da <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40490a:	4803      	ldr	r0, [pc, #12]	; (404918 <socket+0xd0>)
  40490c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404910:	e7b0      	b.n	404874 <socket+0x2c>
				break;
			}
		}
	}
	return sock;
}
  404912:	4620      	mov	r0, r4
  404914:	b006      	add	sp, #24
  404916:	bd70      	pop	{r4, r5, r6, pc}
  404918:	2000be3c 	.word	0x2000be3c
  40491c:	004024b5 	.word	0x004024b5
  404920:	20000b62 	.word	0x20000b62
  404924:	00402651 	.word	0x00402651

00404928 <bind>:
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404928:	b339      	cbz	r1, 40497a <bind+0x52>

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  40492a:	b510      	push	{r4, lr}
  40492c:	b088      	sub	sp, #32
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40492e:	2800      	cmp	r0, #0
  404930:	db26      	blt.n	404980 <bind+0x58>
  404932:	4b18      	ldr	r3, [pc, #96]	; (404994 <bind+0x6c>)
  404934:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404938:	7a9b      	ldrb	r3, [r3, #10]
  40493a:	b2db      	uxtb	r3, r3
  40493c:	2b01      	cmp	r3, #1
  40493e:	d122      	bne.n	404986 <bind+0x5e>
  404940:	b322      	cbz	r2, 40498c <bind+0x64>
  404942:	4604      	mov	r4, r0
	{
		tstrBindCmd			strBind;

		/* Build the bind request. */
		strBind.sock = sock;
  404944:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404948:	2208      	movs	r2, #8
  40494a:	a805      	add	r0, sp, #20
  40494c:	4b12      	ldr	r3, [pc, #72]	; (404998 <bind+0x70>)
  40494e:	4798      	blx	r3

		strBind.strAddr.u16Family	= strBind.strAddr.u16Family;
		strBind.strAddr.u16Port		= strBind.strAddr.u16Port;
		strBind.strAddr.u32IPAddr	= strBind.strAddr.u32IPAddr;
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
  404950:	4810      	ldr	r0, [pc, #64]	; (404994 <bind+0x6c>)
  404952:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404956:	88c3      	ldrh	r3, [r0, #6]
  404958:	f8ad 301e 	strh.w	r3, [sp, #30]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_BIND, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
  40495c:	2300      	movs	r3, #0
  40495e:	9302      	str	r3, [sp, #8]
  404960:	9301      	str	r3, [sp, #4]
  404962:	9300      	str	r3, [sp, #0]
  404964:	230c      	movs	r3, #12
  404966:	aa05      	add	r2, sp, #20
  404968:	2141      	movs	r1, #65	; 0x41
  40496a:	2002      	movs	r0, #2
  40496c:	4c0b      	ldr	r4, [pc, #44]	; (40499c <bind+0x74>)
  40496e:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404970:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404972:	bf18      	it	ne
  404974:	f06f 0008 	mvnne.w	r0, #8
  404978:	e00a      	b.n	404990 <bind+0x68>
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40497a:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40497e:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404980:	f06f 0005 	mvn.w	r0, #5
  404984:	e004      	b.n	404990 <bind+0x68>
  404986:	f06f 0005 	mvn.w	r0, #5
  40498a:	e001      	b.n	404990 <bind+0x68>
  40498c:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  404990:	b008      	add	sp, #32
  404992:	bd10      	pop	{r4, pc}
  404994:	2000be3c 	.word	0x2000be3c
  404998:	004024a1 	.word	0x004024a1
  40499c:	00402651 	.word	0x00402651

004049a0 <listen>:
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  4049a0:	2800      	cmp	r0, #0
  4049a2:	db21      	blt.n	4049e8 <listen+0x48>
  4049a4:	4b14      	ldr	r3, [pc, #80]	; (4049f8 <listen+0x58>)
  4049a6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4049aa:	7a9b      	ldrb	r3, [r3, #10]
  4049ac:	b2db      	uxtb	r3, r3
  4049ae:	2b01      	cmp	r3, #1
  4049b0:	d11d      	bne.n	4049ee <listen+0x4e>

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
  4049b2:	b510      	push	{r4, lr}
  4049b4:	b086      	sub	sp, #24
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
  4049b6:	f88d 0014 	strb.w	r0, [sp, #20]
		strListen.u8BackLog = backlog;
  4049ba:	f88d 1015 	strb.w	r1, [sp, #21]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
  4049be:	4b0e      	ldr	r3, [pc, #56]	; (4049f8 <listen+0x58>)
  4049c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4049c4:	88c3      	ldrh	r3, [r0, #6]
  4049c6:	f8ad 3016 	strh.w	r3, [sp, #22]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
  4049ca:	2300      	movs	r3, #0
  4049cc:	9302      	str	r3, [sp, #8]
  4049ce:	9301      	str	r3, [sp, #4]
  4049d0:	9300      	str	r3, [sp, #0]
  4049d2:	2304      	movs	r3, #4
  4049d4:	aa05      	add	r2, sp, #20
  4049d6:	2142      	movs	r1, #66	; 0x42
  4049d8:	2002      	movs	r0, #2
  4049da:	4c08      	ldr	r4, [pc, #32]	; (4049fc <listen+0x5c>)
  4049dc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4049de:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4049e0:	bf18      	it	ne
  4049e2:	f06f 0008 	mvnne.w	r0, #8
  4049e6:	e005      	b.n	4049f4 <listen+0x54>
Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4049e8:	f06f 0005 	mvn.w	r0, #5
  4049ec:	4770      	bx	lr
  4049ee:	f06f 0005 	mvn.w	r0, #5
  4049f2:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  4049f4:	b006      	add	sp, #24
  4049f6:	bd10      	pop	{r4, pc}
  4049f8:	2000be3c 	.word	0x2000be3c
  4049fc:	00402651 	.word	0x00402651

00404a00 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
  404a00:	2800      	cmp	r0, #0
  404a02:	db0a      	blt.n	404a1a <accept+0x1a>
  404a04:	4b06      	ldr	r3, [pc, #24]	; (404a20 <accept+0x20>)
  404a06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404a0a:	7a83      	ldrb	r3, [r0, #10]
  404a0c:	b2db      	uxtb	r3, r3
	{
		s8Ret = SOCK_ERR_NO_ERROR;
  404a0e:	2b01      	cmp	r3, #1
  404a10:	bf14      	ite	ne
  404a12:	f06f 0005 	mvnne.w	r0, #5
  404a16:	2000      	moveq	r0, #0
  404a18:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404a1a:	f06f 0005 	mvn.w	r0, #5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
	{
		s8Ret = SOCK_ERR_NO_ERROR;
	}
	return s8Ret;
}
  404a1e:	4770      	bx	lr
  404a20:	2000be3c 	.word	0x2000be3c

00404a24 <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404a24:	2800      	cmp	r0, #0
  404a26:	db38      	blt.n	404a9a <connect+0x76>
  404a28:	2900      	cmp	r1, #0
  404a2a:	d039      	beq.n	404aa0 <connect+0x7c>
  404a2c:	4b22      	ldr	r3, [pc, #136]	; (404ab8 <connect+0x94>)
  404a2e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a32:	7a9b      	ldrb	r3, [r3, #10]
  404a34:	b2db      	uxtb	r3, r3
  404a36:	2b01      	cmp	r3, #1
  404a38:	d135      	bne.n	404aa6 <connect+0x82>
  404a3a:	2a00      	cmp	r2, #0
  404a3c:	d036      	beq.n	404aac <connect+0x88>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404a3e:	b530      	push	{r4, r5, lr}
  404a40:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404a42:	4b1d      	ldr	r3, [pc, #116]	; (404ab8 <connect+0x94>)
  404a44:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a48:	7adb      	ldrb	r3, [r3, #11]
  404a4a:	f013 0f01 	tst.w	r3, #1
  404a4e:	d007      	beq.n	404a60 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404a50:	4b19      	ldr	r3, [pc, #100]	; (404ab8 <connect+0x94>)
  404a52:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a56:	7adb      	ldrb	r3, [r3, #11]
  404a58:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404a5c:	254b      	movs	r5, #75	; 0x4b
  404a5e:	e000      	b.n	404a62 <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404a60:	2544      	movs	r5, #68	; 0x44
  404a62:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  404a64:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404a68:	2208      	movs	r2, #8
  404a6a:	a805      	add	r0, sp, #20
  404a6c:	4b13      	ldr	r3, [pc, #76]	; (404abc <connect+0x98>)
  404a6e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404a70:	4811      	ldr	r0, [pc, #68]	; (404ab8 <connect+0x94>)
  404a72:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404a76:	88c3      	ldrh	r3, [r0, #6]
  404a78:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404a7c:	2300      	movs	r3, #0
  404a7e:	9302      	str	r3, [sp, #8]
  404a80:	9301      	str	r3, [sp, #4]
  404a82:	9300      	str	r3, [sp, #0]
  404a84:	230c      	movs	r3, #12
  404a86:	aa05      	add	r2, sp, #20
  404a88:	4629      	mov	r1, r5
  404a8a:	2002      	movs	r0, #2
  404a8c:	4c0c      	ldr	r4, [pc, #48]	; (404ac0 <connect+0x9c>)
  404a8e:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404a90:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404a92:	bf18      	it	ne
  404a94:	f06f 0008 	mvnne.w	r0, #8
  404a98:	e00b      	b.n	404ab2 <connect+0x8e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404a9a:	f06f 0005 	mvn.w	r0, #5
  404a9e:	4770      	bx	lr
  404aa0:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  404aa4:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404aa6:	f06f 0005 	mvn.w	r0, #5
  404aaa:	4770      	bx	lr
  404aac:	f06f 0005 	mvn.w	r0, #5
  404ab0:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  404ab2:	b009      	add	sp, #36	; 0x24
  404ab4:	bd30      	pop	{r4, r5, pc}
  404ab6:	bf00      	nop
  404ab8:	2000be3c 	.word	0x2000be3c
  404abc:	004024a1 	.word	0x004024a1
  404ac0:	00402651 	.word	0x00402651

00404ac4 <send>:
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404ac4:	2800      	cmp	r0, #0
  404ac6:	db3b      	blt.n	404b40 <send+0x7c>
  404ac8:	2900      	cmp	r1, #0
  404aca:	d03c      	beq.n	404b46 <send+0x82>
  404acc:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404ad0:	d83c      	bhi.n	404b4c <send+0x88>
  404ad2:	4b22      	ldr	r3, [pc, #136]	; (404b5c <send+0x98>)
  404ad4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ad8:	7a9b      	ldrb	r3, [r3, #10]
  404ada:	b2db      	uxtb	r3, r3
  404adc:	2b01      	cmp	r3, #1
  404ade:	d138      	bne.n	404b52 <send+0x8e>

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404ae0:	b510      	push	{r4, lr}
  404ae2:	b088      	sub	sp, #32
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404ae4:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404ae8:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404aec:	4b1b      	ldr	r3, [pc, #108]	; (404b5c <send+0x98>)
  404aee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404af2:	88db      	ldrh	r3, [r3, #6]
  404af4:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404af8:	2807      	cmp	r0, #7
  404afa:	bfb4      	ite	lt
  404afc:	2450      	movlt	r4, #80	; 0x50
  404afe:	2444      	movge	r4, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404b00:	4b16      	ldr	r3, [pc, #88]	; (404b5c <send+0x98>)
  404b02:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404b06:	7adb      	ldrb	r3, [r3, #11]
  404b08:	f013 0f01 	tst.w	r3, #1
  404b0c:	d006      	beq.n	404b1c <send+0x58>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404b0e:	4b13      	ldr	r3, [pc, #76]	; (404b5c <send+0x98>)
  404b10:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404b14:	8904      	ldrh	r4, [r0, #8]
  404b16:	b2a4      	uxth	r4, r4
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404b18:	204c      	movs	r0, #76	; 0x4c
  404b1a:	e000      	b.n	404b1e <send+0x5a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  404b1c:	2045      	movs	r0, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404b1e:	9402      	str	r4, [sp, #8]
  404b20:	9201      	str	r2, [sp, #4]
  404b22:	9100      	str	r1, [sp, #0]
  404b24:	2310      	movs	r3, #16
  404b26:	eb0d 0203 	add.w	r2, sp, r3
  404b2a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
  404b2e:	2002      	movs	r0, #2
  404b30:	4c0b      	ldr	r4, [pc, #44]	; (404b60 <send+0x9c>)
  404b32:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404b34:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404b36:	bf0c      	ite	eq
  404b38:	2000      	moveq	r0, #0
  404b3a:	f06f 000d 	mvnne.w	r0, #13
  404b3e:	e00b      	b.n	404b58 <send+0x94>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b40:	f06f 0005 	mvn.w	r0, #5
  404b44:	4770      	bx	lr
  404b46:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  404b4a:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b4c:	f06f 0005 	mvn.w	r0, #5
  404b50:	4770      	bx	lr
  404b52:	f06f 0005 	mvn.w	r0, #5
  404b56:	4770      	bx	lr
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  404b58:	b008      	add	sp, #32
  404b5a:	bd10      	pop	{r4, pc}
  404b5c:	2000be3c 	.word	0x2000be3c
  404b60:	00402651 	.word	0x00402651

00404b64 <sendto>:

Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
  404b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b66:	b089      	sub	sp, #36	; 0x24
  404b68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404b6a:	2800      	cmp	r0, #0
  404b6c:	db3f      	blt.n	404bee <sendto+0x8a>
  404b6e:	2900      	cmp	r1, #0
  404b70:	d040      	beq.n	404bf4 <sendto+0x90>
  404b72:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404b76:	d840      	bhi.n	404bfa <sendto+0x96>
  404b78:	4b25      	ldr	r3, [pc, #148]	; (404c10 <sendto+0xac>)
  404b7a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404b7e:	7a9b      	ldrb	r3, [r3, #10]
  404b80:	b2db      	uxtb	r3, r3
  404b82:	2b01      	cmp	r3, #1
  404b84:	d13c      	bne.n	404c00 <sendto+0x9c>
	{
		if(gastrSockets[sock].bIsUsed)
  404b86:	4b22      	ldr	r3, [pc, #136]	; (404c10 <sendto+0xac>)
  404b88:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404b8c:	7a9b      	ldrb	r3, [r3, #10]
  404b8e:	f013 0fff 	tst.w	r3, #255	; 0xff
  404b92:	d038      	beq.n	404c06 <sendto+0xa2>
  404b94:	4604      	mov	r4, r0
  404b96:	4616      	mov	r6, r2
  404b98:	460f      	mov	r7, r1
		{
			tstrSendCmd	strSendTo;

			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
  404b9a:	2210      	movs	r2, #16
  404b9c:	2100      	movs	r1, #0
  404b9e:	eb0d 0002 	add.w	r0, sp, r2
  404ba2:	4b1c      	ldr	r3, [pc, #112]	; (404c14 <sendto+0xb0>)
  404ba4:	4798      	blx	r3

			strSendTo.sock			= sock;
  404ba6:	f88d 4010 	strb.w	r4, [sp, #16]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
  404baa:	f8ad 6012 	strh.w	r6, [sp, #18]
			strSendTo.u16SessionID	= gastrSockets[sock].u16SessionID;
  404bae:	4818      	ldr	r0, [pc, #96]	; (404c10 <sendto+0xac>)
  404bb0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404bb4:	88c3      	ldrh	r3, [r0, #6]
  404bb6:	f8ad 301c 	strh.w	r3, [sp, #28]
			
			if(pstrDestAddr != NULL)
  404bba:	b13d      	cbz	r5, 404bcc <sendto+0x68>
			{
				struct sockaddr_in	*pstrAddr;
				pstrAddr = (void*)pstrDestAddr;

				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
  404bbc:	882b      	ldrh	r3, [r5, #0]
  404bbe:	f8ad 3014 	strh.w	r3, [sp, #20]
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
  404bc2:	886b      	ldrh	r3, [r5, #2]
  404bc4:	f8ad 3016 	strh.w	r3, [sp, #22]
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
  404bc8:	686b      	ldr	r3, [r5, #4]
  404bca:	9306      	str	r3, [sp, #24]
			}
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd),
  404bcc:	2344      	movs	r3, #68	; 0x44
  404bce:	9302      	str	r3, [sp, #8]
  404bd0:	9601      	str	r6, [sp, #4]
  404bd2:	9700      	str	r7, [sp, #0]
  404bd4:	2310      	movs	r3, #16
  404bd6:	eb0d 0203 	add.w	r2, sp, r3
  404bda:	21c7      	movs	r1, #199	; 0xc7
  404bdc:	2002      	movs	r0, #2
  404bde:	4c0e      	ldr	r4, [pc, #56]	; (404c18 <sendto+0xb4>)
  404be0:	47a0      	blx	r4
				pvSendBuffer, u16SendLength, UDP_TX_PACKET_OFFSET);

			if(s16Ret != SOCK_ERR_NO_ERROR)
  404be2:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404be4:	bf0c      	ite	eq
  404be6:	2000      	moveq	r0, #0
  404be8:	f06f 000d 	mvnne.w	r0, #13
  404bec:	e00d      	b.n	404c0a <sendto+0xa6>
Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404bee:	f06f 0005 	mvn.w	r0, #5
  404bf2:	e00a      	b.n	404c0a <sendto+0xa6>
  404bf4:	f06f 0005 	mvn.w	r0, #5
  404bf8:	e007      	b.n	404c0a <sendto+0xa6>
  404bfa:	f06f 0005 	mvn.w	r0, #5
  404bfe:	e004      	b.n	404c0a <sendto+0xa6>
  404c00:	f06f 0005 	mvn.w	r0, #5
  404c04:	e001      	b.n	404c0a <sendto+0xa6>
  404c06:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  404c0a:	b009      	add	sp, #36	; 0x24
  404c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c0e:	bf00      	nop
  404c10:	2000be3c 	.word	0x2000be3c
  404c14:	004024b5 	.word	0x004024b5
  404c18:	00402651 	.word	0x00402651

00404c1c <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404c1c:	2800      	cmp	r0, #0
  404c1e:	db3c      	blt.n	404c9a <recv+0x7e>
  404c20:	2900      	cmp	r1, #0
  404c22:	d03d      	beq.n	404ca0 <recv+0x84>
  404c24:	2a00      	cmp	r2, #0
  404c26:	d03e      	beq.n	404ca6 <recv+0x8a>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  404c28:	b570      	push	{r4, r5, r6, lr}
  404c2a:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404c2c:	4c22      	ldr	r4, [pc, #136]	; (404cb8 <recv+0x9c>)
  404c2e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  404c32:	7aa4      	ldrb	r4, [r4, #10]
  404c34:	b2e4      	uxtb	r4, r4
  404c36:	2c01      	cmp	r4, #1
  404c38:	d138      	bne.n	404cac <recv+0x90>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404c3a:	4e1f      	ldr	r6, [pc, #124]	; (404cb8 <recv+0x9c>)
  404c3c:	0105      	lsls	r5, r0, #4
  404c3e:	1974      	adds	r4, r6, r5
  404c40:	5171      	str	r1, [r6, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404c42:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404c44:	7b22      	ldrb	r2, [r4, #12]
  404c46:	f012 0fff 	tst.w	r2, #255	; 0xff
  404c4a:	d132      	bne.n	404cb2 <recv+0x96>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404c4c:	eb06 1200 	add.w	r2, r6, r0, lsl #4
  404c50:	2101      	movs	r1, #1
  404c52:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404c54:	7ad2      	ldrb	r2, [r2, #11]
  404c56:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404c58:	2a00      	cmp	r2, #0
  404c5a:	bf0c      	ite	eq
  404c5c:	2146      	moveq	r1, #70	; 0x46
  404c5e:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404c60:	b91b      	cbnz	r3, 404c6a <recv+0x4e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404c62:	f04f 33ff 	mov.w	r3, #4294967295
  404c66:	9304      	str	r3, [sp, #16]
  404c68:	e000      	b.n	404c6c <recv+0x50>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404c6a:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  404c6c:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404c70:	4b11      	ldr	r3, [pc, #68]	; (404cb8 <recv+0x9c>)
  404c72:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404c76:	88c3      	ldrh	r3, [r0, #6]
  404c78:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404c7c:	2300      	movs	r3, #0
  404c7e:	9302      	str	r3, [sp, #8]
  404c80:	9301      	str	r3, [sp, #4]
  404c82:	9300      	str	r3, [sp, #0]
  404c84:	2308      	movs	r3, #8
  404c86:	aa04      	add	r2, sp, #16
  404c88:	2002      	movs	r0, #2
  404c8a:	4c0c      	ldr	r4, [pc, #48]	; (404cbc <recv+0xa0>)
  404c8c:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404c8e:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404c90:	bf0c      	ite	eq
  404c92:	2000      	moveq	r0, #0
  404c94:	f06f 000d 	mvnne.w	r0, #13
  404c98:	e00c      	b.n	404cb4 <recv+0x98>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404c9a:	f06f 0005 	mvn.w	r0, #5
  404c9e:	4770      	bx	lr
  404ca0:	f06f 0005 	mvn.w	r0, #5
  404ca4:	4770      	bx	lr
  404ca6:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  404caa:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404cac:	f06f 0005 	mvn.w	r0, #5
  404cb0:	e000      	b.n	404cb4 <recv+0x98>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  404cb2:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  404cb4:	b006      	add	sp, #24
  404cb6:	bd70      	pop	{r4, r5, r6, pc}
  404cb8:	2000be3c 	.word	0x2000be3c
  404cbc:	00402651 	.word	0x00402651

00404cc0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404cc0:	b530      	push	{r4, r5, lr}
  404cc2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404cc4:	2800      	cmp	r0, #0
  404cc6:	db2e      	blt.n	404d26 <close+0x66>
  404cc8:	4b1b      	ldr	r3, [pc, #108]	; (404d38 <close+0x78>)
  404cca:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404cce:	7a9b      	ldrb	r3, [r3, #10]
  404cd0:	b2db      	uxtb	r3, r3
  404cd2:	2b01      	cmp	r3, #1
  404cd4:	d12a      	bne.n	404d2c <close+0x6c>
  404cd6:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404cd8:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404cdc:	4b16      	ldr	r3, [pc, #88]	; (404d38 <close+0x78>)
  404cde:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ce2:	88da      	ldrh	r2, [r3, #6]
  404ce4:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404ce8:	2200      	movs	r2, #0
  404cea:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404cec:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404cee:	7adb      	ldrb	r3, [r3, #11]
  404cf0:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404cf4:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404cf6:	9202      	str	r2, [sp, #8]
  404cf8:	9201      	str	r2, [sp, #4]
  404cfa:	9200      	str	r2, [sp, #0]
  404cfc:	f04f 0304 	mov.w	r3, #4
  404d00:	aa05      	add	r2, sp, #20
  404d02:	bf0c      	ite	eq
  404d04:	2149      	moveq	r1, #73	; 0x49
  404d06:	214e      	movne	r1, #78	; 0x4e
  404d08:	2002      	movs	r0, #2
  404d0a:	4d0c      	ldr	r5, [pc, #48]	; (404d3c <close+0x7c>)
  404d0c:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404d0e:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404d10:	bf18      	it	ne
  404d12:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404d16:	2210      	movs	r2, #16
  404d18:	2100      	movs	r1, #0
  404d1a:	4807      	ldr	r0, [pc, #28]	; (404d38 <close+0x78>)
  404d1c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404d20:	4b07      	ldr	r3, [pc, #28]	; (404d40 <close+0x80>)
  404d22:	4798      	blx	r3
  404d24:	e004      	b.n	404d30 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404d26:	f06f 0505 	mvn.w	r5, #5
  404d2a:	e001      	b.n	404d30 <close+0x70>
  404d2c:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  404d30:	4628      	mov	r0, r5
  404d32:	b007      	add	sp, #28
  404d34:	bd30      	pop	{r4, r5, pc}
  404d36:	bf00      	nop
  404d38:	2000be3c 	.word	0x2000be3c
  404d3c:	00402651 	.word	0x00402651
  404d40:	004024b5 	.word	0x004024b5

00404d44 <recvfrom>:
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404d44:	2800      	cmp	r0, #0
  404d46:	db3e      	blt.n	404dc6 <recvfrom+0x82>
  404d48:	2900      	cmp	r1, #0
  404d4a:	d03f      	beq.n	404dcc <recvfrom+0x88>
  404d4c:	2a00      	cmp	r2, #0
  404d4e:	d040      	beq.n	404dd2 <recvfrom+0x8e>

Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  404d50:	b570      	push	{r4, r5, r6, lr}
  404d52:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404d54:	4c24      	ldr	r4, [pc, #144]	; (404de8 <recvfrom+0xa4>)
  404d56:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  404d5a:	7aa4      	ldrb	r4, [r4, #10]
  404d5c:	b2e4      	uxtb	r4, r4
  404d5e:	2c01      	cmp	r4, #1
  404d60:	d13a      	bne.n	404dd8 <recvfrom+0x94>
	{
		if(gastrSockets[sock].bIsUsed)
  404d62:	4c21      	ldr	r4, [pc, #132]	; (404de8 <recvfrom+0xa4>)
  404d64:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  404d68:	7aa4      	ldrb	r4, [r4, #10]
  404d6a:	f014 0fff 	tst.w	r4, #255	; 0xff
  404d6e:	d036      	beq.n	404dde <recvfrom+0x9a>
		{
			s16Ret = SOCK_ERR_NO_ERROR;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
  404d70:	4e1d      	ldr	r6, [pc, #116]	; (404de8 <recvfrom+0xa4>)
  404d72:	0105      	lsls	r5, r0, #4
  404d74:	1974      	adds	r4, r6, r5
  404d76:	5171      	str	r1, [r6, r5]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
  404d78:	80a2      	strh	r2, [r4, #4]

			if(!gastrSockets[sock].bIsRecvPending)
  404d7a:	7b22      	ldrb	r2, [r4, #12]
  404d7c:	f012 0fff 	tst.w	r2, #255	; 0xff
  404d80:	d12f      	bne.n	404de2 <recvfrom+0x9e>
			{
				tstrRecvCmd	strRecv;

				gastrSockets[sock].bIsRecvPending = 1;
  404d82:	eb06 1200 	add.w	r2, r6, r0, lsl #4
  404d86:	2101      	movs	r1, #1
  404d88:	7311      	strb	r1, [r2, #12]

				/* Check the timeout value. */
				if(u32Timeoutmsec == 0)
  404d8a:	b91b      	cbnz	r3, 404d94 <recvfrom+0x50>
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404d8c:	f04f 33ff 	mov.w	r3, #4294967295
  404d90:	9304      	str	r3, [sp, #16]
  404d92:	e000      	b.n	404d96 <recvfrom+0x52>
				else
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404d94:	9304      	str	r3, [sp, #16]
				strRecv.sock = sock;
  404d96:	f88d 0014 	strb.w	r0, [sp, #20]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404d9a:	4b13      	ldr	r3, [pc, #76]	; (404de8 <recvfrom+0xa4>)
  404d9c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404da0:	88c3      	ldrh	r3, [r0, #6]
  404da2:	f8ad 3016 	strh.w	r3, [sp, #22]
				
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404da6:	2300      	movs	r3, #0
  404da8:	9302      	str	r3, [sp, #8]
  404daa:	9301      	str	r3, [sp, #4]
  404dac:	9300      	str	r3, [sp, #0]
  404dae:	2308      	movs	r3, #8
  404db0:	aa04      	add	r2, sp, #16
  404db2:	2148      	movs	r1, #72	; 0x48
  404db4:	2002      	movs	r0, #2
  404db6:	4c0d      	ldr	r4, [pc, #52]	; (404dec <recvfrom+0xa8>)
  404db8:	47a0      	blx	r4
				if(s16Ret != SOCK_ERR_NO_ERROR)
  404dba:	2800      	cmp	r0, #0
				{
					s16Ret = SOCK_ERR_BUFFER_FULL;
  404dbc:	bf0c      	ite	eq
  404dbe:	2000      	moveq	r0, #0
  404dc0:	f06f 000d 	mvnne.w	r0, #13
  404dc4:	e00e      	b.n	404de4 <recvfrom+0xa0>
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
  404dc6:	f06f 0005 	mvn.w	r0, #5
  404dca:	4770      	bx	lr
  404dcc:	f06f 0005 	mvn.w	r0, #5
  404dd0:	4770      	bx	lr
  404dd2:	f06f 0005 	mvn.w	r0, #5
	}
	return s16Ret;
}
  404dd6:	4770      	bx	lr
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
  404dd8:	f06f 0005 	mvn.w	r0, #5
  404ddc:	e002      	b.n	404de4 <recvfrom+0xa0>
Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
  404dde:	2000      	movs	r0, #0
  404de0:	e000      	b.n	404de4 <recvfrom+0xa0>
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		if(gastrSockets[sock].bIsUsed)
		{
			s16Ret = SOCK_ERR_NO_ERROR;
  404de2:	2000      	movs	r0, #0
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
	}
	return s16Ret;
}
  404de4:	b006      	add	sp, #24
  404de6:	bd70      	pop	{r4, r5, r6, pc}
  404de8:	2000be3c 	.word	0x2000be3c
  404dec:	00402651 	.word	0x00402651

00404df0 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404df0:	b570      	push	{r4, r5, r6, lr}
  404df2:	b082      	sub	sp, #8
  404df4:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404df6:	4b2e      	ldr	r3, [pc, #184]	; (404eb0 <spi_flash_enable+0xc0>)
  404df8:	4798      	blx	r3
  404dfa:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404dfe:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404e02:	d350      	bcc.n	404ea6 <spi_flash_enable+0xb6>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404e04:	a901      	add	r1, sp, #4
  404e06:	f241 4010 	movw	r0, #5136	; 0x1410
  404e0a:	4b2a      	ldr	r3, [pc, #168]	; (404eb4 <spi_flash_enable+0xc4>)
  404e0c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404e0e:	4604      	mov	r4, r0
  404e10:	2800      	cmp	r0, #0
  404e12:	d149      	bne.n	404ea8 <spi_flash_enable+0xb8>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  404e14:	9901      	ldr	r1, [sp, #4]
  404e16:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  404e1a:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
  404e1e:	f041 7188 	orr.w	r1, r1, #17825792	; 0x1100000
  404e22:	f441 3188 	orr.w	r1, r1, #69632	; 0x11000
  404e26:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404e28:	f241 4010 	movw	r0, #5136	; 0x1410
  404e2c:	4b22      	ldr	r3, [pc, #136]	; (404eb8 <spi_flash_enable+0xc8>)
  404e2e:	4798      	blx	r3
		if(enable) {
  404e30:	b1b5      	cbz	r5, 404e60 <spi_flash_enable+0x70>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404e32:	2100      	movs	r1, #0
  404e34:	4821      	ldr	r0, [pc, #132]	; (404ebc <spi_flash_enable+0xcc>)
  404e36:	4d20      	ldr	r5, [pc, #128]	; (404eb8 <spi_flash_enable+0xc8>)
  404e38:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404e3a:	21ab      	movs	r1, #171	; 0xab
  404e3c:	4820      	ldr	r0, [pc, #128]	; (404ec0 <spi_flash_enable+0xd0>)
  404e3e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404e40:	2101      	movs	r1, #1
  404e42:	4820      	ldr	r0, [pc, #128]	; (404ec4 <spi_flash_enable+0xd4>)
  404e44:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404e46:	2100      	movs	r1, #0
  404e48:	481f      	ldr	r0, [pc, #124]	; (404ec8 <spi_flash_enable+0xd8>)
  404e4a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404e4c:	2181      	movs	r1, #129	; 0x81
  404e4e:	481f      	ldr	r0, [pc, #124]	; (404ecc <spi_flash_enable+0xdc>)
  404e50:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404e52:	4e1f      	ldr	r6, [pc, #124]	; (404ed0 <spi_flash_enable+0xe0>)
  404e54:	4d1f      	ldr	r5, [pc, #124]	; (404ed4 <spi_flash_enable+0xe4>)
  404e56:	4630      	mov	r0, r6
  404e58:	47a8      	blx	r5
  404e5a:	2801      	cmp	r0, #1
  404e5c:	d1fb      	bne.n	404e56 <spi_flash_enable+0x66>
  404e5e:	e015      	b.n	404e8c <spi_flash_enable+0x9c>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404e60:	2100      	movs	r1, #0
  404e62:	4816      	ldr	r0, [pc, #88]	; (404ebc <spi_flash_enable+0xcc>)
  404e64:	4d14      	ldr	r5, [pc, #80]	; (404eb8 <spi_flash_enable+0xc8>)
  404e66:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404e68:	21b9      	movs	r1, #185	; 0xb9
  404e6a:	4815      	ldr	r0, [pc, #84]	; (404ec0 <spi_flash_enable+0xd0>)
  404e6c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404e6e:	2101      	movs	r1, #1
  404e70:	4814      	ldr	r0, [pc, #80]	; (404ec4 <spi_flash_enable+0xd4>)
  404e72:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404e74:	2100      	movs	r1, #0
  404e76:	4814      	ldr	r0, [pc, #80]	; (404ec8 <spi_flash_enable+0xd8>)
  404e78:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404e7a:	2181      	movs	r1, #129	; 0x81
  404e7c:	4813      	ldr	r0, [pc, #76]	; (404ecc <spi_flash_enable+0xdc>)
  404e7e:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404e80:	4e13      	ldr	r6, [pc, #76]	; (404ed0 <spi_flash_enable+0xe0>)
  404e82:	4d14      	ldr	r5, [pc, #80]	; (404ed4 <spi_flash_enable+0xe4>)
  404e84:	4630      	mov	r0, r6
  404e86:	47a8      	blx	r5
  404e88:	2801      	cmp	r0, #1
  404e8a:	d1fb      	bne.n	404e84 <spi_flash_enable+0x94>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  404e8c:	9901      	ldr	r1, [sp, #4]
  404e8e:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  404e92:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
  404e96:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404e9a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404e9c:	f241 4010 	movw	r0, #5136	; 0x1410
  404ea0:	4b05      	ldr	r3, [pc, #20]	; (404eb8 <spi_flash_enable+0xc8>)
  404ea2:	4798      	blx	r3
  404ea4:	e000      	b.n	404ea8 <spi_flash_enable+0xb8>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  404ea6:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404ea8:	4620      	mov	r0, r4
  404eaa:	b002      	add	sp, #8
  404eac:	bd70      	pop	{r4, r5, r6, pc}
  404eae:	bf00      	nop
  404eb0:	004035b5 	.word	0x004035b5
  404eb4:	00403895 	.word	0x00403895
  404eb8:	004038a1 	.word	0x004038a1
  404ebc:	00010208 	.word	0x00010208
  404ec0:	0001020c 	.word	0x0001020c
  404ec4:	00010214 	.word	0x00010214
  404ec8:	0001021c 	.word	0x0001021c
  404ecc:	00010204 	.word	0x00010204
  404ed0:	00010218 	.word	0x00010218
  404ed4:	00403889 	.word	0x00403889

00404ed8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  404ed8:	b990      	cbnz	r0, 404f00 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ede:	460c      	mov	r4, r1
  404ee0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404ee2:	2a00      	cmp	r2, #0
  404ee4:	dd0f      	ble.n	404f06 <_read+0x2e>
  404ee6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404ee8:	4e08      	ldr	r6, [pc, #32]	; (404f0c <_read+0x34>)
  404eea:	4d09      	ldr	r5, [pc, #36]	; (404f10 <_read+0x38>)
  404eec:	6830      	ldr	r0, [r6, #0]
  404eee:	4621      	mov	r1, r4
  404ef0:	682b      	ldr	r3, [r5, #0]
  404ef2:	4798      	blx	r3
		ptr++;
  404ef4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404ef6:	42a7      	cmp	r7, r4
  404ef8:	d1f8      	bne.n	404eec <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  404efa:	4640      	mov	r0, r8
  404efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  404f00:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  404f04:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404f06:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  404f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f0c:	2000bf00 	.word	0x2000bf00
  404f10:	2000bef8 	.word	0x2000bef8

00404f14 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404f14:	460b      	mov	r3, r1
  404f16:	b119      	cbz	r1, 404f20 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  404f18:	6809      	ldr	r1, [r1, #0]
  404f1a:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  404f1c:	685b      	ldr	r3, [r3, #4]
  404f1e:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  404f20:	b11a      	cbz	r2, 404f2a <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  404f22:	6813      	ldr	r3, [r2, #0]
  404f24:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  404f26:	6853      	ldr	r3, [r2, #4]
  404f28:	61c3      	str	r3, [r0, #28]
  404f2a:	4770      	bx	lr

00404f2c <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404f2c:	460b      	mov	r3, r1
  404f2e:	b119      	cbz	r1, 404f38 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  404f30:	6809      	ldr	r1, [r1, #0]
  404f32:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  404f34:	685b      	ldr	r3, [r3, #4]
  404f36:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  404f38:	b11a      	cbz	r2, 404f42 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  404f3a:	6813      	ldr	r3, [r2, #0]
  404f3c:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  404f3e:	6853      	ldr	r3, [r2, #4]
  404f40:	6143      	str	r3, [r0, #20]
  404f42:	4770      	bx	lr

00404f44 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  404f44:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  404f48:	f021 0101 	bic.w	r1, r1, #1
  404f4c:	0589      	lsls	r1, r1, #22
  404f4e:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  404f50:	6201      	str	r1, [r0, #32]
  404f52:	4770      	bx	lr

00404f54 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404f54:	b508      	push	{r3, lr}
  404f56:	2015      	movs	r0, #21
  404f58:	4b01      	ldr	r3, [pc, #4]	; (404f60 <spi_enable_clock+0xc>)
  404f5a:	4798      	blx	r3
  404f5c:	bd08      	pop	{r3, pc}
  404f5e:	bf00      	nop
  404f60:	004058d9 	.word	0x004058d9

00404f64 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  404f64:	b132      	cbz	r2, 404f74 <spi_set_clock_polarity+0x10>
  404f66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  404f6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404f6c:	f043 0301 	orr.w	r3, r3, #1
  404f70:	6303      	str	r3, [r0, #48]	; 0x30
  404f72:	4770      	bx	lr
  404f74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  404f78:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404f7a:	f023 0301 	bic.w	r3, r3, #1
  404f7e:	6303      	str	r3, [r0, #48]	; 0x30
  404f80:	4770      	bx	lr
  404f82:	bf00      	nop

00404f84 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  404f84:	b132      	cbz	r2, 404f94 <spi_set_clock_phase+0x10>
  404f86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  404f8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404f8c:	f043 0302 	orr.w	r3, r3, #2
  404f90:	6303      	str	r3, [r0, #48]	; 0x30
  404f92:	4770      	bx	lr
  404f94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  404f98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404f9a:	f023 0302 	bic.w	r3, r3, #2
  404f9e:	6303      	str	r3, [r0, #48]	; 0x30
  404fa0:	4770      	bx	lr
  404fa2:	bf00      	nop

00404fa4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  404fa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  404fa8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  404fae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  404fb0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404fb2:	431a      	orrs	r2, r3
  404fb4:	630a      	str	r2, [r1, #48]	; 0x30
  404fb6:	4770      	bx	lr

00404fb8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  404fb8:	b16a      	cbz	r2, 404fd6 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  404fba:	b410      	push	{r4}
  404fbc:	4614      	mov	r4, r2
  404fbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  404fc2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  404fc8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  404fca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  404fcc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  404fd0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  404fd2:	2000      	movs	r0, #0
  404fd4:	e002      	b.n	404fdc <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  404fd6:	f04f 30ff 	mov.w	r0, #4294967295
  404fda:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  404fdc:	bc10      	pop	{r4}
  404fde:	4770      	bx	lr

00404fe0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  404fe0:	b410      	push	{r4}
  404fe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  404fe6:	6b08      	ldr	r0, [r1, #48]	; 0x30
  404fe8:	b280      	uxth	r0, r0
  404fea:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  404fec:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  404fee:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  404ff2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  404ff6:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  404ff8:	bc10      	pop	{r4}
  404ffa:	4770      	bx	lr

00404ffc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  404ffc:	6943      	ldr	r3, [r0, #20]
  404ffe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  405002:	bf1d      	ittte	ne
  405004:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  405008:	61c1      	strne	r1, [r0, #28]
	return 0;
  40500a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40500c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40500e:	4770      	bx	lr

00405010 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405010:	6943      	ldr	r3, [r0, #20]
  405012:	f013 0f01 	tst.w	r3, #1
  405016:	d005      	beq.n	405024 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405018:	6983      	ldr	r3, [r0, #24]
  40501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40501e:	600b      	str	r3, [r1, #0]

	return 0;
  405020:	2000      	movs	r0, #0
  405022:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  405024:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  405026:	4770      	bx	lr

00405028 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  405028:	3801      	subs	r0, #1
  40502a:	2802      	cmp	r0, #2
  40502c:	d815      	bhi.n	40505a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405032:	460e      	mov	r6, r1
  405034:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405036:	b19a      	cbz	r2, 405060 <_write+0x38>
  405038:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40503a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 405074 <_write+0x4c>
  40503e:	4f0c      	ldr	r7, [pc, #48]	; (405070 <_write+0x48>)
  405040:	f8d8 0000 	ldr.w	r0, [r8]
  405044:	f815 1b01 	ldrb.w	r1, [r5], #1
  405048:	683b      	ldr	r3, [r7, #0]
  40504a:	4798      	blx	r3
  40504c:	2800      	cmp	r0, #0
  40504e:	db0a      	blt.n	405066 <_write+0x3e>
  405050:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405052:	3c01      	subs	r4, #1
  405054:	d1f4      	bne.n	405040 <_write+0x18>
  405056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40505a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40505e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405060:	2000      	movs	r0, #0
  405062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  405066:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40506e:	bf00      	nop
  405070:	2000befc 	.word	0x2000befc
  405074:	2000bf00 	.word	0x2000bf00

00405078 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  405078:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40507a:	23ac      	movs	r3, #172	; 0xac
  40507c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40507e:	680b      	ldr	r3, [r1, #0]
  405080:	684a      	ldr	r2, [r1, #4]
  405082:	fbb3 f3f2 	udiv	r3, r3, r2
  405086:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  405088:	1e5c      	subs	r4, r3, #1
  40508a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40508e:	4294      	cmp	r4, r2
  405090:	d80a      	bhi.n	4050a8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  405092:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  405094:	688b      	ldr	r3, [r1, #8]
  405096:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  405098:	f240 2302 	movw	r3, #514	; 0x202
  40509c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4050a0:	2350      	movs	r3, #80	; 0x50
  4050a2:	6003      	str	r3, [r0, #0]

	return 0;
  4050a4:	2000      	movs	r0, #0
  4050a6:	e000      	b.n	4050aa <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4050a8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4050aa:	bc10      	pop	{r4}
  4050ac:	4770      	bx	lr
  4050ae:	bf00      	nop

004050b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4050b0:	6943      	ldr	r3, [r0, #20]
  4050b2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4050b6:	bf1a      	itte	ne
  4050b8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4050ba:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4050bc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4050be:	4770      	bx	lr

004050c0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4050c0:	6943      	ldr	r3, [r0, #20]
  4050c2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4050c6:	bf1d      	ittte	ne
  4050c8:	6983      	ldrne	r3, [r0, #24]
  4050ca:	700b      	strbne	r3, [r1, #0]
	return 0;
  4050cc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4050ce:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4050d0:	4770      	bx	lr
  4050d2:	bf00      	nop

004050d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4050d4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4050d6:	480e      	ldr	r0, [pc, #56]	; (405110 <sysclk_init+0x3c>)
  4050d8:	4b0e      	ldr	r3, [pc, #56]	; (405114 <sysclk_init+0x40>)
  4050da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4050dc:	213e      	movs	r1, #62	; 0x3e
  4050de:	2000      	movs	r0, #0
  4050e0:	4b0d      	ldr	r3, [pc, #52]	; (405118 <sysclk_init+0x44>)
  4050e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4050e4:	4c0d      	ldr	r4, [pc, #52]	; (40511c <sysclk_init+0x48>)
  4050e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4050e8:	2800      	cmp	r0, #0
  4050ea:	d0fc      	beq.n	4050e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4050ec:	4b0c      	ldr	r3, [pc, #48]	; (405120 <sysclk_init+0x4c>)
  4050ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4050f0:	4a0c      	ldr	r2, [pc, #48]	; (405124 <sysclk_init+0x50>)
  4050f2:	4b0d      	ldr	r3, [pc, #52]	; (405128 <sysclk_init+0x54>)
  4050f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4050f6:	4c0d      	ldr	r4, [pc, #52]	; (40512c <sysclk_init+0x58>)
  4050f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4050fa:	2800      	cmp	r0, #0
  4050fc:	d0fc      	beq.n	4050f8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4050fe:	2010      	movs	r0, #16
  405100:	4b0b      	ldr	r3, [pc, #44]	; (405130 <sysclk_init+0x5c>)
  405102:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405104:	4b0b      	ldr	r3, [pc, #44]	; (405134 <sysclk_init+0x60>)
  405106:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  405108:	4801      	ldr	r0, [pc, #4]	; (405110 <sysclk_init+0x3c>)
  40510a:	4b02      	ldr	r3, [pc, #8]	; (405114 <sysclk_init+0x40>)
  40510c:	4798      	blx	r3
  40510e:	bd10      	pop	{r4, pc}
  405110:	07270e00 	.word	0x07270e00
  405114:	00405b11 	.word	0x00405b11
  405118:	00405855 	.word	0x00405855
  40511c:	004058a9 	.word	0x004058a9
  405120:	004058b9 	.word	0x004058b9
  405124:	20133f01 	.word	0x20133f01
  405128:	400e0400 	.word	0x400e0400
  40512c:	004058c9 	.word	0x004058c9
  405130:	004057ed 	.word	0x004057ed
  405134:	004059fd 	.word	0x004059fd

00405138 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  405138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40513a:	4840      	ldr	r0, [pc, #256]	; (40523c <board_init+0x104>)
  40513c:	4b40      	ldr	r3, [pc, #256]	; (405240 <board_init+0x108>)
  40513e:	4798      	blx	r3
  405140:	200b      	movs	r0, #11
  405142:	4c40      	ldr	r4, [pc, #256]	; (405244 <board_init+0x10c>)
  405144:	47a0      	blx	r4
  405146:	200c      	movs	r0, #12
  405148:	47a0      	blx	r4
  40514a:	200d      	movs	r0, #13
  40514c:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40514e:	4b3e      	ldr	r3, [pc, #248]	; (405248 <board_init+0x110>)
  405150:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  405154:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405156:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405158:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40515c:	4c3b      	ldr	r4, [pc, #236]	; (40524c <board_init+0x114>)
  40515e:	2704      	movs	r7, #4
  405160:	6167      	str	r7, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405162:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  405166:	6667      	str	r7, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405168:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40516c:	6567      	str	r7, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40516e:	6267      	str	r7, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405170:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405174:	6f22      	ldr	r2, [r4, #112]	; 0x70
  405176:	f022 0204 	bic.w	r2, r2, #4
  40517a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40517c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40517e:	f022 0204 	bic.w	r2, r2, #4
  405182:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405184:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  405188:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40518a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40518c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405190:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405194:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405196:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405198:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40519c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4051a0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4051a2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4051a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4051a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4051ac:	210c      	movs	r1, #12
  4051ae:	4828      	ldr	r0, [pc, #160]	; (405250 <board_init+0x118>)
  4051b0:	4b28      	ldr	r3, [pc, #160]	; (405254 <board_init+0x11c>)
  4051b2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4051b4:	4e28      	ldr	r6, [pc, #160]	; (405258 <board_init+0x120>)
  4051b6:	4631      	mov	r1, r6
  4051b8:	2003      	movs	r0, #3
  4051ba:	4d28      	ldr	r5, [pc, #160]	; (40525c <board_init+0x124>)
  4051bc:	47a8      	blx	r5
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4051be:	4631      	mov	r1, r6
  4051c0:	4638      	mov	r0, r7
  4051c2:	47a8      	blx	r5
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4051c4:	6667      	str	r7, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4051c6:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4051ca:	6567      	str	r7, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4051cc:	6267      	str	r7, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4051ce:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4051d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4051d4:	f023 0304 	bic.w	r3, r3, #4
  4051d8:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4051da:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4051dc:	f023 0304 	bic.w	r3, r3, #4
  4051e0:	6763      	str	r3, [r4, #116]	; 0x74

#endif  

#ifdef CONF_BOARD_NAND

	gpio_configure_pin(PIN_EBI_NANDOE, PIN_EBI_NANDOE_FLAGS);
  4051e2:	4631      	mov	r1, r6
  4051e4:	2049      	movs	r0, #73	; 0x49
  4051e6:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDWE, PIN_EBI_NANDWE_FLAGS);
  4051e8:	4631      	mov	r1, r6
  4051ea:	204a      	movs	r0, #74	; 0x4a
  4051ec:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDCLE, PIN_EBI_NANDCLE_FLAGS);
  4051ee:	4631      	mov	r1, r6
  4051f0:	2051      	movs	r0, #81	; 0x51
  4051f2:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDALE, PIN_EBI_NANDALE_FLAGS);
  4051f4:	4631      	mov	r1, r6
  4051f6:	2050      	movs	r0, #80	; 0x50
  4051f8:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_0, PIN_EBI_NANDIO_0_FLAGS);
  4051fa:	4631      	mov	r1, r6
  4051fc:	2040      	movs	r0, #64	; 0x40
  4051fe:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_1, PIN_EBI_NANDIO_1_FLAGS);
  405200:	4631      	mov	r1, r6
  405202:	2041      	movs	r0, #65	; 0x41
  405204:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_2, PIN_EBI_NANDIO_2_FLAGS);
  405206:	4631      	mov	r1, r6
  405208:	2042      	movs	r0, #66	; 0x42
  40520a:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_3, PIN_EBI_NANDIO_3_FLAGS);
  40520c:	4631      	mov	r1, r6
  40520e:	2043      	movs	r0, #67	; 0x43
  405210:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_4, PIN_EBI_NANDIO_4_FLAGS);
  405212:	4631      	mov	r1, r6
  405214:	2044      	movs	r0, #68	; 0x44
  405216:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_5, PIN_EBI_NANDIO_5_FLAGS);
  405218:	4631      	mov	r1, r6
  40521a:	2045      	movs	r0, #69	; 0x45
  40521c:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
  40521e:	4631      	mov	r1, r6
  405220:	2046      	movs	r0, #70	; 0x46
  405222:	47a8      	blx	r5
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
  405224:	4631      	mov	r1, r6
  405226:	2047      	movs	r0, #71	; 0x47
  405228:	47a8      	blx	r5
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
  40522a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40522e:	204e      	movs	r0, #78	; 0x4e
  405230:	47a8      	blx	r5
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
  405232:	490b      	ldr	r1, [pc, #44]	; (405260 <board_init+0x128>)
  405234:	204d      	movs	r0, #77	; 0x4d
  405236:	47a8      	blx	r5
  405238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40523a:	bf00      	nop
  40523c:	400e1450 	.word	0x400e1450
  405240:	0040592d 	.word	0x0040592d
  405244:	004058d9 	.word	0x004058d9
  405248:	400e1200 	.word	0x400e1200
  40524c:	400e0e00 	.word	0x400e0e00
  405250:	400e1000 	.word	0x400e1000
  405254:	00405515 	.word	0x00405515
  405258:	08000001 	.word	0x08000001
  40525c:	004053f1 	.word	0x004053f1
  405260:	28000001 	.word	0x28000001

00405264 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405264:	b10a      	cbz	r2, 40526a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  405266:	6641      	str	r1, [r0, #100]	; 0x64
  405268:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40526a:	6601      	str	r1, [r0, #96]	; 0x60
  40526c:	4770      	bx	lr
  40526e:	bf00      	nop

00405270 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  405270:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  405272:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  405276:	d02f      	beq.n	4052d8 <pio_set_peripheral+0x68>
  405278:	d807      	bhi.n	40528a <pio_set_peripheral+0x1a>
  40527a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40527e:	d014      	beq.n	4052aa <pio_set_peripheral+0x3a>
  405280:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405284:	d01e      	beq.n	4052c4 <pio_set_peripheral+0x54>
  405286:	b939      	cbnz	r1, 405298 <pio_set_peripheral+0x28>
  405288:	4770      	bx	lr
  40528a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40528e:	d036      	beq.n	4052fe <pio_set_peripheral+0x8e>
  405290:	d804      	bhi.n	40529c <pio_set_peripheral+0x2c>
  405292:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  405296:	d029      	beq.n	4052ec <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405298:	6042      	str	r2, [r0, #4]
  40529a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40529c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4052a0:	d02d      	beq.n	4052fe <pio_set_peripheral+0x8e>
  4052a2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4052a6:	d02a      	beq.n	4052fe <pio_set_peripheral+0x8e>
  4052a8:	e7f6      	b.n	405298 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4052aa:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4052ac:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4052ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4052b0:	43d3      	mvns	r3, r2
  4052b2:	4021      	ands	r1, r4
  4052b4:	4019      	ands	r1, r3
  4052b6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4052b8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4052ba:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4052bc:	4021      	ands	r1, r4
  4052be:	400b      	ands	r3, r1
  4052c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4052c2:	e01a      	b.n	4052fa <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4052c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4052c6:	4313      	orrs	r3, r2
  4052c8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4052ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4052cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4052ce:	400b      	ands	r3, r1
  4052d0:	ea23 0302 	bic.w	r3, r3, r2
  4052d4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4052d6:	e7df      	b.n	405298 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4052d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4052da:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4052dc:	400b      	ands	r3, r1
  4052de:	ea23 0302 	bic.w	r3, r3, r2
  4052e2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4052e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4052e6:	4313      	orrs	r3, r2
  4052e8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4052ea:	e7d5      	b.n	405298 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4052ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4052ee:	4313      	orrs	r3, r2
  4052f0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4052f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4052f4:	4313      	orrs	r3, r2
  4052f6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4052f8:	e7ce      	b.n	405298 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4052fa:	6042      	str	r2, [r0, #4]
}
  4052fc:	bc10      	pop	{r4}
  4052fe:	4770      	bx	lr

00405300 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405300:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405302:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  405306:	bf14      	ite	ne
  405308:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40530a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40530c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  405310:	bf14      	ite	ne
  405312:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  405314:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  405316:	f012 0f02 	tst.w	r2, #2
  40531a:	d002      	beq.n	405322 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40531c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  405320:	e004      	b.n	40532c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  405322:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  405326:	bf18      	it	ne
  405328:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40532c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40532e:	6001      	str	r1, [r0, #0]
  405330:	4770      	bx	lr
  405332:	bf00      	nop

00405334 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  405334:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405336:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405338:	9c01      	ldr	r4, [sp, #4]
  40533a:	b10c      	cbz	r4, 405340 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40533c:	6641      	str	r1, [r0, #100]	; 0x64
  40533e:	e000      	b.n	405342 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405340:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  405342:	b10b      	cbz	r3, 405348 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  405344:	6501      	str	r1, [r0, #80]	; 0x50
  405346:	e000      	b.n	40534a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  405348:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40534a:	b10a      	cbz	r2, 405350 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  40534c:	6301      	str	r1, [r0, #48]	; 0x30
  40534e:	e000      	b.n	405352 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  405350:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  405352:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  405354:	6001      	str	r1, [r0, #0]
}
  405356:	bc10      	pop	{r4}
  405358:	4770      	bx	lr
  40535a:	bf00      	nop

0040535c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40535c:	f012 0f10 	tst.w	r2, #16
  405360:	d010      	beq.n	405384 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  405362:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  405366:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40536a:	bf14      	ite	ne
  40536c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  405370:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  405374:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  405378:	bf14      	ite	ne
  40537a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40537e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  405382:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  405384:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  405388:	4770      	bx	lr
  40538a:	bf00      	nop

0040538c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40538c:	6401      	str	r1, [r0, #64]	; 0x40
  40538e:	4770      	bx	lr

00405390 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405390:	6441      	str	r1, [r0, #68]	; 0x44
  405392:	4770      	bx	lr

00405394 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  405394:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  405396:	4770      	bx	lr

00405398 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  405398:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40539a:	4770      	bx	lr

0040539c <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40539c:	0943      	lsrs	r3, r0, #5
  40539e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4053a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4053a6:	025b      	lsls	r3, r3, #9
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  4053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4053aa:	f000 001f 	and.w	r0, r0, #31
  4053ae:	fa23 f000 	lsr.w	r0, r3, r0
}
  4053b2:	f000 0001 	and.w	r0, r0, #1
  4053b6:	4770      	bx	lr

004053b8 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4053b8:	0943      	lsrs	r3, r0, #5
  4053ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4053be:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4053c2:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4053c4:	f000 001f 	and.w	r0, r0, #31
  4053c8:	2201      	movs	r2, #1
  4053ca:	fa02 f000 	lsl.w	r0, r2, r0
  4053ce:	6318      	str	r0, [r3, #48]	; 0x30
  4053d0:	4770      	bx	lr
  4053d2:	bf00      	nop

004053d4 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4053d4:	0943      	lsrs	r3, r0, #5
  4053d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4053da:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4053de:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4053e0:	f000 001f 	and.w	r0, r0, #31
  4053e4:	2201      	movs	r2, #1
  4053e6:	fa02 f000 	lsl.w	r0, r2, r0
  4053ea:	6358      	str	r0, [r3, #52]	; 0x34
  4053ec:	4770      	bx	lr
  4053ee:	bf00      	nop

004053f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4053f0:	b570      	push	{r4, r5, r6, lr}
  4053f2:	b082      	sub	sp, #8
  4053f4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4053f6:	0943      	lsrs	r3, r0, #5
  4053f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4053fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405400:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  405402:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  405406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40540a:	d047      	beq.n	40549c <pio_configure_pin+0xac>
  40540c:	d809      	bhi.n	405422 <pio_configure_pin+0x32>
  40540e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405412:	d021      	beq.n	405458 <pio_configure_pin+0x68>
  405414:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405418:	d02f      	beq.n	40547a <pio_configure_pin+0x8a>
  40541a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40541e:	d16f      	bne.n	405500 <pio_configure_pin+0x110>
  405420:	e009      	b.n	405436 <pio_configure_pin+0x46>
  405422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405426:	d055      	beq.n	4054d4 <pio_configure_pin+0xe4>
  405428:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40542c:	d052      	beq.n	4054d4 <pio_configure_pin+0xe4>
  40542e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405432:	d044      	beq.n	4054be <pio_configure_pin+0xce>
  405434:	e064      	b.n	405500 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405436:	f000 001f 	and.w	r0, r0, #31
  40543a:	2601      	movs	r6, #1
  40543c:	4086      	lsls	r6, r0
  40543e:	4632      	mov	r2, r6
  405440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405444:	4620      	mov	r0, r4
  405446:	4b30      	ldr	r3, [pc, #192]	; (405508 <pio_configure_pin+0x118>)
  405448:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40544a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40544e:	bf14      	ite	ne
  405450:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405452:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405454:	2001      	movs	r0, #1
  405456:	e054      	b.n	405502 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405458:	f000 001f 	and.w	r0, r0, #31
  40545c:	2601      	movs	r6, #1
  40545e:	4086      	lsls	r6, r0
  405460:	4632      	mov	r2, r6
  405462:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405466:	4620      	mov	r0, r4
  405468:	4b27      	ldr	r3, [pc, #156]	; (405508 <pio_configure_pin+0x118>)
  40546a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40546c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  405470:	bf14      	ite	ne
  405472:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405474:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405476:	2001      	movs	r0, #1
  405478:	e043      	b.n	405502 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40547a:	f000 001f 	and.w	r0, r0, #31
  40547e:	2601      	movs	r6, #1
  405480:	4086      	lsls	r6, r0
  405482:	4632      	mov	r2, r6
  405484:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405488:	4620      	mov	r0, r4
  40548a:	4b1f      	ldr	r3, [pc, #124]	; (405508 <pio_configure_pin+0x118>)
  40548c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40548e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  405492:	bf14      	ite	ne
  405494:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405496:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405498:	2001      	movs	r0, #1
  40549a:	e032      	b.n	405502 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40549c:	f000 001f 	and.w	r0, r0, #31
  4054a0:	2601      	movs	r6, #1
  4054a2:	4086      	lsls	r6, r0
  4054a4:	4632      	mov	r2, r6
  4054a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4054aa:	4620      	mov	r0, r4
  4054ac:	4b16      	ldr	r3, [pc, #88]	; (405508 <pio_configure_pin+0x118>)
  4054ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4054b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4054b4:	bf14      	ite	ne
  4054b6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4054b8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4054ba:	2001      	movs	r0, #1
  4054bc:	e021      	b.n	405502 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4054be:	f000 011f 	and.w	r1, r0, #31
  4054c2:	2601      	movs	r6, #1
  4054c4:	462a      	mov	r2, r5
  4054c6:	fa06 f101 	lsl.w	r1, r6, r1
  4054ca:	4620      	mov	r0, r4
  4054cc:	4b0f      	ldr	r3, [pc, #60]	; (40550c <pio_configure_pin+0x11c>)
  4054ce:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4054d0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4054d2:	e016      	b.n	405502 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4054d4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4054d8:	f000 011f 	and.w	r1, r0, #31
  4054dc:	2601      	movs	r6, #1
  4054de:	ea05 0306 	and.w	r3, r5, r6
  4054e2:	9300      	str	r3, [sp, #0]
  4054e4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4054e8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4054ec:	bf14      	ite	ne
  4054ee:	2200      	movne	r2, #0
  4054f0:	2201      	moveq	r2, #1
  4054f2:	fa06 f101 	lsl.w	r1, r6, r1
  4054f6:	4620      	mov	r0, r4
  4054f8:	4c05      	ldr	r4, [pc, #20]	; (405510 <pio_configure_pin+0x120>)
  4054fa:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4054fc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4054fe:	e000      	b.n	405502 <pio_configure_pin+0x112>

	default:
		return 0;
  405500:	2000      	movs	r0, #0
	}

	return 1;
}
  405502:	b002      	add	sp, #8
  405504:	bd70      	pop	{r4, r5, r6, pc}
  405506:	bf00      	nop
  405508:	00405271 	.word	0x00405271
  40550c:	00405301 	.word	0x00405301
  405510:	00405335 	.word	0x00405335

00405514 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  405514:	b570      	push	{r4, r5, r6, lr}
  405516:	b082      	sub	sp, #8
  405518:	4605      	mov	r5, r0
  40551a:	460e      	mov	r6, r1
  40551c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40551e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  405522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405526:	d038      	beq.n	40559a <pio_configure_pin_group+0x86>
  405528:	d809      	bhi.n	40553e <pio_configure_pin_group+0x2a>
  40552a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40552e:	d01c      	beq.n	40556a <pio_configure_pin_group+0x56>
  405530:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405534:	d025      	beq.n	405582 <pio_configure_pin_group+0x6e>
  405536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40553a:	d150      	bne.n	4055de <pio_configure_pin_group+0xca>
  40553c:	e009      	b.n	405552 <pio_configure_pin_group+0x3e>
  40553e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405542:	d03a      	beq.n	4055ba <pio_configure_pin_group+0xa6>
  405544:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405548:	d037      	beq.n	4055ba <pio_configure_pin_group+0xa6>
  40554a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40554e:	d030      	beq.n	4055b2 <pio_configure_pin_group+0x9e>
  405550:	e045      	b.n	4055de <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  405552:	460a      	mov	r2, r1
  405554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405558:	4b22      	ldr	r3, [pc, #136]	; (4055e4 <pio_configure_pin_group+0xd0>)
  40555a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40555c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  405560:	bf14      	ite	ne
  405562:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405564:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405566:	2001      	movs	r0, #1
  405568:	e03a      	b.n	4055e0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40556a:	460a      	mov	r2, r1
  40556c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405570:	4b1c      	ldr	r3, [pc, #112]	; (4055e4 <pio_configure_pin_group+0xd0>)
  405572:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405574:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  405578:	bf14      	ite	ne
  40557a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40557c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40557e:	2001      	movs	r0, #1
  405580:	e02e      	b.n	4055e0 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  405582:	460a      	mov	r2, r1
  405584:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405588:	4b16      	ldr	r3, [pc, #88]	; (4055e4 <pio_configure_pin_group+0xd0>)
  40558a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40558c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  405590:	bf14      	ite	ne
  405592:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405594:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  405596:	2001      	movs	r0, #1
  405598:	e022      	b.n	4055e0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40559a:	460a      	mov	r2, r1
  40559c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4055a0:	4b10      	ldr	r3, [pc, #64]	; (4055e4 <pio_configure_pin_group+0xd0>)
  4055a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4055a4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4055a8:	bf14      	ite	ne
  4055aa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4055ac:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4055ae:	2001      	movs	r0, #1
  4055b0:	e016      	b.n	4055e0 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4055b2:	4b0d      	ldr	r3, [pc, #52]	; (4055e8 <pio_configure_pin_group+0xd4>)
  4055b4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4055b6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4055b8:	e012      	b.n	4055e0 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4055ba:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4055be:	f004 0301 	and.w	r3, r4, #1
  4055c2:	9300      	str	r3, [sp, #0]
  4055c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4055c8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4055cc:	bf14      	ite	ne
  4055ce:	2200      	movne	r2, #0
  4055d0:	2201      	moveq	r2, #1
  4055d2:	4631      	mov	r1, r6
  4055d4:	4628      	mov	r0, r5
  4055d6:	4c05      	ldr	r4, [pc, #20]	; (4055ec <pio_configure_pin_group+0xd8>)
  4055d8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4055da:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4055dc:	e000      	b.n	4055e0 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4055de:	2000      	movs	r0, #0
	}

	return 1;
}
  4055e0:	b002      	add	sp, #8
  4055e2:	bd70      	pop	{r4, r5, r6, pc}
  4055e4:	00405271 	.word	0x00405271
  4055e8:	00405301 	.word	0x00405301
  4055ec:	00405335 	.word	0x00405335

004055f0 <pio_get_pin_group>:
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
#endif
	return p_pio;
  4055f0:	0940      	lsrs	r0, r0, #5
  4055f2:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
  4055f6:	f200 7007 	addw	r0, r0, #1799	; 0x707
}
  4055fa:	0240      	lsls	r0, r0, #9
  4055fc:	4770      	bx	lr
  4055fe:	bf00      	nop

00405600 <pio_get_pin_group_id>:
	if (ul_pin >= PIO_PE0_IDX) ul_id = ID_PIOE; 
	#endif 
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
#endif
	return ul_id;
  405600:	0940      	lsrs	r0, r0, #5
}
  405602:	300b      	adds	r0, #11
  405604:	4770      	bx	lr
  405606:	bf00      	nop

00405608 <pio_get_pin_group_mask>:
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
	return ul_mask;
  405608:	f000 001f 	and.w	r0, r0, #31
}
  40560c:	2301      	movs	r3, #1
  40560e:	fa03 f000 	lsl.w	r0, r3, r0
  405612:	4770      	bx	lr

00405614 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405618:	4681      	mov	r9, r0
  40561a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40561c:	4b12      	ldr	r3, [pc, #72]	; (405668 <pio_handler_process+0x54>)
  40561e:	4798      	blx	r3
  405620:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  405622:	4648      	mov	r0, r9
  405624:	4b11      	ldr	r3, [pc, #68]	; (40566c <pio_handler_process+0x58>)
  405626:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  405628:	4005      	ands	r5, r0
  40562a:	d013      	beq.n	405654 <pio_handler_process+0x40>
  40562c:	4c10      	ldr	r4, [pc, #64]	; (405670 <pio_handler_process+0x5c>)
  40562e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  405632:	6823      	ldr	r3, [r4, #0]
  405634:	4543      	cmp	r3, r8
  405636:	d108      	bne.n	40564a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405638:	6861      	ldr	r1, [r4, #4]
  40563a:	4229      	tst	r1, r5
  40563c:	d005      	beq.n	40564a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40563e:	68e3      	ldr	r3, [r4, #12]
  405640:	4640      	mov	r0, r8
  405642:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  405644:	6863      	ldr	r3, [r4, #4]
  405646:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40564a:	42b4      	cmp	r4, r6
  40564c:	d002      	beq.n	405654 <pio_handler_process+0x40>
  40564e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  405650:	2d00      	cmp	r5, #0
  405652:	d1ee      	bne.n	405632 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  405654:	4b07      	ldr	r3, [pc, #28]	; (405674 <pio_handler_process+0x60>)
  405656:	681b      	ldr	r3, [r3, #0]
  405658:	b123      	cbz	r3, 405664 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40565a:	4b07      	ldr	r3, [pc, #28]	; (405678 <pio_handler_process+0x64>)
  40565c:	681b      	ldr	r3, [r3, #0]
  40565e:	b10b      	cbz	r3, 405664 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  405660:	4648      	mov	r0, r9
  405662:	4798      	blx	r3
  405664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405668:	00405395 	.word	0x00405395
  40566c:	00405399 	.word	0x00405399
  405670:	20000b6c 	.word	0x20000b6c
  405674:	2000bf04 	.word	0x2000bf04
  405678:	20000b68 	.word	0x20000b68

0040567c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40567e:	4c17      	ldr	r4, [pc, #92]	; (4056dc <pio_handler_set+0x60>)
  405680:	6826      	ldr	r6, [r4, #0]
  405682:	2e06      	cmp	r6, #6
  405684:	d828      	bhi.n	4056d8 <pio_handler_set+0x5c>
  405686:	f04f 0c00 	mov.w	ip, #0
  40568a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40568c:	4f14      	ldr	r7, [pc, #80]	; (4056e0 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40568e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405690:	0125      	lsls	r5, r4, #4
  405692:	597d      	ldr	r5, [r7, r5]
  405694:	428d      	cmp	r5, r1
  405696:	d104      	bne.n	4056a2 <pio_handler_set+0x26>
  405698:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40569c:	686d      	ldr	r5, [r5, #4]
  40569e:	4295      	cmp	r5, r2
  4056a0:	d004      	beq.n	4056ac <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4056a2:	3401      	adds	r4, #1
  4056a4:	b2e4      	uxtb	r4, r4
  4056a6:	46a4      	mov	ip, r4
  4056a8:	42a6      	cmp	r6, r4
  4056aa:	d2f0      	bcs.n	40568e <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4056ac:	4d0c      	ldr	r5, [pc, #48]	; (4056e0 <pio_handler_set+0x64>)
  4056ae:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4056b2:	eb05 040e 	add.w	r4, r5, lr
  4056b6:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4056ba:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4056bc:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4056be:	9906      	ldr	r1, [sp, #24]
  4056c0:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4056c2:	3601      	adds	r6, #1
  4056c4:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4056c6:	bf04      	itt	eq
  4056c8:	4904      	ldreq	r1, [pc, #16]	; (4056dc <pio_handler_set+0x60>)
  4056ca:	600e      	streq	r6, [r1, #0]
  4056cc:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4056ce:	461a      	mov	r2, r3
  4056d0:	4b04      	ldr	r3, [pc, #16]	; (4056e4 <pio_handler_set+0x68>)
  4056d2:	4798      	blx	r3

	return 0;
  4056d4:	2000      	movs	r0, #0
  4056d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4056d8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4056da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056dc:	20000b64 	.word	0x20000b64
  4056e0:	20000b6c 	.word	0x20000b6c
  4056e4:	0040535d 	.word	0x0040535d

004056e8 <pio_handler_set_pin>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set_pin(uint32_t ul_pin, uint32_t ul_flag,
		void (*p_handler) (uint32_t, uint32_t))
{
  4056e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056ec:	b082      	sub	sp, #8
  4056ee:	4604      	mov	r4, r0
  4056f0:	460f      	mov	r7, r1
  4056f2:	4690      	mov	r8, r2
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4056f4:	4b0a      	ldr	r3, [pc, #40]	; (405720 <pio_handler_set_pin+0x38>)
  4056f6:	4798      	blx	r3
  4056f8:	4605      	mov	r5, r0
	uint32_t group_id =  pio_get_pin_group_id(ul_pin);
  4056fa:	4620      	mov	r0, r4
  4056fc:	4b09      	ldr	r3, [pc, #36]	; (405724 <pio_handler_set_pin+0x3c>)
  4056fe:	4798      	blx	r3
  405700:	4606      	mov	r6, r0
	uint32_t group_mask = pio_get_pin_group_mask(ul_pin);
  405702:	4620      	mov	r0, r4
  405704:	4b08      	ldr	r3, [pc, #32]	; (405728 <pio_handler_set_pin+0x40>)
  405706:	4798      	blx	r3

	return pio_handler_set(p_pio, group_id, group_mask, ul_flag, p_handler);
  405708:	f8cd 8000 	str.w	r8, [sp]
  40570c:	463b      	mov	r3, r7
  40570e:	4602      	mov	r2, r0
  405710:	4631      	mov	r1, r6
  405712:	4628      	mov	r0, r5
  405714:	4c05      	ldr	r4, [pc, #20]	; (40572c <pio_handler_set_pin+0x44>)
  405716:	47a0      	blx	r4
}
  405718:	b002      	add	sp, #8
  40571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40571e:	bf00      	nop
  405720:	004055f1 	.word	0x004055f1
  405724:	00405601 	.word	0x00405601
  405728:	00405609 	.word	0x00405609
  40572c:	0040567d 	.word	0x0040567d

00405730 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405730:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  405732:	210b      	movs	r1, #11
  405734:	4801      	ldr	r0, [pc, #4]	; (40573c <PIOA_Handler+0xc>)
  405736:	4b02      	ldr	r3, [pc, #8]	; (405740 <PIOA_Handler+0x10>)
  405738:	4798      	blx	r3
  40573a:	bd08      	pop	{r3, pc}
  40573c:	400e0e00 	.word	0x400e0e00
  405740:	00405615 	.word	0x00405615

00405744 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405744:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  405746:	210c      	movs	r1, #12
  405748:	4801      	ldr	r0, [pc, #4]	; (405750 <PIOB_Handler+0xc>)
  40574a:	4b02      	ldr	r3, [pc, #8]	; (405754 <PIOB_Handler+0x10>)
  40574c:	4798      	blx	r3
  40574e:	bd08      	pop	{r3, pc}
  405750:	400e1000 	.word	0x400e1000
  405754:	00405615 	.word	0x00405615

00405758 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405758:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40575a:	210d      	movs	r1, #13
  40575c:	4801      	ldr	r0, [pc, #4]	; (405764 <PIOC_Handler+0xc>)
  40575e:	4b02      	ldr	r3, [pc, #8]	; (405768 <PIOC_Handler+0x10>)
  405760:	4798      	blx	r3
  405762:	bd08      	pop	{r3, pc}
  405764:	400e1200 	.word	0x400e1200
  405768:	00405615 	.word	0x00405615

0040576c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40576e:	4605      	mov	r5, r0
  405770:	460c      	mov	r4, r1
  405772:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  405774:	4b18      	ldr	r3, [pc, #96]	; (4057d8 <pio_handler_set_priority+0x6c>)
  405776:	4798      	blx	r3
  405778:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40577a:	f04f 31ff 	mov.w	r1, #4294967295
  40577e:	4628      	mov	r0, r5
  405780:	4b16      	ldr	r3, [pc, #88]	; (4057dc <pio_handler_set_priority+0x70>)
  405782:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405784:	4628      	mov	r0, r5
  405786:	4b16      	ldr	r3, [pc, #88]	; (4057e0 <pio_handler_set_priority+0x74>)
  405788:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40578a:	b2e2      	uxtb	r2, r4
  40578c:	f002 031f 	and.w	r3, r2, #31
  405790:	2101      	movs	r1, #1
  405792:	4099      	lsls	r1, r3
  405794:	0963      	lsrs	r3, r4, #5
  405796:	009b      	lsls	r3, r3, #2
  405798:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  40579c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4057a0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4057a4:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4057a8:	2c00      	cmp	r4, #0
  4057aa:	da06      	bge.n	4057ba <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4057ac:	f002 020f 	and.w	r2, r2, #15
  4057b0:	013f      	lsls	r7, r7, #4
  4057b2:	b2ff      	uxtb	r7, r7
  4057b4:	480b      	ldr	r0, [pc, #44]	; (4057e4 <pio_handler_set_priority+0x78>)
  4057b6:	5487      	strb	r7, [r0, r2]
  4057b8:	e007      	b.n	4057ca <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4057ba:	013f      	lsls	r7, r7, #4
  4057bc:	b2ff      	uxtb	r7, r7
  4057be:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  4057c2:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  4057c6:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4057ca:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4057cc:	4631      	mov	r1, r6
  4057ce:	4628      	mov	r0, r5
  4057d0:	4b05      	ldr	r3, [pc, #20]	; (4057e8 <pio_handler_set_priority+0x7c>)
  4057d2:	4798      	blx	r3
  4057d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057d6:	bf00      	nop
  4057d8:	00405399 	.word	0x00405399
  4057dc:	00405391 	.word	0x00405391
  4057e0:	00405395 	.word	0x00405395
  4057e4:	e000ed14 	.word	0xe000ed14
  4057e8:	0040538d 	.word	0x0040538d

004057ec <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4057ec:	4a18      	ldr	r2, [pc, #96]	; (405850 <pmc_switch_mck_to_pllack+0x64>)
  4057ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4057f4:	4318      	orrs	r0, r3
  4057f6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4057fa:	f013 0f08 	tst.w	r3, #8
  4057fe:	d003      	beq.n	405808 <pmc_switch_mck_to_pllack+0x1c>
  405800:	e009      	b.n	405816 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405802:	3b01      	subs	r3, #1
  405804:	d103      	bne.n	40580e <pmc_switch_mck_to_pllack+0x22>
  405806:	e01e      	b.n	405846 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405808:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40580c:	4910      	ldr	r1, [pc, #64]	; (405850 <pmc_switch_mck_to_pllack+0x64>)
  40580e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405810:	f012 0f08 	tst.w	r2, #8
  405814:	d0f5      	beq.n	405802 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405816:	4a0e      	ldr	r2, [pc, #56]	; (405850 <pmc_switch_mck_to_pllack+0x64>)
  405818:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40581a:	f023 0303 	bic.w	r3, r3, #3
  40581e:	f043 0302 	orr.w	r3, r3, #2
  405822:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405824:	6e90      	ldr	r0, [r2, #104]	; 0x68
  405826:	f010 0008 	ands.w	r0, r0, #8
  40582a:	d004      	beq.n	405836 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40582c:	2000      	movs	r0, #0
  40582e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  405830:	3b01      	subs	r3, #1
  405832:	d103      	bne.n	40583c <pmc_switch_mck_to_pllack+0x50>
  405834:	e009      	b.n	40584a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405836:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40583a:	4905      	ldr	r1, [pc, #20]	; (405850 <pmc_switch_mck_to_pllack+0x64>)
  40583c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40583e:	f012 0f08 	tst.w	r2, #8
  405842:	d0f5      	beq.n	405830 <pmc_switch_mck_to_pllack+0x44>
  405844:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  405846:	2001      	movs	r0, #1
  405848:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40584a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40584c:	4770      	bx	lr
  40584e:	bf00      	nop
  405850:	400e0400 	.word	0x400e0400

00405854 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405854:	b138      	cbz	r0, 405866 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405856:	4911      	ldr	r1, [pc, #68]	; (40589c <pmc_switch_mainck_to_xtal+0x48>)
  405858:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40585a:	4a11      	ldr	r2, [pc, #68]	; (4058a0 <pmc_switch_mainck_to_xtal+0x4c>)
  40585c:	401a      	ands	r2, r3
  40585e:	4b11      	ldr	r3, [pc, #68]	; (4058a4 <pmc_switch_mainck_to_xtal+0x50>)
  405860:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405862:	620b      	str	r3, [r1, #32]
  405864:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405866:	480d      	ldr	r0, [pc, #52]	; (40589c <pmc_switch_mainck_to_xtal+0x48>)
  405868:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40586a:	0209      	lsls	r1, r1, #8
  40586c:	b289      	uxth	r1, r1
  40586e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  405872:	f023 0303 	bic.w	r3, r3, #3
  405876:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40587a:	f043 0301 	orr.w	r3, r3, #1
  40587e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405880:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405882:	4602      	mov	r2, r0
  405884:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405886:	f013 0f01 	tst.w	r3, #1
  40588a:	d0fb      	beq.n	405884 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40588c:	4a03      	ldr	r2, [pc, #12]	; (40589c <pmc_switch_mainck_to_xtal+0x48>)
  40588e:	6a13      	ldr	r3, [r2, #32]
  405890:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  405894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  405898:	6213      	str	r3, [r2, #32]
  40589a:	4770      	bx	lr
  40589c:	400e0400 	.word	0x400e0400
  4058a0:	fec8fffc 	.word	0xfec8fffc
  4058a4:	01370002 	.word	0x01370002

004058a8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4058a8:	4b02      	ldr	r3, [pc, #8]	; (4058b4 <pmc_osc_is_ready_mainck+0xc>)
  4058aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4058ac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4058b0:	4770      	bx	lr
  4058b2:	bf00      	nop
  4058b4:	400e0400 	.word	0x400e0400

004058b8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4058b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4058bc:	4b01      	ldr	r3, [pc, #4]	; (4058c4 <pmc_disable_pllack+0xc>)
  4058be:	629a      	str	r2, [r3, #40]	; 0x28
  4058c0:	4770      	bx	lr
  4058c2:	bf00      	nop
  4058c4:	400e0400 	.word	0x400e0400

004058c8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4058c8:	4b02      	ldr	r3, [pc, #8]	; (4058d4 <pmc_is_locked_pllack+0xc>)
  4058ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4058cc:	f000 0002 	and.w	r0, r0, #2
  4058d0:	4770      	bx	lr
  4058d2:	bf00      	nop
  4058d4:	400e0400 	.word	0x400e0400

004058d8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4058d8:	2822      	cmp	r0, #34	; 0x22
  4058da:	d81e      	bhi.n	40591a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4058dc:	281f      	cmp	r0, #31
  4058de:	d80c      	bhi.n	4058fa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4058e0:	4b11      	ldr	r3, [pc, #68]	; (405928 <pmc_enable_periph_clk+0x50>)
  4058e2:	699a      	ldr	r2, [r3, #24]
  4058e4:	2301      	movs	r3, #1
  4058e6:	4083      	lsls	r3, r0
  4058e8:	4393      	bics	r3, r2
  4058ea:	d018      	beq.n	40591e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4058ec:	2301      	movs	r3, #1
  4058ee:	fa03 f000 	lsl.w	r0, r3, r0
  4058f2:	4b0d      	ldr	r3, [pc, #52]	; (405928 <pmc_enable_periph_clk+0x50>)
  4058f4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4058f6:	2000      	movs	r0, #0
  4058f8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4058fa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4058fc:	4b0a      	ldr	r3, [pc, #40]	; (405928 <pmc_enable_periph_clk+0x50>)
  4058fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  405902:	2301      	movs	r3, #1
  405904:	4083      	lsls	r3, r0
  405906:	4393      	bics	r3, r2
  405908:	d00b      	beq.n	405922 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40590a:	2301      	movs	r3, #1
  40590c:	fa03 f000 	lsl.w	r0, r3, r0
  405910:	4b05      	ldr	r3, [pc, #20]	; (405928 <pmc_enable_periph_clk+0x50>)
  405912:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  405916:	2000      	movs	r0, #0
  405918:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40591a:	2001      	movs	r0, #1
  40591c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40591e:	2000      	movs	r0, #0
  405920:	4770      	bx	lr
  405922:	2000      	movs	r0, #0
}
  405924:	4770      	bx	lr
  405926:	bf00      	nop
  405928:	400e0400 	.word	0x400e0400

0040592c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40592c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405930:	6043      	str	r3, [r0, #4]
  405932:	4770      	bx	lr

00405934 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405934:	b082      	sub	sp, #8
	volatile phantomISR = 9999;
  405936:	f242 730f 	movw	r3, #9999	; 0x270f
  40593a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
  40593c:	f3ef 8305 	mrs	r3, IPSR
	phantomISR = __get_IPSR();
  405940:	9301      	str	r3, [sp, #4]
	while (1) {
		volatile int lol;
		lol++;
  405942:	9b00      	ldr	r3, [sp, #0]
  405944:	3301      	adds	r3, #1
  405946:	9300      	str	r3, [sp, #0]
  405948:	e7fb      	b.n	405942 <Dummy_Handler+0xe>
  40594a:	bf00      	nop

0040594c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40594c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40594e:	4b20      	ldr	r3, [pc, #128]	; (4059d0 <Reset_Handler+0x84>)
  405950:	4a20      	ldr	r2, [pc, #128]	; (4059d4 <Reset_Handler+0x88>)
  405952:	429a      	cmp	r2, r3
  405954:	d912      	bls.n	40597c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  405956:	4b20      	ldr	r3, [pc, #128]	; (4059d8 <Reset_Handler+0x8c>)
  405958:	4a1d      	ldr	r2, [pc, #116]	; (4059d0 <Reset_Handler+0x84>)
  40595a:	429a      	cmp	r2, r3
  40595c:	d21e      	bcs.n	40599c <Reset_Handler+0x50>
  40595e:	4611      	mov	r1, r2
  405960:	3b01      	subs	r3, #1
  405962:	1a9b      	subs	r3, r3, r2
  405964:	f023 0303 	bic.w	r3, r3, #3
  405968:	3304      	adds	r3, #4
  40596a:	4a1a      	ldr	r2, [pc, #104]	; (4059d4 <Reset_Handler+0x88>)
  40596c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40596e:	f852 0b04 	ldr.w	r0, [r2], #4
  405972:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  405976:	429a      	cmp	r2, r3
  405978:	d1f9      	bne.n	40596e <Reset_Handler+0x22>
  40597a:	e00f      	b.n	40599c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40597c:	4b14      	ldr	r3, [pc, #80]	; (4059d0 <Reset_Handler+0x84>)
  40597e:	4a15      	ldr	r2, [pc, #84]	; (4059d4 <Reset_Handler+0x88>)
  405980:	429a      	cmp	r2, r3
  405982:	d20b      	bcs.n	40599c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  405984:	4b14      	ldr	r3, [pc, #80]	; (4059d8 <Reset_Handler+0x8c>)
  405986:	4a12      	ldr	r2, [pc, #72]	; (4059d0 <Reset_Handler+0x84>)
  405988:	1a9a      	subs	r2, r3, r2
  40598a:	4814      	ldr	r0, [pc, #80]	; (4059dc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40598c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40598e:	b12a      	cbz	r2, 40599c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  405990:	f851 2904 	ldr.w	r2, [r1], #-4
  405994:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  405998:	4281      	cmp	r1, r0
  40599a:	d1f9      	bne.n	405990 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40599c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40599e:	4b10      	ldr	r3, [pc, #64]	; (4059e0 <Reset_Handler+0x94>)
  4059a0:	4a10      	ldr	r2, [pc, #64]	; (4059e4 <Reset_Handler+0x98>)
  4059a2:	429a      	cmp	r2, r3
  4059a4:	d20b      	bcs.n	4059be <Reset_Handler+0x72>
  4059a6:	1d13      	adds	r3, r2, #4
  4059a8:	4a0f      	ldr	r2, [pc, #60]	; (4059e8 <Reset_Handler+0x9c>)
  4059aa:	1ad2      	subs	r2, r2, r3
  4059ac:	f022 0203 	bic.w	r2, r2, #3
  4059b0:	441a      	add	r2, r3
  4059b2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4059b4:	2100      	movs	r1, #0
  4059b6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4059ba:	429a      	cmp	r2, r3
  4059bc:	d1fb      	bne.n	4059b6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4059be:	4b0b      	ldr	r3, [pc, #44]	; (4059ec <Reset_Handler+0xa0>)
  4059c0:	4a0b      	ldr	r2, [pc, #44]	; (4059f0 <Reset_Handler+0xa4>)
  4059c2:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4059c4:	4b0b      	ldr	r3, [pc, #44]	; (4059f4 <Reset_Handler+0xa8>)
  4059c6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4059c8:	4b0b      	ldr	r3, [pc, #44]	; (4059f8 <Reset_Handler+0xac>)
  4059ca:	4798      	blx	r3
  4059cc:	e7fe      	b.n	4059cc <Reset_Handler+0x80>
  4059ce:	bf00      	nop
  4059d0:	20000000 	.word	0x20000000
  4059d4:	00413108 	.word	0x00413108
  4059d8:	200008d0 	.word	0x200008d0
  4059dc:	00413104 	.word	0x00413104
  4059e0:	2000bf0c 	.word	0x2000bf0c
  4059e4:	200008d0 	.word	0x200008d0
  4059e8:	2000bf0f 	.word	0x2000bf0f
  4059ec:	e000ed00 	.word	0xe000ed00
  4059f0:	00400000 	.word	0x00400000
  4059f4:	00408a0d 	.word	0x00408a0d
  4059f8:	00407605 	.word	0x00407605

004059fc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4059fc:	4b3d      	ldr	r3, [pc, #244]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  4059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a00:	f003 0303 	and.w	r3, r3, #3
  405a04:	2b03      	cmp	r3, #3
  405a06:	d85d      	bhi.n	405ac4 <SystemCoreClockUpdate+0xc8>
  405a08:	e8df f003 	tbb	[pc, r3]
  405a0c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  405a10:	4b39      	ldr	r3, [pc, #228]	; (405af8 <SystemCoreClockUpdate+0xfc>)
  405a12:	695b      	ldr	r3, [r3, #20]
  405a14:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405a18:	bf14      	ite	ne
  405a1a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405a1e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  405a22:	4b36      	ldr	r3, [pc, #216]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a24:	601a      	str	r2, [r3, #0]
  405a26:	e04d      	b.n	405ac4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405a28:	4b32      	ldr	r3, [pc, #200]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405a2a:	6a1b      	ldr	r3, [r3, #32]
  405a2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405a30:	d003      	beq.n	405a3a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  405a32:	4a33      	ldr	r2, [pc, #204]	; (405b00 <SystemCoreClockUpdate+0x104>)
  405a34:	4b31      	ldr	r3, [pc, #196]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a36:	601a      	str	r2, [r3, #0]
  405a38:	e044      	b.n	405ac4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405a3a:	4a32      	ldr	r2, [pc, #200]	; (405b04 <SystemCoreClockUpdate+0x108>)
  405a3c:	4b2f      	ldr	r3, [pc, #188]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a3e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405a40:	4b2c      	ldr	r3, [pc, #176]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405a42:	6a1b      	ldr	r3, [r3, #32]
  405a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405a48:	2b10      	cmp	r3, #16
  405a4a:	d002      	beq.n	405a52 <SystemCoreClockUpdate+0x56>
  405a4c:	2b20      	cmp	r3, #32
  405a4e:	d004      	beq.n	405a5a <SystemCoreClockUpdate+0x5e>
  405a50:	e038      	b.n	405ac4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405a52:	4a2d      	ldr	r2, [pc, #180]	; (405b08 <SystemCoreClockUpdate+0x10c>)
  405a54:	4b29      	ldr	r3, [pc, #164]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a56:	601a      	str	r2, [r3, #0]
			break;
  405a58:	e034      	b.n	405ac4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  405a5a:	4a29      	ldr	r2, [pc, #164]	; (405b00 <SystemCoreClockUpdate+0x104>)
  405a5c:	4b27      	ldr	r3, [pc, #156]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a5e:	601a      	str	r2, [r3, #0]
			break;
  405a60:	e030      	b.n	405ac4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405a62:	4b24      	ldr	r3, [pc, #144]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405a64:	6a1b      	ldr	r3, [r3, #32]
  405a66:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405a6a:	d003      	beq.n	405a74 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  405a6c:	4a24      	ldr	r2, [pc, #144]	; (405b00 <SystemCoreClockUpdate+0x104>)
  405a6e:	4b23      	ldr	r3, [pc, #140]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a70:	601a      	str	r2, [r3, #0]
  405a72:	e012      	b.n	405a9a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405a74:	4a23      	ldr	r2, [pc, #140]	; (405b04 <SystemCoreClockUpdate+0x108>)
  405a76:	4b21      	ldr	r3, [pc, #132]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a78:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405a7a:	4b1e      	ldr	r3, [pc, #120]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405a7c:	6a1b      	ldr	r3, [r3, #32]
  405a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405a82:	2b10      	cmp	r3, #16
  405a84:	d002      	beq.n	405a8c <SystemCoreClockUpdate+0x90>
  405a86:	2b20      	cmp	r3, #32
  405a88:	d004      	beq.n	405a94 <SystemCoreClockUpdate+0x98>
  405a8a:	e006      	b.n	405a9a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405a8c:	4a1e      	ldr	r2, [pc, #120]	; (405b08 <SystemCoreClockUpdate+0x10c>)
  405a8e:	4b1b      	ldr	r3, [pc, #108]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a90:	601a      	str	r2, [r3, #0]
					break;
  405a92:	e002      	b.n	405a9a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  405a94:	4a1a      	ldr	r2, [pc, #104]	; (405b00 <SystemCoreClockUpdate+0x104>)
  405a96:	4b19      	ldr	r3, [pc, #100]	; (405afc <SystemCoreClockUpdate+0x100>)
  405a98:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  405a9a:	4b16      	ldr	r3, [pc, #88]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a9e:	f003 0303 	and.w	r3, r3, #3
  405aa2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  405aa4:	4a13      	ldr	r2, [pc, #76]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405aa6:	bf07      	ittee	eq
  405aa8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  405aaa:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  405aac:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  405aae:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  405ab0:	4812      	ldr	r0, [pc, #72]	; (405afc <SystemCoreClockUpdate+0x100>)
  405ab2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  405ab6:	6803      	ldr	r3, [r0, #0]
  405ab8:	fb01 3303 	mla	r3, r1, r3, r3
  405abc:	b2d2      	uxtb	r2, r2
  405abe:	fbb3 f3f2 	udiv	r3, r3, r2
  405ac2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  405ac4:	4b0b      	ldr	r3, [pc, #44]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405acc:	2b70      	cmp	r3, #112	; 0x70
  405ace:	d107      	bne.n	405ae0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  405ad0:	4a0a      	ldr	r2, [pc, #40]	; (405afc <SystemCoreClockUpdate+0x100>)
  405ad2:	6813      	ldr	r3, [r2, #0]
  405ad4:	490d      	ldr	r1, [pc, #52]	; (405b0c <SystemCoreClockUpdate+0x110>)
  405ad6:	fba1 1303 	umull	r1, r3, r1, r3
  405ada:	085b      	lsrs	r3, r3, #1
  405adc:	6013      	str	r3, [r2, #0]
  405ade:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405ae0:	4b04      	ldr	r3, [pc, #16]	; (405af4 <SystemCoreClockUpdate+0xf8>)
  405ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  405ae4:	4905      	ldr	r1, [pc, #20]	; (405afc <SystemCoreClockUpdate+0x100>)
  405ae6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  405aea:	680b      	ldr	r3, [r1, #0]
  405aec:	40d3      	lsrs	r3, r2
  405aee:	600b      	str	r3, [r1, #0]
  405af0:	4770      	bx	lr
  405af2:	bf00      	nop
  405af4:	400e0400 	.word	0x400e0400
  405af8:	400e1410 	.word	0x400e1410
  405afc:	2000001c 	.word	0x2000001c
  405b00:	00b71b00 	.word	0x00b71b00
  405b04:	003d0900 	.word	0x003d0900
  405b08:	007a1200 	.word	0x007a1200
  405b0c:	aaaaaaab 	.word	0xaaaaaaab

00405b10 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  405b10:	4b1a      	ldr	r3, [pc, #104]	; (405b7c <system_init_flash+0x6c>)
  405b12:	4298      	cmp	r0, r3
  405b14:	d807      	bhi.n	405b26 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405b16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  405b1a:	4a19      	ldr	r2, [pc, #100]	; (405b80 <system_init_flash+0x70>)
  405b1c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405b1e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  405b22:	6013      	str	r3, [r2, #0]
  405b24:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  405b26:	4b17      	ldr	r3, [pc, #92]	; (405b84 <system_init_flash+0x74>)
  405b28:	4298      	cmp	r0, r3
  405b2a:	d806      	bhi.n	405b3a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405b2c:	4b16      	ldr	r3, [pc, #88]	; (405b88 <system_init_flash+0x78>)
  405b2e:	4a14      	ldr	r2, [pc, #80]	; (405b80 <system_init_flash+0x70>)
  405b30:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405b32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  405b36:	6013      	str	r3, [r2, #0]
  405b38:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  405b3a:	4b14      	ldr	r3, [pc, #80]	; (405b8c <system_init_flash+0x7c>)
  405b3c:	4298      	cmp	r0, r3
  405b3e:	d806      	bhi.n	405b4e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405b40:	4b13      	ldr	r3, [pc, #76]	; (405b90 <system_init_flash+0x80>)
  405b42:	4a0f      	ldr	r2, [pc, #60]	; (405b80 <system_init_flash+0x70>)
  405b44:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405b46:	f502 7200 	add.w	r2, r2, #512	; 0x200
  405b4a:	6013      	str	r3, [r2, #0]
  405b4c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  405b4e:	4b11      	ldr	r3, [pc, #68]	; (405b94 <system_init_flash+0x84>)
  405b50:	4298      	cmp	r0, r3
  405b52:	d806      	bhi.n	405b62 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405b54:	4b10      	ldr	r3, [pc, #64]	; (405b98 <system_init_flash+0x88>)
  405b56:	4a0a      	ldr	r2, [pc, #40]	; (405b80 <system_init_flash+0x70>)
  405b58:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405b5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  405b5e:	6013      	str	r3, [r2, #0]
  405b60:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  405b62:	4b0e      	ldr	r3, [pc, #56]	; (405b9c <system_init_flash+0x8c>)
  405b64:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405b66:	bf94      	ite	ls
  405b68:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405b6c:	4b0c      	ldrhi	r3, [pc, #48]	; (405ba0 <system_init_flash+0x90>)
  405b6e:	4a04      	ldr	r2, [pc, #16]	; (405b80 <system_init_flash+0x70>)
  405b70:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405b72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  405b76:	6013      	str	r3, [r2, #0]
  405b78:	4770      	bx	lr
  405b7a:	bf00      	nop
  405b7c:	01312cff 	.word	0x01312cff
  405b80:	400e0a00 	.word	0x400e0a00
  405b84:	026259ff 	.word	0x026259ff
  405b88:	04000100 	.word	0x04000100
  405b8c:	039386ff 	.word	0x039386ff
  405b90:	04000200 	.word	0x04000200
  405b94:	04c4b3ff 	.word	0x04c4b3ff
  405b98:	04000300 	.word	0x04000300
  405b9c:	05f5e0ff 	.word	0x05f5e0ff
  405ba0:	04000500 	.word	0x04000500

00405ba4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405ba4:	4b09      	ldr	r3, [pc, #36]	; (405bcc <_sbrk+0x28>)
  405ba6:	681b      	ldr	r3, [r3, #0]
  405ba8:	b913      	cbnz	r3, 405bb0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  405baa:	4a09      	ldr	r2, [pc, #36]	; (405bd0 <_sbrk+0x2c>)
  405bac:	4b07      	ldr	r3, [pc, #28]	; (405bcc <_sbrk+0x28>)
  405bae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  405bb0:	4b06      	ldr	r3, [pc, #24]	; (405bcc <_sbrk+0x28>)
  405bb2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405bb4:	181a      	adds	r2, r3, r0
  405bb6:	4907      	ldr	r1, [pc, #28]	; (405bd4 <_sbrk+0x30>)
  405bb8:	4291      	cmp	r1, r2
  405bba:	db04      	blt.n	405bc6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  405bbc:	4610      	mov	r0, r2
  405bbe:	4a03      	ldr	r2, [pc, #12]	; (405bcc <_sbrk+0x28>)
  405bc0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405bc2:	4618      	mov	r0, r3
  405bc4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  405bc6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  405bca:	4770      	bx	lr
  405bcc:	20000bdc 	.word	0x20000bdc
  405bd0:	2000ef10 	.word	0x2000ef10
  405bd4:	20027ffc 	.word	0x20027ffc

00405bd8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405bd8:	f04f 30ff 	mov.w	r0, #4294967295
  405bdc:	4770      	bx	lr
  405bde:	bf00      	nop

00405be0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405be4:	604b      	str	r3, [r1, #4]

	return 0;
}
  405be6:	2000      	movs	r0, #0
  405be8:	4770      	bx	lr
  405bea:	bf00      	nop

00405bec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405bec:	2001      	movs	r0, #1
  405bee:	4770      	bx	lr

00405bf0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405bf0:	2000      	movs	r0, #0
  405bf2:	4770      	bx	lr

00405bf4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  405bf4:	f100 0308 	add.w	r3, r0, #8
  405bf8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  405bfa:	f04f 32ff 	mov.w	r2, #4294967295
  405bfe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  405c00:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  405c02:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  405c04:	2300      	movs	r3, #0
  405c06:	6003      	str	r3, [r0, #0]
  405c08:	4770      	bx	lr
  405c0a:	bf00      	nop

00405c0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  405c0c:	2300      	movs	r3, #0
  405c0e:	6103      	str	r3, [r0, #16]
  405c10:	4770      	bx	lr
  405c12:	bf00      	nop

00405c14 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  405c14:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  405c16:	685a      	ldr	r2, [r3, #4]
  405c18:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  405c1a:	6842      	ldr	r2, [r0, #4]
  405c1c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405c1e:	685a      	ldr	r2, [r3, #4]
  405c20:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  405c22:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  405c24:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  405c26:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  405c28:	6803      	ldr	r3, [r0, #0]
  405c2a:	3301      	adds	r3, #1
  405c2c:	6003      	str	r3, [r0, #0]
  405c2e:	4770      	bx	lr

00405c30 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  405c30:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  405c32:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  405c34:	f1b4 3fff 	cmp.w	r4, #4294967295
  405c38:	d101      	bne.n	405c3e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  405c3a:	6903      	ldr	r3, [r0, #16]
  405c3c:	e00a      	b.n	405c54 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  405c3e:	f100 0308 	add.w	r3, r0, #8
  405c42:	68c2      	ldr	r2, [r0, #12]
  405c44:	6812      	ldr	r2, [r2, #0]
  405c46:	4294      	cmp	r4, r2
  405c48:	d304      	bcc.n	405c54 <vListInsert+0x24>
  405c4a:	685b      	ldr	r3, [r3, #4]
  405c4c:	685a      	ldr	r2, [r3, #4]
  405c4e:	6812      	ldr	r2, [r2, #0]
  405c50:	4294      	cmp	r4, r2
  405c52:	d2fa      	bcs.n	405c4a <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  405c54:	685a      	ldr	r2, [r3, #4]
  405c56:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405c58:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  405c5a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  405c5c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  405c5e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  405c60:	6803      	ldr	r3, [r0, #0]
  405c62:	3301      	adds	r3, #1
  405c64:	6003      	str	r3, [r0, #0]
}
  405c66:	bc10      	pop	{r4}
  405c68:	4770      	bx	lr
  405c6a:	bf00      	nop

00405c6c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  405c6c:	6843      	ldr	r3, [r0, #4]
  405c6e:	6882      	ldr	r2, [r0, #8]
  405c70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  405c72:	6883      	ldr	r3, [r0, #8]
  405c74:	6842      	ldr	r2, [r0, #4]
  405c76:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  405c78:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  405c7a:	685a      	ldr	r2, [r3, #4]
  405c7c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  405c7e:	bf04      	itt	eq
  405c80:	6882      	ldreq	r2, [r0, #8]
  405c82:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  405c84:	2200      	movs	r2, #0
  405c86:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  405c88:	681a      	ldr	r2, [r3, #0]
  405c8a:	3a01      	subs	r2, #1
  405c8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  405c8e:	6818      	ldr	r0, [r3, #0]
}
  405c90:	4770      	bx	lr
  405c92:	bf00      	nop

00405c94 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  405c94:	4803      	ldr	r0, [pc, #12]	; (405ca4 <prvPortStartFirstTask+0x10>)
  405c96:	6800      	ldr	r0, [r0, #0]
  405c98:	6800      	ldr	r0, [r0, #0]
  405c9a:	f380 8808 	msr	MSP, r0
  405c9e:	b662      	cpsie	i
  405ca0:	df00      	svc	0
  405ca2:	bf00      	nop
  405ca4:	e000ed08 	.word	0xe000ed08

00405ca8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  405ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  405cac:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  405cb0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  405cb4:	2300      	movs	r3, #0
  405cb6:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  405cba:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  405cbe:	3840      	subs	r0, #64	; 0x40
  405cc0:	4770      	bx	lr
  405cc2:	bf00      	nop

00405cc4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  405cc4:	4b06      	ldr	r3, [pc, #24]	; (405ce0 <pxCurrentTCBConst2>)
  405cc6:	6819      	ldr	r1, [r3, #0]
  405cc8:	6808      	ldr	r0, [r1, #0]
  405cca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405cce:	f380 8809 	msr	PSP, r0
  405cd2:	f04f 0000 	mov.w	r0, #0
  405cd6:	f380 8811 	msr	BASEPRI, r0
  405cda:	f04e 0e0d 	orr.w	lr, lr, #13
  405cde:	4770      	bx	lr

00405ce0 <pxCurrentTCBConst2>:
  405ce0:	2000aca4 	.word	0x2000aca4

00405ce4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  405ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405ce8:	4b01      	ldr	r3, [pc, #4]	; (405cf0 <vPortYieldFromISR+0xc>)
  405cea:	601a      	str	r2, [r3, #0]
  405cec:	4770      	bx	lr
  405cee:	bf00      	nop
  405cf0:	e000ed04 	.word	0xe000ed04

00405cf4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  405cf4:	f3ef 8011 	mrs	r0, BASEPRI
  405cf8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  405cfc:	f381 8811 	msr	BASEPRI, r1
  405d00:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  405d02:	2000      	movs	r0, #0

00405d04 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  405d04:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  405d06:	4b03      	ldr	r3, [pc, #12]	; (405d14 <vPortEnterCritical+0x10>)
  405d08:	4798      	blx	r3
	uxCriticalNesting++;
  405d0a:	4a03      	ldr	r2, [pc, #12]	; (405d18 <vPortEnterCritical+0x14>)
  405d0c:	6813      	ldr	r3, [r2, #0]
  405d0e:	3301      	adds	r3, #1
  405d10:	6013      	str	r3, [r2, #0]
  405d12:	bd08      	pop	{r3, pc}
  405d14:	00405cf5 	.word	0x00405cf5
  405d18:	20000020 	.word	0x20000020

00405d1c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  405d1c:	f380 8811 	msr	BASEPRI, r0
  405d20:	4770      	bx	lr
  405d22:	bf00      	nop

00405d24 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  405d24:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  405d26:	4a04      	ldr	r2, [pc, #16]	; (405d38 <vPortExitCritical+0x14>)
  405d28:	6813      	ldr	r3, [r2, #0]
  405d2a:	3b01      	subs	r3, #1
  405d2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  405d2e:	b913      	cbnz	r3, 405d36 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
  405d30:	2000      	movs	r0, #0
  405d32:	4b02      	ldr	r3, [pc, #8]	; (405d3c <vPortExitCritical+0x18>)
  405d34:	4798      	blx	r3
  405d36:	bd08      	pop	{r3, pc}
  405d38:	20000020 	.word	0x20000020
  405d3c:	00405d1d 	.word	0x00405d1d

00405d40 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  405d40:	f3ef 8009 	mrs	r0, PSP
  405d44:	4b0c      	ldr	r3, [pc, #48]	; (405d78 <pxCurrentTCBConst>)
  405d46:	681a      	ldr	r2, [r3, #0]
  405d48:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405d4c:	6010      	str	r0, [r2, #0]
  405d4e:	e92d 4008 	stmdb	sp!, {r3, lr}
  405d52:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  405d56:	f380 8811 	msr	BASEPRI, r0
  405d5a:	f000 fe93 	bl	406a84 <vTaskSwitchContext>
  405d5e:	f04f 0000 	mov.w	r0, #0
  405d62:	f380 8811 	msr	BASEPRI, r0
  405d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  405d6a:	6819      	ldr	r1, [r3, #0]
  405d6c:	6808      	ldr	r0, [r1, #0]
  405d6e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405d72:	f380 8809 	msr	PSP, r0
  405d76:	4770      	bx	lr

00405d78 <pxCurrentTCBConst>:
  405d78:	2000aca4 	.word	0x2000aca4

00405d7c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  405d7c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  405d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405d82:	4b05      	ldr	r3, [pc, #20]	; (405d98 <SysTick_Handler+0x1c>)
  405d84:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  405d86:	4b05      	ldr	r3, [pc, #20]	; (405d9c <SysTick_Handler+0x20>)
  405d88:	4798      	blx	r3
	{
		vTaskIncrementTick();
  405d8a:	4b05      	ldr	r3, [pc, #20]	; (405da0 <SysTick_Handler+0x24>)
  405d8c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  405d8e:	2000      	movs	r0, #0
  405d90:	4b04      	ldr	r3, [pc, #16]	; (405da4 <SysTick_Handler+0x28>)
  405d92:	4798      	blx	r3
  405d94:	bd08      	pop	{r3, pc}
  405d96:	bf00      	nop
  405d98:	e000ed04 	.word	0xe000ed04
  405d9c:	00405cf5 	.word	0x00405cf5
  405da0:	00406795 	.word	0x00406795
  405da4:	00405d1d 	.word	0x00405d1d

00405da8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  405da8:	4a03      	ldr	r2, [pc, #12]	; (405db8 <vPortSetupTimerInterrupt+0x10>)
  405daa:	4b04      	ldr	r3, [pc, #16]	; (405dbc <vPortSetupTimerInterrupt+0x14>)
  405dac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  405dae:	2207      	movs	r2, #7
  405db0:	3b04      	subs	r3, #4
  405db2:	601a      	str	r2, [r3, #0]
  405db4:	4770      	bx	lr
  405db6:	bf00      	nop
  405db8:	0001d4bf 	.word	0x0001d4bf
  405dbc:	e000e014 	.word	0xe000e014

00405dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  405dc0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  405dc2:	4b09      	ldr	r3, [pc, #36]	; (405de8 <xPortStartScheduler+0x28>)
  405dc4:	681a      	ldr	r2, [r3, #0]
  405dc6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  405dca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  405dcc:	681a      	ldr	r2, [r3, #0]
  405dce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  405dd2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  405dd4:	4b05      	ldr	r3, [pc, #20]	; (405dec <xPortStartScheduler+0x2c>)
  405dd6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  405dd8:	2400      	movs	r4, #0
  405dda:	4b05      	ldr	r3, [pc, #20]	; (405df0 <xPortStartScheduler+0x30>)
  405ddc:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  405dde:	4b05      	ldr	r3, [pc, #20]	; (405df4 <xPortStartScheduler+0x34>)
  405de0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  405de2:	4620      	mov	r0, r4
  405de4:	bd10      	pop	{r4, pc}
  405de6:	bf00      	nop
  405de8:	e000ed20 	.word	0xe000ed20
  405dec:	00405da9 	.word	0x00405da9
  405df0:	20000020 	.word	0x20000020
  405df4:	00405c95 	.word	0x00405c95

00405df8 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  405df8:	4a12      	ldr	r2, [pc, #72]	; (405e44 <prvInsertBlockIntoFreeList+0x4c>)
  405dfa:	e000      	b.n	405dfe <prvInsertBlockIntoFreeList+0x6>
  405dfc:	461a      	mov	r2, r3
  405dfe:	6813      	ldr	r3, [r2, #0]
  405e00:	4283      	cmp	r3, r0
  405e02:	d3fb      	bcc.n	405dfc <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  405e04:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  405e06:	6851      	ldr	r1, [r2, #4]
  405e08:	1854      	adds	r4, r2, r1
  405e0a:	42a0      	cmp	r0, r4
  405e0c:	d103      	bne.n	405e16 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  405e0e:	6840      	ldr	r0, [r0, #4]
  405e10:	4401      	add	r1, r0
  405e12:	6051      	str	r1, [r2, #4]
  405e14:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  405e16:	6841      	ldr	r1, [r0, #4]
  405e18:	1844      	adds	r4, r0, r1
  405e1a:	42a3      	cmp	r3, r4
  405e1c:	d10c      	bne.n	405e38 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  405e1e:	4b0a      	ldr	r3, [pc, #40]	; (405e48 <prvInsertBlockIntoFreeList+0x50>)
  405e20:	681b      	ldr	r3, [r3, #0]
  405e22:	429c      	cmp	r4, r3
  405e24:	d006      	beq.n	405e34 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  405e26:	6863      	ldr	r3, [r4, #4]
  405e28:	4419      	add	r1, r3
  405e2a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  405e2c:	6813      	ldr	r3, [r2, #0]
  405e2e:	681b      	ldr	r3, [r3, #0]
  405e30:	6003      	str	r3, [r0, #0]
  405e32:	e002      	b.n	405e3a <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  405e34:	6004      	str	r4, [r0, #0]
  405e36:	e000      	b.n	405e3a <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  405e38:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  405e3a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  405e3c:	bf18      	it	ne
  405e3e:	6010      	strne	r0, [r2, #0]
	}
}
  405e40:	bc10      	pop	{r4}
  405e42:	4770      	bx	lr
  405e44:	2000abe4 	.word	0x2000abe4
  405e48:	2000abe0 	.word	0x2000abe0

00405e4c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  405e4c:	b538      	push	{r3, r4, r5, lr}
  405e4e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  405e50:	4b2b      	ldr	r3, [pc, #172]	; (405f00 <pvPortMalloc+0xb4>)
  405e52:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  405e54:	4b2b      	ldr	r3, [pc, #172]	; (405f04 <pvPortMalloc+0xb8>)
  405e56:	681b      	ldr	r3, [r3, #0]
  405e58:	b99b      	cbnz	r3, 405e82 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  405e5a:	4a2b      	ldr	r2, [pc, #172]	; (405f08 <pvPortMalloc+0xbc>)
  405e5c:	4b2b      	ldr	r3, [pc, #172]	; (405f0c <pvPortMalloc+0xc0>)
  405e5e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  405e60:	2100      	movs	r1, #0
  405e62:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  405e64:	f649 72f0 	movw	r2, #40944	; 0x9ff0
  405e68:	1898      	adds	r0, r3, r2
  405e6a:	4d26      	ldr	r5, [pc, #152]	; (405f04 <pvPortMalloc+0xb8>)
  405e6c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  405e6e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
  405e72:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  405e74:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  405e76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  405e78:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  405e7a:	4a25      	ldr	r2, [pc, #148]	; (405f10 <pvPortMalloc+0xc4>)
  405e7c:	6813      	ldr	r3, [r2, #0]
  405e7e:	3b10      	subs	r3, #16
  405e80:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  405e82:	2c00      	cmp	r4, #0
  405e84:	d037      	beq.n	405ef6 <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
  405e86:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405e8a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  405e8e:	bf1c      	itt	ne
  405e90:	f022 0207 	bicne.w	r2, r2, #7
  405e94:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  405e96:	1e51      	subs	r1, r2, #1
  405e98:	f649 73fe 	movw	r3, #40958	; 0x9ffe
  405e9c:	4299      	cmp	r1, r3
  405e9e:	d827      	bhi.n	405ef0 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  405ea0:	4919      	ldr	r1, [pc, #100]	; (405f08 <pvPortMalloc+0xbc>)
  405ea2:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  405ea4:	e001      	b.n	405eaa <pvPortMalloc+0x5e>
  405ea6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  405ea8:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  405eaa:	6863      	ldr	r3, [r4, #4]
  405eac:	429a      	cmp	r2, r3
  405eae:	d902      	bls.n	405eb6 <pvPortMalloc+0x6a>
  405eb0:	6823      	ldr	r3, [r4, #0]
  405eb2:	2b00      	cmp	r3, #0
  405eb4:	d1f7      	bne.n	405ea6 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  405eb6:	4b13      	ldr	r3, [pc, #76]	; (405f04 <pvPortMalloc+0xb8>)
  405eb8:	681b      	ldr	r3, [r3, #0]
  405eba:	429c      	cmp	r4, r3
  405ebc:	d018      	beq.n	405ef0 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  405ebe:	680d      	ldr	r5, [r1, #0]
  405ec0:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  405ec2:	6823      	ldr	r3, [r4, #0]
  405ec4:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  405ec6:	6863      	ldr	r3, [r4, #4]
  405ec8:	1a9b      	subs	r3, r3, r2
  405eca:	2b20      	cmp	r3, #32
  405ecc:	d904      	bls.n	405ed8 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  405ece:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  405ed0:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  405ed2:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  405ed4:	4b0f      	ldr	r3, [pc, #60]	; (405f14 <pvPortMalloc+0xc8>)
  405ed6:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  405ed8:	4a0d      	ldr	r2, [pc, #52]	; (405f10 <pvPortMalloc+0xc4>)
  405eda:	6813      	ldr	r3, [r2, #0]
  405edc:	6861      	ldr	r1, [r4, #4]
  405ede:	1a5b      	subs	r3, r3, r1
  405ee0:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  405ee2:	4b0d      	ldr	r3, [pc, #52]	; (405f18 <pvPortMalloc+0xcc>)
  405ee4:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  405ee6:	b94d      	cbnz	r5, 405efc <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
  405ee8:	4b0c      	ldr	r3, [pc, #48]	; (405f1c <pvPortMalloc+0xd0>)
  405eea:	4798      	blx	r3
  405eec:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
  405eee:	e005      	b.n	405efc <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  405ef0:	4b09      	ldr	r3, [pc, #36]	; (405f18 <pvPortMalloc+0xcc>)
  405ef2:	4798      	blx	r3
  405ef4:	e7f8      	b.n	405ee8 <pvPortMalloc+0x9c>
  405ef6:	4b08      	ldr	r3, [pc, #32]	; (405f18 <pvPortMalloc+0xcc>)
  405ef8:	4798      	blx	r3
  405efa:	e7f5      	b.n	405ee8 <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
  405efc:	4628      	mov	r0, r5
  405efe:	bd38      	pop	{r3, r4, r5, pc}
  405f00:	00406765 	.word	0x00406765
  405f04:	2000abe0 	.word	0x2000abe0
  405f08:	2000abe4 	.word	0x2000abe4
  405f0c:	20000be0 	.word	0x20000be0
  405f10:	20000024 	.word	0x20000024
  405f14:	00405df9 	.word	0x00405df9
  405f18:	004068b5 	.word	0x004068b5
  405f1c:	004075f5 	.word	0x004075f5

00405f20 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  405f20:	b180      	cbz	r0, 405f44 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405f22:	b510      	push	{r4, lr}
  405f24:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  405f26:	4b08      	ldr	r3, [pc, #32]	; (405f48 <vPortFree+0x28>)
  405f28:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  405f2a:	4a08      	ldr	r2, [pc, #32]	; (405f4c <vPortFree+0x2c>)
  405f2c:	f854 1c0c 	ldr.w	r1, [r4, #-12]
  405f30:	6813      	ldr	r3, [r2, #0]
  405f32:	440b      	add	r3, r1
  405f34:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  405f36:	f1a4 0010 	sub.w	r0, r4, #16
  405f3a:	4b05      	ldr	r3, [pc, #20]	; (405f50 <vPortFree+0x30>)
  405f3c:	4798      	blx	r3
		}
		xTaskResumeAll();
  405f3e:	4b05      	ldr	r3, [pc, #20]	; (405f54 <vPortFree+0x34>)
  405f40:	4798      	blx	r3
  405f42:	bd10      	pop	{r4, pc}
  405f44:	4770      	bx	lr
  405f46:	bf00      	nop
  405f48:	00406765 	.word	0x00406765
  405f4c:	20000024 	.word	0x20000024
  405f50:	00405df9 	.word	0x00405df9
  405f54:	004068b5 	.word	0x004068b5

00405f58 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  405f58:	b510      	push	{r4, lr}
  405f5a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  405f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  405f5e:	b93b      	cbnz	r3, 405f70 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405f60:	6803      	ldr	r3, [r0, #0]
  405f62:	bb1b      	cbnz	r3, 405fac <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  405f64:	6840      	ldr	r0, [r0, #4]
  405f66:	4b13      	ldr	r3, [pc, #76]	; (405fb4 <prvCopyDataToQueue+0x5c>)
  405f68:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  405f6a:	2300      	movs	r3, #0
  405f6c:	6063      	str	r3, [r4, #4]
  405f6e:	e01d      	b.n	405fac <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  405f70:	b96a      	cbnz	r2, 405f8e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405f72:	461a      	mov	r2, r3
  405f74:	6880      	ldr	r0, [r0, #8]
  405f76:	4b10      	ldr	r3, [pc, #64]	; (405fb8 <prvCopyDataToQueue+0x60>)
  405f78:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  405f7a:	68a2      	ldr	r2, [r4, #8]
  405f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  405f7e:	4413      	add	r3, r2
  405f80:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  405f82:	6862      	ldr	r2, [r4, #4]
  405f84:	4293      	cmp	r3, r2
  405f86:	d311      	bcc.n	405fac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  405f88:	6823      	ldr	r3, [r4, #0]
  405f8a:	60a3      	str	r3, [r4, #8]
  405f8c:	e00e      	b.n	405fac <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405f8e:	461a      	mov	r2, r3
  405f90:	68c0      	ldr	r0, [r0, #12]
  405f92:	4b09      	ldr	r3, [pc, #36]	; (405fb8 <prvCopyDataToQueue+0x60>)
  405f94:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  405f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
  405f98:	425b      	negs	r3, r3
  405f9a:	68e2      	ldr	r2, [r4, #12]
  405f9c:	441a      	add	r2, r3
  405f9e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  405fa0:	6821      	ldr	r1, [r4, #0]
  405fa2:	428a      	cmp	r2, r1
  405fa4:	d202      	bcs.n	405fac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  405fa6:	6862      	ldr	r2, [r4, #4]
  405fa8:	4413      	add	r3, r2
  405faa:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  405fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405fae:	3301      	adds	r3, #1
  405fb0:	63a3      	str	r3, [r4, #56]	; 0x38
  405fb2:	bd10      	pop	{r4, pc}
  405fb4:	00406db5 	.word	0x00406db5
  405fb8:	00409015 	.word	0x00409015

00405fbc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  405fbc:	b538      	push	{r3, r4, r5, lr}
  405fbe:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  405fc0:	6800      	ldr	r0, [r0, #0]
  405fc2:	b158      	cbz	r0, 405fdc <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  405fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  405fc6:	68dc      	ldr	r4, [r3, #12]
  405fc8:	4414      	add	r4, r2
  405fca:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  405fcc:	685d      	ldr	r5, [r3, #4]
  405fce:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  405fd0:	bf28      	it	cs
  405fd2:	60d8      	strcs	r0, [r3, #12]
  405fd4:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  405fd6:	68d9      	ldr	r1, [r3, #12]
  405fd8:	4b01      	ldr	r3, [pc, #4]	; (405fe0 <prvCopyDataFromQueue+0x24>)
  405fda:	4798      	blx	r3
  405fdc:	bd38      	pop	{r3, r4, r5, pc}
  405fde:	bf00      	nop
  405fe0:	00409015 	.word	0x00409015

00405fe4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  405fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fe6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  405fe8:	4b1e      	ldr	r3, [pc, #120]	; (406064 <prvUnlockQueue+0x80>)
  405fea:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  405fec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  405fee:	2b00      	cmp	r3, #0
  405ff0:	dd13      	ble.n	40601a <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405ff4:	b91b      	cbnz	r3, 405ffe <prvUnlockQueue+0x1a>
  405ff6:	e010      	b.n	40601a <prvUnlockQueue+0x36>
  405ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405ffa:	b923      	cbnz	r3, 406006 <prvUnlockQueue+0x22>
  405ffc:	e00d      	b.n	40601a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405ffe:	f104 0624 	add.w	r6, r4, #36	; 0x24
  406002:	4d19      	ldr	r5, [pc, #100]	; (406068 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  406004:	4f19      	ldr	r7, [pc, #100]	; (40606c <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  406006:	4630      	mov	r0, r6
  406008:	47a8      	blx	r5
  40600a:	b100      	cbz	r0, 40600e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40600c:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  40600e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  406010:	3b01      	subs	r3, #1
  406012:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406014:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  406016:	2b00      	cmp	r3, #0
  406018:	dcee      	bgt.n	405ff8 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  40601a:	f04f 33ff 	mov.w	r3, #4294967295
  40601e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  406020:	4b13      	ldr	r3, [pc, #76]	; (406070 <prvUnlockQueue+0x8c>)
  406022:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406024:	4b0f      	ldr	r3, [pc, #60]	; (406064 <prvUnlockQueue+0x80>)
  406026:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406028:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40602a:	2b00      	cmp	r3, #0
  40602c:	dd13      	ble.n	406056 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40602e:	6923      	ldr	r3, [r4, #16]
  406030:	b91b      	cbnz	r3, 40603a <prvUnlockQueue+0x56>
  406032:	e010      	b.n	406056 <prvUnlockQueue+0x72>
  406034:	6923      	ldr	r3, [r4, #16]
  406036:	b923      	cbnz	r3, 406042 <prvUnlockQueue+0x5e>
  406038:	e00d      	b.n	406056 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40603a:	f104 0610 	add.w	r6, r4, #16
  40603e:	4d0a      	ldr	r5, [pc, #40]	; (406068 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  406040:	4f0a      	ldr	r7, [pc, #40]	; (40606c <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  406042:	4630      	mov	r0, r6
  406044:	47a8      	blx	r5
  406046:	b100      	cbz	r0, 40604a <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  406048:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  40604a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40604c:	3b01      	subs	r3, #1
  40604e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406050:	6c63      	ldr	r3, [r4, #68]	; 0x44
  406052:	2b00      	cmp	r3, #0
  406054:	dcee      	bgt.n	406034 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  406056:	f04f 33ff 	mov.w	r3, #4294967295
  40605a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40605c:	4b04      	ldr	r3, [pc, #16]	; (406070 <prvUnlockQueue+0x8c>)
  40605e:	4798      	blx	r3
  406060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406062:	bf00      	nop
  406064:	00405d05 	.word	0x00405d05
  406068:	00406bcd 	.word	0x00406bcd
  40606c:	00406cfd 	.word	0x00406cfd
  406070:	00405d25 	.word	0x00405d25

00406074 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  406074:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  406076:	b918      	cbnz	r0, 406080 <xQueueGenericReset+0xc>
  406078:	4b17      	ldr	r3, [pc, #92]	; (4060d8 <xQueueGenericReset+0x64>)
  40607a:	4798      	blx	r3
  40607c:	bf00      	nop
  40607e:	e7fd      	b.n	40607c <xQueueGenericReset+0x8>
  406080:	460d      	mov	r5, r1
  406082:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  406084:	4b15      	ldr	r3, [pc, #84]	; (4060dc <xQueueGenericReset+0x68>)
  406086:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  406088:	6822      	ldr	r2, [r4, #0]
  40608a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40608c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40608e:	fb03 f301 	mul.w	r3, r3, r1
  406092:	18d0      	adds	r0, r2, r3
  406094:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  406096:	2000      	movs	r0, #0
  406098:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40609a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  40609c:	1a5b      	subs	r3, r3, r1
  40609e:	4413      	add	r3, r2
  4060a0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4060a2:	f04f 33ff 	mov.w	r3, #4294967295
  4060a6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4060a8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4060aa:	b955      	cbnz	r5, 4060c2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4060ac:	6923      	ldr	r3, [r4, #16]
  4060ae:	b17b      	cbz	r3, 4060d0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4060b0:	f104 0010 	add.w	r0, r4, #16
  4060b4:	4b0a      	ldr	r3, [pc, #40]	; (4060e0 <xQueueGenericReset+0x6c>)
  4060b6:	4798      	blx	r3
  4060b8:	2801      	cmp	r0, #1
  4060ba:	d109      	bne.n	4060d0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
  4060bc:	4b09      	ldr	r3, [pc, #36]	; (4060e4 <xQueueGenericReset+0x70>)
  4060be:	4798      	blx	r3
  4060c0:	e006      	b.n	4060d0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4060c2:	f104 0010 	add.w	r0, r4, #16
  4060c6:	4d08      	ldr	r5, [pc, #32]	; (4060e8 <xQueueGenericReset+0x74>)
  4060c8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4060ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4060ce:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4060d0:	4b06      	ldr	r3, [pc, #24]	; (4060ec <xQueueGenericReset+0x78>)
  4060d2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4060d4:	2001      	movs	r0, #1
  4060d6:	bd38      	pop	{r3, r4, r5, pc}
  4060d8:	00405cf5 	.word	0x00405cf5
  4060dc:	00405d05 	.word	0x00405d05
  4060e0:	00406bcd 	.word	0x00406bcd
  4060e4:	00405ce5 	.word	0x00405ce5
  4060e8:	00405bf5 	.word	0x00405bf5
  4060ec:	00405d25 	.word	0x00405d25

004060f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4060f2:	b1a0      	cbz	r0, 40611e <xQueueGenericCreate+0x2e>
  4060f4:	460d      	mov	r5, r1
  4060f6:	4617      	mov	r7, r2
  4060f8:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4060fa:	2050      	movs	r0, #80	; 0x50
  4060fc:	4b0e      	ldr	r3, [pc, #56]	; (406138 <xQueueGenericCreate+0x48>)
  4060fe:	4798      	blx	r3
		if( pxNewQueue != NULL )
  406100:	4604      	mov	r4, r0
  406102:	b160      	cbz	r0, 40611e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  406104:	fb05 f006 	mul.w	r0, r5, r6
  406108:	3001      	adds	r0, #1
  40610a:	4b0b      	ldr	r3, [pc, #44]	; (406138 <xQueueGenericCreate+0x48>)
  40610c:	4798      	blx	r3
  40610e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  406110:	b940      	cbnz	r0, 406124 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  406112:	4620      	mov	r0, r4
  406114:	4b09      	ldr	r3, [pc, #36]	; (40613c <xQueueGenericCreate+0x4c>)
  406116:	4798      	blx	r3
  406118:	e001      	b.n	40611e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
  40611a:	bf00      	nop
  40611c:	e7fd      	b.n	40611a <xQueueGenericCreate+0x2a>
  40611e:	4b08      	ldr	r3, [pc, #32]	; (406140 <xQueueGenericCreate+0x50>)
  406120:	4798      	blx	r3
  406122:	e7fa      	b.n	40611a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  406124:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  406126:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  406128:	2101      	movs	r1, #1
  40612a:	4620      	mov	r0, r4
  40612c:	4b05      	ldr	r3, [pc, #20]	; (406144 <xQueueGenericCreate+0x54>)
  40612e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  406130:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
  406134:	4620      	mov	r0, r4
  406136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406138:	00405e4d 	.word	0x00405e4d
  40613c:	00405f21 	.word	0x00405f21
  406140:	00405cf5 	.word	0x00405cf5
  406144:	00406075 	.word	0x00406075

00406148 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  406148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40614c:	b085      	sub	sp, #20
  40614e:	9201      	str	r2, [sp, #4]
  406150:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  406152:	b918      	cbnz	r0, 40615c <xQueueGenericSend+0x14>
  406154:	4b38      	ldr	r3, [pc, #224]	; (406238 <xQueueGenericSend+0xf0>)
  406156:	4798      	blx	r3
  406158:	bf00      	nop
  40615a:	e7fd      	b.n	406158 <xQueueGenericSend+0x10>
  40615c:	468a      	mov	sl, r1
  40615e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  406160:	b929      	cbnz	r1, 40616e <xQueueGenericSend+0x26>
  406162:	6c03      	ldr	r3, [r0, #64]	; 0x40
  406164:	b12b      	cbz	r3, 406172 <xQueueGenericSend+0x2a>
  406166:	4b34      	ldr	r3, [pc, #208]	; (406238 <xQueueGenericSend+0xf0>)
  406168:	4798      	blx	r3
  40616a:	bf00      	nop
  40616c:	e7fd      	b.n	40616a <xQueueGenericSend+0x22>
  40616e:	2700      	movs	r7, #0
  406170:	e000      	b.n	406174 <xQueueGenericSend+0x2c>
  406172:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  406174:	4e31      	ldr	r6, [pc, #196]	; (40623c <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  406176:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 406264 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  40617a:	4d31      	ldr	r5, [pc, #196]	; (406240 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40617c:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40617e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  406182:	429a      	cmp	r2, r3
  406184:	d212      	bcs.n	4061ac <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  406186:	9a00      	ldr	r2, [sp, #0]
  406188:	4651      	mov	r1, sl
  40618a:	4620      	mov	r0, r4
  40618c:	4b2d      	ldr	r3, [pc, #180]	; (406244 <xQueueGenericSend+0xfc>)
  40618e:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406190:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406192:	b13b      	cbz	r3, 4061a4 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  406194:	f104 0024 	add.w	r0, r4, #36	; 0x24
  406198:	4b2b      	ldr	r3, [pc, #172]	; (406248 <xQueueGenericSend+0x100>)
  40619a:	4798      	blx	r3
  40619c:	2801      	cmp	r0, #1
  40619e:	d101      	bne.n	4061a4 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  4061a0:	4b2a      	ldr	r3, [pc, #168]	; (40624c <xQueueGenericSend+0x104>)
  4061a2:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4061a4:	4b26      	ldr	r3, [pc, #152]	; (406240 <xQueueGenericSend+0xf8>)
  4061a6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4061a8:	2001      	movs	r0, #1
  4061aa:	e042      	b.n	406232 <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4061ac:	9b01      	ldr	r3, [sp, #4]
  4061ae:	b91b      	cbnz	r3, 4061b8 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4061b0:	4b23      	ldr	r3, [pc, #140]	; (406240 <xQueueGenericSend+0xf8>)
  4061b2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4061b4:	2000      	movs	r0, #0
  4061b6:	e03c      	b.n	406232 <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
  4061b8:	b917      	cbnz	r7, 4061c0 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4061ba:	a802      	add	r0, sp, #8
  4061bc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  4061be:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4061c0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4061c2:	4b23      	ldr	r3, [pc, #140]	; (406250 <xQueueGenericSend+0x108>)
  4061c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4061c6:	47b0      	blx	r6
  4061c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4061ce:	bf04      	itt	eq
  4061d0:	2300      	moveq	r3, #0
  4061d2:	6463      	streq	r3, [r4, #68]	; 0x44
  4061d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4061da:	bf04      	itt	eq
  4061dc:	2300      	moveq	r3, #0
  4061de:	64a3      	streq	r3, [r4, #72]	; 0x48
  4061e0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4061e2:	a901      	add	r1, sp, #4
  4061e4:	a802      	add	r0, sp, #8
  4061e6:	4b1b      	ldr	r3, [pc, #108]	; (406254 <xQueueGenericSend+0x10c>)
  4061e8:	4798      	blx	r3
  4061ea:	b9e0      	cbnz	r0, 406226 <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4061ec:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4061ee:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  4061f2:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4061f6:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4061f8:	45c1      	cmp	r9, r8
  4061fa:	d10e      	bne.n	40621a <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4061fc:	9901      	ldr	r1, [sp, #4]
  4061fe:	f104 0010 	add.w	r0, r4, #16
  406202:	4b15      	ldr	r3, [pc, #84]	; (406258 <xQueueGenericSend+0x110>)
  406204:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  406206:	4620      	mov	r0, r4
  406208:	4b14      	ldr	r3, [pc, #80]	; (40625c <xQueueGenericSend+0x114>)
  40620a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40620c:	4b14      	ldr	r3, [pc, #80]	; (406260 <xQueueGenericSend+0x118>)
  40620e:	4798      	blx	r3
  406210:	2800      	cmp	r0, #0
  406212:	d1b3      	bne.n	40617c <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
  406214:	4b0d      	ldr	r3, [pc, #52]	; (40624c <xQueueGenericSend+0x104>)
  406216:	4798      	blx	r3
  406218:	e7b0      	b.n	40617c <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40621a:	4620      	mov	r0, r4
  40621c:	4b0f      	ldr	r3, [pc, #60]	; (40625c <xQueueGenericSend+0x114>)
  40621e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  406220:	4b0f      	ldr	r3, [pc, #60]	; (406260 <xQueueGenericSend+0x118>)
  406222:	4798      	blx	r3
  406224:	e7aa      	b.n	40617c <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  406226:	4620      	mov	r0, r4
  406228:	4b0c      	ldr	r3, [pc, #48]	; (40625c <xQueueGenericSend+0x114>)
  40622a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40622c:	4b0c      	ldr	r3, [pc, #48]	; (406260 <xQueueGenericSend+0x118>)
  40622e:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  406230:	2000      	movs	r0, #0
		}
	}
}
  406232:	b005      	add	sp, #20
  406234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406238:	00405cf5 	.word	0x00405cf5
  40623c:	00405d05 	.word	0x00405d05
  406240:	00405d25 	.word	0x00405d25
  406244:	00405f59 	.word	0x00405f59
  406248:	00406bcd 	.word	0x00406bcd
  40624c:	00405ce5 	.word	0x00405ce5
  406250:	00406765 	.word	0x00406765
  406254:	00406c79 	.word	0x00406c79
  406258:	00406b29 	.word	0x00406b29
  40625c:	00405fe5 	.word	0x00405fe5
  406260:	004068b5 	.word	0x004068b5
  406264:	00406c51 	.word	0x00406c51

00406268 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  406268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  40626c:	b918      	cbnz	r0, 406276 <xQueueGenericSendFromISR+0xe>
  40626e:	4b1e      	ldr	r3, [pc, #120]	; (4062e8 <xQueueGenericSendFromISR+0x80>)
  406270:	4798      	blx	r3
  406272:	bf00      	nop
  406274:	e7fd      	b.n	406272 <xQueueGenericSendFromISR+0xa>
  406276:	460e      	mov	r6, r1
  406278:	4615      	mov	r5, r2
  40627a:	4698      	mov	r8, r3
  40627c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40627e:	b929      	cbnz	r1, 40628c <xQueueGenericSendFromISR+0x24>
  406280:	6c03      	ldr	r3, [r0, #64]	; 0x40
  406282:	b11b      	cbz	r3, 40628c <xQueueGenericSendFromISR+0x24>
  406284:	4b18      	ldr	r3, [pc, #96]	; (4062e8 <xQueueGenericSendFromISR+0x80>)
  406286:	4798      	blx	r3
  406288:	bf00      	nop
  40628a:	e7fd      	b.n	406288 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40628c:	4b16      	ldr	r3, [pc, #88]	; (4062e8 <xQueueGenericSendFromISR+0x80>)
  40628e:	4798      	blx	r3
  406290:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  406292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  406296:	429a      	cmp	r2, r3
  406298:	d218      	bcs.n	4062cc <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40629a:	4642      	mov	r2, r8
  40629c:	4631      	mov	r1, r6
  40629e:	4620      	mov	r0, r4
  4062a0:	4b12      	ldr	r3, [pc, #72]	; (4062ec <xQueueGenericSendFromISR+0x84>)
  4062a2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4062a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4062aa:	d10a      	bne.n	4062c2 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4062ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4062ae:	b17b      	cbz	r3, 4062d0 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4062b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4062b4:	4b0e      	ldr	r3, [pc, #56]	; (4062f0 <xQueueGenericSendFromISR+0x88>)
  4062b6:	4798      	blx	r3
  4062b8:	b160      	cbz	r0, 4062d4 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  4062ba:	b16d      	cbz	r5, 4062d8 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4062bc:	2401      	movs	r4, #1
  4062be:	602c      	str	r4, [r5, #0]
  4062c0:	e00b      	b.n	4062da <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4062c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4062c4:	3301      	adds	r3, #1
  4062c6:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4062c8:	2401      	movs	r4, #1
  4062ca:	e006      	b.n	4062da <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4062cc:	2400      	movs	r4, #0
  4062ce:	e004      	b.n	4062da <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4062d0:	2401      	movs	r4, #1
  4062d2:	e002      	b.n	4062da <xQueueGenericSendFromISR+0x72>
  4062d4:	2401      	movs	r4, #1
  4062d6:	e000      	b.n	4062da <xQueueGenericSendFromISR+0x72>
  4062d8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4062da:	4638      	mov	r0, r7
  4062dc:	4b05      	ldr	r3, [pc, #20]	; (4062f4 <xQueueGenericSendFromISR+0x8c>)
  4062de:	4798      	blx	r3

	return xReturn;
}
  4062e0:	4620      	mov	r0, r4
  4062e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062e6:	bf00      	nop
  4062e8:	00405cf5 	.word	0x00405cf5
  4062ec:	00405f59 	.word	0x00405f59
  4062f0:	00406bcd 	.word	0x00406bcd
  4062f4:	00405d1d 	.word	0x00405d1d

004062f8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062fc:	b085      	sub	sp, #20
  4062fe:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  406300:	b918      	cbnz	r0, 40630a <xQueueGenericReceive+0x12>
  406302:	4b46      	ldr	r3, [pc, #280]	; (40641c <xQueueGenericReceive+0x124>)
  406304:	4798      	blx	r3
  406306:	bf00      	nop
  406308:	e7fd      	b.n	406306 <xQueueGenericReceive+0xe>
  40630a:	4689      	mov	r9, r1
  40630c:	469a      	mov	sl, r3
  40630e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  406310:	b929      	cbnz	r1, 40631e <xQueueGenericReceive+0x26>
  406312:	6c03      	ldr	r3, [r0, #64]	; 0x40
  406314:	b12b      	cbz	r3, 406322 <xQueueGenericReceive+0x2a>
  406316:	4b41      	ldr	r3, [pc, #260]	; (40641c <xQueueGenericReceive+0x124>)
  406318:	4798      	blx	r3
  40631a:	bf00      	nop
  40631c:	e7fd      	b.n	40631a <xQueueGenericReceive+0x22>
  40631e:	2700      	movs	r7, #0
  406320:	e000      	b.n	406324 <xQueueGenericReceive+0x2c>
  406322:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  406324:	4e3e      	ldr	r6, [pc, #248]	; (406420 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  406326:	f8df b128 	ldr.w	fp, [pc, #296]	; 406450 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  40632a:	4d3e      	ldr	r5, [pc, #248]	; (406424 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40632c:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  40632e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406330:	b343      	cbz	r3, 406384 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  406332:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  406334:	4649      	mov	r1, r9
  406336:	4620      	mov	r0, r4
  406338:	4b3b      	ldr	r3, [pc, #236]	; (406428 <xQueueGenericReceive+0x130>)
  40633a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  40633c:	f1ba 0f00 	cmp.w	sl, #0
  406340:	d112      	bne.n	406368 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  406342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406344:	3b01      	subs	r3, #1
  406346:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406348:	6823      	ldr	r3, [r4, #0]
  40634a:	b913      	cbnz	r3, 406352 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  40634c:	4b37      	ldr	r3, [pc, #220]	; (40642c <xQueueGenericReceive+0x134>)
  40634e:	4798      	blx	r3
  406350:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406352:	6923      	ldr	r3, [r4, #16]
  406354:	b193      	cbz	r3, 40637c <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  406356:	f104 0010 	add.w	r0, r4, #16
  40635a:	4b35      	ldr	r3, [pc, #212]	; (406430 <xQueueGenericReceive+0x138>)
  40635c:	4798      	blx	r3
  40635e:	2801      	cmp	r0, #1
  406360:	d10c      	bne.n	40637c <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
  406362:	4b34      	ldr	r3, [pc, #208]	; (406434 <xQueueGenericReceive+0x13c>)
  406364:	4798      	blx	r3
  406366:	e009      	b.n	40637c <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  406368:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40636c:	b133      	cbz	r3, 40637c <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40636e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  406372:	4b2f      	ldr	r3, [pc, #188]	; (406430 <xQueueGenericReceive+0x138>)
  406374:	4798      	blx	r3
  406376:	b108      	cbz	r0, 40637c <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  406378:	4b2e      	ldr	r3, [pc, #184]	; (406434 <xQueueGenericReceive+0x13c>)
  40637a:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  40637c:	4b29      	ldr	r3, [pc, #164]	; (406424 <xQueueGenericReceive+0x12c>)
  40637e:	4798      	blx	r3
				return pdPASS;
  406380:	2001      	movs	r0, #1
  406382:	e048      	b.n	406416 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  406384:	9b01      	ldr	r3, [sp, #4]
  406386:	b91b      	cbnz	r3, 406390 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  406388:	4b26      	ldr	r3, [pc, #152]	; (406424 <xQueueGenericReceive+0x12c>)
  40638a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40638c:	2000      	movs	r0, #0
  40638e:	e042      	b.n	406416 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
  406390:	b917      	cbnz	r7, 406398 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  406392:	a802      	add	r0, sp, #8
  406394:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  406396:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  406398:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40639a:	4b27      	ldr	r3, [pc, #156]	; (406438 <xQueueGenericReceive+0x140>)
  40639c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40639e:	47b0      	blx	r6
  4063a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4063a6:	bf04      	itt	eq
  4063a8:	2300      	moveq	r3, #0
  4063aa:	6463      	streq	r3, [r4, #68]	; 0x44
  4063ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4063b2:	bf04      	itt	eq
  4063b4:	2300      	moveq	r3, #0
  4063b6:	64a3      	streq	r3, [r4, #72]	; 0x48
  4063b8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4063ba:	a901      	add	r1, sp, #4
  4063bc:	a802      	add	r0, sp, #8
  4063be:	4b1f      	ldr	r3, [pc, #124]	; (40643c <xQueueGenericReceive+0x144>)
  4063c0:	4798      	blx	r3
  4063c2:	bb10      	cbnz	r0, 40640a <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4063c4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4063c6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4063ca:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4063cc:	f1b8 0f00 	cmp.w	r8, #0
  4063d0:	d115      	bne.n	4063fe <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4063d2:	6823      	ldr	r3, [r4, #0]
  4063d4:	b923      	cbnz	r3, 4063e0 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
  4063d6:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4063d8:	6860      	ldr	r0, [r4, #4]
  4063da:	4b19      	ldr	r3, [pc, #100]	; (406440 <xQueueGenericReceive+0x148>)
  4063dc:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4063de:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4063e0:	9901      	ldr	r1, [sp, #4]
  4063e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4063e6:	4b17      	ldr	r3, [pc, #92]	; (406444 <xQueueGenericReceive+0x14c>)
  4063e8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4063ea:	4620      	mov	r0, r4
  4063ec:	4b16      	ldr	r3, [pc, #88]	; (406448 <xQueueGenericReceive+0x150>)
  4063ee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4063f0:	4b16      	ldr	r3, [pc, #88]	; (40644c <xQueueGenericReceive+0x154>)
  4063f2:	4798      	blx	r3
  4063f4:	2800      	cmp	r0, #0
  4063f6:	d199      	bne.n	40632c <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
  4063f8:	4b0e      	ldr	r3, [pc, #56]	; (406434 <xQueueGenericReceive+0x13c>)
  4063fa:	4798      	blx	r3
  4063fc:	e796      	b.n	40632c <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4063fe:	4620      	mov	r0, r4
  406400:	4b11      	ldr	r3, [pc, #68]	; (406448 <xQueueGenericReceive+0x150>)
  406402:	4798      	blx	r3
				( void ) xTaskResumeAll();
  406404:	4b11      	ldr	r3, [pc, #68]	; (40644c <xQueueGenericReceive+0x154>)
  406406:	4798      	blx	r3
  406408:	e790      	b.n	40632c <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  40640a:	4620      	mov	r0, r4
  40640c:	4b0e      	ldr	r3, [pc, #56]	; (406448 <xQueueGenericReceive+0x150>)
  40640e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  406410:	4b0e      	ldr	r3, [pc, #56]	; (40644c <xQueueGenericReceive+0x154>)
  406412:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  406414:	2000      	movs	r0, #0
		}
	}
}
  406416:	b005      	add	sp, #20
  406418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40641c:	00405cf5 	.word	0x00405cf5
  406420:	00405d05 	.word	0x00405d05
  406424:	00405d25 	.word	0x00405d25
  406428:	00405fbd 	.word	0x00405fbd
  40642c:	00406d09 	.word	0x00406d09
  406430:	00406bcd 	.word	0x00406bcd
  406434:	00405ce5 	.word	0x00405ce5
  406438:	00406765 	.word	0x00406765
  40643c:	00406c79 	.word	0x00406c79
  406440:	00406d35 	.word	0x00406d35
  406444:	00406b29 	.word	0x00406b29
  406448:	00405fe5 	.word	0x00405fe5
  40644c:	004068b5 	.word	0x004068b5
  406450:	00406c51 	.word	0x00406c51

00406454 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  406454:	b538      	push	{r3, r4, r5, lr}
  406456:	4604      	mov	r4, r0
  406458:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40645a:	4b0d      	ldr	r3, [pc, #52]	; (406490 <vQueueWaitForMessageRestricted+0x3c>)
  40645c:	4798      	blx	r3
  40645e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  406460:	f1b3 3fff 	cmp.w	r3, #4294967295
  406464:	bf04      	itt	eq
  406466:	2300      	moveq	r3, #0
  406468:	6463      	streq	r3, [r4, #68]	; 0x44
  40646a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40646c:	f1b3 3fff 	cmp.w	r3, #4294967295
  406470:	bf04      	itt	eq
  406472:	2300      	moveq	r3, #0
  406474:	64a3      	streq	r3, [r4, #72]	; 0x48
  406476:	4b07      	ldr	r3, [pc, #28]	; (406494 <vQueueWaitForMessageRestricted+0x40>)
  406478:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40647a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40647c:	b923      	cbnz	r3, 406488 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40647e:	4629      	mov	r1, r5
  406480:	f104 0024 	add.w	r0, r4, #36	; 0x24
  406484:	4b04      	ldr	r3, [pc, #16]	; (406498 <vQueueWaitForMessageRestricted+0x44>)
  406486:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  406488:	4620      	mov	r0, r4
  40648a:	4b04      	ldr	r3, [pc, #16]	; (40649c <vQueueWaitForMessageRestricted+0x48>)
  40648c:	4798      	blx	r3
  40648e:	bd38      	pop	{r3, r4, r5, pc}
  406490:	00405d05 	.word	0x00405d05
  406494:	00405d25 	.word	0x00405d25
  406498:	00406b89 	.word	0x00406b89
  40649c:	00405fe5 	.word	0x00405fe5

004064a0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4064a0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4064a2:	4b0f      	ldr	r3, [pc, #60]	; (4064e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4064a4:	681b      	ldr	r3, [r3, #0]
  4064a6:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4064a8:	4b0e      	ldr	r3, [pc, #56]	; (4064e4 <prvAddCurrentTaskToDelayedList+0x44>)
  4064aa:	681b      	ldr	r3, [r3, #0]
  4064ac:	4298      	cmp	r0, r3
  4064ae:	d207      	bcs.n	4064c0 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4064b0:	4b0d      	ldr	r3, [pc, #52]	; (4064e8 <prvAddCurrentTaskToDelayedList+0x48>)
  4064b2:	6818      	ldr	r0, [r3, #0]
  4064b4:	4b0a      	ldr	r3, [pc, #40]	; (4064e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4064b6:	6819      	ldr	r1, [r3, #0]
  4064b8:	3104      	adds	r1, #4
  4064ba:	4b0c      	ldr	r3, [pc, #48]	; (4064ec <prvAddCurrentTaskToDelayedList+0x4c>)
  4064bc:	4798      	blx	r3
  4064be:	bd10      	pop	{r4, pc}
  4064c0:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4064c2:	4b0b      	ldr	r3, [pc, #44]	; (4064f0 <prvAddCurrentTaskToDelayedList+0x50>)
  4064c4:	6818      	ldr	r0, [r3, #0]
  4064c6:	4b06      	ldr	r3, [pc, #24]	; (4064e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4064c8:	6819      	ldr	r1, [r3, #0]
  4064ca:	3104      	adds	r1, #4
  4064cc:	4b07      	ldr	r3, [pc, #28]	; (4064ec <prvAddCurrentTaskToDelayedList+0x4c>)
  4064ce:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4064d0:	4b08      	ldr	r3, [pc, #32]	; (4064f4 <prvAddCurrentTaskToDelayedList+0x54>)
  4064d2:	681b      	ldr	r3, [r3, #0]
  4064d4:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  4064d6:	bf3c      	itt	cc
  4064d8:	4b06      	ldrcc	r3, [pc, #24]	; (4064f4 <prvAddCurrentTaskToDelayedList+0x54>)
  4064da:	601c      	strcc	r4, [r3, #0]
  4064dc:	bd10      	pop	{r4, pc}
  4064de:	bf00      	nop
  4064e0:	2000aca4 	.word	0x2000aca4
  4064e4:	2000acc0 	.word	0x2000acc0
  4064e8:	2000acc4 	.word	0x2000acc4
  4064ec:	00405c31 	.word	0x00405c31
  4064f0:	2000ac00 	.word	0x2000ac00
  4064f4:	20000028 	.word	0x20000028

004064f8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064fc:	b083      	sub	sp, #12
  4064fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406500:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406504:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  406506:	9001      	str	r0, [sp, #4]
  406508:	b918      	cbnz	r0, 406512 <xTaskGenericCreate+0x1a>
  40650a:	4b62      	ldr	r3, [pc, #392]	; (406694 <xTaskGenericCreate+0x19c>)
  40650c:	4798      	blx	r3
  40650e:	bf00      	nop
  406510:	e7fd      	b.n	40650e <xTaskGenericCreate+0x16>
  406512:	4689      	mov	r9, r1
  406514:	4615      	mov	r5, r2
  406516:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  406518:	2f04      	cmp	r7, #4
  40651a:	d903      	bls.n	406524 <xTaskGenericCreate+0x2c>
  40651c:	4b5d      	ldr	r3, [pc, #372]	; (406694 <xTaskGenericCreate+0x19c>)
  40651e:	4798      	blx	r3
  406520:	bf00      	nop
  406522:	e7fd      	b.n	406520 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  406524:	204c      	movs	r0, #76	; 0x4c
  406526:	4b5c      	ldr	r3, [pc, #368]	; (406698 <xTaskGenericCreate+0x1a0>)
  406528:	4798      	blx	r3

	if( pxNewTCB != NULL )
  40652a:	4604      	mov	r4, r0
  40652c:	2800      	cmp	r0, #0
  40652e:	f000 80ab 	beq.w	406688 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  406532:	2e00      	cmp	r6, #0
  406534:	f040 80a5 	bne.w	406682 <xTaskGenericCreate+0x18a>
  406538:	00a8      	lsls	r0, r5, #2
  40653a:	4b57      	ldr	r3, [pc, #348]	; (406698 <xTaskGenericCreate+0x1a0>)
  40653c:	4798      	blx	r3
  40653e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  406540:	b918      	cbnz	r0, 40654a <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  406542:	4620      	mov	r0, r4
  406544:	4b55      	ldr	r3, [pc, #340]	; (40669c <xTaskGenericCreate+0x1a4>)
  406546:	4798      	blx	r3
  406548:	e09e      	b.n	406688 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40654a:	00aa      	lsls	r2, r5, #2
  40654c:	21a5      	movs	r1, #165	; 0xa5
  40654e:	4b54      	ldr	r3, [pc, #336]	; (4066a0 <xTaskGenericCreate+0x1a8>)
  406550:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  406552:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  406556:	3d01      	subs	r5, #1
  406558:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40655a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  40655e:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  406562:	220a      	movs	r2, #10
  406564:	4649      	mov	r1, r9
  406566:	f104 0034 	add.w	r0, r4, #52	; 0x34
  40656a:	4b4e      	ldr	r3, [pc, #312]	; (4066a4 <xTaskGenericCreate+0x1ac>)
  40656c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40656e:	2300      	movs	r3, #0
  406570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  406574:	463e      	mov	r6, r7
  406576:	2f04      	cmp	r7, #4
  406578:	bf28      	it	cs
  40657a:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  40657c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  40657e:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  406580:	f104 0904 	add.w	r9, r4, #4
  406584:	4648      	mov	r0, r9
  406586:	f8df a16c 	ldr.w	sl, [pc, #364]	; 4066f4 <xTaskGenericCreate+0x1fc>
  40658a:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40658c:	f104 0018 	add.w	r0, r4, #24
  406590:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  406592:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  406594:	f1c6 0605 	rsb	r6, r6, #5
  406598:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40659a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40659c:	465a      	mov	r2, fp
  40659e:	9901      	ldr	r1, [sp, #4]
  4065a0:	4628      	mov	r0, r5
  4065a2:	4b41      	ldr	r3, [pc, #260]	; (4066a8 <xTaskGenericCreate+0x1b0>)
  4065a4:	4798      	blx	r3
  4065a6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4065a8:	f010 0f07 	tst.w	r0, #7
  4065ac:	d003      	beq.n	4065b6 <xTaskGenericCreate+0xbe>
  4065ae:	4b39      	ldr	r3, [pc, #228]	; (406694 <xTaskGenericCreate+0x19c>)
  4065b0:	4798      	blx	r3
  4065b2:	bf00      	nop
  4065b4:	e7fd      	b.n	4065b2 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
  4065b6:	f1b8 0f00 	cmp.w	r8, #0
  4065ba:	d001      	beq.n	4065c0 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4065bc:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4065c0:	4b3a      	ldr	r3, [pc, #232]	; (4066ac <xTaskGenericCreate+0x1b4>)
  4065c2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4065c4:	4a3a      	ldr	r2, [pc, #232]	; (4066b0 <xTaskGenericCreate+0x1b8>)
  4065c6:	6813      	ldr	r3, [r2, #0]
  4065c8:	3301      	adds	r3, #1
  4065ca:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4065cc:	4b39      	ldr	r3, [pc, #228]	; (4066b4 <xTaskGenericCreate+0x1bc>)
  4065ce:	681b      	ldr	r3, [r3, #0]
  4065d0:	bb0b      	cbnz	r3, 406616 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4065d2:	4b38      	ldr	r3, [pc, #224]	; (4066b4 <xTaskGenericCreate+0x1bc>)
  4065d4:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4065d6:	6813      	ldr	r3, [r2, #0]
  4065d8:	2b01      	cmp	r3, #1
  4065da:	d126      	bne.n	40662a <xTaskGenericCreate+0x132>
  4065dc:	4d36      	ldr	r5, [pc, #216]	; (4066b8 <xTaskGenericCreate+0x1c0>)
  4065de:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4065e2:	4e36      	ldr	r6, [pc, #216]	; (4066bc <xTaskGenericCreate+0x1c4>)
  4065e4:	4628      	mov	r0, r5
  4065e6:	47b0      	blx	r6
  4065e8:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4065ea:	4545      	cmp	r5, r8
  4065ec:	d1fa      	bne.n	4065e4 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4065ee:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4066f8 <xTaskGenericCreate+0x200>
  4065f2:	4640      	mov	r0, r8
  4065f4:	4d31      	ldr	r5, [pc, #196]	; (4066bc <xTaskGenericCreate+0x1c4>)
  4065f6:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4065f8:	4e31      	ldr	r6, [pc, #196]	; (4066c0 <xTaskGenericCreate+0x1c8>)
  4065fa:	4630      	mov	r0, r6
  4065fc:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  4065fe:	4831      	ldr	r0, [pc, #196]	; (4066c4 <xTaskGenericCreate+0x1cc>)
  406600:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  406602:	4831      	ldr	r0, [pc, #196]	; (4066c8 <xTaskGenericCreate+0x1d0>)
  406604:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  406606:	4831      	ldr	r0, [pc, #196]	; (4066cc <xTaskGenericCreate+0x1d4>)
  406608:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40660a:	4b31      	ldr	r3, [pc, #196]	; (4066d0 <xTaskGenericCreate+0x1d8>)
  40660c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  406610:	4b30      	ldr	r3, [pc, #192]	; (4066d4 <xTaskGenericCreate+0x1dc>)
  406612:	601e      	str	r6, [r3, #0]
  406614:	e009      	b.n	40662a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406616:	4b30      	ldr	r3, [pc, #192]	; (4066d8 <xTaskGenericCreate+0x1e0>)
  406618:	681b      	ldr	r3, [r3, #0]
  40661a:	b933      	cbnz	r3, 40662a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40661c:	4b25      	ldr	r3, [pc, #148]	; (4066b4 <xTaskGenericCreate+0x1bc>)
  40661e:	681b      	ldr	r3, [r3, #0]
  406620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406622:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  406624:	bf24      	itt	cs
  406626:	4b23      	ldrcs	r3, [pc, #140]	; (4066b4 <xTaskGenericCreate+0x1bc>)
  406628:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  40662a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40662c:	4b2b      	ldr	r3, [pc, #172]	; (4066dc <xTaskGenericCreate+0x1e4>)
  40662e:	681b      	ldr	r3, [r3, #0]
  406630:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  406632:	bf84      	itt	hi
  406634:	4b29      	ldrhi	r3, [pc, #164]	; (4066dc <xTaskGenericCreate+0x1e4>)
  406636:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  406638:	4a29      	ldr	r2, [pc, #164]	; (4066e0 <xTaskGenericCreate+0x1e8>)
  40663a:	6813      	ldr	r3, [r2, #0]
  40663c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  40663e:	3301      	adds	r3, #1
  406640:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  406642:	4b28      	ldr	r3, [pc, #160]	; (4066e4 <xTaskGenericCreate+0x1ec>)
  406644:	681b      	ldr	r3, [r3, #0]
  406646:	4298      	cmp	r0, r3
  406648:	bf84      	itt	hi
  40664a:	4b26      	ldrhi	r3, [pc, #152]	; (4066e4 <xTaskGenericCreate+0x1ec>)
  40664c:	6018      	strhi	r0, [r3, #0]
  40664e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406652:	4649      	mov	r1, r9
  406654:	4b18      	ldr	r3, [pc, #96]	; (4066b8 <xTaskGenericCreate+0x1c0>)
  406656:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40665a:	4b23      	ldr	r3, [pc, #140]	; (4066e8 <xTaskGenericCreate+0x1f0>)
  40665c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40665e:	4b23      	ldr	r3, [pc, #140]	; (4066ec <xTaskGenericCreate+0x1f4>)
  406660:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  406662:	4b1d      	ldr	r3, [pc, #116]	; (4066d8 <xTaskGenericCreate+0x1e0>)
  406664:	681b      	ldr	r3, [r3, #0]
  406666:	b143      	cbz	r3, 40667a <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  406668:	4b12      	ldr	r3, [pc, #72]	; (4066b4 <xTaskGenericCreate+0x1bc>)
  40666a:	681b      	ldr	r3, [r3, #0]
  40666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40666e:	429f      	cmp	r7, r3
  406670:	d905      	bls.n	40667e <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
  406672:	4b1f      	ldr	r3, [pc, #124]	; (4066f0 <xTaskGenericCreate+0x1f8>)
  406674:	4798      	blx	r3
  406676:	2001      	movs	r0, #1
  406678:	e008      	b.n	40668c <xTaskGenericCreate+0x194>
  40667a:	2001      	movs	r0, #1
  40667c:	e006      	b.n	40668c <xTaskGenericCreate+0x194>
  40667e:	2001      	movs	r0, #1
  406680:	e004      	b.n	40668c <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  406682:	6306      	str	r6, [r0, #48]	; 0x30
  406684:	4630      	mov	r0, r6
  406686:	e760      	b.n	40654a <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406688:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  40668c:	b003      	add	sp, #12
  40668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406692:	bf00      	nop
  406694:	00405cf5 	.word	0x00405cf5
  406698:	00405e4d 	.word	0x00405e4d
  40669c:	00405f21 	.word	0x00405f21
  4066a0:	00409149 	.word	0x00409149
  4066a4:	004098fd 	.word	0x004098fd
  4066a8:	00405ca9 	.word	0x00405ca9
  4066ac:	00405d05 	.word	0x00405d05
  4066b0:	2000ace4 	.word	0x2000ace4
  4066b4:	2000aca4 	.word	0x2000aca4
  4066b8:	2000ac3c 	.word	0x2000ac3c
  4066bc:	00405bf5 	.word	0x00405bf5
  4066c0:	2000ac24 	.word	0x2000ac24
  4066c4:	2000aca8 	.word	0x2000aca8
  4066c8:	2000ac10 	.word	0x2000ac10
  4066cc:	2000abec 	.word	0x2000abec
  4066d0:	2000ac00 	.word	0x2000ac00
  4066d4:	2000acc4 	.word	0x2000acc4
  4066d8:	2000ac08 	.word	0x2000ac08
  4066dc:	2000ace8 	.word	0x2000ace8
  4066e0:	2000acc8 	.word	0x2000acc8
  4066e4:	2000ac38 	.word	0x2000ac38
  4066e8:	00405c15 	.word	0x00405c15
  4066ec:	00405d25 	.word	0x00405d25
  4066f0:	00405ce5 	.word	0x00405ce5
  4066f4:	00405c0d 	.word	0x00405c0d
  4066f8:	2000accc 	.word	0x2000accc

004066fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4066fc:	b510      	push	{r4, lr}
  4066fe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  406700:	2300      	movs	r3, #0
  406702:	9303      	str	r3, [sp, #12]
  406704:	9302      	str	r3, [sp, #8]
  406706:	9301      	str	r3, [sp, #4]
  406708:	9300      	str	r3, [sp, #0]
  40670a:	2282      	movs	r2, #130	; 0x82
  40670c:	490d      	ldr	r1, [pc, #52]	; (406744 <vTaskStartScheduler+0x48>)
  40670e:	480e      	ldr	r0, [pc, #56]	; (406748 <vTaskStartScheduler+0x4c>)
  406710:	4c0e      	ldr	r4, [pc, #56]	; (40674c <vTaskStartScheduler+0x50>)
  406712:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  406714:	2801      	cmp	r0, #1
  406716:	d10e      	bne.n	406736 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
  406718:	4b0d      	ldr	r3, [pc, #52]	; (406750 <vTaskStartScheduler+0x54>)
  40671a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  40671c:	2801      	cmp	r0, #1
  40671e:	d10a      	bne.n	406736 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  406720:	4b0c      	ldr	r3, [pc, #48]	; (406754 <vTaskStartScheduler+0x58>)
  406722:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  406724:	2201      	movs	r2, #1
  406726:	4b0c      	ldr	r3, [pc, #48]	; (406758 <vTaskStartScheduler+0x5c>)
  406728:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  40672a:	2200      	movs	r2, #0
  40672c:	4b0b      	ldr	r3, [pc, #44]	; (40675c <vTaskStartScheduler+0x60>)
  40672e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  406730:	4b0b      	ldr	r3, [pc, #44]	; (406760 <vTaskStartScheduler+0x64>)
  406732:	4798      	blx	r3
  406734:	e004      	b.n	406740 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  406736:	b918      	cbnz	r0, 406740 <vTaskStartScheduler+0x44>
  406738:	4b06      	ldr	r3, [pc, #24]	; (406754 <vTaskStartScheduler+0x58>)
  40673a:	4798      	blx	r3
  40673c:	bf00      	nop
  40673e:	e7fd      	b.n	40673c <vTaskStartScheduler+0x40>
}
  406740:	b004      	add	sp, #16
  406742:	bd10      	pop	{r4, pc}
  406744:	004129b8 	.word	0x004129b8
  406748:	00406a01 	.word	0x00406a01
  40674c:	004064f9 	.word	0x004064f9
  406750:	00406ead 	.word	0x00406ead
  406754:	00405cf5 	.word	0x00405cf5
  406758:	2000ac08 	.word	0x2000ac08
  40675c:	2000acc0 	.word	0x2000acc0
  406760:	00405dc1 	.word	0x00405dc1

00406764 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  406764:	4a02      	ldr	r2, [pc, #8]	; (406770 <vTaskSuspendAll+0xc>)
  406766:	6813      	ldr	r3, [r2, #0]
  406768:	3301      	adds	r3, #1
  40676a:	6013      	str	r3, [r2, #0]
  40676c:	4770      	bx	lr
  40676e:	bf00      	nop
  406770:	2000aca0 	.word	0x2000aca0

00406774 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  406774:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  406776:	4b04      	ldr	r3, [pc, #16]	; (406788 <xTaskGetTickCount+0x14>)
  406778:	4798      	blx	r3
	{
		xTicks = xTickCount;
  40677a:	4b04      	ldr	r3, [pc, #16]	; (40678c <xTaskGetTickCount+0x18>)
  40677c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  40677e:	4b04      	ldr	r3, [pc, #16]	; (406790 <xTaskGetTickCount+0x1c>)
  406780:	4798      	blx	r3

	return xTicks;
}
  406782:	4620      	mov	r0, r4
  406784:	bd10      	pop	{r4, pc}
  406786:	bf00      	nop
  406788:	00405d05 	.word	0x00405d05
  40678c:	2000acc0 	.word	0x2000acc0
  406790:	00405d25 	.word	0x00405d25

00406794 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  406794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406798:	4b3a      	ldr	r3, [pc, #232]	; (406884 <vTaskIncrementTick+0xf0>)
  40679a:	681b      	ldr	r3, [r3, #0]
  40679c:	2b00      	cmp	r3, #0
  40679e:	d16b      	bne.n	406878 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
  4067a0:	4b39      	ldr	r3, [pc, #228]	; (406888 <vTaskIncrementTick+0xf4>)
  4067a2:	681a      	ldr	r2, [r3, #0]
  4067a4:	3201      	adds	r2, #1
  4067a6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  4067a8:	681b      	ldr	r3, [r3, #0]
  4067aa:	bb03      	cbnz	r3, 4067ee <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4067ac:	4b37      	ldr	r3, [pc, #220]	; (40688c <vTaskIncrementTick+0xf8>)
  4067ae:	681b      	ldr	r3, [r3, #0]
  4067b0:	681b      	ldr	r3, [r3, #0]
  4067b2:	b11b      	cbz	r3, 4067bc <vTaskIncrementTick+0x28>
  4067b4:	4b36      	ldr	r3, [pc, #216]	; (406890 <vTaskIncrementTick+0xfc>)
  4067b6:	4798      	blx	r3
  4067b8:	bf00      	nop
  4067ba:	e7fd      	b.n	4067b8 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
  4067bc:	4b33      	ldr	r3, [pc, #204]	; (40688c <vTaskIncrementTick+0xf8>)
  4067be:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4067c0:	4a34      	ldr	r2, [pc, #208]	; (406894 <vTaskIncrementTick+0x100>)
  4067c2:	6810      	ldr	r0, [r2, #0]
  4067c4:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4067c6:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  4067c8:	4933      	ldr	r1, [pc, #204]	; (406898 <vTaskIncrementTick+0x104>)
  4067ca:	680a      	ldr	r2, [r1, #0]
  4067cc:	3201      	adds	r2, #1
  4067ce:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4067d0:	681b      	ldr	r3, [r3, #0]
  4067d2:	681b      	ldr	r3, [r3, #0]
  4067d4:	b923      	cbnz	r3, 4067e0 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4067d6:	f04f 32ff 	mov.w	r2, #4294967295
  4067da:	4b30      	ldr	r3, [pc, #192]	; (40689c <vTaskIncrementTick+0x108>)
  4067dc:	601a      	str	r2, [r3, #0]
  4067de:	e006      	b.n	4067ee <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4067e0:	4b2a      	ldr	r3, [pc, #168]	; (40688c <vTaskIncrementTick+0xf8>)
  4067e2:	681b      	ldr	r3, [r3, #0]
  4067e4:	68db      	ldr	r3, [r3, #12]
  4067e6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4067e8:	685a      	ldr	r2, [r3, #4]
  4067ea:	4b2c      	ldr	r3, [pc, #176]	; (40689c <vTaskIncrementTick+0x108>)
  4067ec:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4067ee:	4b26      	ldr	r3, [pc, #152]	; (406888 <vTaskIncrementTick+0xf4>)
  4067f0:	681a      	ldr	r2, [r3, #0]
  4067f2:	4b2a      	ldr	r3, [pc, #168]	; (40689c <vTaskIncrementTick+0x108>)
  4067f4:	681b      	ldr	r3, [r3, #0]
  4067f6:	429a      	cmp	r2, r3
  4067f8:	d342      	bcc.n	406880 <vTaskIncrementTick+0xec>
  4067fa:	4b24      	ldr	r3, [pc, #144]	; (40688c <vTaskIncrementTick+0xf8>)
  4067fc:	681b      	ldr	r3, [r3, #0]
  4067fe:	681b      	ldr	r3, [r3, #0]
  406800:	b16b      	cbz	r3, 40681e <vTaskIncrementTick+0x8a>
  406802:	4b22      	ldr	r3, [pc, #136]	; (40688c <vTaskIncrementTick+0xf8>)
  406804:	681b      	ldr	r3, [r3, #0]
  406806:	68db      	ldr	r3, [r3, #12]
  406808:	68dc      	ldr	r4, [r3, #12]
  40680a:	6863      	ldr	r3, [r4, #4]
  40680c:	4a1e      	ldr	r2, [pc, #120]	; (406888 <vTaskIncrementTick+0xf4>)
  40680e:	6812      	ldr	r2, [r2, #0]
  406810:	4293      	cmp	r3, r2
  406812:	d813      	bhi.n	40683c <vTaskIncrementTick+0xa8>
  406814:	4e22      	ldr	r6, [pc, #136]	; (4068a0 <vTaskIncrementTick+0x10c>)
  406816:	4f23      	ldr	r7, [pc, #140]	; (4068a4 <vTaskIncrementTick+0x110>)
  406818:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4068b0 <vTaskIncrementTick+0x11c>
  40681c:	e012      	b.n	406844 <vTaskIncrementTick+0xb0>
  40681e:	f04f 32ff 	mov.w	r2, #4294967295
  406822:	4b1e      	ldr	r3, [pc, #120]	; (40689c <vTaskIncrementTick+0x108>)
  406824:	601a      	str	r2, [r3, #0]
  406826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40682a:	4b18      	ldr	r3, [pc, #96]	; (40688c <vTaskIncrementTick+0xf8>)
  40682c:	681b      	ldr	r3, [r3, #0]
  40682e:	68db      	ldr	r3, [r3, #12]
  406830:	68dc      	ldr	r4, [r3, #12]
  406832:	6863      	ldr	r3, [r4, #4]
  406834:	4a14      	ldr	r2, [pc, #80]	; (406888 <vTaskIncrementTick+0xf4>)
  406836:	6812      	ldr	r2, [r2, #0]
  406838:	4293      	cmp	r3, r2
  40683a:	d903      	bls.n	406844 <vTaskIncrementTick+0xb0>
  40683c:	4a17      	ldr	r2, [pc, #92]	; (40689c <vTaskIncrementTick+0x108>)
  40683e:	6013      	str	r3, [r2, #0]
  406840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406844:	1d25      	adds	r5, r4, #4
  406846:	4628      	mov	r0, r5
  406848:	47b0      	blx	r6
  40684a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40684c:	b113      	cbz	r3, 406854 <vTaskIncrementTick+0xc0>
  40684e:	f104 0018 	add.w	r0, r4, #24
  406852:	47b0      	blx	r6
  406854:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  406856:	683b      	ldr	r3, [r7, #0]
  406858:	4298      	cmp	r0, r3
  40685a:	bf88      	it	hi
  40685c:	6038      	strhi	r0, [r7, #0]
  40685e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406862:	4629      	mov	r1, r5
  406864:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  406868:	4b0f      	ldr	r3, [pc, #60]	; (4068a8 <vTaskIncrementTick+0x114>)
  40686a:	4798      	blx	r3
  40686c:	4b07      	ldr	r3, [pc, #28]	; (40688c <vTaskIncrementTick+0xf8>)
  40686e:	681b      	ldr	r3, [r3, #0]
  406870:	681b      	ldr	r3, [r3, #0]
  406872:	2b00      	cmp	r3, #0
  406874:	d1d9      	bne.n	40682a <vTaskIncrementTick+0x96>
  406876:	e7d2      	b.n	40681e <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
  406878:	4a0c      	ldr	r2, [pc, #48]	; (4068ac <vTaskIncrementTick+0x118>)
  40687a:	6813      	ldr	r3, [r2, #0]
  40687c:	3301      	adds	r3, #1
  40687e:	6013      	str	r3, [r2, #0]
  406880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406884:	2000aca0 	.word	0x2000aca0
  406888:	2000acc0 	.word	0x2000acc0
  40688c:	2000ac00 	.word	0x2000ac00
  406890:	00405cf5 	.word	0x00405cf5
  406894:	2000acc4 	.word	0x2000acc4
  406898:	2000acbc 	.word	0x2000acbc
  40689c:	20000028 	.word	0x20000028
  4068a0:	00405c6d 	.word	0x00405c6d
  4068a4:	2000ac38 	.word	0x2000ac38
  4068a8:	00405c15 	.word	0x00405c15
  4068ac:	2000ac04 	.word	0x2000ac04
  4068b0:	2000ac3c 	.word	0x2000ac3c

004068b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4068b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4068b8:	4b30      	ldr	r3, [pc, #192]	; (40697c <xTaskResumeAll+0xc8>)
  4068ba:	681b      	ldr	r3, [r3, #0]
  4068bc:	b91b      	cbnz	r3, 4068c6 <xTaskResumeAll+0x12>
  4068be:	4b30      	ldr	r3, [pc, #192]	; (406980 <xTaskResumeAll+0xcc>)
  4068c0:	4798      	blx	r3
  4068c2:	bf00      	nop
  4068c4:	e7fd      	b.n	4068c2 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4068c6:	4b2f      	ldr	r3, [pc, #188]	; (406984 <xTaskResumeAll+0xd0>)
  4068c8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4068ca:	4b2c      	ldr	r3, [pc, #176]	; (40697c <xTaskResumeAll+0xc8>)
  4068cc:	681a      	ldr	r2, [r3, #0]
  4068ce:	3a01      	subs	r2, #1
  4068d0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4068d2:	681b      	ldr	r3, [r3, #0]
  4068d4:	2b00      	cmp	r3, #0
  4068d6:	d149      	bne.n	40696c <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4068d8:	4b2b      	ldr	r3, [pc, #172]	; (406988 <xTaskResumeAll+0xd4>)
  4068da:	681b      	ldr	r3, [r3, #0]
  4068dc:	bb03      	cbnz	r3, 406920 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4068de:	2400      	movs	r4, #0
  4068e0:	e047      	b.n	406972 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4068e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4068e6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4068e8:	f104 0018 	add.w	r0, r4, #24
  4068ec:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4068ee:	f104 0904 	add.w	r9, r4, #4
  4068f2:	4648      	mov	r0, r9
  4068f4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  4068f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4068f8:	6833      	ldr	r3, [r6, #0]
  4068fa:	4298      	cmp	r0, r3
  4068fc:	bf88      	it	hi
  4068fe:	6030      	strhi	r0, [r6, #0]
  406900:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406904:	4649      	mov	r1, r9
  406906:	4b21      	ldr	r3, [pc, #132]	; (40698c <xTaskResumeAll+0xd8>)
  406908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40690c:	4b20      	ldr	r3, [pc, #128]	; (406990 <xTaskResumeAll+0xdc>)
  40690e:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  406910:	4b20      	ldr	r3, [pc, #128]	; (406994 <xTaskResumeAll+0xe0>)
  406912:	681b      	ldr	r3, [r3, #0]
  406914:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  406918:	429a      	cmp	r2, r3
  40691a:	bf28      	it	cs
  40691c:	2501      	movcs	r5, #1
  40691e:	e004      	b.n	40692a <xTaskResumeAll+0x76>
  406920:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406922:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4069b4 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  406926:	4f1c      	ldr	r7, [pc, #112]	; (406998 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  406928:	4e1c      	ldr	r6, [pc, #112]	; (40699c <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40692a:	f8d8 3000 	ldr.w	r3, [r8]
  40692e:	2b00      	cmp	r3, #0
  406930:	d1d7      	bne.n	4068e2 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406932:	4b1b      	ldr	r3, [pc, #108]	; (4069a0 <xTaskResumeAll+0xec>)
  406934:	681b      	ldr	r3, [r3, #0]
  406936:	b163      	cbz	r3, 406952 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406938:	4b19      	ldr	r3, [pc, #100]	; (4069a0 <xTaskResumeAll+0xec>)
  40693a:	681b      	ldr	r3, [r3, #0]
  40693c:	b17b      	cbz	r3, 40695e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
  40693e:	4d19      	ldr	r5, [pc, #100]	; (4069a4 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
  406940:	4c17      	ldr	r4, [pc, #92]	; (4069a0 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  406942:	47a8      	blx	r5
						--uxMissedTicks;
  406944:	6823      	ldr	r3, [r4, #0]
  406946:	3b01      	subs	r3, #1
  406948:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40694a:	6823      	ldr	r3, [r4, #0]
  40694c:	2b00      	cmp	r3, #0
  40694e:	d1f8      	bne.n	406942 <xTaskResumeAll+0x8e>
  406950:	e005      	b.n	40695e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  406952:	2d01      	cmp	r5, #1
  406954:	d003      	beq.n	40695e <xTaskResumeAll+0xaa>
  406956:	4b14      	ldr	r3, [pc, #80]	; (4069a8 <xTaskResumeAll+0xf4>)
  406958:	681b      	ldr	r3, [r3, #0]
  40695a:	2b01      	cmp	r3, #1
  40695c:	d108      	bne.n	406970 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  40695e:	2200      	movs	r2, #0
  406960:	4b11      	ldr	r3, [pc, #68]	; (4069a8 <xTaskResumeAll+0xf4>)
  406962:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  406964:	4b11      	ldr	r3, [pc, #68]	; (4069ac <xTaskResumeAll+0xf8>)
  406966:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  406968:	2401      	movs	r4, #1
  40696a:	e002      	b.n	406972 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40696c:	2400      	movs	r4, #0
  40696e:	e000      	b.n	406972 <xTaskResumeAll+0xbe>
  406970:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  406972:	4b0f      	ldr	r3, [pc, #60]	; (4069b0 <xTaskResumeAll+0xfc>)
  406974:	4798      	blx	r3

	return xAlreadyYielded;
}
  406976:	4620      	mov	r0, r4
  406978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40697c:	2000aca0 	.word	0x2000aca0
  406980:	00405cf5 	.word	0x00405cf5
  406984:	00405d05 	.word	0x00405d05
  406988:	2000ace4 	.word	0x2000ace4
  40698c:	2000ac3c 	.word	0x2000ac3c
  406990:	00405c15 	.word	0x00405c15
  406994:	2000aca4 	.word	0x2000aca4
  406998:	00405c6d 	.word	0x00405c6d
  40699c:	2000ac38 	.word	0x2000ac38
  4069a0:	2000ac04 	.word	0x2000ac04
  4069a4:	00406795 	.word	0x00406795
  4069a8:	2000ace0 	.word	0x2000ace0
  4069ac:	00405ce5 	.word	0x00405ce5
  4069b0:	00405d25 	.word	0x00405d25
  4069b4:	2000aca8 	.word	0x2000aca8

004069b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4069b8:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4069ba:	b180      	cbz	r0, 4069de <vTaskDelay+0x26>
  4069bc:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
  4069be:	4b09      	ldr	r3, [pc, #36]	; (4069e4 <vTaskDelay+0x2c>)
  4069c0:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4069c2:	4b09      	ldr	r3, [pc, #36]	; (4069e8 <vTaskDelay+0x30>)
  4069c4:	681b      	ldr	r3, [r3, #0]
  4069c6:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4069c8:	4b08      	ldr	r3, [pc, #32]	; (4069ec <vTaskDelay+0x34>)
  4069ca:	6818      	ldr	r0, [r3, #0]
  4069cc:	3004      	adds	r0, #4
  4069ce:	4b08      	ldr	r3, [pc, #32]	; (4069f0 <vTaskDelay+0x38>)
  4069d0:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4069d2:	4620      	mov	r0, r4
  4069d4:	4b07      	ldr	r3, [pc, #28]	; (4069f4 <vTaskDelay+0x3c>)
  4069d6:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4069d8:	4b07      	ldr	r3, [pc, #28]	; (4069f8 <vTaskDelay+0x40>)
  4069da:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4069dc:	b908      	cbnz	r0, 4069e2 <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
  4069de:	4b07      	ldr	r3, [pc, #28]	; (4069fc <vTaskDelay+0x44>)
  4069e0:	4798      	blx	r3
  4069e2:	bd10      	pop	{r4, pc}
  4069e4:	00406765 	.word	0x00406765
  4069e8:	2000acc0 	.word	0x2000acc0
  4069ec:	2000aca4 	.word	0x2000aca4
  4069f0:	00405c6d 	.word	0x00405c6d
  4069f4:	004064a1 	.word	0x004064a1
  4069f8:	004068b5 	.word	0x004068b5
  4069fc:	00405ce5 	.word	0x00405ce5

00406a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  406a00:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406a02:	4d15      	ldr	r5, [pc, #84]	; (406a58 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  406a04:	4f15      	ldr	r7, [pc, #84]	; (406a5c <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  406a06:	f8df 8074 	ldr.w	r8, [pc, #116]	; 406a7c <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  406a0a:	4e15      	ldr	r6, [pc, #84]	; (406a60 <prvIdleTask+0x60>)
  406a0c:	e019      	b.n	406a42 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  406a0e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  406a10:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
  406a12:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  406a14:	b1ac      	cbz	r4, 406a42 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  406a16:	4b13      	ldr	r3, [pc, #76]	; (406a64 <prvIdleTask+0x64>)
  406a18:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  406a1a:	68fb      	ldr	r3, [r7, #12]
  406a1c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  406a1e:	1d20      	adds	r0, r4, #4
  406a20:	4b11      	ldr	r3, [pc, #68]	; (406a68 <prvIdleTask+0x68>)
  406a22:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  406a24:	4a11      	ldr	r2, [pc, #68]	; (406a6c <prvIdleTask+0x6c>)
  406a26:	6813      	ldr	r3, [r2, #0]
  406a28:	3b01      	subs	r3, #1
  406a2a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  406a2c:	682b      	ldr	r3, [r5, #0]
  406a2e:	3b01      	subs	r3, #1
  406a30:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  406a32:	4b0f      	ldr	r3, [pc, #60]	; (406a70 <prvIdleTask+0x70>)
  406a34:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  406a36:	6b20      	ldr	r0, [r4, #48]	; 0x30
  406a38:	f8df 9044 	ldr.w	r9, [pc, #68]	; 406a80 <prvIdleTask+0x80>
  406a3c:	47c8      	blx	r9
		vPortFree( pxTCB );
  406a3e:	4620      	mov	r0, r4
  406a40:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406a42:	682b      	ldr	r3, [r5, #0]
  406a44:	2b00      	cmp	r3, #0
  406a46:	d1e2      	bne.n	406a0e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  406a48:	4b0a      	ldr	r3, [pc, #40]	; (406a74 <prvIdleTask+0x74>)
  406a4a:	681b      	ldr	r3, [r3, #0]
  406a4c:	2b01      	cmp	r3, #1
  406a4e:	d9dc      	bls.n	406a0a <prvIdleTask+0xa>
			{
				taskYIELD();
  406a50:	4b09      	ldr	r3, [pc, #36]	; (406a78 <prvIdleTask+0x78>)
  406a52:	4798      	blx	r3
  406a54:	e7d7      	b.n	406a06 <prvIdleTask+0x6>
  406a56:	bf00      	nop
  406a58:	2000ac0c 	.word	0x2000ac0c
  406a5c:	2000ac10 	.word	0x2000ac10
  406a60:	004068b5 	.word	0x004068b5
  406a64:	00405d05 	.word	0x00405d05
  406a68:	00405c6d 	.word	0x00405c6d
  406a6c:	2000ace4 	.word	0x2000ace4
  406a70:	00405d25 	.word	0x00405d25
  406a74:	2000ac3c 	.word	0x2000ac3c
  406a78:	00405ce5 	.word	0x00405ce5
  406a7c:	00406765 	.word	0x00406765
  406a80:	00405f21 	.word	0x00405f21

00406a84 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  406a84:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  406a86:	4b22      	ldr	r3, [pc, #136]	; (406b10 <vTaskSwitchContext+0x8c>)
  406a88:	681b      	ldr	r3, [r3, #0]
  406a8a:	b96b      	cbnz	r3, 406aa8 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406a8c:	4b21      	ldr	r3, [pc, #132]	; (406b14 <vTaskSwitchContext+0x90>)
  406a8e:	681b      	ldr	r3, [r3, #0]
  406a90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406a94:	009b      	lsls	r3, r3, #2
  406a96:	4a20      	ldr	r2, [pc, #128]	; (406b18 <vTaskSwitchContext+0x94>)
  406a98:	58d3      	ldr	r3, [r2, r3]
  406a9a:	b9cb      	cbnz	r3, 406ad0 <vTaskSwitchContext+0x4c>
  406a9c:	4b1d      	ldr	r3, [pc, #116]	; (406b14 <vTaskSwitchContext+0x90>)
  406a9e:	681b      	ldr	r3, [r3, #0]
  406aa0:	b143      	cbz	r3, 406ab4 <vTaskSwitchContext+0x30>
  406aa2:	4a1c      	ldr	r2, [pc, #112]	; (406b14 <vTaskSwitchContext+0x90>)
  406aa4:	491c      	ldr	r1, [pc, #112]	; (406b18 <vTaskSwitchContext+0x94>)
  406aa6:	e009      	b.n	406abc <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  406aa8:	2201      	movs	r2, #1
  406aaa:	4b1c      	ldr	r3, [pc, #112]	; (406b1c <vTaskSwitchContext+0x98>)
  406aac:	601a      	str	r2, [r3, #0]
  406aae:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406ab0:	6813      	ldr	r3, [r2, #0]
  406ab2:	b91b      	cbnz	r3, 406abc <vTaskSwitchContext+0x38>
  406ab4:	4b1a      	ldr	r3, [pc, #104]	; (406b20 <vTaskSwitchContext+0x9c>)
  406ab6:	4798      	blx	r3
  406ab8:	bf00      	nop
  406aba:	e7fd      	b.n	406ab8 <vTaskSwitchContext+0x34>
  406abc:	6813      	ldr	r3, [r2, #0]
  406abe:	3b01      	subs	r3, #1
  406ac0:	6013      	str	r3, [r2, #0]
  406ac2:	6813      	ldr	r3, [r2, #0]
  406ac4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406ac8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  406acc:	2b00      	cmp	r3, #0
  406ace:	d0ef      	beq.n	406ab0 <vTaskSwitchContext+0x2c>
  406ad0:	4b10      	ldr	r3, [pc, #64]	; (406b14 <vTaskSwitchContext+0x90>)
  406ad2:	681b      	ldr	r3, [r3, #0]
  406ad4:	4a10      	ldr	r2, [pc, #64]	; (406b18 <vTaskSwitchContext+0x94>)
  406ad6:	0099      	lsls	r1, r3, #2
  406ad8:	18c8      	adds	r0, r1, r3
  406ada:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  406ade:	6844      	ldr	r4, [r0, #4]
  406ae0:	6864      	ldr	r4, [r4, #4]
  406ae2:	6044      	str	r4, [r0, #4]
  406ae4:	4602      	mov	r2, r0
  406ae6:	3208      	adds	r2, #8
  406ae8:	4294      	cmp	r4, r2
  406aea:	d106      	bne.n	406afa <vTaskSwitchContext+0x76>
  406aec:	6860      	ldr	r0, [r4, #4]
  406aee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  406af2:	4a09      	ldr	r2, [pc, #36]	; (406b18 <vTaskSwitchContext+0x94>)
  406af4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  406af8:	6050      	str	r0, [r2, #4]
  406afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406afe:	4a06      	ldr	r2, [pc, #24]	; (406b18 <vTaskSwitchContext+0x94>)
  406b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406b04:	685b      	ldr	r3, [r3, #4]
  406b06:	68da      	ldr	r2, [r3, #12]
  406b08:	4b06      	ldr	r3, [pc, #24]	; (406b24 <vTaskSwitchContext+0xa0>)
  406b0a:	601a      	str	r2, [r3, #0]
  406b0c:	bd10      	pop	{r4, pc}
  406b0e:	bf00      	nop
  406b10:	2000aca0 	.word	0x2000aca0
  406b14:	2000ac38 	.word	0x2000ac38
  406b18:	2000ac3c 	.word	0x2000ac3c
  406b1c:	2000ace0 	.word	0x2000ace0
  406b20:	00405cf5 	.word	0x00405cf5
  406b24:	2000aca4 	.word	0x2000aca4

00406b28 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  406b28:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
  406b2a:	b918      	cbnz	r0, 406b34 <vTaskPlaceOnEventList+0xc>
  406b2c:	4b0e      	ldr	r3, [pc, #56]	; (406b68 <vTaskPlaceOnEventList+0x40>)
  406b2e:	4798      	blx	r3
  406b30:	bf00      	nop
  406b32:	e7fd      	b.n	406b30 <vTaskPlaceOnEventList+0x8>
  406b34:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406b36:	4d0d      	ldr	r5, [pc, #52]	; (406b6c <vTaskPlaceOnEventList+0x44>)
  406b38:	6829      	ldr	r1, [r5, #0]
  406b3a:	3118      	adds	r1, #24
  406b3c:	4b0c      	ldr	r3, [pc, #48]	; (406b70 <vTaskPlaceOnEventList+0x48>)
  406b3e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406b40:	6828      	ldr	r0, [r5, #0]
  406b42:	3004      	adds	r0, #4
  406b44:	4b0b      	ldr	r3, [pc, #44]	; (406b74 <vTaskPlaceOnEventList+0x4c>)
  406b46:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  406b48:	f1b4 3fff 	cmp.w	r4, #4294967295
  406b4c:	d105      	bne.n	406b5a <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406b4e:	6829      	ldr	r1, [r5, #0]
  406b50:	3104      	adds	r1, #4
  406b52:	4809      	ldr	r0, [pc, #36]	; (406b78 <vTaskPlaceOnEventList+0x50>)
  406b54:	4b09      	ldr	r3, [pc, #36]	; (406b7c <vTaskPlaceOnEventList+0x54>)
  406b56:	4798      	blx	r3
  406b58:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  406b5a:	4b09      	ldr	r3, [pc, #36]	; (406b80 <vTaskPlaceOnEventList+0x58>)
  406b5c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  406b5e:	4420      	add	r0, r4
  406b60:	4b08      	ldr	r3, [pc, #32]	; (406b84 <vTaskPlaceOnEventList+0x5c>)
  406b62:	4798      	blx	r3
  406b64:	bd38      	pop	{r3, r4, r5, pc}
  406b66:	bf00      	nop
  406b68:	00405cf5 	.word	0x00405cf5
  406b6c:	2000aca4 	.word	0x2000aca4
  406b70:	00405c31 	.word	0x00405c31
  406b74:	00405c6d 	.word	0x00405c6d
  406b78:	2000abec 	.word	0x2000abec
  406b7c:	00405c15 	.word	0x00405c15
  406b80:	2000acc0 	.word	0x2000acc0
  406b84:	004064a1 	.word	0x004064a1

00406b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  406b88:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  406b8a:	b918      	cbnz	r0, 406b94 <vTaskPlaceOnEventListRestricted+0xc>
  406b8c:	4b09      	ldr	r3, [pc, #36]	; (406bb4 <vTaskPlaceOnEventListRestricted+0x2c>)
  406b8e:	4798      	blx	r3
  406b90:	bf00      	nop
  406b92:	e7fd      	b.n	406b90 <vTaskPlaceOnEventListRestricted+0x8>
  406b94:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406b96:	4c08      	ldr	r4, [pc, #32]	; (406bb8 <vTaskPlaceOnEventListRestricted+0x30>)
  406b98:	6821      	ldr	r1, [r4, #0]
  406b9a:	3118      	adds	r1, #24
  406b9c:	4b07      	ldr	r3, [pc, #28]	; (406bbc <vTaskPlaceOnEventListRestricted+0x34>)
  406b9e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406ba0:	6820      	ldr	r0, [r4, #0]
  406ba2:	3004      	adds	r0, #4
  406ba4:	4b06      	ldr	r3, [pc, #24]	; (406bc0 <vTaskPlaceOnEventListRestricted+0x38>)
  406ba6:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  406ba8:	4b06      	ldr	r3, [pc, #24]	; (406bc4 <vTaskPlaceOnEventListRestricted+0x3c>)
  406baa:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  406bac:	4428      	add	r0, r5
  406bae:	4b06      	ldr	r3, [pc, #24]	; (406bc8 <vTaskPlaceOnEventListRestricted+0x40>)
  406bb0:	4798      	blx	r3
  406bb2:	bd38      	pop	{r3, r4, r5, pc}
  406bb4:	00405cf5 	.word	0x00405cf5
  406bb8:	2000aca4 	.word	0x2000aca4
  406bbc:	00405c15 	.word	0x00405c15
  406bc0:	00405c6d 	.word	0x00405c6d
  406bc4:	2000acc0 	.word	0x2000acc0
  406bc8:	004064a1 	.word	0x004064a1

00406bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  406bcc:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  406bce:	68c3      	ldr	r3, [r0, #12]
  406bd0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  406bd2:	b91c      	cbnz	r4, 406bdc <xTaskRemoveFromEventList+0x10>
  406bd4:	4b16      	ldr	r3, [pc, #88]	; (406c30 <xTaskRemoveFromEventList+0x64>)
  406bd6:	4798      	blx	r3
  406bd8:	bf00      	nop
  406bda:	e7fd      	b.n	406bd8 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  406bdc:	f104 0518 	add.w	r5, r4, #24
  406be0:	4628      	mov	r0, r5
  406be2:	4b14      	ldr	r3, [pc, #80]	; (406c34 <xTaskRemoveFromEventList+0x68>)
  406be4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406be6:	4b14      	ldr	r3, [pc, #80]	; (406c38 <xTaskRemoveFromEventList+0x6c>)
  406be8:	681b      	ldr	r3, [r3, #0]
  406bea:	b99b      	cbnz	r3, 406c14 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  406bec:	1d25      	adds	r5, r4, #4
  406bee:	4628      	mov	r0, r5
  406bf0:	4b10      	ldr	r3, [pc, #64]	; (406c34 <xTaskRemoveFromEventList+0x68>)
  406bf2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  406bf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  406bf6:	4b11      	ldr	r3, [pc, #68]	; (406c3c <xTaskRemoveFromEventList+0x70>)
  406bf8:	681b      	ldr	r3, [r3, #0]
  406bfa:	4298      	cmp	r0, r3
  406bfc:	bf84      	itt	hi
  406bfe:	4b0f      	ldrhi	r3, [pc, #60]	; (406c3c <xTaskRemoveFromEventList+0x70>)
  406c00:	6018      	strhi	r0, [r3, #0]
  406c02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406c06:	4629      	mov	r1, r5
  406c08:	4b0d      	ldr	r3, [pc, #52]	; (406c40 <xTaskRemoveFromEventList+0x74>)
  406c0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  406c0e:	4b0d      	ldr	r3, [pc, #52]	; (406c44 <xTaskRemoveFromEventList+0x78>)
  406c10:	4798      	blx	r3
  406c12:	e003      	b.n	406c1c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406c14:	4629      	mov	r1, r5
  406c16:	480c      	ldr	r0, [pc, #48]	; (406c48 <xTaskRemoveFromEventList+0x7c>)
  406c18:	4b0a      	ldr	r3, [pc, #40]	; (406c44 <xTaskRemoveFromEventList+0x78>)
  406c1a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  406c1c:	4b0b      	ldr	r3, [pc, #44]	; (406c4c <xTaskRemoveFromEventList+0x80>)
  406c1e:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
  406c20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  406c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  406c24:	4298      	cmp	r0, r3
  406c26:	bf34      	ite	cc
  406c28:	2000      	movcc	r0, #0
  406c2a:	2001      	movcs	r0, #1
  406c2c:	bd38      	pop	{r3, r4, r5, pc}
  406c2e:	bf00      	nop
  406c30:	00405cf5 	.word	0x00405cf5
  406c34:	00405c6d 	.word	0x00405c6d
  406c38:	2000aca0 	.word	0x2000aca0
  406c3c:	2000ac38 	.word	0x2000ac38
  406c40:	2000ac3c 	.word	0x2000ac3c
  406c44:	00405c15 	.word	0x00405c15
  406c48:	2000aca8 	.word	0x2000aca8
  406c4c:	2000aca4 	.word	0x2000aca4

00406c50 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  406c50:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  406c52:	b918      	cbnz	r0, 406c5c <vTaskSetTimeOutState+0xc>
  406c54:	4b05      	ldr	r3, [pc, #20]	; (406c6c <vTaskSetTimeOutState+0x1c>)
  406c56:	4798      	blx	r3
  406c58:	bf00      	nop
  406c5a:	e7fd      	b.n	406c58 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  406c5c:	4a04      	ldr	r2, [pc, #16]	; (406c70 <vTaskSetTimeOutState+0x20>)
  406c5e:	6812      	ldr	r2, [r2, #0]
  406c60:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  406c62:	4a04      	ldr	r2, [pc, #16]	; (406c74 <vTaskSetTimeOutState+0x24>)
  406c64:	6812      	ldr	r2, [r2, #0]
  406c66:	6042      	str	r2, [r0, #4]
  406c68:	bd08      	pop	{r3, pc}
  406c6a:	bf00      	nop
  406c6c:	00405cf5 	.word	0x00405cf5
  406c70:	2000acbc 	.word	0x2000acbc
  406c74:	2000acc0 	.word	0x2000acc0

00406c78 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  406c78:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  406c7a:	b918      	cbnz	r0, 406c84 <xTaskCheckForTimeOut+0xc>
  406c7c:	4b19      	ldr	r3, [pc, #100]	; (406ce4 <xTaskCheckForTimeOut+0x6c>)
  406c7e:	4798      	blx	r3
  406c80:	bf00      	nop
  406c82:	e7fd      	b.n	406c80 <xTaskCheckForTimeOut+0x8>
  406c84:	460d      	mov	r5, r1
  406c86:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  406c88:	b919      	cbnz	r1, 406c92 <xTaskCheckForTimeOut+0x1a>
  406c8a:	4b16      	ldr	r3, [pc, #88]	; (406ce4 <xTaskCheckForTimeOut+0x6c>)
  406c8c:	4798      	blx	r3
  406c8e:	bf00      	nop
  406c90:	e7fd      	b.n	406c8e <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
  406c92:	4b15      	ldr	r3, [pc, #84]	; (406ce8 <xTaskCheckForTimeOut+0x70>)
  406c94:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  406c96:	682b      	ldr	r3, [r5, #0]
  406c98:	f1b3 3fff 	cmp.w	r3, #4294967295
  406c9c:	d018      	beq.n	406cd0 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  406c9e:	4a13      	ldr	r2, [pc, #76]	; (406cec <xTaskCheckForTimeOut+0x74>)
  406ca0:	6812      	ldr	r2, [r2, #0]
  406ca2:	6821      	ldr	r1, [r4, #0]
  406ca4:	4291      	cmp	r1, r2
  406ca6:	d004      	beq.n	406cb2 <xTaskCheckForTimeOut+0x3a>
  406ca8:	4a11      	ldr	r2, [pc, #68]	; (406cf0 <xTaskCheckForTimeOut+0x78>)
  406caa:	6812      	ldr	r2, [r2, #0]
  406cac:	6861      	ldr	r1, [r4, #4]
  406cae:	4291      	cmp	r1, r2
  406cb0:	d910      	bls.n	406cd4 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  406cb2:	4a0f      	ldr	r2, [pc, #60]	; (406cf0 <xTaskCheckForTimeOut+0x78>)
  406cb4:	6811      	ldr	r1, [r2, #0]
  406cb6:	6860      	ldr	r0, [r4, #4]
  406cb8:	1a09      	subs	r1, r1, r0
  406cba:	428b      	cmp	r3, r1
  406cbc:	d90c      	bls.n	406cd8 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  406cbe:	6812      	ldr	r2, [r2, #0]
  406cc0:	1a12      	subs	r2, r2, r0
  406cc2:	1a9b      	subs	r3, r3, r2
  406cc4:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  406cc6:	4620      	mov	r0, r4
  406cc8:	4b0a      	ldr	r3, [pc, #40]	; (406cf4 <xTaskCheckForTimeOut+0x7c>)
  406cca:	4798      	blx	r3
			xReturn = pdFALSE;
  406ccc:	2400      	movs	r4, #0
  406cce:	e004      	b.n	406cda <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  406cd0:	2400      	movs	r4, #0
  406cd2:	e002      	b.n	406cda <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  406cd4:	2401      	movs	r4, #1
  406cd6:	e000      	b.n	406cda <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  406cd8:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  406cda:	4b07      	ldr	r3, [pc, #28]	; (406cf8 <xTaskCheckForTimeOut+0x80>)
  406cdc:	4798      	blx	r3

	return xReturn;
}
  406cde:	4620      	mov	r0, r4
  406ce0:	bd38      	pop	{r3, r4, r5, pc}
  406ce2:	bf00      	nop
  406ce4:	00405cf5 	.word	0x00405cf5
  406ce8:	00405d05 	.word	0x00405d05
  406cec:	2000acbc 	.word	0x2000acbc
  406cf0:	2000acc0 	.word	0x2000acc0
  406cf4:	00406c51 	.word	0x00406c51
  406cf8:	00405d25 	.word	0x00405d25

00406cfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  406cfc:	2201      	movs	r2, #1
  406cfe:	4b01      	ldr	r3, [pc, #4]	; (406d04 <vTaskMissedYield+0x8>)
  406d00:	601a      	str	r2, [r3, #0]
  406d02:	4770      	bx	lr
  406d04:	2000ace0 	.word	0x2000ace0

00406d08 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  406d08:	4b01      	ldr	r3, [pc, #4]	; (406d10 <xTaskGetCurrentTaskHandle+0x8>)
  406d0a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  406d0c:	4770      	bx	lr
  406d0e:	bf00      	nop
  406d10:	2000aca4 	.word	0x2000aca4

00406d14 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  406d14:	4b05      	ldr	r3, [pc, #20]	; (406d2c <xTaskGetSchedulerState+0x18>)
  406d16:	681b      	ldr	r3, [r3, #0]
  406d18:	b133      	cbz	r3, 406d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406d1a:	4b05      	ldr	r3, [pc, #20]	; (406d30 <xTaskGetSchedulerState+0x1c>)
  406d1c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  406d1e:	2b00      	cmp	r3, #0
  406d20:	bf0c      	ite	eq
  406d22:	2001      	moveq	r0, #1
  406d24:	2002      	movne	r0, #2
  406d26:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  406d28:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  406d2a:	4770      	bx	lr
  406d2c:	2000ac08 	.word	0x2000ac08
  406d30:	2000aca0 	.word	0x2000aca0

00406d34 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  406d34:	2800      	cmp	r0, #0
  406d36:	d031      	beq.n	406d9c <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  406d38:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  406d3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  406d3c:	4918      	ldr	r1, [pc, #96]	; (406da0 <vTaskPriorityInherit+0x6c>)
  406d3e:	6809      	ldr	r1, [r1, #0]
  406d40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  406d42:	428b      	cmp	r3, r1
  406d44:	d229      	bcs.n	406d9a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  406d46:	4916      	ldr	r1, [pc, #88]	; (406da0 <vTaskPriorityInherit+0x6c>)
  406d48:	6809      	ldr	r1, [r1, #0]
  406d4a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  406d4c:	f1c1 0105 	rsb	r1, r1, #5
  406d50:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  406d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406d56:	4913      	ldr	r1, [pc, #76]	; (406da4 <vTaskPriorityInherit+0x70>)
  406d58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  406d5c:	6941      	ldr	r1, [r0, #20]
  406d5e:	4299      	cmp	r1, r3
  406d60:	d117      	bne.n	406d92 <vTaskPriorityInherit+0x5e>
  406d62:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406d64:	1d04      	adds	r4, r0, #4
  406d66:	4620      	mov	r0, r4
  406d68:	4b0f      	ldr	r3, [pc, #60]	; (406da8 <vTaskPriorityInherit+0x74>)
  406d6a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406d6c:	4b0c      	ldr	r3, [pc, #48]	; (406da0 <vTaskPriorityInherit+0x6c>)
  406d6e:	681b      	ldr	r3, [r3, #0]
  406d70:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  406d72:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  406d74:	4b0d      	ldr	r3, [pc, #52]	; (406dac <vTaskPriorityInherit+0x78>)
  406d76:	681b      	ldr	r3, [r3, #0]
  406d78:	4298      	cmp	r0, r3
  406d7a:	bf84      	itt	hi
  406d7c:	4b0b      	ldrhi	r3, [pc, #44]	; (406dac <vTaskPriorityInherit+0x78>)
  406d7e:	6018      	strhi	r0, [r3, #0]
  406d80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406d84:	4621      	mov	r1, r4
  406d86:	4b07      	ldr	r3, [pc, #28]	; (406da4 <vTaskPriorityInherit+0x70>)
  406d88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  406d8c:	4b08      	ldr	r3, [pc, #32]	; (406db0 <vTaskPriorityInherit+0x7c>)
  406d8e:	4798      	blx	r3
  406d90:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406d92:	4b03      	ldr	r3, [pc, #12]	; (406da0 <vTaskPriorityInherit+0x6c>)
  406d94:	681b      	ldr	r3, [r3, #0]
  406d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406d98:	62c3      	str	r3, [r0, #44]	; 0x2c
  406d9a:	bd38      	pop	{r3, r4, r5, pc}
  406d9c:	4770      	bx	lr
  406d9e:	bf00      	nop
  406da0:	2000aca4 	.word	0x2000aca4
  406da4:	2000ac3c 	.word	0x2000ac3c
  406da8:	00405c6d 	.word	0x00405c6d
  406dac:	2000ac38 	.word	0x2000ac38
  406db0:	00405c15 	.word	0x00405c15

00406db4 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  406db4:	b1e8      	cbz	r0, 406df2 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  406db6:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  406db8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  406dba:	6c82      	ldr	r2, [r0, #72]	; 0x48
  406dbc:	4291      	cmp	r1, r2
  406dbe:	d017      	beq.n	406df0 <vTaskPriorityDisinherit+0x3c>
  406dc0:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406dc2:	1d05      	adds	r5, r0, #4
  406dc4:	4628      	mov	r0, r5
  406dc6:	4b0b      	ldr	r3, [pc, #44]	; (406df4 <vTaskPriorityDisinherit+0x40>)
  406dc8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  406dca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  406dcc:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  406dce:	f1c0 0305 	rsb	r3, r0, #5
  406dd2:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  406dd4:	4b08      	ldr	r3, [pc, #32]	; (406df8 <vTaskPriorityDisinherit+0x44>)
  406dd6:	681b      	ldr	r3, [r3, #0]
  406dd8:	4298      	cmp	r0, r3
  406dda:	bf84      	itt	hi
  406ddc:	4b06      	ldrhi	r3, [pc, #24]	; (406df8 <vTaskPriorityDisinherit+0x44>)
  406dde:	6018      	strhi	r0, [r3, #0]
  406de0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406de4:	4629      	mov	r1, r5
  406de6:	4b05      	ldr	r3, [pc, #20]	; (406dfc <vTaskPriorityDisinherit+0x48>)
  406de8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  406dec:	4b04      	ldr	r3, [pc, #16]	; (406e00 <vTaskPriorityDisinherit+0x4c>)
  406dee:	4798      	blx	r3
  406df0:	bd38      	pop	{r3, r4, r5, pc}
  406df2:	4770      	bx	lr
  406df4:	00405c6d 	.word	0x00405c6d
  406df8:	2000ac38 	.word	0x2000ac38
  406dfc:	2000ac3c 	.word	0x2000ac3c
  406e00:	00405c15 	.word	0x00405c15

00406e04 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  406e04:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  406e06:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406e08:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  406e0a:	4291      	cmp	r1, r2
  406e0c:	d80a      	bhi.n	406e24 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  406e0e:	1ad2      	subs	r2, r2, r3
  406e10:	6983      	ldr	r3, [r0, #24]
  406e12:	429a      	cmp	r2, r3
  406e14:	d211      	bcs.n	406e3a <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  406e16:	1d01      	adds	r1, r0, #4
  406e18:	4b0a      	ldr	r3, [pc, #40]	; (406e44 <prvInsertTimerInActiveList+0x40>)
  406e1a:	6818      	ldr	r0, [r3, #0]
  406e1c:	4b0a      	ldr	r3, [pc, #40]	; (406e48 <prvInsertTimerInActiveList+0x44>)
  406e1e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  406e20:	2000      	movs	r0, #0
  406e22:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  406e24:	429a      	cmp	r2, r3
  406e26:	d201      	bcs.n	406e2c <prvInsertTimerInActiveList+0x28>
  406e28:	4299      	cmp	r1, r3
  406e2a:	d208      	bcs.n	406e3e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406e2c:	1d01      	adds	r1, r0, #4
  406e2e:	4b07      	ldr	r3, [pc, #28]	; (406e4c <prvInsertTimerInActiveList+0x48>)
  406e30:	6818      	ldr	r0, [r3, #0]
  406e32:	4b05      	ldr	r3, [pc, #20]	; (406e48 <prvInsertTimerInActiveList+0x44>)
  406e34:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  406e36:	2000      	movs	r0, #0
  406e38:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  406e3a:	2001      	movs	r0, #1
  406e3c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  406e3e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  406e40:	bd08      	pop	{r3, pc}
  406e42:	bf00      	nop
  406e44:	2000ad20 	.word	0x2000ad20
  406e48:	00405c31 	.word	0x00405c31
  406e4c:	2000acec 	.word	0x2000acec

00406e50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  406e50:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  406e52:	4b0d      	ldr	r3, [pc, #52]	; (406e88 <prvCheckForValidListAndQueue+0x38>)
  406e54:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  406e56:	4b0d      	ldr	r3, [pc, #52]	; (406e8c <prvCheckForValidListAndQueue+0x3c>)
  406e58:	681b      	ldr	r3, [r3, #0]
  406e5a:	b98b      	cbnz	r3, 406e80 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  406e5c:	4d0c      	ldr	r5, [pc, #48]	; (406e90 <prvCheckForValidListAndQueue+0x40>)
  406e5e:	4628      	mov	r0, r5
  406e60:	4e0c      	ldr	r6, [pc, #48]	; (406e94 <prvCheckForValidListAndQueue+0x44>)
  406e62:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  406e64:	4c0c      	ldr	r4, [pc, #48]	; (406e98 <prvCheckForValidListAndQueue+0x48>)
  406e66:	4620      	mov	r0, r4
  406e68:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  406e6a:	4b0c      	ldr	r3, [pc, #48]	; (406e9c <prvCheckForValidListAndQueue+0x4c>)
  406e6c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  406e6e:	4b0c      	ldr	r3, [pc, #48]	; (406ea0 <prvCheckForValidListAndQueue+0x50>)
  406e70:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  406e72:	2200      	movs	r2, #0
  406e74:	210c      	movs	r1, #12
  406e76:	2005      	movs	r0, #5
  406e78:	4b0a      	ldr	r3, [pc, #40]	; (406ea4 <prvCheckForValidListAndQueue+0x54>)
  406e7a:	4798      	blx	r3
  406e7c:	4b03      	ldr	r3, [pc, #12]	; (406e8c <prvCheckForValidListAndQueue+0x3c>)
  406e7e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  406e80:	4b09      	ldr	r3, [pc, #36]	; (406ea8 <prvCheckForValidListAndQueue+0x58>)
  406e82:	4798      	blx	r3
  406e84:	bd70      	pop	{r4, r5, r6, pc}
  406e86:	bf00      	nop
  406e88:	00405d05 	.word	0x00405d05
  406e8c:	2000ad1c 	.word	0x2000ad1c
  406e90:	2000acf0 	.word	0x2000acf0
  406e94:	00405bf5 	.word	0x00405bf5
  406e98:	2000ad04 	.word	0x2000ad04
  406e9c:	2000acec 	.word	0x2000acec
  406ea0:	2000ad20 	.word	0x2000ad20
  406ea4:	004060f1 	.word	0x004060f1
  406ea8:	00405d25 	.word	0x00405d25

00406eac <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  406eac:	b510      	push	{r4, lr}
  406eae:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  406eb0:	4b0b      	ldr	r3, [pc, #44]	; (406ee0 <xTimerCreateTimerTask+0x34>)
  406eb2:	4798      	blx	r3

	if( xTimerQueue != NULL )
  406eb4:	4b0b      	ldr	r3, [pc, #44]	; (406ee4 <xTimerCreateTimerTask+0x38>)
  406eb6:	681b      	ldr	r3, [r3, #0]
  406eb8:	b163      	cbz	r3, 406ed4 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  406eba:	2300      	movs	r3, #0
  406ebc:	9303      	str	r3, [sp, #12]
  406ebe:	9302      	str	r3, [sp, #8]
  406ec0:	9301      	str	r3, [sp, #4]
  406ec2:	2204      	movs	r2, #4
  406ec4:	9200      	str	r2, [sp, #0]
  406ec6:	f44f 7282 	mov.w	r2, #260	; 0x104
  406eca:	4907      	ldr	r1, [pc, #28]	; (406ee8 <xTimerCreateTimerTask+0x3c>)
  406ecc:	4807      	ldr	r0, [pc, #28]	; (406eec <xTimerCreateTimerTask+0x40>)
  406ece:	4c08      	ldr	r4, [pc, #32]	; (406ef0 <xTimerCreateTimerTask+0x44>)
  406ed0:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  406ed2:	b918      	cbnz	r0, 406edc <xTimerCreateTimerTask+0x30>
  406ed4:	4b07      	ldr	r3, [pc, #28]	; (406ef4 <xTimerCreateTimerTask+0x48>)
  406ed6:	4798      	blx	r3
  406ed8:	bf00      	nop
  406eda:	e7fd      	b.n	406ed8 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  406edc:	b004      	add	sp, #16
  406ede:	bd10      	pop	{r4, pc}
  406ee0:	00406e51 	.word	0x00406e51
  406ee4:	2000ad1c 	.word	0x2000ad1c
  406ee8:	004129c0 	.word	0x004129c0
  406eec:	00407001 	.word	0x00407001
  406ef0:	004064f9 	.word	0x004064f9
  406ef4:	00405cf5 	.word	0x00405cf5

00406ef8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  406ef8:	b530      	push	{r4, r5, lr}
  406efa:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  406efc:	4c0f      	ldr	r4, [pc, #60]	; (406f3c <xTimerGenericCommand+0x44>)
  406efe:	6825      	ldr	r5, [r4, #0]
  406f00:	b1cd      	cbz	r5, 406f36 <xTimerGenericCommand+0x3e>
  406f02:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  406f04:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  406f06:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  406f08:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  406f0a:	b96c      	cbnz	r4, 406f28 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  406f0c:	4b0c      	ldr	r3, [pc, #48]	; (406f40 <xTimerGenericCommand+0x48>)
  406f0e:	4798      	blx	r3
  406f10:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  406f12:	f04f 0300 	mov.w	r3, #0
  406f16:	bf0c      	ite	eq
  406f18:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  406f1a:	461a      	movne	r2, r3
  406f1c:	a901      	add	r1, sp, #4
  406f1e:	4807      	ldr	r0, [pc, #28]	; (406f3c <xTimerGenericCommand+0x44>)
  406f20:	6800      	ldr	r0, [r0, #0]
  406f22:	4c08      	ldr	r4, [pc, #32]	; (406f44 <xTimerGenericCommand+0x4c>)
  406f24:	47a0      	blx	r4
  406f26:	e007      	b.n	406f38 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  406f28:	2300      	movs	r3, #0
  406f2a:	4622      	mov	r2, r4
  406f2c:	a901      	add	r1, sp, #4
  406f2e:	4628      	mov	r0, r5
  406f30:	4c05      	ldr	r4, [pc, #20]	; (406f48 <xTimerGenericCommand+0x50>)
  406f32:	47a0      	blx	r4
  406f34:	e000      	b.n	406f38 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  406f36:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  406f38:	b005      	add	sp, #20
  406f3a:	bd30      	pop	{r4, r5, pc}
  406f3c:	2000ad1c 	.word	0x2000ad1c
  406f40:	00406d15 	.word	0x00406d15
  406f44:	00406149 	.word	0x00406149
  406f48:	00406269 	.word	0x00406269

00406f4c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  406f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406f50:	b082      	sub	sp, #8
  406f52:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  406f54:	4b22      	ldr	r3, [pc, #136]	; (406fe0 <prvSampleTimeNow+0x94>)
  406f56:	4798      	blx	r3
  406f58:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  406f5a:	4b22      	ldr	r3, [pc, #136]	; (406fe4 <prvSampleTimeNow+0x98>)
  406f5c:	681b      	ldr	r3, [r3, #0]
  406f5e:	4298      	cmp	r0, r3
  406f60:	d234      	bcs.n	406fcc <prvSampleTimeNow+0x80>
  406f62:	e024      	b.n	406fae <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  406f64:	68da      	ldr	r2, [r3, #12]
  406f66:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  406f6a:	68db      	ldr	r3, [r3, #12]
  406f6c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  406f6e:	1d25      	adds	r5, r4, #4
  406f70:	4628      	mov	r0, r5
  406f72:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406f76:	4620      	mov	r0, r4
  406f78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406f7a:	69e3      	ldr	r3, [r4, #28]
  406f7c:	2b01      	cmp	r3, #1
  406f7e:	d118      	bne.n	406fb2 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  406f80:	69a3      	ldr	r3, [r4, #24]
  406f82:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  406f84:	459a      	cmp	sl, r3
  406f86:	d206      	bcs.n	406f96 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  406f88:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406f8a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406f8c:	4629      	mov	r1, r5
  406f8e:	6830      	ldr	r0, [r6, #0]
  406f90:	4b15      	ldr	r3, [pc, #84]	; (406fe8 <prvSampleTimeNow+0x9c>)
  406f92:	4798      	blx	r3
  406f94:	e00d      	b.n	406fb2 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406f96:	2100      	movs	r1, #0
  406f98:	9100      	str	r1, [sp, #0]
  406f9a:	460b      	mov	r3, r1
  406f9c:	4652      	mov	r2, sl
  406f9e:	4620      	mov	r0, r4
  406fa0:	4c12      	ldr	r4, [pc, #72]	; (406fec <prvSampleTimeNow+0xa0>)
  406fa2:	47a0      	blx	r4
				configASSERT( xResult );
  406fa4:	b928      	cbnz	r0, 406fb2 <prvSampleTimeNow+0x66>
  406fa6:	4b12      	ldr	r3, [pc, #72]	; (406ff0 <prvSampleTimeNow+0xa4>)
  406fa8:	4798      	blx	r3
  406faa:	bf00      	nop
  406fac:	e7fd      	b.n	406faa <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406fae:	4e11      	ldr	r6, [pc, #68]	; (406ff4 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  406fb0:	4f11      	ldr	r7, [pc, #68]	; (406ff8 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406fb2:	6833      	ldr	r3, [r6, #0]
  406fb4:	681a      	ldr	r2, [r3, #0]
  406fb6:	2a00      	cmp	r2, #0
  406fb8:	d1d4      	bne.n	406f64 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  406fba:	4a10      	ldr	r2, [pc, #64]	; (406ffc <prvSampleTimeNow+0xb0>)
  406fbc:	6810      	ldr	r0, [r2, #0]
  406fbe:	490d      	ldr	r1, [pc, #52]	; (406ff4 <prvSampleTimeNow+0xa8>)
  406fc0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  406fc2:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  406fc4:	2301      	movs	r3, #1
  406fc6:	f8c9 3000 	str.w	r3, [r9]
  406fca:	e002      	b.n	406fd2 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  406fcc:	2300      	movs	r3, #0
  406fce:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  406fd2:	4b04      	ldr	r3, [pc, #16]	; (406fe4 <prvSampleTimeNow+0x98>)
  406fd4:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  406fd8:	4640      	mov	r0, r8
  406fda:	b002      	add	sp, #8
  406fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fe0:	00406775 	.word	0x00406775
  406fe4:	2000ad18 	.word	0x2000ad18
  406fe8:	00405c31 	.word	0x00405c31
  406fec:	00406ef9 	.word	0x00406ef9
  406ff0:	00405cf5 	.word	0x00405cf5
  406ff4:	2000acec 	.word	0x2000acec
  406ff8:	00405c6d 	.word	0x00405c6d
  406ffc:	2000ad20 	.word	0x2000ad20

00407000 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  407000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407004:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  407006:	4d4d      	ldr	r5, [pc, #308]	; (40713c <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  407008:	f8df 8160 	ldr.w	r8, [pc, #352]	; 40716c <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40700c:	4b4c      	ldr	r3, [pc, #304]	; (407140 <prvTimerTask+0x140>)
  40700e:	681b      	ldr	r3, [r3, #0]
  407010:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  407012:	2a00      	cmp	r2, #0
  407014:	f000 8088 	beq.w	407128 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407018:	68db      	ldr	r3, [r3, #12]
  40701a:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40701c:	4b49      	ldr	r3, [pc, #292]	; (407144 <prvTimerTask+0x144>)
  40701e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407020:	a803      	add	r0, sp, #12
  407022:	4b49      	ldr	r3, [pc, #292]	; (407148 <prvTimerTask+0x148>)
  407024:	4798      	blx	r3
  407026:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  407028:	9b03      	ldr	r3, [sp, #12]
  40702a:	2b00      	cmp	r3, #0
  40702c:	d130      	bne.n	407090 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40702e:	4286      	cmp	r6, r0
  407030:	d824      	bhi.n	40707c <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
  407032:	4b46      	ldr	r3, [pc, #280]	; (40714c <prvTimerTask+0x14c>)
  407034:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  407036:	4b42      	ldr	r3, [pc, #264]	; (407140 <prvTimerTask+0x140>)
  407038:	681b      	ldr	r3, [r3, #0]
  40703a:	68db      	ldr	r3, [r3, #12]
  40703c:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  40703e:	1d20      	adds	r0, r4, #4
  407040:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407042:	69e3      	ldr	r3, [r4, #28]
  407044:	2b01      	cmp	r3, #1
  407046:	d114      	bne.n	407072 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  407048:	69a1      	ldr	r1, [r4, #24]
  40704a:	4633      	mov	r3, r6
  40704c:	463a      	mov	r2, r7
  40704e:	4431      	add	r1, r6
  407050:	4620      	mov	r0, r4
  407052:	4f3f      	ldr	r7, [pc, #252]	; (407150 <prvTimerTask+0x150>)
  407054:	47b8      	blx	r7
  407056:	2801      	cmp	r0, #1
  407058:	d10b      	bne.n	407072 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40705a:	2100      	movs	r1, #0
  40705c:	9100      	str	r1, [sp, #0]
  40705e:	460b      	mov	r3, r1
  407060:	4632      	mov	r2, r6
  407062:	4620      	mov	r0, r4
  407064:	4e3b      	ldr	r6, [pc, #236]	; (407154 <prvTimerTask+0x154>)
  407066:	47b0      	blx	r6
			configASSERT( xResult );
  407068:	b918      	cbnz	r0, 407072 <prvTimerTask+0x72>
  40706a:	4b3b      	ldr	r3, [pc, #236]	; (407158 <prvTimerTask+0x158>)
  40706c:	4798      	blx	r3
  40706e:	bf00      	nop
  407070:	e7fd      	b.n	40706e <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407072:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407074:	4620      	mov	r0, r4
  407076:	4798      	blx	r3
  407078:	e00c      	b.n	407094 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40707a:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40707c:	1bf1      	subs	r1, r6, r7
  40707e:	6828      	ldr	r0, [r5, #0]
  407080:	4b36      	ldr	r3, [pc, #216]	; (40715c <prvTimerTask+0x15c>)
  407082:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  407084:	4b31      	ldr	r3, [pc, #196]	; (40714c <prvTimerTask+0x14c>)
  407086:	4798      	blx	r3
  407088:	b920      	cbnz	r0, 407094 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40708a:	4b35      	ldr	r3, [pc, #212]	; (407160 <prvTimerTask+0x160>)
  40708c:	4798      	blx	r3
  40708e:	e001      	b.n	407094 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  407090:	4b2e      	ldr	r3, [pc, #184]	; (40714c <prvTimerTask+0x14c>)
  407092:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407094:	a802      	add	r0, sp, #8
  407096:	4b2c      	ldr	r3, [pc, #176]	; (407148 <prvTimerTask+0x148>)
  407098:	4798      	blx	r3
  40709a:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40709c:	4e31      	ldr	r6, [pc, #196]	; (407164 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40709e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 407150 <prvTimerTask+0x150>
  4070a2:	e039      	b.n	407118 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  4070a4:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4070a6:	b11c      	cbz	r4, 4070b0 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4070a8:	6963      	ldr	r3, [r4, #20]
  4070aa:	b10b      	cbz	r3, 4070b0 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4070ac:	1d20      	adds	r0, r4, #4
  4070ae:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4070b0:	9b03      	ldr	r3, [sp, #12]
  4070b2:	2b02      	cmp	r3, #2
  4070b4:	d020      	beq.n	4070f8 <prvTimerTask+0xf8>
  4070b6:	2b03      	cmp	r3, #3
  4070b8:	d02b      	beq.n	407112 <prvTimerTask+0x112>
  4070ba:	2b00      	cmp	r3, #0
  4070bc:	d12c      	bne.n	407118 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  4070be:	9904      	ldr	r1, [sp, #16]
  4070c0:	69a0      	ldr	r0, [r4, #24]
  4070c2:	460b      	mov	r3, r1
  4070c4:	463a      	mov	r2, r7
  4070c6:	4401      	add	r1, r0
  4070c8:	4620      	mov	r0, r4
  4070ca:	47c8      	blx	r9
  4070cc:	2801      	cmp	r0, #1
  4070ce:	d123      	bne.n	407118 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4070d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4070d2:	4620      	mov	r0, r4
  4070d4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4070d6:	69e3      	ldr	r3, [r4, #28]
  4070d8:	2b01      	cmp	r3, #1
  4070da:	d11d      	bne.n	407118 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4070dc:	69a2      	ldr	r2, [r4, #24]
  4070de:	2100      	movs	r1, #0
  4070e0:	9100      	str	r1, [sp, #0]
  4070e2:	460b      	mov	r3, r1
  4070e4:	9804      	ldr	r0, [sp, #16]
  4070e6:	4402      	add	r2, r0
  4070e8:	4620      	mov	r0, r4
  4070ea:	4c1a      	ldr	r4, [pc, #104]	; (407154 <prvTimerTask+0x154>)
  4070ec:	47a0      	blx	r4
						configASSERT( xResult );
  4070ee:	b998      	cbnz	r0, 407118 <prvTimerTask+0x118>
  4070f0:	4b19      	ldr	r3, [pc, #100]	; (407158 <prvTimerTask+0x158>)
  4070f2:	4798      	blx	r3
  4070f4:	bf00      	nop
  4070f6:	e7fd      	b.n	4070f4 <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4070f8:	9904      	ldr	r1, [sp, #16]
  4070fa:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4070fc:	b919      	cbnz	r1, 407106 <prvTimerTask+0x106>
  4070fe:	4b16      	ldr	r3, [pc, #88]	; (407158 <prvTimerTask+0x158>)
  407100:	4798      	blx	r3
  407102:	bf00      	nop
  407104:	e7fd      	b.n	407102 <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  407106:	463b      	mov	r3, r7
  407108:	463a      	mov	r2, r7
  40710a:	4439      	add	r1, r7
  40710c:	4620      	mov	r0, r4
  40710e:	47c8      	blx	r9
  407110:	e002      	b.n	407118 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  407112:	4620      	mov	r0, r4
  407114:	4b14      	ldr	r3, [pc, #80]	; (407168 <prvTimerTask+0x168>)
  407116:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  407118:	2300      	movs	r3, #0
  40711a:	461a      	mov	r2, r3
  40711c:	a903      	add	r1, sp, #12
  40711e:	6828      	ldr	r0, [r5, #0]
  407120:	47b0      	blx	r6
  407122:	2800      	cmp	r0, #0
  407124:	d1be      	bne.n	4070a4 <prvTimerTask+0xa4>
  407126:	e771      	b.n	40700c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  407128:	4b06      	ldr	r3, [pc, #24]	; (407144 <prvTimerTask+0x144>)
  40712a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40712c:	a803      	add	r0, sp, #12
  40712e:	4b06      	ldr	r3, [pc, #24]	; (407148 <prvTimerTask+0x148>)
  407130:	4798      	blx	r3
  407132:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  407134:	9b03      	ldr	r3, [sp, #12]
  407136:	2b00      	cmp	r3, #0
  407138:	d09f      	beq.n	40707a <prvTimerTask+0x7a>
  40713a:	e7a9      	b.n	407090 <prvTimerTask+0x90>
  40713c:	2000ad1c 	.word	0x2000ad1c
  407140:	2000acec 	.word	0x2000acec
  407144:	00406765 	.word	0x00406765
  407148:	00406f4d 	.word	0x00406f4d
  40714c:	004068b5 	.word	0x004068b5
  407150:	00406e05 	.word	0x00406e05
  407154:	00406ef9 	.word	0x00406ef9
  407158:	00405cf5 	.word	0x00405cf5
  40715c:	00406455 	.word	0x00406455
  407160:	00405ce5 	.word	0x00405ce5
  407164:	004062f9 	.word	0x004062f9
  407168:	00405f21 	.word	0x00405f21
  40716c:	00405c6d 	.word	0x00405c6d

00407170 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  407170:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  407172:	4c07      	ldr	r4, [pc, #28]	; (407190 <task_led+0x20>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  407174:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0);
		vTaskDelay(TASK_LED_DELAY);
  407178:	4d06      	ldr	r5, [pc, #24]	; (407194 <task_led+0x24>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40717a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40717c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  407180:	bf14      	ite	ne
  407182:	6366      	strne	r6, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  407184:	6326      	streq	r6, [r4, #48]	; 0x30
  407186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40718a:	47a8      	blx	r5
	}
  40718c:	e7f5      	b.n	40717a <task_led+0xa>
  40718e:	bf00      	nop
  407190:	400e1200 	.word	0x400e1200
  407194:	004069b9 	.word	0x004069b9

00407198 <task_send_status>:
 *
 * Battery status and storage space are currently not implemented, so these
 * are simulated.
 */
static void task_send_status(void *pvParameters)
{
  407198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40719c:	b0ca      	sub	sp, #296	; 0x128
  40719e:	af02      	add	r7, sp, #8
	int8_t iBattery = 100;
	uint8_t name_buf[NAME_QUEUE_ITEM_SIZE];
	portBASE_TYPE xStatus = pdFAIL;
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
  4071a0:	22ff      	movs	r2, #255	; 0xff
  4071a2:	2100      	movs	r1, #0
  4071a4:	4638      	mov	r0, r7
  4071a6:	4b24      	ldr	r3, [pc, #144]	; (407238 <task_send_status+0xa0>)
  4071a8:	4798      	blx	r3
	vTaskDelay(TASK_SEND_STATUS_DELAY);
  4071aa:	f644 6020 	movw	r0, #20000	; 0x4e20
  4071ae:	4b23      	ldr	r3, [pc, #140]	; (40723c <task_send_status+0xa4>)
  4071b0:	4798      	blx	r3
 * are simulated.
 */
static void task_send_status(void *pvParameters)
{
	UNUSED(pvParameters);
	int8_t iBattery = 100;
  4071b2:	2564      	movs	r5, #100	; 0x64
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
	vTaskDelay(TASK_SEND_STATUS_DELAY);
	for (;;) {
		if(network_is_connected == IS_CONNECTED) {
  4071b4:	4c22      	ldr	r4, [pc, #136]	; (407240 <task_send_status+0xa8>)
			// Read device name from queue
			xStatus = xQueuePeek(xName_Queue_handle,name_buf,0);
  4071b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 40725c <task_send_status+0xc4>
  4071ba:	4e22      	ldr	r6, [pc, #136]	; (407244 <task_send_status+0xac>)
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
	vTaskDelay(TASK_SEND_STATUS_DELAY);
	for (;;) {
		if(network_is_connected == IS_CONNECTED) {
  4071bc:	f994 3000 	ldrsb.w	r3, [r4]
  4071c0:	2b01      	cmp	r3, #1
  4071c2:	d133      	bne.n	40722c <task_send_status+0x94>
			// Read device name from queue
			xStatus = xQueuePeek(xName_Queue_handle,name_buf,0);
  4071c4:	2200      	movs	r2, #0
  4071c6:	f507 7180 	add.w	r1, r7, #256	; 0x100
  4071ca:	f8d8 0000 	ldr.w	r0, [r8]
  4071ce:	47b0      	blx	r6
			if(xStatus == pdPASS) {						// Only send status if device name is read
  4071d0:	2801      	cmp	r0, #1
  4071d2:	d12b      	bne.n	40722c <task_send_status+0x94>
  4071d4:	46e9      	mov	r9, sp
				uint8_t name_len = name_buf[NAME_SIZE];
				char cName[name_len];
  4071d6:	f897 2100 	ldrb.w	r2, [r7, #256]	; 0x100
  4071da:	1dd3      	adds	r3, r2, #7
  4071dc:	f023 0307 	bic.w	r3, r3, #7
  4071e0:	ebad 0d03 	sub.w	sp, sp, r3
  4071e4:	f10d 0a08 	add.w	sl, sp, #8
				memcpy(cName,&name_buf[NAME],name_len);
  4071e8:	f207 1101 	addw	r1, r7, #257	; 0x101
  4071ec:	4650      	mov	r0, sl
  4071ee:	4b16      	ldr	r3, [pc, #88]	; (407248 <task_send_status+0xb0>)
  4071f0:	4798      	blx	r3
				
				// Generate status packet
				if(generate_status_packet(status_packet, &cName, iBattery, 1, storage_space, remaining_space) == -1 ) {
  4071f2:	b2ed      	uxtb	r5, r5
  4071f4:	2364      	movs	r3, #100	; 0x64
  4071f6:	9301      	str	r3, [sp, #4]
  4071f8:	23c8      	movs	r3, #200	; 0xc8
  4071fa:	9300      	str	r3, [sp, #0]
  4071fc:	2301      	movs	r3, #1
  4071fe:	462a      	mov	r2, r5
  407200:	4651      	mov	r1, sl
  407202:	4638      	mov	r0, r7
  407204:	f8df a058 	ldr.w	sl, [pc, #88]	; 407260 <task_send_status+0xc8>
  407208:	47d0      	blx	sl
  40720a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40720e:	d102      	bne.n	407216 <task_send_status+0x7e>
					printf("-E- Error generating status message\r\n");
  407210:	480e      	ldr	r0, [pc, #56]	; (40724c <task_send_status+0xb4>)
  407212:	4b0f      	ldr	r3, [pc, #60]	; (407250 <task_send_status+0xb8>)
  407214:	4798      	blx	r3
				}
				
				network_send_status(status_packet, peer_address);
  407216:	4b0f      	ldr	r3, [pc, #60]	; (407254 <task_send_status+0xbc>)
  407218:	6819      	ldr	r1, [r3, #0]
  40721a:	4638      	mov	r0, r7
  40721c:	4b0e      	ldr	r3, [pc, #56]	; (407258 <task_send_status+0xc0>)
  40721e:	4798      	blx	r3
				
				// Simulate changing battery level
				iBattery -= 10;
  407220:	3d0a      	subs	r5, #10
  407222:	b26d      	sxtb	r5, r5
				if (iBattery <= 0)
				{
					iBattery = 100;
  407224:	2d00      	cmp	r5, #0
  407226:	bfd8      	it	le
  407228:	2564      	movle	r5, #100	; 0x64
  40722a:	46cd      	mov	sp, r9
				}
			}
		}
		vTaskDelay(TASK_SEND_STATUS_DELAY);
  40722c:	f644 6020 	movw	r0, #20000	; 0x4e20
  407230:	4b02      	ldr	r3, [pc, #8]	; (40723c <task_send_status+0xa4>)
  407232:	4798      	blx	r3
	}
  407234:	e7c2      	b.n	4071bc <task_send_status+0x24>
  407236:	bf00      	nop
  407238:	00409149 	.word	0x00409149
  40723c:	004069b9 	.word	0x004069b9
  407240:	2000bdb0 	.word	0x2000bdb0
  407244:	004062f9 	.word	0x004062f9
  407248:	00409015 	.word	0x00409015
  40724c:	004129c8 	.word	0x004129c8
  407250:	00408a5d 	.word	0x00408a5d
  407254:	2000bdb4 	.word	0x2000bdb4
  407258:	00400e11 	.word	0x00400e11
  40725c:	2000bdac 	.word	0x2000bdac
  407260:	00401951 	.word	0x00401951

00407264 <task_control_loop>:
}

static void task_control_loop(void *pvParameters)
{
  407264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407268:	b08f      	sub	sp, #60	; 0x3c
	UNUSED(pvParameters);
	// Queue buffers
	volatile int8_t control_buf[CONTROL_MSG_QUEUE_ITEM_SIZE] = {0, 0};
  40726a:	2400      	movs	r4, #0
  40726c:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  407270:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
	portTickType xInputValidTicks = TASK_CONTROL_INPUT_VALID_TIME_MS/portTICK_RATE_MS;
	portTickType xNoInputTicks = TASK_CONTROL_NO_INPUT_TIME_MS/portTICK_RATE_MS;
	portTickType xSettingsValidTicks = TASK_CONTROL_CHECK_SETTINGS_TIME_MS/portTICK_RATE_MS;
	xTimeOutType xSettingsTime;
	xTimeOutType xInputTIme;
	portTickType xInputTimeToWait = xInputValidTicks;
  407274:	f44f 7396 	mov.w	r3, #300	; 0x12c
  407278:	9307      	str	r3, [sp, #28]
	portTickType xSettingsTImeToWait = xSettingsValidTicks;
  40727a:	f242 7310 	movw	r3, #10000	; 0x2710
  40727e:	9306      	str	r3, [sp, #24]
	vTaskSetTimeOutState( &xSettingsTime );
  407280:	a80a      	add	r0, sp, #40	; 0x28
  407282:	4d4d      	ldr	r5, [pc, #308]	; (4073b8 <task_control_loop+0x154>)
  407284:	47a8      	blx	r5
	vTaskSetTimeOutState( &xInputTIme );
  407286:	a808      	add	r0, sp, #32
  407288:	47a8      	blx	r5
	// Flags for input validation
	int8_t check_for_settings = 1;
	int8_t read_control_input = 1;
	
	// Motor initialization
	propeller_motor1_start(0);
  40728a:	4620      	mov	r0, r4
  40728c:	4b4b      	ldr	r3, [pc, #300]	; (4073bc <task_control_loop+0x158>)
  40728e:	4798      	blx	r3
	servos_propeller1_start();
  407290:	4b4b      	ldr	r3, [pc, #300]	; (4073c0 <task_control_loop+0x15c>)
  407292:	4798      	blx	r3
	portTickType xSettingsTImeToWait = xSettingsValidTicks;
	vTaskSetTimeOutState( &xSettingsTime );
	vTaskSetTimeOutState( &xInputTIme );
	
	// Flags for input validation
	int8_t check_for_settings = 1;
  407294:	2301      	movs	r3, #1
  407296:	9304      	str	r3, [sp, #16]
		}
		
		while(1) {
#ifdef XY_COORDS_INPUT
			// Calculate propeller speed as magnitude of input vector
			uint8_t propeller_speed = sqrt(pow(control_buf[X_COORD],2) + pow(control_buf[Y_COORD],2));
  407298:	4f4a      	ldr	r7, [pc, #296]	; (4073c4 <task_control_loop+0x160>)
  40729a:	4e4b      	ldr	r6, [pc, #300]	; (4073c8 <task_control_loop+0x164>)
			// Determine x,y from hypotenuse and angle
			
#endif
			
			// Check for settings validity
			if( xTaskCheckForTimeOut( &xSettingsTime, &xSettingsTImeToWait ) != pdFALSE ) {
  40729c:	4d4b      	ldr	r5, [pc, #300]	; (4073cc <task_control_loop+0x168>)
	portTickType xSettingsTImeToWait = xSettingsValidTicks;
	vTaskSetTimeOutState( &xSettingsTime );
	vTaskSetTimeOutState( &xInputTIme );
	
	// Flags for input validation
	int8_t check_for_settings = 1;
  40729e:	2301      	movs	r3, #1
  4072a0:	9303      	str	r3, [sp, #12]
#endif
			
			// Check for settings validity
			if( xTaskCheckForTimeOut( &xSettingsTime, &xSettingsTImeToWait ) != pdFALSE ) {
				// Settings have become invalid and should be checked again
				check_for_settings = 1;
  4072a2:	9305      	str	r3, [sp, #20]
  4072a4:	e001      	b.n	4072aa <task_control_loop+0x46>
  4072a6:	9b05      	ldr	r3, [sp, #20]
  4072a8:	9304      	str	r3, [sp, #16]
	propeller_motor1_start(0);
	servos_propeller1_start();
	for (;;)
	{
		/* Read settings */
		if(check_for_settings > 0) {
  4072aa:	9b04      	ldr	r3, [sp, #16]
  4072ac:	2b00      	cmp	r3, #0
  4072ae:	dd11      	ble.n	4072d4 <task_control_loop+0x70>
			xStatus = xQueuePeek(xSettings_Msg_Queue_handle, settings_buf, 0);
  4072b0:	2301      	movs	r3, #1
  4072b2:	2200      	movs	r2, #0
  4072b4:	a90c      	add	r1, sp, #48	; 0x30
  4072b6:	4846      	ldr	r0, [pc, #280]	; (4073d0 <task_control_loop+0x16c>)
  4072b8:	6800      	ldr	r0, [r0, #0]
  4072ba:	4c46      	ldr	r4, [pc, #280]	; (4073d4 <task_control_loop+0x170>)
  4072bc:	47a0      	blx	r4
			if(xStatus == pdPASS)
  4072be:	2801      	cmp	r0, #1
  4072c0:	d108      	bne.n	4072d4 <task_control_loop+0x70>
			{
				vTaskSetTimeOutState( &xSettingsTime );
  4072c2:	a80a      	add	r0, sp, #40	; 0x28
  4072c4:	4b3c      	ldr	r3, [pc, #240]	; (4073b8 <task_control_loop+0x154>)
  4072c6:	4798      	blx	r3
				xSettingsTImeToWait = xSettingsValidTicks;
  4072c8:	f242 7310 	movw	r3, #10000	; 0x2710
  4072cc:	9306      	str	r3, [sp, #24]
				check_for_settings = -1;
  4072ce:	f04f 33ff 	mov.w	r3, #4294967295
  4072d2:	9304      	str	r3, [sp, #16]
			}
		}
		
		/* Read Control input */
		if(read_control_input > 0) {
  4072d4:	9b03      	ldr	r3, [sp, #12]
  4072d6:	2b00      	cmp	r3, #0
  4072d8:	dd1e      	ble.n	407318 <task_control_loop+0xb4>
			xStatus = xQueueReceive(xControl_Msg_Queue_handle, control_buf, 0);
  4072da:	2300      	movs	r3, #0
  4072dc:	461a      	mov	r2, r3
  4072de:	a90d      	add	r1, sp, #52	; 0x34
  4072e0:	483d      	ldr	r0, [pc, #244]	; (4073d8 <task_control_loop+0x174>)
  4072e2:	6800      	ldr	r0, [r0, #0]
  4072e4:	4c3b      	ldr	r4, [pc, #236]	; (4073d4 <task_control_loop+0x170>)
  4072e6:	47a0      	blx	r4
			if(xStatus == pdPASS)
  4072e8:	2801      	cmp	r0, #1
  4072ea:	d109      	bne.n	407300 <task_control_loop+0x9c>
			{
				vTaskSetTimeOutState( &xInputTIme );
  4072ec:	a808      	add	r0, sp, #32
  4072ee:	4b32      	ldr	r3, [pc, #200]	; (4073b8 <task_control_loop+0x154>)
  4072f0:	4798      	blx	r3
				xInputTimeToWait = xInputValidTicks;
  4072f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4072f6:	9307      	str	r3, [sp, #28]
				read_control_input = -1;
  4072f8:	f04f 33ff 	mov.w	r3, #4294967295
  4072fc:	9303      	str	r3, [sp, #12]
  4072fe:	e00b      	b.n	407318 <task_control_loop+0xb4>
			} else {
				// Could not read control input. Set input to zero.
				control_buf[POW] = 0;
  407300:	2400      	movs	r4, #0
  407302:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
				control_buf[ANG] = 0;
  407306:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
				vTaskSetTimeOutState( &xInputTIme );
  40730a:	a808      	add	r0, sp, #32
  40730c:	4b2a      	ldr	r3, [pc, #168]	; (4073b8 <task_control_loop+0x154>)
  40730e:	4798      	blx	r3
				xInputTimeToWait = xNoInputTicks;
  407310:	9407      	str	r4, [sp, #28]
				read_control_input = -1;
  407312:	f04f 33ff 	mov.w	r3, #4294967295
  407316:	9303      	str	r3, [sp, #12]
		}
		
		while(1) {
#ifdef XY_COORDS_INPUT
			// Calculate propeller speed as magnitude of input vector
			uint8_t propeller_speed = sqrt(pow(control_buf[X_COORD],2) + pow(control_buf[Y_COORD],2));
  407318:	4c30      	ldr	r4, [pc, #192]	; (4073dc <task_control_loop+0x178>)
  40731a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
  40731e:	b240      	sxtb	r0, r0
  407320:	47b8      	blx	r7
  407322:	4682      	mov	sl, r0
  407324:	468b      	mov	fp, r1
  407326:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
  40732a:	b240      	sxtb	r0, r0
  40732c:	47b8      	blx	r7
  40732e:	4680      	mov	r8, r0
  407330:	4689      	mov	r9, r1
  407332:	4652      	mov	r2, sl
  407334:	465b      	mov	r3, fp
  407336:	4650      	mov	r0, sl
  407338:	4659      	mov	r1, fp
  40733a:	47b0      	blx	r6
  40733c:	e9cd 0100 	strd	r0, r1, [sp]
  407340:	4652      	mov	r2, sl
  407342:	465b      	mov	r3, fp
  407344:	4650      	mov	r0, sl
  407346:	4659      	mov	r1, fp
  407348:	47b0      	blx	r6
  40734a:	4682      	mov	sl, r0
  40734c:	468b      	mov	fp, r1
  40734e:	4642      	mov	r2, r8
  407350:	464b      	mov	r3, r9
  407352:	4640      	mov	r0, r8
  407354:	4649      	mov	r1, r9
  407356:	47b0      	blx	r6
  407358:	4602      	mov	r2, r0
  40735a:	460b      	mov	r3, r1
  40735c:	4650      	mov	r0, sl
  40735e:	4659      	mov	r1, fp
  407360:	47a0      	blx	r4
  407362:	4b1f      	ldr	r3, [pc, #124]	; (4073e0 <task_control_loop+0x17c>)
  407364:	4798      	blx	r3
			propeller_motor1_set_speed(propeller_speed);
  407366:	4b1f      	ldr	r3, [pc, #124]	; (4073e4 <task_control_loop+0x180>)
  407368:	4798      	blx	r3
  40736a:	b2c0      	uxtb	r0, r0
  40736c:	4b1e      	ldr	r3, [pc, #120]	; (4073e8 <task_control_loop+0x184>)
  40736e:	4798      	blx	r3
			
			// Determine rotor positions from X,Y-coordinates
			int16_t inner_rotor_deg = INNER_SERVO_OFFSET + control_buf[X_COORD];
  407370:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
  407374:	b240      	sxtb	r0, r0
  407376:	305a      	adds	r0, #90	; 0x5a
  407378:	b200      	sxth	r0, r0
			if(inner_rotor_deg < 0)
				inner_rotor_deg = 0;
				
			int16_t outer_rotor_deg = OUTER_SERVO_OFFSET + control_buf[Y_COORD];
  40737a:	f89d 8035 	ldrb.w	r8, [sp, #53]	; 0x35
  40737e:	fa4f f888 	sxtb.w	r8, r8
  407382:	f108 085a 	add.w	r8, r8, #90	; 0x5a
  407386:	fa0f f888 	sxth.w	r8, r8
			if(outer_rotor_deg < 0)
				outer_rotor_deg = 0;
			servos_propeller1_inner_set_position((uint8_t) inner_rotor_deg);
  40738a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  40738e:	b2c0      	uxtb	r0, r0
  407390:	4b16      	ldr	r3, [pc, #88]	; (4073ec <task_control_loop+0x188>)
  407392:	4798      	blx	r3
			servos_propeller1_outer_set_position((uint8_t) outer_rotor_deg);							
  407394:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
  407398:	b2c0      	uxtb	r0, r0
  40739a:	4b15      	ldr	r3, [pc, #84]	; (4073f0 <task_control_loop+0x18c>)
  40739c:	4798      	blx	r3
			// Determine x,y from hypotenuse and angle
			
#endif
			
			// Check for settings validity
			if( xTaskCheckForTimeOut( &xSettingsTime, &xSettingsTImeToWait ) != pdFALSE ) {
  40739e:	a906      	add	r1, sp, #24
  4073a0:	a80a      	add	r0, sp, #40	; 0x28
  4073a2:	47a8      	blx	r5
  4073a4:	2800      	cmp	r0, #0
  4073a6:	f47f af7e 	bne.w	4072a6 <task_control_loop+0x42>
				check_for_settings = 1;
				break;
			}
			
			// Check for input validity
			if( xTaskCheckForTimeOut( &xInputTIme, &xInputTimeToWait ) != pdFALSE ) {
  4073aa:	a907      	add	r1, sp, #28
  4073ac:	a808      	add	r0, sp, #32
  4073ae:	47a8      	blx	r5
  4073b0:	2800      	cmp	r0, #0
  4073b2:	d0b2      	beq.n	40731a <task_control_loop+0xb6>
  4073b4:	e773      	b.n	40729e <task_control_loop+0x3a>
  4073b6:	bf00      	nop
  4073b8:	00406c51 	.word	0x00406c51
  4073bc:	004014fd 	.word	0x004014fd
  4073c0:	004020d9 	.word	0x004020d9
  4073c4:	00407cc1 	.word	0x00407cc1
  4073c8:	00407d8d 	.word	0x00407d8d
  4073cc:	00406c79 	.word	0x00406c79
  4073d0:	2000bdbc 	.word	0x2000bdbc
  4073d4:	004062f9 	.word	0x004062f9
  4073d8:	2000bdc4 	.word	0x2000bdc4
  4073dc:	00407a29 	.word	0x00407a29
  4073e0:	004077e1 	.word	0x004077e1
  4073e4:	004082ed 	.word	0x004082ed
  4073e8:	00401545 	.word	0x00401545
  4073ec:	004020f1 	.word	0x004020f1
  4073f0:	00402151 	.word	0x00402151

004073f4 <task_winc>:
		vTaskDelay(TASK_LED_DELAY);
	}
}

static void task_winc(void *pvParameters)
{
  4073f4:	b570      	push	{r4, r5, r6, lr}
  4073f6:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
	UNUSED(pvParameters);
	
	/* Read persisted settings from non-volatile memory 
	 *
	 * Must be executed after FreeFRTOS scheduler has been started. */
	printf("-I- Restoring settings from non-volatile memory...\r\n");
  4073fa:	482b      	ldr	r0, [pc, #172]	; (4074a8 <task_winc+0xb4>)
  4073fc:	4b2b      	ldr	r3, [pc, #172]	; (4074ac <task_winc+0xb8>)
  4073fe:	4798      	blx	r3
	uint8_t buf[PAGE_SIZE];
	int16_t ret = nand_flash_storage_read(buf);
  407400:	4668      	mov	r0, sp
  407402:	4b2b      	ldr	r3, [pc, #172]	; (4074b0 <task_winc+0xbc>)
  407404:	4798      	blx	r3
	if(ret > 0)
  407406:	2800      	cmp	r0, #0
  407408:	dd30      	ble.n	40746c <task_winc+0x78>
	{
		/* Clear non-data bits */
		memset(buf+ret,0,PAGE_SIZE-ret);
  40740a:	f5c0 6200 	rsb	r2, r0, #2048	; 0x800
  40740e:	2100      	movs	r1, #0
  407410:	4468      	add	r0, sp
  407412:	4b28      	ldr	r3, [pc, #160]	; (4074b4 <task_winc+0xc0>)
  407414:	4798      	blx	r3
		int8_t ret = network_message_handler(buf);
  407416:	4668      	mov	r0, sp
  407418:	4b27      	ldr	r3, [pc, #156]	; (4074b8 <task_winc+0xc4>)
  40741a:	4798      	blx	r3
		if(ret == PARSER_SUCCESS) {
  40741c:	b918      	cbnz	r0, 407426 <task_winc+0x32>
			printf("-I- Settings successfully restored\r\n");
  40741e:	4827      	ldr	r0, [pc, #156]	; (4074bc <task_winc+0xc8>)
  407420:	4b22      	ldr	r3, [pc, #136]	; (4074ac <task_winc+0xb8>)
  407422:	4798      	blx	r3
  407424:	e031      	b.n	40748a <task_winc+0x96>
		} else if (ret == PARSER_ERROR) {
  407426:	f1b0 3fff 	cmp.w	r0, #4294967295
  40742a:	d10f      	bne.n	40744c <task_winc+0x58>
			iPower_save_mode = DEFAULT_POWER_SAVE_MODE;
  40742c:	23ff      	movs	r3, #255	; 0xff
  40742e:	4a24      	ldr	r2, [pc, #144]	; (4074c0 <task_winc+0xcc>)
  407430:	7013      	strb	r3, [r2, #0]
			iAssisted_drive_mode = DEFAULT_ASSISTED_DRIVE_MODE;
  407432:	4a24      	ldr	r2, [pc, #144]	; (4074c4 <task_winc+0xd0>)
  407434:	7013      	strb	r3, [r2, #0]
			uiVideo_quality = DEFAULT_VIDEO_QUALITY;
  407436:	2201      	movs	r2, #1
  407438:	4b23      	ldr	r3, [pc, #140]	; (4074c8 <task_winc+0xd4>)
  40743a:	701a      	strb	r2, [r3, #0]
			
			ret = apply_default_settings();
  40743c:	4b23      	ldr	r3, [pc, #140]	; (4074cc <task_winc+0xd8>)
  40743e:	4798      	blx	r3
			if(ret != PARSER_SUCCESS)
  407440:	b100      	cbz	r0, 407444 <task_winc+0x50>
  407442:	e7fe      	b.n	407442 <task_winc+0x4e>
				while(1) {
				}
			printf("-I- No settings found. Default settings applied.\r\n");
  407444:	4822      	ldr	r0, [pc, #136]	; (4074d0 <task_winc+0xdc>)
  407446:	4b19      	ldr	r3, [pc, #100]	; (4074ac <task_winc+0xb8>)
  407448:	4798      	blx	r3
  40744a:	e01e      	b.n	40748a <task_winc+0x96>
		} else {
			iPower_save_mode = DEFAULT_POWER_SAVE_MODE;
  40744c:	23ff      	movs	r3, #255	; 0xff
  40744e:	4a1c      	ldr	r2, [pc, #112]	; (4074c0 <task_winc+0xcc>)
  407450:	7013      	strb	r3, [r2, #0]
			iAssisted_drive_mode = DEFAULT_ASSISTED_DRIVE_MODE;
  407452:	4a1c      	ldr	r2, [pc, #112]	; (4074c4 <task_winc+0xd0>)
  407454:	7013      	strb	r3, [r2, #0]
			uiVideo_quality = DEFAULT_VIDEO_QUALITY;
  407456:	2201      	movs	r2, #1
  407458:	4b1b      	ldr	r3, [pc, #108]	; (4074c8 <task_winc+0xd4>)
  40745a:	701a      	strb	r2, [r3, #0]
			
			ret = apply_default_settings();
  40745c:	4b1b      	ldr	r3, [pc, #108]	; (4074cc <task_winc+0xd8>)
  40745e:	4798      	blx	r3
				if(ret != PARSER_SUCCESS)
  407460:	b100      	cbz	r0, 407464 <task_winc+0x70>
  407462:	e7fe      	b.n	407462 <task_winc+0x6e>
					while(1) {
					}
			printf("-E- Error restoring settings. Default settings applied.\r\n");
  407464:	481b      	ldr	r0, [pc, #108]	; (4074d4 <task_winc+0xe0>)
  407466:	4b11      	ldr	r3, [pc, #68]	; (4074ac <task_winc+0xb8>)
  407468:	4798      	blx	r3
  40746a:	e00e      	b.n	40748a <task_winc+0x96>
		}
	} else {
		iPower_save_mode = DEFAULT_POWER_SAVE_MODE;
  40746c:	23ff      	movs	r3, #255	; 0xff
  40746e:	4a14      	ldr	r2, [pc, #80]	; (4074c0 <task_winc+0xcc>)
  407470:	7013      	strb	r3, [r2, #0]
		iAssisted_drive_mode = DEFAULT_ASSISTED_DRIVE_MODE;
  407472:	4a14      	ldr	r2, [pc, #80]	; (4074c4 <task_winc+0xd0>)
  407474:	7013      	strb	r3, [r2, #0]
		uiVideo_quality = DEFAULT_VIDEO_QUALITY;
  407476:	2201      	movs	r2, #1
  407478:	4b13      	ldr	r3, [pc, #76]	; (4074c8 <task_winc+0xd4>)
  40747a:	701a      	strb	r2, [r3, #0]
		
		ret = apply_default_settings();
  40747c:	4b13      	ldr	r3, [pc, #76]	; (4074cc <task_winc+0xd8>)
  40747e:	4798      	blx	r3
			if(ret != PARSER_SUCCESS)
  407480:	b100      	cbz	r0, 407484 <task_winc+0x90>
  407482:	e7fe      	b.n	407482 <task_winc+0x8e>
				while(1) {
				}
		printf("-E- Error retrieving settings. Default settings applied.\r\n");
  407484:	4814      	ldr	r0, [pc, #80]	; (4074d8 <task_winc+0xe4>)
  407486:	4b09      	ldr	r3, [pc, #36]	; (4074ac <task_winc+0xb8>)
  407488:	4798      	blx	r3
	}
		
	/* Start Wi-Fi P2P mode */
	wifi_p2p_start();
  40748a:	4b14      	ldr	r3, [pc, #80]	; (4074dc <task_winc+0xe8>)
  40748c:	4798      	blx	r3
		
	for(;;) {
		xSemaphoreTake(xWINC_Semaphore_handle, portMAX_DELAY);
  40748e:	4e14      	ldr	r6, [pc, #80]	; (4074e0 <task_winc+0xec>)
  407490:	2400      	movs	r4, #0
  407492:	4d14      	ldr	r5, [pc, #80]	; (4074e4 <task_winc+0xf0>)
  407494:	4623      	mov	r3, r4
  407496:	f04f 32ff 	mov.w	r2, #4294967295
  40749a:	4621      	mov	r1, r4
  40749c:	6830      	ldr	r0, [r6, #0]
  40749e:	47a8      	blx	r5
		m2m_wifi_handle_events(NULL);
  4074a0:	4620      	mov	r0, r4
  4074a2:	4b11      	ldr	r3, [pc, #68]	; (4074e8 <task_winc+0xf4>)
  4074a4:	4798      	blx	r3
  4074a6:	e7f5      	b.n	407494 <task_winc+0xa0>
  4074a8:	004129f0 	.word	0x004129f0
  4074ac:	00408a5d 	.word	0x00408a5d
  4074b0:	00400bf5 	.word	0x00400bf5
  4074b4:	00409149 	.word	0x00409149
  4074b8:	00401581 	.word	0x00401581
  4074bc:	00412a28 	.word	0x00412a28
  4074c0:	2000bdcc 	.word	0x2000bdcc
  4074c4:	2000bdfc 	.word	0x2000bdfc
  4074c8:	2000bdb8 	.word	0x2000bdb8
  4074cc:	00401d69 	.word	0x00401d69
  4074d0:	00412a50 	.word	0x00412a50
  4074d4:	00412a84 	.word	0x00412a84
  4074d8:	00412ac0 	.word	0x00412ac0
  4074dc:	00401429 	.word	0x00401429
  4074e0:	2000bdc0 	.word	0x2000bdc0
  4074e4:	004062f9 	.word	0x004062f9
  4074e8:	004030b5 	.word	0x004030b5

004074ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074ee:	b083      	sub	sp, #12
  4074f0:	4605      	mov	r5, r0
  4074f2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4074f4:	2300      	movs	r3, #0
  4074f6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4074f8:	4b18      	ldr	r3, [pc, #96]	; (40755c <usart_serial_getchar+0x70>)
  4074fa:	4298      	cmp	r0, r3
  4074fc:	d107      	bne.n	40750e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  4074fe:	461f      	mov	r7, r3
  407500:	4e17      	ldr	r6, [pc, #92]	; (407560 <usart_serial_getchar+0x74>)
  407502:	4621      	mov	r1, r4
  407504:	4638      	mov	r0, r7
  407506:	47b0      	blx	r6
  407508:	2800      	cmp	r0, #0
  40750a:	d1fa      	bne.n	407502 <usart_serial_getchar+0x16>
  40750c:	e017      	b.n	40753e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40750e:	4b15      	ldr	r3, [pc, #84]	; (407564 <usart_serial_getchar+0x78>)
  407510:	4298      	cmp	r0, r3
  407512:	d107      	bne.n	407524 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  407514:	461e      	mov	r6, r3
  407516:	4d12      	ldr	r5, [pc, #72]	; (407560 <usart_serial_getchar+0x74>)
  407518:	4621      	mov	r1, r4
  40751a:	4630      	mov	r0, r6
  40751c:	47a8      	blx	r5
  40751e:	2800      	cmp	r0, #0
  407520:	d1fa      	bne.n	407518 <usart_serial_getchar+0x2c>
  407522:	e018      	b.n	407556 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407524:	4b10      	ldr	r3, [pc, #64]	; (407568 <usart_serial_getchar+0x7c>)
  407526:	4298      	cmp	r0, r3
  407528:	d109      	bne.n	40753e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40752a:	461e      	mov	r6, r3
  40752c:	4d0f      	ldr	r5, [pc, #60]	; (40756c <usart_serial_getchar+0x80>)
  40752e:	a901      	add	r1, sp, #4
  407530:	4630      	mov	r0, r6
  407532:	47a8      	blx	r5
  407534:	2800      	cmp	r0, #0
  407536:	d1fa      	bne.n	40752e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  407538:	9b01      	ldr	r3, [sp, #4]
  40753a:	7023      	strb	r3, [r4, #0]
  40753c:	e00b      	b.n	407556 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40753e:	4b0c      	ldr	r3, [pc, #48]	; (407570 <usart_serial_getchar+0x84>)
  407540:	429d      	cmp	r5, r3
  407542:	d108      	bne.n	407556 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  407544:	461e      	mov	r6, r3
  407546:	4d09      	ldr	r5, [pc, #36]	; (40756c <usart_serial_getchar+0x80>)
  407548:	a901      	add	r1, sp, #4
  40754a:	4630      	mov	r0, r6
  40754c:	47a8      	blx	r5
  40754e:	2800      	cmp	r0, #0
  407550:	d1fa      	bne.n	407548 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  407552:	9b01      	ldr	r3, [sp, #4]
  407554:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  407556:	b003      	add	sp, #12
  407558:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40755a:	bf00      	nop
  40755c:	400e0600 	.word	0x400e0600
  407560:	004050c1 	.word	0x004050c1
  407564:	400e0800 	.word	0x400e0800
  407568:	40024000 	.word	0x40024000
  40756c:	00405011 	.word	0x00405011
  407570:	40028000 	.word	0x40028000

00407574 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  407574:	b570      	push	{r4, r5, r6, lr}
  407576:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407578:	4b18      	ldr	r3, [pc, #96]	; (4075dc <usart_serial_putchar+0x68>)
  40757a:	4298      	cmp	r0, r3
  40757c:	d108      	bne.n	407590 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40757e:	461e      	mov	r6, r3
  407580:	4d17      	ldr	r5, [pc, #92]	; (4075e0 <usart_serial_putchar+0x6c>)
  407582:	4621      	mov	r1, r4
  407584:	4630      	mov	r0, r6
  407586:	47a8      	blx	r5
  407588:	2800      	cmp	r0, #0
  40758a:	d1fa      	bne.n	407582 <usart_serial_putchar+0xe>
		return 1;
  40758c:	2001      	movs	r0, #1
  40758e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  407590:	4b14      	ldr	r3, [pc, #80]	; (4075e4 <usart_serial_putchar+0x70>)
  407592:	4298      	cmp	r0, r3
  407594:	d108      	bne.n	4075a8 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  407596:	461e      	mov	r6, r3
  407598:	4d11      	ldr	r5, [pc, #68]	; (4075e0 <usart_serial_putchar+0x6c>)
  40759a:	4621      	mov	r1, r4
  40759c:	4630      	mov	r0, r6
  40759e:	47a8      	blx	r5
  4075a0:	2800      	cmp	r0, #0
  4075a2:	d1fa      	bne.n	40759a <usart_serial_putchar+0x26>
		return 1;
  4075a4:	2001      	movs	r0, #1
  4075a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4075a8:	4b0f      	ldr	r3, [pc, #60]	; (4075e8 <usart_serial_putchar+0x74>)
  4075aa:	4298      	cmp	r0, r3
  4075ac:	d108      	bne.n	4075c0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4075ae:	461e      	mov	r6, r3
  4075b0:	4d0e      	ldr	r5, [pc, #56]	; (4075ec <usart_serial_putchar+0x78>)
  4075b2:	4621      	mov	r1, r4
  4075b4:	4630      	mov	r0, r6
  4075b6:	47a8      	blx	r5
  4075b8:	2800      	cmp	r0, #0
  4075ba:	d1fa      	bne.n	4075b2 <usart_serial_putchar+0x3e>
		return 1;
  4075bc:	2001      	movs	r0, #1
  4075be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4075c0:	4b0b      	ldr	r3, [pc, #44]	; (4075f0 <usart_serial_putchar+0x7c>)
  4075c2:	4298      	cmp	r0, r3
  4075c4:	d108      	bne.n	4075d8 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4075c6:	461e      	mov	r6, r3
  4075c8:	4d08      	ldr	r5, [pc, #32]	; (4075ec <usart_serial_putchar+0x78>)
  4075ca:	4621      	mov	r1, r4
  4075cc:	4630      	mov	r0, r6
  4075ce:	47a8      	blx	r5
  4075d0:	2800      	cmp	r0, #0
  4075d2:	d1fa      	bne.n	4075ca <usart_serial_putchar+0x56>
		return 1;
  4075d4:	2001      	movs	r0, #1
  4075d6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4075d8:	2000      	movs	r0, #0
}
  4075da:	bd70      	pop	{r4, r5, r6, pc}
  4075dc:	400e0600 	.word	0x400e0600
  4075e0:	004050b1 	.word	0x004050b1
  4075e4:	400e0800 	.word	0x400e0800
  4075e8:	40024000 	.word	0x40024000
  4075ec:	00404ffd 	.word	0x00404ffd
  4075f0:	40028000 	.word	0x40028000

004075f4 <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  4075f4:	b508      	push	{r3, lr}
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  4075f6:	4b02      	ldr	r3, [pc, #8]	; (407600 <vApplicationMallocFailedHook+0xc>)
  4075f8:	4798      	blx	r3
  4075fa:	bf00      	nop
  4075fc:	e7fd      	b.n	4075fa <vApplicationMallocFailedHook+0x6>
  4075fe:	bf00      	nop
  407600:	00405cf5 	.word	0x00405cf5

00407604 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main (void)
{
  407604:	b500      	push	{lr}
  407606:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  407608:	4b4b      	ldr	r3, [pc, #300]	; (407738 <main+0x134>)
  40760a:	4798      	blx	r3
	board_init();
  40760c:	4b4b      	ldr	r3, [pc, #300]	; (40773c <main+0x138>)
  40760e:	4798      	blx	r3
  407610:	2009      	movs	r0, #9
  407612:	4d4b      	ldr	r5, [pc, #300]	; (407740 <main+0x13c>)
  407614:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  407616:	4c4b      	ldr	r4, [pc, #300]	; (407744 <main+0x140>)
  407618:	4b4b      	ldr	r3, [pc, #300]	; (407748 <main+0x144>)
  40761a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40761c:	4a4b      	ldr	r2, [pc, #300]	; (40774c <main+0x148>)
  40761e:	4b4c      	ldr	r3, [pc, #304]	; (407750 <main+0x14c>)
  407620:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  407622:	4a4c      	ldr	r2, [pc, #304]	; (407754 <main+0x150>)
  407624:	4b4c      	ldr	r3, [pc, #304]	; (407758 <main+0x154>)
  407626:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  407628:	4b4c      	ldr	r3, [pc, #304]	; (40775c <main+0x158>)
  40762a:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  40762c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  407630:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  407632:	f44f 6300 	mov.w	r3, #2048	; 0x800
  407636:	9307      	str	r3, [sp, #28]
  407638:	2009      	movs	r0, #9
  40763a:	47a8      	blx	r5
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40763c:	a905      	add	r1, sp, #20
  40763e:	4620      	mov	r0, r4
  407640:	4b47      	ldr	r3, [pc, #284]	; (407760 <main+0x15c>)
  407642:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  407644:	4d47      	ldr	r5, [pc, #284]	; (407764 <main+0x160>)
  407646:	682b      	ldr	r3, [r5, #0]
  407648:	2100      	movs	r1, #0
  40764a:	6898      	ldr	r0, [r3, #8]
  40764c:	4c46      	ldr	r4, [pc, #280]	; (407768 <main+0x164>)
  40764e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  407650:	682b      	ldr	r3, [r5, #0]
  407652:	2100      	movs	r1, #0
  407654:	6858      	ldr	r0, [r3, #4]
  407656:	47a0      	blx	r4

	/* Insert application code here, after the board has been initialized. */
	
	configure_console();
	printf(STRING_HEADER);
  407658:	4844      	ldr	r0, [pc, #272]	; (40776c <main+0x168>)
  40765a:	4b45      	ldr	r3, [pc, #276]	; (407770 <main+0x16c>)
  40765c:	4798      	blx	r3
	
	/* Initialize non-volatile memory */
	nand_flash_storage_init();
  40765e:	4b45      	ldr	r3, [pc, #276]	; (407774 <main+0x170>)
  407660:	4798      	blx	r3
	
#ifdef FREE_RTOS_LED_BLINKER_TASK
	/* Create LED task */
	if(xTaskCreate(task_led, "LED Task", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  407662:	2300      	movs	r3, #0
  407664:	9303      	str	r3, [sp, #12]
  407666:	9302      	str	r3, [sp, #8]
  407668:	9301      	str	r3, [sp, #4]
  40766a:	9300      	str	r3, [sp, #0]
  40766c:	f44f 7280 	mov.w	r2, #256	; 0x100
  407670:	4941      	ldr	r1, [pc, #260]	; (407778 <main+0x174>)
  407672:	4842      	ldr	r0, [pc, #264]	; (40777c <main+0x178>)
  407674:	4c42      	ldr	r4, [pc, #264]	; (407780 <main+0x17c>)
  407676:	47a0      	blx	r4
  407678:	2801      	cmp	r0, #1
		printf("-E- Failed to create LED Task"STRING_EOL);
  40767a:	bf14      	ite	ne
  40767c:	4841      	ldrne	r0, [pc, #260]	; (407784 <main+0x180>)
	} else {
		printf("-I- Created LED Task"STRING_EOL);
  40767e:	4842      	ldreq	r0, [pc, #264]	; (407788 <main+0x184>)
  407680:	4b3b      	ldr	r3, [pc, #236]	; (407770 <main+0x16c>)
  407682:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_WINC_TASK
	/* Initialize the BSP. */
	nm_bsp_init();
  407684:	4b41      	ldr	r3, [pc, #260]	; (40778c <main+0x188>)
  407686:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	wifi_init();
  407688:	4b41      	ldr	r3, [pc, #260]	; (407790 <main+0x18c>)
  40768a:	4798      	blx	r3
	
	vSemaphoreCreateBinary(xWINC_Semaphore_handle);
  40768c:	2203      	movs	r2, #3
  40768e:	2100      	movs	r1, #0
  407690:	2001      	movs	r0, #1
  407692:	4b40      	ldr	r3, [pc, #256]	; (407794 <main+0x190>)
  407694:	4798      	blx	r3
  407696:	4b40      	ldr	r3, [pc, #256]	; (407798 <main+0x194>)
  407698:	6018      	str	r0, [r3, #0]
  40769a:	b120      	cbz	r0, 4076a6 <main+0xa2>
  40769c:	2300      	movs	r3, #0
  40769e:	461a      	mov	r2, r3
  4076a0:	4619      	mov	r1, r3
  4076a2:	4c3e      	ldr	r4, [pc, #248]	; (40779c <main+0x198>)
  4076a4:	47a0      	blx	r4
	xControl_Msg_Queue_handle = xQueueCreate(CONTROL_MSG_QUEUE_LENGTH, CONTROL_MSG_QUEUE_ITEM_SIZE);
  4076a6:	2200      	movs	r2, #0
  4076a8:	2102      	movs	r1, #2
  4076aa:	2001      	movs	r0, #1
  4076ac:	4c39      	ldr	r4, [pc, #228]	; (407794 <main+0x190>)
  4076ae:	47a0      	blx	r4
  4076b0:	4b3b      	ldr	r3, [pc, #236]	; (4077a0 <main+0x19c>)
  4076b2:	6018      	str	r0, [r3, #0]
	xSettings_Msg_Queue_handle = xQueueCreate(SETTINGS_MSG_QUEUE_LENGTH,SETTINGS_MSG_QUEUE_ITEM_SIZE);
  4076b4:	2200      	movs	r2, #0
  4076b6:	2103      	movs	r1, #3
  4076b8:	2001      	movs	r0, #1
  4076ba:	47a0      	blx	r4
  4076bc:	4b39      	ldr	r3, [pc, #228]	; (4077a4 <main+0x1a0>)
  4076be:	6018      	str	r0, [r3, #0]
	xName_Queue_handle = xQueueCreate(NAME_QUEUE_LENGTH,NAME_QUEUE_ITEM_SIZE);
  4076c0:	2200      	movs	r2, #0
  4076c2:	211f      	movs	r1, #31
  4076c4:	2001      	movs	r0, #1
  4076c6:	47a0      	blx	r4
  4076c8:	4b37      	ldr	r3, [pc, #220]	; (4077a8 <main+0x1a4>)
  4076ca:	6018      	str	r0, [r3, #0]
	
	/* Create WINC task */
	if (xTaskCreate(task_winc, "WINC Task", TASK_WINC_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS )
  4076cc:	2300      	movs	r3, #0
  4076ce:	9303      	str	r3, [sp, #12]
  4076d0:	9302      	str	r3, [sp, #8]
  4076d2:	9301      	str	r3, [sp, #4]
  4076d4:	9300      	str	r3, [sp, #0]
  4076d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4076da:	4934      	ldr	r1, [pc, #208]	; (4077ac <main+0x1a8>)
  4076dc:	4834      	ldr	r0, [pc, #208]	; (4077b0 <main+0x1ac>)
  4076de:	4c28      	ldr	r4, [pc, #160]	; (407780 <main+0x17c>)
  4076e0:	47a0      	blx	r4
  4076e2:	2801      	cmp	r0, #1
	{
		printf("-E- Failed to create WINC Task"STRING_EOL);
  4076e4:	bf14      	ite	ne
  4076e6:	4833      	ldrne	r0, [pc, #204]	; (4077b4 <main+0x1b0>)
	} 
	else
	{
		printf("-I- Created WINC Task"STRING_EOL);
  4076e8:	4833      	ldreq	r0, [pc, #204]	; (4077b8 <main+0x1b4>)
  4076ea:	4b21      	ldr	r3, [pc, #132]	; (407770 <main+0x16c>)
  4076ec:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_CONTROL_LOOP_TASK
	if (xTaskCreate(task_control_loop, "Control Loop Task", TASK_CONTROL_LOOP_STACK_SIZE, NULL, TASK_CONTROL_LOOP_PRIORITY, NULL) != pdPASS )
  4076ee:	2300      	movs	r3, #0
  4076f0:	9303      	str	r3, [sp, #12]
  4076f2:	9302      	str	r3, [sp, #8]
  4076f4:	9301      	str	r3, [sp, #4]
  4076f6:	9300      	str	r3, [sp, #0]
  4076f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4076fc:	492f      	ldr	r1, [pc, #188]	; (4077bc <main+0x1b8>)
  4076fe:	4830      	ldr	r0, [pc, #192]	; (4077c0 <main+0x1bc>)
  407700:	4c1f      	ldr	r4, [pc, #124]	; (407780 <main+0x17c>)
  407702:	47a0      	blx	r4
  407704:	2801      	cmp	r0, #1
	{
		printf("-E- Failed to create Control Loop Task"STRING_EOL);
  407706:	bf14      	ite	ne
  407708:	482e      	ldrne	r0, [pc, #184]	; (4077c4 <main+0x1c0>)
	} 
	else
	{
		printf("-I- Created Control Loop Task"STRING_EOL);
  40770a:	482f      	ldreq	r0, [pc, #188]	; (4077c8 <main+0x1c4>)
  40770c:	4b18      	ldr	r3, [pc, #96]	; (407770 <main+0x16c>)
  40770e:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_SEND_STATUS_TASK
	if (xTaskCreate(task_send_status, "Send Status Task", TASK_SEND_STATUS_SIZE, NULL, TASK_SEND_STATUS_PRIORITY, NULL) != pdPASS )
  407710:	2300      	movs	r3, #0
  407712:	9303      	str	r3, [sp, #12]
  407714:	9302      	str	r3, [sp, #8]
  407716:	9301      	str	r3, [sp, #4]
  407718:	9300      	str	r3, [sp, #0]
  40771a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40771e:	492b      	ldr	r1, [pc, #172]	; (4077cc <main+0x1c8>)
  407720:	482b      	ldr	r0, [pc, #172]	; (4077d0 <main+0x1cc>)
  407722:	4c17      	ldr	r4, [pc, #92]	; (407780 <main+0x17c>)
  407724:	47a0      	blx	r4
  407726:	2801      	cmp	r0, #1
	{
		printf("-E- Failed to create Send Status Task"STRING_EOL);
  407728:	bf14      	ite	ne
  40772a:	482a      	ldrne	r0, [pc, #168]	; (4077d4 <main+0x1d0>)
	}
	else
	{
		printf("-I- Created Send Status Task"STRING_EOL);
  40772c:	482a      	ldreq	r0, [pc, #168]	; (4077d8 <main+0x1d4>)
  40772e:	4b10      	ldr	r3, [pc, #64]	; (407770 <main+0x16c>)
  407730:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_SCHEDULER
	vTaskStartScheduler();	
  407732:	4b2a      	ldr	r3, [pc, #168]	; (4077dc <main+0x1d8>)
  407734:	4798      	blx	r3
  407736:	e7fe      	b.n	407736 <main+0x132>
  407738:	004050d5 	.word	0x004050d5
  40773c:	00405139 	.word	0x00405139
  407740:	004058d9 	.word	0x004058d9
  407744:	400e0800 	.word	0x400e0800
  407748:	2000bf00 	.word	0x2000bf00
  40774c:	00407575 	.word	0x00407575
  407750:	2000befc 	.word	0x2000befc
  407754:	004074ed 	.word	0x004074ed
  407758:	2000bef8 	.word	0x2000bef8
  40775c:	07270e00 	.word	0x07270e00
  407760:	00405079 	.word	0x00405079
  407764:	20000458 	.word	0x20000458
  407768:	00409211 	.word	0x00409211
  40776c:	00412b14 	.word	0x00412b14
  407770:	00408a5d 	.word	0x00408a5d
  407774:	00400a05 	.word	0x00400a05
  407778:	00412b80 	.word	0x00412b80
  40777c:	00407171 	.word	0x00407171
  407780:	004064f9 	.word	0x004064f9
  407784:	00412b8c 	.word	0x00412b8c
  407788:	00412bac 	.word	0x00412bac
  40778c:	00402219 	.word	0x00402219
  407790:	004013ed 	.word	0x004013ed
  407794:	004060f1 	.word	0x004060f1
  407798:	2000bdc0 	.word	0x2000bdc0
  40779c:	00406149 	.word	0x00406149
  4077a0:	2000bdc4 	.word	0x2000bdc4
  4077a4:	2000bdbc 	.word	0x2000bdbc
  4077a8:	2000bdac 	.word	0x2000bdac
  4077ac:	00412bc4 	.word	0x00412bc4
  4077b0:	004073f5 	.word	0x004073f5
  4077b4:	00412bd0 	.word	0x00412bd0
  4077b8:	00412bf4 	.word	0x00412bf4
  4077bc:	00412c0c 	.word	0x00412c0c
  4077c0:	00407265 	.word	0x00407265
  4077c4:	00412c20 	.word	0x00412c20
  4077c8:	00412c4c 	.word	0x00412c4c
  4077cc:	00412c6c 	.word	0x00412c6c
  4077d0:	00407199 	.word	0x00407199
  4077d4:	00412c80 	.word	0x00412c80
  4077d8:	00412ca8 	.word	0x00412ca8
  4077dc:	004066fd 	.word	0x004066fd

004077e0 <sqrt>:
  4077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077e4:	b08b      	sub	sp, #44	; 0x2c
  4077e6:	4604      	mov	r4, r0
  4077e8:	460d      	mov	r5, r1
  4077ea:	f000 f855 	bl	407898 <__ieee754_sqrt>
  4077ee:	4b28      	ldr	r3, [pc, #160]	; (407890 <sqrt+0xb0>)
  4077f0:	f993 a000 	ldrsb.w	sl, [r3]
  4077f4:	f1ba 3fff 	cmp.w	sl, #4294967295
  4077f8:	4606      	mov	r6, r0
  4077fa:	460f      	mov	r7, r1
  4077fc:	d012      	beq.n	407824 <sqrt+0x44>
  4077fe:	4622      	mov	r2, r4
  407800:	462b      	mov	r3, r5
  407802:	4620      	mov	r0, r4
  407804:	4629      	mov	r1, r5
  407806:	f000 fd5b 	bl	4082c0 <__aeabi_dcmpun>
  40780a:	4683      	mov	fp, r0
  40780c:	b950      	cbnz	r0, 407824 <sqrt+0x44>
  40780e:	f04f 0800 	mov.w	r8, #0
  407812:	f04f 0900 	mov.w	r9, #0
  407816:	4642      	mov	r2, r8
  407818:	464b      	mov	r3, r9
  40781a:	4620      	mov	r0, r4
  40781c:	4629      	mov	r1, r5
  40781e:	f000 fd27 	bl	408270 <__aeabi_dcmplt>
  407822:	b920      	cbnz	r0, 40782e <sqrt+0x4e>
  407824:	4630      	mov	r0, r6
  407826:	4639      	mov	r1, r7
  407828:	b00b      	add	sp, #44	; 0x2c
  40782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40782e:	4b19      	ldr	r3, [pc, #100]	; (407894 <sqrt+0xb4>)
  407830:	f8cd b020 	str.w	fp, [sp, #32]
  407834:	2201      	movs	r2, #1
  407836:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40783a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40783e:	e88d 000c 	stmia.w	sp, {r2, r3}
  407842:	f1ba 0f00 	cmp.w	sl, #0
  407846:	d015      	beq.n	407874 <sqrt+0x94>
  407848:	4642      	mov	r2, r8
  40784a:	464b      	mov	r3, r9
  40784c:	4640      	mov	r0, r8
  40784e:	4649      	mov	r1, r9
  407850:	f000 fbc6 	bl	407fe0 <__aeabi_ddiv>
  407854:	f1ba 0f02 	cmp.w	sl, #2
  407858:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40785c:	d10c      	bne.n	407878 <sqrt+0x98>
  40785e:	f001 f8cf 	bl	408a00 <__errno>
  407862:	2321      	movs	r3, #33	; 0x21
  407864:	6003      	str	r3, [r0, #0]
  407866:	9b08      	ldr	r3, [sp, #32]
  407868:	b963      	cbnz	r3, 407884 <sqrt+0xa4>
  40786a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40786e:	b00b      	add	sp, #44	; 0x2c
  407870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407874:	e9cd 8906 	strd	r8, r9, [sp, #24]
  407878:	4668      	mov	r0, sp
  40787a:	f000 f8cd 	bl	407a18 <matherr>
  40787e:	2800      	cmp	r0, #0
  407880:	d1f1      	bne.n	407866 <sqrt+0x86>
  407882:	e7ec      	b.n	40785e <sqrt+0x7e>
  407884:	f001 f8bc 	bl	408a00 <__errno>
  407888:	9b08      	ldr	r3, [sp, #32]
  40788a:	6003      	str	r3, [r0, #0]
  40788c:	e7ed      	b.n	40786a <sqrt+0x8a>
  40788e:	bf00      	nop
  407890:	2000002c 	.word	0x2000002c
  407894:	00412cc8 	.word	0x00412cc8

00407898 <__ieee754_sqrt>:
  407898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40789c:	4e5d      	ldr	r6, [pc, #372]	; (407a14 <__ieee754_sqrt+0x17c>)
  40789e:	46b6      	mov	lr, r6
  4078a0:	400e      	ands	r6, r1
  4078a2:	4576      	cmp	r6, lr
  4078a4:	460c      	mov	r4, r1
  4078a6:	4605      	mov	r5, r0
  4078a8:	f000 8095 	beq.w	4079d6 <__ieee754_sqrt+0x13e>
  4078ac:	2900      	cmp	r1, #0
  4078ae:	460b      	mov	r3, r1
  4078b0:	4602      	mov	r2, r0
  4078b2:	dd73      	ble.n	40799c <__ieee754_sqrt+0x104>
  4078b4:	150f      	asrs	r7, r1, #20
  4078b6:	d07e      	beq.n	4079b6 <__ieee754_sqrt+0x11e>
  4078b8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4078bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4078c0:	07f8      	lsls	r0, r7, #31
  4078c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4078c6:	d464      	bmi.n	407992 <__ieee754_sqrt+0xfa>
  4078c8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4078cc:	2600      	movs	r6, #0
  4078ce:	440b      	add	r3, r1
  4078d0:	107f      	asrs	r7, r7, #1
  4078d2:	0052      	lsls	r2, r2, #1
  4078d4:	46b6      	mov	lr, r6
  4078d6:	2016      	movs	r0, #22
  4078d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4078dc:	eb0e 0401 	add.w	r4, lr, r1
  4078e0:	429c      	cmp	r4, r3
  4078e2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4078e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4078ea:	dc03      	bgt.n	4078f4 <__ieee754_sqrt+0x5c>
  4078ec:	1b1b      	subs	r3, r3, r4
  4078ee:	eb04 0e01 	add.w	lr, r4, r1
  4078f2:	440e      	add	r6, r1
  4078f4:	3801      	subs	r0, #1
  4078f6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4078fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4078fe:	d1ed      	bne.n	4078dc <__ieee754_sqrt+0x44>
  407900:	4684      	mov	ip, r0
  407902:	2420      	movs	r4, #32
  407904:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407908:	e009      	b.n	40791e <__ieee754_sqrt+0x86>
  40790a:	d020      	beq.n	40794e <__ieee754_sqrt+0xb6>
  40790c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  407910:	3c01      	subs	r4, #1
  407912:	ea4f 0151 	mov.w	r1, r1, lsr #1
  407916:	442b      	add	r3, r5
  407918:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40791c:	d020      	beq.n	407960 <__ieee754_sqrt+0xc8>
  40791e:	459e      	cmp	lr, r3
  407920:	eb01 050c 	add.w	r5, r1, ip
  407924:	daf1      	bge.n	40790a <__ieee754_sqrt+0x72>
  407926:	2d00      	cmp	r5, #0
  407928:	eb05 0c01 	add.w	ip, r5, r1
  40792c:	db09      	blt.n	407942 <__ieee754_sqrt+0xaa>
  40792e:	46f0      	mov	r8, lr
  407930:	4295      	cmp	r5, r2
  407932:	ebce 0303 	rsb	r3, lr, r3
  407936:	d900      	bls.n	40793a <__ieee754_sqrt+0xa2>
  407938:	3b01      	subs	r3, #1
  40793a:	1b52      	subs	r2, r2, r5
  40793c:	4408      	add	r0, r1
  40793e:	46c6      	mov	lr, r8
  407940:	e7e4      	b.n	40790c <__ieee754_sqrt+0x74>
  407942:	f1bc 0f00 	cmp.w	ip, #0
  407946:	dbf2      	blt.n	40792e <__ieee754_sqrt+0x96>
  407948:	f10e 0801 	add.w	r8, lr, #1
  40794c:	e7f0      	b.n	407930 <__ieee754_sqrt+0x98>
  40794e:	4295      	cmp	r5, r2
  407950:	d817      	bhi.n	407982 <__ieee754_sqrt+0xea>
  407952:	2d00      	cmp	r5, #0
  407954:	eb05 0c01 	add.w	ip, r5, r1
  407958:	db47      	blt.n	4079ea <__ieee754_sqrt+0x152>
  40795a:	4698      	mov	r8, r3
  40795c:	2300      	movs	r3, #0
  40795e:	e7ec      	b.n	40793a <__ieee754_sqrt+0xa2>
  407960:	4313      	orrs	r3, r2
  407962:	d110      	bne.n	407986 <__ieee754_sqrt+0xee>
  407964:	0840      	lsrs	r0, r0, #1
  407966:	1073      	asrs	r3, r6, #1
  407968:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  40796c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  407970:	07f2      	lsls	r2, r6, #31
  407972:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  407976:	bf48      	it	mi
  407978:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  40797c:	4649      	mov	r1, r9
  40797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407982:	4673      	mov	r3, lr
  407984:	e7c2      	b.n	40790c <__ieee754_sqrt+0x74>
  407986:	1c41      	adds	r1, r0, #1
  407988:	d033      	beq.n	4079f2 <__ieee754_sqrt+0x15a>
  40798a:	f000 0301 	and.w	r3, r0, #1
  40798e:	4418      	add	r0, r3
  407990:	e7e8      	b.n	407964 <__ieee754_sqrt+0xcc>
  407992:	005b      	lsls	r3, r3, #1
  407994:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  407998:	0052      	lsls	r2, r2, #1
  40799a:	e795      	b.n	4078c8 <__ieee754_sqrt+0x30>
  40799c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4079a0:	4306      	orrs	r6, r0
  4079a2:	d0ec      	beq.n	40797e <__ieee754_sqrt+0xe6>
  4079a4:	bb69      	cbnz	r1, 407a02 <__ieee754_sqrt+0x16a>
  4079a6:	460f      	mov	r7, r1
  4079a8:	0ad3      	lsrs	r3, r2, #11
  4079aa:	3f15      	subs	r7, #21
  4079ac:	0552      	lsls	r2, r2, #21
  4079ae:	2b00      	cmp	r3, #0
  4079b0:	d0fa      	beq.n	4079a8 <__ieee754_sqrt+0x110>
  4079b2:	02dd      	lsls	r5, r3, #11
  4079b4:	d420      	bmi.n	4079f8 <__ieee754_sqrt+0x160>
  4079b6:	2100      	movs	r1, #0
  4079b8:	e000      	b.n	4079bc <__ieee754_sqrt+0x124>
  4079ba:	4601      	mov	r1, r0
  4079bc:	005b      	lsls	r3, r3, #1
  4079be:	02dc      	lsls	r4, r3, #11
  4079c0:	f101 0001 	add.w	r0, r1, #1
  4079c4:	d5f9      	bpl.n	4079ba <__ieee754_sqrt+0x122>
  4079c6:	f1c0 0420 	rsb	r4, r0, #32
  4079ca:	fa22 f404 	lsr.w	r4, r2, r4
  4079ce:	4323      	orrs	r3, r4
  4079d0:	1a7f      	subs	r7, r7, r1
  4079d2:	4082      	lsls	r2, r0
  4079d4:	e770      	b.n	4078b8 <__ieee754_sqrt+0x20>
  4079d6:	4602      	mov	r2, r0
  4079d8:	460b      	mov	r3, r1
  4079da:	f000 f9d7 	bl	407d8c <__aeabi_dmul>
  4079de:	462a      	mov	r2, r5
  4079e0:	4623      	mov	r3, r4
  4079e2:	f000 f821 	bl	407a28 <__adddf3>
  4079e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4079ea:	f1bc 0f00 	cmp.w	ip, #0
  4079ee:	daab      	bge.n	407948 <__ieee754_sqrt+0xb0>
  4079f0:	e7b3      	b.n	40795a <__ieee754_sqrt+0xc2>
  4079f2:	3601      	adds	r6, #1
  4079f4:	4620      	mov	r0, r4
  4079f6:	e7b6      	b.n	407966 <__ieee754_sqrt+0xce>
  4079f8:	2420      	movs	r4, #32
  4079fa:	f04f 31ff 	mov.w	r1, #4294967295
  4079fe:	2000      	movs	r0, #0
  407a00:	e7e3      	b.n	4079ca <__ieee754_sqrt+0x132>
  407a02:	4602      	mov	r2, r0
  407a04:	460b      	mov	r3, r1
  407a06:	f000 f80d 	bl	407a24 <__aeabi_dsub>
  407a0a:	4602      	mov	r2, r0
  407a0c:	460b      	mov	r3, r1
  407a0e:	f000 fae7 	bl	407fe0 <__aeabi_ddiv>
  407a12:	e7b4      	b.n	40797e <__ieee754_sqrt+0xe6>
  407a14:	7ff00000 	.word	0x7ff00000

00407a18 <matherr>:
  407a18:	2000      	movs	r0, #0
  407a1a:	4770      	bx	lr

00407a1c <__aeabi_drsub>:
  407a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407a20:	e002      	b.n	407a28 <__adddf3>
  407a22:	bf00      	nop

00407a24 <__aeabi_dsub>:
  407a24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407a28 <__adddf3>:
  407a28:	b530      	push	{r4, r5, lr}
  407a2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407a2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407a32:	ea94 0f05 	teq	r4, r5
  407a36:	bf08      	it	eq
  407a38:	ea90 0f02 	teqeq	r0, r2
  407a3c:	bf1f      	itttt	ne
  407a3e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407a42:	ea55 0c02 	orrsne.w	ip, r5, r2
  407a46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407a4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407a4e:	f000 80e2 	beq.w	407c16 <__adddf3+0x1ee>
  407a52:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407a56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407a5a:	bfb8      	it	lt
  407a5c:	426d      	neglt	r5, r5
  407a5e:	dd0c      	ble.n	407a7a <__adddf3+0x52>
  407a60:	442c      	add	r4, r5
  407a62:	ea80 0202 	eor.w	r2, r0, r2
  407a66:	ea81 0303 	eor.w	r3, r1, r3
  407a6a:	ea82 0000 	eor.w	r0, r2, r0
  407a6e:	ea83 0101 	eor.w	r1, r3, r1
  407a72:	ea80 0202 	eor.w	r2, r0, r2
  407a76:	ea81 0303 	eor.w	r3, r1, r3
  407a7a:	2d36      	cmp	r5, #54	; 0x36
  407a7c:	bf88      	it	hi
  407a7e:	bd30      	pophi	{r4, r5, pc}
  407a80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407a88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407a8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407a90:	d002      	beq.n	407a98 <__adddf3+0x70>
  407a92:	4240      	negs	r0, r0
  407a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407a98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407a9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407aa0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407aa4:	d002      	beq.n	407aac <__adddf3+0x84>
  407aa6:	4252      	negs	r2, r2
  407aa8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407aac:	ea94 0f05 	teq	r4, r5
  407ab0:	f000 80a7 	beq.w	407c02 <__adddf3+0x1da>
  407ab4:	f1a4 0401 	sub.w	r4, r4, #1
  407ab8:	f1d5 0e20 	rsbs	lr, r5, #32
  407abc:	db0d      	blt.n	407ada <__adddf3+0xb2>
  407abe:	fa02 fc0e 	lsl.w	ip, r2, lr
  407ac2:	fa22 f205 	lsr.w	r2, r2, r5
  407ac6:	1880      	adds	r0, r0, r2
  407ac8:	f141 0100 	adc.w	r1, r1, #0
  407acc:	fa03 f20e 	lsl.w	r2, r3, lr
  407ad0:	1880      	adds	r0, r0, r2
  407ad2:	fa43 f305 	asr.w	r3, r3, r5
  407ad6:	4159      	adcs	r1, r3
  407ad8:	e00e      	b.n	407af8 <__adddf3+0xd0>
  407ada:	f1a5 0520 	sub.w	r5, r5, #32
  407ade:	f10e 0e20 	add.w	lr, lr, #32
  407ae2:	2a01      	cmp	r2, #1
  407ae4:	fa03 fc0e 	lsl.w	ip, r3, lr
  407ae8:	bf28      	it	cs
  407aea:	f04c 0c02 	orrcs.w	ip, ip, #2
  407aee:	fa43 f305 	asr.w	r3, r3, r5
  407af2:	18c0      	adds	r0, r0, r3
  407af4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407afc:	d507      	bpl.n	407b0e <__adddf3+0xe6>
  407afe:	f04f 0e00 	mov.w	lr, #0
  407b02:	f1dc 0c00 	rsbs	ip, ip, #0
  407b06:	eb7e 0000 	sbcs.w	r0, lr, r0
  407b0a:	eb6e 0101 	sbc.w	r1, lr, r1
  407b0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407b12:	d31b      	bcc.n	407b4c <__adddf3+0x124>
  407b14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407b18:	d30c      	bcc.n	407b34 <__adddf3+0x10c>
  407b1a:	0849      	lsrs	r1, r1, #1
  407b1c:	ea5f 0030 	movs.w	r0, r0, rrx
  407b20:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407b24:	f104 0401 	add.w	r4, r4, #1
  407b28:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407b2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407b30:	f080 809a 	bcs.w	407c68 <__adddf3+0x240>
  407b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407b38:	bf08      	it	eq
  407b3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407b3e:	f150 0000 	adcs.w	r0, r0, #0
  407b42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407b46:	ea41 0105 	orr.w	r1, r1, r5
  407b4a:	bd30      	pop	{r4, r5, pc}
  407b4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407b50:	4140      	adcs	r0, r0
  407b52:	eb41 0101 	adc.w	r1, r1, r1
  407b56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407b5a:	f1a4 0401 	sub.w	r4, r4, #1
  407b5e:	d1e9      	bne.n	407b34 <__adddf3+0x10c>
  407b60:	f091 0f00 	teq	r1, #0
  407b64:	bf04      	itt	eq
  407b66:	4601      	moveq	r1, r0
  407b68:	2000      	moveq	r0, #0
  407b6a:	fab1 f381 	clz	r3, r1
  407b6e:	bf08      	it	eq
  407b70:	3320      	addeq	r3, #32
  407b72:	f1a3 030b 	sub.w	r3, r3, #11
  407b76:	f1b3 0220 	subs.w	r2, r3, #32
  407b7a:	da0c      	bge.n	407b96 <__adddf3+0x16e>
  407b7c:	320c      	adds	r2, #12
  407b7e:	dd08      	ble.n	407b92 <__adddf3+0x16a>
  407b80:	f102 0c14 	add.w	ip, r2, #20
  407b84:	f1c2 020c 	rsb	r2, r2, #12
  407b88:	fa01 f00c 	lsl.w	r0, r1, ip
  407b8c:	fa21 f102 	lsr.w	r1, r1, r2
  407b90:	e00c      	b.n	407bac <__adddf3+0x184>
  407b92:	f102 0214 	add.w	r2, r2, #20
  407b96:	bfd8      	it	le
  407b98:	f1c2 0c20 	rsble	ip, r2, #32
  407b9c:	fa01 f102 	lsl.w	r1, r1, r2
  407ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
  407ba4:	bfdc      	itt	le
  407ba6:	ea41 010c 	orrle.w	r1, r1, ip
  407baa:	4090      	lslle	r0, r2
  407bac:	1ae4      	subs	r4, r4, r3
  407bae:	bfa2      	ittt	ge
  407bb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407bb4:	4329      	orrge	r1, r5
  407bb6:	bd30      	popge	{r4, r5, pc}
  407bb8:	ea6f 0404 	mvn.w	r4, r4
  407bbc:	3c1f      	subs	r4, #31
  407bbe:	da1c      	bge.n	407bfa <__adddf3+0x1d2>
  407bc0:	340c      	adds	r4, #12
  407bc2:	dc0e      	bgt.n	407be2 <__adddf3+0x1ba>
  407bc4:	f104 0414 	add.w	r4, r4, #20
  407bc8:	f1c4 0220 	rsb	r2, r4, #32
  407bcc:	fa20 f004 	lsr.w	r0, r0, r4
  407bd0:	fa01 f302 	lsl.w	r3, r1, r2
  407bd4:	ea40 0003 	orr.w	r0, r0, r3
  407bd8:	fa21 f304 	lsr.w	r3, r1, r4
  407bdc:	ea45 0103 	orr.w	r1, r5, r3
  407be0:	bd30      	pop	{r4, r5, pc}
  407be2:	f1c4 040c 	rsb	r4, r4, #12
  407be6:	f1c4 0220 	rsb	r2, r4, #32
  407bea:	fa20 f002 	lsr.w	r0, r0, r2
  407bee:	fa01 f304 	lsl.w	r3, r1, r4
  407bf2:	ea40 0003 	orr.w	r0, r0, r3
  407bf6:	4629      	mov	r1, r5
  407bf8:	bd30      	pop	{r4, r5, pc}
  407bfa:	fa21 f004 	lsr.w	r0, r1, r4
  407bfe:	4629      	mov	r1, r5
  407c00:	bd30      	pop	{r4, r5, pc}
  407c02:	f094 0f00 	teq	r4, #0
  407c06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407c0a:	bf06      	itte	eq
  407c0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407c10:	3401      	addeq	r4, #1
  407c12:	3d01      	subne	r5, #1
  407c14:	e74e      	b.n	407ab4 <__adddf3+0x8c>
  407c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407c1a:	bf18      	it	ne
  407c1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407c20:	d029      	beq.n	407c76 <__adddf3+0x24e>
  407c22:	ea94 0f05 	teq	r4, r5
  407c26:	bf08      	it	eq
  407c28:	ea90 0f02 	teqeq	r0, r2
  407c2c:	d005      	beq.n	407c3a <__adddf3+0x212>
  407c2e:	ea54 0c00 	orrs.w	ip, r4, r0
  407c32:	bf04      	itt	eq
  407c34:	4619      	moveq	r1, r3
  407c36:	4610      	moveq	r0, r2
  407c38:	bd30      	pop	{r4, r5, pc}
  407c3a:	ea91 0f03 	teq	r1, r3
  407c3e:	bf1e      	ittt	ne
  407c40:	2100      	movne	r1, #0
  407c42:	2000      	movne	r0, #0
  407c44:	bd30      	popne	{r4, r5, pc}
  407c46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407c4a:	d105      	bne.n	407c58 <__adddf3+0x230>
  407c4c:	0040      	lsls	r0, r0, #1
  407c4e:	4149      	adcs	r1, r1
  407c50:	bf28      	it	cs
  407c52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407c56:	bd30      	pop	{r4, r5, pc}
  407c58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407c5c:	bf3c      	itt	cc
  407c5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407c62:	bd30      	popcc	{r4, r5, pc}
  407c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407c6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407c70:	f04f 0000 	mov.w	r0, #0
  407c74:	bd30      	pop	{r4, r5, pc}
  407c76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407c7a:	bf1a      	itte	ne
  407c7c:	4619      	movne	r1, r3
  407c7e:	4610      	movne	r0, r2
  407c80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407c84:	bf1c      	itt	ne
  407c86:	460b      	movne	r3, r1
  407c88:	4602      	movne	r2, r0
  407c8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407c8e:	bf06      	itte	eq
  407c90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407c94:	ea91 0f03 	teqeq	r1, r3
  407c98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407c9c:	bd30      	pop	{r4, r5, pc}
  407c9e:	bf00      	nop

00407ca0 <__aeabi_ui2d>:
  407ca0:	f090 0f00 	teq	r0, #0
  407ca4:	bf04      	itt	eq
  407ca6:	2100      	moveq	r1, #0
  407ca8:	4770      	bxeq	lr
  407caa:	b530      	push	{r4, r5, lr}
  407cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cb4:	f04f 0500 	mov.w	r5, #0
  407cb8:	f04f 0100 	mov.w	r1, #0
  407cbc:	e750      	b.n	407b60 <__adddf3+0x138>
  407cbe:	bf00      	nop

00407cc0 <__aeabi_i2d>:
  407cc0:	f090 0f00 	teq	r0, #0
  407cc4:	bf04      	itt	eq
  407cc6:	2100      	moveq	r1, #0
  407cc8:	4770      	bxeq	lr
  407cca:	b530      	push	{r4, r5, lr}
  407ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407cd8:	bf48      	it	mi
  407cda:	4240      	negmi	r0, r0
  407cdc:	f04f 0100 	mov.w	r1, #0
  407ce0:	e73e      	b.n	407b60 <__adddf3+0x138>
  407ce2:	bf00      	nop

00407ce4 <__aeabi_f2d>:
  407ce4:	0042      	lsls	r2, r0, #1
  407ce6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407cea:	ea4f 0131 	mov.w	r1, r1, rrx
  407cee:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407cf2:	bf1f      	itttt	ne
  407cf4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407cf8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407cfc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407d00:	4770      	bxne	lr
  407d02:	f092 0f00 	teq	r2, #0
  407d06:	bf14      	ite	ne
  407d08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d0c:	4770      	bxeq	lr
  407d0e:	b530      	push	{r4, r5, lr}
  407d10:	f44f 7460 	mov.w	r4, #896	; 0x380
  407d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407d1c:	e720      	b.n	407b60 <__adddf3+0x138>
  407d1e:	bf00      	nop

00407d20 <__aeabi_ul2d>:
  407d20:	ea50 0201 	orrs.w	r2, r0, r1
  407d24:	bf08      	it	eq
  407d26:	4770      	bxeq	lr
  407d28:	b530      	push	{r4, r5, lr}
  407d2a:	f04f 0500 	mov.w	r5, #0
  407d2e:	e00a      	b.n	407d46 <__aeabi_l2d+0x16>

00407d30 <__aeabi_l2d>:
  407d30:	ea50 0201 	orrs.w	r2, r0, r1
  407d34:	bf08      	it	eq
  407d36:	4770      	bxeq	lr
  407d38:	b530      	push	{r4, r5, lr}
  407d3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407d3e:	d502      	bpl.n	407d46 <__aeabi_l2d+0x16>
  407d40:	4240      	negs	r0, r0
  407d42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407d46:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407d52:	f43f aedc 	beq.w	407b0e <__adddf3+0xe6>
  407d56:	f04f 0203 	mov.w	r2, #3
  407d5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d5e:	bf18      	it	ne
  407d60:	3203      	addne	r2, #3
  407d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d66:	bf18      	it	ne
  407d68:	3203      	addne	r2, #3
  407d6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407d6e:	f1c2 0320 	rsb	r3, r2, #32
  407d72:	fa00 fc03 	lsl.w	ip, r0, r3
  407d76:	fa20 f002 	lsr.w	r0, r0, r2
  407d7a:	fa01 fe03 	lsl.w	lr, r1, r3
  407d7e:	ea40 000e 	orr.w	r0, r0, lr
  407d82:	fa21 f102 	lsr.w	r1, r1, r2
  407d86:	4414      	add	r4, r2
  407d88:	e6c1      	b.n	407b0e <__adddf3+0xe6>
  407d8a:	bf00      	nop

00407d8c <__aeabi_dmul>:
  407d8c:	b570      	push	{r4, r5, r6, lr}
  407d8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407d92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407d96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407d9a:	bf1d      	ittte	ne
  407d9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407da0:	ea94 0f0c 	teqne	r4, ip
  407da4:	ea95 0f0c 	teqne	r5, ip
  407da8:	f000 f8de 	bleq	407f68 <__aeabi_dmul+0x1dc>
  407dac:	442c      	add	r4, r5
  407dae:	ea81 0603 	eor.w	r6, r1, r3
  407db2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407db6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407dba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407dbe:	bf18      	it	ne
  407dc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407dcc:	d038      	beq.n	407e40 <__aeabi_dmul+0xb4>
  407dce:	fba0 ce02 	umull	ip, lr, r0, r2
  407dd2:	f04f 0500 	mov.w	r5, #0
  407dd6:	fbe1 e502 	umlal	lr, r5, r1, r2
  407dda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407dde:	fbe0 e503 	umlal	lr, r5, r0, r3
  407de2:	f04f 0600 	mov.w	r6, #0
  407de6:	fbe1 5603 	umlal	r5, r6, r1, r3
  407dea:	f09c 0f00 	teq	ip, #0
  407dee:	bf18      	it	ne
  407df0:	f04e 0e01 	orrne.w	lr, lr, #1
  407df4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407df8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407dfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407e00:	d204      	bcs.n	407e0c <__aeabi_dmul+0x80>
  407e02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407e06:	416d      	adcs	r5, r5
  407e08:	eb46 0606 	adc.w	r6, r6, r6
  407e0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407e10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407e14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407e18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407e1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407e20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407e24:	bf88      	it	hi
  407e26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407e2a:	d81e      	bhi.n	407e6a <__aeabi_dmul+0xde>
  407e2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407e30:	bf08      	it	eq
  407e32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407e36:	f150 0000 	adcs.w	r0, r0, #0
  407e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e3e:	bd70      	pop	{r4, r5, r6, pc}
  407e40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407e44:	ea46 0101 	orr.w	r1, r6, r1
  407e48:	ea40 0002 	orr.w	r0, r0, r2
  407e4c:	ea81 0103 	eor.w	r1, r1, r3
  407e50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407e54:	bfc2      	ittt	gt
  407e56:	ebd4 050c 	rsbsgt	r5, r4, ip
  407e5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407e5e:	bd70      	popgt	{r4, r5, r6, pc}
  407e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e64:	f04f 0e00 	mov.w	lr, #0
  407e68:	3c01      	subs	r4, #1
  407e6a:	f300 80ab 	bgt.w	407fc4 <__aeabi_dmul+0x238>
  407e6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407e72:	bfde      	ittt	le
  407e74:	2000      	movle	r0, #0
  407e76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407e7a:	bd70      	pople	{r4, r5, r6, pc}
  407e7c:	f1c4 0400 	rsb	r4, r4, #0
  407e80:	3c20      	subs	r4, #32
  407e82:	da35      	bge.n	407ef0 <__aeabi_dmul+0x164>
  407e84:	340c      	adds	r4, #12
  407e86:	dc1b      	bgt.n	407ec0 <__aeabi_dmul+0x134>
  407e88:	f104 0414 	add.w	r4, r4, #20
  407e8c:	f1c4 0520 	rsb	r5, r4, #32
  407e90:	fa00 f305 	lsl.w	r3, r0, r5
  407e94:	fa20 f004 	lsr.w	r0, r0, r4
  407e98:	fa01 f205 	lsl.w	r2, r1, r5
  407e9c:	ea40 0002 	orr.w	r0, r0, r2
  407ea0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407ea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407eac:	fa21 f604 	lsr.w	r6, r1, r4
  407eb0:	eb42 0106 	adc.w	r1, r2, r6
  407eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407eb8:	bf08      	it	eq
  407eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ebe:	bd70      	pop	{r4, r5, r6, pc}
  407ec0:	f1c4 040c 	rsb	r4, r4, #12
  407ec4:	f1c4 0520 	rsb	r5, r4, #32
  407ec8:	fa00 f304 	lsl.w	r3, r0, r4
  407ecc:	fa20 f005 	lsr.w	r0, r0, r5
  407ed0:	fa01 f204 	lsl.w	r2, r1, r4
  407ed4:	ea40 0002 	orr.w	r0, r0, r2
  407ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407ee0:	f141 0100 	adc.w	r1, r1, #0
  407ee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ee8:	bf08      	it	eq
  407eea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407eee:	bd70      	pop	{r4, r5, r6, pc}
  407ef0:	f1c4 0520 	rsb	r5, r4, #32
  407ef4:	fa00 f205 	lsl.w	r2, r0, r5
  407ef8:	ea4e 0e02 	orr.w	lr, lr, r2
  407efc:	fa20 f304 	lsr.w	r3, r0, r4
  407f00:	fa01 f205 	lsl.w	r2, r1, r5
  407f04:	ea43 0302 	orr.w	r3, r3, r2
  407f08:	fa21 f004 	lsr.w	r0, r1, r4
  407f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f10:	fa21 f204 	lsr.w	r2, r1, r4
  407f14:	ea20 0002 	bic.w	r0, r0, r2
  407f18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f20:	bf08      	it	eq
  407f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f26:	bd70      	pop	{r4, r5, r6, pc}
  407f28:	f094 0f00 	teq	r4, #0
  407f2c:	d10f      	bne.n	407f4e <__aeabi_dmul+0x1c2>
  407f2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407f32:	0040      	lsls	r0, r0, #1
  407f34:	eb41 0101 	adc.w	r1, r1, r1
  407f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f3c:	bf08      	it	eq
  407f3e:	3c01      	subeq	r4, #1
  407f40:	d0f7      	beq.n	407f32 <__aeabi_dmul+0x1a6>
  407f42:	ea41 0106 	orr.w	r1, r1, r6
  407f46:	f095 0f00 	teq	r5, #0
  407f4a:	bf18      	it	ne
  407f4c:	4770      	bxne	lr
  407f4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407f52:	0052      	lsls	r2, r2, #1
  407f54:	eb43 0303 	adc.w	r3, r3, r3
  407f58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407f5c:	bf08      	it	eq
  407f5e:	3d01      	subeq	r5, #1
  407f60:	d0f7      	beq.n	407f52 <__aeabi_dmul+0x1c6>
  407f62:	ea43 0306 	orr.w	r3, r3, r6
  407f66:	4770      	bx	lr
  407f68:	ea94 0f0c 	teq	r4, ip
  407f6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407f70:	bf18      	it	ne
  407f72:	ea95 0f0c 	teqne	r5, ip
  407f76:	d00c      	beq.n	407f92 <__aeabi_dmul+0x206>
  407f78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f7c:	bf18      	it	ne
  407f7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407f82:	d1d1      	bne.n	407f28 <__aeabi_dmul+0x19c>
  407f84:	ea81 0103 	eor.w	r1, r1, r3
  407f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f8c:	f04f 0000 	mov.w	r0, #0
  407f90:	bd70      	pop	{r4, r5, r6, pc}
  407f92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407f96:	bf06      	itte	eq
  407f98:	4610      	moveq	r0, r2
  407f9a:	4619      	moveq	r1, r3
  407f9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407fa0:	d019      	beq.n	407fd6 <__aeabi_dmul+0x24a>
  407fa2:	ea94 0f0c 	teq	r4, ip
  407fa6:	d102      	bne.n	407fae <__aeabi_dmul+0x222>
  407fa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407fac:	d113      	bne.n	407fd6 <__aeabi_dmul+0x24a>
  407fae:	ea95 0f0c 	teq	r5, ip
  407fb2:	d105      	bne.n	407fc0 <__aeabi_dmul+0x234>
  407fb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407fb8:	bf1c      	itt	ne
  407fba:	4610      	movne	r0, r2
  407fbc:	4619      	movne	r1, r3
  407fbe:	d10a      	bne.n	407fd6 <__aeabi_dmul+0x24a>
  407fc0:	ea81 0103 	eor.w	r1, r1, r3
  407fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407fc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407fd0:	f04f 0000 	mov.w	r0, #0
  407fd4:	bd70      	pop	{r4, r5, r6, pc}
  407fd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407fda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407fde:	bd70      	pop	{r4, r5, r6, pc}

00407fe0 <__aeabi_ddiv>:
  407fe0:	b570      	push	{r4, r5, r6, lr}
  407fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407fee:	bf1d      	ittte	ne
  407ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ff4:	ea94 0f0c 	teqne	r4, ip
  407ff8:	ea95 0f0c 	teqne	r5, ip
  407ffc:	f000 f8a7 	bleq	40814e <__aeabi_ddiv+0x16e>
  408000:	eba4 0405 	sub.w	r4, r4, r5
  408004:	ea81 0e03 	eor.w	lr, r1, r3
  408008:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40800c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408010:	f000 8088 	beq.w	408124 <__aeabi_ddiv+0x144>
  408014:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408018:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40801c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408020:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408024:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408028:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40802c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408030:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408034:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408038:	429d      	cmp	r5, r3
  40803a:	bf08      	it	eq
  40803c:	4296      	cmpeq	r6, r2
  40803e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408042:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408046:	d202      	bcs.n	40804e <__aeabi_ddiv+0x6e>
  408048:	085b      	lsrs	r3, r3, #1
  40804a:	ea4f 0232 	mov.w	r2, r2, rrx
  40804e:	1ab6      	subs	r6, r6, r2
  408050:	eb65 0503 	sbc.w	r5, r5, r3
  408054:	085b      	lsrs	r3, r3, #1
  408056:	ea4f 0232 	mov.w	r2, r2, rrx
  40805a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40805e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408062:	ebb6 0e02 	subs.w	lr, r6, r2
  408066:	eb75 0e03 	sbcs.w	lr, r5, r3
  40806a:	bf22      	ittt	cs
  40806c:	1ab6      	subcs	r6, r6, r2
  40806e:	4675      	movcs	r5, lr
  408070:	ea40 000c 	orrcs.w	r0, r0, ip
  408074:	085b      	lsrs	r3, r3, #1
  408076:	ea4f 0232 	mov.w	r2, r2, rrx
  40807a:	ebb6 0e02 	subs.w	lr, r6, r2
  40807e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408082:	bf22      	ittt	cs
  408084:	1ab6      	subcs	r6, r6, r2
  408086:	4675      	movcs	r5, lr
  408088:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40808c:	085b      	lsrs	r3, r3, #1
  40808e:	ea4f 0232 	mov.w	r2, r2, rrx
  408092:	ebb6 0e02 	subs.w	lr, r6, r2
  408096:	eb75 0e03 	sbcs.w	lr, r5, r3
  40809a:	bf22      	ittt	cs
  40809c:	1ab6      	subcs	r6, r6, r2
  40809e:	4675      	movcs	r5, lr
  4080a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4080a4:	085b      	lsrs	r3, r3, #1
  4080a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4080aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4080ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080b2:	bf22      	ittt	cs
  4080b4:	1ab6      	subcs	r6, r6, r2
  4080b6:	4675      	movcs	r5, lr
  4080b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4080bc:	ea55 0e06 	orrs.w	lr, r5, r6
  4080c0:	d018      	beq.n	4080f4 <__aeabi_ddiv+0x114>
  4080c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4080c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4080ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4080ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4080d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4080d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4080da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4080de:	d1c0      	bne.n	408062 <__aeabi_ddiv+0x82>
  4080e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080e4:	d10b      	bne.n	4080fe <__aeabi_ddiv+0x11e>
  4080e6:	ea41 0100 	orr.w	r1, r1, r0
  4080ea:	f04f 0000 	mov.w	r0, #0
  4080ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4080f2:	e7b6      	b.n	408062 <__aeabi_ddiv+0x82>
  4080f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4080f8:	bf04      	itt	eq
  4080fa:	4301      	orreq	r1, r0
  4080fc:	2000      	moveq	r0, #0
  4080fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408102:	bf88      	it	hi
  408104:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408108:	f63f aeaf 	bhi.w	407e6a <__aeabi_dmul+0xde>
  40810c:	ebb5 0c03 	subs.w	ip, r5, r3
  408110:	bf04      	itt	eq
  408112:	ebb6 0c02 	subseq.w	ip, r6, r2
  408116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40811a:	f150 0000 	adcs.w	r0, r0, #0
  40811e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408122:	bd70      	pop	{r4, r5, r6, pc}
  408124:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408128:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40812c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408130:	bfc2      	ittt	gt
  408132:	ebd4 050c 	rsbsgt	r5, r4, ip
  408136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40813a:	bd70      	popgt	{r4, r5, r6, pc}
  40813c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408140:	f04f 0e00 	mov.w	lr, #0
  408144:	3c01      	subs	r4, #1
  408146:	e690      	b.n	407e6a <__aeabi_dmul+0xde>
  408148:	ea45 0e06 	orr.w	lr, r5, r6
  40814c:	e68d      	b.n	407e6a <__aeabi_dmul+0xde>
  40814e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408152:	ea94 0f0c 	teq	r4, ip
  408156:	bf08      	it	eq
  408158:	ea95 0f0c 	teqeq	r5, ip
  40815c:	f43f af3b 	beq.w	407fd6 <__aeabi_dmul+0x24a>
  408160:	ea94 0f0c 	teq	r4, ip
  408164:	d10a      	bne.n	40817c <__aeabi_ddiv+0x19c>
  408166:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40816a:	f47f af34 	bne.w	407fd6 <__aeabi_dmul+0x24a>
  40816e:	ea95 0f0c 	teq	r5, ip
  408172:	f47f af25 	bne.w	407fc0 <__aeabi_dmul+0x234>
  408176:	4610      	mov	r0, r2
  408178:	4619      	mov	r1, r3
  40817a:	e72c      	b.n	407fd6 <__aeabi_dmul+0x24a>
  40817c:	ea95 0f0c 	teq	r5, ip
  408180:	d106      	bne.n	408190 <__aeabi_ddiv+0x1b0>
  408182:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408186:	f43f aefd 	beq.w	407f84 <__aeabi_dmul+0x1f8>
  40818a:	4610      	mov	r0, r2
  40818c:	4619      	mov	r1, r3
  40818e:	e722      	b.n	407fd6 <__aeabi_dmul+0x24a>
  408190:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408194:	bf18      	it	ne
  408196:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40819a:	f47f aec5 	bne.w	407f28 <__aeabi_dmul+0x19c>
  40819e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4081a2:	f47f af0d 	bne.w	407fc0 <__aeabi_dmul+0x234>
  4081a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4081aa:	f47f aeeb 	bne.w	407f84 <__aeabi_dmul+0x1f8>
  4081ae:	e712      	b.n	407fd6 <__aeabi_dmul+0x24a>

004081b0 <__gedf2>:
  4081b0:	f04f 3cff 	mov.w	ip, #4294967295
  4081b4:	e006      	b.n	4081c4 <__cmpdf2+0x4>
  4081b6:	bf00      	nop

004081b8 <__ledf2>:
  4081b8:	f04f 0c01 	mov.w	ip, #1
  4081bc:	e002      	b.n	4081c4 <__cmpdf2+0x4>
  4081be:	bf00      	nop

004081c0 <__cmpdf2>:
  4081c0:	f04f 0c01 	mov.w	ip, #1
  4081c4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4081c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081d4:	bf18      	it	ne
  4081d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4081da:	d01b      	beq.n	408214 <__cmpdf2+0x54>
  4081dc:	b001      	add	sp, #4
  4081de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4081e2:	bf0c      	ite	eq
  4081e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4081e8:	ea91 0f03 	teqne	r1, r3
  4081ec:	bf02      	ittt	eq
  4081ee:	ea90 0f02 	teqeq	r0, r2
  4081f2:	2000      	moveq	r0, #0
  4081f4:	4770      	bxeq	lr
  4081f6:	f110 0f00 	cmn.w	r0, #0
  4081fa:	ea91 0f03 	teq	r1, r3
  4081fe:	bf58      	it	pl
  408200:	4299      	cmppl	r1, r3
  408202:	bf08      	it	eq
  408204:	4290      	cmpeq	r0, r2
  408206:	bf2c      	ite	cs
  408208:	17d8      	asrcs	r0, r3, #31
  40820a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40820e:	f040 0001 	orr.w	r0, r0, #1
  408212:	4770      	bx	lr
  408214:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40821c:	d102      	bne.n	408224 <__cmpdf2+0x64>
  40821e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408222:	d107      	bne.n	408234 <__cmpdf2+0x74>
  408224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40822c:	d1d6      	bne.n	4081dc <__cmpdf2+0x1c>
  40822e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408232:	d0d3      	beq.n	4081dc <__cmpdf2+0x1c>
  408234:	f85d 0b04 	ldr.w	r0, [sp], #4
  408238:	4770      	bx	lr
  40823a:	bf00      	nop

0040823c <__aeabi_cdrcmple>:
  40823c:	4684      	mov	ip, r0
  40823e:	4610      	mov	r0, r2
  408240:	4662      	mov	r2, ip
  408242:	468c      	mov	ip, r1
  408244:	4619      	mov	r1, r3
  408246:	4663      	mov	r3, ip
  408248:	e000      	b.n	40824c <__aeabi_cdcmpeq>
  40824a:	bf00      	nop

0040824c <__aeabi_cdcmpeq>:
  40824c:	b501      	push	{r0, lr}
  40824e:	f7ff ffb7 	bl	4081c0 <__cmpdf2>
  408252:	2800      	cmp	r0, #0
  408254:	bf48      	it	mi
  408256:	f110 0f00 	cmnmi.w	r0, #0
  40825a:	bd01      	pop	{r0, pc}

0040825c <__aeabi_dcmpeq>:
  40825c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408260:	f7ff fff4 	bl	40824c <__aeabi_cdcmpeq>
  408264:	bf0c      	ite	eq
  408266:	2001      	moveq	r0, #1
  408268:	2000      	movne	r0, #0
  40826a:	f85d fb08 	ldr.w	pc, [sp], #8
  40826e:	bf00      	nop

00408270 <__aeabi_dcmplt>:
  408270:	f84d ed08 	str.w	lr, [sp, #-8]!
  408274:	f7ff ffea 	bl	40824c <__aeabi_cdcmpeq>
  408278:	bf34      	ite	cc
  40827a:	2001      	movcc	r0, #1
  40827c:	2000      	movcs	r0, #0
  40827e:	f85d fb08 	ldr.w	pc, [sp], #8
  408282:	bf00      	nop

00408284 <__aeabi_dcmple>:
  408284:	f84d ed08 	str.w	lr, [sp, #-8]!
  408288:	f7ff ffe0 	bl	40824c <__aeabi_cdcmpeq>
  40828c:	bf94      	ite	ls
  40828e:	2001      	movls	r0, #1
  408290:	2000      	movhi	r0, #0
  408292:	f85d fb08 	ldr.w	pc, [sp], #8
  408296:	bf00      	nop

00408298 <__aeabi_dcmpge>:
  408298:	f84d ed08 	str.w	lr, [sp, #-8]!
  40829c:	f7ff ffce 	bl	40823c <__aeabi_cdrcmple>
  4082a0:	bf94      	ite	ls
  4082a2:	2001      	movls	r0, #1
  4082a4:	2000      	movhi	r0, #0
  4082a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4082aa:	bf00      	nop

004082ac <__aeabi_dcmpgt>:
  4082ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082b0:	f7ff ffc4 	bl	40823c <__aeabi_cdrcmple>
  4082b4:	bf34      	ite	cc
  4082b6:	2001      	movcc	r0, #1
  4082b8:	2000      	movcs	r0, #0
  4082ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4082be:	bf00      	nop

004082c0 <__aeabi_dcmpun>:
  4082c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082c8:	d102      	bne.n	4082d0 <__aeabi_dcmpun+0x10>
  4082ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4082ce:	d10a      	bne.n	4082e6 <__aeabi_dcmpun+0x26>
  4082d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082d8:	d102      	bne.n	4082e0 <__aeabi_dcmpun+0x20>
  4082da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4082de:	d102      	bne.n	4082e6 <__aeabi_dcmpun+0x26>
  4082e0:	f04f 0000 	mov.w	r0, #0
  4082e4:	4770      	bx	lr
  4082e6:	f04f 0001 	mov.w	r0, #1
  4082ea:	4770      	bx	lr

004082ec <__aeabi_d2uiz>:
  4082ec:	004a      	lsls	r2, r1, #1
  4082ee:	d211      	bcs.n	408314 <__aeabi_d2uiz+0x28>
  4082f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4082f4:	d211      	bcs.n	40831a <__aeabi_d2uiz+0x2e>
  4082f6:	d50d      	bpl.n	408314 <__aeabi_d2uiz+0x28>
  4082f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4082fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408300:	d40e      	bmi.n	408320 <__aeabi_d2uiz+0x34>
  408302:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40830a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40830e:	fa23 f002 	lsr.w	r0, r3, r2
  408312:	4770      	bx	lr
  408314:	f04f 0000 	mov.w	r0, #0
  408318:	4770      	bx	lr
  40831a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40831e:	d102      	bne.n	408326 <__aeabi_d2uiz+0x3a>
  408320:	f04f 30ff 	mov.w	r0, #4294967295
  408324:	4770      	bx	lr
  408326:	f04f 0000 	mov.w	r0, #0
  40832a:	4770      	bx	lr

0040832c <__aeabi_d2f>:
  40832c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408330:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  408334:	bf24      	itt	cs
  408336:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40833a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40833e:	d90d      	bls.n	40835c <__aeabi_d2f+0x30>
  408340:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  408344:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  408348:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40834c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  408350:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  408354:	bf08      	it	eq
  408356:	f020 0001 	biceq.w	r0, r0, #1
  40835a:	4770      	bx	lr
  40835c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  408360:	d121      	bne.n	4083a6 <__aeabi_d2f+0x7a>
  408362:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  408366:	bfbc      	itt	lt
  408368:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40836c:	4770      	bxlt	lr
  40836e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408372:	ea4f 5252 	mov.w	r2, r2, lsr #21
  408376:	f1c2 0218 	rsb	r2, r2, #24
  40837a:	f1c2 0c20 	rsb	ip, r2, #32
  40837e:	fa10 f30c 	lsls.w	r3, r0, ip
  408382:	fa20 f002 	lsr.w	r0, r0, r2
  408386:	bf18      	it	ne
  408388:	f040 0001 	orrne.w	r0, r0, #1
  40838c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408390:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  408394:	fa03 fc0c 	lsl.w	ip, r3, ip
  408398:	ea40 000c 	orr.w	r0, r0, ip
  40839c:	fa23 f302 	lsr.w	r3, r3, r2
  4083a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4083a4:	e7cc      	b.n	408340 <__aeabi_d2f+0x14>
  4083a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4083aa:	d107      	bne.n	4083bc <__aeabi_d2f+0x90>
  4083ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4083b0:	bf1e      	ittt	ne
  4083b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4083b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4083ba:	4770      	bxne	lr
  4083bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4083c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4083c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4083c8:	4770      	bx	lr
  4083ca:	bf00      	nop

004083cc <__aeabi_frsub>:
  4083cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4083d0:	e002      	b.n	4083d8 <__addsf3>
  4083d2:	bf00      	nop

004083d4 <__aeabi_fsub>:
  4083d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004083d8 <__addsf3>:
  4083d8:	0042      	lsls	r2, r0, #1
  4083da:	bf1f      	itttt	ne
  4083dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4083e0:	ea92 0f03 	teqne	r2, r3
  4083e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4083e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4083ec:	d06a      	beq.n	4084c4 <__addsf3+0xec>
  4083ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4083f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4083f6:	bfc1      	itttt	gt
  4083f8:	18d2      	addgt	r2, r2, r3
  4083fa:	4041      	eorgt	r1, r0
  4083fc:	4048      	eorgt	r0, r1
  4083fe:	4041      	eorgt	r1, r0
  408400:	bfb8      	it	lt
  408402:	425b      	neglt	r3, r3
  408404:	2b19      	cmp	r3, #25
  408406:	bf88      	it	hi
  408408:	4770      	bxhi	lr
  40840a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40840e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  408416:	bf18      	it	ne
  408418:	4240      	negne	r0, r0
  40841a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40841e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  408422:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  408426:	bf18      	it	ne
  408428:	4249      	negne	r1, r1
  40842a:	ea92 0f03 	teq	r2, r3
  40842e:	d03f      	beq.n	4084b0 <__addsf3+0xd8>
  408430:	f1a2 0201 	sub.w	r2, r2, #1
  408434:	fa41 fc03 	asr.w	ip, r1, r3
  408438:	eb10 000c 	adds.w	r0, r0, ip
  40843c:	f1c3 0320 	rsb	r3, r3, #32
  408440:	fa01 f103 	lsl.w	r1, r1, r3
  408444:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  408448:	d502      	bpl.n	408450 <__addsf3+0x78>
  40844a:	4249      	negs	r1, r1
  40844c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  408450:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  408454:	d313      	bcc.n	40847e <__addsf3+0xa6>
  408456:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40845a:	d306      	bcc.n	40846a <__addsf3+0x92>
  40845c:	0840      	lsrs	r0, r0, #1
  40845e:	ea4f 0131 	mov.w	r1, r1, rrx
  408462:	f102 0201 	add.w	r2, r2, #1
  408466:	2afe      	cmp	r2, #254	; 0xfe
  408468:	d251      	bcs.n	40850e <__addsf3+0x136>
  40846a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40846e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  408472:	bf08      	it	eq
  408474:	f020 0001 	biceq.w	r0, r0, #1
  408478:	ea40 0003 	orr.w	r0, r0, r3
  40847c:	4770      	bx	lr
  40847e:	0049      	lsls	r1, r1, #1
  408480:	eb40 0000 	adc.w	r0, r0, r0
  408484:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  408488:	f1a2 0201 	sub.w	r2, r2, #1
  40848c:	d1ed      	bne.n	40846a <__addsf3+0x92>
  40848e:	fab0 fc80 	clz	ip, r0
  408492:	f1ac 0c08 	sub.w	ip, ip, #8
  408496:	ebb2 020c 	subs.w	r2, r2, ip
  40849a:	fa00 f00c 	lsl.w	r0, r0, ip
  40849e:	bfaa      	itet	ge
  4084a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4084a4:	4252      	neglt	r2, r2
  4084a6:	4318      	orrge	r0, r3
  4084a8:	bfbc      	itt	lt
  4084aa:	40d0      	lsrlt	r0, r2
  4084ac:	4318      	orrlt	r0, r3
  4084ae:	4770      	bx	lr
  4084b0:	f092 0f00 	teq	r2, #0
  4084b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4084b8:	bf06      	itte	eq
  4084ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4084be:	3201      	addeq	r2, #1
  4084c0:	3b01      	subne	r3, #1
  4084c2:	e7b5      	b.n	408430 <__addsf3+0x58>
  4084c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4084c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4084cc:	bf18      	it	ne
  4084ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4084d2:	d021      	beq.n	408518 <__addsf3+0x140>
  4084d4:	ea92 0f03 	teq	r2, r3
  4084d8:	d004      	beq.n	4084e4 <__addsf3+0x10c>
  4084da:	f092 0f00 	teq	r2, #0
  4084de:	bf08      	it	eq
  4084e0:	4608      	moveq	r0, r1
  4084e2:	4770      	bx	lr
  4084e4:	ea90 0f01 	teq	r0, r1
  4084e8:	bf1c      	itt	ne
  4084ea:	2000      	movne	r0, #0
  4084ec:	4770      	bxne	lr
  4084ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4084f2:	d104      	bne.n	4084fe <__addsf3+0x126>
  4084f4:	0040      	lsls	r0, r0, #1
  4084f6:	bf28      	it	cs
  4084f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4084fc:	4770      	bx	lr
  4084fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  408502:	bf3c      	itt	cc
  408504:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  408508:	4770      	bxcc	lr
  40850a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40850e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  408512:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408516:	4770      	bx	lr
  408518:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40851c:	bf16      	itet	ne
  40851e:	4608      	movne	r0, r1
  408520:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  408524:	4601      	movne	r1, r0
  408526:	0242      	lsls	r2, r0, #9
  408528:	bf06      	itte	eq
  40852a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40852e:	ea90 0f01 	teqeq	r0, r1
  408532:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  408536:	4770      	bx	lr

00408538 <__aeabi_ui2f>:
  408538:	f04f 0300 	mov.w	r3, #0
  40853c:	e004      	b.n	408548 <__aeabi_i2f+0x8>
  40853e:	bf00      	nop

00408540 <__aeabi_i2f>:
  408540:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  408544:	bf48      	it	mi
  408546:	4240      	negmi	r0, r0
  408548:	ea5f 0c00 	movs.w	ip, r0
  40854c:	bf08      	it	eq
  40854e:	4770      	bxeq	lr
  408550:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  408554:	4601      	mov	r1, r0
  408556:	f04f 0000 	mov.w	r0, #0
  40855a:	e01c      	b.n	408596 <__aeabi_l2f+0x2a>

0040855c <__aeabi_ul2f>:
  40855c:	ea50 0201 	orrs.w	r2, r0, r1
  408560:	bf08      	it	eq
  408562:	4770      	bxeq	lr
  408564:	f04f 0300 	mov.w	r3, #0
  408568:	e00a      	b.n	408580 <__aeabi_l2f+0x14>
  40856a:	bf00      	nop

0040856c <__aeabi_l2f>:
  40856c:	ea50 0201 	orrs.w	r2, r0, r1
  408570:	bf08      	it	eq
  408572:	4770      	bxeq	lr
  408574:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  408578:	d502      	bpl.n	408580 <__aeabi_l2f+0x14>
  40857a:	4240      	negs	r0, r0
  40857c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408580:	ea5f 0c01 	movs.w	ip, r1
  408584:	bf02      	ittt	eq
  408586:	4684      	moveq	ip, r0
  408588:	4601      	moveq	r1, r0
  40858a:	2000      	moveq	r0, #0
  40858c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  408590:	bf08      	it	eq
  408592:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  408596:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40859a:	fabc f28c 	clz	r2, ip
  40859e:	3a08      	subs	r2, #8
  4085a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4085a4:	db10      	blt.n	4085c8 <__aeabi_l2f+0x5c>
  4085a6:	fa01 fc02 	lsl.w	ip, r1, r2
  4085aa:	4463      	add	r3, ip
  4085ac:	fa00 fc02 	lsl.w	ip, r0, r2
  4085b0:	f1c2 0220 	rsb	r2, r2, #32
  4085b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4085b8:	fa20 f202 	lsr.w	r2, r0, r2
  4085bc:	eb43 0002 	adc.w	r0, r3, r2
  4085c0:	bf08      	it	eq
  4085c2:	f020 0001 	biceq.w	r0, r0, #1
  4085c6:	4770      	bx	lr
  4085c8:	f102 0220 	add.w	r2, r2, #32
  4085cc:	fa01 fc02 	lsl.w	ip, r1, r2
  4085d0:	f1c2 0220 	rsb	r2, r2, #32
  4085d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4085d8:	fa21 f202 	lsr.w	r2, r1, r2
  4085dc:	eb43 0002 	adc.w	r0, r3, r2
  4085e0:	bf08      	it	eq
  4085e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4085e6:	4770      	bx	lr

004085e8 <__aeabi_fmul>:
  4085e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4085ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4085f0:	bf1e      	ittt	ne
  4085f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4085f6:	ea92 0f0c 	teqne	r2, ip
  4085fa:	ea93 0f0c 	teqne	r3, ip
  4085fe:	d06f      	beq.n	4086e0 <__aeabi_fmul+0xf8>
  408600:	441a      	add	r2, r3
  408602:	ea80 0c01 	eor.w	ip, r0, r1
  408606:	0240      	lsls	r0, r0, #9
  408608:	bf18      	it	ne
  40860a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40860e:	d01e      	beq.n	40864e <__aeabi_fmul+0x66>
  408610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  408614:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  408618:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40861c:	fba0 3101 	umull	r3, r1, r0, r1
  408620:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  408624:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  408628:	bf3e      	ittt	cc
  40862a:	0049      	lslcc	r1, r1, #1
  40862c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  408630:	005b      	lslcc	r3, r3, #1
  408632:	ea40 0001 	orr.w	r0, r0, r1
  408636:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40863a:	2afd      	cmp	r2, #253	; 0xfd
  40863c:	d81d      	bhi.n	40867a <__aeabi_fmul+0x92>
  40863e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  408642:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  408646:	bf08      	it	eq
  408648:	f020 0001 	biceq.w	r0, r0, #1
  40864c:	4770      	bx	lr
  40864e:	f090 0f00 	teq	r0, #0
  408652:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  408656:	bf08      	it	eq
  408658:	0249      	lsleq	r1, r1, #9
  40865a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40865e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  408662:	3a7f      	subs	r2, #127	; 0x7f
  408664:	bfc2      	ittt	gt
  408666:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40866a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40866e:	4770      	bxgt	lr
  408670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408674:	f04f 0300 	mov.w	r3, #0
  408678:	3a01      	subs	r2, #1
  40867a:	dc5d      	bgt.n	408738 <__aeabi_fmul+0x150>
  40867c:	f112 0f19 	cmn.w	r2, #25
  408680:	bfdc      	itt	le
  408682:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  408686:	4770      	bxle	lr
  408688:	f1c2 0200 	rsb	r2, r2, #0
  40868c:	0041      	lsls	r1, r0, #1
  40868e:	fa21 f102 	lsr.w	r1, r1, r2
  408692:	f1c2 0220 	rsb	r2, r2, #32
  408696:	fa00 fc02 	lsl.w	ip, r0, r2
  40869a:	ea5f 0031 	movs.w	r0, r1, rrx
  40869e:	f140 0000 	adc.w	r0, r0, #0
  4086a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4086a6:	bf08      	it	eq
  4086a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4086ac:	4770      	bx	lr
  4086ae:	f092 0f00 	teq	r2, #0
  4086b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4086b6:	bf02      	ittt	eq
  4086b8:	0040      	lsleq	r0, r0, #1
  4086ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4086be:	3a01      	subeq	r2, #1
  4086c0:	d0f9      	beq.n	4086b6 <__aeabi_fmul+0xce>
  4086c2:	ea40 000c 	orr.w	r0, r0, ip
  4086c6:	f093 0f00 	teq	r3, #0
  4086ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4086ce:	bf02      	ittt	eq
  4086d0:	0049      	lsleq	r1, r1, #1
  4086d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4086d6:	3b01      	subeq	r3, #1
  4086d8:	d0f9      	beq.n	4086ce <__aeabi_fmul+0xe6>
  4086da:	ea41 010c 	orr.w	r1, r1, ip
  4086de:	e78f      	b.n	408600 <__aeabi_fmul+0x18>
  4086e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4086e4:	ea92 0f0c 	teq	r2, ip
  4086e8:	bf18      	it	ne
  4086ea:	ea93 0f0c 	teqne	r3, ip
  4086ee:	d00a      	beq.n	408706 <__aeabi_fmul+0x11e>
  4086f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4086f4:	bf18      	it	ne
  4086f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4086fa:	d1d8      	bne.n	4086ae <__aeabi_fmul+0xc6>
  4086fc:	ea80 0001 	eor.w	r0, r0, r1
  408700:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  408704:	4770      	bx	lr
  408706:	f090 0f00 	teq	r0, #0
  40870a:	bf17      	itett	ne
  40870c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  408710:	4608      	moveq	r0, r1
  408712:	f091 0f00 	teqne	r1, #0
  408716:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40871a:	d014      	beq.n	408746 <__aeabi_fmul+0x15e>
  40871c:	ea92 0f0c 	teq	r2, ip
  408720:	d101      	bne.n	408726 <__aeabi_fmul+0x13e>
  408722:	0242      	lsls	r2, r0, #9
  408724:	d10f      	bne.n	408746 <__aeabi_fmul+0x15e>
  408726:	ea93 0f0c 	teq	r3, ip
  40872a:	d103      	bne.n	408734 <__aeabi_fmul+0x14c>
  40872c:	024b      	lsls	r3, r1, #9
  40872e:	bf18      	it	ne
  408730:	4608      	movne	r0, r1
  408732:	d108      	bne.n	408746 <__aeabi_fmul+0x15e>
  408734:	ea80 0001 	eor.w	r0, r0, r1
  408738:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40873c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  408740:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408744:	4770      	bx	lr
  408746:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40874a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40874e:	4770      	bx	lr

00408750 <__aeabi_fdiv>:
  408750:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408754:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  408758:	bf1e      	ittt	ne
  40875a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40875e:	ea92 0f0c 	teqne	r2, ip
  408762:	ea93 0f0c 	teqne	r3, ip
  408766:	d069      	beq.n	40883c <__aeabi_fdiv+0xec>
  408768:	eba2 0203 	sub.w	r2, r2, r3
  40876c:	ea80 0c01 	eor.w	ip, r0, r1
  408770:	0249      	lsls	r1, r1, #9
  408772:	ea4f 2040 	mov.w	r0, r0, lsl #9
  408776:	d037      	beq.n	4087e8 <__aeabi_fdiv+0x98>
  408778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40877c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  408780:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  408784:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  408788:	428b      	cmp	r3, r1
  40878a:	bf38      	it	cc
  40878c:	005b      	lslcc	r3, r3, #1
  40878e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  408792:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  408796:	428b      	cmp	r3, r1
  408798:	bf24      	itt	cs
  40879a:	1a5b      	subcs	r3, r3, r1
  40879c:	ea40 000c 	orrcs.w	r0, r0, ip
  4087a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4087a4:	bf24      	itt	cs
  4087a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4087aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4087ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4087b2:	bf24      	itt	cs
  4087b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4087b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4087bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4087c0:	bf24      	itt	cs
  4087c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4087c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4087ca:	011b      	lsls	r3, r3, #4
  4087cc:	bf18      	it	ne
  4087ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4087d2:	d1e0      	bne.n	408796 <__aeabi_fdiv+0x46>
  4087d4:	2afd      	cmp	r2, #253	; 0xfd
  4087d6:	f63f af50 	bhi.w	40867a <__aeabi_fmul+0x92>
  4087da:	428b      	cmp	r3, r1
  4087dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4087e0:	bf08      	it	eq
  4087e2:	f020 0001 	biceq.w	r0, r0, #1
  4087e6:	4770      	bx	lr
  4087e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4087ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4087f0:	327f      	adds	r2, #127	; 0x7f
  4087f2:	bfc2      	ittt	gt
  4087f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4087f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4087fc:	4770      	bxgt	lr
  4087fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408802:	f04f 0300 	mov.w	r3, #0
  408806:	3a01      	subs	r2, #1
  408808:	e737      	b.n	40867a <__aeabi_fmul+0x92>
  40880a:	f092 0f00 	teq	r2, #0
  40880e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  408812:	bf02      	ittt	eq
  408814:	0040      	lsleq	r0, r0, #1
  408816:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40881a:	3a01      	subeq	r2, #1
  40881c:	d0f9      	beq.n	408812 <__aeabi_fdiv+0xc2>
  40881e:	ea40 000c 	orr.w	r0, r0, ip
  408822:	f093 0f00 	teq	r3, #0
  408826:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40882a:	bf02      	ittt	eq
  40882c:	0049      	lsleq	r1, r1, #1
  40882e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  408832:	3b01      	subeq	r3, #1
  408834:	d0f9      	beq.n	40882a <__aeabi_fdiv+0xda>
  408836:	ea41 010c 	orr.w	r1, r1, ip
  40883a:	e795      	b.n	408768 <__aeabi_fdiv+0x18>
  40883c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  408840:	ea92 0f0c 	teq	r2, ip
  408844:	d108      	bne.n	408858 <__aeabi_fdiv+0x108>
  408846:	0242      	lsls	r2, r0, #9
  408848:	f47f af7d 	bne.w	408746 <__aeabi_fmul+0x15e>
  40884c:	ea93 0f0c 	teq	r3, ip
  408850:	f47f af70 	bne.w	408734 <__aeabi_fmul+0x14c>
  408854:	4608      	mov	r0, r1
  408856:	e776      	b.n	408746 <__aeabi_fmul+0x15e>
  408858:	ea93 0f0c 	teq	r3, ip
  40885c:	d104      	bne.n	408868 <__aeabi_fdiv+0x118>
  40885e:	024b      	lsls	r3, r1, #9
  408860:	f43f af4c 	beq.w	4086fc <__aeabi_fmul+0x114>
  408864:	4608      	mov	r0, r1
  408866:	e76e      	b.n	408746 <__aeabi_fmul+0x15e>
  408868:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40886c:	bf18      	it	ne
  40886e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  408872:	d1ca      	bne.n	40880a <__aeabi_fdiv+0xba>
  408874:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  408878:	f47f af5c 	bne.w	408734 <__aeabi_fmul+0x14c>
  40887c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  408880:	f47f af3c 	bne.w	4086fc <__aeabi_fmul+0x114>
  408884:	e75f      	b.n	408746 <__aeabi_fmul+0x15e>
  408886:	bf00      	nop

00408888 <__gesf2>:
  408888:	f04f 3cff 	mov.w	ip, #4294967295
  40888c:	e006      	b.n	40889c <__cmpsf2+0x4>
  40888e:	bf00      	nop

00408890 <__lesf2>:
  408890:	f04f 0c01 	mov.w	ip, #1
  408894:	e002      	b.n	40889c <__cmpsf2+0x4>
  408896:	bf00      	nop

00408898 <__cmpsf2>:
  408898:	f04f 0c01 	mov.w	ip, #1
  40889c:	f84d cd04 	str.w	ip, [sp, #-4]!
  4088a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4088a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4088a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4088ac:	bf18      	it	ne
  4088ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4088b2:	d011      	beq.n	4088d8 <__cmpsf2+0x40>
  4088b4:	b001      	add	sp, #4
  4088b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4088ba:	bf18      	it	ne
  4088bc:	ea90 0f01 	teqne	r0, r1
  4088c0:	bf58      	it	pl
  4088c2:	ebb2 0003 	subspl.w	r0, r2, r3
  4088c6:	bf88      	it	hi
  4088c8:	17c8      	asrhi	r0, r1, #31
  4088ca:	bf38      	it	cc
  4088cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4088d0:	bf18      	it	ne
  4088d2:	f040 0001 	orrne.w	r0, r0, #1
  4088d6:	4770      	bx	lr
  4088d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4088dc:	d102      	bne.n	4088e4 <__cmpsf2+0x4c>
  4088de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4088e2:	d105      	bne.n	4088f0 <__cmpsf2+0x58>
  4088e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4088e8:	d1e4      	bne.n	4088b4 <__cmpsf2+0x1c>
  4088ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  4088ee:	d0e1      	beq.n	4088b4 <__cmpsf2+0x1c>
  4088f0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4088f4:	4770      	bx	lr
  4088f6:	bf00      	nop

004088f8 <__aeabi_cfrcmple>:
  4088f8:	4684      	mov	ip, r0
  4088fa:	4608      	mov	r0, r1
  4088fc:	4661      	mov	r1, ip
  4088fe:	e7ff      	b.n	408900 <__aeabi_cfcmpeq>

00408900 <__aeabi_cfcmpeq>:
  408900:	b50f      	push	{r0, r1, r2, r3, lr}
  408902:	f7ff ffc9 	bl	408898 <__cmpsf2>
  408906:	2800      	cmp	r0, #0
  408908:	bf48      	it	mi
  40890a:	f110 0f00 	cmnmi.w	r0, #0
  40890e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00408910 <__aeabi_fcmpeq>:
  408910:	f84d ed08 	str.w	lr, [sp, #-8]!
  408914:	f7ff fff4 	bl	408900 <__aeabi_cfcmpeq>
  408918:	bf0c      	ite	eq
  40891a:	2001      	moveq	r0, #1
  40891c:	2000      	movne	r0, #0
  40891e:	f85d fb08 	ldr.w	pc, [sp], #8
  408922:	bf00      	nop

00408924 <__aeabi_fcmplt>:
  408924:	f84d ed08 	str.w	lr, [sp, #-8]!
  408928:	f7ff ffea 	bl	408900 <__aeabi_cfcmpeq>
  40892c:	bf34      	ite	cc
  40892e:	2001      	movcc	r0, #1
  408930:	2000      	movcs	r0, #0
  408932:	f85d fb08 	ldr.w	pc, [sp], #8
  408936:	bf00      	nop

00408938 <__aeabi_fcmple>:
  408938:	f84d ed08 	str.w	lr, [sp, #-8]!
  40893c:	f7ff ffe0 	bl	408900 <__aeabi_cfcmpeq>
  408940:	bf94      	ite	ls
  408942:	2001      	movls	r0, #1
  408944:	2000      	movhi	r0, #0
  408946:	f85d fb08 	ldr.w	pc, [sp], #8
  40894a:	bf00      	nop

0040894c <__aeabi_fcmpge>:
  40894c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408950:	f7ff ffd2 	bl	4088f8 <__aeabi_cfrcmple>
  408954:	bf94      	ite	ls
  408956:	2001      	movls	r0, #1
  408958:	2000      	movhi	r0, #0
  40895a:	f85d fb08 	ldr.w	pc, [sp], #8
  40895e:	bf00      	nop

00408960 <__aeabi_fcmpgt>:
  408960:	f84d ed08 	str.w	lr, [sp, #-8]!
  408964:	f7ff ffc8 	bl	4088f8 <__aeabi_cfrcmple>
  408968:	bf34      	ite	cc
  40896a:	2001      	movcc	r0, #1
  40896c:	2000      	movcs	r0, #0
  40896e:	f85d fb08 	ldr.w	pc, [sp], #8
  408972:	bf00      	nop

00408974 <__aeabi_f2iz>:
  408974:	ea4f 0240 	mov.w	r2, r0, lsl #1
  408978:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40897c:	d30f      	bcc.n	40899e <__aeabi_f2iz+0x2a>
  40897e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  408982:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  408986:	d90d      	bls.n	4089a4 <__aeabi_f2iz+0x30>
  408988:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40898c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408990:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  408994:	fa23 f002 	lsr.w	r0, r3, r2
  408998:	bf18      	it	ne
  40899a:	4240      	negne	r0, r0
  40899c:	4770      	bx	lr
  40899e:	f04f 0000 	mov.w	r0, #0
  4089a2:	4770      	bx	lr
  4089a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4089a8:	d101      	bne.n	4089ae <__aeabi_f2iz+0x3a>
  4089aa:	0242      	lsls	r2, r0, #9
  4089ac:	d105      	bne.n	4089ba <__aeabi_f2iz+0x46>
  4089ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  4089b2:	bf08      	it	eq
  4089b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4089b8:	4770      	bx	lr
  4089ba:	f04f 0000 	mov.w	r0, #0
  4089be:	4770      	bx	lr

004089c0 <__aeabi_f2uiz>:
  4089c0:	0042      	lsls	r2, r0, #1
  4089c2:	d20e      	bcs.n	4089e2 <__aeabi_f2uiz+0x22>
  4089c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4089c8:	d30b      	bcc.n	4089e2 <__aeabi_f2uiz+0x22>
  4089ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4089ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4089d2:	d409      	bmi.n	4089e8 <__aeabi_f2uiz+0x28>
  4089d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4089d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4089dc:	fa23 f002 	lsr.w	r0, r3, r2
  4089e0:	4770      	bx	lr
  4089e2:	f04f 0000 	mov.w	r0, #0
  4089e6:	4770      	bx	lr
  4089e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4089ec:	d101      	bne.n	4089f2 <__aeabi_f2uiz+0x32>
  4089ee:	0242      	lsls	r2, r0, #9
  4089f0:	d102      	bne.n	4089f8 <__aeabi_f2uiz+0x38>
  4089f2:	f04f 30ff 	mov.w	r0, #4294967295
  4089f6:	4770      	bx	lr
  4089f8:	f04f 0000 	mov.w	r0, #0
  4089fc:	4770      	bx	lr
  4089fe:	bf00      	nop

00408a00 <__errno>:
  408a00:	4b01      	ldr	r3, [pc, #4]	; (408a08 <__errno+0x8>)
  408a02:	6818      	ldr	r0, [r3, #0]
  408a04:	4770      	bx	lr
  408a06:	bf00      	nop
  408a08:	20000458 	.word	0x20000458

00408a0c <__libc_init_array>:
  408a0c:	b570      	push	{r4, r5, r6, lr}
  408a0e:	4e0f      	ldr	r6, [pc, #60]	; (408a4c <__libc_init_array+0x40>)
  408a10:	4d0f      	ldr	r5, [pc, #60]	; (408a50 <__libc_init_array+0x44>)
  408a12:	1b76      	subs	r6, r6, r5
  408a14:	10b6      	asrs	r6, r6, #2
  408a16:	bf18      	it	ne
  408a18:	2400      	movne	r4, #0
  408a1a:	d005      	beq.n	408a28 <__libc_init_array+0x1c>
  408a1c:	3401      	adds	r4, #1
  408a1e:	f855 3b04 	ldr.w	r3, [r5], #4
  408a22:	4798      	blx	r3
  408a24:	42a6      	cmp	r6, r4
  408a26:	d1f9      	bne.n	408a1c <__libc_init_array+0x10>
  408a28:	4e0a      	ldr	r6, [pc, #40]	; (408a54 <__libc_init_array+0x48>)
  408a2a:	4d0b      	ldr	r5, [pc, #44]	; (408a58 <__libc_init_array+0x4c>)
  408a2c:	1b76      	subs	r6, r6, r5
  408a2e:	f00a fb55 	bl	4130dc <_init>
  408a32:	10b6      	asrs	r6, r6, #2
  408a34:	bf18      	it	ne
  408a36:	2400      	movne	r4, #0
  408a38:	d006      	beq.n	408a48 <__libc_init_array+0x3c>
  408a3a:	3401      	adds	r4, #1
  408a3c:	f855 3b04 	ldr.w	r3, [r5], #4
  408a40:	4798      	blx	r3
  408a42:	42a6      	cmp	r6, r4
  408a44:	d1f9      	bne.n	408a3a <__libc_init_array+0x2e>
  408a46:	bd70      	pop	{r4, r5, r6, pc}
  408a48:	bd70      	pop	{r4, r5, r6, pc}
  408a4a:	bf00      	nop
  408a4c:	004130e8 	.word	0x004130e8
  408a50:	004130e8 	.word	0x004130e8
  408a54:	004130f0 	.word	0x004130f0
  408a58:	004130e8 	.word	0x004130e8

00408a5c <iprintf>:
  408a5c:	b40f      	push	{r0, r1, r2, r3}
  408a5e:	b500      	push	{lr}
  408a60:	4907      	ldr	r1, [pc, #28]	; (408a80 <iprintf+0x24>)
  408a62:	b083      	sub	sp, #12
  408a64:	ab04      	add	r3, sp, #16
  408a66:	6808      	ldr	r0, [r1, #0]
  408a68:	f853 2b04 	ldr.w	r2, [r3], #4
  408a6c:	6881      	ldr	r1, [r0, #8]
  408a6e:	9301      	str	r3, [sp, #4]
  408a70:	f003 fdea 	bl	40c648 <_vfiprintf_r>
  408a74:	b003      	add	sp, #12
  408a76:	f85d eb04 	ldr.w	lr, [sp], #4
  408a7a:	b004      	add	sp, #16
  408a7c:	4770      	bx	lr
  408a7e:	bf00      	nop
  408a80:	20000458 	.word	0x20000458

00408a84 <malloc>:
  408a84:	4b02      	ldr	r3, [pc, #8]	; (408a90 <malloc+0xc>)
  408a86:	4601      	mov	r1, r0
  408a88:	6818      	ldr	r0, [r3, #0]
  408a8a:	f000 b80b 	b.w	408aa4 <_malloc_r>
  408a8e:	bf00      	nop
  408a90:	20000458 	.word	0x20000458

00408a94 <free>:
  408a94:	4b02      	ldr	r3, [pc, #8]	; (408aa0 <free+0xc>)
  408a96:	4601      	mov	r1, r0
  408a98:	6818      	ldr	r0, [r3, #0]
  408a9a:	f005 bf3f 	b.w	40e91c <_free_r>
  408a9e:	bf00      	nop
  408aa0:	20000458 	.word	0x20000458

00408aa4 <_malloc_r>:
  408aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408aa8:	f101 050b 	add.w	r5, r1, #11
  408aac:	2d16      	cmp	r5, #22
  408aae:	b083      	sub	sp, #12
  408ab0:	4606      	mov	r6, r0
  408ab2:	f240 809f 	bls.w	408bf4 <_malloc_r+0x150>
  408ab6:	f035 0507 	bics.w	r5, r5, #7
  408aba:	f100 80bf 	bmi.w	408c3c <_malloc_r+0x198>
  408abe:	42a9      	cmp	r1, r5
  408ac0:	f200 80bc 	bhi.w	408c3c <_malloc_r+0x198>
  408ac4:	f000 fb8e 	bl	4091e4 <__malloc_lock>
  408ac8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  408acc:	f0c0 829c 	bcc.w	409008 <_malloc_r+0x564>
  408ad0:	0a6b      	lsrs	r3, r5, #9
  408ad2:	f000 80ba 	beq.w	408c4a <_malloc_r+0x1a6>
  408ad6:	2b04      	cmp	r3, #4
  408ad8:	f200 8183 	bhi.w	408de2 <_malloc_r+0x33e>
  408adc:	09a8      	lsrs	r0, r5, #6
  408ade:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  408ae2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408ae6:	3038      	adds	r0, #56	; 0x38
  408ae8:	4fc4      	ldr	r7, [pc, #784]	; (408dfc <_malloc_r+0x358>)
  408aea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408aee:	f1a3 0108 	sub.w	r1, r3, #8
  408af2:	685c      	ldr	r4, [r3, #4]
  408af4:	42a1      	cmp	r1, r4
  408af6:	d107      	bne.n	408b08 <_malloc_r+0x64>
  408af8:	e0ac      	b.n	408c54 <_malloc_r+0x1b0>
  408afa:	2a00      	cmp	r2, #0
  408afc:	f280 80ac 	bge.w	408c58 <_malloc_r+0x1b4>
  408b00:	68e4      	ldr	r4, [r4, #12]
  408b02:	42a1      	cmp	r1, r4
  408b04:	f000 80a6 	beq.w	408c54 <_malloc_r+0x1b0>
  408b08:	6863      	ldr	r3, [r4, #4]
  408b0a:	f023 0303 	bic.w	r3, r3, #3
  408b0e:	1b5a      	subs	r2, r3, r5
  408b10:	2a0f      	cmp	r2, #15
  408b12:	ddf2      	ble.n	408afa <_malloc_r+0x56>
  408b14:	49b9      	ldr	r1, [pc, #740]	; (408dfc <_malloc_r+0x358>)
  408b16:	693c      	ldr	r4, [r7, #16]
  408b18:	f101 0e08 	add.w	lr, r1, #8
  408b1c:	4574      	cmp	r4, lr
  408b1e:	f000 81b3 	beq.w	408e88 <_malloc_r+0x3e4>
  408b22:	6863      	ldr	r3, [r4, #4]
  408b24:	f023 0303 	bic.w	r3, r3, #3
  408b28:	1b5a      	subs	r2, r3, r5
  408b2a:	2a0f      	cmp	r2, #15
  408b2c:	f300 8199 	bgt.w	408e62 <_malloc_r+0x3be>
  408b30:	2a00      	cmp	r2, #0
  408b32:	f8c1 e014 	str.w	lr, [r1, #20]
  408b36:	f8c1 e010 	str.w	lr, [r1, #16]
  408b3a:	f280 809e 	bge.w	408c7a <_malloc_r+0x1d6>
  408b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408b42:	f080 8167 	bcs.w	408e14 <_malloc_r+0x370>
  408b46:	08db      	lsrs	r3, r3, #3
  408b48:	f103 0c01 	add.w	ip, r3, #1
  408b4c:	2201      	movs	r2, #1
  408b4e:	109b      	asrs	r3, r3, #2
  408b50:	fa02 f303 	lsl.w	r3, r2, r3
  408b54:	684a      	ldr	r2, [r1, #4]
  408b56:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  408b5a:	f8c4 8008 	str.w	r8, [r4, #8]
  408b5e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  408b62:	431a      	orrs	r2, r3
  408b64:	f1a9 0308 	sub.w	r3, r9, #8
  408b68:	60e3      	str	r3, [r4, #12]
  408b6a:	604a      	str	r2, [r1, #4]
  408b6c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  408b70:	f8c8 400c 	str.w	r4, [r8, #12]
  408b74:	1083      	asrs	r3, r0, #2
  408b76:	2401      	movs	r4, #1
  408b78:	409c      	lsls	r4, r3
  408b7a:	4294      	cmp	r4, r2
  408b7c:	f200 808a 	bhi.w	408c94 <_malloc_r+0x1f0>
  408b80:	4214      	tst	r4, r2
  408b82:	d106      	bne.n	408b92 <_malloc_r+0xee>
  408b84:	f020 0003 	bic.w	r0, r0, #3
  408b88:	0064      	lsls	r4, r4, #1
  408b8a:	4214      	tst	r4, r2
  408b8c:	f100 0004 	add.w	r0, r0, #4
  408b90:	d0fa      	beq.n	408b88 <_malloc_r+0xe4>
  408b92:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408b96:	46cc      	mov	ip, r9
  408b98:	4680      	mov	r8, r0
  408b9a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  408b9e:	458c      	cmp	ip, r1
  408ba0:	d107      	bne.n	408bb2 <_malloc_r+0x10e>
  408ba2:	e173      	b.n	408e8c <_malloc_r+0x3e8>
  408ba4:	2a00      	cmp	r2, #0
  408ba6:	f280 8181 	bge.w	408eac <_malloc_r+0x408>
  408baa:	68c9      	ldr	r1, [r1, #12]
  408bac:	458c      	cmp	ip, r1
  408bae:	f000 816d 	beq.w	408e8c <_malloc_r+0x3e8>
  408bb2:	684b      	ldr	r3, [r1, #4]
  408bb4:	f023 0303 	bic.w	r3, r3, #3
  408bb8:	1b5a      	subs	r2, r3, r5
  408bba:	2a0f      	cmp	r2, #15
  408bbc:	ddf2      	ble.n	408ba4 <_malloc_r+0x100>
  408bbe:	460c      	mov	r4, r1
  408bc0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  408bc4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  408bc8:	194b      	adds	r3, r1, r5
  408bca:	f045 0501 	orr.w	r5, r5, #1
  408bce:	604d      	str	r5, [r1, #4]
  408bd0:	f042 0101 	orr.w	r1, r2, #1
  408bd4:	f8c8 c00c 	str.w	ip, [r8, #12]
  408bd8:	4630      	mov	r0, r6
  408bda:	f8cc 8008 	str.w	r8, [ip, #8]
  408bde:	617b      	str	r3, [r7, #20]
  408be0:	613b      	str	r3, [r7, #16]
  408be2:	f8c3 e00c 	str.w	lr, [r3, #12]
  408be6:	f8c3 e008 	str.w	lr, [r3, #8]
  408bea:	6059      	str	r1, [r3, #4]
  408bec:	509a      	str	r2, [r3, r2]
  408bee:	f000 fafb 	bl	4091e8 <__malloc_unlock>
  408bf2:	e01f      	b.n	408c34 <_malloc_r+0x190>
  408bf4:	2910      	cmp	r1, #16
  408bf6:	d821      	bhi.n	408c3c <_malloc_r+0x198>
  408bf8:	f000 faf4 	bl	4091e4 <__malloc_lock>
  408bfc:	2510      	movs	r5, #16
  408bfe:	2306      	movs	r3, #6
  408c00:	2002      	movs	r0, #2
  408c02:	4f7e      	ldr	r7, [pc, #504]	; (408dfc <_malloc_r+0x358>)
  408c04:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408c08:	f1a3 0208 	sub.w	r2, r3, #8
  408c0c:	685c      	ldr	r4, [r3, #4]
  408c0e:	4294      	cmp	r4, r2
  408c10:	f000 8145 	beq.w	408e9e <_malloc_r+0x3fa>
  408c14:	6863      	ldr	r3, [r4, #4]
  408c16:	68e1      	ldr	r1, [r4, #12]
  408c18:	68a5      	ldr	r5, [r4, #8]
  408c1a:	f023 0303 	bic.w	r3, r3, #3
  408c1e:	4423      	add	r3, r4
  408c20:	4630      	mov	r0, r6
  408c22:	685a      	ldr	r2, [r3, #4]
  408c24:	60e9      	str	r1, [r5, #12]
  408c26:	f042 0201 	orr.w	r2, r2, #1
  408c2a:	608d      	str	r5, [r1, #8]
  408c2c:	605a      	str	r2, [r3, #4]
  408c2e:	f000 fadb 	bl	4091e8 <__malloc_unlock>
  408c32:	3408      	adds	r4, #8
  408c34:	4620      	mov	r0, r4
  408c36:	b003      	add	sp, #12
  408c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c3c:	2400      	movs	r4, #0
  408c3e:	230c      	movs	r3, #12
  408c40:	4620      	mov	r0, r4
  408c42:	6033      	str	r3, [r6, #0]
  408c44:	b003      	add	sp, #12
  408c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c4a:	2380      	movs	r3, #128	; 0x80
  408c4c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  408c50:	203f      	movs	r0, #63	; 0x3f
  408c52:	e749      	b.n	408ae8 <_malloc_r+0x44>
  408c54:	4670      	mov	r0, lr
  408c56:	e75d      	b.n	408b14 <_malloc_r+0x70>
  408c58:	4423      	add	r3, r4
  408c5a:	68e1      	ldr	r1, [r4, #12]
  408c5c:	685a      	ldr	r2, [r3, #4]
  408c5e:	68a5      	ldr	r5, [r4, #8]
  408c60:	f042 0201 	orr.w	r2, r2, #1
  408c64:	60e9      	str	r1, [r5, #12]
  408c66:	4630      	mov	r0, r6
  408c68:	608d      	str	r5, [r1, #8]
  408c6a:	605a      	str	r2, [r3, #4]
  408c6c:	f000 fabc 	bl	4091e8 <__malloc_unlock>
  408c70:	3408      	adds	r4, #8
  408c72:	4620      	mov	r0, r4
  408c74:	b003      	add	sp, #12
  408c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c7a:	4423      	add	r3, r4
  408c7c:	4630      	mov	r0, r6
  408c7e:	685a      	ldr	r2, [r3, #4]
  408c80:	f042 0201 	orr.w	r2, r2, #1
  408c84:	605a      	str	r2, [r3, #4]
  408c86:	f000 faaf 	bl	4091e8 <__malloc_unlock>
  408c8a:	3408      	adds	r4, #8
  408c8c:	4620      	mov	r0, r4
  408c8e:	b003      	add	sp, #12
  408c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c94:	68bc      	ldr	r4, [r7, #8]
  408c96:	6863      	ldr	r3, [r4, #4]
  408c98:	f023 0803 	bic.w	r8, r3, #3
  408c9c:	45a8      	cmp	r8, r5
  408c9e:	d304      	bcc.n	408caa <_malloc_r+0x206>
  408ca0:	ebc5 0308 	rsb	r3, r5, r8
  408ca4:	2b0f      	cmp	r3, #15
  408ca6:	f300 808c 	bgt.w	408dc2 <_malloc_r+0x31e>
  408caa:	4b55      	ldr	r3, [pc, #340]	; (408e00 <_malloc_r+0x35c>)
  408cac:	f8df 9160 	ldr.w	r9, [pc, #352]	; 408e10 <_malloc_r+0x36c>
  408cb0:	681a      	ldr	r2, [r3, #0]
  408cb2:	f8d9 3000 	ldr.w	r3, [r9]
  408cb6:	3301      	adds	r3, #1
  408cb8:	442a      	add	r2, r5
  408cba:	eb04 0a08 	add.w	sl, r4, r8
  408cbe:	f000 8160 	beq.w	408f82 <_malloc_r+0x4de>
  408cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  408cc6:	320f      	adds	r2, #15
  408cc8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  408ccc:	f022 020f 	bic.w	r2, r2, #15
  408cd0:	4611      	mov	r1, r2
  408cd2:	4630      	mov	r0, r6
  408cd4:	9201      	str	r2, [sp, #4]
  408cd6:	f000 fa89 	bl	4091ec <_sbrk_r>
  408cda:	f1b0 3fff 	cmp.w	r0, #4294967295
  408cde:	4683      	mov	fp, r0
  408ce0:	9a01      	ldr	r2, [sp, #4]
  408ce2:	f000 8158 	beq.w	408f96 <_malloc_r+0x4f2>
  408ce6:	4582      	cmp	sl, r0
  408ce8:	f200 80fc 	bhi.w	408ee4 <_malloc_r+0x440>
  408cec:	4b45      	ldr	r3, [pc, #276]	; (408e04 <_malloc_r+0x360>)
  408cee:	6819      	ldr	r1, [r3, #0]
  408cf0:	45da      	cmp	sl, fp
  408cf2:	4411      	add	r1, r2
  408cf4:	6019      	str	r1, [r3, #0]
  408cf6:	f000 8153 	beq.w	408fa0 <_malloc_r+0x4fc>
  408cfa:	f8d9 0000 	ldr.w	r0, [r9]
  408cfe:	f8df e110 	ldr.w	lr, [pc, #272]	; 408e10 <_malloc_r+0x36c>
  408d02:	3001      	adds	r0, #1
  408d04:	bf1b      	ittet	ne
  408d06:	ebca 0a0b 	rsbne	sl, sl, fp
  408d0a:	4451      	addne	r1, sl
  408d0c:	f8ce b000 	streq.w	fp, [lr]
  408d10:	6019      	strne	r1, [r3, #0]
  408d12:	f01b 0107 	ands.w	r1, fp, #7
  408d16:	f000 8117 	beq.w	408f48 <_malloc_r+0x4a4>
  408d1a:	f1c1 0008 	rsb	r0, r1, #8
  408d1e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408d22:	4483      	add	fp, r0
  408d24:	3108      	adds	r1, #8
  408d26:	445a      	add	r2, fp
  408d28:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408d2c:	ebc2 0901 	rsb	r9, r2, r1
  408d30:	4649      	mov	r1, r9
  408d32:	4630      	mov	r0, r6
  408d34:	9301      	str	r3, [sp, #4]
  408d36:	f000 fa59 	bl	4091ec <_sbrk_r>
  408d3a:	1c43      	adds	r3, r0, #1
  408d3c:	9b01      	ldr	r3, [sp, #4]
  408d3e:	f000 813f 	beq.w	408fc0 <_malloc_r+0x51c>
  408d42:	ebcb 0200 	rsb	r2, fp, r0
  408d46:	444a      	add	r2, r9
  408d48:	f042 0201 	orr.w	r2, r2, #1
  408d4c:	6819      	ldr	r1, [r3, #0]
  408d4e:	f8c7 b008 	str.w	fp, [r7, #8]
  408d52:	4449      	add	r1, r9
  408d54:	42bc      	cmp	r4, r7
  408d56:	f8cb 2004 	str.w	r2, [fp, #4]
  408d5a:	6019      	str	r1, [r3, #0]
  408d5c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408e04 <_malloc_r+0x360>
  408d60:	d016      	beq.n	408d90 <_malloc_r+0x2ec>
  408d62:	f1b8 0f0f 	cmp.w	r8, #15
  408d66:	f240 80fd 	bls.w	408f64 <_malloc_r+0x4c0>
  408d6a:	6862      	ldr	r2, [r4, #4]
  408d6c:	f1a8 030c 	sub.w	r3, r8, #12
  408d70:	f023 0307 	bic.w	r3, r3, #7
  408d74:	18e0      	adds	r0, r4, r3
  408d76:	f002 0201 	and.w	r2, r2, #1
  408d7a:	f04f 0e05 	mov.w	lr, #5
  408d7e:	431a      	orrs	r2, r3
  408d80:	2b0f      	cmp	r3, #15
  408d82:	6062      	str	r2, [r4, #4]
  408d84:	f8c0 e004 	str.w	lr, [r0, #4]
  408d88:	f8c0 e008 	str.w	lr, [r0, #8]
  408d8c:	f200 811c 	bhi.w	408fc8 <_malloc_r+0x524>
  408d90:	4b1d      	ldr	r3, [pc, #116]	; (408e08 <_malloc_r+0x364>)
  408d92:	68bc      	ldr	r4, [r7, #8]
  408d94:	681a      	ldr	r2, [r3, #0]
  408d96:	4291      	cmp	r1, r2
  408d98:	bf88      	it	hi
  408d9a:	6019      	strhi	r1, [r3, #0]
  408d9c:	4b1b      	ldr	r3, [pc, #108]	; (408e0c <_malloc_r+0x368>)
  408d9e:	681a      	ldr	r2, [r3, #0]
  408da0:	4291      	cmp	r1, r2
  408da2:	6862      	ldr	r2, [r4, #4]
  408da4:	bf88      	it	hi
  408da6:	6019      	strhi	r1, [r3, #0]
  408da8:	f022 0203 	bic.w	r2, r2, #3
  408dac:	4295      	cmp	r5, r2
  408dae:	eba2 0305 	sub.w	r3, r2, r5
  408db2:	d801      	bhi.n	408db8 <_malloc_r+0x314>
  408db4:	2b0f      	cmp	r3, #15
  408db6:	dc04      	bgt.n	408dc2 <_malloc_r+0x31e>
  408db8:	4630      	mov	r0, r6
  408dba:	f000 fa15 	bl	4091e8 <__malloc_unlock>
  408dbe:	2400      	movs	r4, #0
  408dc0:	e738      	b.n	408c34 <_malloc_r+0x190>
  408dc2:	1962      	adds	r2, r4, r5
  408dc4:	f043 0301 	orr.w	r3, r3, #1
  408dc8:	f045 0501 	orr.w	r5, r5, #1
  408dcc:	6065      	str	r5, [r4, #4]
  408dce:	4630      	mov	r0, r6
  408dd0:	60ba      	str	r2, [r7, #8]
  408dd2:	6053      	str	r3, [r2, #4]
  408dd4:	f000 fa08 	bl	4091e8 <__malloc_unlock>
  408dd8:	3408      	adds	r4, #8
  408dda:	4620      	mov	r0, r4
  408ddc:	b003      	add	sp, #12
  408dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408de2:	2b14      	cmp	r3, #20
  408de4:	d971      	bls.n	408eca <_malloc_r+0x426>
  408de6:	2b54      	cmp	r3, #84	; 0x54
  408de8:	f200 80a4 	bhi.w	408f34 <_malloc_r+0x490>
  408dec:	0b28      	lsrs	r0, r5, #12
  408dee:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  408df2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408df6:	306e      	adds	r0, #110	; 0x6e
  408df8:	e676      	b.n	408ae8 <_malloc_r+0x44>
  408dfa:	bf00      	nop
  408dfc:	2000045c 	.word	0x2000045c
  408e00:	2000ad2c 	.word	0x2000ad2c
  408e04:	2000ad30 	.word	0x2000ad30
  408e08:	2000ad28 	.word	0x2000ad28
  408e0c:	2000ad24 	.word	0x2000ad24
  408e10:	20000868 	.word	0x20000868
  408e14:	0a5a      	lsrs	r2, r3, #9
  408e16:	2a04      	cmp	r2, #4
  408e18:	d95e      	bls.n	408ed8 <_malloc_r+0x434>
  408e1a:	2a14      	cmp	r2, #20
  408e1c:	f200 80b3 	bhi.w	408f86 <_malloc_r+0x4e2>
  408e20:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408e24:	0049      	lsls	r1, r1, #1
  408e26:	325b      	adds	r2, #91	; 0x5b
  408e28:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  408e2c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  408e30:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 409010 <_malloc_r+0x56c>
  408e34:	f1ac 0c08 	sub.w	ip, ip, #8
  408e38:	458c      	cmp	ip, r1
  408e3a:	f000 8088 	beq.w	408f4e <_malloc_r+0x4aa>
  408e3e:	684a      	ldr	r2, [r1, #4]
  408e40:	f022 0203 	bic.w	r2, r2, #3
  408e44:	4293      	cmp	r3, r2
  408e46:	d202      	bcs.n	408e4e <_malloc_r+0x3aa>
  408e48:	6889      	ldr	r1, [r1, #8]
  408e4a:	458c      	cmp	ip, r1
  408e4c:	d1f7      	bne.n	408e3e <_malloc_r+0x39a>
  408e4e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  408e52:	687a      	ldr	r2, [r7, #4]
  408e54:	f8c4 c00c 	str.w	ip, [r4, #12]
  408e58:	60a1      	str	r1, [r4, #8]
  408e5a:	f8cc 4008 	str.w	r4, [ip, #8]
  408e5e:	60cc      	str	r4, [r1, #12]
  408e60:	e688      	b.n	408b74 <_malloc_r+0xd0>
  408e62:	1963      	adds	r3, r4, r5
  408e64:	f042 0701 	orr.w	r7, r2, #1
  408e68:	f045 0501 	orr.w	r5, r5, #1
  408e6c:	6065      	str	r5, [r4, #4]
  408e6e:	4630      	mov	r0, r6
  408e70:	614b      	str	r3, [r1, #20]
  408e72:	610b      	str	r3, [r1, #16]
  408e74:	f8c3 e00c 	str.w	lr, [r3, #12]
  408e78:	f8c3 e008 	str.w	lr, [r3, #8]
  408e7c:	605f      	str	r7, [r3, #4]
  408e7e:	509a      	str	r2, [r3, r2]
  408e80:	3408      	adds	r4, #8
  408e82:	f000 f9b1 	bl	4091e8 <__malloc_unlock>
  408e86:	e6d5      	b.n	408c34 <_malloc_r+0x190>
  408e88:	684a      	ldr	r2, [r1, #4]
  408e8a:	e673      	b.n	408b74 <_malloc_r+0xd0>
  408e8c:	f108 0801 	add.w	r8, r8, #1
  408e90:	f018 0f03 	tst.w	r8, #3
  408e94:	f10c 0c08 	add.w	ip, ip, #8
  408e98:	f47f ae7f 	bne.w	408b9a <_malloc_r+0xf6>
  408e9c:	e030      	b.n	408f00 <_malloc_r+0x45c>
  408e9e:	68dc      	ldr	r4, [r3, #12]
  408ea0:	42a3      	cmp	r3, r4
  408ea2:	bf08      	it	eq
  408ea4:	3002      	addeq	r0, #2
  408ea6:	f43f ae35 	beq.w	408b14 <_malloc_r+0x70>
  408eaa:	e6b3      	b.n	408c14 <_malloc_r+0x170>
  408eac:	440b      	add	r3, r1
  408eae:	460c      	mov	r4, r1
  408eb0:	685a      	ldr	r2, [r3, #4]
  408eb2:	68c9      	ldr	r1, [r1, #12]
  408eb4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  408eb8:	f042 0201 	orr.w	r2, r2, #1
  408ebc:	605a      	str	r2, [r3, #4]
  408ebe:	4630      	mov	r0, r6
  408ec0:	60e9      	str	r1, [r5, #12]
  408ec2:	608d      	str	r5, [r1, #8]
  408ec4:	f000 f990 	bl	4091e8 <__malloc_unlock>
  408ec8:	e6b4      	b.n	408c34 <_malloc_r+0x190>
  408eca:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  408ece:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  408ed2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408ed6:	e607      	b.n	408ae8 <_malloc_r+0x44>
  408ed8:	099a      	lsrs	r2, r3, #6
  408eda:	f102 0139 	add.w	r1, r2, #57	; 0x39
  408ede:	0049      	lsls	r1, r1, #1
  408ee0:	3238      	adds	r2, #56	; 0x38
  408ee2:	e7a1      	b.n	408e28 <_malloc_r+0x384>
  408ee4:	42bc      	cmp	r4, r7
  408ee6:	4b4a      	ldr	r3, [pc, #296]	; (409010 <_malloc_r+0x56c>)
  408ee8:	f43f af00 	beq.w	408cec <_malloc_r+0x248>
  408eec:	689c      	ldr	r4, [r3, #8]
  408eee:	6862      	ldr	r2, [r4, #4]
  408ef0:	f022 0203 	bic.w	r2, r2, #3
  408ef4:	e75a      	b.n	408dac <_malloc_r+0x308>
  408ef6:	f859 3908 	ldr.w	r3, [r9], #-8
  408efa:	4599      	cmp	r9, r3
  408efc:	f040 8082 	bne.w	409004 <_malloc_r+0x560>
  408f00:	f010 0f03 	tst.w	r0, #3
  408f04:	f100 30ff 	add.w	r0, r0, #4294967295
  408f08:	d1f5      	bne.n	408ef6 <_malloc_r+0x452>
  408f0a:	687b      	ldr	r3, [r7, #4]
  408f0c:	ea23 0304 	bic.w	r3, r3, r4
  408f10:	607b      	str	r3, [r7, #4]
  408f12:	0064      	lsls	r4, r4, #1
  408f14:	429c      	cmp	r4, r3
  408f16:	f63f aebd 	bhi.w	408c94 <_malloc_r+0x1f0>
  408f1a:	2c00      	cmp	r4, #0
  408f1c:	f43f aeba 	beq.w	408c94 <_malloc_r+0x1f0>
  408f20:	421c      	tst	r4, r3
  408f22:	4640      	mov	r0, r8
  408f24:	f47f ae35 	bne.w	408b92 <_malloc_r+0xee>
  408f28:	0064      	lsls	r4, r4, #1
  408f2a:	421c      	tst	r4, r3
  408f2c:	f100 0004 	add.w	r0, r0, #4
  408f30:	d0fa      	beq.n	408f28 <_malloc_r+0x484>
  408f32:	e62e      	b.n	408b92 <_malloc_r+0xee>
  408f34:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408f38:	d818      	bhi.n	408f6c <_malloc_r+0x4c8>
  408f3a:	0be8      	lsrs	r0, r5, #15
  408f3c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  408f40:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408f44:	3077      	adds	r0, #119	; 0x77
  408f46:	e5cf      	b.n	408ae8 <_malloc_r+0x44>
  408f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408f4c:	e6eb      	b.n	408d26 <_malloc_r+0x282>
  408f4e:	2101      	movs	r1, #1
  408f50:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408f54:	1092      	asrs	r2, r2, #2
  408f56:	fa01 f202 	lsl.w	r2, r1, r2
  408f5a:	431a      	orrs	r2, r3
  408f5c:	f8c8 2004 	str.w	r2, [r8, #4]
  408f60:	4661      	mov	r1, ip
  408f62:	e777      	b.n	408e54 <_malloc_r+0x3b0>
  408f64:	2301      	movs	r3, #1
  408f66:	f8cb 3004 	str.w	r3, [fp, #4]
  408f6a:	e725      	b.n	408db8 <_malloc_r+0x314>
  408f6c:	f240 5254 	movw	r2, #1364	; 0x554
  408f70:	4293      	cmp	r3, r2
  408f72:	d820      	bhi.n	408fb6 <_malloc_r+0x512>
  408f74:	0ca8      	lsrs	r0, r5, #18
  408f76:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  408f7a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408f7e:	307c      	adds	r0, #124	; 0x7c
  408f80:	e5b2      	b.n	408ae8 <_malloc_r+0x44>
  408f82:	3210      	adds	r2, #16
  408f84:	e6a4      	b.n	408cd0 <_malloc_r+0x22c>
  408f86:	2a54      	cmp	r2, #84	; 0x54
  408f88:	d826      	bhi.n	408fd8 <_malloc_r+0x534>
  408f8a:	0b1a      	lsrs	r2, r3, #12
  408f8c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408f90:	0049      	lsls	r1, r1, #1
  408f92:	326e      	adds	r2, #110	; 0x6e
  408f94:	e748      	b.n	408e28 <_malloc_r+0x384>
  408f96:	68bc      	ldr	r4, [r7, #8]
  408f98:	6862      	ldr	r2, [r4, #4]
  408f9a:	f022 0203 	bic.w	r2, r2, #3
  408f9e:	e705      	b.n	408dac <_malloc_r+0x308>
  408fa0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  408fa4:	2800      	cmp	r0, #0
  408fa6:	f47f aea8 	bne.w	408cfa <_malloc_r+0x256>
  408faa:	4442      	add	r2, r8
  408fac:	68bb      	ldr	r3, [r7, #8]
  408fae:	f042 0201 	orr.w	r2, r2, #1
  408fb2:	605a      	str	r2, [r3, #4]
  408fb4:	e6ec      	b.n	408d90 <_malloc_r+0x2ec>
  408fb6:	23fe      	movs	r3, #254	; 0xfe
  408fb8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  408fbc:	207e      	movs	r0, #126	; 0x7e
  408fbe:	e593      	b.n	408ae8 <_malloc_r+0x44>
  408fc0:	2201      	movs	r2, #1
  408fc2:	f04f 0900 	mov.w	r9, #0
  408fc6:	e6c1      	b.n	408d4c <_malloc_r+0x2a8>
  408fc8:	f104 0108 	add.w	r1, r4, #8
  408fcc:	4630      	mov	r0, r6
  408fce:	f005 fca5 	bl	40e91c <_free_r>
  408fd2:	f8d9 1000 	ldr.w	r1, [r9]
  408fd6:	e6db      	b.n	408d90 <_malloc_r+0x2ec>
  408fd8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408fdc:	d805      	bhi.n	408fea <_malloc_r+0x546>
  408fde:	0bda      	lsrs	r2, r3, #15
  408fe0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408fe4:	0049      	lsls	r1, r1, #1
  408fe6:	3277      	adds	r2, #119	; 0x77
  408fe8:	e71e      	b.n	408e28 <_malloc_r+0x384>
  408fea:	f240 5154 	movw	r1, #1364	; 0x554
  408fee:	428a      	cmp	r2, r1
  408ff0:	d805      	bhi.n	408ffe <_malloc_r+0x55a>
  408ff2:	0c9a      	lsrs	r2, r3, #18
  408ff4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408ff8:	0049      	lsls	r1, r1, #1
  408ffa:	327c      	adds	r2, #124	; 0x7c
  408ffc:	e714      	b.n	408e28 <_malloc_r+0x384>
  408ffe:	21fe      	movs	r1, #254	; 0xfe
  409000:	227e      	movs	r2, #126	; 0x7e
  409002:	e711      	b.n	408e28 <_malloc_r+0x384>
  409004:	687b      	ldr	r3, [r7, #4]
  409006:	e784      	b.n	408f12 <_malloc_r+0x46e>
  409008:	08e8      	lsrs	r0, r5, #3
  40900a:	1c43      	adds	r3, r0, #1
  40900c:	005b      	lsls	r3, r3, #1
  40900e:	e5f8      	b.n	408c02 <_malloc_r+0x15e>
  409010:	2000045c 	.word	0x2000045c

00409014 <memcpy>:
  409014:	4684      	mov	ip, r0
  409016:	ea41 0300 	orr.w	r3, r1, r0
  40901a:	f013 0303 	ands.w	r3, r3, #3
  40901e:	d16d      	bne.n	4090fc <memcpy+0xe8>
  409020:	3a40      	subs	r2, #64	; 0x40
  409022:	d341      	bcc.n	4090a8 <memcpy+0x94>
  409024:	f851 3b04 	ldr.w	r3, [r1], #4
  409028:	f840 3b04 	str.w	r3, [r0], #4
  40902c:	f851 3b04 	ldr.w	r3, [r1], #4
  409030:	f840 3b04 	str.w	r3, [r0], #4
  409034:	f851 3b04 	ldr.w	r3, [r1], #4
  409038:	f840 3b04 	str.w	r3, [r0], #4
  40903c:	f851 3b04 	ldr.w	r3, [r1], #4
  409040:	f840 3b04 	str.w	r3, [r0], #4
  409044:	f851 3b04 	ldr.w	r3, [r1], #4
  409048:	f840 3b04 	str.w	r3, [r0], #4
  40904c:	f851 3b04 	ldr.w	r3, [r1], #4
  409050:	f840 3b04 	str.w	r3, [r0], #4
  409054:	f851 3b04 	ldr.w	r3, [r1], #4
  409058:	f840 3b04 	str.w	r3, [r0], #4
  40905c:	f851 3b04 	ldr.w	r3, [r1], #4
  409060:	f840 3b04 	str.w	r3, [r0], #4
  409064:	f851 3b04 	ldr.w	r3, [r1], #4
  409068:	f840 3b04 	str.w	r3, [r0], #4
  40906c:	f851 3b04 	ldr.w	r3, [r1], #4
  409070:	f840 3b04 	str.w	r3, [r0], #4
  409074:	f851 3b04 	ldr.w	r3, [r1], #4
  409078:	f840 3b04 	str.w	r3, [r0], #4
  40907c:	f851 3b04 	ldr.w	r3, [r1], #4
  409080:	f840 3b04 	str.w	r3, [r0], #4
  409084:	f851 3b04 	ldr.w	r3, [r1], #4
  409088:	f840 3b04 	str.w	r3, [r0], #4
  40908c:	f851 3b04 	ldr.w	r3, [r1], #4
  409090:	f840 3b04 	str.w	r3, [r0], #4
  409094:	f851 3b04 	ldr.w	r3, [r1], #4
  409098:	f840 3b04 	str.w	r3, [r0], #4
  40909c:	f851 3b04 	ldr.w	r3, [r1], #4
  4090a0:	f840 3b04 	str.w	r3, [r0], #4
  4090a4:	3a40      	subs	r2, #64	; 0x40
  4090a6:	d2bd      	bcs.n	409024 <memcpy+0x10>
  4090a8:	3230      	adds	r2, #48	; 0x30
  4090aa:	d311      	bcc.n	4090d0 <memcpy+0xbc>
  4090ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4090b0:	f840 3b04 	str.w	r3, [r0], #4
  4090b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4090b8:	f840 3b04 	str.w	r3, [r0], #4
  4090bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4090c0:	f840 3b04 	str.w	r3, [r0], #4
  4090c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4090c8:	f840 3b04 	str.w	r3, [r0], #4
  4090cc:	3a10      	subs	r2, #16
  4090ce:	d2ed      	bcs.n	4090ac <memcpy+0x98>
  4090d0:	320c      	adds	r2, #12
  4090d2:	d305      	bcc.n	4090e0 <memcpy+0xcc>
  4090d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4090d8:	f840 3b04 	str.w	r3, [r0], #4
  4090dc:	3a04      	subs	r2, #4
  4090de:	d2f9      	bcs.n	4090d4 <memcpy+0xc0>
  4090e0:	3204      	adds	r2, #4
  4090e2:	d008      	beq.n	4090f6 <memcpy+0xe2>
  4090e4:	07d2      	lsls	r2, r2, #31
  4090e6:	bf1c      	itt	ne
  4090e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4090ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4090f0:	d301      	bcc.n	4090f6 <memcpy+0xe2>
  4090f2:	880b      	ldrh	r3, [r1, #0]
  4090f4:	8003      	strh	r3, [r0, #0]
  4090f6:	4660      	mov	r0, ip
  4090f8:	4770      	bx	lr
  4090fa:	bf00      	nop
  4090fc:	2a08      	cmp	r2, #8
  4090fe:	d313      	bcc.n	409128 <memcpy+0x114>
  409100:	078b      	lsls	r3, r1, #30
  409102:	d08d      	beq.n	409020 <memcpy+0xc>
  409104:	f010 0303 	ands.w	r3, r0, #3
  409108:	d08a      	beq.n	409020 <memcpy+0xc>
  40910a:	f1c3 0304 	rsb	r3, r3, #4
  40910e:	1ad2      	subs	r2, r2, r3
  409110:	07db      	lsls	r3, r3, #31
  409112:	bf1c      	itt	ne
  409114:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409118:	f800 3b01 	strbne.w	r3, [r0], #1
  40911c:	d380      	bcc.n	409020 <memcpy+0xc>
  40911e:	f831 3b02 	ldrh.w	r3, [r1], #2
  409122:	f820 3b02 	strh.w	r3, [r0], #2
  409126:	e77b      	b.n	409020 <memcpy+0xc>
  409128:	3a04      	subs	r2, #4
  40912a:	d3d9      	bcc.n	4090e0 <memcpy+0xcc>
  40912c:	3a01      	subs	r2, #1
  40912e:	f811 3b01 	ldrb.w	r3, [r1], #1
  409132:	f800 3b01 	strb.w	r3, [r0], #1
  409136:	d2f9      	bcs.n	40912c <memcpy+0x118>
  409138:	780b      	ldrb	r3, [r1, #0]
  40913a:	7003      	strb	r3, [r0, #0]
  40913c:	784b      	ldrb	r3, [r1, #1]
  40913e:	7043      	strb	r3, [r0, #1]
  409140:	788b      	ldrb	r3, [r1, #2]
  409142:	7083      	strb	r3, [r0, #2]
  409144:	4660      	mov	r0, ip
  409146:	4770      	bx	lr

00409148 <memset>:
  409148:	b470      	push	{r4, r5, r6}
  40914a:	0784      	lsls	r4, r0, #30
  40914c:	d046      	beq.n	4091dc <memset+0x94>
  40914e:	1e54      	subs	r4, r2, #1
  409150:	2a00      	cmp	r2, #0
  409152:	d041      	beq.n	4091d8 <memset+0x90>
  409154:	b2cd      	uxtb	r5, r1
  409156:	4603      	mov	r3, r0
  409158:	e002      	b.n	409160 <memset+0x18>
  40915a:	1e62      	subs	r2, r4, #1
  40915c:	b3e4      	cbz	r4, 4091d8 <memset+0x90>
  40915e:	4614      	mov	r4, r2
  409160:	f803 5b01 	strb.w	r5, [r3], #1
  409164:	079a      	lsls	r2, r3, #30
  409166:	d1f8      	bne.n	40915a <memset+0x12>
  409168:	2c03      	cmp	r4, #3
  40916a:	d92e      	bls.n	4091ca <memset+0x82>
  40916c:	b2cd      	uxtb	r5, r1
  40916e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  409172:	2c0f      	cmp	r4, #15
  409174:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  409178:	d919      	bls.n	4091ae <memset+0x66>
  40917a:	f103 0210 	add.w	r2, r3, #16
  40917e:	4626      	mov	r6, r4
  409180:	3e10      	subs	r6, #16
  409182:	2e0f      	cmp	r6, #15
  409184:	f842 5c10 	str.w	r5, [r2, #-16]
  409188:	f842 5c0c 	str.w	r5, [r2, #-12]
  40918c:	f842 5c08 	str.w	r5, [r2, #-8]
  409190:	f842 5c04 	str.w	r5, [r2, #-4]
  409194:	f102 0210 	add.w	r2, r2, #16
  409198:	d8f2      	bhi.n	409180 <memset+0x38>
  40919a:	f1a4 0210 	sub.w	r2, r4, #16
  40919e:	f022 020f 	bic.w	r2, r2, #15
  4091a2:	f004 040f 	and.w	r4, r4, #15
  4091a6:	3210      	adds	r2, #16
  4091a8:	2c03      	cmp	r4, #3
  4091aa:	4413      	add	r3, r2
  4091ac:	d90d      	bls.n	4091ca <memset+0x82>
  4091ae:	461e      	mov	r6, r3
  4091b0:	4622      	mov	r2, r4
  4091b2:	3a04      	subs	r2, #4
  4091b4:	2a03      	cmp	r2, #3
  4091b6:	f846 5b04 	str.w	r5, [r6], #4
  4091ba:	d8fa      	bhi.n	4091b2 <memset+0x6a>
  4091bc:	1f22      	subs	r2, r4, #4
  4091be:	f022 0203 	bic.w	r2, r2, #3
  4091c2:	3204      	adds	r2, #4
  4091c4:	4413      	add	r3, r2
  4091c6:	f004 0403 	and.w	r4, r4, #3
  4091ca:	b12c      	cbz	r4, 4091d8 <memset+0x90>
  4091cc:	b2c9      	uxtb	r1, r1
  4091ce:	441c      	add	r4, r3
  4091d0:	f803 1b01 	strb.w	r1, [r3], #1
  4091d4:	42a3      	cmp	r3, r4
  4091d6:	d1fb      	bne.n	4091d0 <memset+0x88>
  4091d8:	bc70      	pop	{r4, r5, r6}
  4091da:	4770      	bx	lr
  4091dc:	4614      	mov	r4, r2
  4091de:	4603      	mov	r3, r0
  4091e0:	e7c2      	b.n	409168 <memset+0x20>
  4091e2:	bf00      	nop

004091e4 <__malloc_lock>:
  4091e4:	4770      	bx	lr
  4091e6:	bf00      	nop

004091e8 <__malloc_unlock>:
  4091e8:	4770      	bx	lr
  4091ea:	bf00      	nop

004091ec <_sbrk_r>:
  4091ec:	b538      	push	{r3, r4, r5, lr}
  4091ee:	4c07      	ldr	r4, [pc, #28]	; (40920c <_sbrk_r+0x20>)
  4091f0:	2300      	movs	r3, #0
  4091f2:	4605      	mov	r5, r0
  4091f4:	4608      	mov	r0, r1
  4091f6:	6023      	str	r3, [r4, #0]
  4091f8:	f7fc fcd4 	bl	405ba4 <_sbrk>
  4091fc:	1c43      	adds	r3, r0, #1
  4091fe:	d000      	beq.n	409202 <_sbrk_r+0x16>
  409200:	bd38      	pop	{r3, r4, r5, pc}
  409202:	6823      	ldr	r3, [r4, #0]
  409204:	2b00      	cmp	r3, #0
  409206:	d0fb      	beq.n	409200 <_sbrk_r+0x14>
  409208:	602b      	str	r3, [r5, #0]
  40920a:	bd38      	pop	{r3, r4, r5, pc}
  40920c:	2000bf08 	.word	0x2000bf08

00409210 <setbuf>:
  409210:	2900      	cmp	r1, #0
  409212:	bf0c      	ite	eq
  409214:	2202      	moveq	r2, #2
  409216:	2200      	movne	r2, #0
  409218:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40921c:	f000 b800 	b.w	409220 <setvbuf>

00409220 <setvbuf>:
  409220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409224:	4c51      	ldr	r4, [pc, #324]	; (40936c <setvbuf+0x14c>)
  409226:	6825      	ldr	r5, [r4, #0]
  409228:	b083      	sub	sp, #12
  40922a:	4604      	mov	r4, r0
  40922c:	460f      	mov	r7, r1
  40922e:	4690      	mov	r8, r2
  409230:	461e      	mov	r6, r3
  409232:	b115      	cbz	r5, 40923a <setvbuf+0x1a>
  409234:	6bab      	ldr	r3, [r5, #56]	; 0x38
  409236:	2b00      	cmp	r3, #0
  409238:	d079      	beq.n	40932e <setvbuf+0x10e>
  40923a:	f1b8 0f02 	cmp.w	r8, #2
  40923e:	d004      	beq.n	40924a <setvbuf+0x2a>
  409240:	f1b8 0f01 	cmp.w	r8, #1
  409244:	d87f      	bhi.n	409346 <setvbuf+0x126>
  409246:	2e00      	cmp	r6, #0
  409248:	db7d      	blt.n	409346 <setvbuf+0x126>
  40924a:	4621      	mov	r1, r4
  40924c:	4628      	mov	r0, r5
  40924e:	f005 fa07 	bl	40e660 <_fflush_r>
  409252:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409254:	b141      	cbz	r1, 409268 <setvbuf+0x48>
  409256:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40925a:	4299      	cmp	r1, r3
  40925c:	d002      	beq.n	409264 <setvbuf+0x44>
  40925e:	4628      	mov	r0, r5
  409260:	f005 fb5c 	bl	40e91c <_free_r>
  409264:	2300      	movs	r3, #0
  409266:	6323      	str	r3, [r4, #48]	; 0x30
  409268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40926c:	2200      	movs	r2, #0
  40926e:	61a2      	str	r2, [r4, #24]
  409270:	6062      	str	r2, [r4, #4]
  409272:	061a      	lsls	r2, r3, #24
  409274:	d454      	bmi.n	409320 <setvbuf+0x100>
  409276:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40927a:	f023 0303 	bic.w	r3, r3, #3
  40927e:	f1b8 0f02 	cmp.w	r8, #2
  409282:	81a3      	strh	r3, [r4, #12]
  409284:	d039      	beq.n	4092fa <setvbuf+0xda>
  409286:	ab01      	add	r3, sp, #4
  409288:	466a      	mov	r2, sp
  40928a:	4621      	mov	r1, r4
  40928c:	4628      	mov	r0, r5
  40928e:	f006 f99b 	bl	40f5c8 <__swhatbuf_r>
  409292:	89a3      	ldrh	r3, [r4, #12]
  409294:	4318      	orrs	r0, r3
  409296:	81a0      	strh	r0, [r4, #12]
  409298:	b326      	cbz	r6, 4092e4 <setvbuf+0xc4>
  40929a:	b327      	cbz	r7, 4092e6 <setvbuf+0xc6>
  40929c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40929e:	2b00      	cmp	r3, #0
  4092a0:	d04d      	beq.n	40933e <setvbuf+0x11e>
  4092a2:	9b00      	ldr	r3, [sp, #0]
  4092a4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4092a8:	6027      	str	r7, [r4, #0]
  4092aa:	429e      	cmp	r6, r3
  4092ac:	bf1c      	itt	ne
  4092ae:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4092b2:	81a0      	strhne	r0, [r4, #12]
  4092b4:	f1b8 0f01 	cmp.w	r8, #1
  4092b8:	bf08      	it	eq
  4092ba:	f040 0001 	orreq.w	r0, r0, #1
  4092be:	b283      	uxth	r3, r0
  4092c0:	bf08      	it	eq
  4092c2:	81a0      	strheq	r0, [r4, #12]
  4092c4:	f003 0008 	and.w	r0, r3, #8
  4092c8:	b280      	uxth	r0, r0
  4092ca:	6127      	str	r7, [r4, #16]
  4092cc:	6166      	str	r6, [r4, #20]
  4092ce:	b318      	cbz	r0, 409318 <setvbuf+0xf8>
  4092d0:	f013 0001 	ands.w	r0, r3, #1
  4092d4:	d02f      	beq.n	409336 <setvbuf+0x116>
  4092d6:	2000      	movs	r0, #0
  4092d8:	4276      	negs	r6, r6
  4092da:	61a6      	str	r6, [r4, #24]
  4092dc:	60a0      	str	r0, [r4, #8]
  4092de:	b003      	add	sp, #12
  4092e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4092e4:	9e00      	ldr	r6, [sp, #0]
  4092e6:	4630      	mov	r0, r6
  4092e8:	f7ff fbcc 	bl	408a84 <malloc>
  4092ec:	4607      	mov	r7, r0
  4092ee:	b368      	cbz	r0, 40934c <setvbuf+0x12c>
  4092f0:	89a3      	ldrh	r3, [r4, #12]
  4092f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4092f6:	81a3      	strh	r3, [r4, #12]
  4092f8:	e7d0      	b.n	40929c <setvbuf+0x7c>
  4092fa:	2000      	movs	r0, #0
  4092fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  409300:	f043 0302 	orr.w	r3, r3, #2
  409304:	2500      	movs	r5, #0
  409306:	2101      	movs	r1, #1
  409308:	81a3      	strh	r3, [r4, #12]
  40930a:	60a5      	str	r5, [r4, #8]
  40930c:	6022      	str	r2, [r4, #0]
  40930e:	6122      	str	r2, [r4, #16]
  409310:	6161      	str	r1, [r4, #20]
  409312:	b003      	add	sp, #12
  409314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409318:	60a0      	str	r0, [r4, #8]
  40931a:	b003      	add	sp, #12
  40931c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409320:	6921      	ldr	r1, [r4, #16]
  409322:	4628      	mov	r0, r5
  409324:	f005 fafa 	bl	40e91c <_free_r>
  409328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40932c:	e7a3      	b.n	409276 <setvbuf+0x56>
  40932e:	4628      	mov	r0, r5
  409330:	f005 fa2a 	bl	40e788 <__sinit>
  409334:	e781      	b.n	40923a <setvbuf+0x1a>
  409336:	60a6      	str	r6, [r4, #8]
  409338:	b003      	add	sp, #12
  40933a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40933e:	4628      	mov	r0, r5
  409340:	f005 fa22 	bl	40e788 <__sinit>
  409344:	e7ad      	b.n	4092a2 <setvbuf+0x82>
  409346:	f04f 30ff 	mov.w	r0, #4294967295
  40934a:	e7e2      	b.n	409312 <setvbuf+0xf2>
  40934c:	f8dd 9000 	ldr.w	r9, [sp]
  409350:	45b1      	cmp	r9, r6
  409352:	d006      	beq.n	409362 <setvbuf+0x142>
  409354:	4648      	mov	r0, r9
  409356:	f7ff fb95 	bl	408a84 <malloc>
  40935a:	4607      	mov	r7, r0
  40935c:	b108      	cbz	r0, 409362 <setvbuf+0x142>
  40935e:	464e      	mov	r6, r9
  409360:	e7c6      	b.n	4092f0 <setvbuf+0xd0>
  409362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409366:	f04f 30ff 	mov.w	r0, #4294967295
  40936a:	e7c7      	b.n	4092fc <setvbuf+0xdc>
  40936c:	20000458 	.word	0x20000458

00409370 <sprintf>:
  409370:	b40e      	push	{r1, r2, r3}
  409372:	b5f0      	push	{r4, r5, r6, r7, lr}
  409374:	b09c      	sub	sp, #112	; 0x70
  409376:	ab21      	add	r3, sp, #132	; 0x84
  409378:	490f      	ldr	r1, [pc, #60]	; (4093b8 <sprintf+0x48>)
  40937a:	f853 2b04 	ldr.w	r2, [r3], #4
  40937e:	9301      	str	r3, [sp, #4]
  409380:	4605      	mov	r5, r0
  409382:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  409386:	6808      	ldr	r0, [r1, #0]
  409388:	9502      	str	r5, [sp, #8]
  40938a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40938e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  409392:	a902      	add	r1, sp, #8
  409394:	9506      	str	r5, [sp, #24]
  409396:	f8ad 7014 	strh.w	r7, [sp, #20]
  40939a:	9404      	str	r4, [sp, #16]
  40939c:	9407      	str	r4, [sp, #28]
  40939e:	f8ad 6016 	strh.w	r6, [sp, #22]
  4093a2:	f001 fdc7 	bl	40af34 <_svfprintf_r>
  4093a6:	9b02      	ldr	r3, [sp, #8]
  4093a8:	2200      	movs	r2, #0
  4093aa:	701a      	strb	r2, [r3, #0]
  4093ac:	b01c      	add	sp, #112	; 0x70
  4093ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4093b2:	b003      	add	sp, #12
  4093b4:	4770      	bx	lr
  4093b6:	bf00      	nop
  4093b8:	20000458 	.word	0x20000458

004093bc <strchr>:
  4093bc:	b470      	push	{r4, r5, r6}
  4093be:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  4093c2:	d034      	beq.n	40942e <strchr+0x72>
  4093c4:	0785      	lsls	r5, r0, #30
  4093c6:	d00f      	beq.n	4093e8 <strchr+0x2c>
  4093c8:	7803      	ldrb	r3, [r0, #0]
  4093ca:	2b00      	cmp	r3, #0
  4093cc:	d05a      	beq.n	409484 <strchr+0xc8>
  4093ce:	429c      	cmp	r4, r3
  4093d0:	d02b      	beq.n	40942a <strchr+0x6e>
  4093d2:	1c43      	adds	r3, r0, #1
  4093d4:	e005      	b.n	4093e2 <strchr+0x26>
  4093d6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4093da:	2a00      	cmp	r2, #0
  4093dc:	d04f      	beq.n	40947e <strchr+0xc2>
  4093de:	4294      	cmp	r4, r2
  4093e0:	d023      	beq.n	40942a <strchr+0x6e>
  4093e2:	079a      	lsls	r2, r3, #30
  4093e4:	4618      	mov	r0, r3
  4093e6:	d1f6      	bne.n	4093d6 <strchr+0x1a>
  4093e8:	020e      	lsls	r6, r1, #8
  4093ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  4093ee:	4326      	orrs	r6, r4
  4093f0:	6803      	ldr	r3, [r0, #0]
  4093f2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4093f6:	e001      	b.n	4093fc <strchr+0x40>
  4093f8:	f850 3f04 	ldr.w	r3, [r0, #4]!
  4093fc:	ea86 0503 	eor.w	r5, r6, r3
  409400:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  409404:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  409408:	ea22 0205 	bic.w	r2, r2, r5
  40940c:	ea21 0303 	bic.w	r3, r1, r3
  409410:	4313      	orrs	r3, r2
  409412:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409416:	d0ef      	beq.n	4093f8 <strchr+0x3c>
  409418:	7803      	ldrb	r3, [r0, #0]
  40941a:	b923      	cbnz	r3, 409426 <strchr+0x6a>
  40941c:	e032      	b.n	409484 <strchr+0xc8>
  40941e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  409422:	2b00      	cmp	r3, #0
  409424:	d02e      	beq.n	409484 <strchr+0xc8>
  409426:	429c      	cmp	r4, r3
  409428:	d1f9      	bne.n	40941e <strchr+0x62>
  40942a:	bc70      	pop	{r4, r5, r6}
  40942c:	4770      	bx	lr
  40942e:	0784      	lsls	r4, r0, #30
  409430:	d00b      	beq.n	40944a <strchr+0x8e>
  409432:	7803      	ldrb	r3, [r0, #0]
  409434:	2b00      	cmp	r3, #0
  409436:	d0f8      	beq.n	40942a <strchr+0x6e>
  409438:	1c43      	adds	r3, r0, #1
  40943a:	e003      	b.n	409444 <strchr+0x88>
  40943c:	7802      	ldrb	r2, [r0, #0]
  40943e:	3301      	adds	r3, #1
  409440:	2a00      	cmp	r2, #0
  409442:	d0f2      	beq.n	40942a <strchr+0x6e>
  409444:	0799      	lsls	r1, r3, #30
  409446:	4618      	mov	r0, r3
  409448:	d1f8      	bne.n	40943c <strchr+0x80>
  40944a:	6802      	ldr	r2, [r0, #0]
  40944c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  409450:	ea23 0302 	bic.w	r3, r3, r2
  409454:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409458:	d108      	bne.n	40946c <strchr+0xb0>
  40945a:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40945e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  409462:	ea23 0302 	bic.w	r3, r3, r2
  409466:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40946a:	d0f6      	beq.n	40945a <strchr+0x9e>
  40946c:	7803      	ldrb	r3, [r0, #0]
  40946e:	2b00      	cmp	r3, #0
  409470:	d0db      	beq.n	40942a <strchr+0x6e>
  409472:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  409476:	2b00      	cmp	r3, #0
  409478:	d1fb      	bne.n	409472 <strchr+0xb6>
  40947a:	bc70      	pop	{r4, r5, r6}
  40947c:	4770      	bx	lr
  40947e:	4610      	mov	r0, r2
  409480:	bc70      	pop	{r4, r5, r6}
  409482:	4770      	bx	lr
  409484:	4618      	mov	r0, r3
  409486:	bc70      	pop	{r4, r5, r6}
  409488:	4770      	bx	lr
  40948a:	bf00      	nop
	...
  4094a0:	eba2 0003 	sub.w	r0, r2, r3
  4094a4:	4770      	bx	lr
  4094a6:	bf00      	nop

004094a8 <strcmp>:
  4094a8:	7802      	ldrb	r2, [r0, #0]
  4094aa:	780b      	ldrb	r3, [r1, #0]
  4094ac:	2a01      	cmp	r2, #1
  4094ae:	bf28      	it	cs
  4094b0:	429a      	cmpcs	r2, r3
  4094b2:	d1f5      	bne.n	4094a0 <strchr+0xe4>
  4094b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4094b8:	ea40 0401 	orr.w	r4, r0, r1
  4094bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4094c0:	f06f 0c00 	mvn.w	ip, #0
  4094c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4094c8:	b312      	cbz	r2, 409510 <strcmp+0x68>
  4094ca:	ea80 0401 	eor.w	r4, r0, r1
  4094ce:	f014 0f07 	tst.w	r4, #7
  4094d2:	d16a      	bne.n	4095aa <strcmp+0x102>
  4094d4:	f000 0407 	and.w	r4, r0, #7
  4094d8:	f020 0007 	bic.w	r0, r0, #7
  4094dc:	f004 0503 	and.w	r5, r4, #3
  4094e0:	f021 0107 	bic.w	r1, r1, #7
  4094e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4094e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4094ec:	f014 0f04 	tst.w	r4, #4
  4094f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4094f4:	fa0c f405 	lsl.w	r4, ip, r5
  4094f8:	ea62 0204 	orn	r2, r2, r4
  4094fc:	ea66 0604 	orn	r6, r6, r4
  409500:	d00a      	beq.n	409518 <strcmp+0x70>
  409502:	ea63 0304 	orn	r3, r3, r4
  409506:	4662      	mov	r2, ip
  409508:	ea67 0704 	orn	r7, r7, r4
  40950c:	4666      	mov	r6, ip
  40950e:	e003      	b.n	409518 <strcmp+0x70>
  409510:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  409514:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  409518:	fa82 f54c 	uadd8	r5, r2, ip
  40951c:	ea82 0406 	eor.w	r4, r2, r6
  409520:	faa4 f48c 	sel	r4, r4, ip
  409524:	bb6c      	cbnz	r4, 409582 <strcmp+0xda>
  409526:	fa83 f54c 	uadd8	r5, r3, ip
  40952a:	ea83 0507 	eor.w	r5, r3, r7
  40952e:	faa5 f58c 	sel	r5, r5, ip
  409532:	b995      	cbnz	r5, 40955a <strcmp+0xb2>
  409534:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  409538:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40953c:	fa82 f54c 	uadd8	r5, r2, ip
  409540:	ea82 0406 	eor.w	r4, r2, r6
  409544:	faa4 f48c 	sel	r4, r4, ip
  409548:	fa83 f54c 	uadd8	r5, r3, ip
  40954c:	ea83 0507 	eor.w	r5, r3, r7
  409550:	faa5 f58c 	sel	r5, r5, ip
  409554:	4325      	orrs	r5, r4
  409556:	d0db      	beq.n	409510 <strcmp+0x68>
  409558:	b99c      	cbnz	r4, 409582 <strcmp+0xda>
  40955a:	ba2d      	rev	r5, r5
  40955c:	fab5 f485 	clz	r4, r5
  409560:	f024 0407 	bic.w	r4, r4, #7
  409564:	fa27 f104 	lsr.w	r1, r7, r4
  409568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40956c:	fa23 f304 	lsr.w	r3, r3, r4
  409570:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  409574:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409578:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40957c:	eba0 0001 	sub.w	r0, r0, r1
  409580:	4770      	bx	lr
  409582:	ba24      	rev	r4, r4
  409584:	fab4 f484 	clz	r4, r4
  409588:	f024 0407 	bic.w	r4, r4, #7
  40958c:	fa26 f104 	lsr.w	r1, r6, r4
  409590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409594:	fa22 f204 	lsr.w	r2, r2, r4
  409598:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40959c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4095a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4095a4:	eba0 0001 	sub.w	r0, r0, r1
  4095a8:	4770      	bx	lr
  4095aa:	f014 0f03 	tst.w	r4, #3
  4095ae:	d13c      	bne.n	40962a <strcmp+0x182>
  4095b0:	f010 0403 	ands.w	r4, r0, #3
  4095b4:	d128      	bne.n	409608 <strcmp+0x160>
  4095b6:	f850 2b08 	ldr.w	r2, [r0], #8
  4095ba:	f851 3b08 	ldr.w	r3, [r1], #8
  4095be:	fa82 f54c 	uadd8	r5, r2, ip
  4095c2:	ea82 0503 	eor.w	r5, r2, r3
  4095c6:	faa5 f58c 	sel	r5, r5, ip
  4095ca:	b95d      	cbnz	r5, 4095e4 <strcmp+0x13c>
  4095cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4095d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4095d4:	fa82 f54c 	uadd8	r5, r2, ip
  4095d8:	ea82 0503 	eor.w	r5, r2, r3
  4095dc:	faa5 f58c 	sel	r5, r5, ip
  4095e0:	2d00      	cmp	r5, #0
  4095e2:	d0e8      	beq.n	4095b6 <strcmp+0x10e>
  4095e4:	ba2d      	rev	r5, r5
  4095e6:	fab5 f485 	clz	r4, r5
  4095ea:	f024 0407 	bic.w	r4, r4, #7
  4095ee:	fa23 f104 	lsr.w	r1, r3, r4
  4095f2:	fa22 f204 	lsr.w	r2, r2, r4
  4095f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4095fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4095fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409602:	eba0 0001 	sub.w	r0, r0, r1
  409606:	4770      	bx	lr
  409608:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40960c:	f020 0003 	bic.w	r0, r0, #3
  409610:	f850 2b08 	ldr.w	r2, [r0], #8
  409614:	f021 0103 	bic.w	r1, r1, #3
  409618:	f851 3b08 	ldr.w	r3, [r1], #8
  40961c:	fa0c f404 	lsl.w	r4, ip, r4
  409620:	ea62 0204 	orn	r2, r2, r4
  409624:	ea63 0304 	orn	r3, r3, r4
  409628:	e7c9      	b.n	4095be <strcmp+0x116>
  40962a:	f010 0403 	ands.w	r4, r0, #3
  40962e:	d01a      	beq.n	409666 <strcmp+0x1be>
  409630:	eba1 0104 	sub.w	r1, r1, r4
  409634:	f020 0003 	bic.w	r0, r0, #3
  409638:	07e4      	lsls	r4, r4, #31
  40963a:	f850 2b04 	ldr.w	r2, [r0], #4
  40963e:	d006      	beq.n	40964e <strcmp+0x1a6>
  409640:	d20f      	bcs.n	409662 <strcmp+0x1ba>
  409642:	788b      	ldrb	r3, [r1, #2]
  409644:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  409648:	1ae4      	subs	r4, r4, r3
  40964a:	d106      	bne.n	40965a <strcmp+0x1b2>
  40964c:	b12b      	cbz	r3, 40965a <strcmp+0x1b2>
  40964e:	78cb      	ldrb	r3, [r1, #3]
  409650:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  409654:	1ae4      	subs	r4, r4, r3
  409656:	d100      	bne.n	40965a <strcmp+0x1b2>
  409658:	b91b      	cbnz	r3, 409662 <strcmp+0x1ba>
  40965a:	4620      	mov	r0, r4
  40965c:	f85d 4b10 	ldr.w	r4, [sp], #16
  409660:	4770      	bx	lr
  409662:	f101 0104 	add.w	r1, r1, #4
  409666:	f850 2b04 	ldr.w	r2, [r0], #4
  40966a:	07cc      	lsls	r4, r1, #31
  40966c:	f021 0103 	bic.w	r1, r1, #3
  409670:	f851 3b04 	ldr.w	r3, [r1], #4
  409674:	d848      	bhi.n	409708 <strcmp+0x260>
  409676:	d224      	bcs.n	4096c2 <strcmp+0x21a>
  409678:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40967c:	fa82 f54c 	uadd8	r5, r2, ip
  409680:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  409684:	faa5 f58c 	sel	r5, r5, ip
  409688:	d10a      	bne.n	4096a0 <strcmp+0x1f8>
  40968a:	b965      	cbnz	r5, 4096a6 <strcmp+0x1fe>
  40968c:	f851 3b04 	ldr.w	r3, [r1], #4
  409690:	ea84 0402 	eor.w	r4, r4, r2
  409694:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  409698:	d10e      	bne.n	4096b8 <strcmp+0x210>
  40969a:	f850 2b04 	ldr.w	r2, [r0], #4
  40969e:	e7eb      	b.n	409678 <strcmp+0x1d0>
  4096a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4096a4:	e055      	b.n	409752 <strcmp+0x2aa>
  4096a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4096aa:	d14d      	bne.n	409748 <strcmp+0x2a0>
  4096ac:	7808      	ldrb	r0, [r1, #0]
  4096ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4096b2:	f1c0 0000 	rsb	r0, r0, #0
  4096b6:	4770      	bx	lr
  4096b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4096bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4096c0:	e047      	b.n	409752 <strcmp+0x2aa>
  4096c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4096c6:	fa82 f54c 	uadd8	r5, r2, ip
  4096ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4096ce:	faa5 f58c 	sel	r5, r5, ip
  4096d2:	d10a      	bne.n	4096ea <strcmp+0x242>
  4096d4:	b965      	cbnz	r5, 4096f0 <strcmp+0x248>
  4096d6:	f851 3b04 	ldr.w	r3, [r1], #4
  4096da:	ea84 0402 	eor.w	r4, r4, r2
  4096de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  4096e2:	d10c      	bne.n	4096fe <strcmp+0x256>
  4096e4:	f850 2b04 	ldr.w	r2, [r0], #4
  4096e8:	e7eb      	b.n	4096c2 <strcmp+0x21a>
  4096ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4096ee:	e030      	b.n	409752 <strcmp+0x2aa>
  4096f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  4096f4:	d128      	bne.n	409748 <strcmp+0x2a0>
  4096f6:	880b      	ldrh	r3, [r1, #0]
  4096f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4096fc:	e029      	b.n	409752 <strcmp+0x2aa>
  4096fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409702:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  409706:	e024      	b.n	409752 <strcmp+0x2aa>
  409708:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40970c:	fa82 f54c 	uadd8	r5, r2, ip
  409710:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  409714:	faa5 f58c 	sel	r5, r5, ip
  409718:	d10a      	bne.n	409730 <strcmp+0x288>
  40971a:	b965      	cbnz	r5, 409736 <strcmp+0x28e>
  40971c:	f851 3b04 	ldr.w	r3, [r1], #4
  409720:	ea84 0402 	eor.w	r4, r4, r2
  409724:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  409728:	d109      	bne.n	40973e <strcmp+0x296>
  40972a:	f850 2b04 	ldr.w	r2, [r0], #4
  40972e:	e7eb      	b.n	409708 <strcmp+0x260>
  409730:	ea4f 6313 	mov.w	r3, r3, lsr #24
  409734:	e00d      	b.n	409752 <strcmp+0x2aa>
  409736:	f015 0fff 	tst.w	r5, #255	; 0xff
  40973a:	d105      	bne.n	409748 <strcmp+0x2a0>
  40973c:	680b      	ldr	r3, [r1, #0]
  40973e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  409742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  409746:	e004      	b.n	409752 <strcmp+0x2aa>
  409748:	f04f 0000 	mov.w	r0, #0
  40974c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409750:	4770      	bx	lr
  409752:	ba12      	rev	r2, r2
  409754:	ba1b      	rev	r3, r3
  409756:	fa82 f44c 	uadd8	r4, r2, ip
  40975a:	ea82 0403 	eor.w	r4, r2, r3
  40975e:	faa4 f58c 	sel	r5, r4, ip
  409762:	fab5 f485 	clz	r4, r5
  409766:	fa02 f204 	lsl.w	r2, r2, r4
  40976a:	fa03 f304 	lsl.w	r3, r3, r4
  40976e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  409772:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409776:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40977a:	4770      	bx	lr
  40977c:	0000      	movs	r0, r0
	...

00409780 <strlen>:
  409780:	f890 f000 	pld	[r0]
  409784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  409788:	f020 0107 	bic.w	r1, r0, #7
  40978c:	f06f 0c00 	mvn.w	ip, #0
  409790:	f010 0407 	ands.w	r4, r0, #7
  409794:	f891 f020 	pld	[r1, #32]
  409798:	f040 8049 	bne.w	40982e <strlen+0xae>
  40979c:	f04f 0400 	mov.w	r4, #0
  4097a0:	f06f 0007 	mvn.w	r0, #7
  4097a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4097a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4097ac:	f100 0008 	add.w	r0, r0, #8
  4097b0:	fa82 f24c 	uadd8	r2, r2, ip
  4097b4:	faa4 f28c 	sel	r2, r4, ip
  4097b8:	fa83 f34c 	uadd8	r3, r3, ip
  4097bc:	faa2 f38c 	sel	r3, r2, ip
  4097c0:	bb4b      	cbnz	r3, 409816 <strlen+0x96>
  4097c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4097c6:	fa82 f24c 	uadd8	r2, r2, ip
  4097ca:	f100 0008 	add.w	r0, r0, #8
  4097ce:	faa4 f28c 	sel	r2, r4, ip
  4097d2:	fa83 f34c 	uadd8	r3, r3, ip
  4097d6:	faa2 f38c 	sel	r3, r2, ip
  4097da:	b9e3      	cbnz	r3, 409816 <strlen+0x96>
  4097dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4097e0:	fa82 f24c 	uadd8	r2, r2, ip
  4097e4:	f100 0008 	add.w	r0, r0, #8
  4097e8:	faa4 f28c 	sel	r2, r4, ip
  4097ec:	fa83 f34c 	uadd8	r3, r3, ip
  4097f0:	faa2 f38c 	sel	r3, r2, ip
  4097f4:	b97b      	cbnz	r3, 409816 <strlen+0x96>
  4097f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4097fa:	f101 0120 	add.w	r1, r1, #32
  4097fe:	fa82 f24c 	uadd8	r2, r2, ip
  409802:	f100 0008 	add.w	r0, r0, #8
  409806:	faa4 f28c 	sel	r2, r4, ip
  40980a:	fa83 f34c 	uadd8	r3, r3, ip
  40980e:	faa2 f38c 	sel	r3, r2, ip
  409812:	2b00      	cmp	r3, #0
  409814:	d0c6      	beq.n	4097a4 <strlen+0x24>
  409816:	2a00      	cmp	r2, #0
  409818:	bf04      	itt	eq
  40981a:	3004      	addeq	r0, #4
  40981c:	461a      	moveq	r2, r3
  40981e:	ba12      	rev	r2, r2
  409820:	fab2 f282 	clz	r2, r2
  409824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  409828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40982c:	4770      	bx	lr
  40982e:	e9d1 2300 	ldrd	r2, r3, [r1]
  409832:	f004 0503 	and.w	r5, r4, #3
  409836:	f1c4 0000 	rsb	r0, r4, #0
  40983a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40983e:	f014 0f04 	tst.w	r4, #4
  409842:	f891 f040 	pld	[r1, #64]	; 0x40
  409846:	fa0c f505 	lsl.w	r5, ip, r5
  40984a:	ea62 0205 	orn	r2, r2, r5
  40984e:	bf1c      	itt	ne
  409850:	ea63 0305 	ornne	r3, r3, r5
  409854:	4662      	movne	r2, ip
  409856:	f04f 0400 	mov.w	r4, #0
  40985a:	e7a9      	b.n	4097b0 <strlen+0x30>

0040985c <strncmp>:
  40985c:	2a00      	cmp	r2, #0
  40985e:	d041      	beq.n	4098e4 <strncmp+0x88>
  409860:	ea40 0301 	orr.w	r3, r0, r1
  409864:	f013 0303 	ands.w	r3, r3, #3
  409868:	b4f0      	push	{r4, r5, r6, r7}
  40986a:	d125      	bne.n	4098b8 <strncmp+0x5c>
  40986c:	2a03      	cmp	r2, #3
  40986e:	d923      	bls.n	4098b8 <strncmp+0x5c>
  409870:	6804      	ldr	r4, [r0, #0]
  409872:	680d      	ldr	r5, [r1, #0]
  409874:	42ac      	cmp	r4, r5
  409876:	d11f      	bne.n	4098b8 <strncmp+0x5c>
  409878:	3a04      	subs	r2, #4
  40987a:	d035      	beq.n	4098e8 <strncmp+0x8c>
  40987c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  409880:	ea25 0404 	bic.w	r4, r5, r4
  409884:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  409888:	d131      	bne.n	4098ee <strncmp+0x92>
  40988a:	1d07      	adds	r7, r0, #4
  40988c:	1d0d      	adds	r5, r1, #4
  40988e:	e00d      	b.n	4098ac <strncmp+0x50>
  409890:	f857 3b04 	ldr.w	r3, [r7], #4
  409894:	680e      	ldr	r6, [r1, #0]
  409896:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  40989a:	42b3      	cmp	r3, r6
  40989c:	ea24 0403 	bic.w	r4, r4, r3
  4098a0:	d10a      	bne.n	4098b8 <strncmp+0x5c>
  4098a2:	3a04      	subs	r2, #4
  4098a4:	d020      	beq.n	4098e8 <strncmp+0x8c>
  4098a6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4098aa:	d123      	bne.n	4098f4 <strncmp+0x98>
  4098ac:	2a03      	cmp	r2, #3
  4098ae:	4629      	mov	r1, r5
  4098b0:	4638      	mov	r0, r7
  4098b2:	f105 0504 	add.w	r5, r5, #4
  4098b6:	d8eb      	bhi.n	409890 <strncmp+0x34>
  4098b8:	7803      	ldrb	r3, [r0, #0]
  4098ba:	780c      	ldrb	r4, [r1, #0]
  4098bc:	429c      	cmp	r4, r3
  4098be:	f102 32ff 	add.w	r2, r2, #4294967295
  4098c2:	d10c      	bne.n	4098de <strncmp+0x82>
  4098c4:	b182      	cbz	r2, 4098e8 <strncmp+0x8c>
  4098c6:	b914      	cbnz	r4, 4098ce <strncmp+0x72>
  4098c8:	e016      	b.n	4098f8 <strncmp+0x9c>
  4098ca:	b16a      	cbz	r2, 4098e8 <strncmp+0x8c>
  4098cc:	b17b      	cbz	r3, 4098ee <strncmp+0x92>
  4098ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4098d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4098d6:	42a3      	cmp	r3, r4
  4098d8:	f102 32ff 	add.w	r2, r2, #4294967295
  4098dc:	d0f5      	beq.n	4098ca <strncmp+0x6e>
  4098de:	1b18      	subs	r0, r3, r4
  4098e0:	bcf0      	pop	{r4, r5, r6, r7}
  4098e2:	4770      	bx	lr
  4098e4:	4610      	mov	r0, r2
  4098e6:	4770      	bx	lr
  4098e8:	4610      	mov	r0, r2
  4098ea:	bcf0      	pop	{r4, r5, r6, r7}
  4098ec:	4770      	bx	lr
  4098ee:	4618      	mov	r0, r3
  4098f0:	bcf0      	pop	{r4, r5, r6, r7}
  4098f2:	4770      	bx	lr
  4098f4:	2000      	movs	r0, #0
  4098f6:	e7f3      	b.n	4098e0 <strncmp+0x84>
  4098f8:	4620      	mov	r0, r4
  4098fa:	e7f1      	b.n	4098e0 <strncmp+0x84>

004098fc <strncpy>:
  4098fc:	ea40 0301 	orr.w	r3, r0, r1
  409900:	079b      	lsls	r3, r3, #30
  409902:	b470      	push	{r4, r5, r6}
  409904:	d12b      	bne.n	40995e <strncpy+0x62>
  409906:	2a03      	cmp	r2, #3
  409908:	d929      	bls.n	40995e <strncpy+0x62>
  40990a:	460c      	mov	r4, r1
  40990c:	4603      	mov	r3, r0
  40990e:	4621      	mov	r1, r4
  409910:	f854 6b04 	ldr.w	r6, [r4], #4
  409914:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  409918:	ea25 0506 	bic.w	r5, r5, r6
  40991c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  409920:	d106      	bne.n	409930 <strncpy+0x34>
  409922:	3a04      	subs	r2, #4
  409924:	2a03      	cmp	r2, #3
  409926:	f843 6b04 	str.w	r6, [r3], #4
  40992a:	4621      	mov	r1, r4
  40992c:	d8ef      	bhi.n	40990e <strncpy+0x12>
  40992e:	b1a2      	cbz	r2, 40995a <strncpy+0x5e>
  409930:	780c      	ldrb	r4, [r1, #0]
  409932:	701c      	strb	r4, [r3, #0]
  409934:	3a01      	subs	r2, #1
  409936:	3301      	adds	r3, #1
  409938:	3101      	adds	r1, #1
  40993a:	b13c      	cbz	r4, 40994c <strncpy+0x50>
  40993c:	b16a      	cbz	r2, 40995a <strncpy+0x5e>
  40993e:	f811 4b01 	ldrb.w	r4, [r1], #1
  409942:	f803 4b01 	strb.w	r4, [r3], #1
  409946:	3a01      	subs	r2, #1
  409948:	2c00      	cmp	r4, #0
  40994a:	d1f7      	bne.n	40993c <strncpy+0x40>
  40994c:	b12a      	cbz	r2, 40995a <strncpy+0x5e>
  40994e:	441a      	add	r2, r3
  409950:	2100      	movs	r1, #0
  409952:	f803 1b01 	strb.w	r1, [r3], #1
  409956:	429a      	cmp	r2, r3
  409958:	d1fb      	bne.n	409952 <strncpy+0x56>
  40995a:	bc70      	pop	{r4, r5, r6}
  40995c:	4770      	bx	lr
  40995e:	4603      	mov	r3, r0
  409960:	e7e5      	b.n	40992e <strncpy+0x32>
  409962:	bf00      	nop

00409964 <critical_factorization>:
  409964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409968:	f04f 0e01 	mov.w	lr, #1
  40996c:	4674      	mov	r4, lr
  40996e:	2500      	movs	r5, #0
  409970:	f04f 36ff 	mov.w	r6, #4294967295
  409974:	192b      	adds	r3, r5, r4
  409976:	428b      	cmp	r3, r1
  409978:	eb00 0706 	add.w	r7, r0, r6
  40997c:	d20d      	bcs.n	40999a <critical_factorization+0x36>
  40997e:	5d3f      	ldrb	r7, [r7, r4]
  409980:	f810 c003 	ldrb.w	ip, [r0, r3]
  409984:	45bc      	cmp	ip, r7
  409986:	d22d      	bcs.n	4099e4 <critical_factorization+0x80>
  409988:	461d      	mov	r5, r3
  40998a:	2401      	movs	r4, #1
  40998c:	ebc6 0e03 	rsb	lr, r6, r3
  409990:	192b      	adds	r3, r5, r4
  409992:	428b      	cmp	r3, r1
  409994:	eb00 0706 	add.w	r7, r0, r6
  409998:	d3f1      	bcc.n	40997e <critical_factorization+0x1a>
  40999a:	f04f 0801 	mov.w	r8, #1
  40999e:	f8c2 e000 	str.w	lr, [r2]
  4099a2:	4644      	mov	r4, r8
  4099a4:	2500      	movs	r5, #0
  4099a6:	f04f 37ff 	mov.w	r7, #4294967295
  4099aa:	192b      	adds	r3, r5, r4
  4099ac:	4299      	cmp	r1, r3
  4099ae:	eb00 0e07 	add.w	lr, r0, r7
  4099b2:	d90e      	bls.n	4099d2 <critical_factorization+0x6e>
  4099b4:	f81e e004 	ldrb.w	lr, [lr, r4]
  4099b8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4099bc:	45f4      	cmp	ip, lr
  4099be:	d918      	bls.n	4099f2 <critical_factorization+0x8e>
  4099c0:	461d      	mov	r5, r3
  4099c2:	2401      	movs	r4, #1
  4099c4:	ebc7 0803 	rsb	r8, r7, r3
  4099c8:	192b      	adds	r3, r5, r4
  4099ca:	4299      	cmp	r1, r3
  4099cc:	eb00 0e07 	add.w	lr, r0, r7
  4099d0:	d8f0      	bhi.n	4099b4 <critical_factorization+0x50>
  4099d2:	3701      	adds	r7, #1
  4099d4:	1c70      	adds	r0, r6, #1
  4099d6:	4287      	cmp	r7, r0
  4099d8:	bf24      	itt	cs
  4099da:	f8c2 8000 	strcs.w	r8, [r2]
  4099de:	4638      	movcs	r0, r7
  4099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4099e4:	d00c      	beq.n	409a00 <critical_factorization+0x9c>
  4099e6:	f04f 0e01 	mov.w	lr, #1
  4099ea:	462e      	mov	r6, r5
  4099ec:	4674      	mov	r4, lr
  4099ee:	4475      	add	r5, lr
  4099f0:	e7c0      	b.n	409974 <critical_factorization+0x10>
  4099f2:	d00c      	beq.n	409a0e <critical_factorization+0xaa>
  4099f4:	f04f 0801 	mov.w	r8, #1
  4099f8:	462f      	mov	r7, r5
  4099fa:	4644      	mov	r4, r8
  4099fc:	4445      	add	r5, r8
  4099fe:	e7d4      	b.n	4099aa <critical_factorization+0x46>
  409a00:	4574      	cmp	r4, lr
  409a02:	bf09      	itett	eq
  409a04:	46a6      	moveq	lr, r4
  409a06:	3401      	addne	r4, #1
  409a08:	461d      	moveq	r5, r3
  409a0a:	2401      	moveq	r4, #1
  409a0c:	e7b2      	b.n	409974 <critical_factorization+0x10>
  409a0e:	4544      	cmp	r4, r8
  409a10:	bf09      	itett	eq
  409a12:	46a0      	moveq	r8, r4
  409a14:	3401      	addne	r4, #1
  409a16:	461d      	moveq	r5, r3
  409a18:	2401      	moveq	r4, #1
  409a1a:	e7c6      	b.n	4099aa <critical_factorization+0x46>

00409a1c <two_way_long_needle>:
  409a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409a20:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  409a24:	4616      	mov	r6, r2
  409a26:	4605      	mov	r5, r0
  409a28:	468b      	mov	fp, r1
  409a2a:	4610      	mov	r0, r2
  409a2c:	4619      	mov	r1, r3
  409a2e:	aa03      	add	r2, sp, #12
  409a30:	461c      	mov	r4, r3
  409a32:	f7ff ff97 	bl	409964 <critical_factorization>
  409a36:	ab03      	add	r3, sp, #12
  409a38:	4681      	mov	r9, r0
  409a3a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  409a3e:	f843 4f04 	str.w	r4, [r3, #4]!
  409a42:	4293      	cmp	r3, r2
  409a44:	d1fb      	bne.n	409a3e <two_way_long_needle+0x22>
  409a46:	b14c      	cbz	r4, 409a5c <two_way_long_needle+0x40>
  409a48:	1e63      	subs	r3, r4, #1
  409a4a:	4632      	mov	r2, r6
  409a4c:	a804      	add	r0, sp, #16
  409a4e:	f812 1b01 	ldrb.w	r1, [r2], #1
  409a52:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  409a56:	f113 33ff 	adds.w	r3, r3, #4294967295
  409a5a:	d2f8      	bcs.n	409a4e <two_way_long_needle+0x32>
  409a5c:	9903      	ldr	r1, [sp, #12]
  409a5e:	464a      	mov	r2, r9
  409a60:	4431      	add	r1, r6
  409a62:	4630      	mov	r0, r6
  409a64:	f005 fe74 	bl	40f750 <memcmp>
  409a68:	2800      	cmp	r0, #0
  409a6a:	d171      	bne.n	409b50 <two_way_long_needle+0x134>
  409a6c:	f109 33ff 	add.w	r3, r9, #4294967295
  409a70:	9300      	str	r3, [sp, #0]
  409a72:	18f3      	adds	r3, r6, r3
  409a74:	4682      	mov	sl, r0
  409a76:	9301      	str	r3, [sp, #4]
  409a78:	4623      	mov	r3, r4
  409a7a:	4680      	mov	r8, r0
  409a7c:	4654      	mov	r4, sl
  409a7e:	4658      	mov	r0, fp
  409a80:	469a      	mov	sl, r3
  409a82:	eb08 070a 	add.w	r7, r8, sl
  409a86:	1a3a      	subs	r2, r7, r0
  409a88:	2100      	movs	r1, #0
  409a8a:	4428      	add	r0, r5
  409a8c:	f005 fe10 	bl	40f6b0 <memchr>
  409a90:	2800      	cmp	r0, #0
  409a92:	d158      	bne.n	409b46 <two_way_long_needle+0x12a>
  409a94:	2f00      	cmp	r7, #0
  409a96:	d056      	beq.n	409b46 <two_way_long_needle+0x12a>
  409a98:	19eb      	adds	r3, r5, r7
  409a9a:	aa04      	add	r2, sp, #16
  409a9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  409aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409aa4:	b14b      	cbz	r3, 409aba <two_way_long_needle+0x9e>
  409aa6:	b124      	cbz	r4, 409ab2 <two_way_long_needle+0x96>
  409aa8:	9a03      	ldr	r2, [sp, #12]
  409aaa:	4293      	cmp	r3, r2
  409aac:	d201      	bcs.n	409ab2 <two_way_long_needle+0x96>
  409aae:	ebc2 030a 	rsb	r3, r2, sl
  409ab2:	4498      	add	r8, r3
  409ab4:	2400      	movs	r4, #0
  409ab6:	4638      	mov	r0, r7
  409ab8:	e7e3      	b.n	409a82 <two_way_long_needle+0x66>
  409aba:	454c      	cmp	r4, r9
  409abc:	4623      	mov	r3, r4
  409abe:	f10a 3eff 	add.w	lr, sl, #4294967295
  409ac2:	bf38      	it	cc
  409ac4:	464b      	movcc	r3, r9
  409ac6:	4573      	cmp	r3, lr
  409ac8:	d213      	bcs.n	409af2 <two_way_long_needle+0xd6>
  409aca:	eb08 0203 	add.w	r2, r8, r3
  409ace:	f816 c003 	ldrb.w	ip, [r6, r3]
  409ad2:	5ca8      	ldrb	r0, [r5, r2]
  409ad4:	4584      	cmp	ip, r0
  409ad6:	442a      	add	r2, r5
  409ad8:	eb06 0103 	add.w	r1, r6, r3
  409adc:	d006      	beq.n	409aec <two_way_long_needle+0xd0>
  409ade:	e02e      	b.n	409b3e <two_way_long_needle+0x122>
  409ae0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  409ae4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  409ae8:	4584      	cmp	ip, r0
  409aea:	d128      	bne.n	409b3e <two_way_long_needle+0x122>
  409aec:	3301      	adds	r3, #1
  409aee:	4573      	cmp	r3, lr
  409af0:	d3f6      	bcc.n	409ae0 <two_way_long_needle+0xc4>
  409af2:	454c      	cmp	r4, r9
  409af4:	9900      	ldr	r1, [sp, #0]
  409af6:	f080 808b 	bcs.w	409c10 <two_way_long_needle+0x1f4>
  409afa:	9b00      	ldr	r3, [sp, #0]
  409afc:	9801      	ldr	r0, [sp, #4]
  409afe:	eb08 0203 	add.w	r2, r8, r3
  409b02:	7803      	ldrb	r3, [r0, #0]
  409b04:	5ca8      	ldrb	r0, [r5, r2]
  409b06:	4283      	cmp	r3, r0
  409b08:	442a      	add	r2, r5
  409b0a:	f040 8081 	bne.w	409c10 <two_way_long_needle+0x1f4>
  409b0e:	9b01      	ldr	r3, [sp, #4]
  409b10:	eb06 0b04 	add.w	fp, r6, r4
  409b14:	e006      	b.n	409b24 <two_way_long_needle+0x108>
  409b16:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  409b1a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  409b1e:	4586      	cmp	lr, r0
  409b20:	d104      	bne.n	409b2c <two_way_long_needle+0x110>
  409b22:	4661      	mov	r1, ip
  409b24:	459b      	cmp	fp, r3
  409b26:	f101 3cff 	add.w	ip, r1, #4294967295
  409b2a:	d1f4      	bne.n	409b16 <two_way_long_needle+0xfa>
  409b2c:	3401      	adds	r4, #1
  409b2e:	428c      	cmp	r4, r1
  409b30:	d870      	bhi.n	409c14 <two_way_long_needle+0x1f8>
  409b32:	9c03      	ldr	r4, [sp, #12]
  409b34:	4638      	mov	r0, r7
  409b36:	44a0      	add	r8, r4
  409b38:	ebc4 040a 	rsb	r4, r4, sl
  409b3c:	e7a1      	b.n	409a82 <two_way_long_needle+0x66>
  409b3e:	f1c9 0201 	rsb	r2, r9, #1
  409b42:	4490      	add	r8, r2
  409b44:	e7b5      	b.n	409ab2 <two_way_long_needle+0x96>
  409b46:	2000      	movs	r0, #0
  409b48:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  409b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b50:	ebc9 0304 	rsb	r3, r9, r4
  409b54:	454b      	cmp	r3, r9
  409b56:	bf38      	it	cc
  409b58:	464b      	movcc	r3, r9
  409b5a:	3301      	adds	r3, #1
  409b5c:	f109 38ff 	add.w	r8, r9, #4294967295
  409b60:	9303      	str	r3, [sp, #12]
  409b62:	eb06 0308 	add.w	r3, r6, r8
  409b66:	4658      	mov	r0, fp
  409b68:	f04f 0a00 	mov.w	sl, #0
  409b6c:	46cb      	mov	fp, r9
  409b6e:	4699      	mov	r9, r3
  409b70:	eb0a 0704 	add.w	r7, sl, r4
  409b74:	1a3a      	subs	r2, r7, r0
  409b76:	2100      	movs	r1, #0
  409b78:	4428      	add	r0, r5
  409b7a:	f005 fd99 	bl	40f6b0 <memchr>
  409b7e:	2800      	cmp	r0, #0
  409b80:	d1e1      	bne.n	409b46 <two_way_long_needle+0x12a>
  409b82:	2f00      	cmp	r7, #0
  409b84:	d0df      	beq.n	409b46 <two_way_long_needle+0x12a>
  409b86:	19eb      	adds	r3, r5, r7
  409b88:	aa04      	add	r2, sp, #16
  409b8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  409b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409b92:	bba3      	cbnz	r3, 409bfe <two_way_long_needle+0x1e2>
  409b94:	1e61      	subs	r1, r4, #1
  409b96:	458b      	cmp	fp, r1
  409b98:	d215      	bcs.n	409bc6 <two_way_long_needle+0x1aa>
  409b9a:	eb0a 020b 	add.w	r2, sl, fp
  409b9e:	f816 300b 	ldrb.w	r3, [r6, fp]
  409ba2:	f815 e002 	ldrb.w	lr, [r5, r2]
  409ba6:	459e      	cmp	lr, r3
  409ba8:	442a      	add	r2, r5
  409baa:	eb06 000b 	add.w	r0, r6, fp
  409bae:	465b      	mov	r3, fp
  409bb0:	d006      	beq.n	409bc0 <two_way_long_needle+0x1a4>
  409bb2:	e027      	b.n	409c04 <two_way_long_needle+0x1e8>
  409bb4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  409bb8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  409bbc:	45f4      	cmp	ip, lr
  409bbe:	d121      	bne.n	409c04 <two_way_long_needle+0x1e8>
  409bc0:	3301      	adds	r3, #1
  409bc2:	428b      	cmp	r3, r1
  409bc4:	d3f6      	bcc.n	409bb4 <two_way_long_needle+0x198>
  409bc6:	f1b8 3fff 	cmp.w	r8, #4294967295
  409bca:	d011      	beq.n	409bf0 <two_way_long_needle+0x1d4>
  409bcc:	eb0a 0208 	add.w	r2, sl, r8
  409bd0:	f899 1000 	ldrb.w	r1, [r9]
  409bd4:	5cab      	ldrb	r3, [r5, r2]
  409bd6:	4299      	cmp	r1, r3
  409bd8:	442a      	add	r2, r5
  409bda:	d10f      	bne.n	409bfc <two_way_long_needle+0x1e0>
  409bdc:	464b      	mov	r3, r9
  409bde:	e005      	b.n	409bec <two_way_long_needle+0x1d0>
  409be0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  409be4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  409be8:	4288      	cmp	r0, r1
  409bea:	d107      	bne.n	409bfc <two_way_long_needle+0x1e0>
  409bec:	42b3      	cmp	r3, r6
  409bee:	d1f7      	bne.n	409be0 <two_way_long_needle+0x1c4>
  409bf0:	eb05 000a 	add.w	r0, r5, sl
  409bf4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  409bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bfc:	9b03      	ldr	r3, [sp, #12]
  409bfe:	449a      	add	sl, r3
  409c00:	4638      	mov	r0, r7
  409c02:	e7b5      	b.n	409b70 <two_way_long_needle+0x154>
  409c04:	f1cb 0201 	rsb	r2, fp, #1
  409c08:	4492      	add	sl, r2
  409c0a:	449a      	add	sl, r3
  409c0c:	4638      	mov	r0, r7
  409c0e:	e7af      	b.n	409b70 <two_way_long_needle+0x154>
  409c10:	4649      	mov	r1, r9
  409c12:	e78b      	b.n	409b2c <two_way_long_needle+0x110>
  409c14:	eb05 0008 	add.w	r0, r5, r8
  409c18:	e796      	b.n	409b48 <two_way_long_needle+0x12c>
  409c1a:	bf00      	nop

00409c1c <strstr>:
  409c1c:	7803      	ldrb	r3, [r0, #0]
  409c1e:	2b00      	cmp	r3, #0
  409c20:	f000 8104 	beq.w	409e2c <strstr+0x210>
  409c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c28:	f891 8000 	ldrb.w	r8, [r1]
  409c2c:	b085      	sub	sp, #20
  409c2e:	4644      	mov	r4, r8
  409c30:	f1b8 0f00 	cmp.w	r8, #0
  409c34:	d016      	beq.n	409c64 <strstr+0x48>
  409c36:	4686      	mov	lr, r0
  409c38:	f101 0c01 	add.w	ip, r1, #1
  409c3c:	2701      	movs	r7, #1
  409c3e:	e003      	b.n	409c48 <strstr+0x2c>
  409c40:	f812 4b01 	ldrb.w	r4, [r2], #1
  409c44:	b16c      	cbz	r4, 409c62 <strstr+0x46>
  409c46:	4694      	mov	ip, r2
  409c48:	429c      	cmp	r4, r3
  409c4a:	bf14      	ite	ne
  409c4c:	2700      	movne	r7, #0
  409c4e:	f007 0701 	andeq.w	r7, r7, #1
  409c52:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  409c56:	4662      	mov	r2, ip
  409c58:	2b00      	cmp	r3, #0
  409c5a:	d1f1      	bne.n	409c40 <strstr+0x24>
  409c5c:	f89c 3000 	ldrb.w	r3, [ip]
  409c60:	bb0b      	cbnz	r3, 409ca6 <strstr+0x8a>
  409c62:	b117      	cbz	r7, 409c6a <strstr+0x4e>
  409c64:	b005      	add	sp, #20
  409c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c6a:	460e      	mov	r6, r1
  409c6c:	4605      	mov	r5, r0
  409c6e:	4641      	mov	r1, r8
  409c70:	3001      	adds	r0, #1
  409c72:	ebc6 040c 	rsb	r4, r6, ip
  409c76:	f7ff fba1 	bl	4093bc <strchr>
  409c7a:	4607      	mov	r7, r0
  409c7c:	b198      	cbz	r0, 409ca6 <strstr+0x8a>
  409c7e:	2c01      	cmp	r4, #1
  409c80:	d0f0      	beq.n	409c64 <strstr+0x48>
  409c82:	1928      	adds	r0, r5, r4
  409c84:	4287      	cmp	r7, r0
  409c86:	bf94      	ite	ls
  409c88:	ebc7 0b00 	rsbls	fp, r7, r0
  409c8c:	f04f 0b01 	movhi.w	fp, #1
  409c90:	2c1f      	cmp	r4, #31
  409c92:	d90c      	bls.n	409cae <strstr+0x92>
  409c94:	4623      	mov	r3, r4
  409c96:	4632      	mov	r2, r6
  409c98:	4659      	mov	r1, fp
  409c9a:	4638      	mov	r0, r7
  409c9c:	f7ff febe 	bl	409a1c <two_way_long_needle>
  409ca0:	b005      	add	sp, #20
  409ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ca6:	2000      	movs	r0, #0
  409ca8:	b005      	add	sp, #20
  409caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409cae:	aa03      	add	r2, sp, #12
  409cb0:	4621      	mov	r1, r4
  409cb2:	4630      	mov	r0, r6
  409cb4:	f7ff fe56 	bl	409964 <critical_factorization>
  409cb8:	9903      	ldr	r1, [sp, #12]
  409cba:	4680      	mov	r8, r0
  409cbc:	4602      	mov	r2, r0
  409cbe:	4431      	add	r1, r6
  409cc0:	4630      	mov	r0, r6
  409cc2:	f005 fd45 	bl	40f750 <memcmp>
  409cc6:	2800      	cmp	r0, #0
  409cc8:	d158      	bne.n	409d7c <strstr+0x160>
  409cca:	f108 33ff 	add.w	r3, r8, #4294967295
  409cce:	9301      	str	r3, [sp, #4]
  409cd0:	18f3      	adds	r3, r6, r3
  409cd2:	4681      	mov	r9, r0
  409cd4:	4605      	mov	r5, r0
  409cd6:	9300      	str	r3, [sp, #0]
  409cd8:	4658      	mov	r0, fp
  409cda:	46b2      	mov	sl, r6
  409cdc:	1966      	adds	r6, r4, r5
  409cde:	1a32      	subs	r2, r6, r0
  409ce0:	2100      	movs	r1, #0
  409ce2:	4438      	add	r0, r7
  409ce4:	f005 fce4 	bl	40f6b0 <memchr>
  409ce8:	2800      	cmp	r0, #0
  409cea:	d1dc      	bne.n	409ca6 <strstr+0x8a>
  409cec:	2e00      	cmp	r6, #0
  409cee:	d0da      	beq.n	409ca6 <strstr+0x8a>
  409cf0:	45c8      	cmp	r8, r9
  409cf2:	4643      	mov	r3, r8
  409cf4:	bf38      	it	cc
  409cf6:	464b      	movcc	r3, r9
  409cf8:	429c      	cmp	r4, r3
  409cfa:	d912      	bls.n	409d22 <strstr+0x106>
  409cfc:	195a      	adds	r2, r3, r5
  409cfe:	f81a 1003 	ldrb.w	r1, [sl, r3]
  409d02:	5cb8      	ldrb	r0, [r7, r2]
  409d04:	4288      	cmp	r0, r1
  409d06:	443a      	add	r2, r7
  409d08:	eb0a 0e03 	add.w	lr, sl, r3
  409d0c:	d006      	beq.n	409d1c <strstr+0x100>
  409d0e:	e02d      	b.n	409d6c <strstr+0x150>
  409d10:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  409d14:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  409d18:	4288      	cmp	r0, r1
  409d1a:	d127      	bne.n	409d6c <strstr+0x150>
  409d1c:	3301      	adds	r3, #1
  409d1e:	429c      	cmp	r4, r3
  409d20:	d8f6      	bhi.n	409d10 <strstr+0xf4>
  409d22:	9b01      	ldr	r3, [sp, #4]
  409d24:	45c8      	cmp	r8, r9
  409d26:	4619      	mov	r1, r3
  409d28:	f240 8083 	bls.w	409e32 <strstr+0x216>
  409d2c:	18ea      	adds	r2, r5, r3
  409d2e:	9800      	ldr	r0, [sp, #0]
  409d30:	7803      	ldrb	r3, [r0, #0]
  409d32:	5cb8      	ldrb	r0, [r7, r2]
  409d34:	4283      	cmp	r3, r0
  409d36:	443a      	add	r2, r7
  409d38:	d17b      	bne.n	409e32 <strstr+0x216>
  409d3a:	9b00      	ldr	r3, [sp, #0]
  409d3c:	eb0a 0b09 	add.w	fp, sl, r9
  409d40:	e006      	b.n	409d50 <strstr+0x134>
  409d42:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  409d46:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  409d4a:	45f4      	cmp	ip, lr
  409d4c:	d104      	bne.n	409d58 <strstr+0x13c>
  409d4e:	4601      	mov	r1, r0
  409d50:	455b      	cmp	r3, fp
  409d52:	f101 30ff 	add.w	r0, r1, #4294967295
  409d56:	d1f4      	bne.n	409d42 <strstr+0x126>
  409d58:	f109 0901 	add.w	r9, r9, #1
  409d5c:	4589      	cmp	r9, r1
  409d5e:	d857      	bhi.n	409e10 <strstr+0x1f4>
  409d60:	9b03      	ldr	r3, [sp, #12]
  409d62:	4630      	mov	r0, r6
  409d64:	441d      	add	r5, r3
  409d66:	ebc3 0904 	rsb	r9, r3, r4
  409d6a:	e7b7      	b.n	409cdc <strstr+0xc0>
  409d6c:	f1c8 0201 	rsb	r2, r8, #1
  409d70:	4415      	add	r5, r2
  409d72:	441d      	add	r5, r3
  409d74:	f04f 0900 	mov.w	r9, #0
  409d78:	4630      	mov	r0, r6
  409d7a:	e7af      	b.n	409cdc <strstr+0xc0>
  409d7c:	ebc8 0304 	rsb	r3, r8, r4
  409d80:	4543      	cmp	r3, r8
  409d82:	bf38      	it	cc
  409d84:	4643      	movcc	r3, r8
  409d86:	3301      	adds	r3, #1
  409d88:	f108 39ff 	add.w	r9, r8, #4294967295
  409d8c:	9303      	str	r3, [sp, #12]
  409d8e:	eb06 0309 	add.w	r3, r6, r9
  409d92:	4658      	mov	r0, fp
  409d94:	2500      	movs	r5, #0
  409d96:	46bb      	mov	fp, r7
  409d98:	469a      	mov	sl, r3
  409d9a:	1967      	adds	r7, r4, r5
  409d9c:	1a3a      	subs	r2, r7, r0
  409d9e:	2100      	movs	r1, #0
  409da0:	4458      	add	r0, fp
  409da2:	f005 fc85 	bl	40f6b0 <memchr>
  409da6:	2800      	cmp	r0, #0
  409da8:	f47f af7d 	bne.w	409ca6 <strstr+0x8a>
  409dac:	2f00      	cmp	r7, #0
  409dae:	f43f af7a 	beq.w	409ca6 <strstr+0x8a>
  409db2:	4544      	cmp	r4, r8
  409db4:	d915      	bls.n	409de2 <strstr+0x1c6>
  409db6:	eb08 0205 	add.w	r2, r8, r5
  409dba:	f816 3008 	ldrb.w	r3, [r6, r8]
  409dbe:	f81b 0002 	ldrb.w	r0, [fp, r2]
  409dc2:	4298      	cmp	r0, r3
  409dc4:	445a      	add	r2, fp
  409dc6:	eb06 0108 	add.w	r1, r6, r8
  409dca:	4643      	mov	r3, r8
  409dcc:	d006      	beq.n	409ddc <strstr+0x1c0>
  409dce:	e023      	b.n	409e18 <strstr+0x1fc>
  409dd0:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  409dd4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  409dd8:	4586      	cmp	lr, r0
  409dda:	d11d      	bne.n	409e18 <strstr+0x1fc>
  409ddc:	3301      	adds	r3, #1
  409dde:	429c      	cmp	r4, r3
  409de0:	d8f6      	bhi.n	409dd0 <strstr+0x1b4>
  409de2:	f1b9 3fff 	cmp.w	r9, #4294967295
  409de6:	d012      	beq.n	409e0e <strstr+0x1f2>
  409de8:	eb05 0209 	add.w	r2, r5, r9
  409dec:	f89a 1000 	ldrb.w	r1, [sl]
  409df0:	f81b 3002 	ldrb.w	r3, [fp, r2]
  409df4:	4299      	cmp	r1, r3
  409df6:	445a      	add	r2, fp
  409df8:	d114      	bne.n	409e24 <strstr+0x208>
  409dfa:	4653      	mov	r3, sl
  409dfc:	e005      	b.n	409e0a <strstr+0x1ee>
  409dfe:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  409e02:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  409e06:	4288      	cmp	r0, r1
  409e08:	d10c      	bne.n	409e24 <strstr+0x208>
  409e0a:	42b3      	cmp	r3, r6
  409e0c:	d1f7      	bne.n	409dfe <strstr+0x1e2>
  409e0e:	465f      	mov	r7, fp
  409e10:	1978      	adds	r0, r7, r5
  409e12:	b005      	add	sp, #20
  409e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e18:	f1c8 0201 	rsb	r2, r8, #1
  409e1c:	4415      	add	r5, r2
  409e1e:	441d      	add	r5, r3
  409e20:	4638      	mov	r0, r7
  409e22:	e7ba      	b.n	409d9a <strstr+0x17e>
  409e24:	9b03      	ldr	r3, [sp, #12]
  409e26:	4638      	mov	r0, r7
  409e28:	441d      	add	r5, r3
  409e2a:	e7b6      	b.n	409d9a <strstr+0x17e>
  409e2c:	780b      	ldrb	r3, [r1, #0]
  409e2e:	b913      	cbnz	r3, 409e36 <strstr+0x21a>
  409e30:	4770      	bx	lr
  409e32:	4641      	mov	r1, r8
  409e34:	e790      	b.n	409d58 <strstr+0x13c>
  409e36:	2000      	movs	r0, #0
  409e38:	4770      	bx	lr
  409e3a:	bf00      	nop

00409e3c <sulp>:
  409e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e40:	460f      	mov	r7, r1
  409e42:	4690      	mov	r8, r2
  409e44:	f006 f818 	bl	40fe78 <__ulp>
  409e48:	4604      	mov	r4, r0
  409e4a:	460d      	mov	r5, r1
  409e4c:	f1b8 0f00 	cmp.w	r8, #0
  409e50:	d011      	beq.n	409e76 <sulp+0x3a>
  409e52:	f3c7 530a 	ubfx	r3, r7, #20, #11
  409e56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  409e5a:	2b00      	cmp	r3, #0
  409e5c:	dd0b      	ble.n	409e76 <sulp+0x3a>
  409e5e:	051b      	lsls	r3, r3, #20
  409e60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  409e64:	2400      	movs	r4, #0
  409e66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  409e6a:	4622      	mov	r2, r4
  409e6c:	462b      	mov	r3, r5
  409e6e:	f7fd ff8d 	bl	407d8c <__aeabi_dmul>
  409e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e76:	4620      	mov	r0, r4
  409e78:	4629      	mov	r1, r5
  409e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e7e:	bf00      	nop

00409e80 <_strtod_r>:
  409e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e84:	b09f      	sub	sp, #124	; 0x7c
  409e86:	460e      	mov	r6, r1
  409e88:	2100      	movs	r1, #0
  409e8a:	9205      	str	r2, [sp, #20]
  409e8c:	911a      	str	r1, [sp, #104]	; 0x68
  409e8e:	2200      	movs	r2, #0
  409e90:	2100      	movs	r1, #0
  409e92:	e9cd 1202 	strd	r1, r2, [sp, #8]
  409e96:	9619      	str	r6, [sp, #100]	; 0x64
  409e98:	4683      	mov	fp, r0
  409e9a:	4633      	mov	r3, r6
  409e9c:	461a      	mov	r2, r3
  409e9e:	f813 7b01 	ldrb.w	r7, [r3], #1
  409ea2:	2f2d      	cmp	r7, #45	; 0x2d
  409ea4:	f200 80ee 	bhi.w	40a084 <_strtod_r+0x204>
  409ea8:	e8df f017 	tbh	[pc, r7, lsl #1]
  409eac:	00ec002e 	.word	0x00ec002e
  409eb0:	00ec00ec 	.word	0x00ec00ec
  409eb4:	00ec00ec 	.word	0x00ec00ec
  409eb8:	00ec00ec 	.word	0x00ec00ec
  409ebc:	00db00ec 	.word	0x00db00ec
  409ec0:	00db00db 	.word	0x00db00db
  409ec4:	00db00db 	.word	0x00db00db
  409ec8:	00ec00ec 	.word	0x00ec00ec
  409ecc:	00ec00ec 	.word	0x00ec00ec
  409ed0:	00ec00ec 	.word	0x00ec00ec
  409ed4:	00ec00ec 	.word	0x00ec00ec
  409ed8:	00ec00ec 	.word	0x00ec00ec
  409edc:	00ec00ec 	.word	0x00ec00ec
  409ee0:	00ec00ec 	.word	0x00ec00ec
  409ee4:	00ec00ec 	.word	0x00ec00ec
  409ee8:	00ec00ec 	.word	0x00ec00ec
  409eec:	00ec00db 	.word	0x00ec00db
  409ef0:	00ec00ec 	.word	0x00ec00ec
  409ef4:	00ec00ec 	.word	0x00ec00ec
  409ef8:	00ec00ec 	.word	0x00ec00ec
  409efc:	00ec00ec 	.word	0x00ec00ec
  409f00:	004400ec 	.word	0x004400ec
  409f04:	00d800ec 	.word	0x00d800ec
  409f08:	9b05      	ldr	r3, [sp, #20]
  409f0a:	f04f 0900 	mov.w	r9, #0
  409f0e:	f04f 0a00 	mov.w	sl, #0
  409f12:	b153      	cbz	r3, 409f2a <_strtod_r+0xaa>
  409f14:	2300      	movs	r3, #0
  409f16:	9306      	str	r3, [sp, #24]
  409f18:	9b05      	ldr	r3, [sp, #20]
  409f1a:	601e      	str	r6, [r3, #0]
  409f1c:	9b06      	ldr	r3, [sp, #24]
  409f1e:	b123      	cbz	r3, 409f2a <_strtod_r+0xaa>
  409f20:	4649      	mov	r1, r9
  409f22:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
  409f26:	4689      	mov	r9, r1
  409f28:	469a      	mov	sl, r3
  409f2a:	4648      	mov	r0, r9
  409f2c:	4651      	mov	r1, sl
  409f2e:	b01f      	add	sp, #124	; 0x7c
  409f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f34:	2300      	movs	r3, #0
  409f36:	9306      	str	r3, [sp, #24]
  409f38:	1c54      	adds	r4, r2, #1
  409f3a:	9419      	str	r4, [sp, #100]	; 0x64
  409f3c:	7857      	ldrb	r7, [r2, #1]
  409f3e:	2f00      	cmp	r7, #0
  409f40:	d0e2      	beq.n	409f08 <_strtod_r+0x88>
  409f42:	2f30      	cmp	r7, #48	; 0x30
  409f44:	f000 80a4 	beq.w	40a090 <_strtod_r+0x210>
  409f48:	9408      	str	r4, [sp, #32]
  409f4a:	f04f 0a00 	mov.w	sl, #0
  409f4e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  409f52:	f04f 0800 	mov.w	r8, #0
  409f56:	2b09      	cmp	r3, #9
  409f58:	4645      	mov	r5, r8
  409f5a:	4623      	mov	r3, r4
  409f5c:	4644      	mov	r4, r8
  409f5e:	d819      	bhi.n	409f94 <_strtod_r+0x114>
  409f60:	2c08      	cmp	r4, #8
  409f62:	bfc8      	it	gt
  409f64:	eb08 0888 	addgt.w	r8, r8, r8, lsl #2
  409f68:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  409f6c:	f103 0301 	add.w	r3, r3, #1
  409f70:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  409f74:	9319      	str	r3, [sp, #100]	; 0x64
  409f76:	bfc4      	itt	gt
  409f78:	eb07 0748 	addgt.w	r7, r7, r8, lsl #1
  409f7c:	f1a7 0830 	subgt.w	r8, r7, #48	; 0x30
  409f80:	781f      	ldrb	r7, [r3, #0]
  409f82:	bfd8      	it	le
  409f84:	f1a2 0530 	suble.w	r5, r2, #48	; 0x30
  409f88:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
  409f8c:	2a09      	cmp	r2, #9
  409f8e:	f104 0401 	add.w	r4, r4, #1
  409f92:	d9e5      	bls.n	409f60 <_strtod_r+0xe0>
  409f94:	4658      	mov	r0, fp
  409f96:	9307      	str	r3, [sp, #28]
  409f98:	f005 fb12 	bl	40f5c0 <_localeconv_r>
  409f9c:	f8d0 9000 	ldr.w	r9, [r0]
  409fa0:	4658      	mov	r0, fp
  409fa2:	f005 fb0d 	bl	40f5c0 <_localeconv_r>
  409fa6:	6800      	ldr	r0, [r0, #0]
  409fa8:	f7ff fbea 	bl	409780 <strlen>
  409fac:	9b07      	ldr	r3, [sp, #28]
  409fae:	4602      	mov	r2, r0
  409fb0:	4649      	mov	r1, r9
  409fb2:	4618      	mov	r0, r3
  409fb4:	f7ff fc52 	bl	40985c <strncmp>
  409fb8:	4681      	mov	r9, r0
  409fba:	2800      	cmp	r0, #0
  409fbc:	f000 80e2 	beq.w	40a184 <_strtod_r+0x304>
  409fc0:	2000      	movs	r0, #0
  409fc2:	4684      	mov	ip, r0
  409fc4:	4686      	mov	lr, r0
  409fc6:	46a1      	mov	r9, r4
  409fc8:	2f65      	cmp	r7, #101	; 0x65
  409fca:	d073      	beq.n	40a0b4 <_strtod_r+0x234>
  409fcc:	2f45      	cmp	r7, #69	; 0x45
  409fce:	d071      	beq.n	40a0b4 <_strtod_r+0x234>
  409fd0:	2300      	movs	r3, #0
  409fd2:	f1b9 0f00 	cmp.w	r9, #0
  409fd6:	d046      	beq.n	40a066 <_strtod_r+0x1e6>
  409fd8:	f1b9 0f10 	cmp.w	r9, #16
  409fdc:	ebcc 0303 	rsb	r3, ip, r3
  409fe0:	4628      	mov	r0, r5
  409fe2:	46ca      	mov	sl, r9
  409fe4:	930a      	str	r3, [sp, #40]	; 0x28
  409fe6:	bfa8      	it	ge
  409fe8:	f04f 0a10 	movge.w	sl, #16
  409fec:	f7fd fe58 	bl	407ca0 <__aeabi_ui2d>
  409ff0:	2c00      	cmp	r4, #0
  409ff2:	bf08      	it	eq
  409ff4:	464c      	moveq	r4, r9
  409ff6:	f1ba 0f09 	cmp.w	sl, #9
  409ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409ffe:	dd13      	ble.n	40a028 <_strtod_r+0x1a8>
  40a000:	4b73      	ldr	r3, [pc, #460]	; (40a1d0 <_strtod_r+0x350>)
  40a002:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  40a006:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  40a00a:	f7fd febf 	bl	407d8c <__aeabi_dmul>
  40a00e:	4606      	mov	r6, r0
  40a010:	4640      	mov	r0, r8
  40a012:	460f      	mov	r7, r1
  40a014:	f7fd fe44 	bl	407ca0 <__aeabi_ui2d>
  40a018:	4602      	mov	r2, r0
  40a01a:	460b      	mov	r3, r1
  40a01c:	4630      	mov	r0, r6
  40a01e:	4639      	mov	r1, r7
  40a020:	f7fd fd02 	bl	407a28 <__adddf3>
  40a024:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a028:	f1b9 0f0f 	cmp.w	r9, #15
  40a02c:	f300 80d8 	bgt.w	40a1e0 <_strtod_r+0x360>
  40a030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a032:	2b00      	cmp	r3, #0
  40a034:	f000 80a3 	beq.w	40a17e <_strtod_r+0x2fe>
  40a038:	f340 855a 	ble.w	40aaf0 <_strtod_r+0xc70>
  40a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a03e:	2b16      	cmp	r3, #22
  40a040:	f300 8497 	bgt.w	40a972 <_strtod_r+0xaf2>
  40a044:	4962      	ldr	r1, [pc, #392]	; (40a1d0 <_strtod_r+0x350>)
  40a046:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a04a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a04e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a052:	f7fd fe9b 	bl	407d8c <__aeabi_dmul>
  40a056:	4681      	mov	r9, r0
  40a058:	468a      	mov	sl, r1
  40a05a:	e00d      	b.n	40a078 <_strtod_r+0x1f8>
  40a05c:	2301      	movs	r3, #1
  40a05e:	9306      	str	r3, [sp, #24]
  40a060:	e76a      	b.n	409f38 <_strtod_r+0xb8>
  40a062:	9319      	str	r3, [sp, #100]	; 0x64
  40a064:	e71a      	b.n	409e9c <_strtod_r+0x1c>
  40a066:	b918      	cbnz	r0, 40a070 <_strtod_r+0x1f0>
  40a068:	f1ba 0f00 	cmp.w	sl, #0
  40a06c:	f000 82a0 	beq.w	40a5b0 <_strtod_r+0x730>
  40a070:	f04f 0900 	mov.w	r9, #0
  40a074:	f04f 0a00 	mov.w	sl, #0
  40a078:	9b05      	ldr	r3, [sp, #20]
  40a07a:	2b00      	cmp	r3, #0
  40a07c:	f43f af4e 	beq.w	409f1c <_strtod_r+0x9c>
  40a080:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40a082:	e749      	b.n	409f18 <_strtod_r+0x98>
  40a084:	2300      	movs	r3, #0
  40a086:	2f30      	cmp	r7, #48	; 0x30
  40a088:	4614      	mov	r4, r2
  40a08a:	9306      	str	r3, [sp, #24]
  40a08c:	f47f af5c 	bne.w	409f48 <_strtod_r+0xc8>
  40a090:	7863      	ldrb	r3, [r4, #1]
  40a092:	2b58      	cmp	r3, #88	; 0x58
  40a094:	f000 8346 	beq.w	40a724 <_strtod_r+0x8a4>
  40a098:	2b78      	cmp	r3, #120	; 0x78
  40a09a:	f000 8343 	beq.w	40a724 <_strtod_r+0x8a4>
  40a09e:	3401      	adds	r4, #1
  40a0a0:	9419      	str	r4, [sp, #100]	; 0x64
  40a0a2:	7827      	ldrb	r7, [r4, #0]
  40a0a4:	2f30      	cmp	r7, #48	; 0x30
  40a0a6:	d0fa      	beq.n	40a09e <_strtod_r+0x21e>
  40a0a8:	2f00      	cmp	r7, #0
  40a0aa:	d0e1      	beq.n	40a070 <_strtod_r+0x1f0>
  40a0ac:	9408      	str	r4, [sp, #32]
  40a0ae:	f04f 0a01 	mov.w	sl, #1
  40a0b2:	e74c      	b.n	409f4e <_strtod_r+0xce>
  40a0b4:	f1b9 0f00 	cmp.w	r9, #0
  40a0b8:	f000 8216 	beq.w	40a4e8 <_strtod_r+0x668>
  40a0bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40a0be:	1c73      	adds	r3, r6, #1
  40a0c0:	9319      	str	r3, [sp, #100]	; 0x64
  40a0c2:	7877      	ldrb	r7, [r6, #1]
  40a0c4:	2f2b      	cmp	r7, #43	; 0x2b
  40a0c6:	f000 826a 	beq.w	40a59e <_strtod_r+0x71e>
  40a0ca:	2f2d      	cmp	r7, #45	; 0x2d
  40a0cc:	f000 8261 	beq.w	40a592 <_strtod_r+0x712>
  40a0d0:	2300      	movs	r3, #0
  40a0d2:	9307      	str	r3, [sp, #28]
  40a0d4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  40a0d8:	2b09      	cmp	r3, #9
  40a0da:	f200 8219 	bhi.w	40a510 <_strtod_r+0x690>
  40a0de:	2f30      	cmp	r7, #48	; 0x30
  40a0e0:	d105      	bne.n	40a0ee <_strtod_r+0x26e>
  40a0e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a0e4:	3301      	adds	r3, #1
  40a0e6:	9319      	str	r3, [sp, #100]	; 0x64
  40a0e8:	781f      	ldrb	r7, [r3, #0]
  40a0ea:	2f30      	cmp	r7, #48	; 0x30
  40a0ec:	d0fa      	beq.n	40a0e4 <_strtod_r+0x264>
  40a0ee:	f1a7 0331 	sub.w	r3, r7, #49	; 0x31
  40a0f2:	2b08      	cmp	r3, #8
  40a0f4:	f63f af6c 	bhi.w	409fd0 <_strtod_r+0x150>
  40a0f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a0fa:	930a      	str	r3, [sp, #40]	; 0x28
  40a0fc:	4619      	mov	r1, r3
  40a0fe:	1c5a      	adds	r2, r3, #1
  40a100:	9219      	str	r2, [sp, #100]	; 0x64
  40a102:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  40a106:	784f      	ldrb	r7, [r1, #1]
  40a108:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
  40a10c:	2909      	cmp	r1, #9
  40a10e:	d80c      	bhi.n	40a12a <_strtod_r+0x2aa>
  40a110:	3201      	adds	r2, #1
  40a112:	9219      	str	r2, [sp, #100]	; 0x64
  40a114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40a118:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  40a11c:	7817      	ldrb	r7, [r2, #0]
  40a11e:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
  40a122:	2909      	cmp	r1, #9
  40a124:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  40a128:	d9f2      	bls.n	40a110 <_strtod_r+0x290>
  40a12a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a12c:	1a52      	subs	r2, r2, r1
  40a12e:	2a08      	cmp	r2, #8
  40a130:	f300 8416 	bgt.w	40a960 <_strtod_r+0xae0>
  40a134:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40a138:	4293      	cmp	r3, r2
  40a13a:	bfa8      	it	ge
  40a13c:	4613      	movge	r3, r2
  40a13e:	9a07      	ldr	r2, [sp, #28]
  40a140:	2a00      	cmp	r2, #0
  40a142:	f43f af46 	beq.w	409fd2 <_strtod_r+0x152>
  40a146:	425b      	negs	r3, r3
  40a148:	f1b9 0f00 	cmp.w	r9, #0
  40a14c:	f47f af44 	bne.w	409fd8 <_strtod_r+0x158>
  40a150:	e789      	b.n	40a066 <_strtod_r+0x1e6>
  40a152:	a819      	add	r0, sp, #100	; 0x64
  40a154:	491f      	ldr	r1, [pc, #124]	; (40a1d4 <_strtod_r+0x354>)
  40a156:	f005 f951 	bl	40f3fc <__match>
  40a15a:	2800      	cmp	r0, #0
  40a15c:	f43f aed4 	beq.w	409f08 <_strtod_r+0x88>
  40a160:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a162:	491d      	ldr	r1, [pc, #116]	; (40a1d8 <_strtod_r+0x358>)
  40a164:	3b01      	subs	r3, #1
  40a166:	a819      	add	r0, sp, #100	; 0x64
  40a168:	9319      	str	r3, [sp, #100]	; 0x64
  40a16a:	f005 f947 	bl	40f3fc <__match>
  40a16e:	b910      	cbnz	r0, 40a176 <_strtod_r+0x2f6>
  40a170:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a172:	3301      	adds	r3, #1
  40a174:	9319      	str	r3, [sp, #100]	; 0x64
  40a176:	4b19      	ldr	r3, [pc, #100]	; (40a1dc <_strtod_r+0x35c>)
  40a178:	9303      	str	r3, [sp, #12]
  40a17a:	2300      	movs	r3, #0
  40a17c:	9302      	str	r3, [sp, #8]
  40a17e:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40a182:	e779      	b.n	40a078 <_strtod_r+0x1f8>
  40a184:	4658      	mov	r0, fp
  40a186:	f005 fa1b 	bl	40f5c0 <_localeconv_r>
  40a18a:	6800      	ldr	r0, [r0, #0]
  40a18c:	f7ff faf8 	bl	409780 <strlen>
  40a190:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a192:	1813      	adds	r3, r2, r0
  40a194:	9319      	str	r3, [sp, #100]	; 0x64
  40a196:	5c17      	ldrb	r7, [r2, r0]
  40a198:	2c00      	cmp	r4, #0
  40a19a:	f040 81e8 	bne.w	40a56e <_strtod_r+0x6ee>
  40a19e:	2f30      	cmp	r7, #48	; 0x30
  40a1a0:	4620      	mov	r0, r4
  40a1a2:	d106      	bne.n	40a1b2 <_strtod_r+0x332>
  40a1a4:	3301      	adds	r3, #1
  40a1a6:	9319      	str	r3, [sp, #100]	; 0x64
  40a1a8:	781f      	ldrb	r7, [r3, #0]
  40a1aa:	2f30      	cmp	r7, #48	; 0x30
  40a1ac:	f100 0001 	add.w	r0, r0, #1
  40a1b0:	d0f8      	beq.n	40a1a4 <_strtod_r+0x324>
  40a1b2:	f1a7 0331 	sub.w	r3, r7, #49	; 0x31
  40a1b6:	2b08      	cmp	r3, #8
  40a1b8:	f240 843b 	bls.w	40aa32 <_strtod_r+0xbb2>
  40a1bc:	2f65      	cmp	r7, #101	; 0x65
  40a1be:	f000 818f 	beq.w	40a4e0 <_strtod_r+0x660>
  40a1c2:	f04f 0900 	mov.w	r9, #0
  40a1c6:	46cc      	mov	ip, r9
  40a1c8:	f04f 0e01 	mov.w	lr, #1
  40a1cc:	e6fe      	b.n	409fcc <_strtod_r+0x14c>
  40a1ce:	bf00      	nop
  40a1d0:	00412fe0 	.word	0x00412fe0
  40a1d4:	00412cec 	.word	0x00412cec
  40a1d8:	00412cf0 	.word	0x00412cf0
  40a1dc:	7ff00000 	.word	0x7ff00000
  40a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a1e2:	ebca 0a09 	rsb	sl, sl, r9
  40a1e6:	449a      	add	sl, r3
  40a1e8:	f1ba 0f00 	cmp.w	sl, #0
  40a1ec:	f340 835f 	ble.w	40a8ae <_strtod_r+0xa2e>
  40a1f0:	f01a 010f 	ands.w	r1, sl, #15
  40a1f4:	d00a      	beq.n	40a20c <_strtod_r+0x38c>
  40a1f6:	4bb4      	ldr	r3, [pc, #720]	; (40a4c8 <_strtod_r+0x648>)
  40a1f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40a1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a204:	f7fd fdc2 	bl	407d8c <__aeabi_dmul>
  40a208:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a20c:	f03a 060f 	bics.w	r6, sl, #15
  40a210:	f040 8226 	bne.w	40a660 <_strtod_r+0x7e0>
  40a214:	2300      	movs	r3, #0
  40a216:	9307      	str	r3, [sp, #28]
  40a218:	9500      	str	r5, [sp, #0]
  40a21a:	464b      	mov	r3, r9
  40a21c:	4622      	mov	r2, r4
  40a21e:	9908      	ldr	r1, [sp, #32]
  40a220:	4658      	mov	r0, fp
  40a222:	f005 fb9b 	bl	40f95c <__s2b>
  40a226:	900e      	str	r0, [sp, #56]	; 0x38
  40a228:	2800      	cmp	r0, #0
  40a22a:	f000 82c0 	beq.w	40a7ae <_strtod_r+0x92e>
  40a22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a230:	2100      	movs	r1, #0
  40a232:	2a00      	cmp	r2, #0
  40a234:	f1c2 0300 	rsb	r3, r2, #0
  40a238:	bfa8      	it	ge
  40a23a:	460b      	movge	r3, r1
  40a23c:	930b      	str	r3, [sp, #44]	; 0x2c
  40a23e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40a242:	930a      	str	r3, [sp, #40]	; 0x28
  40a244:	460f      	mov	r7, r1
  40a246:	468a      	mov	sl, r1
  40a248:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40a24a:	4658      	mov	r0, fp
  40a24c:	6861      	ldr	r1, [r4, #4]
  40a24e:	f005 fb15 	bl	40f87c <_Balloc>
  40a252:	4680      	mov	r8, r0
  40a254:	2800      	cmp	r0, #0
  40a256:	f000 82d0 	beq.w	40a7fa <_strtod_r+0x97a>
  40a25a:	6922      	ldr	r2, [r4, #16]
  40a25c:	3202      	adds	r2, #2
  40a25e:	f104 010c 	add.w	r1, r4, #12
  40a262:	0092      	lsls	r2, r2, #2
  40a264:	300c      	adds	r0, #12
  40a266:	f7fe fed5 	bl	409014 <memcpy>
  40a26a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  40a26e:	a81c      	add	r0, sp, #112	; 0x70
  40a270:	a91b      	add	r1, sp, #108	; 0x6c
  40a272:	e9cd 3408 	strd	r3, r4, [sp, #32]
  40a276:	461a      	mov	r2, r3
  40a278:	9001      	str	r0, [sp, #4]
  40a27a:	4623      	mov	r3, r4
  40a27c:	9100      	str	r1, [sp, #0]
  40a27e:	4658      	mov	r0, fp
  40a280:	f005 fe86 	bl	40ff90 <__d2b>
  40a284:	901a      	str	r0, [sp, #104]	; 0x68
  40a286:	2800      	cmp	r0, #0
  40a288:	f000 8444 	beq.w	40ab14 <_strtod_r+0xc94>
  40a28c:	2101      	movs	r1, #1
  40a28e:	4658      	mov	r0, fp
  40a290:	f005 fbfe 	bl	40fa90 <__i2b>
  40a294:	4607      	mov	r7, r0
  40a296:	2800      	cmp	r0, #0
  40a298:	f000 82af 	beq.w	40a7fa <_strtod_r+0x97a>
  40a29c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40a29e:	2b00      	cmp	r3, #0
  40a2a0:	f2c0 812a 	blt.w	40a4f8 <_strtod_r+0x678>
  40a2a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a2a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40a2a8:	18d6      	adds	r6, r2, r3
  40a2aa:	9907      	ldr	r1, [sp, #28]
  40a2ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  40a2ae:	4a87      	ldr	r2, [pc, #540]	; (40a4cc <_strtod_r+0x64c>)
  40a2b0:	1a5b      	subs	r3, r3, r1
  40a2b2:	4423      	add	r3, r4
  40a2b4:	3b01      	subs	r3, #1
  40a2b6:	4293      	cmp	r3, r2
  40a2b8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  40a2bc:	f280 80e7 	bge.w	40a48e <_strtod_r+0x60e>
  40a2c0:	1ad2      	subs	r2, r2, r3
  40a2c2:	2a1f      	cmp	r2, #31
  40a2c4:	eba4 0402 	sub.w	r4, r4, r2
  40a2c8:	f300 811a 	bgt.w	40a500 <_strtod_r+0x680>
  40a2cc:	2301      	movs	r3, #1
  40a2ce:	4093      	lsls	r3, r2
  40a2d0:	930d      	str	r3, [sp, #52]	; 0x34
  40a2d2:	2300      	movs	r3, #0
  40a2d4:	930f      	str	r3, [sp, #60]	; 0x3c
  40a2d6:	4425      	add	r5, r4
  40a2d8:	9b07      	ldr	r3, [sp, #28]
  40a2da:	4434      	add	r4, r6
  40a2dc:	42a6      	cmp	r6, r4
  40a2de:	441d      	add	r5, r3
  40a2e0:	4633      	mov	r3, r6
  40a2e2:	bfa8      	it	ge
  40a2e4:	4623      	movge	r3, r4
  40a2e6:	42ab      	cmp	r3, r5
  40a2e8:	bfa8      	it	ge
  40a2ea:	462b      	movge	r3, r5
  40a2ec:	2b00      	cmp	r3, #0
  40a2ee:	dd02      	ble.n	40a2f6 <_strtod_r+0x476>
  40a2f0:	1ae4      	subs	r4, r4, r3
  40a2f2:	1aed      	subs	r5, r5, r3
  40a2f4:	1af6      	subs	r6, r6, r3
  40a2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a2f8:	b1bb      	cbz	r3, 40a32a <_strtod_r+0x4aa>
  40a2fa:	4639      	mov	r1, r7
  40a2fc:	461a      	mov	r2, r3
  40a2fe:	4658      	mov	r0, fp
  40a300:	f005 fc68 	bl	40fbd4 <__pow5mult>
  40a304:	4607      	mov	r7, r0
  40a306:	2800      	cmp	r0, #0
  40a308:	f000 8277 	beq.w	40a7fa <_strtod_r+0x97a>
  40a30c:	4601      	mov	r1, r0
  40a30e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40a310:	4658      	mov	r0, fp
  40a312:	f005 fbc7 	bl	40faa4 <__multiply>
  40a316:	2800      	cmp	r0, #0
  40a318:	f000 826f 	beq.w	40a7fa <_strtod_r+0x97a>
  40a31c:	900c      	str	r0, [sp, #48]	; 0x30
  40a31e:	991a      	ldr	r1, [sp, #104]	; 0x68
  40a320:	4658      	mov	r0, fp
  40a322:	f005 fad1 	bl	40f8c8 <_Bfree>
  40a326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a328:	931a      	str	r3, [sp, #104]	; 0x68
  40a32a:	2c00      	cmp	r4, #0
  40a32c:	dd08      	ble.n	40a340 <_strtod_r+0x4c0>
  40a32e:	4622      	mov	r2, r4
  40a330:	991a      	ldr	r1, [sp, #104]	; 0x68
  40a332:	4658      	mov	r0, fp
  40a334:	f005 fc9e 	bl	40fc74 <__lshift>
  40a338:	901a      	str	r0, [sp, #104]	; 0x68
  40a33a:	2800      	cmp	r0, #0
  40a33c:	f000 83ea 	beq.w	40ab14 <_strtod_r+0xc94>
  40a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a342:	b143      	cbz	r3, 40a356 <_strtod_r+0x4d6>
  40a344:	4641      	mov	r1, r8
  40a346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a348:	4658      	mov	r0, fp
  40a34a:	f005 fc43 	bl	40fbd4 <__pow5mult>
  40a34e:	4680      	mov	r8, r0
  40a350:	2800      	cmp	r0, #0
  40a352:	f000 8252 	beq.w	40a7fa <_strtod_r+0x97a>
  40a356:	2d00      	cmp	r5, #0
  40a358:	dd08      	ble.n	40a36c <_strtod_r+0x4ec>
  40a35a:	4641      	mov	r1, r8
  40a35c:	462a      	mov	r2, r5
  40a35e:	4658      	mov	r0, fp
  40a360:	f005 fc88 	bl	40fc74 <__lshift>
  40a364:	4680      	mov	r8, r0
  40a366:	2800      	cmp	r0, #0
  40a368:	f000 8247 	beq.w	40a7fa <_strtod_r+0x97a>
  40a36c:	2e00      	cmp	r6, #0
  40a36e:	dd08      	ble.n	40a382 <_strtod_r+0x502>
  40a370:	4639      	mov	r1, r7
  40a372:	4632      	mov	r2, r6
  40a374:	4658      	mov	r0, fp
  40a376:	f005 fc7d 	bl	40fc74 <__lshift>
  40a37a:	4607      	mov	r7, r0
  40a37c:	2800      	cmp	r0, #0
  40a37e:	f000 823c 	beq.w	40a7fa <_strtod_r+0x97a>
  40a382:	4642      	mov	r2, r8
  40a384:	991a      	ldr	r1, [sp, #104]	; 0x68
  40a386:	4658      	mov	r0, fp
  40a388:	f005 fcec 	bl	40fd64 <__mdiff>
  40a38c:	4682      	mov	sl, r0
  40a38e:	2800      	cmp	r0, #0
  40a390:	f000 8233 	beq.w	40a7fa <_strtod_r+0x97a>
  40a394:	2600      	movs	r6, #0
  40a396:	68c3      	ldr	r3, [r0, #12]
  40a398:	60c6      	str	r6, [r0, #12]
  40a39a:	4639      	mov	r1, r7
  40a39c:	930c      	str	r3, [sp, #48]	; 0x30
  40a39e:	f005 fcc1 	bl	40fd24 <__mcmp>
  40a3a2:	42b0      	cmp	r0, r6
  40a3a4:	f2c0 83b9 	blt.w	40ab1a <_strtod_r+0xc9a>
  40a3a8:	f000 840a 	beq.w	40abc0 <_strtod_r+0xd40>
  40a3ac:	4639      	mov	r1, r7
  40a3ae:	4650      	mov	r0, sl
  40a3b0:	f005 fe4a 	bl	410048 <__ratio>
  40a3b4:	2200      	movs	r2, #0
  40a3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a3ba:	4604      	mov	r4, r0
  40a3bc:	460d      	mov	r5, r1
  40a3be:	f7fd ff61 	bl	408284 <__aeabi_dcmple>
  40a3c2:	2800      	cmp	r0, #0
  40a3c4:	d068      	beq.n	40a498 <_strtod_r+0x618>
  40a3c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a3c8:	2b00      	cmp	r3, #0
  40a3ca:	f000 80ad 	beq.w	40a528 <_strtod_r+0x6a8>
  40a3ce:	9b03      	ldr	r3, [sp, #12]
  40a3d0:	4d3f      	ldr	r5, [pc, #252]	; (40a4d0 <_strtod_r+0x650>)
  40a3d2:	960d      	str	r6, [sp, #52]	; 0x34
  40a3d4:	4699      	mov	r9, r3
  40a3d6:	4b3e      	ldr	r3, [pc, #248]	; (40a4d0 <_strtod_r+0x650>)
  40a3d8:	930f      	str	r3, [sp, #60]	; 0x3c
  40a3da:	2400      	movs	r4, #0
  40a3dc:	4e3d      	ldr	r6, [pc, #244]	; (40a4d4 <_strtod_r+0x654>)
  40a3de:	4b3e      	ldr	r3, [pc, #248]	; (40a4d8 <_strtod_r+0x658>)
  40a3e0:	464a      	mov	r2, r9
  40a3e2:	4016      	ands	r6, r2
  40a3e4:	429e      	cmp	r6, r3
  40a3e6:	f000 81b8 	beq.w	40a75a <_strtod_r+0x8da>
  40a3ea:	9b07      	ldr	r3, [sp, #28]
  40a3ec:	b333      	cbz	r3, 40a43c <_strtod_r+0x5bc>
  40a3ee:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
  40a3f2:	d823      	bhi.n	40a43c <_strtod_r+0x5bc>
  40a3f4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40a3f8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a3fa:	4649      	mov	r1, r9
  40a3fc:	a330      	add	r3, pc, #192	; (adr r3, 40a4c0 <_strtod_r+0x640>)
  40a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a402:	f7fd ff3f 	bl	408284 <__aeabi_dcmple>
  40a406:	b1b0      	cbz	r0, 40a436 <_strtod_r+0x5b6>
  40a408:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a40a:	4649      	mov	r1, r9
  40a40c:	f7fd ff6e 	bl	4082ec <__aeabi_d2uiz>
  40a410:	2800      	cmp	r0, #0
  40a412:	f000 82d0 	beq.w	40a9b6 <_strtod_r+0xb36>
  40a416:	f7fd fc43 	bl	407ca0 <__aeabi_ui2d>
  40a41a:	900d      	str	r0, [sp, #52]	; 0x34
  40a41c:	910f      	str	r1, [sp, #60]	; 0x3c
  40a41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a420:	2b00      	cmp	r3, #0
  40a422:	f040 82c3 	bne.w	40a9ac <_strtod_r+0xb2c>
  40a426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a428:	9312      	str	r3, [sp, #72]	; 0x48
  40a42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a42c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40a430:	9313      	str	r3, [sp, #76]	; 0x4c
  40a432:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  40a436:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  40a43a:	1b9d      	subs	r5, r3, r6
  40a43c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a440:	f005 fd1a 	bl	40fe78 <__ulp>
  40a444:	4602      	mov	r2, r0
  40a446:	460b      	mov	r3, r1
  40a448:	4620      	mov	r0, r4
  40a44a:	4629      	mov	r1, r5
  40a44c:	f7fd fc9e 	bl	407d8c <__aeabi_dmul>
  40a450:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40a454:	f7fd fae8 	bl	407a28 <__adddf3>
  40a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a45c:	460c      	mov	r4, r1
  40a45e:	9b07      	ldr	r3, [sp, #28]
  40a460:	b923      	cbnz	r3, 40a46c <_strtod_r+0x5ec>
  40a462:	4b1c      	ldr	r3, [pc, #112]	; (40a4d4 <_strtod_r+0x654>)
  40a464:	4023      	ands	r3, r4
  40a466:	429e      	cmp	r6, r3
  40a468:	f000 81e8 	beq.w	40a83c <_strtod_r+0x9bc>
  40a46c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40a46e:	4658      	mov	r0, fp
  40a470:	f005 fa2a 	bl	40f8c8 <_Bfree>
  40a474:	4641      	mov	r1, r8
  40a476:	4658      	mov	r0, fp
  40a478:	f005 fa26 	bl	40f8c8 <_Bfree>
  40a47c:	4639      	mov	r1, r7
  40a47e:	4658      	mov	r0, fp
  40a480:	f005 fa22 	bl	40f8c8 <_Bfree>
  40a484:	4651      	mov	r1, sl
  40a486:	4658      	mov	r0, fp
  40a488:	f005 fa1e 	bl	40f8c8 <_Bfree>
  40a48c:	e6dc      	b.n	40a248 <_strtod_r+0x3c8>
  40a48e:	2300      	movs	r3, #0
  40a490:	930f      	str	r3, [sp, #60]	; 0x3c
  40a492:	2301      	movs	r3, #1
  40a494:	930d      	str	r3, [sp, #52]	; 0x34
  40a496:	e71e      	b.n	40a2d6 <_strtod_r+0x456>
  40a498:	4b10      	ldr	r3, [pc, #64]	; (40a4dc <_strtod_r+0x65c>)
  40a49a:	4620      	mov	r0, r4
  40a49c:	4629      	mov	r1, r5
  40a49e:	2200      	movs	r2, #0
  40a4a0:	f7fd fc74 	bl	407d8c <__aeabi_dmul>
  40a4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a4a6:	900d      	str	r0, [sp, #52]	; 0x34
  40a4a8:	910f      	str	r1, [sp, #60]	; 0x3c
  40a4aa:	2b00      	cmp	r3, #0
  40a4ac:	d137      	bne.n	40a51e <_strtod_r+0x69e>
  40a4ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40a4b2:	9010      	str	r0, [sp, #64]	; 0x40
  40a4b4:	9311      	str	r3, [sp, #68]	; 0x44
  40a4b6:	9b03      	ldr	r3, [sp, #12]
  40a4b8:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40a4bc:	4699      	mov	r9, r3
  40a4be:	e78d      	b.n	40a3dc <_strtod_r+0x55c>
  40a4c0:	ffc00000 	.word	0xffc00000
  40a4c4:	41dfffff 	.word	0x41dfffff
  40a4c8:	00412fe0 	.word	0x00412fe0
  40a4cc:	fffffc02 	.word	0xfffffc02
  40a4d0:	3ff00000 	.word	0x3ff00000
  40a4d4:	7ff00000 	.word	0x7ff00000
  40a4d8:	7fe00000 	.word	0x7fe00000
  40a4dc:	3fe00000 	.word	0x3fe00000
  40a4e0:	f04f 0c00 	mov.w	ip, #0
  40a4e4:	f04f 0e01 	mov.w	lr, #1
  40a4e8:	2800      	cmp	r0, #0
  40a4ea:	d15e      	bne.n	40a5aa <_strtod_r+0x72a>
  40a4ec:	f1ba 0f00 	cmp.w	sl, #0
  40a4f0:	f43f ad0a 	beq.w	409f08 <_strtod_r+0x88>
  40a4f4:	4681      	mov	r9, r0
  40a4f6:	e5e1      	b.n	40a0bc <_strtod_r+0x23c>
  40a4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a4fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a4fc:	1ad5      	subs	r5, r2, r3
  40a4fe:	e6d4      	b.n	40a2aa <_strtod_r+0x42a>
  40a500:	4ab0      	ldr	r2, [pc, #704]	; (40a7c4 <_strtod_r+0x944>)
  40a502:	1ad2      	subs	r2, r2, r3
  40a504:	2301      	movs	r3, #1
  40a506:	fa03 f202 	lsl.w	r2, r3, r2
  40a50a:	920f      	str	r2, [sp, #60]	; 0x3c
  40a50c:	930d      	str	r3, [sp, #52]	; 0x34
  40a50e:	e6e2      	b.n	40a2d6 <_strtod_r+0x456>
  40a510:	9619      	str	r6, [sp, #100]	; 0x64
  40a512:	2300      	movs	r3, #0
  40a514:	f1b9 0f00 	cmp.w	r9, #0
  40a518:	f47f ad5e 	bne.w	409fd8 <_strtod_r+0x158>
  40a51c:	e5a3      	b.n	40a066 <_strtod_r+0x1e6>
  40a51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a522:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  40a526:	e7c6      	b.n	40a4b6 <_strtod_r+0x636>
  40a528:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40a52c:	2900      	cmp	r1, #0
  40a52e:	f040 80db 	bne.w	40a6e8 <_strtod_r+0x868>
  40a532:	f3c2 0313 	ubfx	r3, r2, #0, #20
  40a536:	4691      	mov	r9, r2
  40a538:	2b00      	cmp	r3, #0
  40a53a:	f040 80db 	bne.w	40a6f4 <_strtod_r+0x874>
  40a53e:	2200      	movs	r2, #0
  40a540:	4ba1      	ldr	r3, [pc, #644]	; (40a7c8 <_strtod_r+0x948>)
  40a542:	4620      	mov	r0, r4
  40a544:	4629      	mov	r1, r5
  40a546:	f7fd fe93 	bl	408270 <__aeabi_dcmplt>
  40a54a:	2800      	cmp	r0, #0
  40a54c:	f040 835f 	bne.w	40ac0e <_strtod_r+0xd8e>
  40a550:	4b9e      	ldr	r3, [pc, #632]	; (40a7cc <_strtod_r+0x94c>)
  40a552:	4620      	mov	r0, r4
  40a554:	4629      	mov	r1, r5
  40a556:	2200      	movs	r2, #0
  40a558:	f7fd fc18 	bl	407d8c <__aeabi_dmul>
  40a55c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40a560:	900d      	str	r0, [sp, #52]	; 0x34
  40a562:	9016      	str	r0, [sp, #88]	; 0x58
  40a564:	910f      	str	r1, [sp, #60]	; 0x3c
  40a566:	9317      	str	r3, [sp, #92]	; 0x5c
  40a568:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40a56c:	e736      	b.n	40a3dc <_strtod_r+0x55c>
  40a56e:	4648      	mov	r0, r9
  40a570:	46cc      	mov	ip, r9
  40a572:	46a1      	mov	r9, r4
  40a574:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  40a578:	2b09      	cmp	r3, #9
  40a57a:	d813      	bhi.n	40a5a4 <_strtod_r+0x724>
  40a57c:	1c42      	adds	r2, r0, #1
  40a57e:	461f      	mov	r7, r3
  40a580:	2b00      	cmp	r3, #0
  40a582:	f040 822d 	bne.w	40a9e0 <_strtod_r+0xb60>
  40a586:	4610      	mov	r0, r2
  40a588:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a58a:	1c53      	adds	r3, r2, #1
  40a58c:	9319      	str	r3, [sp, #100]	; 0x64
  40a58e:	7857      	ldrb	r7, [r2, #1]
  40a590:	e7f0      	b.n	40a574 <_strtod_r+0x6f4>
  40a592:	2301      	movs	r3, #1
  40a594:	9307      	str	r3, [sp, #28]
  40a596:	1cb3      	adds	r3, r6, #2
  40a598:	9319      	str	r3, [sp, #100]	; 0x64
  40a59a:	78b7      	ldrb	r7, [r6, #2]
  40a59c:	e59a      	b.n	40a0d4 <_strtod_r+0x254>
  40a59e:	2300      	movs	r3, #0
  40a5a0:	9307      	str	r3, [sp, #28]
  40a5a2:	e7f8      	b.n	40a596 <_strtod_r+0x716>
  40a5a4:	f04f 0e01 	mov.w	lr, #1
  40a5a8:	e50e      	b.n	409fc8 <_strtod_r+0x148>
  40a5aa:	f04f 0900 	mov.w	r9, #0
  40a5ae:	e585      	b.n	40a0bc <_strtod_r+0x23c>
  40a5b0:	f1be 0f00 	cmp.w	lr, #0
  40a5b4:	f47f aca8 	bne.w	409f08 <_strtod_r+0x88>
  40a5b8:	3f49      	subs	r7, #73	; 0x49
  40a5ba:	2f25      	cmp	r7, #37	; 0x25
  40a5bc:	f63f aca4 	bhi.w	409f08 <_strtod_r+0x88>
  40a5c0:	a301      	add	r3, pc, #4	; (adr r3, 40a5c8 <_strtod_r+0x748>)
  40a5c2:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
  40a5c6:	bf00      	nop
  40a5c8:	0040a153 	.word	0x0040a153
  40a5cc:	00409f09 	.word	0x00409f09
  40a5d0:	00409f09 	.word	0x00409f09
  40a5d4:	00409f09 	.word	0x00409f09
  40a5d8:	00409f09 	.word	0x00409f09
  40a5dc:	0040a703 	.word	0x0040a703
  40a5e0:	00409f09 	.word	0x00409f09
  40a5e4:	00409f09 	.word	0x00409f09
  40a5e8:	00409f09 	.word	0x00409f09
  40a5ec:	00409f09 	.word	0x00409f09
  40a5f0:	00409f09 	.word	0x00409f09
  40a5f4:	00409f09 	.word	0x00409f09
  40a5f8:	00409f09 	.word	0x00409f09
  40a5fc:	00409f09 	.word	0x00409f09
  40a600:	00409f09 	.word	0x00409f09
  40a604:	00409f09 	.word	0x00409f09
  40a608:	00409f09 	.word	0x00409f09
  40a60c:	00409f09 	.word	0x00409f09
  40a610:	00409f09 	.word	0x00409f09
  40a614:	00409f09 	.word	0x00409f09
  40a618:	00409f09 	.word	0x00409f09
  40a61c:	00409f09 	.word	0x00409f09
  40a620:	00409f09 	.word	0x00409f09
  40a624:	00409f09 	.word	0x00409f09
  40a628:	00409f09 	.word	0x00409f09
  40a62c:	00409f09 	.word	0x00409f09
  40a630:	00409f09 	.word	0x00409f09
  40a634:	00409f09 	.word	0x00409f09
  40a638:	00409f09 	.word	0x00409f09
  40a63c:	00409f09 	.word	0x00409f09
  40a640:	00409f09 	.word	0x00409f09
  40a644:	00409f09 	.word	0x00409f09
  40a648:	0040a153 	.word	0x0040a153
  40a64c:	00409f09 	.word	0x00409f09
  40a650:	00409f09 	.word	0x00409f09
  40a654:	00409f09 	.word	0x00409f09
  40a658:	00409f09 	.word	0x00409f09
  40a65c:	0040a703 	.word	0x0040a703
  40a660:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  40a664:	f300 80a3 	bgt.w	40a7ae <_strtod_r+0x92e>
  40a668:	1136      	asrs	r6, r6, #4
  40a66a:	2e01      	cmp	r6, #1
  40a66c:	f8df a180 	ldr.w	sl, [pc, #384]	; 40a7f0 <_strtod_r+0x970>
  40a670:	f340 82e5 	ble.w	40ac3e <_strtod_r+0xdbe>
  40a674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a678:	2300      	movs	r3, #0
  40a67a:	4657      	mov	r7, sl
  40a67c:	4698      	mov	r8, r3
  40a67e:	f016 0f01 	tst.w	r6, #1
  40a682:	f108 0801 	add.w	r8, r8, #1
  40a686:	ea4f 0666 	mov.w	r6, r6, asr #1
  40a68a:	d004      	beq.n	40a696 <_strtod_r+0x816>
  40a68c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40a690:	f7fd fb7c 	bl	407d8c <__aeabi_dmul>
  40a694:	2301      	movs	r3, #1
  40a696:	2e01      	cmp	r6, #1
  40a698:	f107 0708 	add.w	r7, r7, #8
  40a69c:	d1ef      	bne.n	40a67e <_strtod_r+0x7fe>
  40a69e:	2b00      	cmp	r3, #0
  40a6a0:	f040 8340 	bne.w	40ad24 <_strtod_r+0xea4>
  40a6a4:	9b03      	ldr	r3, [sp, #12]
  40a6a6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40a6aa:	9303      	str	r3, [sp, #12]
  40a6ac:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
  40a6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a6b4:	e9d8 0100 	ldrd	r0, r1, [r8]
  40a6b8:	f7fd fb68 	bl	407d8c <__aeabi_dmul>
  40a6bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40a6c0:	0d1b      	lsrs	r3, r3, #20
  40a6c2:	4a43      	ldr	r2, [pc, #268]	; (40a7d0 <_strtod_r+0x950>)
  40a6c4:	051b      	lsls	r3, r3, #20
  40a6c6:	4293      	cmp	r3, r2
  40a6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a6cc:	d86f      	bhi.n	40a7ae <_strtod_r+0x92e>
  40a6ce:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  40a6d2:	4293      	cmp	r3, r2
  40a6d4:	f240 8296 	bls.w	40ac04 <_strtod_r+0xd84>
  40a6d8:	4b3e      	ldr	r3, [pc, #248]	; (40a7d4 <_strtod_r+0x954>)
  40a6da:	9303      	str	r3, [sp, #12]
  40a6dc:	2300      	movs	r3, #0
  40a6de:	9307      	str	r3, [sp, #28]
  40a6e0:	f04f 33ff 	mov.w	r3, #4294967295
  40a6e4:	9302      	str	r3, [sp, #8]
  40a6e6:	e597      	b.n	40a218 <_strtod_r+0x398>
  40a6e8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40a6ec:	2901      	cmp	r1, #1
  40a6ee:	f000 8166 	beq.w	40a9be <_strtod_r+0xb3e>
  40a6f2:	4691      	mov	r9, r2
  40a6f4:	2300      	movs	r3, #0
  40a6f6:	930d      	str	r3, [sp, #52]	; 0x34
  40a6f8:	4b33      	ldr	r3, [pc, #204]	; (40a7c8 <_strtod_r+0x948>)
  40a6fa:	4d37      	ldr	r5, [pc, #220]	; (40a7d8 <_strtod_r+0x958>)
  40a6fc:	930f      	str	r3, [sp, #60]	; 0x3c
  40a6fe:	2400      	movs	r4, #0
  40a700:	e66c      	b.n	40a3dc <_strtod_r+0x55c>
  40a702:	a819      	add	r0, sp, #100	; 0x64
  40a704:	4935      	ldr	r1, [pc, #212]	; (40a7dc <_strtod_r+0x95c>)
  40a706:	f004 fe79 	bl	40f3fc <__match>
  40a70a:	2800      	cmp	r0, #0
  40a70c:	f43f abfc 	beq.w	409f08 <_strtod_r+0x88>
  40a710:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a712:	781b      	ldrb	r3, [r3, #0]
  40a714:	2b28      	cmp	r3, #40	; 0x28
  40a716:	f000 82d5 	beq.w	40acc4 <_strtod_r+0xe44>
  40a71a:	4b31      	ldr	r3, [pc, #196]	; (40a7e0 <_strtod_r+0x960>)
  40a71c:	9303      	str	r3, [sp, #12]
  40a71e:	2300      	movs	r3, #0
  40a720:	9302      	str	r3, [sp, #8]
  40a722:	e52c      	b.n	40a17e <_strtod_r+0x2fe>
  40a724:	9a06      	ldr	r2, [sp, #24]
  40a726:	9201      	str	r2, [sp, #4]
  40a728:	ab1a      	add	r3, sp, #104	; 0x68
  40a72a:	9300      	str	r3, [sp, #0]
  40a72c:	4a2d      	ldr	r2, [pc, #180]	; (40a7e4 <_strtod_r+0x964>)
  40a72e:	ab1b      	add	r3, sp, #108	; 0x6c
  40a730:	a919      	add	r1, sp, #100	; 0x64
  40a732:	4658      	mov	r0, fp
  40a734:	f004 fbda 	bl	40eeec <__gethex>
  40a738:	f010 0607 	ands.w	r6, r0, #7
  40a73c:	4605      	mov	r5, r0
  40a73e:	f43f ac97 	beq.w	40a070 <_strtod_r+0x1f0>
  40a742:	2e06      	cmp	r6, #6
  40a744:	f040 8183 	bne.w	40aa4e <_strtod_r+0xbce>
  40a748:	1c63      	adds	r3, r4, #1
  40a74a:	9319      	str	r3, [sp, #100]	; 0x64
  40a74c:	2300      	movs	r3, #0
  40a74e:	f04f 0900 	mov.w	r9, #0
  40a752:	f04f 0a00 	mov.w	sl, #0
  40a756:	9306      	str	r3, [sp, #24]
  40a758:	e48e      	b.n	40a078 <_strtod_r+0x1f8>
  40a75a:	f1a9 7354 	sub.w	r3, r9, #55574528	; 0x3500000
  40a75e:	9303      	str	r3, [sp, #12]
  40a760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a764:	4610      	mov	r0, r2
  40a766:	4619      	mov	r1, r3
  40a768:	f005 fb86 	bl	40fe78 <__ulp>
  40a76c:	4602      	mov	r2, r0
  40a76e:	460b      	mov	r3, r1
  40a770:	4620      	mov	r0, r4
  40a772:	4629      	mov	r1, r5
  40a774:	f7fd fb0a 	bl	407d8c <__aeabi_dmul>
  40a778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a77c:	f7fd f954 	bl	407a28 <__adddf3>
  40a780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40a784:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a788:	0d1b      	lsrs	r3, r3, #20
  40a78a:	4a17      	ldr	r2, [pc, #92]	; (40a7e8 <_strtod_r+0x968>)
  40a78c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a790:	051b      	lsls	r3, r3, #20
  40a792:	4293      	cmp	r3, r2
  40a794:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40a798:	f240 80e6 	bls.w	40a968 <_strtod_r+0xae8>
  40a79c:	4b0d      	ldr	r3, [pc, #52]	; (40a7d4 <_strtod_r+0x954>)
  40a79e:	4299      	cmp	r1, r3
  40a7a0:	d028      	beq.n	40a7f4 <_strtod_r+0x974>
  40a7a2:	4b0c      	ldr	r3, [pc, #48]	; (40a7d4 <_strtod_r+0x954>)
  40a7a4:	9303      	str	r3, [sp, #12]
  40a7a6:	f04f 33ff 	mov.w	r3, #4294967295
  40a7aa:	9302      	str	r3, [sp, #8]
  40a7ac:	e65e      	b.n	40a46c <_strtod_r+0x5ec>
  40a7ae:	4b0f      	ldr	r3, [pc, #60]	; (40a7ec <_strtod_r+0x96c>)
  40a7b0:	9303      	str	r3, [sp, #12]
  40a7b2:	2200      	movs	r2, #0
  40a7b4:	2322      	movs	r3, #34	; 0x22
  40a7b6:	9202      	str	r2, [sp, #8]
  40a7b8:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40a7bc:	f8cb 3000 	str.w	r3, [fp]
  40a7c0:	e45a      	b.n	40a078 <_strtod_r+0x1f8>
  40a7c2:	bf00      	nop
  40a7c4:	fffffbe2 	.word	0xfffffbe2
  40a7c8:	3ff00000 	.word	0x3ff00000
  40a7cc:	3fe00000 	.word	0x3fe00000
  40a7d0:	7ca00000 	.word	0x7ca00000
  40a7d4:	7fefffff 	.word	0x7fefffff
  40a7d8:	bff00000 	.word	0xbff00000
  40a7dc:	00412cf8 	.word	0x00412cf8
  40a7e0:	fff80000 	.word	0xfff80000
  40a7e4:	00412d28 	.word	0x00412d28
  40a7e8:	7c9fffff 	.word	0x7c9fffff
  40a7ec:	7ff00000 	.word	0x7ff00000
  40a7f0:	004130a8 	.word	0x004130a8
  40a7f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a7f6:	3301      	adds	r3, #1
  40a7f8:	d1d3      	bne.n	40a7a2 <_strtod_r+0x922>
  40a7fa:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40a7fe:	981a      	ldr	r0, [sp, #104]	; 0x68
  40a800:	4bb1      	ldr	r3, [pc, #708]	; (40aac8 <_strtod_r+0xc48>)
  40a802:	9303      	str	r3, [sp, #12]
  40a804:	2200      	movs	r2, #0
  40a806:	9202      	str	r2, [sp, #8]
  40a808:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40a80c:	2322      	movs	r3, #34	; 0x22
  40a80e:	f8cb 3000 	str.w	r3, [fp]
  40a812:	4601      	mov	r1, r0
  40a814:	4658      	mov	r0, fp
  40a816:	f005 f857 	bl	40f8c8 <_Bfree>
  40a81a:	4641      	mov	r1, r8
  40a81c:	4658      	mov	r0, fp
  40a81e:	f005 f853 	bl	40f8c8 <_Bfree>
  40a822:	4639      	mov	r1, r7
  40a824:	4658      	mov	r0, fp
  40a826:	f005 f84f 	bl	40f8c8 <_Bfree>
  40a82a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a82c:	4658      	mov	r0, fp
  40a82e:	f005 f84b 	bl	40f8c8 <_Bfree>
  40a832:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a834:	4658      	mov	r0, fp
  40a836:	f005 f847 	bl	40f8c8 <_Bfree>
  40a83a:	e41d      	b.n	40a078 <_strtod_r+0x1f8>
  40a83c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40a83e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40a840:	4630      	mov	r0, r6
  40a842:	4629      	mov	r1, r5
  40a844:	f006 f900 	bl	410a48 <__aeabi_d2iz>
  40a848:	f7fd fa3a 	bl	407cc0 <__aeabi_i2d>
  40a84c:	460b      	mov	r3, r1
  40a84e:	4602      	mov	r2, r0
  40a850:	4629      	mov	r1, r5
  40a852:	4630      	mov	r0, r6
  40a854:	f7fd f8e6 	bl	407a24 <__aeabi_dsub>
  40a858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a85a:	4605      	mov	r5, r0
  40a85c:	460e      	mov	r6, r1
  40a85e:	b993      	cbnz	r3, 40a886 <_strtod_r+0xa06>
  40a860:	9b02      	ldr	r3, [sp, #8]
  40a862:	b983      	cbnz	r3, 40a886 <_strtod_r+0xa06>
  40a864:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40a868:	b96c      	cbnz	r4, 40a886 <_strtod_r+0xa06>
  40a86a:	a391      	add	r3, pc, #580	; (adr r3, 40aab0 <_strtod_r+0xc30>)
  40a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a870:	f7fd fcfe 	bl	408270 <__aeabi_dcmplt>
  40a874:	2800      	cmp	r0, #0
  40a876:	f43f adf9 	beq.w	40a46c <_strtod_r+0x5ec>
  40a87a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40a87e:	981a      	ldr	r0, [sp, #104]	; 0x68
  40a880:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40a884:	e7c5      	b.n	40a812 <_strtod_r+0x992>
  40a886:	a38c      	add	r3, pc, #560	; (adr r3, 40aab8 <_strtod_r+0xc38>)
  40a888:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a88c:	4628      	mov	r0, r5
  40a88e:	4631      	mov	r1, r6
  40a890:	f7fd fcee 	bl	408270 <__aeabi_dcmplt>
  40a894:	2800      	cmp	r0, #0
  40a896:	d1f0      	bne.n	40a87a <_strtod_r+0x9fa>
  40a898:	4628      	mov	r0, r5
  40a89a:	4631      	mov	r1, r6
  40a89c:	a388      	add	r3, pc, #544	; (adr r3, 40aac0 <_strtod_r+0xc40>)
  40a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a8a2:	f7fd fd03 	bl	4082ac <__aeabi_dcmpgt>
  40a8a6:	2800      	cmp	r0, #0
  40a8a8:	f43f ade0 	beq.w	40a46c <_strtod_r+0x5ec>
  40a8ac:	e7e5      	b.n	40a87a <_strtod_r+0x9fa>
  40a8ae:	f43f acb1 	beq.w	40a214 <_strtod_r+0x394>
  40a8b2:	f1ca 0600 	rsb	r6, sl, #0
  40a8b6:	f016 020f 	ands.w	r2, r6, #15
  40a8ba:	d00a      	beq.n	40a8d2 <_strtod_r+0xa52>
  40a8bc:	4b83      	ldr	r3, [pc, #524]	; (40aacc <_strtod_r+0xc4c>)
  40a8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a8ca:	f7fd fb89 	bl	407fe0 <__aeabi_ddiv>
  40a8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40a8d2:	1136      	asrs	r6, r6, #4
  40a8d4:	f43f ac9e 	beq.w	40a214 <_strtod_r+0x394>
  40a8d8:	2e1f      	cmp	r6, #31
  40a8da:	dc38      	bgt.n	40a94e <_strtod_r+0xace>
  40a8dc:	f016 0310 	ands.w	r3, r6, #16
  40a8e0:	f000 81e0 	beq.w	40aca4 <_strtod_r+0xe24>
  40a8e4:	236a      	movs	r3, #106	; 0x6a
  40a8e6:	2e00      	cmp	r6, #0
  40a8e8:	9307      	str	r3, [sp, #28]
  40a8ea:	dd13      	ble.n	40a914 <_strtod_r+0xa94>
  40a8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a8f0:	4f77      	ldr	r7, [pc, #476]	; (40aad0 <_strtod_r+0xc50>)
  40a8f2:	2300      	movs	r3, #0
  40a8f4:	07f2      	lsls	r2, r6, #31
  40a8f6:	d504      	bpl.n	40a902 <_strtod_r+0xa82>
  40a8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
  40a8fc:	f7fd fa46 	bl	407d8c <__aeabi_dmul>
  40a900:	2301      	movs	r3, #1
  40a902:	1076      	asrs	r6, r6, #1
  40a904:	f107 0708 	add.w	r7, r7, #8
  40a908:	d1f4      	bne.n	40a8f4 <_strtod_r+0xa74>
  40a90a:	2b00      	cmp	r3, #0
  40a90c:	f040 81fc 	bne.w	40ad08 <_strtod_r+0xe88>
  40a910:	9b07      	ldr	r3, [sp, #28]
  40a912:	b19b      	cbz	r3, 40a93c <_strtod_r+0xabc>
  40a914:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40a918:	f3c2 530a 	ubfx	r3, r2, #20, #11
  40a91c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40a920:	2b00      	cmp	r3, #0
  40a922:	4611      	mov	r1, r2
  40a924:	dd0a      	ble.n	40a93c <_strtod_r+0xabc>
  40a926:	2b1f      	cmp	r3, #31
  40a928:	f340 81c4 	ble.w	40acb4 <_strtod_r+0xe34>
  40a92c:	2200      	movs	r2, #0
  40a92e:	2b34      	cmp	r3, #52	; 0x34
  40a930:	9202      	str	r2, [sp, #8]
  40a932:	f340 81ef 	ble.w	40ad14 <_strtod_r+0xe94>
  40a936:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40a93a:	9303      	str	r3, [sp, #12]
  40a93c:	2200      	movs	r2, #0
  40a93e:	2300      	movs	r3, #0
  40a940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a944:	f7fd fc8a 	bl	40825c <__aeabi_dcmpeq>
  40a948:	2800      	cmp	r0, #0
  40a94a:	f43f ac65 	beq.w	40a218 <_strtod_r+0x398>
  40a94e:	2322      	movs	r3, #34	; 0x22
  40a950:	f8cb 3000 	str.w	r3, [fp]
  40a954:	f04f 0900 	mov.w	r9, #0
  40a958:	f04f 0a00 	mov.w	sl, #0
  40a95c:	f7ff bb8c 	b.w	40a078 <_strtod_r+0x1f8>
  40a960:	f644 631f 	movw	r3, #19999	; 0x4e1f
  40a964:	f7ff bbeb 	b.w	40a13e <_strtod_r+0x2be>
  40a968:	9b03      	ldr	r3, [sp, #12]
  40a96a:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
  40a96e:	9403      	str	r4, [sp, #12]
  40a970:	e575      	b.n	40a45e <_strtod_r+0x5de>
  40a972:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40a974:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
  40a978:	429e      	cmp	r6, r3
  40a97a:	f73f ac31 	bgt.w	40a1e0 <_strtod_r+0x360>
  40a97e:	4c53      	ldr	r4, [pc, #332]	; (40aacc <_strtod_r+0xc4c>)
  40a980:	f1c9 090f 	rsb	r9, r9, #15
  40a984:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
  40a988:	ebc9 0906 	rsb	r9, r9, r6
  40a98c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a990:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
  40a994:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a998:	f7fd f9f8 	bl	407d8c <__aeabi_dmul>
  40a99c:	e9d4 2300 	ldrd	r2, r3, [r4]
  40a9a0:	f7fd f9f4 	bl	407d8c <__aeabi_dmul>
  40a9a4:	4681      	mov	r9, r0
  40a9a6:	468a      	mov	sl, r1
  40a9a8:	f7ff bb66 	b.w	40a078 <_strtod_r+0x1f8>
  40a9ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a9b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40a9b4:	e53d      	b.n	40a432 <_strtod_r+0x5b2>
  40a9b6:	4a47      	ldr	r2, [pc, #284]	; (40aad4 <_strtod_r+0xc54>)
  40a9b8:	920f      	str	r2, [sp, #60]	; 0x3c
  40a9ba:	900d      	str	r0, [sp, #52]	; 0x34
  40a9bc:	e52f      	b.n	40a41e <_strtod_r+0x59e>
  40a9be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40a9c2:	4691      	mov	r9, r2
  40a9c4:	2a00      	cmp	r2, #0
  40a9c6:	f47f ae95 	bne.w	40a6f4 <_strtod_r+0x874>
  40a9ca:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40a9ce:	2322      	movs	r3, #34	; 0x22
  40a9d0:	f8cb 3000 	str.w	r3, [fp]
  40a9d4:	981a      	ldr	r0, [sp, #104]	; 0x68
  40a9d6:	f04f 0900 	mov.w	r9, #0
  40a9da:	f04f 0a00 	mov.w	sl, #0
  40a9de:	e718      	b.n	40a812 <_strtod_r+0x992>
  40a9e0:	2a01      	cmp	r2, #1
  40a9e2:	4494      	add	ip, r2
  40a9e4:	bf18      	it	ne
  40a9e6:	4448      	addne	r0, r9
  40a9e8:	d103      	bne.n	40a9f2 <_strtod_r+0xb72>
  40a9ea:	e188      	b.n	40acfe <_strtod_r+0xe7e>
  40a9ec:	0055      	lsls	r5, r2, #1
  40a9ee:	4581      	cmp	r9, r0
  40a9f0:	d00f      	beq.n	40aa12 <_strtod_r+0xb92>
  40a9f2:	f109 0901 	add.w	r9, r9, #1
  40a9f6:	f109 32ff 	add.w	r2, r9, #4294967295
  40a9fa:	2a08      	cmp	r2, #8
  40a9fc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  40aa00:	ddf4      	ble.n	40a9ec <_strtod_r+0xb6c>
  40aa02:	f1b9 0f10 	cmp.w	r9, #16
  40aa06:	bfdc      	itt	le
  40aa08:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  40aa0c:	ea4f 0848 	movle.w	r8, r8, lsl #1
  40aa10:	e7ed      	b.n	40a9ee <_strtod_r+0xb6e>
  40aa12:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40aa14:	f109 0901 	add.w	r9, r9, #1
  40aa18:	2808      	cmp	r0, #8
  40aa1a:	dd12      	ble.n	40aa42 <_strtod_r+0xbc2>
  40aa1c:	f1b9 0f10 	cmp.w	r9, #16
  40aa20:	bfd8      	it	le
  40aa22:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  40aa26:	f04f 0000 	mov.w	r0, #0
  40aa2a:	bfd8      	it	le
  40aa2c:	eb03 0848 	addle.w	r8, r3, r8, lsl #1
  40aa30:	e5ab      	b.n	40a58a <_strtod_r+0x70a>
  40aa32:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40aa34:	9308      	str	r3, [sp, #32]
  40aa36:	3f30      	subs	r7, #48	; 0x30
  40aa38:	f100 0c01 	add.w	ip, r0, #1
  40aa3c:	461a      	mov	r2, r3
  40aa3e:	f04f 0901 	mov.w	r9, #1
  40aa42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40aa46:	eb07 0545 	add.w	r5, r7, r5, lsl #1
  40aa4a:	2000      	movs	r0, #0
  40aa4c:	e59d      	b.n	40a58a <_strtod_r+0x70a>
  40aa4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40aa50:	b13a      	cbz	r2, 40aa62 <_strtod_r+0xbe2>
  40aa52:	2135      	movs	r1, #53	; 0x35
  40aa54:	a81c      	add	r0, sp, #112	; 0x70
  40aa56:	f005 fb21 	bl	41009c <__copybits>
  40aa5a:	4658      	mov	r0, fp
  40aa5c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40aa5e:	f004 ff33 	bl	40f8c8 <_Bfree>
  40aa62:	2e06      	cmp	r6, #6
  40aa64:	d80b      	bhi.n	40aa7e <_strtod_r+0xbfe>
  40aa66:	e8df f006 	tbb	[pc, r6]
  40aa6a:	371d      	.short	0x371d
  40aa6c:	37041318 	.word	0x37041318
  40aa70:	1d          	.byte	0x1d
  40aa71:	00          	.byte	0x00
  40aa72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40aa76:	9303      	str	r3, [sp, #12]
  40aa78:	f04f 33ff 	mov.w	r3, #4294967295
  40aa7c:	9302      	str	r3, [sp, #8]
  40aa7e:	0729      	lsls	r1, r5, #28
  40aa80:	f57f ab7d 	bpl.w	40a17e <_strtod_r+0x2fe>
  40aa84:	9b03      	ldr	r3, [sp, #12]
  40aa86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40aa8a:	9303      	str	r3, [sp, #12]
  40aa8c:	f7ff bb77 	b.w	40a17e <_strtod_r+0x2fe>
  40aa90:	4b0d      	ldr	r3, [pc, #52]	; (40aac8 <_strtod_r+0xc48>)
  40aa92:	9303      	str	r3, [sp, #12]
  40aa94:	2300      	movs	r3, #0
  40aa96:	9302      	str	r3, [sp, #8]
  40aa98:	e7f1      	b.n	40aa7e <_strtod_r+0xbfe>
  40aa9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40aa9c:	9302      	str	r3, [sp, #8]
  40aa9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40aaa0:	9303      	str	r3, [sp, #12]
  40aaa2:	e7ec      	b.n	40aa7e <_strtod_r+0xbfe>
  40aaa4:	2300      	movs	r3, #0
  40aaa6:	9303      	str	r3, [sp, #12]
  40aaa8:	9302      	str	r3, [sp, #8]
  40aaaa:	e7e8      	b.n	40aa7e <_strtod_r+0xbfe>
  40aaac:	f3af 8000 	nop.w
  40aab0:	94a03595 	.word	0x94a03595
  40aab4:	3fcfffff 	.word	0x3fcfffff
  40aab8:	94a03595 	.word	0x94a03595
  40aabc:	3fdfffff 	.word	0x3fdfffff
  40aac0:	35afe535 	.word	0x35afe535
  40aac4:	3fe00000 	.word	0x3fe00000
  40aac8:	7ff00000 	.word	0x7ff00000
  40aacc:	00412fe0 	.word	0x00412fe0
  40aad0:	00412d00 	.word	0x00412d00
  40aad4:	3ff00000 	.word	0x3ff00000
  40aad8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40aada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40aadc:	991c      	ldr	r1, [sp, #112]	; 0x70
  40aade:	9102      	str	r1, [sp, #8]
  40aae0:	f202 4233 	addw	r2, r2, #1075	; 0x433
  40aae4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40aae8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  40aaec:	9303      	str	r3, [sp, #12]
  40aaee:	e7c6      	b.n	40aa7e <_strtod_r+0xbfe>
  40aaf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40aaf2:	f112 0316 	adds.w	r3, r2, #22
  40aaf6:	f6ff ab73 	blt.w	40a1e0 <_strtod_r+0x360>
  40aafa:	4b8c      	ldr	r3, [pc, #560]	; (40ad2c <_strtod_r+0xeac>)
  40aafc:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
  40ab00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ab08:	f7fd fa6a 	bl	407fe0 <__aeabi_ddiv>
  40ab0c:	4681      	mov	r9, r0
  40ab0e:	468a      	mov	sl, r1
  40ab10:	f7ff bab2 	b.w	40a078 <_strtod_r+0x1f8>
  40ab14:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40ab18:	e672      	b.n	40a800 <_strtod_r+0x980>
  40ab1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ab1c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40ab20:	4655      	mov	r5, sl
  40ab22:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
  40ab26:	bb7e      	cbnz	r6, 40ab88 <_strtod_r+0xd08>
  40ab28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ab2c:	bb60      	cbnz	r0, 40ab88 <_strtod_r+0xd08>
  40ab2e:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40ab32:	460c      	mov	r4, r1
  40ab34:	bb43      	cbnz	r3, 40ab88 <_strtod_r+0xd08>
  40ab36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40ab3a:	0d1b      	lsrs	r3, r3, #20
  40ab3c:	051b      	lsls	r3, r3, #20
  40ab3e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40ab42:	d921      	bls.n	40ab88 <_strtod_r+0xd08>
  40ab44:	696b      	ldr	r3, [r5, #20]
  40ab46:	b913      	cbnz	r3, 40ab4e <_strtod_r+0xcce>
  40ab48:	692b      	ldr	r3, [r5, #16]
  40ab4a:	2b01      	cmp	r3, #1
  40ab4c:	dd1c      	ble.n	40ab88 <_strtod_r+0xd08>
  40ab4e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ab50:	2201      	movs	r2, #1
  40ab52:	4658      	mov	r0, fp
  40ab54:	f005 f88e 	bl	40fc74 <__lshift>
  40ab58:	4639      	mov	r1, r7
  40ab5a:	900a      	str	r0, [sp, #40]	; 0x28
  40ab5c:	f005 f8e2 	bl	40fd24 <__mcmp>
  40ab60:	2800      	cmp	r0, #0
  40ab62:	dd11      	ble.n	40ab88 <_strtod_r+0xd08>
  40ab64:	9b07      	ldr	r3, [sp, #28]
  40ab66:	2b00      	cmp	r3, #0
  40ab68:	f040 80be 	bne.w	40ace8 <_strtod_r+0xe68>
  40ab6c:	4b70      	ldr	r3, [pc, #448]	; (40ad30 <_strtod_r+0xeb0>)
  40ab6e:	4023      	ands	r3, r4
  40ab70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  40ab74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  40ab78:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  40ab7c:	9303      	str	r3, [sp, #12]
  40ab7e:	f04f 33ff 	mov.w	r3, #4294967295
  40ab82:	9302      	str	r3, [sp, #8]
  40ab84:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40ab88:	9b07      	ldr	r3, [sp, #28]
  40ab8a:	b1bb      	cbz	r3, 40abbc <_strtod_r+0xd3c>
  40ab8c:	4b69      	ldr	r3, [pc, #420]	; (40ad34 <_strtod_r+0xeb4>)
  40ab8e:	9315      	str	r3, [sp, #84]	; 0x54
  40ab90:	2300      	movs	r3, #0
  40ab92:	9314      	str	r3, [sp, #80]	; 0x50
  40ab94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40ab98:	4648      	mov	r0, r9
  40ab9a:	4651      	mov	r1, sl
  40ab9c:	f7fd f8f6 	bl	407d8c <__aeabi_dmul>
  40aba0:	4603      	mov	r3, r0
  40aba2:	460c      	mov	r4, r1
  40aba4:	4681      	mov	r9, r0
  40aba6:	468a      	mov	sl, r1
  40aba8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40abac:	b931      	cbnz	r1, 40abbc <_strtod_r+0xd3c>
  40abae:	9b02      	ldr	r3, [sp, #8]
  40abb0:	b923      	cbnz	r3, 40abbc <_strtod_r+0xd3c>
  40abb2:	2322      	movs	r3, #34	; 0x22
  40abb4:	981a      	ldr	r0, [sp, #104]	; 0x68
  40abb6:	f8cb 3000 	str.w	r3, [fp]
  40abba:	e62a      	b.n	40a812 <_strtod_r+0x992>
  40abbc:	981a      	ldr	r0, [sp, #104]	; 0x68
  40abbe:	e628      	b.n	40a812 <_strtod_r+0x992>
  40abc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40abc2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40abc6:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
  40abca:	b34e      	cbz	r6, 40ac20 <_strtod_r+0xda0>
  40abcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  40abd0:	4b59      	ldr	r3, [pc, #356]	; (40ad38 <_strtod_r+0xeb8>)
  40abd2:	f3c5 0113 	ubfx	r1, r5, #0, #20
  40abd6:	4299      	cmp	r1, r3
  40abd8:	462a      	mov	r2, r5
  40abda:	d045      	beq.n	40ac68 <_strtod_r+0xde8>
  40abdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40abde:	b34b      	cbz	r3, 40ac34 <_strtod_r+0xdb4>
  40abe0:	9a03      	ldr	r2, [sp, #12]
  40abe2:	4213      	tst	r3, r2
  40abe4:	d0d0      	beq.n	40ab88 <_strtod_r+0xd08>
  40abe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40abea:	9a07      	ldr	r2, [sp, #28]
  40abec:	b356      	cbz	r6, 40ac44 <_strtod_r+0xdc4>
  40abee:	f7ff f925 	bl	409e3c <sulp>
  40abf2:	4602      	mov	r2, r0
  40abf4:	460b      	mov	r3, r1
  40abf6:	4648      	mov	r0, r9
  40abf8:	4651      	mov	r1, sl
  40abfa:	f7fc ff15 	bl	407a28 <__adddf3>
  40abfe:	4681      	mov	r9, r0
  40ac00:	468a      	mov	sl, r1
  40ac02:	e7c1      	b.n	40ab88 <_strtod_r+0xd08>
  40ac04:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  40ac08:	9303      	str	r3, [sp, #12]
  40ac0a:	f7ff bb03 	b.w	40a214 <_strtod_r+0x394>
  40ac0e:	4b4b      	ldr	r3, [pc, #300]	; (40ad3c <_strtod_r+0xebc>)
  40ac10:	4c4b      	ldr	r4, [pc, #300]	; (40ad40 <_strtod_r+0xec0>)
  40ac12:	930f      	str	r3, [sp, #60]	; 0x3c
  40ac14:	2300      	movs	r3, #0
  40ac16:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  40ac1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ac1c:	930d      	str	r3, [sp, #52]	; 0x34
  40ac1e:	e4a3      	b.n	40a568 <_strtod_r+0x6e8>
  40ac20:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40ac24:	f3c2 0313 	ubfx	r3, r2, #0, #20
  40ac28:	4614      	mov	r4, r2
  40ac2a:	2b00      	cmp	r3, #0
  40ac2c:	d1d6      	bne.n	40abdc <_strtod_r+0xd5c>
  40ac2e:	2900      	cmp	r1, #0
  40ac30:	d1d4      	bne.n	40abdc <_strtod_r+0xd5c>
  40ac32:	e797      	b.n	40ab64 <_strtod_r+0xce4>
  40ac34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ac36:	9a02      	ldr	r2, [sp, #8]
  40ac38:	4213      	tst	r3, r2
  40ac3a:	d0a5      	beq.n	40ab88 <_strtod_r+0xd08>
  40ac3c:	e7d3      	b.n	40abe6 <_strtod_r+0xd66>
  40ac3e:	f04f 0800 	mov.w	r8, #0
  40ac42:	e52f      	b.n	40a6a4 <_strtod_r+0x824>
  40ac44:	f7ff f8fa 	bl	409e3c <sulp>
  40ac48:	4602      	mov	r2, r0
  40ac4a:	460b      	mov	r3, r1
  40ac4c:	4648      	mov	r0, r9
  40ac4e:	4651      	mov	r1, sl
  40ac50:	f7fc fee8 	bl	407a24 <__aeabi_dsub>
  40ac54:	2200      	movs	r2, #0
  40ac56:	2300      	movs	r3, #0
  40ac58:	4681      	mov	r9, r0
  40ac5a:	468a      	mov	sl, r1
  40ac5c:	f7fd fafe 	bl	40825c <__aeabi_dcmpeq>
  40ac60:	2800      	cmp	r0, #0
  40ac62:	f47f aeb4 	bne.w	40a9ce <_strtod_r+0xb4e>
  40ac66:	e78f      	b.n	40ab88 <_strtod_r+0xd08>
  40ac68:	9b07      	ldr	r3, [sp, #28]
  40ac6a:	9902      	ldr	r1, [sp, #8]
  40ac6c:	b1fb      	cbz	r3, 40acae <_strtod_r+0xe2e>
  40ac6e:	4b30      	ldr	r3, [pc, #192]	; (40ad30 <_strtod_r+0xeb0>)
  40ac70:	402b      	ands	r3, r5
  40ac72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40ac76:	d81a      	bhi.n	40acae <_strtod_r+0xe2e>
  40ac78:	0d1b      	lsrs	r3, r3, #20
  40ac7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40ac7e:	f04f 30ff 	mov.w	r0, #4294967295
  40ac82:	fa00 f303 	lsl.w	r3, r0, r3
  40ac86:	428b      	cmp	r3, r1
  40ac88:	d1a8      	bne.n	40abdc <_strtod_r+0xd5c>
  40ac8a:	492e      	ldr	r1, [pc, #184]	; (40ad44 <_strtod_r+0xec4>)
  40ac8c:	428a      	cmp	r2, r1
  40ac8e:	d03e      	beq.n	40ad0e <_strtod_r+0xe8e>
  40ac90:	4b27      	ldr	r3, [pc, #156]	; (40ad30 <_strtod_r+0xeb0>)
  40ac92:	4013      	ands	r3, r2
  40ac94:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40ac98:	9303      	str	r3, [sp, #12]
  40ac9a:	2300      	movs	r3, #0
  40ac9c:	9302      	str	r3, [sp, #8]
  40ac9e:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40aca2:	e771      	b.n	40ab88 <_strtod_r+0xd08>
  40aca4:	2e00      	cmp	r6, #0
  40aca6:	9307      	str	r3, [sp, #28]
  40aca8:	f73f ae20 	bgt.w	40a8ec <_strtod_r+0xa6c>
  40acac:	e646      	b.n	40a93c <_strtod_r+0xabc>
  40acae:	f04f 33ff 	mov.w	r3, #4294967295
  40acb2:	e7e8      	b.n	40ac86 <_strtod_r+0xe06>
  40acb4:	f04f 32ff 	mov.w	r2, #4294967295
  40acb8:	fa02 f303 	lsl.w	r3, r2, r3
  40acbc:	9a02      	ldr	r2, [sp, #8]
  40acbe:	401a      	ands	r2, r3
  40acc0:	9202      	str	r2, [sp, #8]
  40acc2:	e63b      	b.n	40a93c <_strtod_r+0xabc>
  40acc4:	a819      	add	r0, sp, #100	; 0x64
  40acc6:	aa1c      	add	r2, sp, #112	; 0x70
  40acc8:	491f      	ldr	r1, [pc, #124]	; (40ad48 <_strtod_r+0xec8>)
  40acca:	f004 fbaf 	bl	40f42c <__hexnan>
  40acce:	2805      	cmp	r0, #5
  40acd0:	f47f ad23 	bne.w	40a71a <_strtod_r+0x89a>
  40acd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40acd6:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40acda:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40acde:	9303      	str	r3, [sp, #12]
  40ace0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40ace2:	9302      	str	r3, [sp, #8]
  40ace4:	f7ff ba4b 	b.w	40a17e <_strtod_r+0x2fe>
  40ace8:	4b11      	ldr	r3, [pc, #68]	; (40ad30 <_strtod_r+0xeb0>)
  40acea:	4023      	ands	r3, r4
  40acec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40acf0:	f73f af3e 	bgt.w	40ab70 <_strtod_r+0xcf0>
  40acf4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  40acf8:	f73f af48 	bgt.w	40ab8c <_strtod_r+0xd0c>
  40acfc:	e667      	b.n	40a9ce <_strtod_r+0xb4e>
  40acfe:	4648      	mov	r0, r9
  40ad00:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40ad02:	f109 0901 	add.w	r9, r9, #1
  40ad06:	e687      	b.n	40aa18 <_strtod_r+0xb98>
  40ad08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40ad0c:	e600      	b.n	40a910 <_strtod_r+0xa90>
  40ad0e:	3301      	adds	r3, #1
  40ad10:	d1be      	bne.n	40ac90 <_strtod_r+0xe10>
  40ad12:	e574      	b.n	40a7fe <_strtod_r+0x97e>
  40ad14:	3b20      	subs	r3, #32
  40ad16:	f04f 32ff 	mov.w	r2, #4294967295
  40ad1a:	fa02 f303 	lsl.w	r3, r2, r3
  40ad1e:	400b      	ands	r3, r1
  40ad20:	9303      	str	r3, [sp, #12]
  40ad22:	e60b      	b.n	40a93c <_strtod_r+0xabc>
  40ad24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40ad28:	e4bc      	b.n	40a6a4 <_strtod_r+0x824>
  40ad2a:	bf00      	nop
  40ad2c:	00412fe0 	.word	0x00412fe0
  40ad30:	7ff00000 	.word	0x7ff00000
  40ad34:	39500000 	.word	0x39500000
  40ad38:	000fffff 	.word	0x000fffff
  40ad3c:	3fe00000 	.word	0x3fe00000
  40ad40:	bfe00000 	.word	0xbfe00000
  40ad44:	7fefffff 	.word	0x7fefffff
  40ad48:	00412cd8 	.word	0x00412cd8

0040ad4c <strtof>:
  40ad4c:	b538      	push	{r3, r4, r5, lr}
  40ad4e:	4b0b      	ldr	r3, [pc, #44]	; (40ad7c <strtof+0x30>)
  40ad50:	460a      	mov	r2, r1
  40ad52:	4601      	mov	r1, r0
  40ad54:	6818      	ldr	r0, [r3, #0]
  40ad56:	f7ff f893 	bl	409e80 <_strtod_r>
  40ad5a:	4602      	mov	r2, r0
  40ad5c:	460b      	mov	r3, r1
  40ad5e:	4604      	mov	r4, r0
  40ad60:	460d      	mov	r5, r1
  40ad62:	f7fd faad 	bl	4082c0 <__aeabi_dcmpun>
  40ad66:	b920      	cbnz	r0, 40ad72 <strtof+0x26>
  40ad68:	4620      	mov	r0, r4
  40ad6a:	4629      	mov	r1, r5
  40ad6c:	f7fd fade 	bl	40832c <__aeabi_d2f>
  40ad70:	bd38      	pop	{r3, r4, r5, pc}
  40ad72:	2000      	movs	r0, #0
  40ad74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ad78:	f005 bbd2 	b.w	410520 <nanf>
  40ad7c:	20000458 	.word	0x20000458

0040ad80 <strtok>:
  40ad80:	4b02      	ldr	r3, [pc, #8]	; (40ad8c <strtok+0xc>)
  40ad82:	681a      	ldr	r2, [r3, #0]
  40ad84:	2301      	movs	r3, #1
  40ad86:	325c      	adds	r2, #92	; 0x5c
  40ad88:	f000 b802 	b.w	40ad90 <__strtok_r>
  40ad8c:	20000458 	.word	0x20000458

0040ad90 <__strtok_r>:
  40ad90:	b4f0      	push	{r4, r5, r6, r7}
  40ad92:	b320      	cbz	r0, 40adde <__strtok_r+0x4e>
  40ad94:	4607      	mov	r7, r0
  40ad96:	460d      	mov	r5, r1
  40ad98:	f817 6b01 	ldrb.w	r6, [r7], #1
  40ad9c:	e001      	b.n	40ada2 <__strtok_r+0x12>
  40ad9e:	42a6      	cmp	r6, r4
  40ada0:	d016      	beq.n	40add0 <__strtok_r+0x40>
  40ada2:	f815 4b01 	ldrb.w	r4, [r5], #1
  40ada6:	2c00      	cmp	r4, #0
  40ada8:	d1f9      	bne.n	40ad9e <__strtok_r+0xe>
  40adaa:	b1ee      	cbz	r6, 40ade8 <__strtok_r+0x58>
  40adac:	463e      	mov	r6, r7
  40adae:	460c      	mov	r4, r1
  40adb0:	f816 5b01 	ldrb.w	r5, [r6], #1
  40adb4:	e000      	b.n	40adb8 <__strtok_r+0x28>
  40adb6:	b173      	cbz	r3, 40add6 <__strtok_r+0x46>
  40adb8:	f814 3b01 	ldrb.w	r3, [r4], #1
  40adbc:	429d      	cmp	r5, r3
  40adbe:	d1fa      	bne.n	40adb6 <__strtok_r+0x26>
  40adc0:	b15d      	cbz	r5, 40adda <__strtok_r+0x4a>
  40adc2:	2300      	movs	r3, #0
  40adc4:	703b      	strb	r3, [r7, #0]
  40adc6:	6016      	str	r6, [r2, #0]
  40adc8:	4606      	mov	r6, r0
  40adca:	4630      	mov	r0, r6
  40adcc:	bcf0      	pop	{r4, r5, r6, r7}
  40adce:	4770      	bx	lr
  40add0:	b163      	cbz	r3, 40adec <__strtok_r+0x5c>
  40add2:	4638      	mov	r0, r7
  40add4:	e7de      	b.n	40ad94 <__strtok_r+0x4>
  40add6:	4637      	mov	r7, r6
  40add8:	e7e8      	b.n	40adac <__strtok_r+0x1c>
  40adda:	462e      	mov	r6, r5
  40addc:	e7f3      	b.n	40adc6 <__strtok_r+0x36>
  40adde:	6810      	ldr	r0, [r2, #0]
  40ade0:	2800      	cmp	r0, #0
  40ade2:	d1d7      	bne.n	40ad94 <__strtok_r+0x4>
  40ade4:	4606      	mov	r6, r0
  40ade6:	e7f0      	b.n	40adca <__strtok_r+0x3a>
  40ade8:	6016      	str	r6, [r2, #0]
  40adea:	e7ee      	b.n	40adca <__strtok_r+0x3a>
  40adec:	6017      	str	r7, [r2, #0]
  40adee:	4606      	mov	r6, r0
  40adf0:	7003      	strb	r3, [r0, #0]
  40adf2:	e7ea      	b.n	40adca <__strtok_r+0x3a>

0040adf4 <_strtol_r>:
  40adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40adf8:	4c47      	ldr	r4, [pc, #284]	; (40af18 <_strtol_r+0x124>)
  40adfa:	4683      	mov	fp, r0
  40adfc:	460e      	mov	r6, r1
  40adfe:	f8d4 e000 	ldr.w	lr, [r4]
  40ae02:	e000      	b.n	40ae06 <_strtol_r+0x12>
  40ae04:	4626      	mov	r6, r4
  40ae06:	4634      	mov	r4, r6
  40ae08:	f814 5b01 	ldrb.w	r5, [r4], #1
  40ae0c:	eb0e 0005 	add.w	r0, lr, r5
  40ae10:	7840      	ldrb	r0, [r0, #1]
  40ae12:	f000 0008 	and.w	r0, r0, #8
  40ae16:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  40ae1a:	2800      	cmp	r0, #0
  40ae1c:	d1f2      	bne.n	40ae04 <_strtol_r+0x10>
  40ae1e:	2d2d      	cmp	r5, #45	; 0x2d
  40ae20:	d05c      	beq.n	40aedc <_strtol_r+0xe8>
  40ae22:	2d2b      	cmp	r5, #43	; 0x2b
  40ae24:	bf04      	itt	eq
  40ae26:	7875      	ldrbeq	r5, [r6, #1]
  40ae28:	1cb4      	addeq	r4, r6, #2
  40ae2a:	2b00      	cmp	r3, #0
  40ae2c:	d03e      	beq.n	40aeac <_strtol_r+0xb8>
  40ae2e:	2b10      	cmp	r3, #16
  40ae30:	d060      	beq.n	40aef4 <_strtol_r+0x100>
  40ae32:	469a      	mov	sl, r3
  40ae34:	f1b8 0f00 	cmp.w	r8, #0
  40ae38:	bf0c      	ite	eq
  40ae3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ae3e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40ae42:	2700      	movs	r7, #0
  40ae44:	fbb0 f9fa 	udiv	r9, r0, sl
  40ae48:	46bc      	mov	ip, r7
  40ae4a:	fb0a 0019 	mls	r0, sl, r9, r0
  40ae4e:	e00c      	b.n	40ae6a <_strtol_r+0x76>
  40ae50:	3d30      	subs	r5, #48	; 0x30
  40ae52:	42ab      	cmp	r3, r5
  40ae54:	dd19      	ble.n	40ae8a <_strtol_r+0x96>
  40ae56:	1c7e      	adds	r6, r7, #1
  40ae58:	d005      	beq.n	40ae66 <_strtol_r+0x72>
  40ae5a:	45cc      	cmp	ip, r9
  40ae5c:	d823      	bhi.n	40aea6 <_strtol_r+0xb2>
  40ae5e:	d020      	beq.n	40aea2 <_strtol_r+0xae>
  40ae60:	fb0a 5c0c 	mla	ip, sl, ip, r5
  40ae64:	2701      	movs	r7, #1
  40ae66:	f814 5b01 	ldrb.w	r5, [r4], #1
  40ae6a:	eb0e 0605 	add.w	r6, lr, r5
  40ae6e:	7876      	ldrb	r6, [r6, #1]
  40ae70:	f016 0f04 	tst.w	r6, #4
  40ae74:	d1ec      	bne.n	40ae50 <_strtol_r+0x5c>
  40ae76:	f016 0603 	ands.w	r6, r6, #3
  40ae7a:	d006      	beq.n	40ae8a <_strtol_r+0x96>
  40ae7c:	2e01      	cmp	r6, #1
  40ae7e:	bf14      	ite	ne
  40ae80:	2657      	movne	r6, #87	; 0x57
  40ae82:	2637      	moveq	r6, #55	; 0x37
  40ae84:	1bad      	subs	r5, r5, r6
  40ae86:	42ab      	cmp	r3, r5
  40ae88:	dce5      	bgt.n	40ae56 <_strtol_r+0x62>
  40ae8a:	1c7b      	adds	r3, r7, #1
  40ae8c:	d016      	beq.n	40aebc <_strtol_r+0xc8>
  40ae8e:	f1b8 0f00 	cmp.w	r8, #0
  40ae92:	d110      	bne.n	40aeb6 <_strtol_r+0xc2>
  40ae94:	4660      	mov	r0, ip
  40ae96:	2a00      	cmp	r2, #0
  40ae98:	d039      	beq.n	40af0e <_strtol_r+0x11a>
  40ae9a:	b9df      	cbnz	r7, 40aed4 <_strtol_r+0xe0>
  40ae9c:	6011      	str	r1, [r2, #0]
  40ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aea2:	4285      	cmp	r5, r0
  40aea4:	dddc      	ble.n	40ae60 <_strtol_r+0x6c>
  40aea6:	f04f 37ff 	mov.w	r7, #4294967295
  40aeaa:	e7dc      	b.n	40ae66 <_strtol_r+0x72>
  40aeac:	2d30      	cmp	r5, #48	; 0x30
  40aeae:	d01a      	beq.n	40aee6 <_strtol_r+0xf2>
  40aeb0:	230a      	movs	r3, #10
  40aeb2:	469a      	mov	sl, r3
  40aeb4:	e7be      	b.n	40ae34 <_strtol_r+0x40>
  40aeb6:	f1cc 0c00 	rsb	ip, ip, #0
  40aeba:	e7eb      	b.n	40ae94 <_strtol_r+0xa0>
  40aebc:	f1b8 0f00 	cmp.w	r8, #0
  40aec0:	f04f 0322 	mov.w	r3, #34	; 0x22
  40aec4:	bf0c      	ite	eq
  40aec6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40aeca:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40aece:	f8cb 3000 	str.w	r3, [fp]
  40aed2:	b1f2      	cbz	r2, 40af12 <_strtol_r+0x11e>
  40aed4:	1e61      	subs	r1, r4, #1
  40aed6:	6011      	str	r1, [r2, #0]
  40aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aedc:	1cb4      	adds	r4, r6, #2
  40aede:	7875      	ldrb	r5, [r6, #1]
  40aee0:	f04f 0801 	mov.w	r8, #1
  40aee4:	e7a1      	b.n	40ae2a <_strtol_r+0x36>
  40aee6:	7823      	ldrb	r3, [r4, #0]
  40aee8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40aeec:	2b58      	cmp	r3, #88	; 0x58
  40aeee:	d008      	beq.n	40af02 <_strtol_r+0x10e>
  40aef0:	2308      	movs	r3, #8
  40aef2:	e79e      	b.n	40ae32 <_strtol_r+0x3e>
  40aef4:	2d30      	cmp	r5, #48	; 0x30
  40aef6:	d19c      	bne.n	40ae32 <_strtol_r+0x3e>
  40aef8:	7820      	ldrb	r0, [r4, #0]
  40aefa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  40aefe:	2858      	cmp	r0, #88	; 0x58
  40af00:	d197      	bne.n	40ae32 <_strtol_r+0x3e>
  40af02:	f04f 0a10 	mov.w	sl, #16
  40af06:	7865      	ldrb	r5, [r4, #1]
  40af08:	4653      	mov	r3, sl
  40af0a:	3402      	adds	r4, #2
  40af0c:	e792      	b.n	40ae34 <_strtol_r+0x40>
  40af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40af16:	bf00      	nop
  40af18:	2000086c 	.word	0x2000086c

0040af1c <strtol>:
  40af1c:	b410      	push	{r4}
  40af1e:	4c04      	ldr	r4, [pc, #16]	; (40af30 <strtol+0x14>)
  40af20:	4613      	mov	r3, r2
  40af22:	460a      	mov	r2, r1
  40af24:	4601      	mov	r1, r0
  40af26:	6820      	ldr	r0, [r4, #0]
  40af28:	bc10      	pop	{r4}
  40af2a:	f7ff bf63 	b.w	40adf4 <_strtol_r>
  40af2e:	bf00      	nop
  40af30:	20000458 	.word	0x20000458

0040af34 <_svfprintf_r>:
  40af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af38:	b0c1      	sub	sp, #260	; 0x104
  40af3a:	460c      	mov	r4, r1
  40af3c:	9109      	str	r1, [sp, #36]	; 0x24
  40af3e:	4615      	mov	r5, r2
  40af40:	930e      	str	r3, [sp, #56]	; 0x38
  40af42:	900a      	str	r0, [sp, #40]	; 0x28
  40af44:	f004 fb3c 	bl	40f5c0 <_localeconv_r>
  40af48:	6803      	ldr	r3, [r0, #0]
  40af4a:	9317      	str	r3, [sp, #92]	; 0x5c
  40af4c:	4618      	mov	r0, r3
  40af4e:	f7fe fc17 	bl	409780 <strlen>
  40af52:	89a3      	ldrh	r3, [r4, #12]
  40af54:	9016      	str	r0, [sp, #88]	; 0x58
  40af56:	061e      	lsls	r6, r3, #24
  40af58:	d503      	bpl.n	40af62 <_svfprintf_r+0x2e>
  40af5a:	6923      	ldr	r3, [r4, #16]
  40af5c:	2b00      	cmp	r3, #0
  40af5e:	f001 8119 	beq.w	40c194 <_svfprintf_r+0x1260>
  40af62:	2300      	movs	r3, #0
  40af64:	461a      	mov	r2, r3
  40af66:	9312      	str	r3, [sp, #72]	; 0x48
  40af68:	9325      	str	r3, [sp, #148]	; 0x94
  40af6a:	9324      	str	r3, [sp, #144]	; 0x90
  40af6c:	9319      	str	r3, [sp, #100]	; 0x64
  40af6e:	930b      	str	r3, [sp, #44]	; 0x2c
  40af70:	f8df a464 	ldr.w	sl, [pc, #1124]	; 40b3d8 <_svfprintf_r+0x4a4>
  40af74:	9214      	str	r2, [sp, #80]	; 0x50
  40af76:	ab30      	add	r3, sp, #192	; 0xc0
  40af78:	9323      	str	r3, [sp, #140]	; 0x8c
  40af7a:	4699      	mov	r9, r3
  40af7c:	9215      	str	r2, [sp, #84]	; 0x54
  40af7e:	46a8      	mov	r8, r5
  40af80:	f898 3000 	ldrb.w	r3, [r8]
  40af84:	4644      	mov	r4, r8
  40af86:	b1eb      	cbz	r3, 40afc4 <_svfprintf_r+0x90>
  40af88:	2b25      	cmp	r3, #37	; 0x25
  40af8a:	d102      	bne.n	40af92 <_svfprintf_r+0x5e>
  40af8c:	e01a      	b.n	40afc4 <_svfprintf_r+0x90>
  40af8e:	2b25      	cmp	r3, #37	; 0x25
  40af90:	d003      	beq.n	40af9a <_svfprintf_r+0x66>
  40af92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40af96:	2b00      	cmp	r3, #0
  40af98:	d1f9      	bne.n	40af8e <_svfprintf_r+0x5a>
  40af9a:	ebc8 0504 	rsb	r5, r8, r4
  40af9e:	b18d      	cbz	r5, 40afc4 <_svfprintf_r+0x90>
  40afa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40afa2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40afa4:	f8c9 8000 	str.w	r8, [r9]
  40afa8:	3301      	adds	r3, #1
  40afaa:	442a      	add	r2, r5
  40afac:	2b07      	cmp	r3, #7
  40afae:	f8c9 5004 	str.w	r5, [r9, #4]
  40afb2:	9225      	str	r2, [sp, #148]	; 0x94
  40afb4:	9324      	str	r3, [sp, #144]	; 0x90
  40afb6:	f300 80a6 	bgt.w	40b106 <_svfprintf_r+0x1d2>
  40afba:	f109 0908 	add.w	r9, r9, #8
  40afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40afc0:	442b      	add	r3, r5
  40afc2:	930b      	str	r3, [sp, #44]	; 0x2c
  40afc4:	7823      	ldrb	r3, [r4, #0]
  40afc6:	2b00      	cmp	r3, #0
  40afc8:	f000 80a6 	beq.w	40b118 <_svfprintf_r+0x1e4>
  40afcc:	2300      	movs	r3, #0
  40afce:	461a      	mov	r2, r3
  40afd0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40afd4:	4619      	mov	r1, r3
  40afd6:	930c      	str	r3, [sp, #48]	; 0x30
  40afd8:	9307      	str	r3, [sp, #28]
  40afda:	f04f 3bff 	mov.w	fp, #4294967295
  40afde:	7863      	ldrb	r3, [r4, #1]
  40afe0:	f104 0801 	add.w	r8, r4, #1
  40afe4:	465d      	mov	r5, fp
  40afe6:	f108 0801 	add.w	r8, r8, #1
  40afea:	f1a3 0020 	sub.w	r0, r3, #32
  40afee:	2858      	cmp	r0, #88	; 0x58
  40aff0:	f200 8425 	bhi.w	40b83e <_svfprintf_r+0x90a>
  40aff4:	e8df f010 	tbh	[pc, r0, lsl #1]
  40aff8:	04230388 	.word	0x04230388
  40affc:	03900423 	.word	0x03900423
  40b000:	04230423 	.word	0x04230423
  40b004:	04230423 	.word	0x04230423
  40b008:	04230423 	.word	0x04230423
  40b00c:	03a50397 	.word	0x03a50397
  40b010:	005d0423 	.word	0x005d0423
  40b014:	042300e2 	.word	0x042300e2
  40b018:	010500fe 	.word	0x010500fe
  40b01c:	01050105 	.word	0x01050105
  40b020:	01050105 	.word	0x01050105
  40b024:	01050105 	.word	0x01050105
  40b028:	01050105 	.word	0x01050105
  40b02c:	04230423 	.word	0x04230423
  40b030:	04230423 	.word	0x04230423
  40b034:	04230423 	.word	0x04230423
  40b038:	04230423 	.word	0x04230423
  40b03c:	04230423 	.word	0x04230423
  40b040:	02810115 	.word	0x02810115
  40b044:	02810423 	.word	0x02810423
  40b048:	04230423 	.word	0x04230423
  40b04c:	04230423 	.word	0x04230423
  40b050:	042302c6 	.word	0x042302c6
  40b054:	02cd0423 	.word	0x02cd0423
  40b058:	04230423 	.word	0x04230423
  40b05c:	04230423 	.word	0x04230423
  40b060:	02f70423 	.word	0x02f70423
  40b064:	04230423 	.word	0x04230423
  40b068:	04230325 	.word	0x04230325
  40b06c:	04230423 	.word	0x04230423
  40b070:	04230423 	.word	0x04230423
  40b074:	04230423 	.word	0x04230423
  40b078:	04230423 	.word	0x04230423
  40b07c:	03660423 	.word	0x03660423
  40b080:	02810379 	.word	0x02810379
  40b084:	02810281 	.word	0x02810281
  40b088:	03790381 	.word	0x03790381
  40b08c:	04230423 	.word	0x04230423
  40b090:	042303d1 	.word	0x042303d1
  40b094:	00a303db 	.word	0x00a303db
  40b098:	03ee0064 	.word	0x03ee0064
  40b09c:	03f50423 	.word	0x03f50423
  40b0a0:	03aa0423 	.word	0x03aa0423
  40b0a4:	04230423 	.word	0x04230423
  40b0a8:	03bc      	.short	0x03bc
  40b0aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b0ac:	930e      	str	r3, [sp, #56]	; 0x38
  40b0ae:	4240      	negs	r0, r0
  40b0b0:	900c      	str	r0, [sp, #48]	; 0x30
  40b0b2:	9b07      	ldr	r3, [sp, #28]
  40b0b4:	f043 0304 	orr.w	r3, r3, #4
  40b0b8:	9307      	str	r3, [sp, #28]
  40b0ba:	f898 3000 	ldrb.w	r3, [r8]
  40b0be:	e792      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b0c0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b0c2:	46ab      	mov	fp, r5
  40b0c4:	2100      	movs	r1, #0
  40b0c6:	6804      	ldr	r4, [r0, #0]
  40b0c8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b0cc:	1d07      	adds	r7, r0, #4
  40b0ce:	9807      	ldr	r0, [sp, #28]
  40b0d0:	2330      	movs	r3, #48	; 0x30
  40b0d2:	2278      	movs	r2, #120	; 0x78
  40b0d4:	458b      	cmp	fp, r1
  40b0d6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40b0da:	f04f 0500 	mov.w	r5, #0
  40b0de:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40b0e2:	f040 0302 	orr.w	r3, r0, #2
  40b0e6:	f2c0 83c7 	blt.w	40b878 <_svfprintf_r+0x944>
  40b0ea:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40b0ee:	f043 0302 	orr.w	r3, r3, #2
  40b0f2:	9307      	str	r3, [sp, #28]
  40b0f4:	ea54 0305 	orrs.w	r3, r4, r5
  40b0f8:	970e      	str	r7, [sp, #56]	; 0x38
  40b0fa:	f000 8393 	beq.w	40b824 <_svfprintf_r+0x8f0>
  40b0fe:	460f      	mov	r7, r1
  40b100:	9211      	str	r2, [sp, #68]	; 0x44
  40b102:	48b3      	ldr	r0, [pc, #716]	; (40b3d0 <_svfprintf_r+0x49c>)
  40b104:	e2ce      	b.n	40b6a4 <_svfprintf_r+0x770>
  40b106:	aa23      	add	r2, sp, #140	; 0x8c
  40b108:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b10a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b10c:	f005 fa50 	bl	4105b0 <__ssprint_r>
  40b110:	b948      	cbnz	r0, 40b126 <_svfprintf_r+0x1f2>
  40b112:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40b116:	e752      	b.n	40afbe <_svfprintf_r+0x8a>
  40b118:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b11a:	b123      	cbz	r3, 40b126 <_svfprintf_r+0x1f2>
  40b11c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b11e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b120:	aa23      	add	r2, sp, #140	; 0x8c
  40b122:	f005 fa45 	bl	4105b0 <__ssprint_r>
  40b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b128:	899b      	ldrh	r3, [r3, #12]
  40b12a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b130:	bf18      	it	ne
  40b132:	f04f 33ff 	movne.w	r3, #4294967295
  40b136:	4618      	mov	r0, r3
  40b138:	b041      	add	sp, #260	; 0x104
  40b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b13e:	9311      	str	r3, [sp, #68]	; 0x44
  40b140:	46ab      	mov	fp, r5
  40b142:	2a00      	cmp	r2, #0
  40b144:	f041 8223 	bne.w	40c58e <_svfprintf_r+0x165a>
  40b148:	9a07      	ldr	r2, [sp, #28]
  40b14a:	f012 0320 	ands.w	r3, r2, #32
  40b14e:	f000 822e 	beq.w	40b5ae <_svfprintf_r+0x67a>
  40b152:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40b154:	3707      	adds	r7, #7
  40b156:	f027 0307 	bic.w	r3, r7, #7
  40b15a:	2700      	movs	r7, #0
  40b15c:	f103 0108 	add.w	r1, r3, #8
  40b160:	45bb      	cmp	fp, r7
  40b162:	910e      	str	r1, [sp, #56]	; 0x38
  40b164:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b168:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40b16c:	f2c0 8752 	blt.w	40c014 <_svfprintf_r+0x10e0>
  40b170:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40b174:	9307      	str	r3, [sp, #28]
  40b176:	ea54 0305 	orrs.w	r3, r4, r5
  40b17a:	f000 8375 	beq.w	40b868 <_svfprintf_r+0x934>
  40b17e:	ae30      	add	r6, sp, #192	; 0xc0
  40b180:	08e2      	lsrs	r2, r4, #3
  40b182:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40b186:	08e9      	lsrs	r1, r5, #3
  40b188:	f004 0307 	and.w	r3, r4, #7
  40b18c:	460d      	mov	r5, r1
  40b18e:	4614      	mov	r4, r2
  40b190:	3330      	adds	r3, #48	; 0x30
  40b192:	ea54 0205 	orrs.w	r2, r4, r5
  40b196:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40b19a:	d1f1      	bne.n	40b180 <_svfprintf_r+0x24c>
  40b19c:	9a07      	ldr	r2, [sp, #28]
  40b19e:	07d1      	lsls	r1, r2, #31
  40b1a0:	f140 8084 	bpl.w	40b2ac <_svfprintf_r+0x378>
  40b1a4:	2b30      	cmp	r3, #48	; 0x30
  40b1a6:	f000 8081 	beq.w	40b2ac <_svfprintf_r+0x378>
  40b1aa:	2230      	movs	r2, #48	; 0x30
  40b1ac:	1e73      	subs	r3, r6, #1
  40b1ae:	f806 2c01 	strb.w	r2, [r6, #-1]
  40b1b2:	aa30      	add	r2, sp, #192	; 0xc0
  40b1b4:	1ad2      	subs	r2, r2, r3
  40b1b6:	920d      	str	r2, [sp, #52]	; 0x34
  40b1b8:	461e      	mov	r6, r3
  40b1ba:	e07a      	b.n	40b2b2 <_svfprintf_r+0x37e>
  40b1bc:	f898 3000 	ldrb.w	r3, [r8]
  40b1c0:	2b2a      	cmp	r3, #42	; 0x2a
  40b1c2:	f108 0401 	add.w	r4, r8, #1
  40b1c6:	f001 81b1 	beq.w	40c52c <_svfprintf_r+0x15f8>
  40b1ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40b1ce:	2809      	cmp	r0, #9
  40b1d0:	bf98      	it	ls
  40b1d2:	2500      	movls	r5, #0
  40b1d4:	f201 8164 	bhi.w	40c4a0 <_svfprintf_r+0x156c>
  40b1d8:	f814 3b01 	ldrb.w	r3, [r4], #1
  40b1dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40b1e0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40b1e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40b1e8:	2809      	cmp	r0, #9
  40b1ea:	d9f5      	bls.n	40b1d8 <_svfprintf_r+0x2a4>
  40b1ec:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40b1f0:	46a0      	mov	r8, r4
  40b1f2:	e6fa      	b.n	40afea <_svfprintf_r+0xb6>
  40b1f4:	9b07      	ldr	r3, [sp, #28]
  40b1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b1fa:	9307      	str	r3, [sp, #28]
  40b1fc:	f898 3000 	ldrb.w	r3, [r8]
  40b200:	e6f1      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b202:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40b206:	2300      	movs	r3, #0
  40b208:	461c      	mov	r4, r3
  40b20a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40b20e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40b212:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40b216:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40b21a:	2809      	cmp	r0, #9
  40b21c:	d9f5      	bls.n	40b20a <_svfprintf_r+0x2d6>
  40b21e:	940c      	str	r4, [sp, #48]	; 0x30
  40b220:	e6e3      	b.n	40afea <_svfprintf_r+0xb6>
  40b222:	9311      	str	r3, [sp, #68]	; 0x44
  40b224:	46ab      	mov	fp, r5
  40b226:	2a00      	cmp	r2, #0
  40b228:	f041 81c9 	bne.w	40c5be <_svfprintf_r+0x168a>
  40b22c:	9b07      	ldr	r3, [sp, #28]
  40b22e:	f043 0310 	orr.w	r3, r3, #16
  40b232:	9307      	str	r3, [sp, #28]
  40b234:	9b07      	ldr	r3, [sp, #28]
  40b236:	0698      	lsls	r0, r3, #26
  40b238:	f140 8530 	bpl.w	40bc9c <_svfprintf_r+0xd68>
  40b23c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40b23e:	3707      	adds	r7, #7
  40b240:	f027 0707 	bic.w	r7, r7, #7
  40b244:	e9d7 2300 	ldrd	r2, r3, [r7]
  40b248:	f107 0108 	add.w	r1, r7, #8
  40b24c:	910e      	str	r1, [sp, #56]	; 0x38
  40b24e:	4614      	mov	r4, r2
  40b250:	461d      	mov	r5, r3
  40b252:	2a00      	cmp	r2, #0
  40b254:	f173 0300 	sbcs.w	r3, r3, #0
  40b258:	f2c0 855b 	blt.w	40bd12 <_svfprintf_r+0xdde>
  40b25c:	f1bb 0f00 	cmp.w	fp, #0
  40b260:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40b264:	f2c0 8538 	blt.w	40bcd8 <_svfprintf_r+0xda4>
  40b268:	9b07      	ldr	r3, [sp, #28]
  40b26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40b26e:	9307      	str	r3, [sp, #28]
  40b270:	ea54 0305 	orrs.w	r3, r4, r5
  40b274:	f000 81db 	beq.w	40b62e <_svfprintf_r+0x6fa>
  40b278:	2d00      	cmp	r5, #0
  40b27a:	bf08      	it	eq
  40b27c:	2c0a      	cmpeq	r4, #10
  40b27e:	f0c0 81db 	bcc.w	40b638 <_svfprintf_r+0x704>
  40b282:	ae30      	add	r6, sp, #192	; 0xc0
  40b284:	4620      	mov	r0, r4
  40b286:	4629      	mov	r1, r5
  40b288:	220a      	movs	r2, #10
  40b28a:	2300      	movs	r3, #0
  40b28c:	f005 fc04 	bl	410a98 <__aeabi_uldivmod>
  40b290:	3230      	adds	r2, #48	; 0x30
  40b292:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40b296:	4620      	mov	r0, r4
  40b298:	4629      	mov	r1, r5
  40b29a:	2300      	movs	r3, #0
  40b29c:	220a      	movs	r2, #10
  40b29e:	f005 fbfb 	bl	410a98 <__aeabi_uldivmod>
  40b2a2:	4604      	mov	r4, r0
  40b2a4:	460d      	mov	r5, r1
  40b2a6:	ea54 0305 	orrs.w	r3, r4, r5
  40b2aa:	d1eb      	bne.n	40b284 <_svfprintf_r+0x350>
  40b2ac:	ab30      	add	r3, sp, #192	; 0xc0
  40b2ae:	1b9b      	subs	r3, r3, r6
  40b2b0:	930d      	str	r3, [sp, #52]	; 0x34
  40b2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b2b4:	455b      	cmp	r3, fp
  40b2b6:	bfb8      	it	lt
  40b2b8:	465b      	movlt	r3, fp
  40b2ba:	9308      	str	r3, [sp, #32]
  40b2bc:	2300      	movs	r3, #0
  40b2be:	9313      	str	r3, [sp, #76]	; 0x4c
  40b2c0:	b117      	cbz	r7, 40b2c8 <_svfprintf_r+0x394>
  40b2c2:	9b08      	ldr	r3, [sp, #32]
  40b2c4:	3301      	adds	r3, #1
  40b2c6:	9308      	str	r3, [sp, #32]
  40b2c8:	9b07      	ldr	r3, [sp, #28]
  40b2ca:	f013 0302 	ands.w	r3, r3, #2
  40b2ce:	930f      	str	r3, [sp, #60]	; 0x3c
  40b2d0:	d002      	beq.n	40b2d8 <_svfprintf_r+0x3a4>
  40b2d2:	9b08      	ldr	r3, [sp, #32]
  40b2d4:	3302      	adds	r3, #2
  40b2d6:	9308      	str	r3, [sp, #32]
  40b2d8:	9b07      	ldr	r3, [sp, #28]
  40b2da:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40b2de:	9310      	str	r3, [sp, #64]	; 0x40
  40b2e0:	f040 82d7 	bne.w	40b892 <_svfprintf_r+0x95e>
  40b2e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b2e6:	9a08      	ldr	r2, [sp, #32]
  40b2e8:	1a9d      	subs	r5, r3, r2
  40b2ea:	2d00      	cmp	r5, #0
  40b2ec:	f340 82d1 	ble.w	40b892 <_svfprintf_r+0x95e>
  40b2f0:	2d10      	cmp	r5, #16
  40b2f2:	9925      	ldr	r1, [sp, #148]	; 0x94
  40b2f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b2f6:	4f37      	ldr	r7, [pc, #220]	; (40b3d4 <_svfprintf_r+0x4a0>)
  40b2f8:	dd27      	ble.n	40b34a <_svfprintf_r+0x416>
  40b2fa:	9618      	str	r6, [sp, #96]	; 0x60
  40b2fc:	4648      	mov	r0, r9
  40b2fe:	2410      	movs	r4, #16
  40b300:	46b9      	mov	r9, r7
  40b302:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40b304:	462f      	mov	r7, r5
  40b306:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b308:	e004      	b.n	40b314 <_svfprintf_r+0x3e0>
  40b30a:	3f10      	subs	r7, #16
  40b30c:	2f10      	cmp	r7, #16
  40b30e:	f100 0008 	add.w	r0, r0, #8
  40b312:	dd16      	ble.n	40b342 <_svfprintf_r+0x40e>
  40b314:	3201      	adds	r2, #1
  40b316:	4b2f      	ldr	r3, [pc, #188]	; (40b3d4 <_svfprintf_r+0x4a0>)
  40b318:	9224      	str	r2, [sp, #144]	; 0x90
  40b31a:	3110      	adds	r1, #16
  40b31c:	2a07      	cmp	r2, #7
  40b31e:	9125      	str	r1, [sp, #148]	; 0x94
  40b320:	e880 0018 	stmia.w	r0, {r3, r4}
  40b324:	ddf1      	ble.n	40b30a <_svfprintf_r+0x3d6>
  40b326:	aa23      	add	r2, sp, #140	; 0x8c
  40b328:	4631      	mov	r1, r6
  40b32a:	4628      	mov	r0, r5
  40b32c:	f005 f940 	bl	4105b0 <__ssprint_r>
  40b330:	2800      	cmp	r0, #0
  40b332:	f47f aef8 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b336:	3f10      	subs	r7, #16
  40b338:	2f10      	cmp	r7, #16
  40b33a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40b33c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b33e:	a830      	add	r0, sp, #192	; 0xc0
  40b340:	dce8      	bgt.n	40b314 <_svfprintf_r+0x3e0>
  40b342:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40b344:	463d      	mov	r5, r7
  40b346:	464f      	mov	r7, r9
  40b348:	4681      	mov	r9, r0
  40b34a:	3201      	adds	r2, #1
  40b34c:	186c      	adds	r4, r5, r1
  40b34e:	2a07      	cmp	r2, #7
  40b350:	9425      	str	r4, [sp, #148]	; 0x94
  40b352:	9224      	str	r2, [sp, #144]	; 0x90
  40b354:	f8c9 7000 	str.w	r7, [r9]
  40b358:	f8c9 5004 	str.w	r5, [r9, #4]
  40b35c:	f300 8428 	bgt.w	40bbb0 <_svfprintf_r+0xc7c>
  40b360:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40b364:	f109 0908 	add.w	r9, r9, #8
  40b368:	b177      	cbz	r7, 40b388 <_svfprintf_r+0x454>
  40b36a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b36c:	3301      	adds	r3, #1
  40b36e:	3401      	adds	r4, #1
  40b370:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40b374:	2201      	movs	r2, #1
  40b376:	2b07      	cmp	r3, #7
  40b378:	9425      	str	r4, [sp, #148]	; 0x94
  40b37a:	9324      	str	r3, [sp, #144]	; 0x90
  40b37c:	e889 0006 	stmia.w	r9, {r1, r2}
  40b380:	f300 83a0 	bgt.w	40bac4 <_svfprintf_r+0xb90>
  40b384:	f109 0908 	add.w	r9, r9, #8
  40b388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b38a:	b16b      	cbz	r3, 40b3a8 <_svfprintf_r+0x474>
  40b38c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b38e:	3301      	adds	r3, #1
  40b390:	3402      	adds	r4, #2
  40b392:	a91c      	add	r1, sp, #112	; 0x70
  40b394:	2202      	movs	r2, #2
  40b396:	2b07      	cmp	r3, #7
  40b398:	9425      	str	r4, [sp, #148]	; 0x94
  40b39a:	9324      	str	r3, [sp, #144]	; 0x90
  40b39c:	e889 0006 	stmia.w	r9, {r1, r2}
  40b3a0:	f300 839c 	bgt.w	40badc <_svfprintf_r+0xba8>
  40b3a4:	f109 0908 	add.w	r9, r9, #8
  40b3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b3aa:	2b80      	cmp	r3, #128	; 0x80
  40b3ac:	f000 82d5 	beq.w	40b95a <_svfprintf_r+0xa26>
  40b3b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b3b2:	ebc3 070b 	rsb	r7, r3, fp
  40b3b6:	2f00      	cmp	r7, #0
  40b3b8:	dd39      	ble.n	40b42e <_svfprintf_r+0x4fa>
  40b3ba:	4a07      	ldr	r2, [pc, #28]	; (40b3d8 <_svfprintf_r+0x4a4>)
  40b3bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b3be:	920f      	str	r2, [sp, #60]	; 0x3c
  40b3c0:	2f10      	cmp	r7, #16
  40b3c2:	dd28      	ble.n	40b416 <_svfprintf_r+0x4e2>
  40b3c4:	4622      	mov	r2, r4
  40b3c6:	f04f 0b10 	mov.w	fp, #16
  40b3ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b3cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b3ce:	e00a      	b.n	40b3e6 <_svfprintf_r+0x4b2>
  40b3d0:	00412d70 	.word	0x00412d70
  40b3d4:	00412d90 	.word	0x00412d90
  40b3d8:	00412d3c 	.word	0x00412d3c
  40b3dc:	3f10      	subs	r7, #16
  40b3de:	2f10      	cmp	r7, #16
  40b3e0:	f109 0908 	add.w	r9, r9, #8
  40b3e4:	dd16      	ble.n	40b414 <_svfprintf_r+0x4e0>
  40b3e6:	3301      	adds	r3, #1
  40b3e8:	3210      	adds	r2, #16
  40b3ea:	2b07      	cmp	r3, #7
  40b3ec:	9225      	str	r2, [sp, #148]	; 0x94
  40b3ee:	9324      	str	r3, [sp, #144]	; 0x90
  40b3f0:	e889 0c00 	stmia.w	r9, {sl, fp}
  40b3f4:	ddf2      	ble.n	40b3dc <_svfprintf_r+0x4a8>
  40b3f6:	aa23      	add	r2, sp, #140	; 0x8c
  40b3f8:	4621      	mov	r1, r4
  40b3fa:	4628      	mov	r0, r5
  40b3fc:	f005 f8d8 	bl	4105b0 <__ssprint_r>
  40b400:	2800      	cmp	r0, #0
  40b402:	f47f ae90 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b406:	3f10      	subs	r7, #16
  40b408:	2f10      	cmp	r7, #16
  40b40a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b40c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b40e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40b412:	dce8      	bgt.n	40b3e6 <_svfprintf_r+0x4b2>
  40b414:	4614      	mov	r4, r2
  40b416:	3301      	adds	r3, #1
  40b418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b41a:	9324      	str	r3, [sp, #144]	; 0x90
  40b41c:	443c      	add	r4, r7
  40b41e:	2b07      	cmp	r3, #7
  40b420:	9425      	str	r4, [sp, #148]	; 0x94
  40b422:	e889 0084 	stmia.w	r9, {r2, r7}
  40b426:	f300 8341 	bgt.w	40baac <_svfprintf_r+0xb78>
  40b42a:	f109 0908 	add.w	r9, r9, #8
  40b42e:	9b07      	ldr	r3, [sp, #28]
  40b430:	05da      	lsls	r2, r3, #23
  40b432:	f100 8230 	bmi.w	40b896 <_svfprintf_r+0x962>
  40b436:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b438:	990d      	ldr	r1, [sp, #52]	; 0x34
  40b43a:	f8c9 6000 	str.w	r6, [r9]
  40b43e:	3301      	adds	r3, #1
  40b440:	440c      	add	r4, r1
  40b442:	2b07      	cmp	r3, #7
  40b444:	9425      	str	r4, [sp, #148]	; 0x94
  40b446:	f8c9 1004 	str.w	r1, [r9, #4]
  40b44a:	9324      	str	r3, [sp, #144]	; 0x90
  40b44c:	f300 8318 	bgt.w	40ba80 <_svfprintf_r+0xb4c>
  40b450:	f109 0908 	add.w	r9, r9, #8
  40b454:	9b07      	ldr	r3, [sp, #28]
  40b456:	0759      	lsls	r1, r3, #29
  40b458:	d53f      	bpl.n	40b4da <_svfprintf_r+0x5a6>
  40b45a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b45c:	9a08      	ldr	r2, [sp, #32]
  40b45e:	1a9d      	subs	r5, r3, r2
  40b460:	2d00      	cmp	r5, #0
  40b462:	dd3a      	ble.n	40b4da <_svfprintf_r+0x5a6>
  40b464:	2d10      	cmp	r5, #16
  40b466:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b468:	4fbc      	ldr	r7, [pc, #752]	; (40b75c <_svfprintf_r+0x828>)
  40b46a:	dd23      	ble.n	40b4b4 <_svfprintf_r+0x580>
  40b46c:	4622      	mov	r2, r4
  40b46e:	2610      	movs	r6, #16
  40b470:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40b474:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b476:	e004      	b.n	40b482 <_svfprintf_r+0x54e>
  40b478:	3d10      	subs	r5, #16
  40b47a:	2d10      	cmp	r5, #16
  40b47c:	f109 0908 	add.w	r9, r9, #8
  40b480:	dd17      	ble.n	40b4b2 <_svfprintf_r+0x57e>
  40b482:	3301      	adds	r3, #1
  40b484:	49b5      	ldr	r1, [pc, #724]	; (40b75c <_svfprintf_r+0x828>)
  40b486:	9324      	str	r3, [sp, #144]	; 0x90
  40b488:	3210      	adds	r2, #16
  40b48a:	2b07      	cmp	r3, #7
  40b48c:	9225      	str	r2, [sp, #148]	; 0x94
  40b48e:	e889 0042 	stmia.w	r9, {r1, r6}
  40b492:	ddf1      	ble.n	40b478 <_svfprintf_r+0x544>
  40b494:	aa23      	add	r2, sp, #140	; 0x8c
  40b496:	4621      	mov	r1, r4
  40b498:	4658      	mov	r0, fp
  40b49a:	f005 f889 	bl	4105b0 <__ssprint_r>
  40b49e:	2800      	cmp	r0, #0
  40b4a0:	f47f ae41 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b4a4:	3d10      	subs	r5, #16
  40b4a6:	2d10      	cmp	r5, #16
  40b4a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b4aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b4ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40b4b0:	dce7      	bgt.n	40b482 <_svfprintf_r+0x54e>
  40b4b2:	4614      	mov	r4, r2
  40b4b4:	3301      	adds	r3, #1
  40b4b6:	442c      	add	r4, r5
  40b4b8:	2b07      	cmp	r3, #7
  40b4ba:	9425      	str	r4, [sp, #148]	; 0x94
  40b4bc:	9324      	str	r3, [sp, #144]	; 0x90
  40b4be:	f8c9 7000 	str.w	r7, [r9]
  40b4c2:	f8c9 5004 	str.w	r5, [r9, #4]
  40b4c6:	dd08      	ble.n	40b4da <_svfprintf_r+0x5a6>
  40b4c8:	aa23      	add	r2, sp, #140	; 0x8c
  40b4ca:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b4cc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b4ce:	f005 f86f 	bl	4105b0 <__ssprint_r>
  40b4d2:	2800      	cmp	r0, #0
  40b4d4:	f47f ae27 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b4d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b4de:	9908      	ldr	r1, [sp, #32]
  40b4e0:	428a      	cmp	r2, r1
  40b4e2:	bfac      	ite	ge
  40b4e4:	189b      	addge	r3, r3, r2
  40b4e6:	185b      	addlt	r3, r3, r1
  40b4e8:	930b      	str	r3, [sp, #44]	; 0x2c
  40b4ea:	2c00      	cmp	r4, #0
  40b4ec:	f040 82d4 	bne.w	40ba98 <_svfprintf_r+0xb64>
  40b4f0:	2300      	movs	r3, #0
  40b4f2:	9324      	str	r3, [sp, #144]	; 0x90
  40b4f4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40b4f8:	e542      	b.n	40af80 <_svfprintf_r+0x4c>
  40b4fa:	9311      	str	r3, [sp, #68]	; 0x44
  40b4fc:	46ab      	mov	fp, r5
  40b4fe:	2a00      	cmp	r2, #0
  40b500:	f041 8059 	bne.w	40c5b6 <_svfprintf_r+0x1682>
  40b504:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40b506:	3707      	adds	r7, #7
  40b508:	f027 0307 	bic.w	r3, r7, #7
  40b50c:	f103 0208 	add.w	r2, r3, #8
  40b510:	920e      	str	r2, [sp, #56]	; 0x38
  40b512:	681a      	ldr	r2, [r3, #0]
  40b514:	9214      	str	r2, [sp, #80]	; 0x50
  40b516:	685b      	ldr	r3, [r3, #4]
  40b518:	9315      	str	r3, [sp, #84]	; 0x54
  40b51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b51c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b51e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40b522:	4628      	mov	r0, r5
  40b524:	4621      	mov	r1, r4
  40b526:	f04f 32ff 	mov.w	r2, #4294967295
  40b52a:	4b8d      	ldr	r3, [pc, #564]	; (40b760 <_svfprintf_r+0x82c>)
  40b52c:	f7fc fec8 	bl	4082c0 <__aeabi_dcmpun>
  40b530:	2800      	cmp	r0, #0
  40b532:	f040 84c1 	bne.w	40beb8 <_svfprintf_r+0xf84>
  40b536:	4628      	mov	r0, r5
  40b538:	4621      	mov	r1, r4
  40b53a:	f04f 32ff 	mov.w	r2, #4294967295
  40b53e:	4b88      	ldr	r3, [pc, #544]	; (40b760 <_svfprintf_r+0x82c>)
  40b540:	f7fc fea0 	bl	408284 <__aeabi_dcmple>
  40b544:	2800      	cmp	r0, #0
  40b546:	f040 84b7 	bne.w	40beb8 <_svfprintf_r+0xf84>
  40b54a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40b54c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40b54e:	2200      	movs	r2, #0
  40b550:	2300      	movs	r3, #0
  40b552:	f7fc fe8d 	bl	408270 <__aeabi_dcmplt>
  40b556:	2800      	cmp	r0, #0
  40b558:	f040 874b 	bne.w	40c3f2 <_svfprintf_r+0x14be>
  40b55c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40b560:	4e80      	ldr	r6, [pc, #512]	; (40b764 <_svfprintf_r+0x830>)
  40b562:	4b81      	ldr	r3, [pc, #516]	; (40b768 <_svfprintf_r+0x834>)
  40b564:	9907      	ldr	r1, [sp, #28]
  40b566:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40b56a:	9107      	str	r1, [sp, #28]
  40b56c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40b56e:	2203      	movs	r2, #3
  40b570:	f04f 0b00 	mov.w	fp, #0
  40b574:	9208      	str	r2, [sp, #32]
  40b576:	2947      	cmp	r1, #71	; 0x47
  40b578:	bfd8      	it	le
  40b57a:	461e      	movle	r6, r3
  40b57c:	920d      	str	r2, [sp, #52]	; 0x34
  40b57e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40b582:	e69d      	b.n	40b2c0 <_svfprintf_r+0x38c>
  40b584:	9b07      	ldr	r3, [sp, #28]
  40b586:	f043 0308 	orr.w	r3, r3, #8
  40b58a:	9307      	str	r3, [sp, #28]
  40b58c:	f898 3000 	ldrb.w	r3, [r8]
  40b590:	e529      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b592:	9311      	str	r3, [sp, #68]	; 0x44
  40b594:	46ab      	mov	fp, r5
  40b596:	2a00      	cmp	r2, #0
  40b598:	f041 8009 	bne.w	40c5ae <_svfprintf_r+0x167a>
  40b59c:	9b07      	ldr	r3, [sp, #28]
  40b59e:	f043 0310 	orr.w	r3, r3, #16
  40b5a2:	9307      	str	r3, [sp, #28]
  40b5a4:	9a07      	ldr	r2, [sp, #28]
  40b5a6:	f012 0320 	ands.w	r3, r2, #32
  40b5aa:	f47f add2 	bne.w	40b152 <_svfprintf_r+0x21e>
  40b5ae:	9907      	ldr	r1, [sp, #28]
  40b5b0:	f011 0210 	ands.w	r2, r1, #16
  40b5b4:	f000 8507 	beq.w	40bfc6 <_svfprintf_r+0x1092>
  40b5b8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b5ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40b5be:	f1bb 0f00 	cmp.w	fp, #0
  40b5c2:	6804      	ldr	r4, [r0, #0]
  40b5c4:	f100 0704 	add.w	r7, r0, #4
  40b5c8:	f04f 0500 	mov.w	r5, #0
  40b5cc:	f2c0 8521 	blt.w	40c012 <_svfprintf_r+0x10de>
  40b5d0:	460a      	mov	r2, r1
  40b5d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40b5d6:	9207      	str	r2, [sp, #28]
  40b5d8:	ea54 0205 	orrs.w	r2, r4, r5
  40b5dc:	970e      	str	r7, [sp, #56]	; 0x38
  40b5de:	f000 8143 	beq.w	40b868 <_svfprintf_r+0x934>
  40b5e2:	461f      	mov	r7, r3
  40b5e4:	e5cb      	b.n	40b17e <_svfprintf_r+0x24a>
  40b5e6:	9311      	str	r3, [sp, #68]	; 0x44
  40b5e8:	46ab      	mov	fp, r5
  40b5ea:	2a00      	cmp	r2, #0
  40b5ec:	f040 87d7 	bne.w	40c59e <_svfprintf_r+0x166a>
  40b5f0:	9b07      	ldr	r3, [sp, #28]
  40b5f2:	f043 0310 	orr.w	r3, r3, #16
  40b5f6:	9307      	str	r3, [sp, #28]
  40b5f8:	9a07      	ldr	r2, [sp, #28]
  40b5fa:	f012 0320 	ands.w	r3, r2, #32
  40b5fe:	f000 8332 	beq.w	40bc66 <_svfprintf_r+0xd32>
  40b602:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40b604:	3707      	adds	r7, #7
  40b606:	f027 0307 	bic.w	r3, r7, #7
  40b60a:	2700      	movs	r7, #0
  40b60c:	f103 0108 	add.w	r1, r3, #8
  40b610:	45bb      	cmp	fp, r7
  40b612:	910e      	str	r1, [sp, #56]	; 0x38
  40b614:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b618:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40b61c:	f2c0 835c 	blt.w	40bcd8 <_svfprintf_r+0xda4>
  40b620:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40b624:	9307      	str	r3, [sp, #28]
  40b626:	ea54 0305 	orrs.w	r3, r4, r5
  40b62a:	f47f ae25 	bne.w	40b278 <_svfprintf_r+0x344>
  40b62e:	f1bb 0f00 	cmp.w	fp, #0
  40b632:	f000 80fe 	beq.w	40b832 <_svfprintf_r+0x8fe>
  40b636:	2400      	movs	r4, #0
  40b638:	ae40      	add	r6, sp, #256	; 0x100
  40b63a:	3430      	adds	r4, #48	; 0x30
  40b63c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40b640:	e634      	b.n	40b2ac <_svfprintf_r+0x378>
  40b642:	9311      	str	r3, [sp, #68]	; 0x44
  40b644:	46ab      	mov	fp, r5
  40b646:	2a00      	cmp	r2, #0
  40b648:	f040 87a5 	bne.w	40c596 <_svfprintf_r+0x1662>
  40b64c:	9b07      	ldr	r3, [sp, #28]
  40b64e:	4847      	ldr	r0, [pc, #284]	; (40b76c <_svfprintf_r+0x838>)
  40b650:	069d      	lsls	r5, r3, #26
  40b652:	f140 8097 	bpl.w	40b784 <_svfprintf_r+0x850>
  40b656:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40b658:	3707      	adds	r7, #7
  40b65a:	f027 0307 	bic.w	r3, r7, #7
  40b65e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b662:	f103 0208 	add.w	r2, r3, #8
  40b666:	920e      	str	r2, [sp, #56]	; 0x38
  40b668:	9a07      	ldr	r2, [sp, #28]
  40b66a:	f012 0701 	ands.w	r7, r2, #1
  40b66e:	f000 8241 	beq.w	40baf4 <_svfprintf_r+0xbc0>
  40b672:	ea54 0305 	orrs.w	r3, r4, r5
  40b676:	f000 84f5 	beq.w	40c064 <_svfprintf_r+0x1130>
  40b67a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40b67e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40b682:	2700      	movs	r7, #0
  40b684:	9a07      	ldr	r2, [sp, #28]
  40b686:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40b68a:	2330      	movs	r3, #48	; 0x30
  40b68c:	45bb      	cmp	fp, r7
  40b68e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40b692:	f042 0302 	orr.w	r3, r2, #2
  40b696:	f2c0 86a9 	blt.w	40c3ec <_svfprintf_r+0x14b8>
  40b69a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40b69e:	f043 0302 	orr.w	r3, r3, #2
  40b6a2:	9307      	str	r3, [sp, #28]
  40b6a4:	ae30      	add	r6, sp, #192	; 0xc0
  40b6a6:	0923      	lsrs	r3, r4, #4
  40b6a8:	f004 010f 	and.w	r1, r4, #15
  40b6ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40b6b0:	092a      	lsrs	r2, r5, #4
  40b6b2:	461c      	mov	r4, r3
  40b6b4:	4615      	mov	r5, r2
  40b6b6:	5c43      	ldrb	r3, [r0, r1]
  40b6b8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40b6bc:	ea54 0305 	orrs.w	r3, r4, r5
  40b6c0:	d1f1      	bne.n	40b6a6 <_svfprintf_r+0x772>
  40b6c2:	e5f3      	b.n	40b2ac <_svfprintf_r+0x378>
  40b6c4:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b6c6:	9311      	str	r3, [sp, #68]	; 0x44
  40b6c8:	680a      	ldr	r2, [r1, #0]
  40b6ca:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40b6ce:	2300      	movs	r3, #0
  40b6d0:	460a      	mov	r2, r1
  40b6d2:	461f      	mov	r7, r3
  40b6d4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40b6d8:	3204      	adds	r2, #4
  40b6da:	2301      	movs	r3, #1
  40b6dc:	9308      	str	r3, [sp, #32]
  40b6de:	46bb      	mov	fp, r7
  40b6e0:	9713      	str	r7, [sp, #76]	; 0x4c
  40b6e2:	920e      	str	r2, [sp, #56]	; 0x38
  40b6e4:	930d      	str	r3, [sp, #52]	; 0x34
  40b6e6:	ae26      	add	r6, sp, #152	; 0x98
  40b6e8:	e5ee      	b.n	40b2c8 <_svfprintf_r+0x394>
  40b6ea:	9311      	str	r3, [sp, #68]	; 0x44
  40b6ec:	46ab      	mov	fp, r5
  40b6ee:	2a00      	cmp	r2, #0
  40b6f0:	f43f ada0 	beq.w	40b234 <_svfprintf_r+0x300>
  40b6f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b6f8:	e59c      	b.n	40b234 <_svfprintf_r+0x300>
  40b6fa:	9b07      	ldr	r3, [sp, #28]
  40b6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b700:	9307      	str	r3, [sp, #28]
  40b702:	f898 3000 	ldrb.w	r3, [r8]
  40b706:	e46e      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b708:	f898 3000 	ldrb.w	r3, [r8]
  40b70c:	2900      	cmp	r1, #0
  40b70e:	f47f ac6a 	bne.w	40afe6 <_svfprintf_r+0xb2>
  40b712:	2201      	movs	r2, #1
  40b714:	2120      	movs	r1, #32
  40b716:	e466      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b718:	9b07      	ldr	r3, [sp, #28]
  40b71a:	f043 0301 	orr.w	r3, r3, #1
  40b71e:	9307      	str	r3, [sp, #28]
  40b720:	f898 3000 	ldrb.w	r3, [r8]
  40b724:	e45f      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b726:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40b728:	6823      	ldr	r3, [r4, #0]
  40b72a:	930c      	str	r3, [sp, #48]	; 0x30
  40b72c:	4618      	mov	r0, r3
  40b72e:	2800      	cmp	r0, #0
  40b730:	4623      	mov	r3, r4
  40b732:	f103 0304 	add.w	r3, r3, #4
  40b736:	f6ff acb8 	blt.w	40b0aa <_svfprintf_r+0x176>
  40b73a:	930e      	str	r3, [sp, #56]	; 0x38
  40b73c:	f898 3000 	ldrb.w	r3, [r8]
  40b740:	e451      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b742:	f898 3000 	ldrb.w	r3, [r8]
  40b746:	2201      	movs	r2, #1
  40b748:	212b      	movs	r1, #43	; 0x2b
  40b74a:	e44c      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b74c:	9311      	str	r3, [sp, #68]	; 0x44
  40b74e:	46ab      	mov	fp, r5
  40b750:	2a00      	cmp	r2, #0
  40b752:	f43f af51 	beq.w	40b5f8 <_svfprintf_r+0x6c4>
  40b756:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b75a:	e74d      	b.n	40b5f8 <_svfprintf_r+0x6c4>
  40b75c:	00412d90 	.word	0x00412d90
  40b760:	7fefffff 	.word	0x7fefffff
  40b764:	00412d50 	.word	0x00412d50
  40b768:	00412d4c 	.word	0x00412d4c
  40b76c:	00412d5c 	.word	0x00412d5c
  40b770:	9311      	str	r3, [sp, #68]	; 0x44
  40b772:	46ab      	mov	fp, r5
  40b774:	2a00      	cmp	r2, #0
  40b776:	f040 8703 	bne.w	40c580 <_svfprintf_r+0x164c>
  40b77a:	9b07      	ldr	r3, [sp, #28]
  40b77c:	4899      	ldr	r0, [pc, #612]	; (40b9e4 <_svfprintf_r+0xab0>)
  40b77e:	069d      	lsls	r5, r3, #26
  40b780:	f53f af69 	bmi.w	40b656 <_svfprintf_r+0x722>
  40b784:	9b07      	ldr	r3, [sp, #28]
  40b786:	06dc      	lsls	r4, r3, #27
  40b788:	f140 845e 	bpl.w	40c048 <_svfprintf_r+0x1114>
  40b78c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b78e:	4613      	mov	r3, r2
  40b790:	3304      	adds	r3, #4
  40b792:	6814      	ldr	r4, [r2, #0]
  40b794:	930e      	str	r3, [sp, #56]	; 0x38
  40b796:	2500      	movs	r5, #0
  40b798:	e766      	b.n	40b668 <_svfprintf_r+0x734>
  40b79a:	f898 3000 	ldrb.w	r3, [r8]
  40b79e:	2b6c      	cmp	r3, #108	; 0x6c
  40b7a0:	f000 84e1 	beq.w	40c166 <_svfprintf_r+0x1232>
  40b7a4:	9807      	ldr	r0, [sp, #28]
  40b7a6:	f040 0010 	orr.w	r0, r0, #16
  40b7aa:	9007      	str	r0, [sp, #28]
  40b7ac:	e41b      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b7ae:	2a00      	cmp	r2, #0
  40b7b0:	f040 86db 	bne.w	40c56a <_svfprintf_r+0x1636>
  40b7b4:	9b07      	ldr	r3, [sp, #28]
  40b7b6:	069b      	lsls	r3, r3, #26
  40b7b8:	f140 842f 	bpl.w	40c01a <_svfprintf_r+0x10e6>
  40b7bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b7be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b7c0:	6813      	ldr	r3, [r2, #0]
  40b7c2:	17cd      	asrs	r5, r1, #31
  40b7c4:	4608      	mov	r0, r1
  40b7c6:	3204      	adds	r2, #4
  40b7c8:	4629      	mov	r1, r5
  40b7ca:	920e      	str	r2, [sp, #56]	; 0x38
  40b7cc:	e9c3 0100 	strd	r0, r1, [r3]
  40b7d0:	f7ff bbd6 	b.w	40af80 <_svfprintf_r+0x4c>
  40b7d4:	9b07      	ldr	r3, [sp, #28]
  40b7d6:	f043 0320 	orr.w	r3, r3, #32
  40b7da:	9307      	str	r3, [sp, #28]
  40b7dc:	f898 3000 	ldrb.w	r3, [r8]
  40b7e0:	e401      	b.n	40afe6 <_svfprintf_r+0xb2>
  40b7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b7e4:	9311      	str	r3, [sp, #68]	; 0x44
  40b7e6:	6816      	ldr	r6, [r2, #0]
  40b7e8:	2400      	movs	r4, #0
  40b7ea:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40b7ee:	1d17      	adds	r7, r2, #4
  40b7f0:	2e00      	cmp	r6, #0
  40b7f2:	f000 85bd 	beq.w	40c370 <_svfprintf_r+0x143c>
  40b7f6:	2d00      	cmp	r5, #0
  40b7f8:	f2c0 850f 	blt.w	40c21a <_svfprintf_r+0x12e6>
  40b7fc:	462a      	mov	r2, r5
  40b7fe:	4621      	mov	r1, r4
  40b800:	4630      	mov	r0, r6
  40b802:	f003 ff55 	bl	40f6b0 <memchr>
  40b806:	2800      	cmp	r0, #0
  40b808:	f000 8604 	beq.w	40c414 <_svfprintf_r+0x14e0>
  40b80c:	1b83      	subs	r3, r0, r6
  40b80e:	930d      	str	r3, [sp, #52]	; 0x34
  40b810:	46a3      	mov	fp, r4
  40b812:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b816:	970e      	str	r7, [sp, #56]	; 0x38
  40b818:	9308      	str	r3, [sp, #32]
  40b81a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40b81e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40b822:	e54d      	b.n	40b2c0 <_svfprintf_r+0x38c>
  40b824:	486f      	ldr	r0, [pc, #444]	; (40b9e4 <_svfprintf_r+0xab0>)
  40b826:	9211      	str	r2, [sp, #68]	; 0x44
  40b828:	f1bb 0f00 	cmp.w	fp, #0
  40b82c:	f040 8173 	bne.w	40bb16 <_svfprintf_r+0xbe2>
  40b830:	465f      	mov	r7, fp
  40b832:	f04f 0b00 	mov.w	fp, #0
  40b836:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40b83a:	ae30      	add	r6, sp, #192	; 0xc0
  40b83c:	e539      	b.n	40b2b2 <_svfprintf_r+0x37e>
  40b83e:	9311      	str	r3, [sp, #68]	; 0x44
  40b840:	2a00      	cmp	r2, #0
  40b842:	f040 86b0 	bne.w	40c5a6 <_svfprintf_r+0x1672>
  40b846:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b848:	2a00      	cmp	r2, #0
  40b84a:	f43f ac65 	beq.w	40b118 <_svfprintf_r+0x1e4>
  40b84e:	2300      	movs	r3, #0
  40b850:	2101      	movs	r1, #1
  40b852:	461f      	mov	r7, r3
  40b854:	9108      	str	r1, [sp, #32]
  40b856:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40b85a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40b85e:	469b      	mov	fp, r3
  40b860:	9313      	str	r3, [sp, #76]	; 0x4c
  40b862:	910d      	str	r1, [sp, #52]	; 0x34
  40b864:	ae26      	add	r6, sp, #152	; 0x98
  40b866:	e52f      	b.n	40b2c8 <_svfprintf_r+0x394>
  40b868:	f1bb 0f00 	cmp.w	fp, #0
  40b86c:	f000 85dd 	beq.w	40c42a <_svfprintf_r+0x14f6>
  40b870:	2700      	movs	r7, #0
  40b872:	2400      	movs	r4, #0
  40b874:	2500      	movs	r5, #0
  40b876:	e482      	b.n	40b17e <_svfprintf_r+0x24a>
  40b878:	485a      	ldr	r0, [pc, #360]	; (40b9e4 <_svfprintf_r+0xab0>)
  40b87a:	9307      	str	r3, [sp, #28]
  40b87c:	9211      	str	r2, [sp, #68]	; 0x44
  40b87e:	ea54 0305 	orrs.w	r3, r4, r5
  40b882:	970e      	str	r7, [sp, #56]	; 0x38
  40b884:	f04f 0700 	mov.w	r7, #0
  40b888:	f47f af0c 	bne.w	40b6a4 <_svfprintf_r+0x770>
  40b88c:	2400      	movs	r4, #0
  40b88e:	2500      	movs	r5, #0
  40b890:	e708      	b.n	40b6a4 <_svfprintf_r+0x770>
  40b892:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b894:	e568      	b.n	40b368 <_svfprintf_r+0x434>
  40b896:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b898:	2b65      	cmp	r3, #101	; 0x65
  40b89a:	f340 80a9 	ble.w	40b9f0 <_svfprintf_r+0xabc>
  40b89e:	9814      	ldr	r0, [sp, #80]	; 0x50
  40b8a0:	9915      	ldr	r1, [sp, #84]	; 0x54
  40b8a2:	2200      	movs	r2, #0
  40b8a4:	2300      	movs	r3, #0
  40b8a6:	f7fc fcd9 	bl	40825c <__aeabi_dcmpeq>
  40b8aa:	2800      	cmp	r0, #0
  40b8ac:	f000 8135 	beq.w	40bb1a <_svfprintf_r+0xbe6>
  40b8b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b8b2:	4a4d      	ldr	r2, [pc, #308]	; (40b9e8 <_svfprintf_r+0xab4>)
  40b8b4:	f8c9 2000 	str.w	r2, [r9]
  40b8b8:	3301      	adds	r3, #1
  40b8ba:	3401      	adds	r4, #1
  40b8bc:	2201      	movs	r2, #1
  40b8be:	2b07      	cmp	r3, #7
  40b8c0:	9425      	str	r4, [sp, #148]	; 0x94
  40b8c2:	9324      	str	r3, [sp, #144]	; 0x90
  40b8c4:	f8c9 2004 	str.w	r2, [r9, #4]
  40b8c8:	f300 83e6 	bgt.w	40c098 <_svfprintf_r+0x1164>
  40b8cc:	f109 0908 	add.w	r9, r9, #8
  40b8d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40b8d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b8d4:	4293      	cmp	r3, r2
  40b8d6:	db03      	blt.n	40b8e0 <_svfprintf_r+0x9ac>
  40b8d8:	9b07      	ldr	r3, [sp, #28]
  40b8da:	07db      	lsls	r3, r3, #31
  40b8dc:	f57f adba 	bpl.w	40b454 <_svfprintf_r+0x520>
  40b8e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b8e2:	9916      	ldr	r1, [sp, #88]	; 0x58
  40b8e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40b8e6:	f8c9 2000 	str.w	r2, [r9]
  40b8ea:	3301      	adds	r3, #1
  40b8ec:	440c      	add	r4, r1
  40b8ee:	2b07      	cmp	r3, #7
  40b8f0:	9425      	str	r4, [sp, #148]	; 0x94
  40b8f2:	f8c9 1004 	str.w	r1, [r9, #4]
  40b8f6:	9324      	str	r3, [sp, #144]	; 0x90
  40b8f8:	f300 843f 	bgt.w	40c17a <_svfprintf_r+0x1246>
  40b8fc:	f109 0908 	add.w	r9, r9, #8
  40b900:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b902:	1e5d      	subs	r5, r3, #1
  40b904:	2d00      	cmp	r5, #0
  40b906:	f77f ada5 	ble.w	40b454 <_svfprintf_r+0x520>
  40b90a:	4a38      	ldr	r2, [pc, #224]	; (40b9ec <_svfprintf_r+0xab8>)
  40b90c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b90e:	920f      	str	r2, [sp, #60]	; 0x3c
  40b910:	2d10      	cmp	r5, #16
  40b912:	f340 81e6 	ble.w	40bce2 <_svfprintf_r+0xdae>
  40b916:	2610      	movs	r6, #16
  40b918:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b91a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40b91e:	e005      	b.n	40b92c <_svfprintf_r+0x9f8>
  40b920:	f109 0908 	add.w	r9, r9, #8
  40b924:	3d10      	subs	r5, #16
  40b926:	2d10      	cmp	r5, #16
  40b928:	f340 81db 	ble.w	40bce2 <_svfprintf_r+0xdae>
  40b92c:	3301      	adds	r3, #1
  40b92e:	3410      	adds	r4, #16
  40b930:	2b07      	cmp	r3, #7
  40b932:	9425      	str	r4, [sp, #148]	; 0x94
  40b934:	9324      	str	r3, [sp, #144]	; 0x90
  40b936:	f8c9 a000 	str.w	sl, [r9]
  40b93a:	f8c9 6004 	str.w	r6, [r9, #4]
  40b93e:	ddef      	ble.n	40b920 <_svfprintf_r+0x9ec>
  40b940:	aa23      	add	r2, sp, #140	; 0x8c
  40b942:	4659      	mov	r1, fp
  40b944:	4638      	mov	r0, r7
  40b946:	f004 fe33 	bl	4105b0 <__ssprint_r>
  40b94a:	2800      	cmp	r0, #0
  40b94c:	f47f abeb 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b950:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b952:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b954:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40b958:	e7e4      	b.n	40b924 <_svfprintf_r+0x9f0>
  40b95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b95c:	9a08      	ldr	r2, [sp, #32]
  40b95e:	1a9f      	subs	r7, r3, r2
  40b960:	2f00      	cmp	r7, #0
  40b962:	f77f ad25 	ble.w	40b3b0 <_svfprintf_r+0x47c>
  40b966:	4a21      	ldr	r2, [pc, #132]	; (40b9ec <_svfprintf_r+0xab8>)
  40b968:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b96a:	920f      	str	r2, [sp, #60]	; 0x3c
  40b96c:	2f10      	cmp	r7, #16
  40b96e:	dd2b      	ble.n	40b9c8 <_svfprintf_r+0xa94>
  40b970:	464a      	mov	r2, r9
  40b972:	4621      	mov	r1, r4
  40b974:	46b9      	mov	r9, r7
  40b976:	2510      	movs	r5, #16
  40b978:	4637      	mov	r7, r6
  40b97a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b97c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40b97e:	e006      	b.n	40b98e <_svfprintf_r+0xa5a>
  40b980:	f1a9 0910 	sub.w	r9, r9, #16
  40b984:	f1b9 0f10 	cmp.w	r9, #16
  40b988:	f102 0208 	add.w	r2, r2, #8
  40b98c:	dd18      	ble.n	40b9c0 <_svfprintf_r+0xa8c>
  40b98e:	3301      	adds	r3, #1
  40b990:	3110      	adds	r1, #16
  40b992:	2b07      	cmp	r3, #7
  40b994:	9125      	str	r1, [sp, #148]	; 0x94
  40b996:	9324      	str	r3, [sp, #144]	; 0x90
  40b998:	f8c2 a000 	str.w	sl, [r2]
  40b99c:	6055      	str	r5, [r2, #4]
  40b99e:	ddef      	ble.n	40b980 <_svfprintf_r+0xa4c>
  40b9a0:	aa23      	add	r2, sp, #140	; 0x8c
  40b9a2:	4631      	mov	r1, r6
  40b9a4:	4620      	mov	r0, r4
  40b9a6:	f004 fe03 	bl	4105b0 <__ssprint_r>
  40b9aa:	2800      	cmp	r0, #0
  40b9ac:	f47f abbb 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40b9b0:	f1a9 0910 	sub.w	r9, r9, #16
  40b9b4:	f1b9 0f10 	cmp.w	r9, #16
  40b9b8:	9925      	ldr	r1, [sp, #148]	; 0x94
  40b9ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b9bc:	aa30      	add	r2, sp, #192	; 0xc0
  40b9be:	dce6      	bgt.n	40b98e <_svfprintf_r+0xa5a>
  40b9c0:	463e      	mov	r6, r7
  40b9c2:	460c      	mov	r4, r1
  40b9c4:	464f      	mov	r7, r9
  40b9c6:	4691      	mov	r9, r2
  40b9c8:	3301      	adds	r3, #1
  40b9ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b9cc:	9324      	str	r3, [sp, #144]	; 0x90
  40b9ce:	443c      	add	r4, r7
  40b9d0:	2b07      	cmp	r3, #7
  40b9d2:	9425      	str	r4, [sp, #148]	; 0x94
  40b9d4:	e889 0084 	stmia.w	r9, {r2, r7}
  40b9d8:	f300 8245 	bgt.w	40be66 <_svfprintf_r+0xf32>
  40b9dc:	f109 0908 	add.w	r9, r9, #8
  40b9e0:	e4e6      	b.n	40b3b0 <_svfprintf_r+0x47c>
  40b9e2:	bf00      	nop
  40b9e4:	00412d70 	.word	0x00412d70
  40b9e8:	00412d8c 	.word	0x00412d8c
  40b9ec:	00412d3c 	.word	0x00412d3c
  40b9f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b9f2:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40b9f4:	2b01      	cmp	r3, #1
  40b9f6:	f340 8208 	ble.w	40be0a <_svfprintf_r+0xed6>
  40b9fa:	3501      	adds	r5, #1
  40b9fc:	3401      	adds	r4, #1
  40b9fe:	2301      	movs	r3, #1
  40ba00:	2d07      	cmp	r5, #7
  40ba02:	9425      	str	r4, [sp, #148]	; 0x94
  40ba04:	9524      	str	r5, [sp, #144]	; 0x90
  40ba06:	f8c9 6000 	str.w	r6, [r9]
  40ba0a:	f8c9 3004 	str.w	r3, [r9, #4]
  40ba0e:	f300 820d 	bgt.w	40be2c <_svfprintf_r+0xef8>
  40ba12:	f109 0908 	add.w	r9, r9, #8
  40ba16:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40ba18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ba1a:	f8c9 3000 	str.w	r3, [r9]
  40ba1e:	3501      	adds	r5, #1
  40ba20:	4414      	add	r4, r2
  40ba22:	2d07      	cmp	r5, #7
  40ba24:	9425      	str	r4, [sp, #148]	; 0x94
  40ba26:	9524      	str	r5, [sp, #144]	; 0x90
  40ba28:	f8c9 2004 	str.w	r2, [r9, #4]
  40ba2c:	f300 820e 	bgt.w	40be4c <_svfprintf_r+0xf18>
  40ba30:	f109 0908 	add.w	r9, r9, #8
  40ba34:	2300      	movs	r3, #0
  40ba36:	9814      	ldr	r0, [sp, #80]	; 0x50
  40ba38:	9915      	ldr	r1, [sp, #84]	; 0x54
  40ba3a:	2200      	movs	r2, #0
  40ba3c:	f7fc fc0e 	bl	40825c <__aeabi_dcmpeq>
  40ba40:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ba42:	2800      	cmp	r0, #0
  40ba44:	f040 80c3 	bne.w	40bbce <_svfprintf_r+0xc9a>
  40ba48:	3b01      	subs	r3, #1
  40ba4a:	3501      	adds	r5, #1
  40ba4c:	3601      	adds	r6, #1
  40ba4e:	441c      	add	r4, r3
  40ba50:	2d07      	cmp	r5, #7
  40ba52:	9524      	str	r5, [sp, #144]	; 0x90
  40ba54:	9425      	str	r4, [sp, #148]	; 0x94
  40ba56:	f8c9 6000 	str.w	r6, [r9]
  40ba5a:	f8c9 3004 	str.w	r3, [r9, #4]
  40ba5e:	f300 80f5 	bgt.w	40bc4c <_svfprintf_r+0xd18>
  40ba62:	f109 0908 	add.w	r9, r9, #8
  40ba66:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40ba68:	f8c9 2004 	str.w	r2, [r9, #4]
  40ba6c:	3501      	adds	r5, #1
  40ba6e:	4414      	add	r4, r2
  40ba70:	ab1f      	add	r3, sp, #124	; 0x7c
  40ba72:	2d07      	cmp	r5, #7
  40ba74:	9425      	str	r4, [sp, #148]	; 0x94
  40ba76:	9524      	str	r5, [sp, #144]	; 0x90
  40ba78:	f8c9 3000 	str.w	r3, [r9]
  40ba7c:	f77f ace8 	ble.w	40b450 <_svfprintf_r+0x51c>
  40ba80:	aa23      	add	r2, sp, #140	; 0x8c
  40ba82:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ba84:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ba86:	f004 fd93 	bl	4105b0 <__ssprint_r>
  40ba8a:	2800      	cmp	r0, #0
  40ba8c:	f47f ab4b 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40ba90:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ba92:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ba96:	e4dd      	b.n	40b454 <_svfprintf_r+0x520>
  40ba98:	aa23      	add	r2, sp, #140	; 0x8c
  40ba9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ba9c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ba9e:	f004 fd87 	bl	4105b0 <__ssprint_r>
  40baa2:	2800      	cmp	r0, #0
  40baa4:	f43f ad24 	beq.w	40b4f0 <_svfprintf_r+0x5bc>
  40baa8:	f7ff bb3d 	b.w	40b126 <_svfprintf_r+0x1f2>
  40baac:	aa23      	add	r2, sp, #140	; 0x8c
  40baae:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bab0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bab2:	f004 fd7d 	bl	4105b0 <__ssprint_r>
  40bab6:	2800      	cmp	r0, #0
  40bab8:	f47f ab35 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40babc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40babe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bac2:	e4b4      	b.n	40b42e <_svfprintf_r+0x4fa>
  40bac4:	aa23      	add	r2, sp, #140	; 0x8c
  40bac6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bac8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40baca:	f004 fd71 	bl	4105b0 <__ssprint_r>
  40bace:	2800      	cmp	r0, #0
  40bad0:	f47f ab29 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bad4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bad6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bada:	e455      	b.n	40b388 <_svfprintf_r+0x454>
  40badc:	aa23      	add	r2, sp, #140	; 0x8c
  40bade:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bae0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bae2:	f004 fd65 	bl	4105b0 <__ssprint_r>
  40bae6:	2800      	cmp	r0, #0
  40bae8:	f47f ab1d 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40baec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40baee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40baf2:	e459      	b.n	40b3a8 <_svfprintf_r+0x474>
  40baf4:	f1bb 0f00 	cmp.w	fp, #0
  40baf8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40bafc:	f2c0 82d8 	blt.w	40c0b0 <_svfprintf_r+0x117c>
  40bb00:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40bb04:	9307      	str	r3, [sp, #28]
  40bb06:	ea54 0305 	orrs.w	r3, r4, r5
  40bb0a:	f47f adcb 	bne.w	40b6a4 <_svfprintf_r+0x770>
  40bb0e:	f1bb 0f00 	cmp.w	fp, #0
  40bb12:	f43f ae8d 	beq.w	40b830 <_svfprintf_r+0x8fc>
  40bb16:	2700      	movs	r7, #0
  40bb18:	e6b8      	b.n	40b88c <_svfprintf_r+0x958>
  40bb1a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40bb1c:	2d00      	cmp	r5, #0
  40bb1e:	f340 82ca 	ble.w	40c0b6 <_svfprintf_r+0x1182>
  40bb22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40bb24:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40bb26:	4293      	cmp	r3, r2
  40bb28:	bfa8      	it	ge
  40bb2a:	4613      	movge	r3, r2
  40bb2c:	2b00      	cmp	r3, #0
  40bb2e:	461d      	mov	r5, r3
  40bb30:	dd0d      	ble.n	40bb4e <_svfprintf_r+0xc1a>
  40bb32:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bb34:	f8c9 6000 	str.w	r6, [r9]
  40bb38:	3301      	adds	r3, #1
  40bb3a:	442c      	add	r4, r5
  40bb3c:	2b07      	cmp	r3, #7
  40bb3e:	9425      	str	r4, [sp, #148]	; 0x94
  40bb40:	f8c9 5004 	str.w	r5, [r9, #4]
  40bb44:	9324      	str	r3, [sp, #144]	; 0x90
  40bb46:	f300 839c 	bgt.w	40c282 <_svfprintf_r+0x134e>
  40bb4a:	f109 0908 	add.w	r9, r9, #8
  40bb4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40bb50:	2d00      	cmp	r5, #0
  40bb52:	bfa8      	it	ge
  40bb54:	1b5b      	subge	r3, r3, r5
  40bb56:	2b00      	cmp	r3, #0
  40bb58:	461d      	mov	r5, r3
  40bb5a:	f340 80f6 	ble.w	40bd4a <_svfprintf_r+0xe16>
  40bb5e:	4aba      	ldr	r2, [pc, #744]	; (40be48 <_svfprintf_r+0xf14>)
  40bb60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bb62:	920f      	str	r2, [sp, #60]	; 0x3c
  40bb64:	2d10      	cmp	r5, #16
  40bb66:	f340 828a 	ble.w	40c07e <_svfprintf_r+0x114a>
  40bb6a:	4622      	mov	r2, r4
  40bb6c:	2710      	movs	r7, #16
  40bb6e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40bb72:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40bb74:	e005      	b.n	40bb82 <_svfprintf_r+0xc4e>
  40bb76:	f109 0908 	add.w	r9, r9, #8
  40bb7a:	3d10      	subs	r5, #16
  40bb7c:	2d10      	cmp	r5, #16
  40bb7e:	f340 827d 	ble.w	40c07c <_svfprintf_r+0x1148>
  40bb82:	3301      	adds	r3, #1
  40bb84:	3210      	adds	r2, #16
  40bb86:	2b07      	cmp	r3, #7
  40bb88:	9225      	str	r2, [sp, #148]	; 0x94
  40bb8a:	9324      	str	r3, [sp, #144]	; 0x90
  40bb8c:	f8c9 a000 	str.w	sl, [r9]
  40bb90:	f8c9 7004 	str.w	r7, [r9, #4]
  40bb94:	ddef      	ble.n	40bb76 <_svfprintf_r+0xc42>
  40bb96:	aa23      	add	r2, sp, #140	; 0x8c
  40bb98:	4621      	mov	r1, r4
  40bb9a:	4658      	mov	r0, fp
  40bb9c:	f004 fd08 	bl	4105b0 <__ssprint_r>
  40bba0:	2800      	cmp	r0, #0
  40bba2:	f47f aac0 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bba6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40bba8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bbaa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bbae:	e7e4      	b.n	40bb7a <_svfprintf_r+0xc46>
  40bbb0:	aa23      	add	r2, sp, #140	; 0x8c
  40bbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bbb4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bbb6:	f004 fcfb 	bl	4105b0 <__ssprint_r>
  40bbba:	2800      	cmp	r0, #0
  40bbbc:	f47f aab3 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bbc0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40bbc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bbc6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bbca:	f7ff bbcd 	b.w	40b368 <_svfprintf_r+0x434>
  40bbce:	1e5e      	subs	r6, r3, #1
  40bbd0:	2e00      	cmp	r6, #0
  40bbd2:	f77f af48 	ble.w	40ba66 <_svfprintf_r+0xb32>
  40bbd6:	4b9c      	ldr	r3, [pc, #624]	; (40be48 <_svfprintf_r+0xf14>)
  40bbd8:	930f      	str	r3, [sp, #60]	; 0x3c
  40bbda:	2e10      	cmp	r6, #16
  40bbdc:	dd2c      	ble.n	40bc38 <_svfprintf_r+0xd04>
  40bbde:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40bbe2:	2710      	movs	r7, #16
  40bbe4:	46b0      	mov	r8, r6
  40bbe6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40bbea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40bbec:	e006      	b.n	40bbfc <_svfprintf_r+0xcc8>
  40bbee:	f1a8 0810 	sub.w	r8, r8, #16
  40bbf2:	f1b8 0f10 	cmp.w	r8, #16
  40bbf6:	f109 0908 	add.w	r9, r9, #8
  40bbfa:	dd1a      	ble.n	40bc32 <_svfprintf_r+0xcfe>
  40bbfc:	3501      	adds	r5, #1
  40bbfe:	3410      	adds	r4, #16
  40bc00:	2d07      	cmp	r5, #7
  40bc02:	9425      	str	r4, [sp, #148]	; 0x94
  40bc04:	9524      	str	r5, [sp, #144]	; 0x90
  40bc06:	f8c9 a000 	str.w	sl, [r9]
  40bc0a:	f8c9 7004 	str.w	r7, [r9, #4]
  40bc0e:	ddee      	ble.n	40bbee <_svfprintf_r+0xcba>
  40bc10:	aa23      	add	r2, sp, #140	; 0x8c
  40bc12:	4631      	mov	r1, r6
  40bc14:	4658      	mov	r0, fp
  40bc16:	f004 fccb 	bl	4105b0 <__ssprint_r>
  40bc1a:	2800      	cmp	r0, #0
  40bc1c:	f47f aa83 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bc20:	f1a8 0810 	sub.w	r8, r8, #16
  40bc24:	f1b8 0f10 	cmp.w	r8, #16
  40bc28:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bc2a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40bc2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bc30:	dce4      	bgt.n	40bbfc <_svfprintf_r+0xcc8>
  40bc32:	4646      	mov	r6, r8
  40bc34:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40bc38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bc3a:	3501      	adds	r5, #1
  40bc3c:	4434      	add	r4, r6
  40bc3e:	2d07      	cmp	r5, #7
  40bc40:	9425      	str	r4, [sp, #148]	; 0x94
  40bc42:	9524      	str	r5, [sp, #144]	; 0x90
  40bc44:	e889 0048 	stmia.w	r9, {r3, r6}
  40bc48:	f77f af0b 	ble.w	40ba62 <_svfprintf_r+0xb2e>
  40bc4c:	aa23      	add	r2, sp, #140	; 0x8c
  40bc4e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bc50:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bc52:	f004 fcad 	bl	4105b0 <__ssprint_r>
  40bc56:	2800      	cmp	r0, #0
  40bc58:	f47f aa65 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bc5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bc5e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40bc60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bc64:	e6ff      	b.n	40ba66 <_svfprintf_r+0xb32>
  40bc66:	9907      	ldr	r1, [sp, #28]
  40bc68:	f011 0210 	ands.w	r2, r1, #16
  40bc6c:	f000 8108 	beq.w	40be80 <_svfprintf_r+0xf4c>
  40bc70:	980e      	ldr	r0, [sp, #56]	; 0x38
  40bc72:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40bc76:	f1bb 0f00 	cmp.w	fp, #0
  40bc7a:	6804      	ldr	r4, [r0, #0]
  40bc7c:	f100 0704 	add.w	r7, r0, #4
  40bc80:	f04f 0500 	mov.w	r5, #0
  40bc84:	db26      	blt.n	40bcd4 <_svfprintf_r+0xda0>
  40bc86:	460a      	mov	r2, r1
  40bc88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40bc8c:	9207      	str	r2, [sp, #28]
  40bc8e:	ea54 0205 	orrs.w	r2, r4, r5
  40bc92:	970e      	str	r7, [sp, #56]	; 0x38
  40bc94:	461f      	mov	r7, r3
  40bc96:	f47f aaef 	bne.w	40b278 <_svfprintf_r+0x344>
  40bc9a:	e4c8      	b.n	40b62e <_svfprintf_r+0x6fa>
  40bc9c:	9b07      	ldr	r3, [sp, #28]
  40bc9e:	06d9      	lsls	r1, r3, #27
  40bca0:	d42a      	bmi.n	40bcf8 <_svfprintf_r+0xdc4>
  40bca2:	9b07      	ldr	r3, [sp, #28]
  40bca4:	065a      	lsls	r2, r3, #25
  40bca6:	d527      	bpl.n	40bcf8 <_svfprintf_r+0xdc4>
  40bca8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40bcaa:	f9b1 4000 	ldrsh.w	r4, [r1]
  40bcae:	3104      	adds	r1, #4
  40bcb0:	17e5      	asrs	r5, r4, #31
  40bcb2:	4622      	mov	r2, r4
  40bcb4:	462b      	mov	r3, r5
  40bcb6:	910e      	str	r1, [sp, #56]	; 0x38
  40bcb8:	f7ff bacb 	b.w	40b252 <_svfprintf_r+0x31e>
  40bcbc:	990e      	ldr	r1, [sp, #56]	; 0x38
  40bcbe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40bcc2:	f1bb 0f00 	cmp.w	fp, #0
  40bcc6:	680c      	ldr	r4, [r1, #0]
  40bcc8:	f101 0704 	add.w	r7, r1, #4
  40bccc:	f04f 0500 	mov.w	r5, #0
  40bcd0:	f280 8247 	bge.w	40c162 <_svfprintf_r+0x122e>
  40bcd4:	970e      	str	r7, [sp, #56]	; 0x38
  40bcd6:	461f      	mov	r7, r3
  40bcd8:	ea54 0305 	orrs.w	r3, r4, r5
  40bcdc:	f47f aacc 	bne.w	40b278 <_svfprintf_r+0x344>
  40bce0:	e4aa      	b.n	40b638 <_svfprintf_r+0x704>
  40bce2:	3301      	adds	r3, #1
  40bce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bce6:	9324      	str	r3, [sp, #144]	; 0x90
  40bce8:	442c      	add	r4, r5
  40bcea:	2b07      	cmp	r3, #7
  40bcec:	9425      	str	r4, [sp, #148]	; 0x94
  40bcee:	e889 0024 	stmia.w	r9, {r2, r5}
  40bcf2:	f77f abad 	ble.w	40b450 <_svfprintf_r+0x51c>
  40bcf6:	e6c3      	b.n	40ba80 <_svfprintf_r+0xb4c>
  40bcf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40bcfa:	6814      	ldr	r4, [r2, #0]
  40bcfc:	4613      	mov	r3, r2
  40bcfe:	3304      	adds	r3, #4
  40bd00:	17e5      	asrs	r5, r4, #31
  40bd02:	4622      	mov	r2, r4
  40bd04:	930e      	str	r3, [sp, #56]	; 0x38
  40bd06:	2a00      	cmp	r2, #0
  40bd08:	462b      	mov	r3, r5
  40bd0a:	f173 0300 	sbcs.w	r3, r3, #0
  40bd0e:	f6bf aaa5 	bge.w	40b25c <_svfprintf_r+0x328>
  40bd12:	4264      	negs	r4, r4
  40bd14:	f04f 072d 	mov.w	r7, #45	; 0x2d
  40bd18:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40bd1c:	f1bb 0f00 	cmp.w	fp, #0
  40bd20:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40bd24:	f6ff aaa8 	blt.w	40b278 <_svfprintf_r+0x344>
  40bd28:	9b07      	ldr	r3, [sp, #28]
  40bd2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40bd2e:	9307      	str	r3, [sp, #28]
  40bd30:	f7ff baa2 	b.w	40b278 <_svfprintf_r+0x344>
  40bd34:	aa23      	add	r2, sp, #140	; 0x8c
  40bd36:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bd38:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bd3a:	f004 fc39 	bl	4105b0 <__ssprint_r>
  40bd3e:	2800      	cmp	r0, #0
  40bd40:	f47f a9f1 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bd44:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bd46:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bd4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40bd4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40bd4e:	4432      	add	r2, r6
  40bd50:	4617      	mov	r7, r2
  40bd52:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40bd54:	4293      	cmp	r3, r2
  40bd56:	db47      	blt.n	40bde8 <_svfprintf_r+0xeb4>
  40bd58:	9a07      	ldr	r2, [sp, #28]
  40bd5a:	07d5      	lsls	r5, r2, #31
  40bd5c:	d444      	bmi.n	40bde8 <_svfprintf_r+0xeb4>
  40bd5e:	9912      	ldr	r1, [sp, #72]	; 0x48
  40bd60:	440e      	add	r6, r1
  40bd62:	1bf5      	subs	r5, r6, r7
  40bd64:	1acb      	subs	r3, r1, r3
  40bd66:	429d      	cmp	r5, r3
  40bd68:	bfa8      	it	ge
  40bd6a:	461d      	movge	r5, r3
  40bd6c:	2d00      	cmp	r5, #0
  40bd6e:	462e      	mov	r6, r5
  40bd70:	dd0d      	ble.n	40bd8e <_svfprintf_r+0xe5a>
  40bd72:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40bd74:	f8c9 7000 	str.w	r7, [r9]
  40bd78:	3201      	adds	r2, #1
  40bd7a:	442c      	add	r4, r5
  40bd7c:	2a07      	cmp	r2, #7
  40bd7e:	9425      	str	r4, [sp, #148]	; 0x94
  40bd80:	f8c9 5004 	str.w	r5, [r9, #4]
  40bd84:	9224      	str	r2, [sp, #144]	; 0x90
  40bd86:	f300 830b 	bgt.w	40c3a0 <_svfprintf_r+0x146c>
  40bd8a:	f109 0908 	add.w	r9, r9, #8
  40bd8e:	2e00      	cmp	r6, #0
  40bd90:	bfac      	ite	ge
  40bd92:	1b9d      	subge	r5, r3, r6
  40bd94:	461d      	movlt	r5, r3
  40bd96:	2d00      	cmp	r5, #0
  40bd98:	f77f ab5c 	ble.w	40b454 <_svfprintf_r+0x520>
  40bd9c:	4a2a      	ldr	r2, [pc, #168]	; (40be48 <_svfprintf_r+0xf14>)
  40bd9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bda0:	920f      	str	r2, [sp, #60]	; 0x3c
  40bda2:	2d10      	cmp	r5, #16
  40bda4:	dd9d      	ble.n	40bce2 <_svfprintf_r+0xdae>
  40bda6:	2610      	movs	r6, #16
  40bda8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40bdaa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40bdae:	e004      	b.n	40bdba <_svfprintf_r+0xe86>
  40bdb0:	f109 0908 	add.w	r9, r9, #8
  40bdb4:	3d10      	subs	r5, #16
  40bdb6:	2d10      	cmp	r5, #16
  40bdb8:	dd93      	ble.n	40bce2 <_svfprintf_r+0xdae>
  40bdba:	3301      	adds	r3, #1
  40bdbc:	3410      	adds	r4, #16
  40bdbe:	2b07      	cmp	r3, #7
  40bdc0:	9425      	str	r4, [sp, #148]	; 0x94
  40bdc2:	9324      	str	r3, [sp, #144]	; 0x90
  40bdc4:	f8c9 a000 	str.w	sl, [r9]
  40bdc8:	f8c9 6004 	str.w	r6, [r9, #4]
  40bdcc:	ddf0      	ble.n	40bdb0 <_svfprintf_r+0xe7c>
  40bdce:	aa23      	add	r2, sp, #140	; 0x8c
  40bdd0:	4659      	mov	r1, fp
  40bdd2:	4638      	mov	r0, r7
  40bdd4:	f004 fbec 	bl	4105b0 <__ssprint_r>
  40bdd8:	2800      	cmp	r0, #0
  40bdda:	f47f a9a4 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40bdde:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bde0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bde2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40bde6:	e7e5      	b.n	40bdb4 <_svfprintf_r+0xe80>
  40bde8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40bdea:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bdec:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40bdee:	f8c9 1000 	str.w	r1, [r9]
  40bdf2:	3201      	adds	r2, #1
  40bdf4:	4404      	add	r4, r0
  40bdf6:	2a07      	cmp	r2, #7
  40bdf8:	9425      	str	r4, [sp, #148]	; 0x94
  40bdfa:	f8c9 0004 	str.w	r0, [r9, #4]
  40bdfe:	9224      	str	r2, [sp, #144]	; 0x90
  40be00:	f300 82a9 	bgt.w	40c356 <_svfprintf_r+0x1422>
  40be04:	f109 0908 	add.w	r9, r9, #8
  40be08:	e7a9      	b.n	40bd5e <_svfprintf_r+0xe2a>
  40be0a:	9b07      	ldr	r3, [sp, #28]
  40be0c:	07d8      	lsls	r0, r3, #31
  40be0e:	f53f adf4 	bmi.w	40b9fa <_svfprintf_r+0xac6>
  40be12:	3501      	adds	r5, #1
  40be14:	3401      	adds	r4, #1
  40be16:	2301      	movs	r3, #1
  40be18:	2d07      	cmp	r5, #7
  40be1a:	9425      	str	r4, [sp, #148]	; 0x94
  40be1c:	9524      	str	r5, [sp, #144]	; 0x90
  40be1e:	f8c9 6000 	str.w	r6, [r9]
  40be22:	f8c9 3004 	str.w	r3, [r9, #4]
  40be26:	f77f ae1c 	ble.w	40ba62 <_svfprintf_r+0xb2e>
  40be2a:	e70f      	b.n	40bc4c <_svfprintf_r+0xd18>
  40be2c:	aa23      	add	r2, sp, #140	; 0x8c
  40be2e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40be30:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be32:	f004 fbbd 	bl	4105b0 <__ssprint_r>
  40be36:	2800      	cmp	r0, #0
  40be38:	f47f a975 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40be3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40be3e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40be40:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40be44:	e5e7      	b.n	40ba16 <_svfprintf_r+0xae2>
  40be46:	bf00      	nop
  40be48:	00412d3c 	.word	0x00412d3c
  40be4c:	aa23      	add	r2, sp, #140	; 0x8c
  40be4e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40be50:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be52:	f004 fbad 	bl	4105b0 <__ssprint_r>
  40be56:	2800      	cmp	r0, #0
  40be58:	f47f a965 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40be5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40be5e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40be60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40be64:	e5e6      	b.n	40ba34 <_svfprintf_r+0xb00>
  40be66:	aa23      	add	r2, sp, #140	; 0x8c
  40be68:	9909      	ldr	r1, [sp, #36]	; 0x24
  40be6a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be6c:	f004 fba0 	bl	4105b0 <__ssprint_r>
  40be70:	2800      	cmp	r0, #0
  40be72:	f47f a958 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40be76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40be78:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40be7c:	f7ff ba98 	b.w	40b3b0 <_svfprintf_r+0x47c>
  40be80:	9907      	ldr	r1, [sp, #28]
  40be82:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40be86:	f43f af19 	beq.w	40bcbc <_svfprintf_r+0xd88>
  40be8a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40be8c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40be90:	f1bb 0f00 	cmp.w	fp, #0
  40be94:	8804      	ldrh	r4, [r0, #0]
  40be96:	f100 0704 	add.w	r7, r0, #4
  40be9a:	f04f 0500 	mov.w	r5, #0
  40be9e:	f2c0 81b9 	blt.w	40c214 <_svfprintf_r+0x12e0>
  40bea2:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40bea6:	9307      	str	r3, [sp, #28]
  40bea8:	ea54 0305 	orrs.w	r3, r4, r5
  40beac:	970e      	str	r7, [sp, #56]	; 0x38
  40beae:	4617      	mov	r7, r2
  40beb0:	f47f a9e2 	bne.w	40b278 <_svfprintf_r+0x344>
  40beb4:	f7ff bbbb 	b.w	40b62e <_svfprintf_r+0x6fa>
  40beb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40beba:	4622      	mov	r2, r4
  40bebc:	4620      	mov	r0, r4
  40bebe:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40bec0:	4623      	mov	r3, r4
  40bec2:	4621      	mov	r1, r4
  40bec4:	f7fc f9fc 	bl	4082c0 <__aeabi_dcmpun>
  40bec8:	2800      	cmp	r0, #0
  40beca:	f040 8317 	bne.w	40c4fc <_svfprintf_r+0x15c8>
  40bece:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bed0:	f1bb 3fff 	cmp.w	fp, #4294967295
  40bed4:	f023 0320 	bic.w	r3, r3, #32
  40bed8:	930d      	str	r3, [sp, #52]	; 0x34
  40beda:	f000 8270 	beq.w	40c3be <_svfprintf_r+0x148a>
  40bede:	2b47      	cmp	r3, #71	; 0x47
  40bee0:	f000 8192 	beq.w	40c208 <_svfprintf_r+0x12d4>
  40bee4:	9b07      	ldr	r3, [sp, #28]
  40bee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40beea:	9310      	str	r3, [sp, #64]	; 0x40
  40beec:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40beee:	1e1f      	subs	r7, r3, #0
  40bef0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40bef2:	9308      	str	r3, [sp, #32]
  40bef4:	bfbb      	ittet	lt
  40bef6:	463b      	movlt	r3, r7
  40bef8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40befc:	2300      	movge	r3, #0
  40befe:	232d      	movlt	r3, #45	; 0x2d
  40bf00:	930f      	str	r3, [sp, #60]	; 0x3c
  40bf02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bf04:	2b66      	cmp	r3, #102	; 0x66
  40bf06:	f000 825d 	beq.w	40c3c4 <_svfprintf_r+0x1490>
  40bf0a:	2b46      	cmp	r3, #70	; 0x46
  40bf0c:	f000 8151 	beq.w	40c1b2 <_svfprintf_r+0x127e>
  40bf10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bf12:	9a08      	ldr	r2, [sp, #32]
  40bf14:	2b45      	cmp	r3, #69	; 0x45
  40bf16:	a821      	add	r0, sp, #132	; 0x84
  40bf18:	a91e      	add	r1, sp, #120	; 0x78
  40bf1a:	bf0c      	ite	eq
  40bf1c:	f10b 0501 	addeq.w	r5, fp, #1
  40bf20:	465d      	movne	r5, fp
  40bf22:	9004      	str	r0, [sp, #16]
  40bf24:	9103      	str	r1, [sp, #12]
  40bf26:	a81d      	add	r0, sp, #116	; 0x74
  40bf28:	2102      	movs	r1, #2
  40bf2a:	463b      	mov	r3, r7
  40bf2c:	9002      	str	r0, [sp, #8]
  40bf2e:	9501      	str	r5, [sp, #4]
  40bf30:	9100      	str	r1, [sp, #0]
  40bf32:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bf34:	f001 fbc4 	bl	40d6c0 <_dtoa_r>
  40bf38:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bf3a:	2b67      	cmp	r3, #103	; 0x67
  40bf3c:	4606      	mov	r6, r0
  40bf3e:	f040 8290 	bne.w	40c462 <_svfprintf_r+0x152e>
  40bf42:	9b07      	ldr	r3, [sp, #28]
  40bf44:	07da      	lsls	r2, r3, #31
  40bf46:	f140 82af 	bpl.w	40c4a8 <_svfprintf_r+0x1574>
  40bf4a:	1974      	adds	r4, r6, r5
  40bf4c:	9808      	ldr	r0, [sp, #32]
  40bf4e:	4639      	mov	r1, r7
  40bf50:	2200      	movs	r2, #0
  40bf52:	2300      	movs	r3, #0
  40bf54:	f7fc f982 	bl	40825c <__aeabi_dcmpeq>
  40bf58:	2800      	cmp	r0, #0
  40bf5a:	f040 8190 	bne.w	40c27e <_svfprintf_r+0x134a>
  40bf5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40bf60:	429c      	cmp	r4, r3
  40bf62:	d906      	bls.n	40bf72 <_svfprintf_r+0x103e>
  40bf64:	2130      	movs	r1, #48	; 0x30
  40bf66:	1c5a      	adds	r2, r3, #1
  40bf68:	9221      	str	r2, [sp, #132]	; 0x84
  40bf6a:	7019      	strb	r1, [r3, #0]
  40bf6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40bf6e:	429c      	cmp	r4, r3
  40bf70:	d8f9      	bhi.n	40bf66 <_svfprintf_r+0x1032>
  40bf72:	1b9b      	subs	r3, r3, r6
  40bf74:	9312      	str	r3, [sp, #72]	; 0x48
  40bf76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bf78:	2b47      	cmp	r3, #71	; 0x47
  40bf7a:	f000 8179 	beq.w	40c270 <_svfprintf_r+0x133c>
  40bf7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bf80:	2b65      	cmp	r3, #101	; 0x65
  40bf82:	f340 827d 	ble.w	40c480 <_svfprintf_r+0x154c>
  40bf86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bf88:	2b66      	cmp	r3, #102	; 0x66
  40bf8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40bf8c:	9313      	str	r3, [sp, #76]	; 0x4c
  40bf8e:	f000 825b 	beq.w	40c448 <_svfprintf_r+0x1514>
  40bf92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40bf94:	9912      	ldr	r1, [sp, #72]	; 0x48
  40bf96:	428a      	cmp	r2, r1
  40bf98:	f2c0 8230 	blt.w	40c3fc <_svfprintf_r+0x14c8>
  40bf9c:	9b07      	ldr	r3, [sp, #28]
  40bf9e:	07d9      	lsls	r1, r3, #31
  40bfa0:	f100 8284 	bmi.w	40c4ac <_svfprintf_r+0x1578>
  40bfa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40bfa8:	920d      	str	r2, [sp, #52]	; 0x34
  40bfaa:	2267      	movs	r2, #103	; 0x67
  40bfac:	9211      	str	r2, [sp, #68]	; 0x44
  40bfae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bfb0:	2a00      	cmp	r2, #0
  40bfb2:	f040 8153 	bne.w	40c25c <_svfprintf_r+0x1328>
  40bfb6:	9308      	str	r3, [sp, #32]
  40bfb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40bfba:	9307      	str	r3, [sp, #28]
  40bfbc:	4693      	mov	fp, r2
  40bfbe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40bfc2:	f7ff b97d 	b.w	40b2c0 <_svfprintf_r+0x38c>
  40bfc6:	9907      	ldr	r1, [sp, #28]
  40bfc8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40bfcc:	d015      	beq.n	40bffa <_svfprintf_r+0x10c6>
  40bfce:	980e      	ldr	r0, [sp, #56]	; 0x38
  40bfd0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40bfd4:	f1bb 0f00 	cmp.w	fp, #0
  40bfd8:	8804      	ldrh	r4, [r0, #0]
  40bfda:	f100 0704 	add.w	r7, r0, #4
  40bfde:	f04f 0500 	mov.w	r5, #0
  40bfe2:	db16      	blt.n	40c012 <_svfprintf_r+0x10de>
  40bfe4:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40bfe8:	9307      	str	r3, [sp, #28]
  40bfea:	ea54 0305 	orrs.w	r3, r4, r5
  40bfee:	970e      	str	r7, [sp, #56]	; 0x38
  40bff0:	f43f ac3a 	beq.w	40b868 <_svfprintf_r+0x934>
  40bff4:	4617      	mov	r7, r2
  40bff6:	f7ff b8c2 	b.w	40b17e <_svfprintf_r+0x24a>
  40bffa:	990e      	ldr	r1, [sp, #56]	; 0x38
  40bffc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c000:	f1bb 0f00 	cmp.w	fp, #0
  40c004:	680c      	ldr	r4, [r1, #0]
  40c006:	f101 0704 	add.w	r7, r1, #4
  40c00a:	f04f 0500 	mov.w	r5, #0
  40c00e:	f280 80a5 	bge.w	40c15c <_svfprintf_r+0x1228>
  40c012:	970e      	str	r7, [sp, #56]	; 0x38
  40c014:	2700      	movs	r7, #0
  40c016:	f7ff b8b2 	b.w	40b17e <_svfprintf_r+0x24a>
  40c01a:	9b07      	ldr	r3, [sp, #28]
  40c01c:	06df      	lsls	r7, r3, #27
  40c01e:	d40b      	bmi.n	40c038 <_svfprintf_r+0x1104>
  40c020:	9b07      	ldr	r3, [sp, #28]
  40c022:	065e      	lsls	r6, r3, #25
  40c024:	d508      	bpl.n	40c038 <_svfprintf_r+0x1104>
  40c026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c028:	6813      	ldr	r3, [r2, #0]
  40c02a:	3204      	adds	r2, #4
  40c02c:	920e      	str	r2, [sp, #56]	; 0x38
  40c02e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40c032:	801a      	strh	r2, [r3, #0]
  40c034:	f7fe bfa4 	b.w	40af80 <_svfprintf_r+0x4c>
  40c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c03a:	6813      	ldr	r3, [r2, #0]
  40c03c:	3204      	adds	r2, #4
  40c03e:	920e      	str	r2, [sp, #56]	; 0x38
  40c040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c042:	601a      	str	r2, [r3, #0]
  40c044:	f7fe bf9c 	b.w	40af80 <_svfprintf_r+0x4c>
  40c048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c04a:	9b07      	ldr	r3, [sp, #28]
  40c04c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40c050:	4613      	mov	r3, r2
  40c052:	f103 0304 	add.w	r3, r3, #4
  40c056:	bf0c      	ite	eq
  40c058:	6814      	ldreq	r4, [r2, #0]
  40c05a:	8814      	ldrhne	r4, [r2, #0]
  40c05c:	930e      	str	r3, [sp, #56]	; 0x38
  40c05e:	2500      	movs	r5, #0
  40c060:	f7ff bb02 	b.w	40b668 <_svfprintf_r+0x734>
  40c064:	2700      	movs	r7, #0
  40c066:	45bb      	cmp	fp, r7
  40c068:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c06c:	f6ff ac0e 	blt.w	40b88c <_svfprintf_r+0x958>
  40c070:	9b07      	ldr	r3, [sp, #28]
  40c072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c076:	9307      	str	r3, [sp, #28]
  40c078:	f7ff bbd6 	b.w	40b828 <_svfprintf_r+0x8f4>
  40c07c:	4614      	mov	r4, r2
  40c07e:	3301      	adds	r3, #1
  40c080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c082:	9324      	str	r3, [sp, #144]	; 0x90
  40c084:	442c      	add	r4, r5
  40c086:	2b07      	cmp	r3, #7
  40c088:	9425      	str	r4, [sp, #148]	; 0x94
  40c08a:	e889 0024 	stmia.w	r9, {r2, r5}
  40c08e:	f73f ae51 	bgt.w	40bd34 <_svfprintf_r+0xe00>
  40c092:	f109 0908 	add.w	r9, r9, #8
  40c096:	e658      	b.n	40bd4a <_svfprintf_r+0xe16>
  40c098:	aa23      	add	r2, sp, #140	; 0x8c
  40c09a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c09c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c09e:	f004 fa87 	bl	4105b0 <__ssprint_r>
  40c0a2:	2800      	cmp	r0, #0
  40c0a4:	f47f a83f 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c0a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c0aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c0ae:	e40f      	b.n	40b8d0 <_svfprintf_r+0x99c>
  40c0b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40c0b2:	f7ff bbe4 	b.w	40b87e <_svfprintf_r+0x94a>
  40c0b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c0b8:	4ab5      	ldr	r2, [pc, #724]	; (40c390 <_svfprintf_r+0x145c>)
  40c0ba:	f8c9 2000 	str.w	r2, [r9]
  40c0be:	3301      	adds	r3, #1
  40c0c0:	3401      	adds	r4, #1
  40c0c2:	2201      	movs	r2, #1
  40c0c4:	2b07      	cmp	r3, #7
  40c0c6:	9425      	str	r4, [sp, #148]	; 0x94
  40c0c8:	9324      	str	r3, [sp, #144]	; 0x90
  40c0ca:	f8c9 2004 	str.w	r2, [r9, #4]
  40c0ce:	f300 808e 	bgt.w	40c1ee <_svfprintf_r+0x12ba>
  40c0d2:	f109 0908 	add.w	r9, r9, #8
  40c0d6:	b92d      	cbnz	r5, 40c0e4 <_svfprintf_r+0x11b0>
  40c0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c0da:	b91b      	cbnz	r3, 40c0e4 <_svfprintf_r+0x11b0>
  40c0dc:	9b07      	ldr	r3, [sp, #28]
  40c0de:	07df      	lsls	r7, r3, #31
  40c0e0:	f57f a9b8 	bpl.w	40b454 <_svfprintf_r+0x520>
  40c0e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c0e6:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c0e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c0ea:	f8c9 2000 	str.w	r2, [r9]
  40c0ee:	3301      	adds	r3, #1
  40c0f0:	440c      	add	r4, r1
  40c0f2:	2b07      	cmp	r3, #7
  40c0f4:	9425      	str	r4, [sp, #148]	; 0x94
  40c0f6:	f8c9 1004 	str.w	r1, [r9, #4]
  40c0fa:	9324      	str	r3, [sp, #144]	; 0x90
  40c0fc:	f300 81c2 	bgt.w	40c484 <_svfprintf_r+0x1550>
  40c100:	f109 0908 	add.w	r9, r9, #8
  40c104:	426d      	negs	r5, r5
  40c106:	2d00      	cmp	r5, #0
  40c108:	f340 809b 	ble.w	40c242 <_svfprintf_r+0x130e>
  40c10c:	4aa1      	ldr	r2, [pc, #644]	; (40c394 <_svfprintf_r+0x1460>)
  40c10e:	920f      	str	r2, [sp, #60]	; 0x3c
  40c110:	2d10      	cmp	r5, #16
  40c112:	f340 80c3 	ble.w	40c29c <_svfprintf_r+0x1368>
  40c116:	4622      	mov	r2, r4
  40c118:	2710      	movs	r7, #16
  40c11a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c11e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c120:	e005      	b.n	40c12e <_svfprintf_r+0x11fa>
  40c122:	f109 0908 	add.w	r9, r9, #8
  40c126:	3d10      	subs	r5, #16
  40c128:	2d10      	cmp	r5, #16
  40c12a:	f340 80b6 	ble.w	40c29a <_svfprintf_r+0x1366>
  40c12e:	3301      	adds	r3, #1
  40c130:	3210      	adds	r2, #16
  40c132:	2b07      	cmp	r3, #7
  40c134:	9225      	str	r2, [sp, #148]	; 0x94
  40c136:	9324      	str	r3, [sp, #144]	; 0x90
  40c138:	f8c9 a000 	str.w	sl, [r9]
  40c13c:	f8c9 7004 	str.w	r7, [r9, #4]
  40c140:	ddef      	ble.n	40c122 <_svfprintf_r+0x11ee>
  40c142:	aa23      	add	r2, sp, #140	; 0x8c
  40c144:	4621      	mov	r1, r4
  40c146:	4658      	mov	r0, fp
  40c148:	f004 fa32 	bl	4105b0 <__ssprint_r>
  40c14c:	2800      	cmp	r0, #0
  40c14e:	f47e afea 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c152:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c154:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c156:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c15a:	e7e4      	b.n	40c126 <_svfprintf_r+0x11f2>
  40c15c:	9a07      	ldr	r2, [sp, #28]
  40c15e:	f7ff ba38 	b.w	40b5d2 <_svfprintf_r+0x69e>
  40c162:	9a07      	ldr	r2, [sp, #28]
  40c164:	e590      	b.n	40bc88 <_svfprintf_r+0xd54>
  40c166:	9b07      	ldr	r3, [sp, #28]
  40c168:	f043 0320 	orr.w	r3, r3, #32
  40c16c:	9307      	str	r3, [sp, #28]
  40c16e:	f108 0801 	add.w	r8, r8, #1
  40c172:	f898 3000 	ldrb.w	r3, [r8]
  40c176:	f7fe bf36 	b.w	40afe6 <_svfprintf_r+0xb2>
  40c17a:	aa23      	add	r2, sp, #140	; 0x8c
  40c17c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c17e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c180:	f004 fa16 	bl	4105b0 <__ssprint_r>
  40c184:	2800      	cmp	r0, #0
  40c186:	f47e afce 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c18a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c18c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c190:	f7ff bbb6 	b.w	40b900 <_svfprintf_r+0x9cc>
  40c194:	2140      	movs	r1, #64	; 0x40
  40c196:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c198:	f7fc fc84 	bl	408aa4 <_malloc_r>
  40c19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c19e:	6010      	str	r0, [r2, #0]
  40c1a0:	6110      	str	r0, [r2, #16]
  40c1a2:	2800      	cmp	r0, #0
  40c1a4:	f000 81e5 	beq.w	40c572 <_svfprintf_r+0x163e>
  40c1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c1aa:	2340      	movs	r3, #64	; 0x40
  40c1ac:	6153      	str	r3, [r2, #20]
  40c1ae:	f7fe bed8 	b.w	40af62 <_svfprintf_r+0x2e>
  40c1b2:	a821      	add	r0, sp, #132	; 0x84
  40c1b4:	a91e      	add	r1, sp, #120	; 0x78
  40c1b6:	9004      	str	r0, [sp, #16]
  40c1b8:	9103      	str	r1, [sp, #12]
  40c1ba:	a81d      	add	r0, sp, #116	; 0x74
  40c1bc:	2103      	movs	r1, #3
  40c1be:	9002      	str	r0, [sp, #8]
  40c1c0:	9a08      	ldr	r2, [sp, #32]
  40c1c2:	f8cd b004 	str.w	fp, [sp, #4]
  40c1c6:	463b      	mov	r3, r7
  40c1c8:	9100      	str	r1, [sp, #0]
  40c1ca:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c1cc:	f001 fa78 	bl	40d6c0 <_dtoa_r>
  40c1d0:	465d      	mov	r5, fp
  40c1d2:	4606      	mov	r6, r0
  40c1d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c1d6:	2b46      	cmp	r3, #70	; 0x46
  40c1d8:	eb06 0405 	add.w	r4, r6, r5
  40c1dc:	f47f aeb6 	bne.w	40bf4c <_svfprintf_r+0x1018>
  40c1e0:	7833      	ldrb	r3, [r6, #0]
  40c1e2:	2b30      	cmp	r3, #48	; 0x30
  40c1e4:	f000 817c 	beq.w	40c4e0 <_svfprintf_r+0x15ac>
  40c1e8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40c1ea:	442c      	add	r4, r5
  40c1ec:	e6ae      	b.n	40bf4c <_svfprintf_r+0x1018>
  40c1ee:	aa23      	add	r2, sp, #140	; 0x8c
  40c1f0:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c1f2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c1f4:	f004 f9dc 	bl	4105b0 <__ssprint_r>
  40c1f8:	2800      	cmp	r0, #0
  40c1fa:	f47e af94 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c1fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40c200:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c202:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c206:	e766      	b.n	40c0d6 <_svfprintf_r+0x11a2>
  40c208:	f1bb 0f00 	cmp.w	fp, #0
  40c20c:	bf08      	it	eq
  40c20e:	f04f 0b01 	moveq.w	fp, #1
  40c212:	e667      	b.n	40bee4 <_svfprintf_r+0xfb0>
  40c214:	970e      	str	r7, [sp, #56]	; 0x38
  40c216:	4617      	mov	r7, r2
  40c218:	e55e      	b.n	40bcd8 <_svfprintf_r+0xda4>
  40c21a:	4630      	mov	r0, r6
  40c21c:	f7fd fab0 	bl	409780 <strlen>
  40c220:	46a3      	mov	fp, r4
  40c222:	4603      	mov	r3, r0
  40c224:	900d      	str	r0, [sp, #52]	; 0x34
  40c226:	f7ff baf4 	b.w	40b812 <_svfprintf_r+0x8de>
  40c22a:	aa23      	add	r2, sp, #140	; 0x8c
  40c22c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c22e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c230:	f004 f9be 	bl	4105b0 <__ssprint_r>
  40c234:	2800      	cmp	r0, #0
  40c236:	f47e af76 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c23a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c23c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c23e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c242:	9912      	ldr	r1, [sp, #72]	; 0x48
  40c244:	f8c9 6000 	str.w	r6, [r9]
  40c248:	3301      	adds	r3, #1
  40c24a:	440c      	add	r4, r1
  40c24c:	2b07      	cmp	r3, #7
  40c24e:	9425      	str	r4, [sp, #148]	; 0x94
  40c250:	9324      	str	r3, [sp, #144]	; 0x90
  40c252:	f8c9 1004 	str.w	r1, [r9, #4]
  40c256:	f77f a8fb 	ble.w	40b450 <_svfprintf_r+0x51c>
  40c25a:	e411      	b.n	40ba80 <_svfprintf_r+0xb4c>
  40c25c:	272d      	movs	r7, #45	; 0x2d
  40c25e:	9308      	str	r3, [sp, #32]
  40c260:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c262:	9307      	str	r3, [sp, #28]
  40c264:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c268:	f04f 0b00 	mov.w	fp, #0
  40c26c:	f7ff b829 	b.w	40b2c2 <_svfprintf_r+0x38e>
  40c270:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c272:	1cdd      	adds	r5, r3, #3
  40c274:	db1e      	blt.n	40c2b4 <_svfprintf_r+0x1380>
  40c276:	459b      	cmp	fp, r3
  40c278:	db1c      	blt.n	40c2b4 <_svfprintf_r+0x1380>
  40c27a:	9313      	str	r3, [sp, #76]	; 0x4c
  40c27c:	e689      	b.n	40bf92 <_svfprintf_r+0x105e>
  40c27e:	4623      	mov	r3, r4
  40c280:	e677      	b.n	40bf72 <_svfprintf_r+0x103e>
  40c282:	aa23      	add	r2, sp, #140	; 0x8c
  40c284:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c286:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c288:	f004 f992 	bl	4105b0 <__ssprint_r>
  40c28c:	2800      	cmp	r0, #0
  40c28e:	f47e af4a 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c292:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c294:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c298:	e459      	b.n	40bb4e <_svfprintf_r+0xc1a>
  40c29a:	4614      	mov	r4, r2
  40c29c:	3301      	adds	r3, #1
  40c29e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c2a0:	9324      	str	r3, [sp, #144]	; 0x90
  40c2a2:	442c      	add	r4, r5
  40c2a4:	2b07      	cmp	r3, #7
  40c2a6:	9425      	str	r4, [sp, #148]	; 0x94
  40c2a8:	e889 0024 	stmia.w	r9, {r2, r5}
  40c2ac:	dcbd      	bgt.n	40c22a <_svfprintf_r+0x12f6>
  40c2ae:	f109 0908 	add.w	r9, r9, #8
  40c2b2:	e7c6      	b.n	40c242 <_svfprintf_r+0x130e>
  40c2b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c2b6:	3a02      	subs	r2, #2
  40c2b8:	9211      	str	r2, [sp, #68]	; 0x44
  40c2ba:	3b01      	subs	r3, #1
  40c2bc:	2b00      	cmp	r3, #0
  40c2be:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40c2c2:	931d      	str	r3, [sp, #116]	; 0x74
  40c2c4:	bfb8      	it	lt
  40c2c6:	425b      	neglt	r3, r3
  40c2c8:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40c2cc:	bfb4      	ite	lt
  40c2ce:	222d      	movlt	r2, #45	; 0x2d
  40c2d0:	222b      	movge	r2, #43	; 0x2b
  40c2d2:	2b09      	cmp	r3, #9
  40c2d4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40c2d8:	f340 80f1 	ble.w	40c4be <_svfprintf_r+0x158a>
  40c2dc:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  40c2e0:	4604      	mov	r4, r0
  40c2e2:	4a2d      	ldr	r2, [pc, #180]	; (40c398 <_svfprintf_r+0x1464>)
  40c2e4:	fb82 2103 	smull	r2, r1, r2, r3
  40c2e8:	17da      	asrs	r2, r3, #31
  40c2ea:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40c2ee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40c2f2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40c2f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40c2fa:	2a09      	cmp	r2, #9
  40c2fc:	4613      	mov	r3, r2
  40c2fe:	f804 1d01 	strb.w	r1, [r4, #-1]!
  40c302:	dcee      	bgt.n	40c2e2 <_svfprintf_r+0x13ae>
  40c304:	4621      	mov	r1, r4
  40c306:	3330      	adds	r3, #48	; 0x30
  40c308:	b2da      	uxtb	r2, r3
  40c30a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40c30e:	4288      	cmp	r0, r1
  40c310:	f240 813a 	bls.w	40c588 <_svfprintf_r+0x1654>
  40c314:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  40c318:	4623      	mov	r3, r4
  40c31a:	e001      	b.n	40c320 <_svfprintf_r+0x13ec>
  40c31c:	f813 2b01 	ldrb.w	r2, [r3], #1
  40c320:	f801 2b01 	strb.w	r2, [r1], #1
  40c324:	4298      	cmp	r0, r3
  40c326:	d1f9      	bne.n	40c31c <_svfprintf_r+0x13e8>
  40c328:	1c43      	adds	r3, r0, #1
  40c32a:	1b1b      	subs	r3, r3, r4
  40c32c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40c330:	4413      	add	r3, r2
  40c332:	aa1f      	add	r2, sp, #124	; 0x7c
  40c334:	1a9b      	subs	r3, r3, r2
  40c336:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c338:	9319      	str	r3, [sp, #100]	; 0x64
  40c33a:	2a01      	cmp	r2, #1
  40c33c:	4413      	add	r3, r2
  40c33e:	930d      	str	r3, [sp, #52]	; 0x34
  40c340:	f340 80ea 	ble.w	40c518 <_svfprintf_r+0x15e4>
  40c344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c346:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c348:	4413      	add	r3, r2
  40c34a:	2200      	movs	r2, #0
  40c34c:	930d      	str	r3, [sp, #52]	; 0x34
  40c34e:	9213      	str	r2, [sp, #76]	; 0x4c
  40c350:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c354:	e62b      	b.n	40bfae <_svfprintf_r+0x107a>
  40c356:	aa23      	add	r2, sp, #140	; 0x8c
  40c358:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c35a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c35c:	f004 f928 	bl	4105b0 <__ssprint_r>
  40c360:	2800      	cmp	r0, #0
  40c362:	f47e aee0 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c366:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c368:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c36a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c36e:	e4f6      	b.n	40bd5e <_svfprintf_r+0xe2a>
  40c370:	2d06      	cmp	r5, #6
  40c372:	462b      	mov	r3, r5
  40c374:	bf28      	it	cs
  40c376:	2306      	movcs	r3, #6
  40c378:	930d      	str	r3, [sp, #52]	; 0x34
  40c37a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c37e:	46b3      	mov	fp, r6
  40c380:	970e      	str	r7, [sp, #56]	; 0x38
  40c382:	9613      	str	r6, [sp, #76]	; 0x4c
  40c384:	4637      	mov	r7, r6
  40c386:	9308      	str	r3, [sp, #32]
  40c388:	4e04      	ldr	r6, [pc, #16]	; (40c39c <_svfprintf_r+0x1468>)
  40c38a:	f7fe bf99 	b.w	40b2c0 <_svfprintf_r+0x38c>
  40c38e:	bf00      	nop
  40c390:	00412d8c 	.word	0x00412d8c
  40c394:	00412d3c 	.word	0x00412d3c
  40c398:	66666667 	.word	0x66666667
  40c39c:	00412d84 	.word	0x00412d84
  40c3a0:	aa23      	add	r2, sp, #140	; 0x8c
  40c3a2:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c3a4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c3a6:	f004 f903 	bl	4105b0 <__ssprint_r>
  40c3aa:	2800      	cmp	r0, #0
  40c3ac:	f47e aebb 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c3b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c3b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c3b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c3b6:	1ad3      	subs	r3, r2, r3
  40c3b8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c3bc:	e4e7      	b.n	40bd8e <_svfprintf_r+0xe5a>
  40c3be:	f04f 0b06 	mov.w	fp, #6
  40c3c2:	e58f      	b.n	40bee4 <_svfprintf_r+0xfb0>
  40c3c4:	a821      	add	r0, sp, #132	; 0x84
  40c3c6:	a91e      	add	r1, sp, #120	; 0x78
  40c3c8:	9004      	str	r0, [sp, #16]
  40c3ca:	9103      	str	r1, [sp, #12]
  40c3cc:	a81d      	add	r0, sp, #116	; 0x74
  40c3ce:	2103      	movs	r1, #3
  40c3d0:	9002      	str	r0, [sp, #8]
  40c3d2:	9a08      	ldr	r2, [sp, #32]
  40c3d4:	f8cd b004 	str.w	fp, [sp, #4]
  40c3d8:	463b      	mov	r3, r7
  40c3da:	9100      	str	r1, [sp, #0]
  40c3dc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c3de:	f001 f96f 	bl	40d6c0 <_dtoa_r>
  40c3e2:	465d      	mov	r5, fp
  40c3e4:	4606      	mov	r6, r0
  40c3e6:	eb00 040b 	add.w	r4, r0, fp
  40c3ea:	e6f9      	b.n	40c1e0 <_svfprintf_r+0x12ac>
  40c3ec:	9307      	str	r3, [sp, #28]
  40c3ee:	f7ff b959 	b.w	40b6a4 <_svfprintf_r+0x770>
  40c3f2:	272d      	movs	r7, #45	; 0x2d
  40c3f4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c3f8:	f7ff b8b2 	b.w	40b560 <_svfprintf_r+0x62c>
  40c3fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c3fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c400:	4413      	add	r3, r2
  40c402:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c404:	930d      	str	r3, [sp, #52]	; 0x34
  40c406:	2a00      	cmp	r2, #0
  40c408:	dd7e      	ble.n	40c508 <_svfprintf_r+0x15d4>
  40c40a:	2267      	movs	r2, #103	; 0x67
  40c40c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c410:	9211      	str	r2, [sp, #68]	; 0x44
  40c412:	e5cc      	b.n	40bfae <_svfprintf_r+0x107a>
  40c414:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40c418:	970e      	str	r7, [sp, #56]	; 0x38
  40c41a:	9308      	str	r3, [sp, #32]
  40c41c:	950d      	str	r5, [sp, #52]	; 0x34
  40c41e:	4683      	mov	fp, r0
  40c420:	9013      	str	r0, [sp, #76]	; 0x4c
  40c422:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c426:	f7fe bf4b 	b.w	40b2c0 <_svfprintf_r+0x38c>
  40c42a:	9b07      	ldr	r3, [sp, #28]
  40c42c:	07db      	lsls	r3, r3, #31
  40c42e:	465f      	mov	r7, fp
  40c430:	d505      	bpl.n	40c43e <_svfprintf_r+0x150a>
  40c432:	ae40      	add	r6, sp, #256	; 0x100
  40c434:	2330      	movs	r3, #48	; 0x30
  40c436:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40c43a:	f7fe bf37 	b.w	40b2ac <_svfprintf_r+0x378>
  40c43e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40c442:	ae30      	add	r6, sp, #192	; 0xc0
  40c444:	f7fe bf35 	b.w	40b2b2 <_svfprintf_r+0x37e>
  40c448:	2b00      	cmp	r3, #0
  40c44a:	dd7d      	ble.n	40c548 <_svfprintf_r+0x1614>
  40c44c:	f1bb 0f00 	cmp.w	fp, #0
  40c450:	d13d      	bne.n	40c4ce <_svfprintf_r+0x159a>
  40c452:	9a07      	ldr	r2, [sp, #28]
  40c454:	07d4      	lsls	r4, r2, #31
  40c456:	d43a      	bmi.n	40c4ce <_svfprintf_r+0x159a>
  40c458:	461a      	mov	r2, r3
  40c45a:	920d      	str	r2, [sp, #52]	; 0x34
  40c45c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c460:	e5a5      	b.n	40bfae <_svfprintf_r+0x107a>
  40c462:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c464:	2b47      	cmp	r3, #71	; 0x47
  40c466:	f47f ad70 	bne.w	40bf4a <_svfprintf_r+0x1016>
  40c46a:	9b07      	ldr	r3, [sp, #28]
  40c46c:	07db      	lsls	r3, r3, #31
  40c46e:	f53f aeb1 	bmi.w	40c1d4 <_svfprintf_r+0x12a0>
  40c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40c474:	1b9b      	subs	r3, r3, r6
  40c476:	9312      	str	r3, [sp, #72]	; 0x48
  40c478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c47a:	2b47      	cmp	r3, #71	; 0x47
  40c47c:	f43f aef8 	beq.w	40c270 <_svfprintf_r+0x133c>
  40c480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c482:	e71a      	b.n	40c2ba <_svfprintf_r+0x1386>
  40c484:	aa23      	add	r2, sp, #140	; 0x8c
  40c486:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c488:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c48a:	f004 f891 	bl	4105b0 <__ssprint_r>
  40c48e:	2800      	cmp	r0, #0
  40c490:	f47e ae49 	bne.w	40b126 <_svfprintf_r+0x1f2>
  40c494:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40c496:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c498:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c49a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c49e:	e631      	b.n	40c104 <_svfprintf_r+0x11d0>
  40c4a0:	46a0      	mov	r8, r4
  40c4a2:	2500      	movs	r5, #0
  40c4a4:	f7fe bda1 	b.w	40afea <_svfprintf_r+0xb6>
  40c4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40c4aa:	e562      	b.n	40bf72 <_svfprintf_r+0x103e>
  40c4ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c4ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c4b0:	4413      	add	r3, r2
  40c4b2:	2267      	movs	r2, #103	; 0x67
  40c4b4:	930d      	str	r3, [sp, #52]	; 0x34
  40c4b6:	9211      	str	r2, [sp, #68]	; 0x44
  40c4b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c4bc:	e577      	b.n	40bfae <_svfprintf_r+0x107a>
  40c4be:	3330      	adds	r3, #48	; 0x30
  40c4c0:	2230      	movs	r2, #48	; 0x30
  40c4c2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40c4c6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40c4ca:	ab20      	add	r3, sp, #128	; 0x80
  40c4cc:	e731      	b.n	40c332 <_svfprintf_r+0x13fe>
  40c4ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c4d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c4d2:	189d      	adds	r5, r3, r2
  40c4d4:	eb05 030b 	add.w	r3, r5, fp
  40c4d8:	930d      	str	r3, [sp, #52]	; 0x34
  40c4da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c4de:	e566      	b.n	40bfae <_svfprintf_r+0x107a>
  40c4e0:	9808      	ldr	r0, [sp, #32]
  40c4e2:	4639      	mov	r1, r7
  40c4e4:	2200      	movs	r2, #0
  40c4e6:	2300      	movs	r3, #0
  40c4e8:	f7fb feb8 	bl	40825c <__aeabi_dcmpeq>
  40c4ec:	2800      	cmp	r0, #0
  40c4ee:	f47f ae7b 	bne.w	40c1e8 <_svfprintf_r+0x12b4>
  40c4f2:	f1c5 0501 	rsb	r5, r5, #1
  40c4f6:	951d      	str	r5, [sp, #116]	; 0x74
  40c4f8:	442c      	add	r4, r5
  40c4fa:	e527      	b.n	40bf4c <_svfprintf_r+0x1018>
  40c4fc:	4e32      	ldr	r6, [pc, #200]	; (40c5c8 <_svfprintf_r+0x1694>)
  40c4fe:	4b33      	ldr	r3, [pc, #204]	; (40c5cc <_svfprintf_r+0x1698>)
  40c500:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c504:	f7ff b82e 	b.w	40b564 <_svfprintf_r+0x630>
  40c508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c50c:	f1c3 0301 	rsb	r3, r3, #1
  40c510:	441a      	add	r2, r3
  40c512:	4613      	mov	r3, r2
  40c514:	920d      	str	r2, [sp, #52]	; 0x34
  40c516:	e778      	b.n	40c40a <_svfprintf_r+0x14d6>
  40c518:	9b07      	ldr	r3, [sp, #28]
  40c51a:	f013 0301 	ands.w	r3, r3, #1
  40c51e:	f47f af11 	bne.w	40c344 <_svfprintf_r+0x1410>
  40c522:	9313      	str	r3, [sp, #76]	; 0x4c
  40c524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c52a:	e540      	b.n	40bfae <_svfprintf_r+0x107a>
  40c52c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c52e:	f898 3001 	ldrb.w	r3, [r8, #1]
  40c532:	6805      	ldr	r5, [r0, #0]
  40c534:	3004      	adds	r0, #4
  40c536:	2d00      	cmp	r5, #0
  40c538:	900e      	str	r0, [sp, #56]	; 0x38
  40c53a:	46a0      	mov	r8, r4
  40c53c:	f6be ad53 	bge.w	40afe6 <_svfprintf_r+0xb2>
  40c540:	f04f 35ff 	mov.w	r5, #4294967295
  40c544:	f7fe bd4f 	b.w	40afe6 <_svfprintf_r+0xb2>
  40c548:	f1bb 0f00 	cmp.w	fp, #0
  40c54c:	d102      	bne.n	40c554 <_svfprintf_r+0x1620>
  40c54e:	9b07      	ldr	r3, [sp, #28]
  40c550:	07d8      	lsls	r0, r3, #31
  40c552:	d507      	bpl.n	40c564 <_svfprintf_r+0x1630>
  40c554:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40c556:	1c5d      	adds	r5, r3, #1
  40c558:	eb05 030b 	add.w	r3, r5, fp
  40c55c:	930d      	str	r3, [sp, #52]	; 0x34
  40c55e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c562:	e524      	b.n	40bfae <_svfprintf_r+0x107a>
  40c564:	2301      	movs	r3, #1
  40c566:	930d      	str	r3, [sp, #52]	; 0x34
  40c568:	e521      	b.n	40bfae <_svfprintf_r+0x107a>
  40c56a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c56e:	f7ff b921 	b.w	40b7b4 <_svfprintf_r+0x880>
  40c572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c574:	230c      	movs	r3, #12
  40c576:	6013      	str	r3, [r2, #0]
  40c578:	f04f 30ff 	mov.w	r0, #4294967295
  40c57c:	f7fe bddc 	b.w	40b138 <_svfprintf_r+0x204>
  40c580:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c584:	f7ff b8f9 	b.w	40b77a <_svfprintf_r+0x846>
  40c588:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40c58c:	e6d1      	b.n	40c332 <_svfprintf_r+0x13fe>
  40c58e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c592:	f7fe bdd9 	b.w	40b148 <_svfprintf_r+0x214>
  40c596:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c59a:	f7ff b857 	b.w	40b64c <_svfprintf_r+0x718>
  40c59e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c5a2:	f7ff b825 	b.w	40b5f0 <_svfprintf_r+0x6bc>
  40c5a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c5aa:	f7ff b94c 	b.w	40b846 <_svfprintf_r+0x912>
  40c5ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c5b2:	f7fe bff3 	b.w	40b59c <_svfprintf_r+0x668>
  40c5b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c5ba:	f7fe bfa3 	b.w	40b504 <_svfprintf_r+0x5d0>
  40c5be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c5c2:	f7fe be33 	b.w	40b22c <_svfprintf_r+0x2f8>
  40c5c6:	bf00      	nop
  40c5c8:	00412d58 	.word	0x00412d58
  40c5cc:	00412d54 	.word	0x00412d54

0040c5d0 <__sprint_r.part.0>:
  40c5d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40c5d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c5d6:	049c      	lsls	r4, r3, #18
  40c5d8:	4692      	mov	sl, r2
  40c5da:	d52c      	bpl.n	40c636 <__sprint_r.part.0+0x66>
  40c5dc:	6893      	ldr	r3, [r2, #8]
  40c5de:	6812      	ldr	r2, [r2, #0]
  40c5e0:	b33b      	cbz	r3, 40c632 <__sprint_r.part.0+0x62>
  40c5e2:	460f      	mov	r7, r1
  40c5e4:	4680      	mov	r8, r0
  40c5e6:	f102 0908 	add.w	r9, r2, #8
  40c5ea:	e919 0060 	ldmdb	r9, {r5, r6}
  40c5ee:	08b6      	lsrs	r6, r6, #2
  40c5f0:	d017      	beq.n	40c622 <__sprint_r.part.0+0x52>
  40c5f2:	3d04      	subs	r5, #4
  40c5f4:	2400      	movs	r4, #0
  40c5f6:	e001      	b.n	40c5fc <__sprint_r.part.0+0x2c>
  40c5f8:	42a6      	cmp	r6, r4
  40c5fa:	d010      	beq.n	40c61e <__sprint_r.part.0+0x4e>
  40c5fc:	463a      	mov	r2, r7
  40c5fe:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40c602:	4640      	mov	r0, r8
  40c604:	f002 f92a 	bl	40e85c <_fputwc_r>
  40c608:	1c43      	adds	r3, r0, #1
  40c60a:	f104 0401 	add.w	r4, r4, #1
  40c60e:	d1f3      	bne.n	40c5f8 <__sprint_r.part.0+0x28>
  40c610:	2300      	movs	r3, #0
  40c612:	f8ca 3008 	str.w	r3, [sl, #8]
  40c616:	f8ca 3004 	str.w	r3, [sl, #4]
  40c61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c61e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c622:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40c626:	f8ca 3008 	str.w	r3, [sl, #8]
  40c62a:	f109 0908 	add.w	r9, r9, #8
  40c62e:	2b00      	cmp	r3, #0
  40c630:	d1db      	bne.n	40c5ea <__sprint_r.part.0+0x1a>
  40c632:	2000      	movs	r0, #0
  40c634:	e7ec      	b.n	40c610 <__sprint_r.part.0+0x40>
  40c636:	f002 fa59 	bl	40eaec <__sfvwrite_r>
  40c63a:	2300      	movs	r3, #0
  40c63c:	f8ca 3008 	str.w	r3, [sl, #8]
  40c640:	f8ca 3004 	str.w	r3, [sl, #4]
  40c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040c648 <_vfiprintf_r>:
  40c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c64c:	b0ab      	sub	sp, #172	; 0xac
  40c64e:	461c      	mov	r4, r3
  40c650:	9100      	str	r1, [sp, #0]
  40c652:	4690      	mov	r8, r2
  40c654:	9304      	str	r3, [sp, #16]
  40c656:	9005      	str	r0, [sp, #20]
  40c658:	b118      	cbz	r0, 40c662 <_vfiprintf_r+0x1a>
  40c65a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c65c:	2b00      	cmp	r3, #0
  40c65e:	f000 80de 	beq.w	40c81e <_vfiprintf_r+0x1d6>
  40c662:	9800      	ldr	r0, [sp, #0]
  40c664:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  40c668:	b28a      	uxth	r2, r1
  40c66a:	0495      	lsls	r5, r2, #18
  40c66c:	d407      	bmi.n	40c67e <_vfiprintf_r+0x36>
  40c66e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40c670:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40c674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40c678:	8182      	strh	r2, [r0, #12]
  40c67a:	6643      	str	r3, [r0, #100]	; 0x64
  40c67c:	b292      	uxth	r2, r2
  40c67e:	0711      	lsls	r1, r2, #28
  40c680:	f140 80b1 	bpl.w	40c7e6 <_vfiprintf_r+0x19e>
  40c684:	9b00      	ldr	r3, [sp, #0]
  40c686:	691b      	ldr	r3, [r3, #16]
  40c688:	2b00      	cmp	r3, #0
  40c68a:	f000 80ac 	beq.w	40c7e6 <_vfiprintf_r+0x19e>
  40c68e:	f002 021a 	and.w	r2, r2, #26
  40c692:	2a0a      	cmp	r2, #10
  40c694:	f000 80b5 	beq.w	40c802 <_vfiprintf_r+0x1ba>
  40c698:	2300      	movs	r3, #0
  40c69a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40c69e:	9302      	str	r3, [sp, #8]
  40c6a0:	930f      	str	r3, [sp, #60]	; 0x3c
  40c6a2:	930e      	str	r3, [sp, #56]	; 0x38
  40c6a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40c6a8:	46da      	mov	sl, fp
  40c6aa:	f898 3000 	ldrb.w	r3, [r8]
  40c6ae:	4644      	mov	r4, r8
  40c6b0:	b1fb      	cbz	r3, 40c6f2 <_vfiprintf_r+0xaa>
  40c6b2:	2b25      	cmp	r3, #37	; 0x25
  40c6b4:	d102      	bne.n	40c6bc <_vfiprintf_r+0x74>
  40c6b6:	e01c      	b.n	40c6f2 <_vfiprintf_r+0xaa>
  40c6b8:	2b25      	cmp	r3, #37	; 0x25
  40c6ba:	d003      	beq.n	40c6c4 <_vfiprintf_r+0x7c>
  40c6bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40c6c0:	2b00      	cmp	r3, #0
  40c6c2:	d1f9      	bne.n	40c6b8 <_vfiprintf_r+0x70>
  40c6c4:	ebc8 0504 	rsb	r5, r8, r4
  40c6c8:	b19d      	cbz	r5, 40c6f2 <_vfiprintf_r+0xaa>
  40c6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c6cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c6ce:	f8ca 8000 	str.w	r8, [sl]
  40c6d2:	3301      	adds	r3, #1
  40c6d4:	442a      	add	r2, r5
  40c6d6:	2b07      	cmp	r3, #7
  40c6d8:	f8ca 5004 	str.w	r5, [sl, #4]
  40c6dc:	920f      	str	r2, [sp, #60]	; 0x3c
  40c6de:	930e      	str	r3, [sp, #56]	; 0x38
  40c6e0:	dd7b      	ble.n	40c7da <_vfiprintf_r+0x192>
  40c6e2:	2a00      	cmp	r2, #0
  40c6e4:	f040 8528 	bne.w	40d138 <_vfiprintf_r+0xaf0>
  40c6e8:	9b02      	ldr	r3, [sp, #8]
  40c6ea:	920e      	str	r2, [sp, #56]	; 0x38
  40c6ec:	442b      	add	r3, r5
  40c6ee:	46da      	mov	sl, fp
  40c6f0:	9302      	str	r3, [sp, #8]
  40c6f2:	7823      	ldrb	r3, [r4, #0]
  40c6f4:	2b00      	cmp	r3, #0
  40c6f6:	f000 843e 	beq.w	40cf76 <_vfiprintf_r+0x92e>
  40c6fa:	2100      	movs	r1, #0
  40c6fc:	f04f 0300 	mov.w	r3, #0
  40c700:	f04f 32ff 	mov.w	r2, #4294967295
  40c704:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40c708:	f104 0801 	add.w	r8, r4, #1
  40c70c:	7863      	ldrb	r3, [r4, #1]
  40c70e:	9201      	str	r2, [sp, #4]
  40c710:	4608      	mov	r0, r1
  40c712:	460e      	mov	r6, r1
  40c714:	460c      	mov	r4, r1
  40c716:	f108 0801 	add.w	r8, r8, #1
  40c71a:	f1a3 0220 	sub.w	r2, r3, #32
  40c71e:	2a58      	cmp	r2, #88	; 0x58
  40c720:	f200 8393 	bhi.w	40ce4a <_vfiprintf_r+0x802>
  40c724:	e8df f012 	tbh	[pc, r2, lsl #1]
  40c728:	03910346 	.word	0x03910346
  40c72c:	034e0391 	.word	0x034e0391
  40c730:	03910391 	.word	0x03910391
  40c734:	03910391 	.word	0x03910391
  40c738:	03910391 	.word	0x03910391
  40c73c:	02670289 	.word	0x02670289
  40c740:	00800391 	.word	0x00800391
  40c744:	0391026c 	.word	0x0391026c
  40c748:	025901c6 	.word	0x025901c6
  40c74c:	02590259 	.word	0x02590259
  40c750:	02590259 	.word	0x02590259
  40c754:	02590259 	.word	0x02590259
  40c758:	02590259 	.word	0x02590259
  40c75c:	03910391 	.word	0x03910391
  40c760:	03910391 	.word	0x03910391
  40c764:	03910391 	.word	0x03910391
  40c768:	03910391 	.word	0x03910391
  40c76c:	03910391 	.word	0x03910391
  40c770:	039101cb 	.word	0x039101cb
  40c774:	03910391 	.word	0x03910391
  40c778:	03910391 	.word	0x03910391
  40c77c:	03910391 	.word	0x03910391
  40c780:	03910391 	.word	0x03910391
  40c784:	02140391 	.word	0x02140391
  40c788:	03910391 	.word	0x03910391
  40c78c:	03910391 	.word	0x03910391
  40c790:	02ee0391 	.word	0x02ee0391
  40c794:	03910391 	.word	0x03910391
  40c798:	03910311 	.word	0x03910311
  40c79c:	03910391 	.word	0x03910391
  40c7a0:	03910391 	.word	0x03910391
  40c7a4:	03910391 	.word	0x03910391
  40c7a8:	03910391 	.word	0x03910391
  40c7ac:	03340391 	.word	0x03340391
  40c7b0:	0391038a 	.word	0x0391038a
  40c7b4:	03910391 	.word	0x03910391
  40c7b8:	038a0367 	.word	0x038a0367
  40c7bc:	03910391 	.word	0x03910391
  40c7c0:	0391036c 	.word	0x0391036c
  40c7c4:	02950379 	.word	0x02950379
  40c7c8:	02e90085 	.word	0x02e90085
  40c7cc:	029b0391 	.word	0x029b0391
  40c7d0:	02ba0391 	.word	0x02ba0391
  40c7d4:	03910391 	.word	0x03910391
  40c7d8:	0353      	.short	0x0353
  40c7da:	f10a 0a08 	add.w	sl, sl, #8
  40c7de:	9b02      	ldr	r3, [sp, #8]
  40c7e0:	442b      	add	r3, r5
  40c7e2:	9302      	str	r3, [sp, #8]
  40c7e4:	e785      	b.n	40c6f2 <_vfiprintf_r+0xaa>
  40c7e6:	9900      	ldr	r1, [sp, #0]
  40c7e8:	9805      	ldr	r0, [sp, #20]
  40c7ea:	f000 fe61 	bl	40d4b0 <__swsetup_r>
  40c7ee:	2800      	cmp	r0, #0
  40c7f0:	f040 8558 	bne.w	40d2a4 <_vfiprintf_r+0xc5c>
  40c7f4:	9b00      	ldr	r3, [sp, #0]
  40c7f6:	899a      	ldrh	r2, [r3, #12]
  40c7f8:	f002 021a 	and.w	r2, r2, #26
  40c7fc:	2a0a      	cmp	r2, #10
  40c7fe:	f47f af4b 	bne.w	40c698 <_vfiprintf_r+0x50>
  40c802:	9900      	ldr	r1, [sp, #0]
  40c804:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  40c808:	2b00      	cmp	r3, #0
  40c80a:	f6ff af45 	blt.w	40c698 <_vfiprintf_r+0x50>
  40c80e:	4623      	mov	r3, r4
  40c810:	4642      	mov	r2, r8
  40c812:	9805      	ldr	r0, [sp, #20]
  40c814:	f000 fe16 	bl	40d444 <__sbprintf>
  40c818:	b02b      	add	sp, #172	; 0xac
  40c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c81e:	f001 ffb3 	bl	40e788 <__sinit>
  40c822:	e71e      	b.n	40c662 <_vfiprintf_r+0x1a>
  40c824:	4264      	negs	r4, r4
  40c826:	9304      	str	r3, [sp, #16]
  40c828:	f046 0604 	orr.w	r6, r6, #4
  40c82c:	f898 3000 	ldrb.w	r3, [r8]
  40c830:	e771      	b.n	40c716 <_vfiprintf_r+0xce>
  40c832:	2130      	movs	r1, #48	; 0x30
  40c834:	9804      	ldr	r0, [sp, #16]
  40c836:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40c83a:	9901      	ldr	r1, [sp, #4]
  40c83c:	9406      	str	r4, [sp, #24]
  40c83e:	f04f 0300 	mov.w	r3, #0
  40c842:	2278      	movs	r2, #120	; 0x78
  40c844:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40c848:	2900      	cmp	r1, #0
  40c84a:	4603      	mov	r3, r0
  40c84c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40c850:	6804      	ldr	r4, [r0, #0]
  40c852:	f103 0304 	add.w	r3, r3, #4
  40c856:	f04f 0500 	mov.w	r5, #0
  40c85a:	f046 0202 	orr.w	r2, r6, #2
  40c85e:	f2c0 8525 	blt.w	40d2ac <_vfiprintf_r+0xc64>
  40c862:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40c866:	ea54 0205 	orrs.w	r2, r4, r5
  40c86a:	f046 0602 	orr.w	r6, r6, #2
  40c86e:	9304      	str	r3, [sp, #16]
  40c870:	f040 84bf 	bne.w	40d1f2 <_vfiprintf_r+0xbaa>
  40c874:	48b3      	ldr	r0, [pc, #716]	; (40cb44 <_vfiprintf_r+0x4fc>)
  40c876:	9b01      	ldr	r3, [sp, #4]
  40c878:	2b00      	cmp	r3, #0
  40c87a:	f040 841c 	bne.w	40d0b6 <_vfiprintf_r+0xa6e>
  40c87e:	4699      	mov	r9, r3
  40c880:	2300      	movs	r3, #0
  40c882:	9301      	str	r3, [sp, #4]
  40c884:	9303      	str	r3, [sp, #12]
  40c886:	465f      	mov	r7, fp
  40c888:	9b01      	ldr	r3, [sp, #4]
  40c88a:	9a03      	ldr	r2, [sp, #12]
  40c88c:	4293      	cmp	r3, r2
  40c88e:	bfb8      	it	lt
  40c890:	4613      	movlt	r3, r2
  40c892:	461d      	mov	r5, r3
  40c894:	f1b9 0f00 	cmp.w	r9, #0
  40c898:	d000      	beq.n	40c89c <_vfiprintf_r+0x254>
  40c89a:	3501      	adds	r5, #1
  40c89c:	f016 0302 	ands.w	r3, r6, #2
  40c8a0:	9307      	str	r3, [sp, #28]
  40c8a2:	bf18      	it	ne
  40c8a4:	3502      	addne	r5, #2
  40c8a6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40c8aa:	9308      	str	r3, [sp, #32]
  40c8ac:	f040 82f1 	bne.w	40ce92 <_vfiprintf_r+0x84a>
  40c8b0:	9b06      	ldr	r3, [sp, #24]
  40c8b2:	1b5c      	subs	r4, r3, r5
  40c8b4:	2c00      	cmp	r4, #0
  40c8b6:	f340 82ec 	ble.w	40ce92 <_vfiprintf_r+0x84a>
  40c8ba:	2c10      	cmp	r4, #16
  40c8bc:	f340 8556 	ble.w	40d36c <_vfiprintf_r+0xd24>
  40c8c0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 40cb48 <_vfiprintf_r+0x500>
  40c8c4:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40c8c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c8ca:	46d4      	mov	ip, sl
  40c8cc:	2310      	movs	r3, #16
  40c8ce:	46c2      	mov	sl, r8
  40c8d0:	4670      	mov	r0, lr
  40c8d2:	46a8      	mov	r8, r5
  40c8d4:	464d      	mov	r5, r9
  40c8d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c8da:	e007      	b.n	40c8ec <_vfiprintf_r+0x2a4>
  40c8dc:	f100 0e02 	add.w	lr, r0, #2
  40c8e0:	f10c 0c08 	add.w	ip, ip, #8
  40c8e4:	4608      	mov	r0, r1
  40c8e6:	3c10      	subs	r4, #16
  40c8e8:	2c10      	cmp	r4, #16
  40c8ea:	dd13      	ble.n	40c914 <_vfiprintf_r+0x2cc>
  40c8ec:	1c41      	adds	r1, r0, #1
  40c8ee:	3210      	adds	r2, #16
  40c8f0:	2907      	cmp	r1, #7
  40c8f2:	920f      	str	r2, [sp, #60]	; 0x3c
  40c8f4:	f8cc 5000 	str.w	r5, [ip]
  40c8f8:	f8cc 3004 	str.w	r3, [ip, #4]
  40c8fc:	910e      	str	r1, [sp, #56]	; 0x38
  40c8fe:	dded      	ble.n	40c8dc <_vfiprintf_r+0x294>
  40c900:	2a00      	cmp	r2, #0
  40c902:	f040 82b7 	bne.w	40ce74 <_vfiprintf_r+0x82c>
  40c906:	3c10      	subs	r4, #16
  40c908:	2c10      	cmp	r4, #16
  40c90a:	4610      	mov	r0, r2
  40c90c:	f04f 0e01 	mov.w	lr, #1
  40c910:	46dc      	mov	ip, fp
  40c912:	dceb      	bgt.n	40c8ec <_vfiprintf_r+0x2a4>
  40c914:	46a9      	mov	r9, r5
  40c916:	4670      	mov	r0, lr
  40c918:	4645      	mov	r5, r8
  40c91a:	46d0      	mov	r8, sl
  40c91c:	46e2      	mov	sl, ip
  40c91e:	4422      	add	r2, r4
  40c920:	2807      	cmp	r0, #7
  40c922:	920f      	str	r2, [sp, #60]	; 0x3c
  40c924:	f8ca 9000 	str.w	r9, [sl]
  40c928:	f8ca 4004 	str.w	r4, [sl, #4]
  40c92c:	900e      	str	r0, [sp, #56]	; 0x38
  40c92e:	f300 8375 	bgt.w	40d01c <_vfiprintf_r+0x9d4>
  40c932:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40c936:	f10a 0a08 	add.w	sl, sl, #8
  40c93a:	f100 0e01 	add.w	lr, r0, #1
  40c93e:	2b00      	cmp	r3, #0
  40c940:	f040 82b0 	bne.w	40cea4 <_vfiprintf_r+0x85c>
  40c944:	9b07      	ldr	r3, [sp, #28]
  40c946:	2b00      	cmp	r3, #0
  40c948:	f000 82c3 	beq.w	40ced2 <_vfiprintf_r+0x88a>
  40c94c:	3202      	adds	r2, #2
  40c94e:	a90c      	add	r1, sp, #48	; 0x30
  40c950:	2302      	movs	r3, #2
  40c952:	f1be 0f07 	cmp.w	lr, #7
  40c956:	920f      	str	r2, [sp, #60]	; 0x3c
  40c958:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40c95c:	e88a 000a 	stmia.w	sl, {r1, r3}
  40c960:	f340 8378 	ble.w	40d054 <_vfiprintf_r+0xa0c>
  40c964:	2a00      	cmp	r2, #0
  40c966:	f040 840a 	bne.w	40d17e <_vfiprintf_r+0xb36>
  40c96a:	9b08      	ldr	r3, [sp, #32]
  40c96c:	2b80      	cmp	r3, #128	; 0x80
  40c96e:	f04f 0e01 	mov.w	lr, #1
  40c972:	4610      	mov	r0, r2
  40c974:	46da      	mov	sl, fp
  40c976:	f040 82b0 	bne.w	40ceda <_vfiprintf_r+0x892>
  40c97a:	9b06      	ldr	r3, [sp, #24]
  40c97c:	1b5c      	subs	r4, r3, r5
  40c97e:	2c00      	cmp	r4, #0
  40c980:	f340 82ab 	ble.w	40ceda <_vfiprintf_r+0x892>
  40c984:	2c10      	cmp	r4, #16
  40c986:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 40cb4c <_vfiprintf_r+0x504>
  40c98a:	f340 850b 	ble.w	40d3a4 <_vfiprintf_r+0xd5c>
  40c98e:	46d6      	mov	lr, sl
  40c990:	2310      	movs	r3, #16
  40c992:	46c2      	mov	sl, r8
  40c994:	46a8      	mov	r8, r5
  40c996:	464d      	mov	r5, r9
  40c998:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c99c:	e007      	b.n	40c9ae <_vfiprintf_r+0x366>
  40c99e:	f100 0c02 	add.w	ip, r0, #2
  40c9a2:	f10e 0e08 	add.w	lr, lr, #8
  40c9a6:	4608      	mov	r0, r1
  40c9a8:	3c10      	subs	r4, #16
  40c9aa:	2c10      	cmp	r4, #16
  40c9ac:	dd13      	ble.n	40c9d6 <_vfiprintf_r+0x38e>
  40c9ae:	1c41      	adds	r1, r0, #1
  40c9b0:	3210      	adds	r2, #16
  40c9b2:	2907      	cmp	r1, #7
  40c9b4:	920f      	str	r2, [sp, #60]	; 0x3c
  40c9b6:	f8ce 5000 	str.w	r5, [lr]
  40c9ba:	f8ce 3004 	str.w	r3, [lr, #4]
  40c9be:	910e      	str	r1, [sp, #56]	; 0x38
  40c9c0:	dded      	ble.n	40c99e <_vfiprintf_r+0x356>
  40c9c2:	2a00      	cmp	r2, #0
  40c9c4:	f040 8315 	bne.w	40cff2 <_vfiprintf_r+0x9aa>
  40c9c8:	3c10      	subs	r4, #16
  40c9ca:	2c10      	cmp	r4, #16
  40c9cc:	f04f 0c01 	mov.w	ip, #1
  40c9d0:	4610      	mov	r0, r2
  40c9d2:	46de      	mov	lr, fp
  40c9d4:	dceb      	bgt.n	40c9ae <_vfiprintf_r+0x366>
  40c9d6:	46a9      	mov	r9, r5
  40c9d8:	4645      	mov	r5, r8
  40c9da:	46d0      	mov	r8, sl
  40c9dc:	46f2      	mov	sl, lr
  40c9de:	4422      	add	r2, r4
  40c9e0:	f1bc 0f07 	cmp.w	ip, #7
  40c9e4:	920f      	str	r2, [sp, #60]	; 0x3c
  40c9e6:	f8ca 9000 	str.w	r9, [sl]
  40c9ea:	f8ca 4004 	str.w	r4, [sl, #4]
  40c9ee:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40c9f2:	f300 83d2 	bgt.w	40d19a <_vfiprintf_r+0xb52>
  40c9f6:	9b01      	ldr	r3, [sp, #4]
  40c9f8:	9903      	ldr	r1, [sp, #12]
  40c9fa:	1a5c      	subs	r4, r3, r1
  40c9fc:	2c00      	cmp	r4, #0
  40c9fe:	f10a 0a08 	add.w	sl, sl, #8
  40ca02:	f10c 0e01 	add.w	lr, ip, #1
  40ca06:	4660      	mov	r0, ip
  40ca08:	f300 826d 	bgt.w	40cee6 <_vfiprintf_r+0x89e>
  40ca0c:	9903      	ldr	r1, [sp, #12]
  40ca0e:	f8ca 7000 	str.w	r7, [sl]
  40ca12:	440a      	add	r2, r1
  40ca14:	f1be 0f07 	cmp.w	lr, #7
  40ca18:	920f      	str	r2, [sp, #60]	; 0x3c
  40ca1a:	f8ca 1004 	str.w	r1, [sl, #4]
  40ca1e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40ca22:	f340 82ce 	ble.w	40cfc2 <_vfiprintf_r+0x97a>
  40ca26:	2a00      	cmp	r2, #0
  40ca28:	f040 833a 	bne.w	40d0a0 <_vfiprintf_r+0xa58>
  40ca2c:	0770      	lsls	r0, r6, #29
  40ca2e:	920e      	str	r2, [sp, #56]	; 0x38
  40ca30:	d538      	bpl.n	40caa4 <_vfiprintf_r+0x45c>
  40ca32:	9b06      	ldr	r3, [sp, #24]
  40ca34:	1b5c      	subs	r4, r3, r5
  40ca36:	2c00      	cmp	r4, #0
  40ca38:	dd34      	ble.n	40caa4 <_vfiprintf_r+0x45c>
  40ca3a:	46da      	mov	sl, fp
  40ca3c:	2c10      	cmp	r4, #16
  40ca3e:	f340 84ab 	ble.w	40d398 <_vfiprintf_r+0xd50>
  40ca42:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40cb48 <_vfiprintf_r+0x500>
  40ca46:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ca48:	464f      	mov	r7, r9
  40ca4a:	2610      	movs	r6, #16
  40ca4c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ca50:	e006      	b.n	40ca60 <_vfiprintf_r+0x418>
  40ca52:	1c88      	adds	r0, r1, #2
  40ca54:	f10a 0a08 	add.w	sl, sl, #8
  40ca58:	4619      	mov	r1, r3
  40ca5a:	3c10      	subs	r4, #16
  40ca5c:	2c10      	cmp	r4, #16
  40ca5e:	dd13      	ble.n	40ca88 <_vfiprintf_r+0x440>
  40ca60:	1c4b      	adds	r3, r1, #1
  40ca62:	3210      	adds	r2, #16
  40ca64:	2b07      	cmp	r3, #7
  40ca66:	920f      	str	r2, [sp, #60]	; 0x3c
  40ca68:	f8ca 7000 	str.w	r7, [sl]
  40ca6c:	f8ca 6004 	str.w	r6, [sl, #4]
  40ca70:	930e      	str	r3, [sp, #56]	; 0x38
  40ca72:	ddee      	ble.n	40ca52 <_vfiprintf_r+0x40a>
  40ca74:	2a00      	cmp	r2, #0
  40ca76:	f040 828e 	bne.w	40cf96 <_vfiprintf_r+0x94e>
  40ca7a:	3c10      	subs	r4, #16
  40ca7c:	2c10      	cmp	r4, #16
  40ca7e:	f04f 0001 	mov.w	r0, #1
  40ca82:	4611      	mov	r1, r2
  40ca84:	46da      	mov	sl, fp
  40ca86:	dceb      	bgt.n	40ca60 <_vfiprintf_r+0x418>
  40ca88:	46b9      	mov	r9, r7
  40ca8a:	4422      	add	r2, r4
  40ca8c:	2807      	cmp	r0, #7
  40ca8e:	920f      	str	r2, [sp, #60]	; 0x3c
  40ca90:	f8ca 9000 	str.w	r9, [sl]
  40ca94:	f8ca 4004 	str.w	r4, [sl, #4]
  40ca98:	900e      	str	r0, [sp, #56]	; 0x38
  40ca9a:	f340 829b 	ble.w	40cfd4 <_vfiprintf_r+0x98c>
  40ca9e:	2a00      	cmp	r2, #0
  40caa0:	f040 8425 	bne.w	40d2ee <_vfiprintf_r+0xca6>
  40caa4:	9b02      	ldr	r3, [sp, #8]
  40caa6:	9a06      	ldr	r2, [sp, #24]
  40caa8:	42aa      	cmp	r2, r5
  40caaa:	bfac      	ite	ge
  40caac:	189b      	addge	r3, r3, r2
  40caae:	195b      	addlt	r3, r3, r5
  40cab0:	9302      	str	r3, [sp, #8]
  40cab2:	e299      	b.n	40cfe8 <_vfiprintf_r+0x9a0>
  40cab4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40cab8:	f898 3000 	ldrb.w	r3, [r8]
  40cabc:	e62b      	b.n	40c716 <_vfiprintf_r+0xce>
  40cabe:	9406      	str	r4, [sp, #24]
  40cac0:	2900      	cmp	r1, #0
  40cac2:	f040 84af 	bne.w	40d424 <_vfiprintf_r+0xddc>
  40cac6:	f046 0610 	orr.w	r6, r6, #16
  40caca:	06b3      	lsls	r3, r6, #26
  40cacc:	f140 8312 	bpl.w	40d0f4 <_vfiprintf_r+0xaac>
  40cad0:	9904      	ldr	r1, [sp, #16]
  40cad2:	3107      	adds	r1, #7
  40cad4:	f021 0107 	bic.w	r1, r1, #7
  40cad8:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cadc:	3108      	adds	r1, #8
  40cade:	9104      	str	r1, [sp, #16]
  40cae0:	4614      	mov	r4, r2
  40cae2:	461d      	mov	r5, r3
  40cae4:	2a00      	cmp	r2, #0
  40cae6:	f173 0300 	sbcs.w	r3, r3, #0
  40caea:	f2c0 8386 	blt.w	40d1fa <_vfiprintf_r+0xbb2>
  40caee:	9b01      	ldr	r3, [sp, #4]
  40caf0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40caf4:	2b00      	cmp	r3, #0
  40caf6:	f2c0 831a 	blt.w	40d12e <_vfiprintf_r+0xae6>
  40cafa:	ea54 0305 	orrs.w	r3, r4, r5
  40cafe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40cb02:	f000 80ed 	beq.w	40cce0 <_vfiprintf_r+0x698>
  40cb06:	2d00      	cmp	r5, #0
  40cb08:	bf08      	it	eq
  40cb0a:	2c0a      	cmpeq	r4, #10
  40cb0c:	f0c0 80ed 	bcc.w	40ccea <_vfiprintf_r+0x6a2>
  40cb10:	465f      	mov	r7, fp
  40cb12:	4620      	mov	r0, r4
  40cb14:	4629      	mov	r1, r5
  40cb16:	220a      	movs	r2, #10
  40cb18:	2300      	movs	r3, #0
  40cb1a:	f003 ffbd 	bl	410a98 <__aeabi_uldivmod>
  40cb1e:	3230      	adds	r2, #48	; 0x30
  40cb20:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40cb24:	4620      	mov	r0, r4
  40cb26:	4629      	mov	r1, r5
  40cb28:	2300      	movs	r3, #0
  40cb2a:	220a      	movs	r2, #10
  40cb2c:	f003 ffb4 	bl	410a98 <__aeabi_uldivmod>
  40cb30:	4604      	mov	r4, r0
  40cb32:	460d      	mov	r5, r1
  40cb34:	ea54 0305 	orrs.w	r3, r4, r5
  40cb38:	d1eb      	bne.n	40cb12 <_vfiprintf_r+0x4ca>
  40cb3a:	ebc7 030b 	rsb	r3, r7, fp
  40cb3e:	9303      	str	r3, [sp, #12]
  40cb40:	e6a2      	b.n	40c888 <_vfiprintf_r+0x240>
  40cb42:	bf00      	nop
  40cb44:	00412d70 	.word	0x00412d70
  40cb48:	00412db0 	.word	0x00412db0
  40cb4c:	00412da0 	.word	0x00412da0
  40cb50:	9406      	str	r4, [sp, #24]
  40cb52:	2900      	cmp	r1, #0
  40cb54:	f040 8462 	bne.w	40d41c <_vfiprintf_r+0xdd4>
  40cb58:	f046 0610 	orr.w	r6, r6, #16
  40cb5c:	f016 0320 	ands.w	r3, r6, #32
  40cb60:	f000 82ae 	beq.w	40d0c0 <_vfiprintf_r+0xa78>
  40cb64:	9b04      	ldr	r3, [sp, #16]
  40cb66:	3307      	adds	r3, #7
  40cb68:	f023 0307 	bic.w	r3, r3, #7
  40cb6c:	f04f 0200 	mov.w	r2, #0
  40cb70:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40cb74:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cb78:	f103 0208 	add.w	r2, r3, #8
  40cb7c:	9b01      	ldr	r3, [sp, #4]
  40cb7e:	9204      	str	r2, [sp, #16]
  40cb80:	2b00      	cmp	r3, #0
  40cb82:	f2c0 8174 	blt.w	40ce6e <_vfiprintf_r+0x826>
  40cb86:	ea54 0305 	orrs.w	r3, r4, r5
  40cb8a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40cb8e:	f040 816e 	bne.w	40ce6e <_vfiprintf_r+0x826>
  40cb92:	9b01      	ldr	r3, [sp, #4]
  40cb94:	2b00      	cmp	r3, #0
  40cb96:	f000 8430 	beq.w	40d3fa <_vfiprintf_r+0xdb2>
  40cb9a:	f04f 0900 	mov.w	r9, #0
  40cb9e:	2400      	movs	r4, #0
  40cba0:	2500      	movs	r5, #0
  40cba2:	465f      	mov	r7, fp
  40cba4:	08e2      	lsrs	r2, r4, #3
  40cba6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40cbaa:	08e9      	lsrs	r1, r5, #3
  40cbac:	f004 0307 	and.w	r3, r4, #7
  40cbb0:	460d      	mov	r5, r1
  40cbb2:	4614      	mov	r4, r2
  40cbb4:	3330      	adds	r3, #48	; 0x30
  40cbb6:	ea54 0205 	orrs.w	r2, r4, r5
  40cbba:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40cbbe:	d1f1      	bne.n	40cba4 <_vfiprintf_r+0x55c>
  40cbc0:	07f4      	lsls	r4, r6, #31
  40cbc2:	d5ba      	bpl.n	40cb3a <_vfiprintf_r+0x4f2>
  40cbc4:	2b30      	cmp	r3, #48	; 0x30
  40cbc6:	d0b8      	beq.n	40cb3a <_vfiprintf_r+0x4f2>
  40cbc8:	2230      	movs	r2, #48	; 0x30
  40cbca:	1e7b      	subs	r3, r7, #1
  40cbcc:	f807 2c01 	strb.w	r2, [r7, #-1]
  40cbd0:	ebc3 020b 	rsb	r2, r3, fp
  40cbd4:	9203      	str	r2, [sp, #12]
  40cbd6:	461f      	mov	r7, r3
  40cbd8:	e656      	b.n	40c888 <_vfiprintf_r+0x240>
  40cbda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40cbde:	2400      	movs	r4, #0
  40cbe0:	f818 3b01 	ldrb.w	r3, [r8], #1
  40cbe4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40cbe8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  40cbec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40cbf0:	2a09      	cmp	r2, #9
  40cbf2:	d9f5      	bls.n	40cbe0 <_vfiprintf_r+0x598>
  40cbf4:	e591      	b.n	40c71a <_vfiprintf_r+0xd2>
  40cbf6:	f898 3000 	ldrb.w	r3, [r8]
  40cbfa:	2101      	movs	r1, #1
  40cbfc:	202b      	movs	r0, #43	; 0x2b
  40cbfe:	e58a      	b.n	40c716 <_vfiprintf_r+0xce>
  40cc00:	f898 3000 	ldrb.w	r3, [r8]
  40cc04:	2b2a      	cmp	r3, #42	; 0x2a
  40cc06:	f108 0501 	add.w	r5, r8, #1
  40cc0a:	f000 83dd 	beq.w	40d3c8 <_vfiprintf_r+0xd80>
  40cc0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40cc12:	2a09      	cmp	r2, #9
  40cc14:	46a8      	mov	r8, r5
  40cc16:	bf98      	it	ls
  40cc18:	2500      	movls	r5, #0
  40cc1a:	f200 83ce 	bhi.w	40d3ba <_vfiprintf_r+0xd72>
  40cc1e:	f818 3b01 	ldrb.w	r3, [r8], #1
  40cc22:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40cc26:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40cc2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40cc2e:	2a09      	cmp	r2, #9
  40cc30:	d9f5      	bls.n	40cc1e <_vfiprintf_r+0x5d6>
  40cc32:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40cc36:	9201      	str	r2, [sp, #4]
  40cc38:	e56f      	b.n	40c71a <_vfiprintf_r+0xd2>
  40cc3a:	9a04      	ldr	r2, [sp, #16]
  40cc3c:	6814      	ldr	r4, [r2, #0]
  40cc3e:	4613      	mov	r3, r2
  40cc40:	2c00      	cmp	r4, #0
  40cc42:	f103 0304 	add.w	r3, r3, #4
  40cc46:	f6ff aded 	blt.w	40c824 <_vfiprintf_r+0x1dc>
  40cc4a:	9304      	str	r3, [sp, #16]
  40cc4c:	f898 3000 	ldrb.w	r3, [r8]
  40cc50:	e561      	b.n	40c716 <_vfiprintf_r+0xce>
  40cc52:	9406      	str	r4, [sp, #24]
  40cc54:	2900      	cmp	r1, #0
  40cc56:	d081      	beq.n	40cb5c <_vfiprintf_r+0x514>
  40cc58:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40cc5c:	e77e      	b.n	40cb5c <_vfiprintf_r+0x514>
  40cc5e:	9a04      	ldr	r2, [sp, #16]
  40cc60:	9406      	str	r4, [sp, #24]
  40cc62:	6817      	ldr	r7, [r2, #0]
  40cc64:	f04f 0300 	mov.w	r3, #0
  40cc68:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40cc6c:	1d14      	adds	r4, r2, #4
  40cc6e:	9b01      	ldr	r3, [sp, #4]
  40cc70:	2f00      	cmp	r7, #0
  40cc72:	f000 8386 	beq.w	40d382 <_vfiprintf_r+0xd3a>
  40cc76:	2b00      	cmp	r3, #0
  40cc78:	f2c0 835f 	blt.w	40d33a <_vfiprintf_r+0xcf2>
  40cc7c:	461a      	mov	r2, r3
  40cc7e:	2100      	movs	r1, #0
  40cc80:	4638      	mov	r0, r7
  40cc82:	f002 fd15 	bl	40f6b0 <memchr>
  40cc86:	2800      	cmp	r0, #0
  40cc88:	f000 838f 	beq.w	40d3aa <_vfiprintf_r+0xd62>
  40cc8c:	1bc3      	subs	r3, r0, r7
  40cc8e:	9303      	str	r3, [sp, #12]
  40cc90:	2300      	movs	r3, #0
  40cc92:	9404      	str	r4, [sp, #16]
  40cc94:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40cc98:	9301      	str	r3, [sp, #4]
  40cc9a:	e5f5      	b.n	40c888 <_vfiprintf_r+0x240>
  40cc9c:	9406      	str	r4, [sp, #24]
  40cc9e:	2900      	cmp	r1, #0
  40cca0:	f040 83b9 	bne.w	40d416 <_vfiprintf_r+0xdce>
  40cca4:	f016 0920 	ands.w	r9, r6, #32
  40cca8:	d135      	bne.n	40cd16 <_vfiprintf_r+0x6ce>
  40ccaa:	f016 0310 	ands.w	r3, r6, #16
  40ccae:	d103      	bne.n	40ccb8 <_vfiprintf_r+0x670>
  40ccb0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40ccb4:	f040 832a 	bne.w	40d30c <_vfiprintf_r+0xcc4>
  40ccb8:	9a04      	ldr	r2, [sp, #16]
  40ccba:	4613      	mov	r3, r2
  40ccbc:	6814      	ldr	r4, [r2, #0]
  40ccbe:	9a01      	ldr	r2, [sp, #4]
  40ccc0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40ccc4:	2a00      	cmp	r2, #0
  40ccc6:	f103 0304 	add.w	r3, r3, #4
  40ccca:	f04f 0500 	mov.w	r5, #0
  40ccce:	f2c0 8332 	blt.w	40d336 <_vfiprintf_r+0xcee>
  40ccd2:	ea54 0205 	orrs.w	r2, r4, r5
  40ccd6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40ccda:	9304      	str	r3, [sp, #16]
  40ccdc:	f47f af13 	bne.w	40cb06 <_vfiprintf_r+0x4be>
  40cce0:	9b01      	ldr	r3, [sp, #4]
  40cce2:	2b00      	cmp	r3, #0
  40cce4:	f43f adcc 	beq.w	40c880 <_vfiprintf_r+0x238>
  40cce8:	2400      	movs	r4, #0
  40ccea:	af2a      	add	r7, sp, #168	; 0xa8
  40ccec:	3430      	adds	r4, #48	; 0x30
  40ccee:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40ccf2:	ebc7 030b 	rsb	r3, r7, fp
  40ccf6:	9303      	str	r3, [sp, #12]
  40ccf8:	e5c6      	b.n	40c888 <_vfiprintf_r+0x240>
  40ccfa:	f046 0620 	orr.w	r6, r6, #32
  40ccfe:	f898 3000 	ldrb.w	r3, [r8]
  40cd02:	e508      	b.n	40c716 <_vfiprintf_r+0xce>
  40cd04:	9406      	str	r4, [sp, #24]
  40cd06:	2900      	cmp	r1, #0
  40cd08:	f040 836e 	bne.w	40d3e8 <_vfiprintf_r+0xda0>
  40cd0c:	f046 0610 	orr.w	r6, r6, #16
  40cd10:	f016 0920 	ands.w	r9, r6, #32
  40cd14:	d0c9      	beq.n	40ccaa <_vfiprintf_r+0x662>
  40cd16:	9b04      	ldr	r3, [sp, #16]
  40cd18:	3307      	adds	r3, #7
  40cd1a:	f023 0307 	bic.w	r3, r3, #7
  40cd1e:	f04f 0200 	mov.w	r2, #0
  40cd22:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40cd26:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cd2a:	f103 0208 	add.w	r2, r3, #8
  40cd2e:	9b01      	ldr	r3, [sp, #4]
  40cd30:	9204      	str	r2, [sp, #16]
  40cd32:	2b00      	cmp	r3, #0
  40cd34:	f2c0 81f9 	blt.w	40d12a <_vfiprintf_r+0xae2>
  40cd38:	ea54 0305 	orrs.w	r3, r4, r5
  40cd3c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40cd40:	f04f 0900 	mov.w	r9, #0
  40cd44:	f47f aedf 	bne.w	40cb06 <_vfiprintf_r+0x4be>
  40cd48:	e7ca      	b.n	40cce0 <_vfiprintf_r+0x698>
  40cd4a:	9406      	str	r4, [sp, #24]
  40cd4c:	2900      	cmp	r1, #0
  40cd4e:	f040 8351 	bne.w	40d3f4 <_vfiprintf_r+0xdac>
  40cd52:	06b2      	lsls	r2, r6, #26
  40cd54:	48ae      	ldr	r0, [pc, #696]	; (40d010 <_vfiprintf_r+0x9c8>)
  40cd56:	d541      	bpl.n	40cddc <_vfiprintf_r+0x794>
  40cd58:	9a04      	ldr	r2, [sp, #16]
  40cd5a:	3207      	adds	r2, #7
  40cd5c:	f022 0207 	bic.w	r2, r2, #7
  40cd60:	e9d2 4500 	ldrd	r4, r5, [r2]
  40cd64:	f102 0108 	add.w	r1, r2, #8
  40cd68:	9104      	str	r1, [sp, #16]
  40cd6a:	f016 0901 	ands.w	r9, r6, #1
  40cd6e:	f000 8177 	beq.w	40d060 <_vfiprintf_r+0xa18>
  40cd72:	ea54 0205 	orrs.w	r2, r4, r5
  40cd76:	f040 8226 	bne.w	40d1c6 <_vfiprintf_r+0xb7e>
  40cd7a:	f04f 0300 	mov.w	r3, #0
  40cd7e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40cd82:	9b01      	ldr	r3, [sp, #4]
  40cd84:	2b00      	cmp	r3, #0
  40cd86:	f2c0 8196 	blt.w	40d0b6 <_vfiprintf_r+0xa6e>
  40cd8a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40cd8e:	e572      	b.n	40c876 <_vfiprintf_r+0x22e>
  40cd90:	9a04      	ldr	r2, [sp, #16]
  40cd92:	9406      	str	r4, [sp, #24]
  40cd94:	6813      	ldr	r3, [r2, #0]
  40cd96:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40cd9a:	4613      	mov	r3, r2
  40cd9c:	f04f 0100 	mov.w	r1, #0
  40cda0:	2501      	movs	r5, #1
  40cda2:	3304      	adds	r3, #4
  40cda4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40cda8:	9304      	str	r3, [sp, #16]
  40cdaa:	9503      	str	r5, [sp, #12]
  40cdac:	af10      	add	r7, sp, #64	; 0x40
  40cdae:	2300      	movs	r3, #0
  40cdb0:	9301      	str	r3, [sp, #4]
  40cdb2:	e573      	b.n	40c89c <_vfiprintf_r+0x254>
  40cdb4:	f898 3000 	ldrb.w	r3, [r8]
  40cdb8:	2800      	cmp	r0, #0
  40cdba:	f47f acac 	bne.w	40c716 <_vfiprintf_r+0xce>
  40cdbe:	2101      	movs	r1, #1
  40cdc0:	2020      	movs	r0, #32
  40cdc2:	e4a8      	b.n	40c716 <_vfiprintf_r+0xce>
  40cdc4:	f046 0601 	orr.w	r6, r6, #1
  40cdc8:	f898 3000 	ldrb.w	r3, [r8]
  40cdcc:	e4a3      	b.n	40c716 <_vfiprintf_r+0xce>
  40cdce:	9406      	str	r4, [sp, #24]
  40cdd0:	2900      	cmp	r1, #0
  40cdd2:	f040 830c 	bne.w	40d3ee <_vfiprintf_r+0xda6>
  40cdd6:	06b2      	lsls	r2, r6, #26
  40cdd8:	488e      	ldr	r0, [pc, #568]	; (40d014 <_vfiprintf_r+0x9cc>)
  40cdda:	d4bd      	bmi.n	40cd58 <_vfiprintf_r+0x710>
  40cddc:	9904      	ldr	r1, [sp, #16]
  40cdde:	06f7      	lsls	r7, r6, #27
  40cde0:	460a      	mov	r2, r1
  40cde2:	f100 819d 	bmi.w	40d120 <_vfiprintf_r+0xad8>
  40cde6:	0675      	lsls	r5, r6, #25
  40cde8:	f140 819a 	bpl.w	40d120 <_vfiprintf_r+0xad8>
  40cdec:	3204      	adds	r2, #4
  40cdee:	880c      	ldrh	r4, [r1, #0]
  40cdf0:	9204      	str	r2, [sp, #16]
  40cdf2:	2500      	movs	r5, #0
  40cdf4:	e7b9      	b.n	40cd6a <_vfiprintf_r+0x722>
  40cdf6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40cdfa:	f898 3000 	ldrb.w	r3, [r8]
  40cdfe:	e48a      	b.n	40c716 <_vfiprintf_r+0xce>
  40ce00:	f898 3000 	ldrb.w	r3, [r8]
  40ce04:	2b6c      	cmp	r3, #108	; 0x6c
  40ce06:	bf03      	ittte	eq
  40ce08:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40ce0c:	f046 0620 	orreq.w	r6, r6, #32
  40ce10:	f108 0801 	addeq.w	r8, r8, #1
  40ce14:	f046 0610 	orrne.w	r6, r6, #16
  40ce18:	e47d      	b.n	40c716 <_vfiprintf_r+0xce>
  40ce1a:	2900      	cmp	r1, #0
  40ce1c:	f040 8309 	bne.w	40d432 <_vfiprintf_r+0xdea>
  40ce20:	06b4      	lsls	r4, r6, #26
  40ce22:	f140 821c 	bpl.w	40d25e <_vfiprintf_r+0xc16>
  40ce26:	9a04      	ldr	r2, [sp, #16]
  40ce28:	9902      	ldr	r1, [sp, #8]
  40ce2a:	6813      	ldr	r3, [r2, #0]
  40ce2c:	17cd      	asrs	r5, r1, #31
  40ce2e:	4608      	mov	r0, r1
  40ce30:	3204      	adds	r2, #4
  40ce32:	4629      	mov	r1, r5
  40ce34:	9204      	str	r2, [sp, #16]
  40ce36:	e9c3 0100 	strd	r0, r1, [r3]
  40ce3a:	e436      	b.n	40c6aa <_vfiprintf_r+0x62>
  40ce3c:	9406      	str	r4, [sp, #24]
  40ce3e:	2900      	cmp	r1, #0
  40ce40:	f43f ae43 	beq.w	40caca <_vfiprintf_r+0x482>
  40ce44:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40ce48:	e63f      	b.n	40caca <_vfiprintf_r+0x482>
  40ce4a:	9406      	str	r4, [sp, #24]
  40ce4c:	2900      	cmp	r1, #0
  40ce4e:	f040 82ed 	bne.w	40d42c <_vfiprintf_r+0xde4>
  40ce52:	2b00      	cmp	r3, #0
  40ce54:	f000 808f 	beq.w	40cf76 <_vfiprintf_r+0x92e>
  40ce58:	2501      	movs	r5, #1
  40ce5a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40ce5e:	f04f 0300 	mov.w	r3, #0
  40ce62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40ce66:	9503      	str	r5, [sp, #12]
  40ce68:	af10      	add	r7, sp, #64	; 0x40
  40ce6a:	e7a0      	b.n	40cdae <_vfiprintf_r+0x766>
  40ce6c:	9304      	str	r3, [sp, #16]
  40ce6e:	f04f 0900 	mov.w	r9, #0
  40ce72:	e696      	b.n	40cba2 <_vfiprintf_r+0x55a>
  40ce74:	aa0d      	add	r2, sp, #52	; 0x34
  40ce76:	9900      	ldr	r1, [sp, #0]
  40ce78:	9309      	str	r3, [sp, #36]	; 0x24
  40ce7a:	4648      	mov	r0, r9
  40ce7c:	f7ff fba8 	bl	40c5d0 <__sprint_r.part.0>
  40ce80:	2800      	cmp	r0, #0
  40ce82:	d17f      	bne.n	40cf84 <_vfiprintf_r+0x93c>
  40ce84:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ce86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ce88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ce8a:	f100 0e01 	add.w	lr, r0, #1
  40ce8e:	46dc      	mov	ip, fp
  40ce90:	e529      	b.n	40c8e6 <_vfiprintf_r+0x29e>
  40ce92:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ce94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ce96:	f100 0e01 	add.w	lr, r0, #1
  40ce9a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40ce9e:	2b00      	cmp	r3, #0
  40cea0:	f43f ad50 	beq.w	40c944 <_vfiprintf_r+0x2fc>
  40cea4:	3201      	adds	r2, #1
  40cea6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40ceaa:	2301      	movs	r3, #1
  40ceac:	f1be 0f07 	cmp.w	lr, #7
  40ceb0:	920f      	str	r2, [sp, #60]	; 0x3c
  40ceb2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40ceb6:	e88a 000a 	stmia.w	sl, {r1, r3}
  40ceba:	f340 80bf 	ble.w	40d03c <_vfiprintf_r+0x9f4>
  40cebe:	2a00      	cmp	r2, #0
  40cec0:	f040 814e 	bne.w	40d160 <_vfiprintf_r+0xb18>
  40cec4:	9907      	ldr	r1, [sp, #28]
  40cec6:	2900      	cmp	r1, #0
  40cec8:	f040 80be 	bne.w	40d048 <_vfiprintf_r+0xa00>
  40cecc:	469e      	mov	lr, r3
  40cece:	4610      	mov	r0, r2
  40ced0:	46da      	mov	sl, fp
  40ced2:	9b08      	ldr	r3, [sp, #32]
  40ced4:	2b80      	cmp	r3, #128	; 0x80
  40ced6:	f43f ad50 	beq.w	40c97a <_vfiprintf_r+0x332>
  40ceda:	9b01      	ldr	r3, [sp, #4]
  40cedc:	9903      	ldr	r1, [sp, #12]
  40cede:	1a5c      	subs	r4, r3, r1
  40cee0:	2c00      	cmp	r4, #0
  40cee2:	f77f ad93 	ble.w	40ca0c <_vfiprintf_r+0x3c4>
  40cee6:	2c10      	cmp	r4, #16
  40cee8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40d018 <_vfiprintf_r+0x9d0>
  40ceec:	dd25      	ble.n	40cf3a <_vfiprintf_r+0x8f2>
  40ceee:	46d4      	mov	ip, sl
  40cef0:	2310      	movs	r3, #16
  40cef2:	46c2      	mov	sl, r8
  40cef4:	46a8      	mov	r8, r5
  40cef6:	464d      	mov	r5, r9
  40cef8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40cefc:	e007      	b.n	40cf0e <_vfiprintf_r+0x8c6>
  40cefe:	f100 0e02 	add.w	lr, r0, #2
  40cf02:	f10c 0c08 	add.w	ip, ip, #8
  40cf06:	4608      	mov	r0, r1
  40cf08:	3c10      	subs	r4, #16
  40cf0a:	2c10      	cmp	r4, #16
  40cf0c:	dd11      	ble.n	40cf32 <_vfiprintf_r+0x8ea>
  40cf0e:	1c41      	adds	r1, r0, #1
  40cf10:	3210      	adds	r2, #16
  40cf12:	2907      	cmp	r1, #7
  40cf14:	920f      	str	r2, [sp, #60]	; 0x3c
  40cf16:	f8cc 5000 	str.w	r5, [ip]
  40cf1a:	f8cc 3004 	str.w	r3, [ip, #4]
  40cf1e:	910e      	str	r1, [sp, #56]	; 0x38
  40cf20:	dded      	ble.n	40cefe <_vfiprintf_r+0x8b6>
  40cf22:	b9d2      	cbnz	r2, 40cf5a <_vfiprintf_r+0x912>
  40cf24:	3c10      	subs	r4, #16
  40cf26:	2c10      	cmp	r4, #16
  40cf28:	f04f 0e01 	mov.w	lr, #1
  40cf2c:	4610      	mov	r0, r2
  40cf2e:	46dc      	mov	ip, fp
  40cf30:	dced      	bgt.n	40cf0e <_vfiprintf_r+0x8c6>
  40cf32:	46a9      	mov	r9, r5
  40cf34:	4645      	mov	r5, r8
  40cf36:	46d0      	mov	r8, sl
  40cf38:	46e2      	mov	sl, ip
  40cf3a:	4422      	add	r2, r4
  40cf3c:	f1be 0f07 	cmp.w	lr, #7
  40cf40:	920f      	str	r2, [sp, #60]	; 0x3c
  40cf42:	f8ca 9000 	str.w	r9, [sl]
  40cf46:	f8ca 4004 	str.w	r4, [sl, #4]
  40cf4a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40cf4e:	dc2e      	bgt.n	40cfae <_vfiprintf_r+0x966>
  40cf50:	f10a 0a08 	add.w	sl, sl, #8
  40cf54:	f10e 0e01 	add.w	lr, lr, #1
  40cf58:	e558      	b.n	40ca0c <_vfiprintf_r+0x3c4>
  40cf5a:	aa0d      	add	r2, sp, #52	; 0x34
  40cf5c:	9900      	ldr	r1, [sp, #0]
  40cf5e:	9301      	str	r3, [sp, #4]
  40cf60:	4648      	mov	r0, r9
  40cf62:	f7ff fb35 	bl	40c5d0 <__sprint_r.part.0>
  40cf66:	b968      	cbnz	r0, 40cf84 <_vfiprintf_r+0x93c>
  40cf68:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cf6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cf6c:	9b01      	ldr	r3, [sp, #4]
  40cf6e:	f100 0e01 	add.w	lr, r0, #1
  40cf72:	46dc      	mov	ip, fp
  40cf74:	e7c8      	b.n	40cf08 <_vfiprintf_r+0x8c0>
  40cf76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40cf78:	b123      	cbz	r3, 40cf84 <_vfiprintf_r+0x93c>
  40cf7a:	9805      	ldr	r0, [sp, #20]
  40cf7c:	9900      	ldr	r1, [sp, #0]
  40cf7e:	aa0d      	add	r2, sp, #52	; 0x34
  40cf80:	f7ff fb26 	bl	40c5d0 <__sprint_r.part.0>
  40cf84:	9b00      	ldr	r3, [sp, #0]
  40cf86:	899b      	ldrh	r3, [r3, #12]
  40cf88:	065a      	lsls	r2, r3, #25
  40cf8a:	f100 818b 	bmi.w	40d2a4 <_vfiprintf_r+0xc5c>
  40cf8e:	9802      	ldr	r0, [sp, #8]
  40cf90:	b02b      	add	sp, #172	; 0xac
  40cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf96:	aa0d      	add	r2, sp, #52	; 0x34
  40cf98:	9900      	ldr	r1, [sp, #0]
  40cf9a:	4648      	mov	r0, r9
  40cf9c:	f7ff fb18 	bl	40c5d0 <__sprint_r.part.0>
  40cfa0:	2800      	cmp	r0, #0
  40cfa2:	d1ef      	bne.n	40cf84 <_vfiprintf_r+0x93c>
  40cfa4:	990e      	ldr	r1, [sp, #56]	; 0x38
  40cfa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cfa8:	1c48      	adds	r0, r1, #1
  40cfaa:	46da      	mov	sl, fp
  40cfac:	e555      	b.n	40ca5a <_vfiprintf_r+0x412>
  40cfae:	2a00      	cmp	r2, #0
  40cfb0:	f040 80fb 	bne.w	40d1aa <_vfiprintf_r+0xb62>
  40cfb4:	9a03      	ldr	r2, [sp, #12]
  40cfb6:	921b      	str	r2, [sp, #108]	; 0x6c
  40cfb8:	2301      	movs	r3, #1
  40cfba:	920f      	str	r2, [sp, #60]	; 0x3c
  40cfbc:	971a      	str	r7, [sp, #104]	; 0x68
  40cfbe:	930e      	str	r3, [sp, #56]	; 0x38
  40cfc0:	46da      	mov	sl, fp
  40cfc2:	f10a 0a08 	add.w	sl, sl, #8
  40cfc6:	0771      	lsls	r1, r6, #29
  40cfc8:	d504      	bpl.n	40cfd4 <_vfiprintf_r+0x98c>
  40cfca:	9b06      	ldr	r3, [sp, #24]
  40cfcc:	1b5c      	subs	r4, r3, r5
  40cfce:	2c00      	cmp	r4, #0
  40cfd0:	f73f ad34 	bgt.w	40ca3c <_vfiprintf_r+0x3f4>
  40cfd4:	9b02      	ldr	r3, [sp, #8]
  40cfd6:	9906      	ldr	r1, [sp, #24]
  40cfd8:	42a9      	cmp	r1, r5
  40cfda:	bfac      	ite	ge
  40cfdc:	185b      	addge	r3, r3, r1
  40cfde:	195b      	addlt	r3, r3, r5
  40cfe0:	9302      	str	r3, [sp, #8]
  40cfe2:	2a00      	cmp	r2, #0
  40cfe4:	f040 80b3 	bne.w	40d14e <_vfiprintf_r+0xb06>
  40cfe8:	2300      	movs	r3, #0
  40cfea:	930e      	str	r3, [sp, #56]	; 0x38
  40cfec:	46da      	mov	sl, fp
  40cfee:	f7ff bb5c 	b.w	40c6aa <_vfiprintf_r+0x62>
  40cff2:	aa0d      	add	r2, sp, #52	; 0x34
  40cff4:	9900      	ldr	r1, [sp, #0]
  40cff6:	9307      	str	r3, [sp, #28]
  40cff8:	4648      	mov	r0, r9
  40cffa:	f7ff fae9 	bl	40c5d0 <__sprint_r.part.0>
  40cffe:	2800      	cmp	r0, #0
  40d000:	d1c0      	bne.n	40cf84 <_vfiprintf_r+0x93c>
  40d002:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d006:	9b07      	ldr	r3, [sp, #28]
  40d008:	f100 0c01 	add.w	ip, r0, #1
  40d00c:	46de      	mov	lr, fp
  40d00e:	e4cb      	b.n	40c9a8 <_vfiprintf_r+0x360>
  40d010:	00412d5c 	.word	0x00412d5c
  40d014:	00412d70 	.word	0x00412d70
  40d018:	00412da0 	.word	0x00412da0
  40d01c:	2a00      	cmp	r2, #0
  40d01e:	f040 8133 	bne.w	40d288 <_vfiprintf_r+0xc40>
  40d022:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40d026:	2b00      	cmp	r3, #0
  40d028:	f000 80f5 	beq.w	40d216 <_vfiprintf_r+0xbce>
  40d02c:	2301      	movs	r3, #1
  40d02e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40d032:	461a      	mov	r2, r3
  40d034:	931b      	str	r3, [sp, #108]	; 0x6c
  40d036:	469e      	mov	lr, r3
  40d038:	911a      	str	r1, [sp, #104]	; 0x68
  40d03a:	46da      	mov	sl, fp
  40d03c:	4670      	mov	r0, lr
  40d03e:	f10a 0a08 	add.w	sl, sl, #8
  40d042:	f10e 0e01 	add.w	lr, lr, #1
  40d046:	e47d      	b.n	40c944 <_vfiprintf_r+0x2fc>
  40d048:	a90c      	add	r1, sp, #48	; 0x30
  40d04a:	2202      	movs	r2, #2
  40d04c:	469e      	mov	lr, r3
  40d04e:	911a      	str	r1, [sp, #104]	; 0x68
  40d050:	921b      	str	r2, [sp, #108]	; 0x6c
  40d052:	46da      	mov	sl, fp
  40d054:	4670      	mov	r0, lr
  40d056:	f10a 0a08 	add.w	sl, sl, #8
  40d05a:	f10e 0e01 	add.w	lr, lr, #1
  40d05e:	e738      	b.n	40ced2 <_vfiprintf_r+0x88a>
  40d060:	9b01      	ldr	r3, [sp, #4]
  40d062:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40d066:	2b00      	cmp	r3, #0
  40d068:	f2c0 812a 	blt.w	40d2c0 <_vfiprintf_r+0xc78>
  40d06c:	ea54 0305 	orrs.w	r3, r4, r5
  40d070:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d074:	f43f abff 	beq.w	40c876 <_vfiprintf_r+0x22e>
  40d078:	465f      	mov	r7, fp
  40d07a:	0923      	lsrs	r3, r4, #4
  40d07c:	f004 010f 	and.w	r1, r4, #15
  40d080:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40d084:	092a      	lsrs	r2, r5, #4
  40d086:	461c      	mov	r4, r3
  40d088:	4615      	mov	r5, r2
  40d08a:	5c43      	ldrb	r3, [r0, r1]
  40d08c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40d090:	ea54 0305 	orrs.w	r3, r4, r5
  40d094:	d1f1      	bne.n	40d07a <_vfiprintf_r+0xa32>
  40d096:	ebc7 030b 	rsb	r3, r7, fp
  40d09a:	9303      	str	r3, [sp, #12]
  40d09c:	f7ff bbf4 	b.w	40c888 <_vfiprintf_r+0x240>
  40d0a0:	aa0d      	add	r2, sp, #52	; 0x34
  40d0a2:	9900      	ldr	r1, [sp, #0]
  40d0a4:	9805      	ldr	r0, [sp, #20]
  40d0a6:	f7ff fa93 	bl	40c5d0 <__sprint_r.part.0>
  40d0aa:	2800      	cmp	r0, #0
  40d0ac:	f47f af6a 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d0b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d0b2:	46da      	mov	sl, fp
  40d0b4:	e787      	b.n	40cfc6 <_vfiprintf_r+0x97e>
  40d0b6:	f04f 0900 	mov.w	r9, #0
  40d0ba:	2400      	movs	r4, #0
  40d0bc:	2500      	movs	r5, #0
  40d0be:	e7db      	b.n	40d078 <_vfiprintf_r+0xa30>
  40d0c0:	f016 0210 	ands.w	r2, r6, #16
  40d0c4:	f000 80b2 	beq.w	40d22c <_vfiprintf_r+0xbe4>
  40d0c8:	9904      	ldr	r1, [sp, #16]
  40d0ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40d0ce:	460a      	mov	r2, r1
  40d0d0:	680c      	ldr	r4, [r1, #0]
  40d0d2:	9901      	ldr	r1, [sp, #4]
  40d0d4:	2900      	cmp	r1, #0
  40d0d6:	f102 0204 	add.w	r2, r2, #4
  40d0da:	f04f 0500 	mov.w	r5, #0
  40d0de:	f2c0 8159 	blt.w	40d394 <_vfiprintf_r+0xd4c>
  40d0e2:	ea54 0105 	orrs.w	r1, r4, r5
  40d0e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d0ea:	9204      	str	r2, [sp, #16]
  40d0ec:	f43f ad51 	beq.w	40cb92 <_vfiprintf_r+0x54a>
  40d0f0:	4699      	mov	r9, r3
  40d0f2:	e556      	b.n	40cba2 <_vfiprintf_r+0x55a>
  40d0f4:	06f7      	lsls	r7, r6, #27
  40d0f6:	d40a      	bmi.n	40d10e <_vfiprintf_r+0xac6>
  40d0f8:	0675      	lsls	r5, r6, #25
  40d0fa:	d508      	bpl.n	40d10e <_vfiprintf_r+0xac6>
  40d0fc:	9904      	ldr	r1, [sp, #16]
  40d0fe:	f9b1 4000 	ldrsh.w	r4, [r1]
  40d102:	3104      	adds	r1, #4
  40d104:	17e5      	asrs	r5, r4, #31
  40d106:	4622      	mov	r2, r4
  40d108:	462b      	mov	r3, r5
  40d10a:	9104      	str	r1, [sp, #16]
  40d10c:	e4ea      	b.n	40cae4 <_vfiprintf_r+0x49c>
  40d10e:	9a04      	ldr	r2, [sp, #16]
  40d110:	6814      	ldr	r4, [r2, #0]
  40d112:	4613      	mov	r3, r2
  40d114:	3304      	adds	r3, #4
  40d116:	17e5      	asrs	r5, r4, #31
  40d118:	9304      	str	r3, [sp, #16]
  40d11a:	4622      	mov	r2, r4
  40d11c:	462b      	mov	r3, r5
  40d11e:	e4e1      	b.n	40cae4 <_vfiprintf_r+0x49c>
  40d120:	6814      	ldr	r4, [r2, #0]
  40d122:	3204      	adds	r2, #4
  40d124:	9204      	str	r2, [sp, #16]
  40d126:	2500      	movs	r5, #0
  40d128:	e61f      	b.n	40cd6a <_vfiprintf_r+0x722>
  40d12a:	f04f 0900 	mov.w	r9, #0
  40d12e:	ea54 0305 	orrs.w	r3, r4, r5
  40d132:	f47f ace8 	bne.w	40cb06 <_vfiprintf_r+0x4be>
  40d136:	e5d8      	b.n	40ccea <_vfiprintf_r+0x6a2>
  40d138:	aa0d      	add	r2, sp, #52	; 0x34
  40d13a:	9900      	ldr	r1, [sp, #0]
  40d13c:	9805      	ldr	r0, [sp, #20]
  40d13e:	f7ff fa47 	bl	40c5d0 <__sprint_r.part.0>
  40d142:	2800      	cmp	r0, #0
  40d144:	f47f af1e 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d148:	46da      	mov	sl, fp
  40d14a:	f7ff bb48 	b.w	40c7de <_vfiprintf_r+0x196>
  40d14e:	aa0d      	add	r2, sp, #52	; 0x34
  40d150:	9900      	ldr	r1, [sp, #0]
  40d152:	9805      	ldr	r0, [sp, #20]
  40d154:	f7ff fa3c 	bl	40c5d0 <__sprint_r.part.0>
  40d158:	2800      	cmp	r0, #0
  40d15a:	f43f af45 	beq.w	40cfe8 <_vfiprintf_r+0x9a0>
  40d15e:	e711      	b.n	40cf84 <_vfiprintf_r+0x93c>
  40d160:	aa0d      	add	r2, sp, #52	; 0x34
  40d162:	9900      	ldr	r1, [sp, #0]
  40d164:	9805      	ldr	r0, [sp, #20]
  40d166:	f7ff fa33 	bl	40c5d0 <__sprint_r.part.0>
  40d16a:	2800      	cmp	r0, #0
  40d16c:	f47f af0a 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d170:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d174:	f100 0e01 	add.w	lr, r0, #1
  40d178:	46da      	mov	sl, fp
  40d17a:	f7ff bbe3 	b.w	40c944 <_vfiprintf_r+0x2fc>
  40d17e:	aa0d      	add	r2, sp, #52	; 0x34
  40d180:	9900      	ldr	r1, [sp, #0]
  40d182:	9805      	ldr	r0, [sp, #20]
  40d184:	f7ff fa24 	bl	40c5d0 <__sprint_r.part.0>
  40d188:	2800      	cmp	r0, #0
  40d18a:	f47f aefb 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d18e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d192:	f100 0e01 	add.w	lr, r0, #1
  40d196:	46da      	mov	sl, fp
  40d198:	e69b      	b.n	40ced2 <_vfiprintf_r+0x88a>
  40d19a:	2a00      	cmp	r2, #0
  40d19c:	f040 80d8 	bne.w	40d350 <_vfiprintf_r+0xd08>
  40d1a0:	f04f 0e01 	mov.w	lr, #1
  40d1a4:	4610      	mov	r0, r2
  40d1a6:	46da      	mov	sl, fp
  40d1a8:	e697      	b.n	40ceda <_vfiprintf_r+0x892>
  40d1aa:	aa0d      	add	r2, sp, #52	; 0x34
  40d1ac:	9900      	ldr	r1, [sp, #0]
  40d1ae:	9805      	ldr	r0, [sp, #20]
  40d1b0:	f7ff fa0e 	bl	40c5d0 <__sprint_r.part.0>
  40d1b4:	2800      	cmp	r0, #0
  40d1b6:	f47f aee5 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d1be:	f103 0e01 	add.w	lr, r3, #1
  40d1c2:	46da      	mov	sl, fp
  40d1c4:	e422      	b.n	40ca0c <_vfiprintf_r+0x3c4>
  40d1c6:	2230      	movs	r2, #48	; 0x30
  40d1c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40d1cc:	9a01      	ldr	r2, [sp, #4]
  40d1ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40d1d2:	2a00      	cmp	r2, #0
  40d1d4:	f04f 0300 	mov.w	r3, #0
  40d1d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40d1dc:	f046 0302 	orr.w	r3, r6, #2
  40d1e0:	f2c0 80cb 	blt.w	40d37a <_vfiprintf_r+0xd32>
  40d1e4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d1e8:	f046 0602 	orr.w	r6, r6, #2
  40d1ec:	f04f 0900 	mov.w	r9, #0
  40d1f0:	e742      	b.n	40d078 <_vfiprintf_r+0xa30>
  40d1f2:	f04f 0900 	mov.w	r9, #0
  40d1f6:	4890      	ldr	r0, [pc, #576]	; (40d438 <_vfiprintf_r+0xdf0>)
  40d1f8:	e73e      	b.n	40d078 <_vfiprintf_r+0xa30>
  40d1fa:	9b01      	ldr	r3, [sp, #4]
  40d1fc:	4264      	negs	r4, r4
  40d1fe:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40d202:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d206:	2b00      	cmp	r3, #0
  40d208:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40d20c:	f6ff ac7b 	blt.w	40cb06 <_vfiprintf_r+0x4be>
  40d210:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d214:	e477      	b.n	40cb06 <_vfiprintf_r+0x4be>
  40d216:	9b07      	ldr	r3, [sp, #28]
  40d218:	2b00      	cmp	r3, #0
  40d21a:	d072      	beq.n	40d302 <_vfiprintf_r+0xcba>
  40d21c:	ab0c      	add	r3, sp, #48	; 0x30
  40d21e:	2202      	movs	r2, #2
  40d220:	931a      	str	r3, [sp, #104]	; 0x68
  40d222:	921b      	str	r2, [sp, #108]	; 0x6c
  40d224:	f04f 0e01 	mov.w	lr, #1
  40d228:	46da      	mov	sl, fp
  40d22a:	e713      	b.n	40d054 <_vfiprintf_r+0xa0c>
  40d22c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40d230:	d048      	beq.n	40d2c4 <_vfiprintf_r+0xc7c>
  40d232:	9904      	ldr	r1, [sp, #16]
  40d234:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40d238:	460b      	mov	r3, r1
  40d23a:	880c      	ldrh	r4, [r1, #0]
  40d23c:	9901      	ldr	r1, [sp, #4]
  40d23e:	2900      	cmp	r1, #0
  40d240:	f103 0304 	add.w	r3, r3, #4
  40d244:	f04f 0500 	mov.w	r5, #0
  40d248:	f6ff ae10 	blt.w	40ce6c <_vfiprintf_r+0x824>
  40d24c:	ea54 0105 	orrs.w	r1, r4, r5
  40d250:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d254:	9304      	str	r3, [sp, #16]
  40d256:	f43f ac9c 	beq.w	40cb92 <_vfiprintf_r+0x54a>
  40d25a:	4691      	mov	r9, r2
  40d25c:	e4a1      	b.n	40cba2 <_vfiprintf_r+0x55a>
  40d25e:	06f0      	lsls	r0, r6, #27
  40d260:	d40a      	bmi.n	40d278 <_vfiprintf_r+0xc30>
  40d262:	0671      	lsls	r1, r6, #25
  40d264:	d508      	bpl.n	40d278 <_vfiprintf_r+0xc30>
  40d266:	9a04      	ldr	r2, [sp, #16]
  40d268:	6813      	ldr	r3, [r2, #0]
  40d26a:	3204      	adds	r2, #4
  40d26c:	9204      	str	r2, [sp, #16]
  40d26e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40d272:	801a      	strh	r2, [r3, #0]
  40d274:	f7ff ba19 	b.w	40c6aa <_vfiprintf_r+0x62>
  40d278:	9a04      	ldr	r2, [sp, #16]
  40d27a:	6813      	ldr	r3, [r2, #0]
  40d27c:	3204      	adds	r2, #4
  40d27e:	9204      	str	r2, [sp, #16]
  40d280:	9a02      	ldr	r2, [sp, #8]
  40d282:	601a      	str	r2, [r3, #0]
  40d284:	f7ff ba11 	b.w	40c6aa <_vfiprintf_r+0x62>
  40d288:	aa0d      	add	r2, sp, #52	; 0x34
  40d28a:	9900      	ldr	r1, [sp, #0]
  40d28c:	9805      	ldr	r0, [sp, #20]
  40d28e:	f7ff f99f 	bl	40c5d0 <__sprint_r.part.0>
  40d292:	2800      	cmp	r0, #0
  40d294:	f47f ae76 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d298:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d29a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d29c:	f100 0e01 	add.w	lr, r0, #1
  40d2a0:	46da      	mov	sl, fp
  40d2a2:	e5fa      	b.n	40ce9a <_vfiprintf_r+0x852>
  40d2a4:	f04f 30ff 	mov.w	r0, #4294967295
  40d2a8:	f7ff bab6 	b.w	40c818 <_vfiprintf_r+0x1d0>
  40d2ac:	4862      	ldr	r0, [pc, #392]	; (40d438 <_vfiprintf_r+0xdf0>)
  40d2ae:	4616      	mov	r6, r2
  40d2b0:	ea54 0205 	orrs.w	r2, r4, r5
  40d2b4:	9304      	str	r3, [sp, #16]
  40d2b6:	f04f 0900 	mov.w	r9, #0
  40d2ba:	f47f aedd 	bne.w	40d078 <_vfiprintf_r+0xa30>
  40d2be:	e6fc      	b.n	40d0ba <_vfiprintf_r+0xa72>
  40d2c0:	9b04      	ldr	r3, [sp, #16]
  40d2c2:	e7f5      	b.n	40d2b0 <_vfiprintf_r+0xc68>
  40d2c4:	9a04      	ldr	r2, [sp, #16]
  40d2c6:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40d2ca:	4613      	mov	r3, r2
  40d2cc:	6814      	ldr	r4, [r2, #0]
  40d2ce:	9a01      	ldr	r2, [sp, #4]
  40d2d0:	2a00      	cmp	r2, #0
  40d2d2:	f103 0304 	add.w	r3, r3, #4
  40d2d6:	f04f 0500 	mov.w	r5, #0
  40d2da:	f6ff adc7 	blt.w	40ce6c <_vfiprintf_r+0x824>
  40d2de:	ea54 0205 	orrs.w	r2, r4, r5
  40d2e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d2e6:	9304      	str	r3, [sp, #16]
  40d2e8:	f47f ac5b 	bne.w	40cba2 <_vfiprintf_r+0x55a>
  40d2ec:	e451      	b.n	40cb92 <_vfiprintf_r+0x54a>
  40d2ee:	aa0d      	add	r2, sp, #52	; 0x34
  40d2f0:	9900      	ldr	r1, [sp, #0]
  40d2f2:	9805      	ldr	r0, [sp, #20]
  40d2f4:	f7ff f96c 	bl	40c5d0 <__sprint_r.part.0>
  40d2f8:	2800      	cmp	r0, #0
  40d2fa:	f47f ae43 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d2fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d300:	e668      	b.n	40cfd4 <_vfiprintf_r+0x98c>
  40d302:	4610      	mov	r0, r2
  40d304:	f04f 0e01 	mov.w	lr, #1
  40d308:	46da      	mov	sl, fp
  40d30a:	e5e6      	b.n	40ceda <_vfiprintf_r+0x892>
  40d30c:	9904      	ldr	r1, [sp, #16]
  40d30e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40d312:	460a      	mov	r2, r1
  40d314:	880c      	ldrh	r4, [r1, #0]
  40d316:	9901      	ldr	r1, [sp, #4]
  40d318:	2900      	cmp	r1, #0
  40d31a:	f102 0204 	add.w	r2, r2, #4
  40d31e:	f04f 0500 	mov.w	r5, #0
  40d322:	db4e      	blt.n	40d3c2 <_vfiprintf_r+0xd7a>
  40d324:	ea54 0105 	orrs.w	r1, r4, r5
  40d328:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40d32c:	9204      	str	r2, [sp, #16]
  40d32e:	4699      	mov	r9, r3
  40d330:	f47f abe9 	bne.w	40cb06 <_vfiprintf_r+0x4be>
  40d334:	e4d4      	b.n	40cce0 <_vfiprintf_r+0x698>
  40d336:	9304      	str	r3, [sp, #16]
  40d338:	e6f9      	b.n	40d12e <_vfiprintf_r+0xae6>
  40d33a:	4638      	mov	r0, r7
  40d33c:	9404      	str	r4, [sp, #16]
  40d33e:	f7fc fa1f 	bl	409780 <strlen>
  40d342:	2300      	movs	r3, #0
  40d344:	9003      	str	r0, [sp, #12]
  40d346:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40d34a:	9301      	str	r3, [sp, #4]
  40d34c:	f7ff ba9c 	b.w	40c888 <_vfiprintf_r+0x240>
  40d350:	aa0d      	add	r2, sp, #52	; 0x34
  40d352:	9900      	ldr	r1, [sp, #0]
  40d354:	9805      	ldr	r0, [sp, #20]
  40d356:	f7ff f93b 	bl	40c5d0 <__sprint_r.part.0>
  40d35a:	2800      	cmp	r0, #0
  40d35c:	f47f ae12 	bne.w	40cf84 <_vfiprintf_r+0x93c>
  40d360:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d362:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d364:	f100 0e01 	add.w	lr, r0, #1
  40d368:	46da      	mov	sl, fp
  40d36a:	e5b6      	b.n	40ceda <_vfiprintf_r+0x892>
  40d36c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d370:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40d440 <_vfiprintf_r+0xdf8>
  40d374:	3001      	adds	r0, #1
  40d376:	f7ff bad2 	b.w	40c91e <_vfiprintf_r+0x2d6>
  40d37a:	461e      	mov	r6, r3
  40d37c:	f04f 0900 	mov.w	r9, #0
  40d380:	e67a      	b.n	40d078 <_vfiprintf_r+0xa30>
  40d382:	2b06      	cmp	r3, #6
  40d384:	bf28      	it	cs
  40d386:	2306      	movcs	r3, #6
  40d388:	9303      	str	r3, [sp, #12]
  40d38a:	9404      	str	r4, [sp, #16]
  40d38c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40d390:	4f2a      	ldr	r7, [pc, #168]	; (40d43c <_vfiprintf_r+0xdf4>)
  40d392:	e50c      	b.n	40cdae <_vfiprintf_r+0x766>
  40d394:	9204      	str	r2, [sp, #16]
  40d396:	e56a      	b.n	40ce6e <_vfiprintf_r+0x826>
  40d398:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d39a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40d440 <_vfiprintf_r+0xdf8>
  40d39e:	3001      	adds	r0, #1
  40d3a0:	f7ff bb73 	b.w	40ca8a <_vfiprintf_r+0x442>
  40d3a4:	46f4      	mov	ip, lr
  40d3a6:	f7ff bb1a 	b.w	40c9de <_vfiprintf_r+0x396>
  40d3aa:	9b01      	ldr	r3, [sp, #4]
  40d3ac:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40d3b0:	9303      	str	r3, [sp, #12]
  40d3b2:	9404      	str	r4, [sp, #16]
  40d3b4:	9001      	str	r0, [sp, #4]
  40d3b6:	f7ff ba67 	b.w	40c888 <_vfiprintf_r+0x240>
  40d3ba:	2200      	movs	r2, #0
  40d3bc:	9201      	str	r2, [sp, #4]
  40d3be:	f7ff b9ac 	b.w	40c71a <_vfiprintf_r+0xd2>
  40d3c2:	9204      	str	r2, [sp, #16]
  40d3c4:	4699      	mov	r9, r3
  40d3c6:	e6b2      	b.n	40d12e <_vfiprintf_r+0xae6>
  40d3c8:	9a04      	ldr	r2, [sp, #16]
  40d3ca:	6813      	ldr	r3, [r2, #0]
  40d3cc:	9301      	str	r3, [sp, #4]
  40d3ce:	3204      	adds	r2, #4
  40d3d0:	2b00      	cmp	r3, #0
  40d3d2:	9204      	str	r2, [sp, #16]
  40d3d4:	f898 3001 	ldrb.w	r3, [r8, #1]
  40d3d8:	46a8      	mov	r8, r5
  40d3da:	f6bf a99c 	bge.w	40c716 <_vfiprintf_r+0xce>
  40d3de:	f04f 32ff 	mov.w	r2, #4294967295
  40d3e2:	9201      	str	r2, [sp, #4]
  40d3e4:	f7ff b997 	b.w	40c716 <_vfiprintf_r+0xce>
  40d3e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d3ec:	e48e      	b.n	40cd0c <_vfiprintf_r+0x6c4>
  40d3ee:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d3f2:	e4f0      	b.n	40cdd6 <_vfiprintf_r+0x78e>
  40d3f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d3f8:	e4ab      	b.n	40cd52 <_vfiprintf_r+0x70a>
  40d3fa:	4699      	mov	r9, r3
  40d3fc:	07f3      	lsls	r3, r6, #31
  40d3fe:	d505      	bpl.n	40d40c <_vfiprintf_r+0xdc4>
  40d400:	af2a      	add	r7, sp, #168	; 0xa8
  40d402:	2330      	movs	r3, #48	; 0x30
  40d404:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40d408:	f7ff bb97 	b.w	40cb3a <_vfiprintf_r+0x4f2>
  40d40c:	9b01      	ldr	r3, [sp, #4]
  40d40e:	9303      	str	r3, [sp, #12]
  40d410:	465f      	mov	r7, fp
  40d412:	f7ff ba39 	b.w	40c888 <_vfiprintf_r+0x240>
  40d416:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d41a:	e443      	b.n	40cca4 <_vfiprintf_r+0x65c>
  40d41c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d420:	f7ff bb9a 	b.w	40cb58 <_vfiprintf_r+0x510>
  40d424:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d428:	f7ff bb4d 	b.w	40cac6 <_vfiprintf_r+0x47e>
  40d42c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d430:	e50f      	b.n	40ce52 <_vfiprintf_r+0x80a>
  40d432:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40d436:	e4f3      	b.n	40ce20 <_vfiprintf_r+0x7d8>
  40d438:	00412d70 	.word	0x00412d70
  40d43c:	00412d84 	.word	0x00412d84
  40d440:	00412db0 	.word	0x00412db0

0040d444 <__sbprintf>:
  40d444:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d446:	460c      	mov	r4, r1
  40d448:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40d44c:	8989      	ldrh	r1, [r1, #12]
  40d44e:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40d450:	89e5      	ldrh	r5, [r4, #14]
  40d452:	9619      	str	r6, [sp, #100]	; 0x64
  40d454:	f021 0102 	bic.w	r1, r1, #2
  40d458:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d45a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40d45e:	2500      	movs	r5, #0
  40d460:	69e7      	ldr	r7, [r4, #28]
  40d462:	f8ad 100c 	strh.w	r1, [sp, #12]
  40d466:	9609      	str	r6, [sp, #36]	; 0x24
  40d468:	9506      	str	r5, [sp, #24]
  40d46a:	ae1a      	add	r6, sp, #104	; 0x68
  40d46c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40d470:	4669      	mov	r1, sp
  40d472:	9600      	str	r6, [sp, #0]
  40d474:	9604      	str	r6, [sp, #16]
  40d476:	9502      	str	r5, [sp, #8]
  40d478:	9505      	str	r5, [sp, #20]
  40d47a:	9707      	str	r7, [sp, #28]
  40d47c:	4606      	mov	r6, r0
  40d47e:	f7ff f8e3 	bl	40c648 <_vfiprintf_r>
  40d482:	1e05      	subs	r5, r0, #0
  40d484:	db07      	blt.n	40d496 <__sbprintf+0x52>
  40d486:	4630      	mov	r0, r6
  40d488:	4669      	mov	r1, sp
  40d48a:	f001 f8e9 	bl	40e660 <_fflush_r>
  40d48e:	2800      	cmp	r0, #0
  40d490:	bf18      	it	ne
  40d492:	f04f 35ff 	movne.w	r5, #4294967295
  40d496:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40d49a:	065b      	lsls	r3, r3, #25
  40d49c:	d503      	bpl.n	40d4a6 <__sbprintf+0x62>
  40d49e:	89a3      	ldrh	r3, [r4, #12]
  40d4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d4a4:	81a3      	strh	r3, [r4, #12]
  40d4a6:	4628      	mov	r0, r5
  40d4a8:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40d4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d4ae:	bf00      	nop

0040d4b0 <__swsetup_r>:
  40d4b0:	b538      	push	{r3, r4, r5, lr}
  40d4b2:	4b30      	ldr	r3, [pc, #192]	; (40d574 <__swsetup_r+0xc4>)
  40d4b4:	681b      	ldr	r3, [r3, #0]
  40d4b6:	4605      	mov	r5, r0
  40d4b8:	460c      	mov	r4, r1
  40d4ba:	b113      	cbz	r3, 40d4c2 <__swsetup_r+0x12>
  40d4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40d4be:	2a00      	cmp	r2, #0
  40d4c0:	d038      	beq.n	40d534 <__swsetup_r+0x84>
  40d4c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d4c6:	b293      	uxth	r3, r2
  40d4c8:	0718      	lsls	r0, r3, #28
  40d4ca:	d50c      	bpl.n	40d4e6 <__swsetup_r+0x36>
  40d4cc:	6920      	ldr	r0, [r4, #16]
  40d4ce:	b1a8      	cbz	r0, 40d4fc <__swsetup_r+0x4c>
  40d4d0:	f013 0201 	ands.w	r2, r3, #1
  40d4d4:	d01e      	beq.n	40d514 <__swsetup_r+0x64>
  40d4d6:	6963      	ldr	r3, [r4, #20]
  40d4d8:	2200      	movs	r2, #0
  40d4da:	425b      	negs	r3, r3
  40d4dc:	61a3      	str	r3, [r4, #24]
  40d4de:	60a2      	str	r2, [r4, #8]
  40d4e0:	b1f0      	cbz	r0, 40d520 <__swsetup_r+0x70>
  40d4e2:	2000      	movs	r0, #0
  40d4e4:	bd38      	pop	{r3, r4, r5, pc}
  40d4e6:	06d9      	lsls	r1, r3, #27
  40d4e8:	d53c      	bpl.n	40d564 <__swsetup_r+0xb4>
  40d4ea:	0758      	lsls	r0, r3, #29
  40d4ec:	d426      	bmi.n	40d53c <__swsetup_r+0x8c>
  40d4ee:	6920      	ldr	r0, [r4, #16]
  40d4f0:	f042 0308 	orr.w	r3, r2, #8
  40d4f4:	81a3      	strh	r3, [r4, #12]
  40d4f6:	b29b      	uxth	r3, r3
  40d4f8:	2800      	cmp	r0, #0
  40d4fa:	d1e9      	bne.n	40d4d0 <__swsetup_r+0x20>
  40d4fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40d500:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40d504:	d0e4      	beq.n	40d4d0 <__swsetup_r+0x20>
  40d506:	4628      	mov	r0, r5
  40d508:	4621      	mov	r1, r4
  40d50a:	f002 f88d 	bl	40f628 <__smakebuf_r>
  40d50e:	89a3      	ldrh	r3, [r4, #12]
  40d510:	6920      	ldr	r0, [r4, #16]
  40d512:	e7dd      	b.n	40d4d0 <__swsetup_r+0x20>
  40d514:	0799      	lsls	r1, r3, #30
  40d516:	bf58      	it	pl
  40d518:	6962      	ldrpl	r2, [r4, #20]
  40d51a:	60a2      	str	r2, [r4, #8]
  40d51c:	2800      	cmp	r0, #0
  40d51e:	d1e0      	bne.n	40d4e2 <__swsetup_r+0x32>
  40d520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d524:	061a      	lsls	r2, r3, #24
  40d526:	d5dd      	bpl.n	40d4e4 <__swsetup_r+0x34>
  40d528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d52c:	81a3      	strh	r3, [r4, #12]
  40d52e:	f04f 30ff 	mov.w	r0, #4294967295
  40d532:	bd38      	pop	{r3, r4, r5, pc}
  40d534:	4618      	mov	r0, r3
  40d536:	f001 f927 	bl	40e788 <__sinit>
  40d53a:	e7c2      	b.n	40d4c2 <__swsetup_r+0x12>
  40d53c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d53e:	b151      	cbz	r1, 40d556 <__swsetup_r+0xa6>
  40d540:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d544:	4299      	cmp	r1, r3
  40d546:	d004      	beq.n	40d552 <__swsetup_r+0xa2>
  40d548:	4628      	mov	r0, r5
  40d54a:	f001 f9e7 	bl	40e91c <_free_r>
  40d54e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d552:	2300      	movs	r3, #0
  40d554:	6323      	str	r3, [r4, #48]	; 0x30
  40d556:	2300      	movs	r3, #0
  40d558:	6920      	ldr	r0, [r4, #16]
  40d55a:	6063      	str	r3, [r4, #4]
  40d55c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40d560:	6020      	str	r0, [r4, #0]
  40d562:	e7c5      	b.n	40d4f0 <__swsetup_r+0x40>
  40d564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40d568:	2309      	movs	r3, #9
  40d56a:	602b      	str	r3, [r5, #0]
  40d56c:	f04f 30ff 	mov.w	r0, #4294967295
  40d570:	81a2      	strh	r2, [r4, #12]
  40d572:	bd38      	pop	{r3, r4, r5, pc}
  40d574:	20000458 	.word	0x20000458

0040d578 <register_fini>:
  40d578:	4b02      	ldr	r3, [pc, #8]	; (40d584 <register_fini+0xc>)
  40d57a:	b113      	cbz	r3, 40d582 <register_fini+0xa>
  40d57c:	4802      	ldr	r0, [pc, #8]	; (40d588 <register_fini+0x10>)
  40d57e:	f000 b805 	b.w	40d58c <atexit>
  40d582:	4770      	bx	lr
  40d584:	00000000 	.word	0x00000000
  40d588:	0040e79d 	.word	0x0040e79d

0040d58c <atexit>:
  40d58c:	2300      	movs	r3, #0
  40d58e:	4601      	mov	r1, r0
  40d590:	461a      	mov	r2, r3
  40d592:	4618      	mov	r0, r3
  40d594:	f003 b930 	b.w	4107f8 <__register_exitproc>

0040d598 <quorem>:
  40d598:	6902      	ldr	r2, [r0, #16]
  40d59a:	690b      	ldr	r3, [r1, #16]
  40d59c:	4293      	cmp	r3, r2
  40d59e:	f300 808d 	bgt.w	40d6bc <quorem+0x124>
  40d5a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d5a6:	f103 38ff 	add.w	r8, r3, #4294967295
  40d5aa:	f101 0714 	add.w	r7, r1, #20
  40d5ae:	f100 0b14 	add.w	fp, r0, #20
  40d5b2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40d5b6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40d5ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40d5be:	b083      	sub	sp, #12
  40d5c0:	3201      	adds	r2, #1
  40d5c2:	fbb3 f9f2 	udiv	r9, r3, r2
  40d5c6:	eb0b 0304 	add.w	r3, fp, r4
  40d5ca:	9400      	str	r4, [sp, #0]
  40d5cc:	eb07 0a04 	add.w	sl, r7, r4
  40d5d0:	9301      	str	r3, [sp, #4]
  40d5d2:	f1b9 0f00 	cmp.w	r9, #0
  40d5d6:	d039      	beq.n	40d64c <quorem+0xb4>
  40d5d8:	2500      	movs	r5, #0
  40d5da:	46bc      	mov	ip, r7
  40d5dc:	46de      	mov	lr, fp
  40d5de:	462b      	mov	r3, r5
  40d5e0:	f85c 6b04 	ldr.w	r6, [ip], #4
  40d5e4:	f8de 2000 	ldr.w	r2, [lr]
  40d5e8:	b2b4      	uxth	r4, r6
  40d5ea:	fb09 5504 	mla	r5, r9, r4, r5
  40d5ee:	0c36      	lsrs	r6, r6, #16
  40d5f0:	0c2c      	lsrs	r4, r5, #16
  40d5f2:	fb09 4406 	mla	r4, r9, r6, r4
  40d5f6:	b2ad      	uxth	r5, r5
  40d5f8:	1b5b      	subs	r3, r3, r5
  40d5fa:	b2a6      	uxth	r6, r4
  40d5fc:	fa13 f382 	uxtah	r3, r3, r2
  40d600:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40d604:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40d608:	b29b      	uxth	r3, r3
  40d60a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40d60e:	45e2      	cmp	sl, ip
  40d610:	f84e 3b04 	str.w	r3, [lr], #4
  40d614:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40d618:	ea4f 4326 	mov.w	r3, r6, asr #16
  40d61c:	d2e0      	bcs.n	40d5e0 <quorem+0x48>
  40d61e:	9b00      	ldr	r3, [sp, #0]
  40d620:	f85b 3003 	ldr.w	r3, [fp, r3]
  40d624:	b993      	cbnz	r3, 40d64c <quorem+0xb4>
  40d626:	9c01      	ldr	r4, [sp, #4]
  40d628:	1f23      	subs	r3, r4, #4
  40d62a:	459b      	cmp	fp, r3
  40d62c:	d20c      	bcs.n	40d648 <quorem+0xb0>
  40d62e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40d632:	b94b      	cbnz	r3, 40d648 <quorem+0xb0>
  40d634:	f1a4 0308 	sub.w	r3, r4, #8
  40d638:	e002      	b.n	40d640 <quorem+0xa8>
  40d63a:	681a      	ldr	r2, [r3, #0]
  40d63c:	3b04      	subs	r3, #4
  40d63e:	b91a      	cbnz	r2, 40d648 <quorem+0xb0>
  40d640:	459b      	cmp	fp, r3
  40d642:	f108 38ff 	add.w	r8, r8, #4294967295
  40d646:	d3f8      	bcc.n	40d63a <quorem+0xa2>
  40d648:	f8c0 8010 	str.w	r8, [r0, #16]
  40d64c:	4604      	mov	r4, r0
  40d64e:	f002 fb69 	bl	40fd24 <__mcmp>
  40d652:	2800      	cmp	r0, #0
  40d654:	db2e      	blt.n	40d6b4 <quorem+0x11c>
  40d656:	f109 0901 	add.w	r9, r9, #1
  40d65a:	465d      	mov	r5, fp
  40d65c:	2300      	movs	r3, #0
  40d65e:	f857 1b04 	ldr.w	r1, [r7], #4
  40d662:	6828      	ldr	r0, [r5, #0]
  40d664:	b28a      	uxth	r2, r1
  40d666:	1a9a      	subs	r2, r3, r2
  40d668:	0c09      	lsrs	r1, r1, #16
  40d66a:	fa12 f280 	uxtah	r2, r2, r0
  40d66e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40d672:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d676:	b291      	uxth	r1, r2
  40d678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40d67c:	45ba      	cmp	sl, r7
  40d67e:	f845 1b04 	str.w	r1, [r5], #4
  40d682:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d686:	d2ea      	bcs.n	40d65e <quorem+0xc6>
  40d688:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40d68c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40d690:	b982      	cbnz	r2, 40d6b4 <quorem+0x11c>
  40d692:	1f1a      	subs	r2, r3, #4
  40d694:	4593      	cmp	fp, r2
  40d696:	d20b      	bcs.n	40d6b0 <quorem+0x118>
  40d698:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40d69c:	b942      	cbnz	r2, 40d6b0 <quorem+0x118>
  40d69e:	3b08      	subs	r3, #8
  40d6a0:	e002      	b.n	40d6a8 <quorem+0x110>
  40d6a2:	681a      	ldr	r2, [r3, #0]
  40d6a4:	3b04      	subs	r3, #4
  40d6a6:	b91a      	cbnz	r2, 40d6b0 <quorem+0x118>
  40d6a8:	459b      	cmp	fp, r3
  40d6aa:	f108 38ff 	add.w	r8, r8, #4294967295
  40d6ae:	d3f8      	bcc.n	40d6a2 <quorem+0x10a>
  40d6b0:	f8c4 8010 	str.w	r8, [r4, #16]
  40d6b4:	4648      	mov	r0, r9
  40d6b6:	b003      	add	sp, #12
  40d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d6bc:	2000      	movs	r0, #0
  40d6be:	4770      	bx	lr

0040d6c0 <_dtoa_r>:
  40d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d6c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40d6c6:	b097      	sub	sp, #92	; 0x5c
  40d6c8:	4681      	mov	r9, r0
  40d6ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40d6cc:	4692      	mov	sl, r2
  40d6ce:	469b      	mov	fp, r3
  40d6d0:	b149      	cbz	r1, 40d6e6 <_dtoa_r+0x26>
  40d6d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40d6d4:	604a      	str	r2, [r1, #4]
  40d6d6:	2301      	movs	r3, #1
  40d6d8:	4093      	lsls	r3, r2
  40d6da:	608b      	str	r3, [r1, #8]
  40d6dc:	f002 f8f4 	bl	40f8c8 <_Bfree>
  40d6e0:	2300      	movs	r3, #0
  40d6e2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40d6e6:	f1bb 0f00 	cmp.w	fp, #0
  40d6ea:	46d8      	mov	r8, fp
  40d6ec:	db33      	blt.n	40d756 <_dtoa_r+0x96>
  40d6ee:	2300      	movs	r3, #0
  40d6f0:	6023      	str	r3, [r4, #0]
  40d6f2:	4ba5      	ldr	r3, [pc, #660]	; (40d988 <_dtoa_r+0x2c8>)
  40d6f4:	461a      	mov	r2, r3
  40d6f6:	ea08 0303 	and.w	r3, r8, r3
  40d6fa:	4293      	cmp	r3, r2
  40d6fc:	d014      	beq.n	40d728 <_dtoa_r+0x68>
  40d6fe:	4650      	mov	r0, sl
  40d700:	4659      	mov	r1, fp
  40d702:	2200      	movs	r2, #0
  40d704:	2300      	movs	r3, #0
  40d706:	f7fa fda9 	bl	40825c <__aeabi_dcmpeq>
  40d70a:	4605      	mov	r5, r0
  40d70c:	b348      	cbz	r0, 40d762 <_dtoa_r+0xa2>
  40d70e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d710:	2301      	movs	r3, #1
  40d712:	6013      	str	r3, [r2, #0]
  40d714:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d716:	2b00      	cmp	r3, #0
  40d718:	f000 80c5 	beq.w	40d8a6 <_dtoa_r+0x1e6>
  40d71c:	489b      	ldr	r0, [pc, #620]	; (40d98c <_dtoa_r+0x2cc>)
  40d71e:	6018      	str	r0, [r3, #0]
  40d720:	3801      	subs	r0, #1
  40d722:	b017      	add	sp, #92	; 0x5c
  40d724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d728:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d72a:	f242 730f 	movw	r3, #9999	; 0x270f
  40d72e:	6013      	str	r3, [r2, #0]
  40d730:	f1ba 0f00 	cmp.w	sl, #0
  40d734:	f000 80a2 	beq.w	40d87c <_dtoa_r+0x1bc>
  40d738:	4895      	ldr	r0, [pc, #596]	; (40d990 <_dtoa_r+0x2d0>)
  40d73a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d73c:	2b00      	cmp	r3, #0
  40d73e:	d0f0      	beq.n	40d722 <_dtoa_r+0x62>
  40d740:	78c3      	ldrb	r3, [r0, #3]
  40d742:	2b00      	cmp	r3, #0
  40d744:	f000 80b1 	beq.w	40d8aa <_dtoa_r+0x1ea>
  40d748:	f100 0308 	add.w	r3, r0, #8
  40d74c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d74e:	6013      	str	r3, [r2, #0]
  40d750:	b017      	add	sp, #92	; 0x5c
  40d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d756:	2301      	movs	r3, #1
  40d758:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40d75c:	6023      	str	r3, [r4, #0]
  40d75e:	46c3      	mov	fp, r8
  40d760:	e7c7      	b.n	40d6f2 <_dtoa_r+0x32>
  40d762:	aa14      	add	r2, sp, #80	; 0x50
  40d764:	ab15      	add	r3, sp, #84	; 0x54
  40d766:	9201      	str	r2, [sp, #4]
  40d768:	9300      	str	r3, [sp, #0]
  40d76a:	4652      	mov	r2, sl
  40d76c:	465b      	mov	r3, fp
  40d76e:	4648      	mov	r0, r9
  40d770:	f002 fc0e 	bl	40ff90 <__d2b>
  40d774:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40d778:	9008      	str	r0, [sp, #32]
  40d77a:	f040 8088 	bne.w	40d88e <_dtoa_r+0x1ce>
  40d77e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d780:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40d782:	442c      	add	r4, r5
  40d784:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40d788:	2b20      	cmp	r3, #32
  40d78a:	f340 8291 	ble.w	40dcb0 <_dtoa_r+0x5f0>
  40d78e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40d792:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40d796:	fa08 f803 	lsl.w	r8, r8, r3
  40d79a:	fa2a f000 	lsr.w	r0, sl, r0
  40d79e:	ea40 0008 	orr.w	r0, r0, r8
  40d7a2:	f7fa fa7d 	bl	407ca0 <__aeabi_ui2d>
  40d7a6:	2301      	movs	r3, #1
  40d7a8:	3c01      	subs	r4, #1
  40d7aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40d7ae:	9310      	str	r3, [sp, #64]	; 0x40
  40d7b0:	2200      	movs	r2, #0
  40d7b2:	4b78      	ldr	r3, [pc, #480]	; (40d994 <_dtoa_r+0x2d4>)
  40d7b4:	f7fa f936 	bl	407a24 <__aeabi_dsub>
  40d7b8:	a36d      	add	r3, pc, #436	; (adr r3, 40d970 <_dtoa_r+0x2b0>)
  40d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d7be:	f7fa fae5 	bl	407d8c <__aeabi_dmul>
  40d7c2:	a36d      	add	r3, pc, #436	; (adr r3, 40d978 <_dtoa_r+0x2b8>)
  40d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d7c8:	f7fa f92e 	bl	407a28 <__adddf3>
  40d7cc:	4606      	mov	r6, r0
  40d7ce:	4620      	mov	r0, r4
  40d7d0:	460f      	mov	r7, r1
  40d7d2:	f7fa fa75 	bl	407cc0 <__aeabi_i2d>
  40d7d6:	a36a      	add	r3, pc, #424	; (adr r3, 40d980 <_dtoa_r+0x2c0>)
  40d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d7dc:	f7fa fad6 	bl	407d8c <__aeabi_dmul>
  40d7e0:	4602      	mov	r2, r0
  40d7e2:	460b      	mov	r3, r1
  40d7e4:	4630      	mov	r0, r6
  40d7e6:	4639      	mov	r1, r7
  40d7e8:	f7fa f91e 	bl	407a28 <__adddf3>
  40d7ec:	4606      	mov	r6, r0
  40d7ee:	460f      	mov	r7, r1
  40d7f0:	f003 f92a 	bl	410a48 <__aeabi_d2iz>
  40d7f4:	2200      	movs	r2, #0
  40d7f6:	9004      	str	r0, [sp, #16]
  40d7f8:	2300      	movs	r3, #0
  40d7fa:	4630      	mov	r0, r6
  40d7fc:	4639      	mov	r1, r7
  40d7fe:	f7fa fd37 	bl	408270 <__aeabi_dcmplt>
  40d802:	2800      	cmp	r0, #0
  40d804:	f040 8230 	bne.w	40dc68 <_dtoa_r+0x5a8>
  40d808:	9e04      	ldr	r6, [sp, #16]
  40d80a:	2e16      	cmp	r6, #22
  40d80c:	f200 8229 	bhi.w	40dc62 <_dtoa_r+0x5a2>
  40d810:	4b61      	ldr	r3, [pc, #388]	; (40d998 <_dtoa_r+0x2d8>)
  40d812:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40d816:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d81a:	4652      	mov	r2, sl
  40d81c:	465b      	mov	r3, fp
  40d81e:	f7fa fd45 	bl	4082ac <__aeabi_dcmpgt>
  40d822:	2800      	cmp	r0, #0
  40d824:	f000 8249 	beq.w	40dcba <_dtoa_r+0x5fa>
  40d828:	1e73      	subs	r3, r6, #1
  40d82a:	9304      	str	r3, [sp, #16]
  40d82c:	2300      	movs	r3, #0
  40d82e:	930c      	str	r3, [sp, #48]	; 0x30
  40d830:	1b2c      	subs	r4, r5, r4
  40d832:	1e63      	subs	r3, r4, #1
  40d834:	9302      	str	r3, [sp, #8]
  40d836:	f100 8232 	bmi.w	40dc9e <_dtoa_r+0x5de>
  40d83a:	2300      	movs	r3, #0
  40d83c:	9305      	str	r3, [sp, #20]
  40d83e:	9b04      	ldr	r3, [sp, #16]
  40d840:	2b00      	cmp	r3, #0
  40d842:	f2c0 8223 	blt.w	40dc8c <_dtoa_r+0x5cc>
  40d846:	9a02      	ldr	r2, [sp, #8]
  40d848:	930b      	str	r3, [sp, #44]	; 0x2c
  40d84a:	4611      	mov	r1, r2
  40d84c:	4419      	add	r1, r3
  40d84e:	2300      	movs	r3, #0
  40d850:	9102      	str	r1, [sp, #8]
  40d852:	930a      	str	r3, [sp, #40]	; 0x28
  40d854:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d856:	2b09      	cmp	r3, #9
  40d858:	d829      	bhi.n	40d8ae <_dtoa_r+0x1ee>
  40d85a:	2b05      	cmp	r3, #5
  40d85c:	f340 8658 	ble.w	40e510 <_dtoa_r+0xe50>
  40d860:	3b04      	subs	r3, #4
  40d862:	9320      	str	r3, [sp, #128]	; 0x80
  40d864:	2500      	movs	r5, #0
  40d866:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d868:	3b02      	subs	r3, #2
  40d86a:	2b03      	cmp	r3, #3
  40d86c:	f200 8635 	bhi.w	40e4da <_dtoa_r+0xe1a>
  40d870:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d874:	0228032c 	.word	0x0228032c
  40d878:	04590337 	.word	0x04590337
  40d87c:	4b44      	ldr	r3, [pc, #272]	; (40d990 <_dtoa_r+0x2d0>)
  40d87e:	4a47      	ldr	r2, [pc, #284]	; (40d99c <_dtoa_r+0x2dc>)
  40d880:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40d884:	2800      	cmp	r0, #0
  40d886:	bf14      	ite	ne
  40d888:	4618      	movne	r0, r3
  40d88a:	4610      	moveq	r0, r2
  40d88c:	e755      	b.n	40d73a <_dtoa_r+0x7a>
  40d88e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40d892:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40d896:	9510      	str	r5, [sp, #64]	; 0x40
  40d898:	4650      	mov	r0, sl
  40d89a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40d89e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40d8a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d8a4:	e784      	b.n	40d7b0 <_dtoa_r+0xf0>
  40d8a6:	483e      	ldr	r0, [pc, #248]	; (40d9a0 <_dtoa_r+0x2e0>)
  40d8a8:	e73b      	b.n	40d722 <_dtoa_r+0x62>
  40d8aa:	1cc3      	adds	r3, r0, #3
  40d8ac:	e74e      	b.n	40d74c <_dtoa_r+0x8c>
  40d8ae:	2100      	movs	r1, #0
  40d8b0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40d8b4:	4648      	mov	r0, r9
  40d8b6:	9120      	str	r1, [sp, #128]	; 0x80
  40d8b8:	f001 ffe0 	bl	40f87c <_Balloc>
  40d8bc:	f04f 33ff 	mov.w	r3, #4294967295
  40d8c0:	9306      	str	r3, [sp, #24]
  40d8c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d8c4:	930d      	str	r3, [sp, #52]	; 0x34
  40d8c6:	2301      	movs	r3, #1
  40d8c8:	9007      	str	r0, [sp, #28]
  40d8ca:	9221      	str	r2, [sp, #132]	; 0x84
  40d8cc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40d8d0:	9309      	str	r3, [sp, #36]	; 0x24
  40d8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d8d4:	2b00      	cmp	r3, #0
  40d8d6:	f2c0 80d1 	blt.w	40da7c <_dtoa_r+0x3bc>
  40d8da:	9a04      	ldr	r2, [sp, #16]
  40d8dc:	2a0e      	cmp	r2, #14
  40d8de:	f300 80cd 	bgt.w	40da7c <_dtoa_r+0x3bc>
  40d8e2:	4b2d      	ldr	r3, [pc, #180]	; (40d998 <_dtoa_r+0x2d8>)
  40d8e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d8e8:	e9d3 3400 	ldrd	r3, r4, [r3]
  40d8ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40d8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d8f2:	2b00      	cmp	r3, #0
  40d8f4:	f2c0 8300 	blt.w	40def8 <_dtoa_r+0x838>
  40d8f8:	4656      	mov	r6, sl
  40d8fa:	465f      	mov	r7, fp
  40d8fc:	4650      	mov	r0, sl
  40d8fe:	4659      	mov	r1, fp
  40d900:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40d904:	4652      	mov	r2, sl
  40d906:	465b      	mov	r3, fp
  40d908:	f7fa fb6a 	bl	407fe0 <__aeabi_ddiv>
  40d90c:	f003 f89c 	bl	410a48 <__aeabi_d2iz>
  40d910:	4604      	mov	r4, r0
  40d912:	f7fa f9d5 	bl	407cc0 <__aeabi_i2d>
  40d916:	4652      	mov	r2, sl
  40d918:	465b      	mov	r3, fp
  40d91a:	f7fa fa37 	bl	407d8c <__aeabi_dmul>
  40d91e:	460b      	mov	r3, r1
  40d920:	4602      	mov	r2, r0
  40d922:	4639      	mov	r1, r7
  40d924:	4630      	mov	r0, r6
  40d926:	f7fa f87d 	bl	407a24 <__aeabi_dsub>
  40d92a:	9d07      	ldr	r5, [sp, #28]
  40d92c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40d930:	702b      	strb	r3, [r5, #0]
  40d932:	9b06      	ldr	r3, [sp, #24]
  40d934:	2b01      	cmp	r3, #1
  40d936:	4606      	mov	r6, r0
  40d938:	460f      	mov	r7, r1
  40d93a:	f105 0501 	add.w	r5, r5, #1
  40d93e:	d062      	beq.n	40da06 <_dtoa_r+0x346>
  40d940:	2200      	movs	r2, #0
  40d942:	4b18      	ldr	r3, [pc, #96]	; (40d9a4 <_dtoa_r+0x2e4>)
  40d944:	f7fa fa22 	bl	407d8c <__aeabi_dmul>
  40d948:	2200      	movs	r2, #0
  40d94a:	2300      	movs	r3, #0
  40d94c:	4606      	mov	r6, r0
  40d94e:	460f      	mov	r7, r1
  40d950:	f7fa fc84 	bl	40825c <__aeabi_dcmpeq>
  40d954:	2800      	cmp	r0, #0
  40d956:	d17e      	bne.n	40da56 <_dtoa_r+0x396>
  40d958:	f8cd 9014 	str.w	r9, [sp, #20]
  40d95c:	f8dd a018 	ldr.w	sl, [sp, #24]
  40d960:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d964:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40d968:	e029      	b.n	40d9be <_dtoa_r+0x2fe>
  40d96a:	bf00      	nop
  40d96c:	f3af 8000 	nop.w
  40d970:	636f4361 	.word	0x636f4361
  40d974:	3fd287a7 	.word	0x3fd287a7
  40d978:	8b60c8b3 	.word	0x8b60c8b3
  40d97c:	3fc68a28 	.word	0x3fc68a28
  40d980:	509f79fb 	.word	0x509f79fb
  40d984:	3fd34413 	.word	0x3fd34413
  40d988:	7ff00000 	.word	0x7ff00000
  40d98c:	00412d8d 	.word	0x00412d8d
  40d990:	00412ed0 	.word	0x00412ed0
  40d994:	3ff80000 	.word	0x3ff80000
  40d998:	00412fe0 	.word	0x00412fe0
  40d99c:	00412ec4 	.word	0x00412ec4
  40d9a0:	00412d8c 	.word	0x00412d8c
  40d9a4:	40240000 	.word	0x40240000
  40d9a8:	f7fa f9f0 	bl	407d8c <__aeabi_dmul>
  40d9ac:	2200      	movs	r2, #0
  40d9ae:	2300      	movs	r3, #0
  40d9b0:	4606      	mov	r6, r0
  40d9b2:	460f      	mov	r7, r1
  40d9b4:	f7fa fc52 	bl	40825c <__aeabi_dcmpeq>
  40d9b8:	2800      	cmp	r0, #0
  40d9ba:	f040 83b7 	bne.w	40e12c <_dtoa_r+0xa6c>
  40d9be:	4642      	mov	r2, r8
  40d9c0:	464b      	mov	r3, r9
  40d9c2:	4630      	mov	r0, r6
  40d9c4:	4639      	mov	r1, r7
  40d9c6:	f7fa fb0b 	bl	407fe0 <__aeabi_ddiv>
  40d9ca:	f003 f83d 	bl	410a48 <__aeabi_d2iz>
  40d9ce:	4604      	mov	r4, r0
  40d9d0:	f7fa f976 	bl	407cc0 <__aeabi_i2d>
  40d9d4:	4642      	mov	r2, r8
  40d9d6:	464b      	mov	r3, r9
  40d9d8:	f7fa f9d8 	bl	407d8c <__aeabi_dmul>
  40d9dc:	4602      	mov	r2, r0
  40d9de:	460b      	mov	r3, r1
  40d9e0:	4630      	mov	r0, r6
  40d9e2:	4639      	mov	r1, r7
  40d9e4:	f7fa f81e 	bl	407a24 <__aeabi_dsub>
  40d9e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40d9ec:	f805 eb01 	strb.w	lr, [r5], #1
  40d9f0:	ebcb 0e05 	rsb	lr, fp, r5
  40d9f4:	45d6      	cmp	lr, sl
  40d9f6:	4606      	mov	r6, r0
  40d9f8:	460f      	mov	r7, r1
  40d9fa:	f04f 0200 	mov.w	r2, #0
  40d9fe:	4bb0      	ldr	r3, [pc, #704]	; (40dcc0 <_dtoa_r+0x600>)
  40da00:	d1d2      	bne.n	40d9a8 <_dtoa_r+0x2e8>
  40da02:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40da06:	4632      	mov	r2, r6
  40da08:	463b      	mov	r3, r7
  40da0a:	4630      	mov	r0, r6
  40da0c:	4639      	mov	r1, r7
  40da0e:	f7fa f80b 	bl	407a28 <__adddf3>
  40da12:	4606      	mov	r6, r0
  40da14:	460f      	mov	r7, r1
  40da16:	4602      	mov	r2, r0
  40da18:	460b      	mov	r3, r1
  40da1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40da1e:	f7fa fc27 	bl	408270 <__aeabi_dcmplt>
  40da22:	b940      	cbnz	r0, 40da36 <_dtoa_r+0x376>
  40da24:	4632      	mov	r2, r6
  40da26:	463b      	mov	r3, r7
  40da28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40da2c:	f7fa fc16 	bl	40825c <__aeabi_dcmpeq>
  40da30:	b188      	cbz	r0, 40da56 <_dtoa_r+0x396>
  40da32:	07e3      	lsls	r3, r4, #31
  40da34:	d50f      	bpl.n	40da56 <_dtoa_r+0x396>
  40da36:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40da3a:	9a07      	ldr	r2, [sp, #28]
  40da3c:	1e6b      	subs	r3, r5, #1
  40da3e:	e004      	b.n	40da4a <_dtoa_r+0x38a>
  40da40:	429a      	cmp	r2, r3
  40da42:	f000 842c 	beq.w	40e29e <_dtoa_r+0xbde>
  40da46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40da4a:	2c39      	cmp	r4, #57	; 0x39
  40da4c:	f103 0501 	add.w	r5, r3, #1
  40da50:	d0f6      	beq.n	40da40 <_dtoa_r+0x380>
  40da52:	3401      	adds	r4, #1
  40da54:	701c      	strb	r4, [r3, #0]
  40da56:	9908      	ldr	r1, [sp, #32]
  40da58:	4648      	mov	r0, r9
  40da5a:	f001 ff35 	bl	40f8c8 <_Bfree>
  40da5e:	2200      	movs	r2, #0
  40da60:	9b04      	ldr	r3, [sp, #16]
  40da62:	702a      	strb	r2, [r5, #0]
  40da64:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40da66:	3301      	adds	r3, #1
  40da68:	6013      	str	r3, [r2, #0]
  40da6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40da6c:	2b00      	cmp	r3, #0
  40da6e:	f000 83a7 	beq.w	40e1c0 <_dtoa_r+0xb00>
  40da72:	9807      	ldr	r0, [sp, #28]
  40da74:	601d      	str	r5, [r3, #0]
  40da76:	b017      	add	sp, #92	; 0x5c
  40da78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40da7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40da7e:	2a00      	cmp	r2, #0
  40da80:	f000 8112 	beq.w	40dca8 <_dtoa_r+0x5e8>
  40da84:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40da86:	2a01      	cmp	r2, #1
  40da88:	f340 8258 	ble.w	40df3c <_dtoa_r+0x87c>
  40da8c:	9b06      	ldr	r3, [sp, #24]
  40da8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40da90:	1e5f      	subs	r7, r3, #1
  40da92:	42ba      	cmp	r2, r7
  40da94:	f2c0 8397 	blt.w	40e1c6 <_dtoa_r+0xb06>
  40da98:	1bd7      	subs	r7, r2, r7
  40da9a:	9b06      	ldr	r3, [sp, #24]
  40da9c:	2b00      	cmp	r3, #0
  40da9e:	f2c0 848a 	blt.w	40e3b6 <_dtoa_r+0xcf6>
  40daa2:	9d05      	ldr	r5, [sp, #20]
  40daa4:	9b06      	ldr	r3, [sp, #24]
  40daa6:	9a05      	ldr	r2, [sp, #20]
  40daa8:	441a      	add	r2, r3
  40daaa:	9205      	str	r2, [sp, #20]
  40daac:	9a02      	ldr	r2, [sp, #8]
  40daae:	2101      	movs	r1, #1
  40dab0:	441a      	add	r2, r3
  40dab2:	4648      	mov	r0, r9
  40dab4:	9202      	str	r2, [sp, #8]
  40dab6:	f001 ffeb 	bl	40fa90 <__i2b>
  40daba:	4606      	mov	r6, r0
  40dabc:	b165      	cbz	r5, 40dad8 <_dtoa_r+0x418>
  40dabe:	9902      	ldr	r1, [sp, #8]
  40dac0:	2900      	cmp	r1, #0
  40dac2:	460b      	mov	r3, r1
  40dac4:	dd08      	ble.n	40dad8 <_dtoa_r+0x418>
  40dac6:	42a9      	cmp	r1, r5
  40dac8:	9a05      	ldr	r2, [sp, #20]
  40daca:	bfa8      	it	ge
  40dacc:	462b      	movge	r3, r5
  40dace:	1ad2      	subs	r2, r2, r3
  40dad0:	1aed      	subs	r5, r5, r3
  40dad2:	1acb      	subs	r3, r1, r3
  40dad4:	9205      	str	r2, [sp, #20]
  40dad6:	9302      	str	r3, [sp, #8]
  40dad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40dada:	2b00      	cmp	r3, #0
  40dadc:	f340 82fc 	ble.w	40e0d8 <_dtoa_r+0xa18>
  40dae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dae2:	2a00      	cmp	r2, #0
  40dae4:	f000 8201 	beq.w	40deea <_dtoa_r+0x82a>
  40dae8:	2f00      	cmp	r7, #0
  40daea:	f000 81fe 	beq.w	40deea <_dtoa_r+0x82a>
  40daee:	4631      	mov	r1, r6
  40daf0:	463a      	mov	r2, r7
  40daf2:	4648      	mov	r0, r9
  40daf4:	f002 f86e 	bl	40fbd4 <__pow5mult>
  40daf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40dafc:	4601      	mov	r1, r0
  40dafe:	4642      	mov	r2, r8
  40db00:	4606      	mov	r6, r0
  40db02:	4648      	mov	r0, r9
  40db04:	f001 ffce 	bl	40faa4 <__multiply>
  40db08:	4641      	mov	r1, r8
  40db0a:	4604      	mov	r4, r0
  40db0c:	4648      	mov	r0, r9
  40db0e:	f001 fedb 	bl	40f8c8 <_Bfree>
  40db12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40db14:	1bdb      	subs	r3, r3, r7
  40db16:	930a      	str	r3, [sp, #40]	; 0x28
  40db18:	f040 81e6 	bne.w	40dee8 <_dtoa_r+0x828>
  40db1c:	2101      	movs	r1, #1
  40db1e:	4648      	mov	r0, r9
  40db20:	f001 ffb6 	bl	40fa90 <__i2b>
  40db24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40db26:	4680      	mov	r8, r0
  40db28:	2b00      	cmp	r3, #0
  40db2a:	f000 8219 	beq.w	40df60 <_dtoa_r+0x8a0>
  40db2e:	4601      	mov	r1, r0
  40db30:	461a      	mov	r2, r3
  40db32:	4648      	mov	r0, r9
  40db34:	f002 f84e 	bl	40fbd4 <__pow5mult>
  40db38:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40db3a:	2b01      	cmp	r3, #1
  40db3c:	4680      	mov	r8, r0
  40db3e:	f340 82f8 	ble.w	40e132 <_dtoa_r+0xa72>
  40db42:	2700      	movs	r7, #0
  40db44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40db48:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40db4c:	6918      	ldr	r0, [r3, #16]
  40db4e:	f001 ff51 	bl	40f9f4 <__hi0bits>
  40db52:	f1c0 0020 	rsb	r0, r0, #32
  40db56:	9a02      	ldr	r2, [sp, #8]
  40db58:	4410      	add	r0, r2
  40db5a:	f010 001f 	ands.w	r0, r0, #31
  40db5e:	f000 81f6 	beq.w	40df4e <_dtoa_r+0x88e>
  40db62:	f1c0 0320 	rsb	r3, r0, #32
  40db66:	2b04      	cmp	r3, #4
  40db68:	f340 84ca 	ble.w	40e500 <_dtoa_r+0xe40>
  40db6c:	9b05      	ldr	r3, [sp, #20]
  40db6e:	f1c0 001c 	rsb	r0, r0, #28
  40db72:	4403      	add	r3, r0
  40db74:	9305      	str	r3, [sp, #20]
  40db76:	4613      	mov	r3, r2
  40db78:	4403      	add	r3, r0
  40db7a:	4405      	add	r5, r0
  40db7c:	9302      	str	r3, [sp, #8]
  40db7e:	9b05      	ldr	r3, [sp, #20]
  40db80:	2b00      	cmp	r3, #0
  40db82:	dd05      	ble.n	40db90 <_dtoa_r+0x4d0>
  40db84:	4621      	mov	r1, r4
  40db86:	461a      	mov	r2, r3
  40db88:	4648      	mov	r0, r9
  40db8a:	f002 f873 	bl	40fc74 <__lshift>
  40db8e:	4604      	mov	r4, r0
  40db90:	9b02      	ldr	r3, [sp, #8]
  40db92:	2b00      	cmp	r3, #0
  40db94:	dd05      	ble.n	40dba2 <_dtoa_r+0x4e2>
  40db96:	4641      	mov	r1, r8
  40db98:	461a      	mov	r2, r3
  40db9a:	4648      	mov	r0, r9
  40db9c:	f002 f86a 	bl	40fc74 <__lshift>
  40dba0:	4680      	mov	r8, r0
  40dba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dba4:	2b00      	cmp	r3, #0
  40dba6:	f040 827c 	bne.w	40e0a2 <_dtoa_r+0x9e2>
  40dbaa:	9b06      	ldr	r3, [sp, #24]
  40dbac:	2b00      	cmp	r3, #0
  40dbae:	f340 8295 	ble.w	40e0dc <_dtoa_r+0xa1c>
  40dbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40dbb4:	2b00      	cmp	r3, #0
  40dbb6:	f040 81f5 	bne.w	40dfa4 <_dtoa_r+0x8e4>
  40dbba:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40dbbe:	9f06      	ldr	r7, [sp, #24]
  40dbc0:	465d      	mov	r5, fp
  40dbc2:	e002      	b.n	40dbca <_dtoa_r+0x50a>
  40dbc4:	f001 fe8a 	bl	40f8dc <__multadd>
  40dbc8:	4604      	mov	r4, r0
  40dbca:	4641      	mov	r1, r8
  40dbcc:	4620      	mov	r0, r4
  40dbce:	f7ff fce3 	bl	40d598 <quorem>
  40dbd2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40dbd6:	f805 ab01 	strb.w	sl, [r5], #1
  40dbda:	ebcb 0305 	rsb	r3, fp, r5
  40dbde:	42bb      	cmp	r3, r7
  40dbe0:	f04f 020a 	mov.w	r2, #10
  40dbe4:	f04f 0300 	mov.w	r3, #0
  40dbe8:	4621      	mov	r1, r4
  40dbea:	4648      	mov	r0, r9
  40dbec:	dbea      	blt.n	40dbc4 <_dtoa_r+0x504>
  40dbee:	9b07      	ldr	r3, [sp, #28]
  40dbf0:	9a06      	ldr	r2, [sp, #24]
  40dbf2:	2a01      	cmp	r2, #1
  40dbf4:	bfac      	ite	ge
  40dbf6:	189b      	addge	r3, r3, r2
  40dbf8:	3301      	addlt	r3, #1
  40dbfa:	461d      	mov	r5, r3
  40dbfc:	f04f 0b00 	mov.w	fp, #0
  40dc00:	4621      	mov	r1, r4
  40dc02:	2201      	movs	r2, #1
  40dc04:	4648      	mov	r0, r9
  40dc06:	f002 f835 	bl	40fc74 <__lshift>
  40dc0a:	4641      	mov	r1, r8
  40dc0c:	9008      	str	r0, [sp, #32]
  40dc0e:	f002 f889 	bl	40fd24 <__mcmp>
  40dc12:	2800      	cmp	r0, #0
  40dc14:	f340 830d 	ble.w	40e232 <_dtoa_r+0xb72>
  40dc18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40dc1c:	9907      	ldr	r1, [sp, #28]
  40dc1e:	1e6b      	subs	r3, r5, #1
  40dc20:	e004      	b.n	40dc2c <_dtoa_r+0x56c>
  40dc22:	428b      	cmp	r3, r1
  40dc24:	f000 8278 	beq.w	40e118 <_dtoa_r+0xa58>
  40dc28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40dc2c:	2a39      	cmp	r2, #57	; 0x39
  40dc2e:	f103 0501 	add.w	r5, r3, #1
  40dc32:	d0f6      	beq.n	40dc22 <_dtoa_r+0x562>
  40dc34:	3201      	adds	r2, #1
  40dc36:	701a      	strb	r2, [r3, #0]
  40dc38:	4641      	mov	r1, r8
  40dc3a:	4648      	mov	r0, r9
  40dc3c:	f001 fe44 	bl	40f8c8 <_Bfree>
  40dc40:	2e00      	cmp	r6, #0
  40dc42:	f43f af08 	beq.w	40da56 <_dtoa_r+0x396>
  40dc46:	f1bb 0f00 	cmp.w	fp, #0
  40dc4a:	d005      	beq.n	40dc58 <_dtoa_r+0x598>
  40dc4c:	45b3      	cmp	fp, r6
  40dc4e:	d003      	beq.n	40dc58 <_dtoa_r+0x598>
  40dc50:	4659      	mov	r1, fp
  40dc52:	4648      	mov	r0, r9
  40dc54:	f001 fe38 	bl	40f8c8 <_Bfree>
  40dc58:	4631      	mov	r1, r6
  40dc5a:	4648      	mov	r0, r9
  40dc5c:	f001 fe34 	bl	40f8c8 <_Bfree>
  40dc60:	e6f9      	b.n	40da56 <_dtoa_r+0x396>
  40dc62:	2301      	movs	r3, #1
  40dc64:	930c      	str	r3, [sp, #48]	; 0x30
  40dc66:	e5e3      	b.n	40d830 <_dtoa_r+0x170>
  40dc68:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40dc6c:	4640      	mov	r0, r8
  40dc6e:	f7fa f827 	bl	407cc0 <__aeabi_i2d>
  40dc72:	4602      	mov	r2, r0
  40dc74:	460b      	mov	r3, r1
  40dc76:	4630      	mov	r0, r6
  40dc78:	4639      	mov	r1, r7
  40dc7a:	f7fa faef 	bl	40825c <__aeabi_dcmpeq>
  40dc7e:	2800      	cmp	r0, #0
  40dc80:	f47f adc2 	bne.w	40d808 <_dtoa_r+0x148>
  40dc84:	f108 33ff 	add.w	r3, r8, #4294967295
  40dc88:	9304      	str	r3, [sp, #16]
  40dc8a:	e5bd      	b.n	40d808 <_dtoa_r+0x148>
  40dc8c:	9a05      	ldr	r2, [sp, #20]
  40dc8e:	9b04      	ldr	r3, [sp, #16]
  40dc90:	1ad2      	subs	r2, r2, r3
  40dc92:	425b      	negs	r3, r3
  40dc94:	930a      	str	r3, [sp, #40]	; 0x28
  40dc96:	2300      	movs	r3, #0
  40dc98:	9205      	str	r2, [sp, #20]
  40dc9a:	930b      	str	r3, [sp, #44]	; 0x2c
  40dc9c:	e5da      	b.n	40d854 <_dtoa_r+0x194>
  40dc9e:	425b      	negs	r3, r3
  40dca0:	9305      	str	r3, [sp, #20]
  40dca2:	2300      	movs	r3, #0
  40dca4:	9302      	str	r3, [sp, #8]
  40dca6:	e5ca      	b.n	40d83e <_dtoa_r+0x17e>
  40dca8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40dcaa:	9d05      	ldr	r5, [sp, #20]
  40dcac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40dcae:	e705      	b.n	40dabc <_dtoa_r+0x3fc>
  40dcb0:	f1c3 0820 	rsb	r8, r3, #32
  40dcb4:	fa0a f008 	lsl.w	r0, sl, r8
  40dcb8:	e573      	b.n	40d7a2 <_dtoa_r+0xe2>
  40dcba:	900c      	str	r0, [sp, #48]	; 0x30
  40dcbc:	e5b8      	b.n	40d830 <_dtoa_r+0x170>
  40dcbe:	bf00      	nop
  40dcc0:	40240000 	.word	0x40240000
  40dcc4:	2300      	movs	r3, #0
  40dcc6:	9309      	str	r3, [sp, #36]	; 0x24
  40dcc8:	9b04      	ldr	r3, [sp, #16]
  40dcca:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40dccc:	4413      	add	r3, r2
  40dcce:	930d      	str	r3, [sp, #52]	; 0x34
  40dcd0:	3301      	adds	r3, #1
  40dcd2:	2b00      	cmp	r3, #0
  40dcd4:	9306      	str	r3, [sp, #24]
  40dcd6:	f340 8283 	ble.w	40e1e0 <_dtoa_r+0xb20>
  40dcda:	9c06      	ldr	r4, [sp, #24]
  40dcdc:	4626      	mov	r6, r4
  40dcde:	2100      	movs	r1, #0
  40dce0:	2e17      	cmp	r6, #23
  40dce2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40dce6:	d90b      	bls.n	40dd00 <_dtoa_r+0x640>
  40dce8:	2201      	movs	r2, #1
  40dcea:	2304      	movs	r3, #4
  40dcec:	005b      	lsls	r3, r3, #1
  40dcee:	f103 0014 	add.w	r0, r3, #20
  40dcf2:	42b0      	cmp	r0, r6
  40dcf4:	4611      	mov	r1, r2
  40dcf6:	f102 0201 	add.w	r2, r2, #1
  40dcfa:	d9f7      	bls.n	40dcec <_dtoa_r+0x62c>
  40dcfc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40dd00:	4648      	mov	r0, r9
  40dd02:	f001 fdbb 	bl	40f87c <_Balloc>
  40dd06:	2c0e      	cmp	r4, #14
  40dd08:	9007      	str	r0, [sp, #28]
  40dd0a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40dd0e:	f63f ade0 	bhi.w	40d8d2 <_dtoa_r+0x212>
  40dd12:	2d00      	cmp	r5, #0
  40dd14:	f43f addd 	beq.w	40d8d2 <_dtoa_r+0x212>
  40dd18:	9904      	ldr	r1, [sp, #16]
  40dd1a:	4657      	mov	r7, sl
  40dd1c:	46d8      	mov	r8, fp
  40dd1e:	2900      	cmp	r1, #0
  40dd20:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40dd24:	f340 8292 	ble.w	40e24c <_dtoa_r+0xb8c>
  40dd28:	4b91      	ldr	r3, [pc, #580]	; (40df70 <_dtoa_r+0x8b0>)
  40dd2a:	f001 020f 	and.w	r2, r1, #15
  40dd2e:	110e      	asrs	r6, r1, #4
  40dd30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40dd34:	06f0      	lsls	r0, r6, #27
  40dd36:	e9d3 4500 	ldrd	r4, r5, [r3]
  40dd3a:	f140 824c 	bpl.w	40e1d6 <_dtoa_r+0xb16>
  40dd3e:	4b8d      	ldr	r3, [pc, #564]	; (40df74 <_dtoa_r+0x8b4>)
  40dd40:	4650      	mov	r0, sl
  40dd42:	4659      	mov	r1, fp
  40dd44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40dd48:	f7fa f94a 	bl	407fe0 <__aeabi_ddiv>
  40dd4c:	f006 060f 	and.w	r6, r6, #15
  40dd50:	4682      	mov	sl, r0
  40dd52:	468b      	mov	fp, r1
  40dd54:	f04f 0803 	mov.w	r8, #3
  40dd58:	b186      	cbz	r6, 40dd7c <_dtoa_r+0x6bc>
  40dd5a:	4f86      	ldr	r7, [pc, #536]	; (40df74 <_dtoa_r+0x8b4>)
  40dd5c:	07f1      	lsls	r1, r6, #31
  40dd5e:	d509      	bpl.n	40dd74 <_dtoa_r+0x6b4>
  40dd60:	4620      	mov	r0, r4
  40dd62:	4629      	mov	r1, r5
  40dd64:	e9d7 2300 	ldrd	r2, r3, [r7]
  40dd68:	f7fa f810 	bl	407d8c <__aeabi_dmul>
  40dd6c:	f108 0801 	add.w	r8, r8, #1
  40dd70:	4604      	mov	r4, r0
  40dd72:	460d      	mov	r5, r1
  40dd74:	1076      	asrs	r6, r6, #1
  40dd76:	f107 0708 	add.w	r7, r7, #8
  40dd7a:	d1ef      	bne.n	40dd5c <_dtoa_r+0x69c>
  40dd7c:	4622      	mov	r2, r4
  40dd7e:	462b      	mov	r3, r5
  40dd80:	4650      	mov	r0, sl
  40dd82:	4659      	mov	r1, fp
  40dd84:	f7fa f92c 	bl	407fe0 <__aeabi_ddiv>
  40dd88:	4606      	mov	r6, r0
  40dd8a:	460f      	mov	r7, r1
  40dd8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dd8e:	b143      	cbz	r3, 40dda2 <_dtoa_r+0x6e2>
  40dd90:	2200      	movs	r2, #0
  40dd92:	4b79      	ldr	r3, [pc, #484]	; (40df78 <_dtoa_r+0x8b8>)
  40dd94:	4630      	mov	r0, r6
  40dd96:	4639      	mov	r1, r7
  40dd98:	f7fa fa6a 	bl	408270 <__aeabi_dcmplt>
  40dd9c:	2800      	cmp	r0, #0
  40dd9e:	f040 8320 	bne.w	40e3e2 <_dtoa_r+0xd22>
  40dda2:	4640      	mov	r0, r8
  40dda4:	f7f9 ff8c 	bl	407cc0 <__aeabi_i2d>
  40dda8:	4632      	mov	r2, r6
  40ddaa:	463b      	mov	r3, r7
  40ddac:	f7f9 ffee 	bl	407d8c <__aeabi_dmul>
  40ddb0:	4b72      	ldr	r3, [pc, #456]	; (40df7c <_dtoa_r+0x8bc>)
  40ddb2:	2200      	movs	r2, #0
  40ddb4:	f7f9 fe38 	bl	407a28 <__adddf3>
  40ddb8:	9b06      	ldr	r3, [sp, #24]
  40ddba:	4604      	mov	r4, r0
  40ddbc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40ddc0:	2b00      	cmp	r3, #0
  40ddc2:	f000 81df 	beq.w	40e184 <_dtoa_r+0xac4>
  40ddc6:	9b04      	ldr	r3, [sp, #16]
  40ddc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40ddcc:	9311      	str	r3, [sp, #68]	; 0x44
  40ddce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ddd0:	2b00      	cmp	r3, #0
  40ddd2:	f000 8297 	beq.w	40e304 <_dtoa_r+0xc44>
  40ddd6:	4b66      	ldr	r3, [pc, #408]	; (40df70 <_dtoa_r+0x8b0>)
  40ddd8:	4969      	ldr	r1, [pc, #420]	; (40df80 <_dtoa_r+0x8c0>)
  40ddda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40ddde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40dde2:	2000      	movs	r0, #0
  40dde4:	f7fa f8fc 	bl	407fe0 <__aeabi_ddiv>
  40dde8:	4622      	mov	r2, r4
  40ddea:	462b      	mov	r3, r5
  40ddec:	f7f9 fe1a 	bl	407a24 <__aeabi_dsub>
  40ddf0:	4682      	mov	sl, r0
  40ddf2:	468b      	mov	fp, r1
  40ddf4:	4630      	mov	r0, r6
  40ddf6:	4639      	mov	r1, r7
  40ddf8:	f002 fe26 	bl	410a48 <__aeabi_d2iz>
  40ddfc:	4604      	mov	r4, r0
  40ddfe:	f7f9 ff5f 	bl	407cc0 <__aeabi_i2d>
  40de02:	4602      	mov	r2, r0
  40de04:	460b      	mov	r3, r1
  40de06:	4630      	mov	r0, r6
  40de08:	4639      	mov	r1, r7
  40de0a:	f7f9 fe0b 	bl	407a24 <__aeabi_dsub>
  40de0e:	3430      	adds	r4, #48	; 0x30
  40de10:	9d07      	ldr	r5, [sp, #28]
  40de12:	b2e4      	uxtb	r4, r4
  40de14:	4606      	mov	r6, r0
  40de16:	460f      	mov	r7, r1
  40de18:	702c      	strb	r4, [r5, #0]
  40de1a:	4602      	mov	r2, r0
  40de1c:	460b      	mov	r3, r1
  40de1e:	4650      	mov	r0, sl
  40de20:	4659      	mov	r1, fp
  40de22:	3501      	adds	r5, #1
  40de24:	f7fa fa42 	bl	4082ac <__aeabi_dcmpgt>
  40de28:	2800      	cmp	r0, #0
  40de2a:	d14c      	bne.n	40dec6 <_dtoa_r+0x806>
  40de2c:	4632      	mov	r2, r6
  40de2e:	463b      	mov	r3, r7
  40de30:	2000      	movs	r0, #0
  40de32:	4951      	ldr	r1, [pc, #324]	; (40df78 <_dtoa_r+0x8b8>)
  40de34:	f7f9 fdf6 	bl	407a24 <__aeabi_dsub>
  40de38:	4602      	mov	r2, r0
  40de3a:	460b      	mov	r3, r1
  40de3c:	4650      	mov	r0, sl
  40de3e:	4659      	mov	r1, fp
  40de40:	f7fa fa34 	bl	4082ac <__aeabi_dcmpgt>
  40de44:	2800      	cmp	r0, #0
  40de46:	f040 830d 	bne.w	40e464 <_dtoa_r+0xda4>
  40de4a:	f1b8 0f01 	cmp.w	r8, #1
  40de4e:	f340 81b3 	ble.w	40e1b8 <_dtoa_r+0xaf8>
  40de52:	9b07      	ldr	r3, [sp, #28]
  40de54:	4498      	add	r8, r3
  40de56:	e00d      	b.n	40de74 <_dtoa_r+0x7b4>
  40de58:	2000      	movs	r0, #0
  40de5a:	4947      	ldr	r1, [pc, #284]	; (40df78 <_dtoa_r+0x8b8>)
  40de5c:	f7f9 fde2 	bl	407a24 <__aeabi_dsub>
  40de60:	4652      	mov	r2, sl
  40de62:	465b      	mov	r3, fp
  40de64:	f7fa fa04 	bl	408270 <__aeabi_dcmplt>
  40de68:	2800      	cmp	r0, #0
  40de6a:	f040 82fb 	bne.w	40e464 <_dtoa_r+0xda4>
  40de6e:	4545      	cmp	r5, r8
  40de70:	f000 81a2 	beq.w	40e1b8 <_dtoa_r+0xaf8>
  40de74:	4650      	mov	r0, sl
  40de76:	4659      	mov	r1, fp
  40de78:	2200      	movs	r2, #0
  40de7a:	4b42      	ldr	r3, [pc, #264]	; (40df84 <_dtoa_r+0x8c4>)
  40de7c:	f7f9 ff86 	bl	407d8c <__aeabi_dmul>
  40de80:	2200      	movs	r2, #0
  40de82:	4b40      	ldr	r3, [pc, #256]	; (40df84 <_dtoa_r+0x8c4>)
  40de84:	4682      	mov	sl, r0
  40de86:	468b      	mov	fp, r1
  40de88:	4630      	mov	r0, r6
  40de8a:	4639      	mov	r1, r7
  40de8c:	f7f9 ff7e 	bl	407d8c <__aeabi_dmul>
  40de90:	460f      	mov	r7, r1
  40de92:	4606      	mov	r6, r0
  40de94:	f002 fdd8 	bl	410a48 <__aeabi_d2iz>
  40de98:	4604      	mov	r4, r0
  40de9a:	f7f9 ff11 	bl	407cc0 <__aeabi_i2d>
  40de9e:	4602      	mov	r2, r0
  40dea0:	460b      	mov	r3, r1
  40dea2:	4630      	mov	r0, r6
  40dea4:	4639      	mov	r1, r7
  40dea6:	f7f9 fdbd 	bl	407a24 <__aeabi_dsub>
  40deaa:	3430      	adds	r4, #48	; 0x30
  40deac:	b2e4      	uxtb	r4, r4
  40deae:	4652      	mov	r2, sl
  40deb0:	465b      	mov	r3, fp
  40deb2:	f805 4b01 	strb.w	r4, [r5], #1
  40deb6:	4606      	mov	r6, r0
  40deb8:	460f      	mov	r7, r1
  40deba:	f7fa f9d9 	bl	408270 <__aeabi_dcmplt>
  40debe:	4632      	mov	r2, r6
  40dec0:	463b      	mov	r3, r7
  40dec2:	2800      	cmp	r0, #0
  40dec4:	d0c8      	beq.n	40de58 <_dtoa_r+0x798>
  40dec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dec8:	9304      	str	r3, [sp, #16]
  40deca:	e5c4      	b.n	40da56 <_dtoa_r+0x396>
  40decc:	2300      	movs	r3, #0
  40dece:	9309      	str	r3, [sp, #36]	; 0x24
  40ded0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ded2:	2b00      	cmp	r3, #0
  40ded4:	f340 8189 	ble.w	40e1ea <_dtoa_r+0xb2a>
  40ded8:	461e      	mov	r6, r3
  40deda:	461c      	mov	r4, r3
  40dedc:	930d      	str	r3, [sp, #52]	; 0x34
  40dede:	9306      	str	r3, [sp, #24]
  40dee0:	e6fd      	b.n	40dcde <_dtoa_r+0x61e>
  40dee2:	2301      	movs	r3, #1
  40dee4:	9309      	str	r3, [sp, #36]	; 0x24
  40dee6:	e7f3      	b.n	40ded0 <_dtoa_r+0x810>
  40dee8:	9408      	str	r4, [sp, #32]
  40deea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40deec:	9908      	ldr	r1, [sp, #32]
  40deee:	4648      	mov	r0, r9
  40def0:	f001 fe70 	bl	40fbd4 <__pow5mult>
  40def4:	4604      	mov	r4, r0
  40def6:	e611      	b.n	40db1c <_dtoa_r+0x45c>
  40def8:	9b06      	ldr	r3, [sp, #24]
  40defa:	2b00      	cmp	r3, #0
  40defc:	f73f acfc 	bgt.w	40d8f8 <_dtoa_r+0x238>
  40df00:	f040 82da 	bne.w	40e4b8 <_dtoa_r+0xdf8>
  40df04:	2200      	movs	r2, #0
  40df06:	4b20      	ldr	r3, [pc, #128]	; (40df88 <_dtoa_r+0x8c8>)
  40df08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40df0c:	f7f9 ff3e 	bl	407d8c <__aeabi_dmul>
  40df10:	4652      	mov	r2, sl
  40df12:	465b      	mov	r3, fp
  40df14:	f7fa f9c0 	bl	408298 <__aeabi_dcmpge>
  40df18:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40df1c:	4646      	mov	r6, r8
  40df1e:	2800      	cmp	r0, #0
  40df20:	f000 80f2 	beq.w	40e108 <_dtoa_r+0xa48>
  40df24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40df26:	9d07      	ldr	r5, [sp, #28]
  40df28:	43db      	mvns	r3, r3
  40df2a:	9304      	str	r3, [sp, #16]
  40df2c:	4641      	mov	r1, r8
  40df2e:	4648      	mov	r0, r9
  40df30:	f001 fcca 	bl	40f8c8 <_Bfree>
  40df34:	2e00      	cmp	r6, #0
  40df36:	f43f ad8e 	beq.w	40da56 <_dtoa_r+0x396>
  40df3a:	e68d      	b.n	40dc58 <_dtoa_r+0x598>
  40df3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40df3e:	2a00      	cmp	r2, #0
  40df40:	f000 8241 	beq.w	40e3c6 <_dtoa_r+0xd06>
  40df44:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40df48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40df4a:	9d05      	ldr	r5, [sp, #20]
  40df4c:	e5ab      	b.n	40daa6 <_dtoa_r+0x3e6>
  40df4e:	201c      	movs	r0, #28
  40df50:	9b05      	ldr	r3, [sp, #20]
  40df52:	4403      	add	r3, r0
  40df54:	9305      	str	r3, [sp, #20]
  40df56:	9b02      	ldr	r3, [sp, #8]
  40df58:	4403      	add	r3, r0
  40df5a:	4405      	add	r5, r0
  40df5c:	9302      	str	r3, [sp, #8]
  40df5e:	e60e      	b.n	40db7e <_dtoa_r+0x4be>
  40df60:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40df62:	2b01      	cmp	r3, #1
  40df64:	f340 8282 	ble.w	40e46c <_dtoa_r+0xdac>
  40df68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40df6a:	2001      	movs	r0, #1
  40df6c:	e5f3      	b.n	40db56 <_dtoa_r+0x496>
  40df6e:	bf00      	nop
  40df70:	00412fe0 	.word	0x00412fe0
  40df74:	004130a8 	.word	0x004130a8
  40df78:	3ff00000 	.word	0x3ff00000
  40df7c:	401c0000 	.word	0x401c0000
  40df80:	3fe00000 	.word	0x3fe00000
  40df84:	40240000 	.word	0x40240000
  40df88:	40140000 	.word	0x40140000
  40df8c:	4631      	mov	r1, r6
  40df8e:	2300      	movs	r3, #0
  40df90:	220a      	movs	r2, #10
  40df92:	4648      	mov	r0, r9
  40df94:	f001 fca2 	bl	40f8dc <__multadd>
  40df98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40df9a:	2b00      	cmp	r3, #0
  40df9c:	4606      	mov	r6, r0
  40df9e:	f340 8297 	ble.w	40e4d0 <_dtoa_r+0xe10>
  40dfa2:	9306      	str	r3, [sp, #24]
  40dfa4:	2d00      	cmp	r5, #0
  40dfa6:	dd05      	ble.n	40dfb4 <_dtoa_r+0x8f4>
  40dfa8:	4631      	mov	r1, r6
  40dfaa:	462a      	mov	r2, r5
  40dfac:	4648      	mov	r0, r9
  40dfae:	f001 fe61 	bl	40fc74 <__lshift>
  40dfb2:	4606      	mov	r6, r0
  40dfb4:	2f00      	cmp	r7, #0
  40dfb6:	f040 817c 	bne.w	40e2b2 <_dtoa_r+0xbf2>
  40dfba:	9605      	str	r6, [sp, #20]
  40dfbc:	9b06      	ldr	r3, [sp, #24]
  40dfbe:	9a07      	ldr	r2, [sp, #28]
  40dfc0:	f8dd b014 	ldr.w	fp, [sp, #20]
  40dfc4:	3b01      	subs	r3, #1
  40dfc6:	18d3      	adds	r3, r2, r3
  40dfc8:	9308      	str	r3, [sp, #32]
  40dfca:	f00a 0301 	and.w	r3, sl, #1
  40dfce:	9309      	str	r3, [sp, #36]	; 0x24
  40dfd0:	4617      	mov	r7, r2
  40dfd2:	46c2      	mov	sl, r8
  40dfd4:	4651      	mov	r1, sl
  40dfd6:	4620      	mov	r0, r4
  40dfd8:	f7ff fade 	bl	40d598 <quorem>
  40dfdc:	4631      	mov	r1, r6
  40dfde:	4605      	mov	r5, r0
  40dfe0:	4620      	mov	r0, r4
  40dfe2:	f001 fe9f 	bl	40fd24 <__mcmp>
  40dfe6:	465a      	mov	r2, fp
  40dfe8:	9002      	str	r0, [sp, #8]
  40dfea:	4651      	mov	r1, sl
  40dfec:	4648      	mov	r0, r9
  40dfee:	f001 feb9 	bl	40fd64 <__mdiff>
  40dff2:	68c2      	ldr	r2, [r0, #12]
  40dff4:	4680      	mov	r8, r0
  40dff6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40dffa:	2a00      	cmp	r2, #0
  40dffc:	d149      	bne.n	40e092 <_dtoa_r+0x9d2>
  40dffe:	4601      	mov	r1, r0
  40e000:	4620      	mov	r0, r4
  40e002:	9306      	str	r3, [sp, #24]
  40e004:	f001 fe8e 	bl	40fd24 <__mcmp>
  40e008:	4641      	mov	r1, r8
  40e00a:	9005      	str	r0, [sp, #20]
  40e00c:	4648      	mov	r0, r9
  40e00e:	f001 fc5b 	bl	40f8c8 <_Bfree>
  40e012:	9a05      	ldr	r2, [sp, #20]
  40e014:	9b06      	ldr	r3, [sp, #24]
  40e016:	b92a      	cbnz	r2, 40e024 <_dtoa_r+0x964>
  40e018:	9920      	ldr	r1, [sp, #128]	; 0x80
  40e01a:	b919      	cbnz	r1, 40e024 <_dtoa_r+0x964>
  40e01c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e01e:	2900      	cmp	r1, #0
  40e020:	f000 8236 	beq.w	40e490 <_dtoa_r+0xdd0>
  40e024:	9902      	ldr	r1, [sp, #8]
  40e026:	2900      	cmp	r1, #0
  40e028:	f2c0 80e4 	blt.w	40e1f4 <_dtoa_r+0xb34>
  40e02c:	d105      	bne.n	40e03a <_dtoa_r+0x97a>
  40e02e:	9920      	ldr	r1, [sp, #128]	; 0x80
  40e030:	b919      	cbnz	r1, 40e03a <_dtoa_r+0x97a>
  40e032:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e034:	2900      	cmp	r1, #0
  40e036:	f000 80dd 	beq.w	40e1f4 <_dtoa_r+0xb34>
  40e03a:	2a00      	cmp	r2, #0
  40e03c:	f300 814d 	bgt.w	40e2da <_dtoa_r+0xc1a>
  40e040:	9a08      	ldr	r2, [sp, #32]
  40e042:	703b      	strb	r3, [r7, #0]
  40e044:	f107 0801 	add.w	r8, r7, #1
  40e048:	4297      	cmp	r7, r2
  40e04a:	4645      	mov	r5, r8
  40e04c:	f000 8154 	beq.w	40e2f8 <_dtoa_r+0xc38>
  40e050:	4621      	mov	r1, r4
  40e052:	2300      	movs	r3, #0
  40e054:	220a      	movs	r2, #10
  40e056:	4648      	mov	r0, r9
  40e058:	f001 fc40 	bl	40f8dc <__multadd>
  40e05c:	455e      	cmp	r6, fp
  40e05e:	4604      	mov	r4, r0
  40e060:	4631      	mov	r1, r6
  40e062:	f04f 0300 	mov.w	r3, #0
  40e066:	f04f 020a 	mov.w	r2, #10
  40e06a:	4648      	mov	r0, r9
  40e06c:	d00b      	beq.n	40e086 <_dtoa_r+0x9c6>
  40e06e:	f001 fc35 	bl	40f8dc <__multadd>
  40e072:	4659      	mov	r1, fp
  40e074:	4606      	mov	r6, r0
  40e076:	2300      	movs	r3, #0
  40e078:	220a      	movs	r2, #10
  40e07a:	4648      	mov	r0, r9
  40e07c:	f001 fc2e 	bl	40f8dc <__multadd>
  40e080:	4647      	mov	r7, r8
  40e082:	4683      	mov	fp, r0
  40e084:	e7a6      	b.n	40dfd4 <_dtoa_r+0x914>
  40e086:	f001 fc29 	bl	40f8dc <__multadd>
  40e08a:	4647      	mov	r7, r8
  40e08c:	4606      	mov	r6, r0
  40e08e:	4683      	mov	fp, r0
  40e090:	e7a0      	b.n	40dfd4 <_dtoa_r+0x914>
  40e092:	4601      	mov	r1, r0
  40e094:	4648      	mov	r0, r9
  40e096:	9305      	str	r3, [sp, #20]
  40e098:	f001 fc16 	bl	40f8c8 <_Bfree>
  40e09c:	2201      	movs	r2, #1
  40e09e:	9b05      	ldr	r3, [sp, #20]
  40e0a0:	e7c0      	b.n	40e024 <_dtoa_r+0x964>
  40e0a2:	4641      	mov	r1, r8
  40e0a4:	4620      	mov	r0, r4
  40e0a6:	f001 fe3d 	bl	40fd24 <__mcmp>
  40e0aa:	2800      	cmp	r0, #0
  40e0ac:	f6bf ad7d 	bge.w	40dbaa <_dtoa_r+0x4ea>
  40e0b0:	4621      	mov	r1, r4
  40e0b2:	9c04      	ldr	r4, [sp, #16]
  40e0b4:	2300      	movs	r3, #0
  40e0b6:	3c01      	subs	r4, #1
  40e0b8:	220a      	movs	r2, #10
  40e0ba:	4648      	mov	r0, r9
  40e0bc:	9404      	str	r4, [sp, #16]
  40e0be:	f001 fc0d 	bl	40f8dc <__multadd>
  40e0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e0c4:	4604      	mov	r4, r0
  40e0c6:	2b00      	cmp	r3, #0
  40e0c8:	f47f af60 	bne.w	40df8c <_dtoa_r+0x8cc>
  40e0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e0ce:	2b00      	cmp	r3, #0
  40e0d0:	f340 81f6 	ble.w	40e4c0 <_dtoa_r+0xe00>
  40e0d4:	9306      	str	r3, [sp, #24]
  40e0d6:	e570      	b.n	40dbba <_dtoa_r+0x4fa>
  40e0d8:	9c08      	ldr	r4, [sp, #32]
  40e0da:	e51f      	b.n	40db1c <_dtoa_r+0x45c>
  40e0dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e0de:	2b02      	cmp	r3, #2
  40e0e0:	f77f ad67 	ble.w	40dbb2 <_dtoa_r+0x4f2>
  40e0e4:	9b06      	ldr	r3, [sp, #24]
  40e0e6:	2b00      	cmp	r3, #0
  40e0e8:	f040 8179 	bne.w	40e3de <_dtoa_r+0xd1e>
  40e0ec:	4641      	mov	r1, r8
  40e0ee:	2205      	movs	r2, #5
  40e0f0:	4648      	mov	r0, r9
  40e0f2:	f001 fbf3 	bl	40f8dc <__multadd>
  40e0f6:	4601      	mov	r1, r0
  40e0f8:	4680      	mov	r8, r0
  40e0fa:	4620      	mov	r0, r4
  40e0fc:	f001 fe12 	bl	40fd24 <__mcmp>
  40e100:	2800      	cmp	r0, #0
  40e102:	9408      	str	r4, [sp, #32]
  40e104:	f77f af0e 	ble.w	40df24 <_dtoa_r+0x864>
  40e108:	9a04      	ldr	r2, [sp, #16]
  40e10a:	9907      	ldr	r1, [sp, #28]
  40e10c:	2331      	movs	r3, #49	; 0x31
  40e10e:	3201      	adds	r2, #1
  40e110:	9204      	str	r2, [sp, #16]
  40e112:	700b      	strb	r3, [r1, #0]
  40e114:	1c4d      	adds	r5, r1, #1
  40e116:	e709      	b.n	40df2c <_dtoa_r+0x86c>
  40e118:	9a04      	ldr	r2, [sp, #16]
  40e11a:	3201      	adds	r2, #1
  40e11c:	9204      	str	r2, [sp, #16]
  40e11e:	9a07      	ldr	r2, [sp, #28]
  40e120:	2331      	movs	r3, #49	; 0x31
  40e122:	7013      	strb	r3, [r2, #0]
  40e124:	e588      	b.n	40dc38 <_dtoa_r+0x578>
  40e126:	2301      	movs	r3, #1
  40e128:	9309      	str	r3, [sp, #36]	; 0x24
  40e12a:	e5cd      	b.n	40dcc8 <_dtoa_r+0x608>
  40e12c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40e130:	e491      	b.n	40da56 <_dtoa_r+0x396>
  40e132:	f1ba 0f00 	cmp.w	sl, #0
  40e136:	f47f ad04 	bne.w	40db42 <_dtoa_r+0x482>
  40e13a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40e13e:	2b00      	cmp	r3, #0
  40e140:	f040 813f 	bne.w	40e3c2 <_dtoa_r+0xd02>
  40e144:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40e148:	0d3f      	lsrs	r7, r7, #20
  40e14a:	053f      	lsls	r7, r7, #20
  40e14c:	b137      	cbz	r7, 40e15c <_dtoa_r+0xa9c>
  40e14e:	9b05      	ldr	r3, [sp, #20]
  40e150:	3301      	adds	r3, #1
  40e152:	9305      	str	r3, [sp, #20]
  40e154:	9b02      	ldr	r3, [sp, #8]
  40e156:	3301      	adds	r3, #1
  40e158:	9302      	str	r3, [sp, #8]
  40e15a:	2701      	movs	r7, #1
  40e15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e15e:	2001      	movs	r0, #1
  40e160:	2b00      	cmp	r3, #0
  40e162:	f43f acf8 	beq.w	40db56 <_dtoa_r+0x496>
  40e166:	e4ed      	b.n	40db44 <_dtoa_r+0x484>
  40e168:	4640      	mov	r0, r8
  40e16a:	f7f9 fda9 	bl	407cc0 <__aeabi_i2d>
  40e16e:	4632      	mov	r2, r6
  40e170:	463b      	mov	r3, r7
  40e172:	f7f9 fe0b 	bl	407d8c <__aeabi_dmul>
  40e176:	2200      	movs	r2, #0
  40e178:	4bbf      	ldr	r3, [pc, #764]	; (40e478 <_dtoa_r+0xdb8>)
  40e17a:	f7f9 fc55 	bl	407a28 <__adddf3>
  40e17e:	4604      	mov	r4, r0
  40e180:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40e184:	4630      	mov	r0, r6
  40e186:	4639      	mov	r1, r7
  40e188:	2200      	movs	r2, #0
  40e18a:	4bbc      	ldr	r3, [pc, #752]	; (40e47c <_dtoa_r+0xdbc>)
  40e18c:	f7f9 fc4a 	bl	407a24 <__aeabi_dsub>
  40e190:	4622      	mov	r2, r4
  40e192:	462b      	mov	r3, r5
  40e194:	4606      	mov	r6, r0
  40e196:	460f      	mov	r7, r1
  40e198:	f7fa f888 	bl	4082ac <__aeabi_dcmpgt>
  40e19c:	4680      	mov	r8, r0
  40e19e:	2800      	cmp	r0, #0
  40e1a0:	f040 8105 	bne.w	40e3ae <_dtoa_r+0xcee>
  40e1a4:	4622      	mov	r2, r4
  40e1a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40e1aa:	4630      	mov	r0, r6
  40e1ac:	4639      	mov	r1, r7
  40e1ae:	f7fa f85f 	bl	408270 <__aeabi_dcmplt>
  40e1b2:	b108      	cbz	r0, 40e1b8 <_dtoa_r+0xaf8>
  40e1b4:	4646      	mov	r6, r8
  40e1b6:	e6b5      	b.n	40df24 <_dtoa_r+0x864>
  40e1b8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40e1bc:	f7ff bb89 	b.w	40d8d2 <_dtoa_r+0x212>
  40e1c0:	9807      	ldr	r0, [sp, #28]
  40e1c2:	f7ff baae 	b.w	40d722 <_dtoa_r+0x62>
  40e1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e1ca:	970a      	str	r7, [sp, #40]	; 0x28
  40e1cc:	1afb      	subs	r3, r7, r3
  40e1ce:	441a      	add	r2, r3
  40e1d0:	920b      	str	r2, [sp, #44]	; 0x2c
  40e1d2:	2700      	movs	r7, #0
  40e1d4:	e461      	b.n	40da9a <_dtoa_r+0x3da>
  40e1d6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40e1da:	f04f 0802 	mov.w	r8, #2
  40e1de:	e5bb      	b.n	40dd58 <_dtoa_r+0x698>
  40e1e0:	461c      	mov	r4, r3
  40e1e2:	2100      	movs	r1, #0
  40e1e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40e1e8:	e58a      	b.n	40dd00 <_dtoa_r+0x640>
  40e1ea:	2401      	movs	r4, #1
  40e1ec:	9421      	str	r4, [sp, #132]	; 0x84
  40e1ee:	940d      	str	r4, [sp, #52]	; 0x34
  40e1f0:	9406      	str	r4, [sp, #24]
  40e1f2:	e7f6      	b.n	40e1e2 <_dtoa_r+0xb22>
  40e1f4:	2a00      	cmp	r2, #0
  40e1f6:	46d0      	mov	r8, sl
  40e1f8:	f8cd b014 	str.w	fp, [sp, #20]
  40e1fc:	469a      	mov	sl, r3
  40e1fe:	dd11      	ble.n	40e224 <_dtoa_r+0xb64>
  40e200:	4621      	mov	r1, r4
  40e202:	2201      	movs	r2, #1
  40e204:	4648      	mov	r0, r9
  40e206:	f001 fd35 	bl	40fc74 <__lshift>
  40e20a:	4641      	mov	r1, r8
  40e20c:	4604      	mov	r4, r0
  40e20e:	f001 fd89 	bl	40fd24 <__mcmp>
  40e212:	2800      	cmp	r0, #0
  40e214:	f340 8149 	ble.w	40e4aa <_dtoa_r+0xdea>
  40e218:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e21c:	f000 8106 	beq.w	40e42c <_dtoa_r+0xd6c>
  40e220:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40e224:	46b3      	mov	fp, r6
  40e226:	f887 a000 	strb.w	sl, [r7]
  40e22a:	1c7d      	adds	r5, r7, #1
  40e22c:	9e05      	ldr	r6, [sp, #20]
  40e22e:	9408      	str	r4, [sp, #32]
  40e230:	e502      	b.n	40dc38 <_dtoa_r+0x578>
  40e232:	d104      	bne.n	40e23e <_dtoa_r+0xb7e>
  40e234:	f01a 0f01 	tst.w	sl, #1
  40e238:	d001      	beq.n	40e23e <_dtoa_r+0xb7e>
  40e23a:	e4ed      	b.n	40dc18 <_dtoa_r+0x558>
  40e23c:	4615      	mov	r5, r2
  40e23e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40e242:	2b30      	cmp	r3, #48	; 0x30
  40e244:	f105 32ff 	add.w	r2, r5, #4294967295
  40e248:	d0f8      	beq.n	40e23c <_dtoa_r+0xb7c>
  40e24a:	e4f5      	b.n	40dc38 <_dtoa_r+0x578>
  40e24c:	9b04      	ldr	r3, [sp, #16]
  40e24e:	425c      	negs	r4, r3
  40e250:	2c00      	cmp	r4, #0
  40e252:	f000 80bf 	beq.w	40e3d4 <_dtoa_r+0xd14>
  40e256:	4b8a      	ldr	r3, [pc, #552]	; (40e480 <_dtoa_r+0xdc0>)
  40e258:	f004 020f 	and.w	r2, r4, #15
  40e25c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e260:	e9d3 2300 	ldrd	r2, r3, [r3]
  40e264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40e268:	f7f9 fd90 	bl	407d8c <__aeabi_dmul>
  40e26c:	1124      	asrs	r4, r4, #4
  40e26e:	4606      	mov	r6, r0
  40e270:	460f      	mov	r7, r1
  40e272:	f000 812a 	beq.w	40e4ca <_dtoa_r+0xe0a>
  40e276:	4d83      	ldr	r5, [pc, #524]	; (40e484 <_dtoa_r+0xdc4>)
  40e278:	f04f 0802 	mov.w	r8, #2
  40e27c:	07e2      	lsls	r2, r4, #31
  40e27e:	d509      	bpl.n	40e294 <_dtoa_r+0xbd4>
  40e280:	4630      	mov	r0, r6
  40e282:	4639      	mov	r1, r7
  40e284:	e9d5 2300 	ldrd	r2, r3, [r5]
  40e288:	f7f9 fd80 	bl	407d8c <__aeabi_dmul>
  40e28c:	f108 0801 	add.w	r8, r8, #1
  40e290:	4606      	mov	r6, r0
  40e292:	460f      	mov	r7, r1
  40e294:	1064      	asrs	r4, r4, #1
  40e296:	f105 0508 	add.w	r5, r5, #8
  40e29a:	d1ef      	bne.n	40e27c <_dtoa_r+0xbbc>
  40e29c:	e576      	b.n	40dd8c <_dtoa_r+0x6cc>
  40e29e:	9907      	ldr	r1, [sp, #28]
  40e2a0:	2230      	movs	r2, #48	; 0x30
  40e2a2:	700a      	strb	r2, [r1, #0]
  40e2a4:	9a04      	ldr	r2, [sp, #16]
  40e2a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40e2aa:	3201      	adds	r2, #1
  40e2ac:	9204      	str	r2, [sp, #16]
  40e2ae:	f7ff bbd0 	b.w	40da52 <_dtoa_r+0x392>
  40e2b2:	6871      	ldr	r1, [r6, #4]
  40e2b4:	4648      	mov	r0, r9
  40e2b6:	f001 fae1 	bl	40f87c <_Balloc>
  40e2ba:	6933      	ldr	r3, [r6, #16]
  40e2bc:	1c9a      	adds	r2, r3, #2
  40e2be:	4605      	mov	r5, r0
  40e2c0:	0092      	lsls	r2, r2, #2
  40e2c2:	f106 010c 	add.w	r1, r6, #12
  40e2c6:	300c      	adds	r0, #12
  40e2c8:	f7fa fea4 	bl	409014 <memcpy>
  40e2cc:	4629      	mov	r1, r5
  40e2ce:	2201      	movs	r2, #1
  40e2d0:	4648      	mov	r0, r9
  40e2d2:	f001 fccf 	bl	40fc74 <__lshift>
  40e2d6:	9005      	str	r0, [sp, #20]
  40e2d8:	e670      	b.n	40dfbc <_dtoa_r+0x8fc>
  40e2da:	2b39      	cmp	r3, #57	; 0x39
  40e2dc:	f8cd b014 	str.w	fp, [sp, #20]
  40e2e0:	46d0      	mov	r8, sl
  40e2e2:	f000 80a3 	beq.w	40e42c <_dtoa_r+0xd6c>
  40e2e6:	f103 0a01 	add.w	sl, r3, #1
  40e2ea:	46b3      	mov	fp, r6
  40e2ec:	f887 a000 	strb.w	sl, [r7]
  40e2f0:	1c7d      	adds	r5, r7, #1
  40e2f2:	9e05      	ldr	r6, [sp, #20]
  40e2f4:	9408      	str	r4, [sp, #32]
  40e2f6:	e49f      	b.n	40dc38 <_dtoa_r+0x578>
  40e2f8:	465a      	mov	r2, fp
  40e2fa:	46d0      	mov	r8, sl
  40e2fc:	46b3      	mov	fp, r6
  40e2fe:	469a      	mov	sl, r3
  40e300:	4616      	mov	r6, r2
  40e302:	e47d      	b.n	40dc00 <_dtoa_r+0x540>
  40e304:	495e      	ldr	r1, [pc, #376]	; (40e480 <_dtoa_r+0xdc0>)
  40e306:	f108 3aff 	add.w	sl, r8, #4294967295
  40e30a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40e30e:	4622      	mov	r2, r4
  40e310:	462b      	mov	r3, r5
  40e312:	e9d1 0100 	ldrd	r0, r1, [r1]
  40e316:	f7f9 fd39 	bl	407d8c <__aeabi_dmul>
  40e31a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40e31e:	4639      	mov	r1, r7
  40e320:	4630      	mov	r0, r6
  40e322:	f002 fb91 	bl	410a48 <__aeabi_d2iz>
  40e326:	4604      	mov	r4, r0
  40e328:	f7f9 fcca 	bl	407cc0 <__aeabi_i2d>
  40e32c:	4602      	mov	r2, r0
  40e32e:	460b      	mov	r3, r1
  40e330:	4630      	mov	r0, r6
  40e332:	4639      	mov	r1, r7
  40e334:	f7f9 fb76 	bl	407a24 <__aeabi_dsub>
  40e338:	9a07      	ldr	r2, [sp, #28]
  40e33a:	3430      	adds	r4, #48	; 0x30
  40e33c:	f1b8 0f01 	cmp.w	r8, #1
  40e340:	4606      	mov	r6, r0
  40e342:	460f      	mov	r7, r1
  40e344:	7014      	strb	r4, [r2, #0]
  40e346:	f102 0501 	add.w	r5, r2, #1
  40e34a:	d01e      	beq.n	40e38a <_dtoa_r+0xcca>
  40e34c:	9b07      	ldr	r3, [sp, #28]
  40e34e:	eb03 0b08 	add.w	fp, r3, r8
  40e352:	46a8      	mov	r8, r5
  40e354:	2200      	movs	r2, #0
  40e356:	4b4c      	ldr	r3, [pc, #304]	; (40e488 <_dtoa_r+0xdc8>)
  40e358:	4630      	mov	r0, r6
  40e35a:	4639      	mov	r1, r7
  40e35c:	f7f9 fd16 	bl	407d8c <__aeabi_dmul>
  40e360:	460f      	mov	r7, r1
  40e362:	4606      	mov	r6, r0
  40e364:	f002 fb70 	bl	410a48 <__aeabi_d2iz>
  40e368:	4604      	mov	r4, r0
  40e36a:	f7f9 fca9 	bl	407cc0 <__aeabi_i2d>
  40e36e:	3430      	adds	r4, #48	; 0x30
  40e370:	4602      	mov	r2, r0
  40e372:	460b      	mov	r3, r1
  40e374:	4630      	mov	r0, r6
  40e376:	4639      	mov	r1, r7
  40e378:	f7f9 fb54 	bl	407a24 <__aeabi_dsub>
  40e37c:	f808 4b01 	strb.w	r4, [r8], #1
  40e380:	45c3      	cmp	fp, r8
  40e382:	4606      	mov	r6, r0
  40e384:	460f      	mov	r7, r1
  40e386:	d1e5      	bne.n	40e354 <_dtoa_r+0xc94>
  40e388:	4455      	add	r5, sl
  40e38a:	2200      	movs	r2, #0
  40e38c:	4b3f      	ldr	r3, [pc, #252]	; (40e48c <_dtoa_r+0xdcc>)
  40e38e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e392:	f7f9 fb49 	bl	407a28 <__adddf3>
  40e396:	4632      	mov	r2, r6
  40e398:	463b      	mov	r3, r7
  40e39a:	f7f9 ff69 	bl	408270 <__aeabi_dcmplt>
  40e39e:	2800      	cmp	r0, #0
  40e3a0:	d04c      	beq.n	40e43c <_dtoa_r+0xd7c>
  40e3a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e3a4:	9304      	str	r3, [sp, #16]
  40e3a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40e3aa:	f7ff bb46 	b.w	40da3a <_dtoa_r+0x37a>
  40e3ae:	f04f 0800 	mov.w	r8, #0
  40e3b2:	4646      	mov	r6, r8
  40e3b4:	e6a8      	b.n	40e108 <_dtoa_r+0xa48>
  40e3b6:	9b05      	ldr	r3, [sp, #20]
  40e3b8:	9a06      	ldr	r2, [sp, #24]
  40e3ba:	1a9d      	subs	r5, r3, r2
  40e3bc:	2300      	movs	r3, #0
  40e3be:	f7ff bb72 	b.w	40daa6 <_dtoa_r+0x3e6>
  40e3c2:	2700      	movs	r7, #0
  40e3c4:	e6ca      	b.n	40e15c <_dtoa_r+0xa9c>
  40e3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40e3c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40e3ca:	9d05      	ldr	r5, [sp, #20]
  40e3cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40e3d0:	f7ff bb69 	b.w	40daa6 <_dtoa_r+0x3e6>
  40e3d4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40e3d8:	f04f 0802 	mov.w	r8, #2
  40e3dc:	e4d6      	b.n	40dd8c <_dtoa_r+0x6cc>
  40e3de:	9408      	str	r4, [sp, #32]
  40e3e0:	e5a0      	b.n	40df24 <_dtoa_r+0x864>
  40e3e2:	9b06      	ldr	r3, [sp, #24]
  40e3e4:	2b00      	cmp	r3, #0
  40e3e6:	f43f aebf 	beq.w	40e168 <_dtoa_r+0xaa8>
  40e3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e3ec:	2b00      	cmp	r3, #0
  40e3ee:	f77f aee3 	ble.w	40e1b8 <_dtoa_r+0xaf8>
  40e3f2:	2200      	movs	r2, #0
  40e3f4:	4b24      	ldr	r3, [pc, #144]	; (40e488 <_dtoa_r+0xdc8>)
  40e3f6:	4630      	mov	r0, r6
  40e3f8:	4639      	mov	r1, r7
  40e3fa:	f7f9 fcc7 	bl	407d8c <__aeabi_dmul>
  40e3fe:	4606      	mov	r6, r0
  40e400:	460f      	mov	r7, r1
  40e402:	f108 0001 	add.w	r0, r8, #1
  40e406:	f7f9 fc5b 	bl	407cc0 <__aeabi_i2d>
  40e40a:	4632      	mov	r2, r6
  40e40c:	463b      	mov	r3, r7
  40e40e:	f7f9 fcbd 	bl	407d8c <__aeabi_dmul>
  40e412:	2200      	movs	r2, #0
  40e414:	4b18      	ldr	r3, [pc, #96]	; (40e478 <_dtoa_r+0xdb8>)
  40e416:	f7f9 fb07 	bl	407a28 <__adddf3>
  40e41a:	9a04      	ldr	r2, [sp, #16]
  40e41c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e420:	3a01      	subs	r2, #1
  40e422:	4604      	mov	r4, r0
  40e424:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40e428:	9211      	str	r2, [sp, #68]	; 0x44
  40e42a:	e4d0      	b.n	40ddce <_dtoa_r+0x70e>
  40e42c:	2239      	movs	r2, #57	; 0x39
  40e42e:	46b3      	mov	fp, r6
  40e430:	9408      	str	r4, [sp, #32]
  40e432:	9e05      	ldr	r6, [sp, #20]
  40e434:	703a      	strb	r2, [r7, #0]
  40e436:	1c7d      	adds	r5, r7, #1
  40e438:	f7ff bbf0 	b.w	40dc1c <_dtoa_r+0x55c>
  40e43c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40e440:	2000      	movs	r0, #0
  40e442:	4912      	ldr	r1, [pc, #72]	; (40e48c <_dtoa_r+0xdcc>)
  40e444:	f7f9 faee 	bl	407a24 <__aeabi_dsub>
  40e448:	4632      	mov	r2, r6
  40e44a:	463b      	mov	r3, r7
  40e44c:	f7f9 ff2e 	bl	4082ac <__aeabi_dcmpgt>
  40e450:	b908      	cbnz	r0, 40e456 <_dtoa_r+0xd96>
  40e452:	e6b1      	b.n	40e1b8 <_dtoa_r+0xaf8>
  40e454:	4615      	mov	r5, r2
  40e456:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40e45a:	2b30      	cmp	r3, #48	; 0x30
  40e45c:	f105 32ff 	add.w	r2, r5, #4294967295
  40e460:	d0f8      	beq.n	40e454 <_dtoa_r+0xd94>
  40e462:	e530      	b.n	40dec6 <_dtoa_r+0x806>
  40e464:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e466:	9304      	str	r3, [sp, #16]
  40e468:	f7ff bae7 	b.w	40da3a <_dtoa_r+0x37a>
  40e46c:	f1ba 0f00 	cmp.w	sl, #0
  40e470:	f47f ad7a 	bne.w	40df68 <_dtoa_r+0x8a8>
  40e474:	e661      	b.n	40e13a <_dtoa_r+0xa7a>
  40e476:	bf00      	nop
  40e478:	401c0000 	.word	0x401c0000
  40e47c:	40140000 	.word	0x40140000
  40e480:	00412fe0 	.word	0x00412fe0
  40e484:	004130a8 	.word	0x004130a8
  40e488:	40240000 	.word	0x40240000
  40e48c:	3fe00000 	.word	0x3fe00000
  40e490:	2b39      	cmp	r3, #57	; 0x39
  40e492:	f8cd b014 	str.w	fp, [sp, #20]
  40e496:	46d0      	mov	r8, sl
  40e498:	f8dd b008 	ldr.w	fp, [sp, #8]
  40e49c:	469a      	mov	sl, r3
  40e49e:	d0c5      	beq.n	40e42c <_dtoa_r+0xd6c>
  40e4a0:	f1bb 0f00 	cmp.w	fp, #0
  40e4a4:	f73f aebc 	bgt.w	40e220 <_dtoa_r+0xb60>
  40e4a8:	e6bc      	b.n	40e224 <_dtoa_r+0xb64>
  40e4aa:	f47f aebb 	bne.w	40e224 <_dtoa_r+0xb64>
  40e4ae:	f01a 0f01 	tst.w	sl, #1
  40e4b2:	f43f aeb7 	beq.w	40e224 <_dtoa_r+0xb64>
  40e4b6:	e6af      	b.n	40e218 <_dtoa_r+0xb58>
  40e4b8:	f04f 0800 	mov.w	r8, #0
  40e4bc:	4646      	mov	r6, r8
  40e4be:	e531      	b.n	40df24 <_dtoa_r+0x864>
  40e4c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e4c2:	2b02      	cmp	r3, #2
  40e4c4:	dc21      	bgt.n	40e50a <_dtoa_r+0xe4a>
  40e4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e4c8:	e604      	b.n	40e0d4 <_dtoa_r+0xa14>
  40e4ca:	f04f 0802 	mov.w	r8, #2
  40e4ce:	e45d      	b.n	40dd8c <_dtoa_r+0x6cc>
  40e4d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e4d2:	2b02      	cmp	r3, #2
  40e4d4:	dc19      	bgt.n	40e50a <_dtoa_r+0xe4a>
  40e4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e4d8:	e563      	b.n	40dfa2 <_dtoa_r+0x8e2>
  40e4da:	2400      	movs	r4, #0
  40e4dc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40e4e0:	4621      	mov	r1, r4
  40e4e2:	4648      	mov	r0, r9
  40e4e4:	f001 f9ca 	bl	40f87c <_Balloc>
  40e4e8:	f04f 33ff 	mov.w	r3, #4294967295
  40e4ec:	9306      	str	r3, [sp, #24]
  40e4ee:	930d      	str	r3, [sp, #52]	; 0x34
  40e4f0:	2301      	movs	r3, #1
  40e4f2:	9007      	str	r0, [sp, #28]
  40e4f4:	9421      	str	r4, [sp, #132]	; 0x84
  40e4f6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40e4fa:	9309      	str	r3, [sp, #36]	; 0x24
  40e4fc:	f7ff b9e9 	b.w	40d8d2 <_dtoa_r+0x212>
  40e500:	f43f ab3d 	beq.w	40db7e <_dtoa_r+0x4be>
  40e504:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40e508:	e522      	b.n	40df50 <_dtoa_r+0x890>
  40e50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e50c:	9306      	str	r3, [sp, #24]
  40e50e:	e5e9      	b.n	40e0e4 <_dtoa_r+0xa24>
  40e510:	2501      	movs	r5, #1
  40e512:	f7ff b9a8 	b.w	40d866 <_dtoa_r+0x1a6>
  40e516:	bf00      	nop

0040e518 <__sflush_r>:
  40e518:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40e51c:	b29a      	uxth	r2, r3
  40e51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e522:	460d      	mov	r5, r1
  40e524:	0711      	lsls	r1, r2, #28
  40e526:	4680      	mov	r8, r0
  40e528:	d43c      	bmi.n	40e5a4 <__sflush_r+0x8c>
  40e52a:	686a      	ldr	r2, [r5, #4]
  40e52c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40e530:	2a00      	cmp	r2, #0
  40e532:	81ab      	strh	r3, [r5, #12]
  40e534:	dd73      	ble.n	40e61e <__sflush_r+0x106>
  40e536:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e538:	2c00      	cmp	r4, #0
  40e53a:	d04b      	beq.n	40e5d4 <__sflush_r+0xbc>
  40e53c:	b29b      	uxth	r3, r3
  40e53e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40e542:	2100      	movs	r1, #0
  40e544:	b292      	uxth	r2, r2
  40e546:	f8d8 6000 	ldr.w	r6, [r8]
  40e54a:	f8c8 1000 	str.w	r1, [r8]
  40e54e:	2a00      	cmp	r2, #0
  40e550:	d069      	beq.n	40e626 <__sflush_r+0x10e>
  40e552:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40e554:	075f      	lsls	r7, r3, #29
  40e556:	d505      	bpl.n	40e564 <__sflush_r+0x4c>
  40e558:	6869      	ldr	r1, [r5, #4]
  40e55a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40e55c:	1a52      	subs	r2, r2, r1
  40e55e:	b10b      	cbz	r3, 40e564 <__sflush_r+0x4c>
  40e560:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40e562:	1ad2      	subs	r2, r2, r3
  40e564:	2300      	movs	r3, #0
  40e566:	69e9      	ldr	r1, [r5, #28]
  40e568:	4640      	mov	r0, r8
  40e56a:	47a0      	blx	r4
  40e56c:	1c44      	adds	r4, r0, #1
  40e56e:	d03c      	beq.n	40e5ea <__sflush_r+0xd2>
  40e570:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40e574:	692a      	ldr	r2, [r5, #16]
  40e576:	602a      	str	r2, [r5, #0]
  40e578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40e57c:	2200      	movs	r2, #0
  40e57e:	81ab      	strh	r3, [r5, #12]
  40e580:	04db      	lsls	r3, r3, #19
  40e582:	606a      	str	r2, [r5, #4]
  40e584:	d449      	bmi.n	40e61a <__sflush_r+0x102>
  40e586:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40e588:	f8c8 6000 	str.w	r6, [r8]
  40e58c:	b311      	cbz	r1, 40e5d4 <__sflush_r+0xbc>
  40e58e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40e592:	4299      	cmp	r1, r3
  40e594:	d002      	beq.n	40e59c <__sflush_r+0x84>
  40e596:	4640      	mov	r0, r8
  40e598:	f000 f9c0 	bl	40e91c <_free_r>
  40e59c:	2000      	movs	r0, #0
  40e59e:	6328      	str	r0, [r5, #48]	; 0x30
  40e5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e5a4:	692e      	ldr	r6, [r5, #16]
  40e5a6:	b1ae      	cbz	r6, 40e5d4 <__sflush_r+0xbc>
  40e5a8:	682c      	ldr	r4, [r5, #0]
  40e5aa:	602e      	str	r6, [r5, #0]
  40e5ac:	0790      	lsls	r0, r2, #30
  40e5ae:	bf0c      	ite	eq
  40e5b0:	696b      	ldreq	r3, [r5, #20]
  40e5b2:	2300      	movne	r3, #0
  40e5b4:	1ba4      	subs	r4, r4, r6
  40e5b6:	60ab      	str	r3, [r5, #8]
  40e5b8:	e00a      	b.n	40e5d0 <__sflush_r+0xb8>
  40e5ba:	4623      	mov	r3, r4
  40e5bc:	4632      	mov	r2, r6
  40e5be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40e5c0:	69e9      	ldr	r1, [r5, #28]
  40e5c2:	4640      	mov	r0, r8
  40e5c4:	47b8      	blx	r7
  40e5c6:	2800      	cmp	r0, #0
  40e5c8:	eba4 0400 	sub.w	r4, r4, r0
  40e5cc:	4406      	add	r6, r0
  40e5ce:	dd04      	ble.n	40e5da <__sflush_r+0xc2>
  40e5d0:	2c00      	cmp	r4, #0
  40e5d2:	dcf2      	bgt.n	40e5ba <__sflush_r+0xa2>
  40e5d4:	2000      	movs	r0, #0
  40e5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e5da:	89ab      	ldrh	r3, [r5, #12]
  40e5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e5e0:	81ab      	strh	r3, [r5, #12]
  40e5e2:	f04f 30ff 	mov.w	r0, #4294967295
  40e5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e5ea:	f8d8 2000 	ldr.w	r2, [r8]
  40e5ee:	2a1d      	cmp	r2, #29
  40e5f0:	d8f3      	bhi.n	40e5da <__sflush_r+0xc2>
  40e5f2:	4b1a      	ldr	r3, [pc, #104]	; (40e65c <__sflush_r+0x144>)
  40e5f4:	40d3      	lsrs	r3, r2
  40e5f6:	f003 0301 	and.w	r3, r3, #1
  40e5fa:	f083 0401 	eor.w	r4, r3, #1
  40e5fe:	2b00      	cmp	r3, #0
  40e600:	d0eb      	beq.n	40e5da <__sflush_r+0xc2>
  40e602:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40e606:	6929      	ldr	r1, [r5, #16]
  40e608:	6029      	str	r1, [r5, #0]
  40e60a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40e60e:	04d9      	lsls	r1, r3, #19
  40e610:	606c      	str	r4, [r5, #4]
  40e612:	81ab      	strh	r3, [r5, #12]
  40e614:	d5b7      	bpl.n	40e586 <__sflush_r+0x6e>
  40e616:	2a00      	cmp	r2, #0
  40e618:	d1b5      	bne.n	40e586 <__sflush_r+0x6e>
  40e61a:	6528      	str	r0, [r5, #80]	; 0x50
  40e61c:	e7b3      	b.n	40e586 <__sflush_r+0x6e>
  40e61e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40e620:	2a00      	cmp	r2, #0
  40e622:	dc88      	bgt.n	40e536 <__sflush_r+0x1e>
  40e624:	e7d6      	b.n	40e5d4 <__sflush_r+0xbc>
  40e626:	2301      	movs	r3, #1
  40e628:	69e9      	ldr	r1, [r5, #28]
  40e62a:	4640      	mov	r0, r8
  40e62c:	47a0      	blx	r4
  40e62e:	1c43      	adds	r3, r0, #1
  40e630:	4602      	mov	r2, r0
  40e632:	d002      	beq.n	40e63a <__sflush_r+0x122>
  40e634:	89ab      	ldrh	r3, [r5, #12]
  40e636:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40e638:	e78c      	b.n	40e554 <__sflush_r+0x3c>
  40e63a:	f8d8 3000 	ldr.w	r3, [r8]
  40e63e:	2b00      	cmp	r3, #0
  40e640:	d0f8      	beq.n	40e634 <__sflush_r+0x11c>
  40e642:	2b1d      	cmp	r3, #29
  40e644:	d001      	beq.n	40e64a <__sflush_r+0x132>
  40e646:	2b16      	cmp	r3, #22
  40e648:	d102      	bne.n	40e650 <__sflush_r+0x138>
  40e64a:	f8c8 6000 	str.w	r6, [r8]
  40e64e:	e7c1      	b.n	40e5d4 <__sflush_r+0xbc>
  40e650:	89ab      	ldrh	r3, [r5, #12]
  40e652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e656:	81ab      	strh	r3, [r5, #12]
  40e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e65c:	20400001 	.word	0x20400001

0040e660 <_fflush_r>:
  40e660:	b510      	push	{r4, lr}
  40e662:	4604      	mov	r4, r0
  40e664:	b082      	sub	sp, #8
  40e666:	b108      	cbz	r0, 40e66c <_fflush_r+0xc>
  40e668:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e66a:	b153      	cbz	r3, 40e682 <_fflush_r+0x22>
  40e66c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40e670:	b908      	cbnz	r0, 40e676 <_fflush_r+0x16>
  40e672:	b002      	add	sp, #8
  40e674:	bd10      	pop	{r4, pc}
  40e676:	4620      	mov	r0, r4
  40e678:	b002      	add	sp, #8
  40e67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e67e:	f7ff bf4b 	b.w	40e518 <__sflush_r>
  40e682:	9101      	str	r1, [sp, #4]
  40e684:	f000 f880 	bl	40e788 <__sinit>
  40e688:	9901      	ldr	r1, [sp, #4]
  40e68a:	e7ef      	b.n	40e66c <_fflush_r+0xc>

0040e68c <_cleanup_r>:
  40e68c:	4901      	ldr	r1, [pc, #4]	; (40e694 <_cleanup_r+0x8>)
  40e68e:	f000 bbaf 	b.w	40edf0 <_fwalk_reent>
  40e692:	bf00      	nop
  40e694:	00410921 	.word	0x00410921

0040e698 <__sinit.part.1>:
  40e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e69c:	4b35      	ldr	r3, [pc, #212]	; (40e774 <__sinit.part.1+0xdc>)
  40e69e:	6845      	ldr	r5, [r0, #4]
  40e6a0:	63c3      	str	r3, [r0, #60]	; 0x3c
  40e6a2:	2400      	movs	r4, #0
  40e6a4:	4607      	mov	r7, r0
  40e6a6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40e6aa:	2304      	movs	r3, #4
  40e6ac:	2103      	movs	r1, #3
  40e6ae:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40e6b2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40e6b6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40e6ba:	b083      	sub	sp, #12
  40e6bc:	602c      	str	r4, [r5, #0]
  40e6be:	606c      	str	r4, [r5, #4]
  40e6c0:	60ac      	str	r4, [r5, #8]
  40e6c2:	666c      	str	r4, [r5, #100]	; 0x64
  40e6c4:	81ec      	strh	r4, [r5, #14]
  40e6c6:	612c      	str	r4, [r5, #16]
  40e6c8:	616c      	str	r4, [r5, #20]
  40e6ca:	61ac      	str	r4, [r5, #24]
  40e6cc:	81ab      	strh	r3, [r5, #12]
  40e6ce:	4621      	mov	r1, r4
  40e6d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40e6d4:	2208      	movs	r2, #8
  40e6d6:	f7fa fd37 	bl	409148 <memset>
  40e6da:	68be      	ldr	r6, [r7, #8]
  40e6dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 40e778 <__sinit.part.1+0xe0>
  40e6e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40e77c <__sinit.part.1+0xe4>
  40e6e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40e780 <__sinit.part.1+0xe8>
  40e6e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40e784 <__sinit.part.1+0xec>
  40e6ec:	f8c5 b020 	str.w	fp, [r5, #32]
  40e6f0:	2301      	movs	r3, #1
  40e6f2:	2209      	movs	r2, #9
  40e6f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40e6f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40e6fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40e700:	61ed      	str	r5, [r5, #28]
  40e702:	4621      	mov	r1, r4
  40e704:	81f3      	strh	r3, [r6, #14]
  40e706:	81b2      	strh	r2, [r6, #12]
  40e708:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40e70c:	6034      	str	r4, [r6, #0]
  40e70e:	6074      	str	r4, [r6, #4]
  40e710:	60b4      	str	r4, [r6, #8]
  40e712:	6674      	str	r4, [r6, #100]	; 0x64
  40e714:	6134      	str	r4, [r6, #16]
  40e716:	6174      	str	r4, [r6, #20]
  40e718:	61b4      	str	r4, [r6, #24]
  40e71a:	2208      	movs	r2, #8
  40e71c:	9301      	str	r3, [sp, #4]
  40e71e:	f7fa fd13 	bl	409148 <memset>
  40e722:	68fd      	ldr	r5, [r7, #12]
  40e724:	61f6      	str	r6, [r6, #28]
  40e726:	2012      	movs	r0, #18
  40e728:	2202      	movs	r2, #2
  40e72a:	f8c6 b020 	str.w	fp, [r6, #32]
  40e72e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40e732:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40e736:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40e73a:	4621      	mov	r1, r4
  40e73c:	81a8      	strh	r0, [r5, #12]
  40e73e:	81ea      	strh	r2, [r5, #14]
  40e740:	602c      	str	r4, [r5, #0]
  40e742:	606c      	str	r4, [r5, #4]
  40e744:	60ac      	str	r4, [r5, #8]
  40e746:	666c      	str	r4, [r5, #100]	; 0x64
  40e748:	612c      	str	r4, [r5, #16]
  40e74a:	616c      	str	r4, [r5, #20]
  40e74c:	61ac      	str	r4, [r5, #24]
  40e74e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40e752:	2208      	movs	r2, #8
  40e754:	f7fa fcf8 	bl	409148 <memset>
  40e758:	9b01      	ldr	r3, [sp, #4]
  40e75a:	61ed      	str	r5, [r5, #28]
  40e75c:	f8c5 b020 	str.w	fp, [r5, #32]
  40e760:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40e764:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40e768:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40e76c:	63bb      	str	r3, [r7, #56]	; 0x38
  40e76e:	b003      	add	sp, #12
  40e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e774:	0040e68d 	.word	0x0040e68d
  40e778:	00410529 	.word	0x00410529
  40e77c:	0041054d 	.word	0x0041054d
  40e780:	00410589 	.word	0x00410589
  40e784:	004105a9 	.word	0x004105a9

0040e788 <__sinit>:
  40e788:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e78a:	b103      	cbz	r3, 40e78e <__sinit+0x6>
  40e78c:	4770      	bx	lr
  40e78e:	f7ff bf83 	b.w	40e698 <__sinit.part.1>
  40e792:	bf00      	nop

0040e794 <__sfp_lock_acquire>:
  40e794:	4770      	bx	lr
  40e796:	bf00      	nop

0040e798 <__sfp_lock_release>:
  40e798:	4770      	bx	lr
  40e79a:	bf00      	nop

0040e79c <__libc_fini_array>:
  40e79c:	b538      	push	{r3, r4, r5, lr}
  40e79e:	4d07      	ldr	r5, [pc, #28]	; (40e7bc <__libc_fini_array+0x20>)
  40e7a0:	4c07      	ldr	r4, [pc, #28]	; (40e7c0 <__libc_fini_array+0x24>)
  40e7a2:	1b2c      	subs	r4, r5, r4
  40e7a4:	10a4      	asrs	r4, r4, #2
  40e7a6:	d005      	beq.n	40e7b4 <__libc_fini_array+0x18>
  40e7a8:	3c01      	subs	r4, #1
  40e7aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e7ae:	4798      	blx	r3
  40e7b0:	2c00      	cmp	r4, #0
  40e7b2:	d1f9      	bne.n	40e7a8 <__libc_fini_array+0xc>
  40e7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e7b8:	f004 bc9a 	b.w	4130f0 <_fini>
  40e7bc:	00413100 	.word	0x00413100
  40e7c0:	004130fc 	.word	0x004130fc

0040e7c4 <__fputwc>:
  40e7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e7c8:	b082      	sub	sp, #8
  40e7ca:	4680      	mov	r8, r0
  40e7cc:	4689      	mov	r9, r1
  40e7ce:	4614      	mov	r4, r2
  40e7d0:	f000 fef0 	bl	40f5b4 <__locale_mb_cur_max>
  40e7d4:	2801      	cmp	r0, #1
  40e7d6:	d033      	beq.n	40e840 <__fputwc+0x7c>
  40e7d8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e7dc:	464a      	mov	r2, r9
  40e7de:	a901      	add	r1, sp, #4
  40e7e0:	4640      	mov	r0, r8
  40e7e2:	f001 ffbb 	bl	41075c <_wcrtomb_r>
  40e7e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e7ea:	4682      	mov	sl, r0
  40e7ec:	d021      	beq.n	40e832 <__fputwc+0x6e>
  40e7ee:	b388      	cbz	r0, 40e854 <__fputwc+0x90>
  40e7f0:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40e7f4:	2500      	movs	r5, #0
  40e7f6:	e008      	b.n	40e80a <__fputwc+0x46>
  40e7f8:	6823      	ldr	r3, [r4, #0]
  40e7fa:	1c5a      	adds	r2, r3, #1
  40e7fc:	6022      	str	r2, [r4, #0]
  40e7fe:	701e      	strb	r6, [r3, #0]
  40e800:	3501      	adds	r5, #1
  40e802:	4555      	cmp	r5, sl
  40e804:	d226      	bcs.n	40e854 <__fputwc+0x90>
  40e806:	ab01      	add	r3, sp, #4
  40e808:	5d5e      	ldrb	r6, [r3, r5]
  40e80a:	68a3      	ldr	r3, [r4, #8]
  40e80c:	3b01      	subs	r3, #1
  40e80e:	2b00      	cmp	r3, #0
  40e810:	60a3      	str	r3, [r4, #8]
  40e812:	daf1      	bge.n	40e7f8 <__fputwc+0x34>
  40e814:	69a7      	ldr	r7, [r4, #24]
  40e816:	42bb      	cmp	r3, r7
  40e818:	4631      	mov	r1, r6
  40e81a:	4622      	mov	r2, r4
  40e81c:	4640      	mov	r0, r8
  40e81e:	db01      	blt.n	40e824 <__fputwc+0x60>
  40e820:	2e0a      	cmp	r6, #10
  40e822:	d1e9      	bne.n	40e7f8 <__fputwc+0x34>
  40e824:	f001 ff44 	bl	4106b0 <__swbuf_r>
  40e828:	1c43      	adds	r3, r0, #1
  40e82a:	d1e9      	bne.n	40e800 <__fputwc+0x3c>
  40e82c:	b002      	add	sp, #8
  40e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e832:	89a3      	ldrh	r3, [r4, #12]
  40e834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e838:	81a3      	strh	r3, [r4, #12]
  40e83a:	b002      	add	sp, #8
  40e83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e840:	f109 33ff 	add.w	r3, r9, #4294967295
  40e844:	2bfe      	cmp	r3, #254	; 0xfe
  40e846:	d8c7      	bhi.n	40e7d8 <__fputwc+0x14>
  40e848:	fa5f f689 	uxtb.w	r6, r9
  40e84c:	4682      	mov	sl, r0
  40e84e:	f88d 6004 	strb.w	r6, [sp, #4]
  40e852:	e7cf      	b.n	40e7f4 <__fputwc+0x30>
  40e854:	4648      	mov	r0, r9
  40e856:	b002      	add	sp, #8
  40e858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040e85c <_fputwc_r>:
  40e85c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40e860:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40e864:	d10a      	bne.n	40e87c <_fputwc_r+0x20>
  40e866:	b410      	push	{r4}
  40e868:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40e86a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e86e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40e872:	6654      	str	r4, [r2, #100]	; 0x64
  40e874:	8193      	strh	r3, [r2, #12]
  40e876:	bc10      	pop	{r4}
  40e878:	f7ff bfa4 	b.w	40e7c4 <__fputwc>
  40e87c:	f7ff bfa2 	b.w	40e7c4 <__fputwc>

0040e880 <_malloc_trim_r>:
  40e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e882:	4f23      	ldr	r7, [pc, #140]	; (40e910 <_malloc_trim_r+0x90>)
  40e884:	460c      	mov	r4, r1
  40e886:	4606      	mov	r6, r0
  40e888:	f7fa fcac 	bl	4091e4 <__malloc_lock>
  40e88c:	68bb      	ldr	r3, [r7, #8]
  40e88e:	685d      	ldr	r5, [r3, #4]
  40e890:	f025 0503 	bic.w	r5, r5, #3
  40e894:	1b29      	subs	r1, r5, r4
  40e896:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40e89a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40e89e:	f021 010f 	bic.w	r1, r1, #15
  40e8a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40e8a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40e8aa:	db07      	blt.n	40e8bc <_malloc_trim_r+0x3c>
  40e8ac:	2100      	movs	r1, #0
  40e8ae:	4630      	mov	r0, r6
  40e8b0:	f7fa fc9c 	bl	4091ec <_sbrk_r>
  40e8b4:	68bb      	ldr	r3, [r7, #8]
  40e8b6:	442b      	add	r3, r5
  40e8b8:	4298      	cmp	r0, r3
  40e8ba:	d004      	beq.n	40e8c6 <_malloc_trim_r+0x46>
  40e8bc:	4630      	mov	r0, r6
  40e8be:	f7fa fc93 	bl	4091e8 <__malloc_unlock>
  40e8c2:	2000      	movs	r0, #0
  40e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e8c6:	4261      	negs	r1, r4
  40e8c8:	4630      	mov	r0, r6
  40e8ca:	f7fa fc8f 	bl	4091ec <_sbrk_r>
  40e8ce:	3001      	adds	r0, #1
  40e8d0:	d00d      	beq.n	40e8ee <_malloc_trim_r+0x6e>
  40e8d2:	4b10      	ldr	r3, [pc, #64]	; (40e914 <_malloc_trim_r+0x94>)
  40e8d4:	68ba      	ldr	r2, [r7, #8]
  40e8d6:	6819      	ldr	r1, [r3, #0]
  40e8d8:	1b2d      	subs	r5, r5, r4
  40e8da:	f045 0501 	orr.w	r5, r5, #1
  40e8de:	4630      	mov	r0, r6
  40e8e0:	1b09      	subs	r1, r1, r4
  40e8e2:	6055      	str	r5, [r2, #4]
  40e8e4:	6019      	str	r1, [r3, #0]
  40e8e6:	f7fa fc7f 	bl	4091e8 <__malloc_unlock>
  40e8ea:	2001      	movs	r0, #1
  40e8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e8ee:	2100      	movs	r1, #0
  40e8f0:	4630      	mov	r0, r6
  40e8f2:	f7fa fc7b 	bl	4091ec <_sbrk_r>
  40e8f6:	68ba      	ldr	r2, [r7, #8]
  40e8f8:	1a83      	subs	r3, r0, r2
  40e8fa:	2b0f      	cmp	r3, #15
  40e8fc:	ddde      	ble.n	40e8bc <_malloc_trim_r+0x3c>
  40e8fe:	4c06      	ldr	r4, [pc, #24]	; (40e918 <_malloc_trim_r+0x98>)
  40e900:	4904      	ldr	r1, [pc, #16]	; (40e914 <_malloc_trim_r+0x94>)
  40e902:	6824      	ldr	r4, [r4, #0]
  40e904:	f043 0301 	orr.w	r3, r3, #1
  40e908:	1b00      	subs	r0, r0, r4
  40e90a:	6053      	str	r3, [r2, #4]
  40e90c:	6008      	str	r0, [r1, #0]
  40e90e:	e7d5      	b.n	40e8bc <_malloc_trim_r+0x3c>
  40e910:	2000045c 	.word	0x2000045c
  40e914:	2000ad30 	.word	0x2000ad30
  40e918:	20000868 	.word	0x20000868

0040e91c <_free_r>:
  40e91c:	2900      	cmp	r1, #0
  40e91e:	d045      	beq.n	40e9ac <_free_r+0x90>
  40e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e924:	460d      	mov	r5, r1
  40e926:	4680      	mov	r8, r0
  40e928:	f7fa fc5c 	bl	4091e4 <__malloc_lock>
  40e92c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40e930:	496a      	ldr	r1, [pc, #424]	; (40eadc <_free_r+0x1c0>)
  40e932:	f027 0301 	bic.w	r3, r7, #1
  40e936:	f1a5 0408 	sub.w	r4, r5, #8
  40e93a:	18e2      	adds	r2, r4, r3
  40e93c:	688e      	ldr	r6, [r1, #8]
  40e93e:	6850      	ldr	r0, [r2, #4]
  40e940:	42b2      	cmp	r2, r6
  40e942:	f020 0003 	bic.w	r0, r0, #3
  40e946:	d062      	beq.n	40ea0e <_free_r+0xf2>
  40e948:	07fe      	lsls	r6, r7, #31
  40e94a:	6050      	str	r0, [r2, #4]
  40e94c:	d40b      	bmi.n	40e966 <_free_r+0x4a>
  40e94e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40e952:	1be4      	subs	r4, r4, r7
  40e954:	f101 0e08 	add.w	lr, r1, #8
  40e958:	68a5      	ldr	r5, [r4, #8]
  40e95a:	4575      	cmp	r5, lr
  40e95c:	443b      	add	r3, r7
  40e95e:	d06f      	beq.n	40ea40 <_free_r+0x124>
  40e960:	68e7      	ldr	r7, [r4, #12]
  40e962:	60ef      	str	r7, [r5, #12]
  40e964:	60bd      	str	r5, [r7, #8]
  40e966:	1815      	adds	r5, r2, r0
  40e968:	686d      	ldr	r5, [r5, #4]
  40e96a:	07ed      	lsls	r5, r5, #31
  40e96c:	d542      	bpl.n	40e9f4 <_free_r+0xd8>
  40e96e:	f043 0201 	orr.w	r2, r3, #1
  40e972:	6062      	str	r2, [r4, #4]
  40e974:	50e3      	str	r3, [r4, r3]
  40e976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e97a:	d218      	bcs.n	40e9ae <_free_r+0x92>
  40e97c:	08db      	lsrs	r3, r3, #3
  40e97e:	1c5a      	adds	r2, r3, #1
  40e980:	684d      	ldr	r5, [r1, #4]
  40e982:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40e986:	60a7      	str	r7, [r4, #8]
  40e988:	2001      	movs	r0, #1
  40e98a:	109b      	asrs	r3, r3, #2
  40e98c:	fa00 f303 	lsl.w	r3, r0, r3
  40e990:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40e994:	431d      	orrs	r5, r3
  40e996:	3808      	subs	r0, #8
  40e998:	60e0      	str	r0, [r4, #12]
  40e99a:	604d      	str	r5, [r1, #4]
  40e99c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40e9a0:	60fc      	str	r4, [r7, #12]
  40e9a2:	4640      	mov	r0, r8
  40e9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e9a8:	f7fa bc1e 	b.w	4091e8 <__malloc_unlock>
  40e9ac:	4770      	bx	lr
  40e9ae:	0a5a      	lsrs	r2, r3, #9
  40e9b0:	2a04      	cmp	r2, #4
  40e9b2:	d853      	bhi.n	40ea5c <_free_r+0x140>
  40e9b4:	099a      	lsrs	r2, r3, #6
  40e9b6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40e9ba:	007f      	lsls	r7, r7, #1
  40e9bc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40e9c0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40e9c4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40e9c8:	4944      	ldr	r1, [pc, #272]	; (40eadc <_free_r+0x1c0>)
  40e9ca:	3808      	subs	r0, #8
  40e9cc:	4290      	cmp	r0, r2
  40e9ce:	d04d      	beq.n	40ea6c <_free_r+0x150>
  40e9d0:	6851      	ldr	r1, [r2, #4]
  40e9d2:	f021 0103 	bic.w	r1, r1, #3
  40e9d6:	428b      	cmp	r3, r1
  40e9d8:	d202      	bcs.n	40e9e0 <_free_r+0xc4>
  40e9da:	6892      	ldr	r2, [r2, #8]
  40e9dc:	4290      	cmp	r0, r2
  40e9de:	d1f7      	bne.n	40e9d0 <_free_r+0xb4>
  40e9e0:	68d0      	ldr	r0, [r2, #12]
  40e9e2:	60e0      	str	r0, [r4, #12]
  40e9e4:	60a2      	str	r2, [r4, #8]
  40e9e6:	6084      	str	r4, [r0, #8]
  40e9e8:	60d4      	str	r4, [r2, #12]
  40e9ea:	4640      	mov	r0, r8
  40e9ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e9f0:	f7fa bbfa 	b.w	4091e8 <__malloc_unlock>
  40e9f4:	6895      	ldr	r5, [r2, #8]
  40e9f6:	4f3a      	ldr	r7, [pc, #232]	; (40eae0 <_free_r+0x1c4>)
  40e9f8:	42bd      	cmp	r5, r7
  40e9fa:	4403      	add	r3, r0
  40e9fc:	d03f      	beq.n	40ea7e <_free_r+0x162>
  40e9fe:	68d0      	ldr	r0, [r2, #12]
  40ea00:	60e8      	str	r0, [r5, #12]
  40ea02:	f043 0201 	orr.w	r2, r3, #1
  40ea06:	6085      	str	r5, [r0, #8]
  40ea08:	6062      	str	r2, [r4, #4]
  40ea0a:	50e3      	str	r3, [r4, r3]
  40ea0c:	e7b3      	b.n	40e976 <_free_r+0x5a>
  40ea0e:	07ff      	lsls	r7, r7, #31
  40ea10:	4403      	add	r3, r0
  40ea12:	d407      	bmi.n	40ea24 <_free_r+0x108>
  40ea14:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40ea18:	1aa4      	subs	r4, r4, r2
  40ea1a:	4413      	add	r3, r2
  40ea1c:	68a0      	ldr	r0, [r4, #8]
  40ea1e:	68e2      	ldr	r2, [r4, #12]
  40ea20:	60c2      	str	r2, [r0, #12]
  40ea22:	6090      	str	r0, [r2, #8]
  40ea24:	4a2f      	ldr	r2, [pc, #188]	; (40eae4 <_free_r+0x1c8>)
  40ea26:	6812      	ldr	r2, [r2, #0]
  40ea28:	f043 0001 	orr.w	r0, r3, #1
  40ea2c:	4293      	cmp	r3, r2
  40ea2e:	6060      	str	r0, [r4, #4]
  40ea30:	608c      	str	r4, [r1, #8]
  40ea32:	d3b6      	bcc.n	40e9a2 <_free_r+0x86>
  40ea34:	4b2c      	ldr	r3, [pc, #176]	; (40eae8 <_free_r+0x1cc>)
  40ea36:	4640      	mov	r0, r8
  40ea38:	6819      	ldr	r1, [r3, #0]
  40ea3a:	f7ff ff21 	bl	40e880 <_malloc_trim_r>
  40ea3e:	e7b0      	b.n	40e9a2 <_free_r+0x86>
  40ea40:	1811      	adds	r1, r2, r0
  40ea42:	6849      	ldr	r1, [r1, #4]
  40ea44:	07c9      	lsls	r1, r1, #31
  40ea46:	d444      	bmi.n	40ead2 <_free_r+0x1b6>
  40ea48:	6891      	ldr	r1, [r2, #8]
  40ea4a:	68d2      	ldr	r2, [r2, #12]
  40ea4c:	60ca      	str	r2, [r1, #12]
  40ea4e:	4403      	add	r3, r0
  40ea50:	f043 0001 	orr.w	r0, r3, #1
  40ea54:	6091      	str	r1, [r2, #8]
  40ea56:	6060      	str	r0, [r4, #4]
  40ea58:	50e3      	str	r3, [r4, r3]
  40ea5a:	e7a2      	b.n	40e9a2 <_free_r+0x86>
  40ea5c:	2a14      	cmp	r2, #20
  40ea5e:	d817      	bhi.n	40ea90 <_free_r+0x174>
  40ea60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40ea64:	007f      	lsls	r7, r7, #1
  40ea66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40ea6a:	e7a9      	b.n	40e9c0 <_free_r+0xa4>
  40ea6c:	10aa      	asrs	r2, r5, #2
  40ea6e:	684b      	ldr	r3, [r1, #4]
  40ea70:	2501      	movs	r5, #1
  40ea72:	fa05 f202 	lsl.w	r2, r5, r2
  40ea76:	4313      	orrs	r3, r2
  40ea78:	604b      	str	r3, [r1, #4]
  40ea7a:	4602      	mov	r2, r0
  40ea7c:	e7b1      	b.n	40e9e2 <_free_r+0xc6>
  40ea7e:	f043 0201 	orr.w	r2, r3, #1
  40ea82:	614c      	str	r4, [r1, #20]
  40ea84:	610c      	str	r4, [r1, #16]
  40ea86:	60e5      	str	r5, [r4, #12]
  40ea88:	60a5      	str	r5, [r4, #8]
  40ea8a:	6062      	str	r2, [r4, #4]
  40ea8c:	50e3      	str	r3, [r4, r3]
  40ea8e:	e788      	b.n	40e9a2 <_free_r+0x86>
  40ea90:	2a54      	cmp	r2, #84	; 0x54
  40ea92:	d806      	bhi.n	40eaa2 <_free_r+0x186>
  40ea94:	0b1a      	lsrs	r2, r3, #12
  40ea96:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40ea9a:	007f      	lsls	r7, r7, #1
  40ea9c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40eaa0:	e78e      	b.n	40e9c0 <_free_r+0xa4>
  40eaa2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40eaa6:	d806      	bhi.n	40eab6 <_free_r+0x19a>
  40eaa8:	0bda      	lsrs	r2, r3, #15
  40eaaa:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40eaae:	007f      	lsls	r7, r7, #1
  40eab0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40eab4:	e784      	b.n	40e9c0 <_free_r+0xa4>
  40eab6:	f240 5054 	movw	r0, #1364	; 0x554
  40eaba:	4282      	cmp	r2, r0
  40eabc:	d806      	bhi.n	40eacc <_free_r+0x1b0>
  40eabe:	0c9a      	lsrs	r2, r3, #18
  40eac0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40eac4:	007f      	lsls	r7, r7, #1
  40eac6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40eaca:	e779      	b.n	40e9c0 <_free_r+0xa4>
  40eacc:	27fe      	movs	r7, #254	; 0xfe
  40eace:	257e      	movs	r5, #126	; 0x7e
  40ead0:	e776      	b.n	40e9c0 <_free_r+0xa4>
  40ead2:	f043 0201 	orr.w	r2, r3, #1
  40ead6:	6062      	str	r2, [r4, #4]
  40ead8:	50e3      	str	r3, [r4, r3]
  40eada:	e762      	b.n	40e9a2 <_free_r+0x86>
  40eadc:	2000045c 	.word	0x2000045c
  40eae0:	20000464 	.word	0x20000464
  40eae4:	20000864 	.word	0x20000864
  40eae8:	2000ad2c 	.word	0x2000ad2c

0040eaec <__sfvwrite_r>:
  40eaec:	6893      	ldr	r3, [r2, #8]
  40eaee:	2b00      	cmp	r3, #0
  40eaf0:	d076      	beq.n	40ebe0 <__sfvwrite_r+0xf4>
  40eaf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eaf6:	898b      	ldrh	r3, [r1, #12]
  40eaf8:	b085      	sub	sp, #20
  40eafa:	460c      	mov	r4, r1
  40eafc:	0719      	lsls	r1, r3, #28
  40eafe:	9001      	str	r0, [sp, #4]
  40eb00:	4616      	mov	r6, r2
  40eb02:	d529      	bpl.n	40eb58 <__sfvwrite_r+0x6c>
  40eb04:	6922      	ldr	r2, [r4, #16]
  40eb06:	b33a      	cbz	r2, 40eb58 <__sfvwrite_r+0x6c>
  40eb08:	f003 0802 	and.w	r8, r3, #2
  40eb0c:	fa1f f088 	uxth.w	r0, r8
  40eb10:	6835      	ldr	r5, [r6, #0]
  40eb12:	2800      	cmp	r0, #0
  40eb14:	d02f      	beq.n	40eb76 <__sfvwrite_r+0x8a>
  40eb16:	f04f 0900 	mov.w	r9, #0
  40eb1a:	4fb4      	ldr	r7, [pc, #720]	; (40edec <__sfvwrite_r+0x300>)
  40eb1c:	46c8      	mov	r8, r9
  40eb1e:	46b2      	mov	sl, r6
  40eb20:	45b8      	cmp	r8, r7
  40eb22:	4643      	mov	r3, r8
  40eb24:	464a      	mov	r2, r9
  40eb26:	bf28      	it	cs
  40eb28:	463b      	movcs	r3, r7
  40eb2a:	9801      	ldr	r0, [sp, #4]
  40eb2c:	f1b8 0f00 	cmp.w	r8, #0
  40eb30:	d050      	beq.n	40ebd4 <__sfvwrite_r+0xe8>
  40eb32:	69e1      	ldr	r1, [r4, #28]
  40eb34:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40eb36:	47b0      	blx	r6
  40eb38:	2800      	cmp	r0, #0
  40eb3a:	dd71      	ble.n	40ec20 <__sfvwrite_r+0x134>
  40eb3c:	f8da 3008 	ldr.w	r3, [sl, #8]
  40eb40:	1a1b      	subs	r3, r3, r0
  40eb42:	4481      	add	r9, r0
  40eb44:	ebc0 0808 	rsb	r8, r0, r8
  40eb48:	f8ca 3008 	str.w	r3, [sl, #8]
  40eb4c:	2b00      	cmp	r3, #0
  40eb4e:	d1e7      	bne.n	40eb20 <__sfvwrite_r+0x34>
  40eb50:	2000      	movs	r0, #0
  40eb52:	b005      	add	sp, #20
  40eb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb58:	4621      	mov	r1, r4
  40eb5a:	9801      	ldr	r0, [sp, #4]
  40eb5c:	f7fe fca8 	bl	40d4b0 <__swsetup_r>
  40eb60:	2800      	cmp	r0, #0
  40eb62:	f040 813a 	bne.w	40edda <__sfvwrite_r+0x2ee>
  40eb66:	89a3      	ldrh	r3, [r4, #12]
  40eb68:	6835      	ldr	r5, [r6, #0]
  40eb6a:	f003 0802 	and.w	r8, r3, #2
  40eb6e:	fa1f f088 	uxth.w	r0, r8
  40eb72:	2800      	cmp	r0, #0
  40eb74:	d1cf      	bne.n	40eb16 <__sfvwrite_r+0x2a>
  40eb76:	f013 0901 	ands.w	r9, r3, #1
  40eb7a:	d15b      	bne.n	40ec34 <__sfvwrite_r+0x148>
  40eb7c:	464f      	mov	r7, r9
  40eb7e:	9602      	str	r6, [sp, #8]
  40eb80:	b31f      	cbz	r7, 40ebca <__sfvwrite_r+0xde>
  40eb82:	059a      	lsls	r2, r3, #22
  40eb84:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40eb88:	d52c      	bpl.n	40ebe4 <__sfvwrite_r+0xf8>
  40eb8a:	4547      	cmp	r7, r8
  40eb8c:	46c2      	mov	sl, r8
  40eb8e:	f0c0 80a4 	bcc.w	40ecda <__sfvwrite_r+0x1ee>
  40eb92:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40eb96:	f040 80b1 	bne.w	40ecfc <__sfvwrite_r+0x210>
  40eb9a:	6820      	ldr	r0, [r4, #0]
  40eb9c:	4652      	mov	r2, sl
  40eb9e:	4649      	mov	r1, r9
  40eba0:	f000 fe08 	bl	40f7b4 <memmove>
  40eba4:	68a0      	ldr	r0, [r4, #8]
  40eba6:	6823      	ldr	r3, [r4, #0]
  40eba8:	ebc8 0000 	rsb	r0, r8, r0
  40ebac:	4453      	add	r3, sl
  40ebae:	60a0      	str	r0, [r4, #8]
  40ebb0:	6023      	str	r3, [r4, #0]
  40ebb2:	4638      	mov	r0, r7
  40ebb4:	9a02      	ldr	r2, [sp, #8]
  40ebb6:	6893      	ldr	r3, [r2, #8]
  40ebb8:	1a1b      	subs	r3, r3, r0
  40ebba:	4481      	add	r9, r0
  40ebbc:	1a3f      	subs	r7, r7, r0
  40ebbe:	6093      	str	r3, [r2, #8]
  40ebc0:	2b00      	cmp	r3, #0
  40ebc2:	d0c5      	beq.n	40eb50 <__sfvwrite_r+0x64>
  40ebc4:	89a3      	ldrh	r3, [r4, #12]
  40ebc6:	2f00      	cmp	r7, #0
  40ebc8:	d1db      	bne.n	40eb82 <__sfvwrite_r+0x96>
  40ebca:	f8d5 9000 	ldr.w	r9, [r5]
  40ebce:	686f      	ldr	r7, [r5, #4]
  40ebd0:	3508      	adds	r5, #8
  40ebd2:	e7d5      	b.n	40eb80 <__sfvwrite_r+0x94>
  40ebd4:	f8d5 9000 	ldr.w	r9, [r5]
  40ebd8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40ebdc:	3508      	adds	r5, #8
  40ebde:	e79f      	b.n	40eb20 <__sfvwrite_r+0x34>
  40ebe0:	2000      	movs	r0, #0
  40ebe2:	4770      	bx	lr
  40ebe4:	6820      	ldr	r0, [r4, #0]
  40ebe6:	6923      	ldr	r3, [r4, #16]
  40ebe8:	4298      	cmp	r0, r3
  40ebea:	d803      	bhi.n	40ebf4 <__sfvwrite_r+0x108>
  40ebec:	6961      	ldr	r1, [r4, #20]
  40ebee:	428f      	cmp	r7, r1
  40ebf0:	f080 80b7 	bcs.w	40ed62 <__sfvwrite_r+0x276>
  40ebf4:	45b8      	cmp	r8, r7
  40ebf6:	bf28      	it	cs
  40ebf8:	46b8      	movcs	r8, r7
  40ebfa:	4642      	mov	r2, r8
  40ebfc:	4649      	mov	r1, r9
  40ebfe:	f000 fdd9 	bl	40f7b4 <memmove>
  40ec02:	68a3      	ldr	r3, [r4, #8]
  40ec04:	6822      	ldr	r2, [r4, #0]
  40ec06:	ebc8 0303 	rsb	r3, r8, r3
  40ec0a:	4442      	add	r2, r8
  40ec0c:	60a3      	str	r3, [r4, #8]
  40ec0e:	6022      	str	r2, [r4, #0]
  40ec10:	2b00      	cmp	r3, #0
  40ec12:	d149      	bne.n	40eca8 <__sfvwrite_r+0x1bc>
  40ec14:	4621      	mov	r1, r4
  40ec16:	9801      	ldr	r0, [sp, #4]
  40ec18:	f7ff fd22 	bl	40e660 <_fflush_r>
  40ec1c:	2800      	cmp	r0, #0
  40ec1e:	d043      	beq.n	40eca8 <__sfvwrite_r+0x1bc>
  40ec20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ec24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ec28:	f04f 30ff 	mov.w	r0, #4294967295
  40ec2c:	81a3      	strh	r3, [r4, #12]
  40ec2e:	b005      	add	sp, #20
  40ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ec34:	4680      	mov	r8, r0
  40ec36:	9002      	str	r0, [sp, #8]
  40ec38:	4682      	mov	sl, r0
  40ec3a:	4681      	mov	r9, r0
  40ec3c:	f1b9 0f00 	cmp.w	r9, #0
  40ec40:	d02a      	beq.n	40ec98 <__sfvwrite_r+0x1ac>
  40ec42:	9b02      	ldr	r3, [sp, #8]
  40ec44:	2b00      	cmp	r3, #0
  40ec46:	d04c      	beq.n	40ece2 <__sfvwrite_r+0x1f6>
  40ec48:	6820      	ldr	r0, [r4, #0]
  40ec4a:	6923      	ldr	r3, [r4, #16]
  40ec4c:	6962      	ldr	r2, [r4, #20]
  40ec4e:	45c8      	cmp	r8, r9
  40ec50:	46c3      	mov	fp, r8
  40ec52:	bf28      	it	cs
  40ec54:	46cb      	movcs	fp, r9
  40ec56:	4298      	cmp	r0, r3
  40ec58:	465f      	mov	r7, fp
  40ec5a:	d904      	bls.n	40ec66 <__sfvwrite_r+0x17a>
  40ec5c:	68a3      	ldr	r3, [r4, #8]
  40ec5e:	4413      	add	r3, r2
  40ec60:	459b      	cmp	fp, r3
  40ec62:	f300 8090 	bgt.w	40ed86 <__sfvwrite_r+0x29a>
  40ec66:	4593      	cmp	fp, r2
  40ec68:	db20      	blt.n	40ecac <__sfvwrite_r+0x1c0>
  40ec6a:	4613      	mov	r3, r2
  40ec6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ec6e:	69e1      	ldr	r1, [r4, #28]
  40ec70:	9801      	ldr	r0, [sp, #4]
  40ec72:	4652      	mov	r2, sl
  40ec74:	47b8      	blx	r7
  40ec76:	1e07      	subs	r7, r0, #0
  40ec78:	ddd2      	ble.n	40ec20 <__sfvwrite_r+0x134>
  40ec7a:	ebb8 0807 	subs.w	r8, r8, r7
  40ec7e:	d023      	beq.n	40ecc8 <__sfvwrite_r+0x1dc>
  40ec80:	68b3      	ldr	r3, [r6, #8]
  40ec82:	1bdb      	subs	r3, r3, r7
  40ec84:	44ba      	add	sl, r7
  40ec86:	ebc7 0909 	rsb	r9, r7, r9
  40ec8a:	60b3      	str	r3, [r6, #8]
  40ec8c:	2b00      	cmp	r3, #0
  40ec8e:	f43f af5f 	beq.w	40eb50 <__sfvwrite_r+0x64>
  40ec92:	f1b9 0f00 	cmp.w	r9, #0
  40ec96:	d1d4      	bne.n	40ec42 <__sfvwrite_r+0x156>
  40ec98:	2300      	movs	r3, #0
  40ec9a:	f8d5 a000 	ldr.w	sl, [r5]
  40ec9e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40eca2:	9302      	str	r3, [sp, #8]
  40eca4:	3508      	adds	r5, #8
  40eca6:	e7c9      	b.n	40ec3c <__sfvwrite_r+0x150>
  40eca8:	4640      	mov	r0, r8
  40ecaa:	e783      	b.n	40ebb4 <__sfvwrite_r+0xc8>
  40ecac:	465a      	mov	r2, fp
  40ecae:	4651      	mov	r1, sl
  40ecb0:	f000 fd80 	bl	40f7b4 <memmove>
  40ecb4:	68a2      	ldr	r2, [r4, #8]
  40ecb6:	6823      	ldr	r3, [r4, #0]
  40ecb8:	ebcb 0202 	rsb	r2, fp, r2
  40ecbc:	445b      	add	r3, fp
  40ecbe:	ebb8 0807 	subs.w	r8, r8, r7
  40ecc2:	60a2      	str	r2, [r4, #8]
  40ecc4:	6023      	str	r3, [r4, #0]
  40ecc6:	d1db      	bne.n	40ec80 <__sfvwrite_r+0x194>
  40ecc8:	4621      	mov	r1, r4
  40ecca:	9801      	ldr	r0, [sp, #4]
  40eccc:	f7ff fcc8 	bl	40e660 <_fflush_r>
  40ecd0:	2800      	cmp	r0, #0
  40ecd2:	d1a5      	bne.n	40ec20 <__sfvwrite_r+0x134>
  40ecd4:	f8cd 8008 	str.w	r8, [sp, #8]
  40ecd8:	e7d2      	b.n	40ec80 <__sfvwrite_r+0x194>
  40ecda:	6820      	ldr	r0, [r4, #0]
  40ecdc:	46b8      	mov	r8, r7
  40ecde:	46ba      	mov	sl, r7
  40ece0:	e75c      	b.n	40eb9c <__sfvwrite_r+0xb0>
  40ece2:	464a      	mov	r2, r9
  40ece4:	210a      	movs	r1, #10
  40ece6:	4650      	mov	r0, sl
  40ece8:	f000 fce2 	bl	40f6b0 <memchr>
  40ecec:	2800      	cmp	r0, #0
  40ecee:	d06f      	beq.n	40edd0 <__sfvwrite_r+0x2e4>
  40ecf0:	3001      	adds	r0, #1
  40ecf2:	2301      	movs	r3, #1
  40ecf4:	ebca 0800 	rsb	r8, sl, r0
  40ecf8:	9302      	str	r3, [sp, #8]
  40ecfa:	e7a5      	b.n	40ec48 <__sfvwrite_r+0x15c>
  40ecfc:	6962      	ldr	r2, [r4, #20]
  40ecfe:	6820      	ldr	r0, [r4, #0]
  40ed00:	6921      	ldr	r1, [r4, #16]
  40ed02:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40ed06:	ebc1 0a00 	rsb	sl, r1, r0
  40ed0a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40ed0e:	f10a 0001 	add.w	r0, sl, #1
  40ed12:	ea4f 0868 	mov.w	r8, r8, asr #1
  40ed16:	4438      	add	r0, r7
  40ed18:	4540      	cmp	r0, r8
  40ed1a:	4642      	mov	r2, r8
  40ed1c:	bf84      	itt	hi
  40ed1e:	4680      	movhi	r8, r0
  40ed20:	4642      	movhi	r2, r8
  40ed22:	055b      	lsls	r3, r3, #21
  40ed24:	d542      	bpl.n	40edac <__sfvwrite_r+0x2c0>
  40ed26:	4611      	mov	r1, r2
  40ed28:	9801      	ldr	r0, [sp, #4]
  40ed2a:	f7f9 febb 	bl	408aa4 <_malloc_r>
  40ed2e:	4683      	mov	fp, r0
  40ed30:	2800      	cmp	r0, #0
  40ed32:	d055      	beq.n	40ede0 <__sfvwrite_r+0x2f4>
  40ed34:	4652      	mov	r2, sl
  40ed36:	6921      	ldr	r1, [r4, #16]
  40ed38:	f7fa f96c 	bl	409014 <memcpy>
  40ed3c:	89a3      	ldrh	r3, [r4, #12]
  40ed3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40ed42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ed46:	81a3      	strh	r3, [r4, #12]
  40ed48:	ebca 0308 	rsb	r3, sl, r8
  40ed4c:	eb0b 000a 	add.w	r0, fp, sl
  40ed50:	f8c4 8014 	str.w	r8, [r4, #20]
  40ed54:	f8c4 b010 	str.w	fp, [r4, #16]
  40ed58:	6020      	str	r0, [r4, #0]
  40ed5a:	60a3      	str	r3, [r4, #8]
  40ed5c:	46b8      	mov	r8, r7
  40ed5e:	46ba      	mov	sl, r7
  40ed60:	e71c      	b.n	40eb9c <__sfvwrite_r+0xb0>
  40ed62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40ed66:	42bb      	cmp	r3, r7
  40ed68:	bf28      	it	cs
  40ed6a:	463b      	movcs	r3, r7
  40ed6c:	464a      	mov	r2, r9
  40ed6e:	fb93 f3f1 	sdiv	r3, r3, r1
  40ed72:	9801      	ldr	r0, [sp, #4]
  40ed74:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40ed76:	fb01 f303 	mul.w	r3, r1, r3
  40ed7a:	69e1      	ldr	r1, [r4, #28]
  40ed7c:	47b0      	blx	r6
  40ed7e:	2800      	cmp	r0, #0
  40ed80:	f73f af18 	bgt.w	40ebb4 <__sfvwrite_r+0xc8>
  40ed84:	e74c      	b.n	40ec20 <__sfvwrite_r+0x134>
  40ed86:	461a      	mov	r2, r3
  40ed88:	4651      	mov	r1, sl
  40ed8a:	9303      	str	r3, [sp, #12]
  40ed8c:	f000 fd12 	bl	40f7b4 <memmove>
  40ed90:	6822      	ldr	r2, [r4, #0]
  40ed92:	9b03      	ldr	r3, [sp, #12]
  40ed94:	9801      	ldr	r0, [sp, #4]
  40ed96:	441a      	add	r2, r3
  40ed98:	6022      	str	r2, [r4, #0]
  40ed9a:	4621      	mov	r1, r4
  40ed9c:	f7ff fc60 	bl	40e660 <_fflush_r>
  40eda0:	9b03      	ldr	r3, [sp, #12]
  40eda2:	2800      	cmp	r0, #0
  40eda4:	f47f af3c 	bne.w	40ec20 <__sfvwrite_r+0x134>
  40eda8:	461f      	mov	r7, r3
  40edaa:	e766      	b.n	40ec7a <__sfvwrite_r+0x18e>
  40edac:	9801      	ldr	r0, [sp, #4]
  40edae:	f001 f9c7 	bl	410140 <_realloc_r>
  40edb2:	4683      	mov	fp, r0
  40edb4:	2800      	cmp	r0, #0
  40edb6:	d1c7      	bne.n	40ed48 <__sfvwrite_r+0x25c>
  40edb8:	9d01      	ldr	r5, [sp, #4]
  40edba:	6921      	ldr	r1, [r4, #16]
  40edbc:	4628      	mov	r0, r5
  40edbe:	f7ff fdad 	bl	40e91c <_free_r>
  40edc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40edc6:	220c      	movs	r2, #12
  40edc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40edcc:	602a      	str	r2, [r5, #0]
  40edce:	e729      	b.n	40ec24 <__sfvwrite_r+0x138>
  40edd0:	2301      	movs	r3, #1
  40edd2:	f109 0801 	add.w	r8, r9, #1
  40edd6:	9302      	str	r3, [sp, #8]
  40edd8:	e736      	b.n	40ec48 <__sfvwrite_r+0x15c>
  40edda:	f04f 30ff 	mov.w	r0, #4294967295
  40edde:	e6b8      	b.n	40eb52 <__sfvwrite_r+0x66>
  40ede0:	9a01      	ldr	r2, [sp, #4]
  40ede2:	230c      	movs	r3, #12
  40ede4:	6013      	str	r3, [r2, #0]
  40ede6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40edea:	e71b      	b.n	40ec24 <__sfvwrite_r+0x138>
  40edec:	7ffffc00 	.word	0x7ffffc00

0040edf0 <_fwalk_reent>:
  40edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40edf4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40edf8:	d01f      	beq.n	40ee3a <_fwalk_reent+0x4a>
  40edfa:	4688      	mov	r8, r1
  40edfc:	4606      	mov	r6, r0
  40edfe:	f04f 0900 	mov.w	r9, #0
  40ee02:	687d      	ldr	r5, [r7, #4]
  40ee04:	68bc      	ldr	r4, [r7, #8]
  40ee06:	3d01      	subs	r5, #1
  40ee08:	d411      	bmi.n	40ee2e <_fwalk_reent+0x3e>
  40ee0a:	89a3      	ldrh	r3, [r4, #12]
  40ee0c:	2b01      	cmp	r3, #1
  40ee0e:	f105 35ff 	add.w	r5, r5, #4294967295
  40ee12:	d908      	bls.n	40ee26 <_fwalk_reent+0x36>
  40ee14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40ee18:	3301      	adds	r3, #1
  40ee1a:	4621      	mov	r1, r4
  40ee1c:	4630      	mov	r0, r6
  40ee1e:	d002      	beq.n	40ee26 <_fwalk_reent+0x36>
  40ee20:	47c0      	blx	r8
  40ee22:	ea49 0900 	orr.w	r9, r9, r0
  40ee26:	1c6b      	adds	r3, r5, #1
  40ee28:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40ee2c:	d1ed      	bne.n	40ee0a <_fwalk_reent+0x1a>
  40ee2e:	683f      	ldr	r7, [r7, #0]
  40ee30:	2f00      	cmp	r7, #0
  40ee32:	d1e6      	bne.n	40ee02 <_fwalk_reent+0x12>
  40ee34:	4648      	mov	r0, r9
  40ee36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ee3a:	46b9      	mov	r9, r7
  40ee3c:	4648      	mov	r0, r9
  40ee3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ee42:	bf00      	nop

0040ee44 <rshift>:
  40ee44:	6902      	ldr	r2, [r0, #16]
  40ee46:	114b      	asrs	r3, r1, #5
  40ee48:	4293      	cmp	r3, r2
  40ee4a:	da2e      	bge.n	40eeaa <rshift+0x66>
  40ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ee4e:	f011 011f 	ands.w	r1, r1, #31
  40ee52:	f100 0614 	add.w	r6, r0, #20
  40ee56:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  40ee5a:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
  40ee5e:	d029      	beq.n	40eeb4 <rshift+0x70>
  40ee60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40ee64:	f10e 0504 	add.w	r5, lr, #4
  40ee68:	42aa      	cmp	r2, r5
  40ee6a:	fa23 f401 	lsr.w	r4, r3, r1
  40ee6e:	f1c1 0c20 	rsb	ip, r1, #32
  40ee72:	d939      	bls.n	40eee8 <rshift+0xa4>
  40ee74:	f100 0710 	add.w	r7, r0, #16
  40ee78:	682b      	ldr	r3, [r5, #0]
  40ee7a:	fa03 f30c 	lsl.w	r3, r3, ip
  40ee7e:	4323      	orrs	r3, r4
  40ee80:	f847 3f04 	str.w	r3, [r7, #4]!
  40ee84:	f855 3b04 	ldr.w	r3, [r5], #4
  40ee88:	42aa      	cmp	r2, r5
  40ee8a:	fa23 f401 	lsr.w	r4, r3, r1
  40ee8e:	d8f3      	bhi.n	40ee78 <rshift+0x34>
  40ee90:	ebce 0202 	rsb	r2, lr, r2
  40ee94:	3a05      	subs	r2, #5
  40ee96:	f022 0203 	bic.w	r2, r2, #3
  40ee9a:	3204      	adds	r2, #4
  40ee9c:	4432      	add	r2, r6
  40ee9e:	6014      	str	r4, [r2, #0]
  40eea0:	b104      	cbz	r4, 40eea4 <rshift+0x60>
  40eea2:	3204      	adds	r2, #4
  40eea4:	1b93      	subs	r3, r2, r6
  40eea6:	109b      	asrs	r3, r3, #2
  40eea8:	e016      	b.n	40eed8 <rshift+0x94>
  40eeaa:	2300      	movs	r3, #0
  40eeac:	6103      	str	r3, [r0, #16]
  40eeae:	2300      	movs	r3, #0
  40eeb0:	6143      	str	r3, [r0, #20]
  40eeb2:	4770      	bx	lr
  40eeb4:	4572      	cmp	r2, lr
  40eeb6:	d912      	bls.n	40eede <rshift+0x9a>
  40eeb8:	f100 0410 	add.w	r4, r0, #16
  40eebc:	4671      	mov	r1, lr
  40eebe:	f851 5b04 	ldr.w	r5, [r1], #4
  40eec2:	f844 5f04 	str.w	r5, [r4, #4]!
  40eec6:	428a      	cmp	r2, r1
  40eec8:	d8f9      	bhi.n	40eebe <rshift+0x7a>
  40eeca:	ea6f 030e 	mvn.w	r3, lr
  40eece:	4413      	add	r3, r2
  40eed0:	f023 0303 	bic.w	r3, r3, #3
  40eed4:	3304      	adds	r3, #4
  40eed6:	109b      	asrs	r3, r3, #2
  40eed8:	6103      	str	r3, [r0, #16]
  40eeda:	b113      	cbz	r3, 40eee2 <rshift+0x9e>
  40eedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40eede:	2300      	movs	r3, #0
  40eee0:	6103      	str	r3, [r0, #16]
  40eee2:	2300      	movs	r3, #0
  40eee4:	6143      	str	r3, [r0, #20]
  40eee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40eee8:	4632      	mov	r2, r6
  40eeea:	e7d8      	b.n	40ee9e <rshift+0x5a>

0040eeec <__gethex>:
  40eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eef0:	b08b      	sub	sp, #44	; 0x2c
  40eef2:	4689      	mov	r9, r1
  40eef4:	9203      	str	r2, [sp, #12]
  40eef6:	9308      	str	r3, [sp, #32]
  40eef8:	9005      	str	r0, [sp, #20]
  40eefa:	f000 fb61 	bl	40f5c0 <_localeconv_r>
  40eefe:	6803      	ldr	r3, [r0, #0]
  40ef00:	9302      	str	r3, [sp, #8]
  40ef02:	4618      	mov	r0, r3
  40ef04:	461c      	mov	r4, r3
  40ef06:	f7fa fc3b 	bl	409780 <strlen>
  40ef0a:	f8d9 3000 	ldr.w	r3, [r9]
  40ef0e:	9000      	str	r0, [sp, #0]
  40ef10:	789a      	ldrb	r2, [r3, #2]
  40ef12:	1821      	adds	r1, r4, r0
  40ef14:	2a30      	cmp	r2, #48	; 0x30
  40ef16:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  40ef1a:	f040 81aa 	bne.w	40f272 <__gethex+0x386>
  40ef1e:	3303      	adds	r3, #3
  40ef20:	f04f 0800 	mov.w	r8, #0
  40ef24:	461c      	mov	r4, r3
  40ef26:	f813 2b01 	ldrb.w	r2, [r3], #1
  40ef2a:	2a30      	cmp	r2, #48	; 0x30
  40ef2c:	f108 0801 	add.w	r8, r8, #1
  40ef30:	d0f8      	beq.n	40ef24 <__gethex+0x38>
  40ef32:	4eb3      	ldr	r6, [pc, #716]	; (40f200 <__gethex+0x314>)
  40ef34:	5cb3      	ldrb	r3, [r6, r2]
  40ef36:	2b00      	cmp	r3, #0
  40ef38:	f000 80f0 	beq.w	40f11c <__gethex+0x230>
  40ef3c:	7823      	ldrb	r3, [r4, #0]
  40ef3e:	f04f 0a00 	mov.w	sl, #0
  40ef42:	5cf3      	ldrb	r3, [r6, r3]
  40ef44:	4655      	mov	r5, sl
  40ef46:	4627      	mov	r7, r4
  40ef48:	b123      	cbz	r3, 40ef54 <__gethex+0x68>
  40ef4a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  40ef4e:	5cf3      	ldrb	r3, [r6, r3]
  40ef50:	2b00      	cmp	r3, #0
  40ef52:	d1fa      	bne.n	40ef4a <__gethex+0x5e>
  40ef54:	9a00      	ldr	r2, [sp, #0]
  40ef56:	9902      	ldr	r1, [sp, #8]
  40ef58:	4638      	mov	r0, r7
  40ef5a:	f7fa fc7f 	bl	40985c <strncmp>
  40ef5e:	2800      	cmp	r0, #0
  40ef60:	f000 8092 	beq.w	40f088 <__gethex+0x19c>
  40ef64:	783b      	ldrb	r3, [r7, #0]
  40ef66:	2d00      	cmp	r5, #0
  40ef68:	f000 8172 	beq.w	40f250 <__gethex+0x364>
  40ef6c:	1bed      	subs	r5, r5, r7
  40ef6e:	00aa      	lsls	r2, r5, #2
  40ef70:	9201      	str	r2, [sp, #4]
  40ef72:	2b50      	cmp	r3, #80	; 0x50
  40ef74:	f000 8091 	beq.w	40f09a <__gethex+0x1ae>
  40ef78:	2b70      	cmp	r3, #112	; 0x70
  40ef7a:	f000 808e 	beq.w	40f09a <__gethex+0x1ae>
  40ef7e:	463d      	mov	r5, r7
  40ef80:	f8c9 7000 	str.w	r7, [r9]
  40ef84:	f1ba 0f00 	cmp.w	sl, #0
  40ef88:	f040 80b7 	bne.w	40f0fa <__gethex+0x20e>
  40ef8c:	1b2b      	subs	r3, r5, r4
  40ef8e:	3b01      	subs	r3, #1
  40ef90:	2b07      	cmp	r3, #7
  40ef92:	4651      	mov	r1, sl
  40ef94:	dd04      	ble.n	40efa0 <__gethex+0xb4>
  40ef96:	105b      	asrs	r3, r3, #1
  40ef98:	2b07      	cmp	r3, #7
  40ef9a:	f101 0101 	add.w	r1, r1, #1
  40ef9e:	dcfa      	bgt.n	40ef96 <__gethex+0xaa>
  40efa0:	9805      	ldr	r0, [sp, #20]
  40efa2:	f000 fc6b 	bl	40f87c <_Balloc>
  40efa6:	4603      	mov	r3, r0
  40efa8:	3314      	adds	r3, #20
  40efaa:	42a5      	cmp	r5, r4
  40efac:	9004      	str	r0, [sp, #16]
  40efae:	9307      	str	r3, [sp, #28]
  40efb0:	f240 81d4 	bls.w	40f35c <__gethex+0x470>
  40efb4:	4699      	mov	r9, r3
  40efb6:	9b00      	ldr	r3, [sp, #0]
  40efb8:	f04f 0800 	mov.w	r8, #0
  40efbc:	f1c3 0301 	rsb	r3, r3, #1
  40efc0:	4647      	mov	r7, r8
  40efc2:	9306      	str	r3, [sp, #24]
  40efc4:	e00f      	b.n	40efe6 <__gethex+0xfa>
  40efc6:	2f20      	cmp	r7, #32
  40efc8:	f000 809f 	beq.w	40f10a <__gethex+0x21e>
  40efcc:	463a      	mov	r2, r7
  40efce:	3704      	adds	r7, #4
  40efd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40efd4:	5cf3      	ldrb	r3, [r6, r3]
  40efd6:	4655      	mov	r5, sl
  40efd8:	f003 030f 	and.w	r3, r3, #15
  40efdc:	4093      	lsls	r3, r2
  40efde:	42a5      	cmp	r5, r4
  40efe0:	ea48 0803 	orr.w	r8, r8, r3
  40efe4:	d915      	bls.n	40f012 <__gethex+0x126>
  40efe6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40efea:	455b      	cmp	r3, fp
  40efec:	f105 3aff 	add.w	sl, r5, #4294967295
  40eff0:	d1e9      	bne.n	40efc6 <__gethex+0xda>
  40eff2:	9b06      	ldr	r3, [sp, #24]
  40eff4:	4453      	add	r3, sl
  40eff6:	42a3      	cmp	r3, r4
  40eff8:	d3e5      	bcc.n	40efc6 <__gethex+0xda>
  40effa:	4618      	mov	r0, r3
  40effc:	9a00      	ldr	r2, [sp, #0]
  40effe:	9902      	ldr	r1, [sp, #8]
  40f000:	9309      	str	r3, [sp, #36]	; 0x24
  40f002:	f7fa fc2b 	bl	40985c <strncmp>
  40f006:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40f008:	2800      	cmp	r0, #0
  40f00a:	d1dc      	bne.n	40efc6 <__gethex+0xda>
  40f00c:	461d      	mov	r5, r3
  40f00e:	42a5      	cmp	r5, r4
  40f010:	d8e9      	bhi.n	40efe6 <__gethex+0xfa>
  40f012:	f849 8b04 	str.w	r8, [r9], #4
  40f016:	9b07      	ldr	r3, [sp, #28]
  40f018:	9a04      	ldr	r2, [sp, #16]
  40f01a:	ebc3 0909 	rsb	r9, r3, r9
  40f01e:	ea4f 03a9 	mov.w	r3, r9, asr #2
  40f022:	6113      	str	r3, [r2, #16]
  40f024:	4640      	mov	r0, r8
  40f026:	ea4f 1943 	mov.w	r9, r3, lsl #5
  40f02a:	f000 fce3 	bl	40f9f4 <__hi0bits>
  40f02e:	9b03      	ldr	r3, [sp, #12]
  40f030:	681e      	ldr	r6, [r3, #0]
  40f032:	ebc0 0009 	rsb	r0, r0, r9
  40f036:	42b0      	cmp	r0, r6
  40f038:	f300 80e4 	bgt.w	40f204 <__gethex+0x318>
  40f03c:	f2c0 810a 	blt.w	40f254 <__gethex+0x368>
  40f040:	2700      	movs	r7, #0
  40f042:	9b03      	ldr	r3, [sp, #12]
  40f044:	9a01      	ldr	r2, [sp, #4]
  40f046:	689b      	ldr	r3, [r3, #8]
  40f048:	429a      	cmp	r2, r3
  40f04a:	f300 8097 	bgt.w	40f17c <__gethex+0x290>
  40f04e:	9803      	ldr	r0, [sp, #12]
  40f050:	9901      	ldr	r1, [sp, #4]
  40f052:	6843      	ldr	r3, [r0, #4]
  40f054:	4299      	cmp	r1, r3
  40f056:	f280 80b5 	bge.w	40f1c4 <__gethex+0x2d8>
  40f05a:	1a5d      	subs	r5, r3, r1
  40f05c:	42ae      	cmp	r6, r5
  40f05e:	f300 8110 	bgt.w	40f282 <__gethex+0x396>
  40f062:	68c2      	ldr	r2, [r0, #12]
  40f064:	2a02      	cmp	r2, #2
  40f066:	f000 8180 	beq.w	40f36a <__gethex+0x47e>
  40f06a:	2a03      	cmp	r2, #3
  40f06c:	f000 815d 	beq.w	40f32a <__gethex+0x43e>
  40f070:	2a01      	cmp	r2, #1
  40f072:	f000 817e 	beq.w	40f372 <__gethex+0x486>
  40f076:	9805      	ldr	r0, [sp, #20]
  40f078:	9904      	ldr	r1, [sp, #16]
  40f07a:	f000 fc25 	bl	40f8c8 <_Bfree>
  40f07e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40f080:	2300      	movs	r3, #0
  40f082:	6013      	str	r3, [r2, #0]
  40f084:	2050      	movs	r0, #80	; 0x50
  40f086:	e03d      	b.n	40f104 <__gethex+0x218>
  40f088:	2d00      	cmp	r5, #0
  40f08a:	f000 811a 	beq.w	40f2c2 <__gethex+0x3d6>
  40f08e:	783b      	ldrb	r3, [r7, #0]
  40f090:	e76c      	b.n	40ef6c <__gethex+0x80>
  40f092:	2300      	movs	r3, #0
  40f094:	9301      	str	r3, [sp, #4]
  40f096:	f04f 0a01 	mov.w	sl, #1
  40f09a:	787b      	ldrb	r3, [r7, #1]
  40f09c:	2b2b      	cmp	r3, #43	; 0x2b
  40f09e:	f000 80ac 	beq.w	40f1fa <__gethex+0x30e>
  40f0a2:	2b2d      	cmp	r3, #45	; 0x2d
  40f0a4:	d075      	beq.n	40f192 <__gethex+0x2a6>
  40f0a6:	1c79      	adds	r1, r7, #1
  40f0a8:	2500      	movs	r5, #0
  40f0aa:	5cf3      	ldrb	r3, [r6, r3]
  40f0ac:	4854      	ldr	r0, [pc, #336]	; (40f200 <__gethex+0x314>)
  40f0ae:	1e5a      	subs	r2, r3, #1
  40f0b0:	2a18      	cmp	r2, #24
  40f0b2:	f63f af64 	bhi.w	40ef7e <__gethex+0x92>
  40f0b6:	784a      	ldrb	r2, [r1, #1]
  40f0b8:	5c82      	ldrb	r2, [r0, r2]
  40f0ba:	1e50      	subs	r0, r2, #1
  40f0bc:	2818      	cmp	r0, #24
  40f0be:	f1a3 0310 	sub.w	r3, r3, #16
  40f0c2:	f101 0101 	add.w	r1, r1, #1
  40f0c6:	d80b      	bhi.n	40f0e0 <__gethex+0x1f4>
  40f0c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40f0cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40f0d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40f0d4:	5c32      	ldrb	r2, [r6, r0]
  40f0d6:	1e50      	subs	r0, r2, #1
  40f0d8:	2818      	cmp	r0, #24
  40f0da:	f1a3 0310 	sub.w	r3, r3, #16
  40f0de:	d9f3      	bls.n	40f0c8 <__gethex+0x1dc>
  40f0e0:	b105      	cbz	r5, 40f0e4 <__gethex+0x1f8>
  40f0e2:	425b      	negs	r3, r3
  40f0e4:	9a01      	ldr	r2, [sp, #4]
  40f0e6:	463d      	mov	r5, r7
  40f0e8:	441a      	add	r2, r3
  40f0ea:	460f      	mov	r7, r1
  40f0ec:	9201      	str	r2, [sp, #4]
  40f0ee:	f8c9 7000 	str.w	r7, [r9]
  40f0f2:	f1ba 0f00 	cmp.w	sl, #0
  40f0f6:	f43f af49 	beq.w	40ef8c <__gethex+0xa0>
  40f0fa:	f1b8 0f00 	cmp.w	r8, #0
  40f0fe:	bf0c      	ite	eq
  40f100:	2006      	moveq	r0, #6
  40f102:	2000      	movne	r0, #0
  40f104:	b00b      	add	sp, #44	; 0x2c
  40f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f10a:	f8c9 8000 	str.w	r8, [r9]
  40f10e:	f04f 0800 	mov.w	r8, #0
  40f112:	f109 0904 	add.w	r9, r9, #4
  40f116:	4642      	mov	r2, r8
  40f118:	2704      	movs	r7, #4
  40f11a:	e759      	b.n	40efd0 <__gethex+0xe4>
  40f11c:	9d00      	ldr	r5, [sp, #0]
  40f11e:	9902      	ldr	r1, [sp, #8]
  40f120:	462a      	mov	r2, r5
  40f122:	4620      	mov	r0, r4
  40f124:	f7fa fb9a 	bl	40985c <strncmp>
  40f128:	2800      	cmp	r0, #0
  40f12a:	d036      	beq.n	40f19a <__gethex+0x2ae>
  40f12c:	7823      	ldrb	r3, [r4, #0]
  40f12e:	4627      	mov	r7, r4
  40f130:	2b50      	cmp	r3, #80	; 0x50
  40f132:	d0ae      	beq.n	40f092 <__gethex+0x1a6>
  40f134:	2b70      	cmp	r3, #112	; 0x70
  40f136:	d0ac      	beq.n	40f092 <__gethex+0x1a6>
  40f138:	f8c9 7000 	str.w	r7, [r9]
  40f13c:	e7dd      	b.n	40f0fa <__gethex+0x20e>
  40f13e:	9b04      	ldr	r3, [sp, #16]
  40f140:	689b      	ldr	r3, [r3, #8]
  40f142:	429f      	cmp	r7, r3
  40f144:	f280 8135 	bge.w	40f3b2 <__gethex+0x4c6>
  40f148:	463b      	mov	r3, r7
  40f14a:	9804      	ldr	r0, [sp, #16]
  40f14c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  40f150:	2101      	movs	r1, #1
  40f152:	3301      	adds	r3, #1
  40f154:	2c02      	cmp	r4, #2
  40f156:	6103      	str	r3, [r0, #16]
  40f158:	6151      	str	r1, [r2, #20]
  40f15a:	f000 8119 	beq.w	40f390 <__gethex+0x4a4>
  40f15e:	429f      	cmp	r7, r3
  40f160:	f280 80dc 	bge.w	40f31c <__gethex+0x430>
  40f164:	2101      	movs	r1, #1
  40f166:	9804      	ldr	r0, [sp, #16]
  40f168:	f7ff fe6c 	bl	40ee44 <rshift>
  40f16c:	9b03      	ldr	r3, [sp, #12]
  40f16e:	9a01      	ldr	r2, [sp, #4]
  40f170:	689b      	ldr	r3, [r3, #8]
  40f172:	3201      	adds	r2, #1
  40f174:	429a      	cmp	r2, r3
  40f176:	9201      	str	r2, [sp, #4]
  40f178:	f340 80d3 	ble.w	40f322 <__gethex+0x436>
  40f17c:	9805      	ldr	r0, [sp, #20]
  40f17e:	9904      	ldr	r1, [sp, #16]
  40f180:	f000 fba2 	bl	40f8c8 <_Bfree>
  40f184:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40f186:	2300      	movs	r3, #0
  40f188:	20a3      	movs	r0, #163	; 0xa3
  40f18a:	6013      	str	r3, [r2, #0]
  40f18c:	b00b      	add	sp, #44	; 0x2c
  40f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f192:	2501      	movs	r5, #1
  40f194:	78bb      	ldrb	r3, [r7, #2]
  40f196:	1cb9      	adds	r1, r7, #2
  40f198:	e787      	b.n	40f0aa <__gethex+0x1be>
  40f19a:	5d62      	ldrb	r2, [r4, r5]
  40f19c:	5cb3      	ldrb	r3, [r6, r2]
  40f19e:	1967      	adds	r7, r4, r5
  40f1a0:	2b00      	cmp	r3, #0
  40f1a2:	d06a      	beq.n	40f27a <__gethex+0x38e>
  40f1a4:	2a30      	cmp	r2, #48	; 0x30
  40f1a6:	463c      	mov	r4, r7
  40f1a8:	d104      	bne.n	40f1b4 <__gethex+0x2c8>
  40f1aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40f1ae:	2b30      	cmp	r3, #48	; 0x30
  40f1b0:	d0fb      	beq.n	40f1aa <__gethex+0x2be>
  40f1b2:	5cf3      	ldrb	r3, [r6, r3]
  40f1b4:	fab3 fa83 	clz	sl, r3
  40f1b8:	463d      	mov	r5, r7
  40f1ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  40f1be:	f04f 0801 	mov.w	r8, #1
  40f1c2:	e6c0      	b.n	40ef46 <__gethex+0x5a>
  40f1c4:	2401      	movs	r4, #1
  40f1c6:	b167      	cbz	r7, 40f1e2 <__gethex+0x2f6>
  40f1c8:	9b03      	ldr	r3, [sp, #12]
  40f1ca:	68db      	ldr	r3, [r3, #12]
  40f1cc:	2b02      	cmp	r3, #2
  40f1ce:	f000 8086 	beq.w	40f2de <__gethex+0x3f2>
  40f1d2:	2b03      	cmp	r3, #3
  40f1d4:	f000 8087 	beq.w	40f2e6 <__gethex+0x3fa>
  40f1d8:	2b01      	cmp	r3, #1
  40f1da:	f000 80b6 	beq.w	40f34a <__gethex+0x45e>
  40f1de:	f044 0410 	orr.w	r4, r4, #16
  40f1e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f1e4:	461a      	mov	r2, r3
  40f1e6:	9b04      	ldr	r3, [sp, #16]
  40f1e8:	6013      	str	r3, [r2, #0]
  40f1ea:	9b08      	ldr	r3, [sp, #32]
  40f1ec:	461a      	mov	r2, r3
  40f1ee:	9b01      	ldr	r3, [sp, #4]
  40f1f0:	6013      	str	r3, [r2, #0]
  40f1f2:	4620      	mov	r0, r4
  40f1f4:	b00b      	add	sp, #44	; 0x2c
  40f1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f1fa:	2500      	movs	r5, #0
  40f1fc:	e7ca      	b.n	40f194 <__gethex+0x2a8>
  40f1fe:	bf00      	nop
  40f200:	00412ed4 	.word	0x00412ed4
  40f204:	1b84      	subs	r4, r0, r6
  40f206:	4621      	mov	r1, r4
  40f208:	9804      	ldr	r0, [sp, #16]
  40f20a:	f000 ff6b 	bl	4100e4 <__any_on>
  40f20e:	2800      	cmp	r0, #0
  40f210:	d035      	beq.n	40f27e <__gethex+0x392>
  40f212:	1e62      	subs	r2, r4, #1
  40f214:	1151      	asrs	r1, r2, #5
  40f216:	9807      	ldr	r0, [sp, #28]
  40f218:	f002 031f 	and.w	r3, r2, #31
  40f21c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  40f220:	2701      	movs	r7, #1
  40f222:	fa07 f303 	lsl.w	r3, r7, r3
  40f226:	420b      	tst	r3, r1
  40f228:	d00a      	beq.n	40f240 <__gethex+0x354>
  40f22a:	42ba      	cmp	r2, r7
  40f22c:	f340 809b 	ble.w	40f366 <__gethex+0x47a>
  40f230:	1ea1      	subs	r1, r4, #2
  40f232:	9804      	ldr	r0, [sp, #16]
  40f234:	f000 ff56 	bl	4100e4 <__any_on>
  40f238:	2800      	cmp	r0, #0
  40f23a:	f000 8094 	beq.w	40f366 <__gethex+0x47a>
  40f23e:	2703      	movs	r7, #3
  40f240:	9b01      	ldr	r3, [sp, #4]
  40f242:	9804      	ldr	r0, [sp, #16]
  40f244:	4423      	add	r3, r4
  40f246:	4621      	mov	r1, r4
  40f248:	9301      	str	r3, [sp, #4]
  40f24a:	f7ff fdfb 	bl	40ee44 <rshift>
  40f24e:	e6f8      	b.n	40f042 <__gethex+0x156>
  40f250:	9501      	str	r5, [sp, #4]
  40f252:	e68e      	b.n	40ef72 <__gethex+0x86>
  40f254:	1a34      	subs	r4, r6, r0
  40f256:	9904      	ldr	r1, [sp, #16]
  40f258:	9805      	ldr	r0, [sp, #20]
  40f25a:	4622      	mov	r2, r4
  40f25c:	f000 fd0a 	bl	40fc74 <__lshift>
  40f260:	9b01      	ldr	r3, [sp, #4]
  40f262:	9004      	str	r0, [sp, #16]
  40f264:	1b1b      	subs	r3, r3, r4
  40f266:	9301      	str	r3, [sp, #4]
  40f268:	4603      	mov	r3, r0
  40f26a:	3314      	adds	r3, #20
  40f26c:	9307      	str	r3, [sp, #28]
  40f26e:	2700      	movs	r7, #0
  40f270:	e6e7      	b.n	40f042 <__gethex+0x156>
  40f272:	1c9c      	adds	r4, r3, #2
  40f274:	f04f 0800 	mov.w	r8, #0
  40f278:	e65b      	b.n	40ef32 <__gethex+0x46>
  40f27a:	4613      	mov	r3, r2
  40f27c:	e758      	b.n	40f130 <__gethex+0x244>
  40f27e:	4607      	mov	r7, r0
  40f280:	e7de      	b.n	40f240 <__gethex+0x354>
  40f282:	1e6c      	subs	r4, r5, #1
  40f284:	2f00      	cmp	r7, #0
  40f286:	d14e      	bne.n	40f326 <__gethex+0x43a>
  40f288:	b124      	cbz	r4, 40f294 <__gethex+0x3a8>
  40f28a:	4621      	mov	r1, r4
  40f28c:	9804      	ldr	r0, [sp, #16]
  40f28e:	f000 ff29 	bl	4100e4 <__any_on>
  40f292:	4607      	mov	r7, r0
  40f294:	1163      	asrs	r3, r4, #5
  40f296:	9a07      	ldr	r2, [sp, #28]
  40f298:	9804      	ldr	r0, [sp, #16]
  40f29a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40f29e:	f004 041f 	and.w	r4, r4, #31
  40f2a2:	2301      	movs	r3, #1
  40f2a4:	fa03 f404 	lsl.w	r4, r3, r4
  40f2a8:	4214      	tst	r4, r2
  40f2aa:	4629      	mov	r1, r5
  40f2ac:	bf18      	it	ne
  40f2ae:	f047 0702 	orrne.w	r7, r7, #2
  40f2b2:	f7ff fdc7 	bl	40ee44 <rshift>
  40f2b6:	9b03      	ldr	r3, [sp, #12]
  40f2b8:	685b      	ldr	r3, [r3, #4]
  40f2ba:	9301      	str	r3, [sp, #4]
  40f2bc:	1b76      	subs	r6, r6, r5
  40f2be:	2402      	movs	r4, #2
  40f2c0:	e781      	b.n	40f1c6 <__gethex+0x2da>
  40f2c2:	9900      	ldr	r1, [sp, #0]
  40f2c4:	5c7b      	ldrb	r3, [r7, r1]
  40f2c6:	5cf2      	ldrb	r2, [r6, r3]
  40f2c8:	187d      	adds	r5, r7, r1
  40f2ca:	462f      	mov	r7, r5
  40f2cc:	2a00      	cmp	r2, #0
  40f2ce:	f43f ae4d 	beq.w	40ef6c <__gethex+0x80>
  40f2d2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  40f2d6:	5cf2      	ldrb	r2, [r6, r3]
  40f2d8:	2a00      	cmp	r2, #0
  40f2da:	d1fa      	bne.n	40f2d2 <__gethex+0x3e6>
  40f2dc:	e646      	b.n	40ef6c <__gethex+0x80>
  40f2de:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40f2e0:	f1c3 0301 	rsb	r3, r3, #1
  40f2e4:	9315      	str	r3, [sp, #84]	; 0x54
  40f2e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40f2e8:	2b00      	cmp	r3, #0
  40f2ea:	f43f af78 	beq.w	40f1de <__gethex+0x2f2>
  40f2ee:	9b04      	ldr	r3, [sp, #16]
  40f2f0:	9d07      	ldr	r5, [sp, #28]
  40f2f2:	691f      	ldr	r7, [r3, #16]
  40f2f4:	ea4f 0887 	mov.w	r8, r7, lsl #2
  40f2f8:	eb05 0008 	add.w	r0, r5, r8
  40f2fc:	462b      	mov	r3, r5
  40f2fe:	2100      	movs	r1, #0
  40f300:	e004      	b.n	40f30c <__gethex+0x420>
  40f302:	f843 1b04 	str.w	r1, [r3], #4
  40f306:	4298      	cmp	r0, r3
  40f308:	f67f af19 	bls.w	40f13e <__gethex+0x252>
  40f30c:	681a      	ldr	r2, [r3, #0]
  40f30e:	f1b2 3fff 	cmp.w	r2, #4294967295
  40f312:	d0f6      	beq.n	40f302 <__gethex+0x416>
  40f314:	3201      	adds	r2, #1
  40f316:	2c02      	cmp	r4, #2
  40f318:	601a      	str	r2, [r3, #0]
  40f31a:	d039      	beq.n	40f390 <__gethex+0x4a4>
  40f31c:	f016 061f 	ands.w	r6, r6, #31
  40f320:	d13d      	bne.n	40f39e <__gethex+0x4b2>
  40f322:	2421      	movs	r4, #33	; 0x21
  40f324:	e75d      	b.n	40f1e2 <__gethex+0x2f6>
  40f326:	2701      	movs	r7, #1
  40f328:	e7b4      	b.n	40f294 <__gethex+0x3a8>
  40f32a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f32c:	2a00      	cmp	r2, #0
  40f32e:	f43f aea2 	beq.w	40f076 <__gethex+0x18a>
  40f332:	9908      	ldr	r1, [sp, #32]
  40f334:	600b      	str	r3, [r1, #0]
  40f336:	9b07      	ldr	r3, [sp, #28]
  40f338:	9904      	ldr	r1, [sp, #16]
  40f33a:	2201      	movs	r2, #1
  40f33c:	610a      	str	r2, [r1, #16]
  40f33e:	601a      	str	r2, [r3, #0]
  40f340:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f342:	461a      	mov	r2, r3
  40f344:	2062      	movs	r0, #98	; 0x62
  40f346:	6011      	str	r1, [r2, #0]
  40f348:	e6dc      	b.n	40f104 <__gethex+0x218>
  40f34a:	07ba      	lsls	r2, r7, #30
  40f34c:	f57f af47 	bpl.w	40f1de <__gethex+0x2f2>
  40f350:	9b07      	ldr	r3, [sp, #28]
  40f352:	681b      	ldr	r3, [r3, #0]
  40f354:	433b      	orrs	r3, r7
  40f356:	07db      	lsls	r3, r3, #31
  40f358:	d4c9      	bmi.n	40f2ee <__gethex+0x402>
  40f35a:	e740      	b.n	40f1de <__gethex+0x2f2>
  40f35c:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40f360:	f04f 0800 	mov.w	r8, #0
  40f364:	e655      	b.n	40f012 <__gethex+0x126>
  40f366:	2702      	movs	r7, #2
  40f368:	e76a      	b.n	40f240 <__gethex+0x354>
  40f36a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f36c:	2a00      	cmp	r2, #0
  40f36e:	d0e0      	beq.n	40f332 <__gethex+0x446>
  40f370:	e681      	b.n	40f076 <__gethex+0x18a>
  40f372:	42ae      	cmp	r6, r5
  40f374:	f47f ae7f 	bne.w	40f076 <__gethex+0x18a>
  40f378:	2e01      	cmp	r6, #1
  40f37a:	ddda      	ble.n	40f332 <__gethex+0x446>
  40f37c:	1e71      	subs	r1, r6, #1
  40f37e:	9804      	ldr	r0, [sp, #16]
  40f380:	f000 feb0 	bl	4100e4 <__any_on>
  40f384:	2800      	cmp	r0, #0
  40f386:	f43f ae76 	beq.w	40f076 <__gethex+0x18a>
  40f38a:	9b03      	ldr	r3, [sp, #12]
  40f38c:	685b      	ldr	r3, [r3, #4]
  40f38e:	e7d0      	b.n	40f332 <__gethex+0x446>
  40f390:	9b03      	ldr	r3, [sp, #12]
  40f392:	681b      	ldr	r3, [r3, #0]
  40f394:	3b01      	subs	r3, #1
  40f396:	429e      	cmp	r6, r3
  40f398:	d024      	beq.n	40f3e4 <__gethex+0x4f8>
  40f39a:	2422      	movs	r4, #34	; 0x22
  40f39c:	e721      	b.n	40f1e2 <__gethex+0x2f6>
  40f39e:	4445      	add	r5, r8
  40f3a0:	f1c6 0620 	rsb	r6, r6, #32
  40f3a4:	f855 0c04 	ldr.w	r0, [r5, #-4]
  40f3a8:	f000 fb24 	bl	40f9f4 <__hi0bits>
  40f3ac:	42b0      	cmp	r0, r6
  40f3ae:	dab8      	bge.n	40f322 <__gethex+0x436>
  40f3b0:	e6d8      	b.n	40f164 <__gethex+0x278>
  40f3b2:	9b04      	ldr	r3, [sp, #16]
  40f3b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f3b8:	6859      	ldr	r1, [r3, #4]
  40f3ba:	4648      	mov	r0, r9
  40f3bc:	3101      	adds	r1, #1
  40f3be:	f000 fa5d 	bl	40f87c <_Balloc>
  40f3c2:	9904      	ldr	r1, [sp, #16]
  40f3c4:	690b      	ldr	r3, [r1, #16]
  40f3c6:	1c9a      	adds	r2, r3, #2
  40f3c8:	4605      	mov	r5, r0
  40f3ca:	0092      	lsls	r2, r2, #2
  40f3cc:	310c      	adds	r1, #12
  40f3ce:	300c      	adds	r0, #12
  40f3d0:	f7f9 fe20 	bl	409014 <memcpy>
  40f3d4:	9904      	ldr	r1, [sp, #16]
  40f3d6:	4648      	mov	r0, r9
  40f3d8:	f000 fa76 	bl	40f8c8 <_Bfree>
  40f3dc:	9504      	str	r5, [sp, #16]
  40f3de:	692b      	ldr	r3, [r5, #16]
  40f3e0:	3514      	adds	r5, #20
  40f3e2:	e6b2      	b.n	40f14a <__gethex+0x25e>
  40f3e4:	1173      	asrs	r3, r6, #5
  40f3e6:	f006 061f 	and.w	r6, r6, #31
  40f3ea:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  40f3ee:	2301      	movs	r3, #1
  40f3f0:	40b3      	lsls	r3, r6
  40f3f2:	4213      	tst	r3, r2
  40f3f4:	bf14      	ite	ne
  40f3f6:	2421      	movne	r4, #33	; 0x21
  40f3f8:	2422      	moveq	r4, #34	; 0x22
  40f3fa:	e6f2      	b.n	40f1e2 <__gethex+0x2f6>

0040f3fc <__match>:
  40f3fc:	b430      	push	{r4, r5}
  40f3fe:	6804      	ldr	r4, [r0, #0]
  40f400:	e008      	b.n	40f414 <__match+0x18>
  40f402:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40f406:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  40f40a:	2d19      	cmp	r5, #25
  40f40c:	bf98      	it	ls
  40f40e:	3320      	addls	r3, #32
  40f410:	4293      	cmp	r3, r2
  40f412:	d108      	bne.n	40f426 <__match+0x2a>
  40f414:	f811 2b01 	ldrb.w	r2, [r1], #1
  40f418:	2a00      	cmp	r2, #0
  40f41a:	d1f2      	bne.n	40f402 <__match+0x6>
  40f41c:	3401      	adds	r4, #1
  40f41e:	6004      	str	r4, [r0, #0]
  40f420:	2001      	movs	r0, #1
  40f422:	bc30      	pop	{r4, r5}
  40f424:	4770      	bx	lr
  40f426:	2000      	movs	r0, #0
  40f428:	bc30      	pop	{r4, r5}
  40f42a:	4770      	bx	lr

0040f42c <__hexnan>:
  40f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f430:	680b      	ldr	r3, [r1, #0]
  40f432:	f8df 9174 	ldr.w	r9, [pc, #372]	; 40f5a8 <__hexnan+0x17c>
  40f436:	b085      	sub	sp, #20
  40f438:	1159      	asrs	r1, r3, #5
  40f43a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  40f43e:	f013 031f 	ands.w	r3, r3, #31
  40f442:	9101      	str	r1, [sp, #4]
  40f444:	bf1c      	itt	ne
  40f446:	3104      	addne	r1, #4
  40f448:	9101      	strne	r1, [sp, #4]
  40f44a:	9c01      	ldr	r4, [sp, #4]
  40f44c:	9002      	str	r0, [sp, #8]
  40f44e:	9303      	str	r3, [sp, #12]
  40f450:	2300      	movs	r3, #0
  40f452:	4619      	mov	r1, r3
  40f454:	f844 3c04 	str.w	r3, [r4, #-4]
  40f458:	469a      	mov	sl, r3
  40f45a:	469e      	mov	lr, r3
  40f45c:	9b02      	ldr	r3, [sp, #8]
  40f45e:	f1a4 0c04 	sub.w	ip, r4, #4
  40f462:	681d      	ldr	r5, [r3, #0]
  40f464:	46e0      	mov	r8, ip
  40f466:	4660      	mov	r0, ip
  40f468:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40f46c:	b323      	cbz	r3, 40f4b8 <__hexnan+0x8c>
  40f46e:	f819 4003 	ldrb.w	r4, [r9, r3]
  40f472:	2c00      	cmp	r4, #0
  40f474:	d143      	bne.n	40f4fe <__hexnan+0xd2>
  40f476:	2b20      	cmp	r3, #32
  40f478:	d85d      	bhi.n	40f536 <__hexnan+0x10a>
  40f47a:	45d6      	cmp	lr, sl
  40f47c:	ddf4      	ble.n	40f468 <__hexnan+0x3c>
  40f47e:	4540      	cmp	r0, r8
  40f480:	d213      	bcs.n	40f4aa <__hexnan+0x7e>
  40f482:	2907      	cmp	r1, #7
  40f484:	dc11      	bgt.n	40f4aa <__hexnan+0x7e>
  40f486:	f1c1 0108 	rsb	r1, r1, #8
  40f48a:	0089      	lsls	r1, r1, #2
  40f48c:	6806      	ldr	r6, [r0, #0]
  40f48e:	f1c1 0b20 	rsb	fp, r1, #32
  40f492:	4603      	mov	r3, r0
  40f494:	685f      	ldr	r7, [r3, #4]
  40f496:	fa07 f40b 	lsl.w	r4, r7, fp
  40f49a:	4334      	orrs	r4, r6
  40f49c:	fa27 f601 	lsr.w	r6, r7, r1
  40f4a0:	601c      	str	r4, [r3, #0]
  40f4a2:	f843 6f04 	str.w	r6, [r3, #4]!
  40f4a6:	4598      	cmp	r8, r3
  40f4a8:	d8f4      	bhi.n	40f494 <__hexnan+0x68>
  40f4aa:	4290      	cmp	r0, r2
  40f4ac:	d83a      	bhi.n	40f524 <__hexnan+0xf8>
  40f4ae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40f4b2:	2108      	movs	r1, #8
  40f4b4:	2b00      	cmp	r3, #0
  40f4b6:	d1da      	bne.n	40f46e <__hexnan+0x42>
  40f4b8:	f1be 0f00 	cmp.w	lr, #0
  40f4bc:	d03d      	beq.n	40f53a <__hexnan+0x10e>
  40f4be:	4540      	cmp	r0, r8
  40f4c0:	d201      	bcs.n	40f4c6 <__hexnan+0x9a>
  40f4c2:	2907      	cmp	r1, #7
  40f4c4:	dd5c      	ble.n	40f580 <__hexnan+0x154>
  40f4c6:	4290      	cmp	r0, r2
  40f4c8:	d93b      	bls.n	40f542 <__hexnan+0x116>
  40f4ca:	4613      	mov	r3, r2
  40f4cc:	f850 1b04 	ldr.w	r1, [r0], #4
  40f4d0:	f843 1b04 	str.w	r1, [r3], #4
  40f4d4:	4584      	cmp	ip, r0
  40f4d6:	d2f9      	bcs.n	40f4cc <__hexnan+0xa0>
  40f4d8:	2100      	movs	r1, #0
  40f4da:	f843 1b04 	str.w	r1, [r3], #4
  40f4de:	459c      	cmp	ip, r3
  40f4e0:	d2fb      	bcs.n	40f4da <__hexnan+0xae>
  40f4e2:	9b01      	ldr	r3, [sp, #4]
  40f4e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
  40f4e8:	b92b      	cbnz	r3, 40f4f6 <__hexnan+0xca>
  40f4ea:	4562      	cmp	r2, ip
  40f4ec:	d03a      	beq.n	40f564 <__hexnan+0x138>
  40f4ee:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  40f4f2:	2b00      	cmp	r3, #0
  40f4f4:	d0f9      	beq.n	40f4ea <__hexnan+0xbe>
  40f4f6:	2005      	movs	r0, #5
  40f4f8:	b005      	add	sp, #20
  40f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f4fe:	3101      	adds	r1, #1
  40f500:	2908      	cmp	r1, #8
  40f502:	f10e 0e01 	add.w	lr, lr, #1
  40f506:	dd06      	ble.n	40f516 <__hexnan+0xea>
  40f508:	4290      	cmp	r0, r2
  40f50a:	d9ad      	bls.n	40f468 <__hexnan+0x3c>
  40f50c:	2300      	movs	r3, #0
  40f50e:	f840 3c04 	str.w	r3, [r0, #-4]
  40f512:	2101      	movs	r1, #1
  40f514:	3804      	subs	r0, #4
  40f516:	6803      	ldr	r3, [r0, #0]
  40f518:	f004 040f 	and.w	r4, r4, #15
  40f51c:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  40f520:	6004      	str	r4, [r0, #0]
  40f522:	e7a1      	b.n	40f468 <__hexnan+0x3c>
  40f524:	2300      	movs	r3, #0
  40f526:	f1a0 0804 	sub.w	r8, r0, #4
  40f52a:	f840 3c04 	str.w	r3, [r0, #-4]
  40f52e:	46f2      	mov	sl, lr
  40f530:	4640      	mov	r0, r8
  40f532:	4619      	mov	r1, r3
  40f534:	e798      	b.n	40f468 <__hexnan+0x3c>
  40f536:	2b29      	cmp	r3, #41	; 0x29
  40f538:	d01b      	beq.n	40f572 <__hexnan+0x146>
  40f53a:	2004      	movs	r0, #4
  40f53c:	b005      	add	sp, #20
  40f53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f542:	9b03      	ldr	r3, [sp, #12]
  40f544:	2b00      	cmp	r3, #0
  40f546:	d0cc      	beq.n	40f4e2 <__hexnan+0xb6>
  40f548:	9c01      	ldr	r4, [sp, #4]
  40f54a:	9b03      	ldr	r3, [sp, #12]
  40f54c:	f854 1c04 	ldr.w	r1, [r4, #-4]
  40f550:	f1c3 0320 	rsb	r3, r3, #32
  40f554:	f04f 30ff 	mov.w	r0, #4294967295
  40f558:	fa20 f303 	lsr.w	r3, r0, r3
  40f55c:	400b      	ands	r3, r1
  40f55e:	f844 3c04 	str.w	r3, [r4, #-4]
  40f562:	e7c1      	b.n	40f4e8 <__hexnan+0xbc>
  40f564:	2301      	movs	r3, #1
  40f566:	2005      	movs	r0, #5
  40f568:	f8cc 3000 	str.w	r3, [ip]
  40f56c:	b005      	add	sp, #20
  40f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f572:	9b02      	ldr	r3, [sp, #8]
  40f574:	3501      	adds	r5, #1
  40f576:	601d      	str	r5, [r3, #0]
  40f578:	f1be 0f00 	cmp.w	lr, #0
  40f57c:	d19f      	bne.n	40f4be <__hexnan+0x92>
  40f57e:	e7dc      	b.n	40f53a <__hexnan+0x10e>
  40f580:	f1c1 0308 	rsb	r3, r1, #8
  40f584:	009b      	lsls	r3, r3, #2
  40f586:	6805      	ldr	r5, [r0, #0]
  40f588:	f1c3 0720 	rsb	r7, r3, #32
  40f58c:	4601      	mov	r1, r0
  40f58e:	684e      	ldr	r6, [r1, #4]
  40f590:	fa06 f407 	lsl.w	r4, r6, r7
  40f594:	432c      	orrs	r4, r5
  40f596:	fa26 f503 	lsr.w	r5, r6, r3
  40f59a:	600c      	str	r4, [r1, #0]
  40f59c:	f841 5f04 	str.w	r5, [r1, #4]!
  40f5a0:	4588      	cmp	r8, r1
  40f5a2:	d8f4      	bhi.n	40f58e <__hexnan+0x162>
  40f5a4:	e78f      	b.n	40f4c6 <__hexnan+0x9a>
  40f5a6:	bf00      	nop
  40f5a8:	00412ed4 	.word	0x00412ed4

0040f5ac <__locale_charset>:
  40f5ac:	4800      	ldr	r0, [pc, #0]	; (40f5b0 <__locale_charset+0x4>)
  40f5ae:	4770      	bx	lr
  40f5b0:	200008a8 	.word	0x200008a8

0040f5b4 <__locale_mb_cur_max>:
  40f5b4:	4b01      	ldr	r3, [pc, #4]	; (40f5bc <__locale_mb_cur_max+0x8>)
  40f5b6:	6818      	ldr	r0, [r3, #0]
  40f5b8:	4770      	bx	lr
  40f5ba:	bf00      	nop
  40f5bc:	200008c8 	.word	0x200008c8

0040f5c0 <_localeconv_r>:
  40f5c0:	4800      	ldr	r0, [pc, #0]	; (40f5c4 <_localeconv_r+0x4>)
  40f5c2:	4770      	bx	lr
  40f5c4:	20000870 	.word	0x20000870

0040f5c8 <__swhatbuf_r>:
  40f5c8:	b570      	push	{r4, r5, r6, lr}
  40f5ca:	460d      	mov	r5, r1
  40f5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f5d0:	2900      	cmp	r1, #0
  40f5d2:	b090      	sub	sp, #64	; 0x40
  40f5d4:	4614      	mov	r4, r2
  40f5d6:	461e      	mov	r6, r3
  40f5d8:	db14      	blt.n	40f604 <__swhatbuf_r+0x3c>
  40f5da:	aa01      	add	r2, sp, #4
  40f5dc:	f001 f9e2 	bl	4109a4 <_fstat_r>
  40f5e0:	2800      	cmp	r0, #0
  40f5e2:	db0f      	blt.n	40f604 <__swhatbuf_r+0x3c>
  40f5e4:	9a02      	ldr	r2, [sp, #8]
  40f5e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40f5ea:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40f5ee:	fab2 f282 	clz	r2, r2
  40f5f2:	0952      	lsrs	r2, r2, #5
  40f5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f5f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40f5fc:	6032      	str	r2, [r6, #0]
  40f5fe:	6023      	str	r3, [r4, #0]
  40f600:	b010      	add	sp, #64	; 0x40
  40f602:	bd70      	pop	{r4, r5, r6, pc}
  40f604:	89a8      	ldrh	r0, [r5, #12]
  40f606:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40f60a:	b282      	uxth	r2, r0
  40f60c:	2000      	movs	r0, #0
  40f60e:	6030      	str	r0, [r6, #0]
  40f610:	b11a      	cbz	r2, 40f61a <__swhatbuf_r+0x52>
  40f612:	2340      	movs	r3, #64	; 0x40
  40f614:	6023      	str	r3, [r4, #0]
  40f616:	b010      	add	sp, #64	; 0x40
  40f618:	bd70      	pop	{r4, r5, r6, pc}
  40f61a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40f61e:	4610      	mov	r0, r2
  40f620:	6023      	str	r3, [r4, #0]
  40f622:	b010      	add	sp, #64	; 0x40
  40f624:	bd70      	pop	{r4, r5, r6, pc}
  40f626:	bf00      	nop

0040f628 <__smakebuf_r>:
  40f628:	898a      	ldrh	r2, [r1, #12]
  40f62a:	0792      	lsls	r2, r2, #30
  40f62c:	460b      	mov	r3, r1
  40f62e:	d506      	bpl.n	40f63e <__smakebuf_r+0x16>
  40f630:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40f634:	2101      	movs	r1, #1
  40f636:	601a      	str	r2, [r3, #0]
  40f638:	611a      	str	r2, [r3, #16]
  40f63a:	6159      	str	r1, [r3, #20]
  40f63c:	4770      	bx	lr
  40f63e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f640:	b083      	sub	sp, #12
  40f642:	ab01      	add	r3, sp, #4
  40f644:	466a      	mov	r2, sp
  40f646:	460c      	mov	r4, r1
  40f648:	4605      	mov	r5, r0
  40f64a:	f7ff ffbd 	bl	40f5c8 <__swhatbuf_r>
  40f64e:	9900      	ldr	r1, [sp, #0]
  40f650:	4606      	mov	r6, r0
  40f652:	4628      	mov	r0, r5
  40f654:	f7f9 fa26 	bl	408aa4 <_malloc_r>
  40f658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f65c:	b1d0      	cbz	r0, 40f694 <__smakebuf_r+0x6c>
  40f65e:	9a01      	ldr	r2, [sp, #4]
  40f660:	4f12      	ldr	r7, [pc, #72]	; (40f6ac <__smakebuf_r+0x84>)
  40f662:	9900      	ldr	r1, [sp, #0]
  40f664:	63ef      	str	r7, [r5, #60]	; 0x3c
  40f666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40f66a:	81a3      	strh	r3, [r4, #12]
  40f66c:	6020      	str	r0, [r4, #0]
  40f66e:	6120      	str	r0, [r4, #16]
  40f670:	6161      	str	r1, [r4, #20]
  40f672:	b91a      	cbnz	r2, 40f67c <__smakebuf_r+0x54>
  40f674:	4333      	orrs	r3, r6
  40f676:	81a3      	strh	r3, [r4, #12]
  40f678:	b003      	add	sp, #12
  40f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f67c:	4628      	mov	r0, r5
  40f67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f682:	f001 f9a3 	bl	4109cc <_isatty_r>
  40f686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f68a:	2800      	cmp	r0, #0
  40f68c:	d0f2      	beq.n	40f674 <__smakebuf_r+0x4c>
  40f68e:	f043 0301 	orr.w	r3, r3, #1
  40f692:	e7ef      	b.n	40f674 <__smakebuf_r+0x4c>
  40f694:	059a      	lsls	r2, r3, #22
  40f696:	d4ef      	bmi.n	40f678 <__smakebuf_r+0x50>
  40f698:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40f69c:	f043 0302 	orr.w	r3, r3, #2
  40f6a0:	2101      	movs	r1, #1
  40f6a2:	81a3      	strh	r3, [r4, #12]
  40f6a4:	6022      	str	r2, [r4, #0]
  40f6a6:	6122      	str	r2, [r4, #16]
  40f6a8:	6161      	str	r1, [r4, #20]
  40f6aa:	e7e5      	b.n	40f678 <__smakebuf_r+0x50>
  40f6ac:	0040e68d 	.word	0x0040e68d

0040f6b0 <memchr>:
  40f6b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f6b4:	2a10      	cmp	r2, #16
  40f6b6:	db2b      	blt.n	40f710 <memchr+0x60>
  40f6b8:	f010 0f07 	tst.w	r0, #7
  40f6bc:	d008      	beq.n	40f6d0 <memchr+0x20>
  40f6be:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f6c2:	3a01      	subs	r2, #1
  40f6c4:	428b      	cmp	r3, r1
  40f6c6:	d02d      	beq.n	40f724 <memchr+0x74>
  40f6c8:	f010 0f07 	tst.w	r0, #7
  40f6cc:	b342      	cbz	r2, 40f720 <memchr+0x70>
  40f6ce:	d1f6      	bne.n	40f6be <memchr+0xe>
  40f6d0:	b4f0      	push	{r4, r5, r6, r7}
  40f6d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40f6d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40f6da:	f022 0407 	bic.w	r4, r2, #7
  40f6de:	f07f 0700 	mvns.w	r7, #0
  40f6e2:	2300      	movs	r3, #0
  40f6e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40f6e8:	3c08      	subs	r4, #8
  40f6ea:	ea85 0501 	eor.w	r5, r5, r1
  40f6ee:	ea86 0601 	eor.w	r6, r6, r1
  40f6f2:	fa85 f547 	uadd8	r5, r5, r7
  40f6f6:	faa3 f587 	sel	r5, r3, r7
  40f6fa:	fa86 f647 	uadd8	r6, r6, r7
  40f6fe:	faa5 f687 	sel	r6, r5, r7
  40f702:	b98e      	cbnz	r6, 40f728 <memchr+0x78>
  40f704:	d1ee      	bne.n	40f6e4 <memchr+0x34>
  40f706:	bcf0      	pop	{r4, r5, r6, r7}
  40f708:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f70c:	f002 0207 	and.w	r2, r2, #7
  40f710:	b132      	cbz	r2, 40f720 <memchr+0x70>
  40f712:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f716:	3a01      	subs	r2, #1
  40f718:	ea83 0301 	eor.w	r3, r3, r1
  40f71c:	b113      	cbz	r3, 40f724 <memchr+0x74>
  40f71e:	d1f8      	bne.n	40f712 <memchr+0x62>
  40f720:	2000      	movs	r0, #0
  40f722:	4770      	bx	lr
  40f724:	3801      	subs	r0, #1
  40f726:	4770      	bx	lr
  40f728:	2d00      	cmp	r5, #0
  40f72a:	bf06      	itte	eq
  40f72c:	4635      	moveq	r5, r6
  40f72e:	3803      	subeq	r0, #3
  40f730:	3807      	subne	r0, #7
  40f732:	f015 0f01 	tst.w	r5, #1
  40f736:	d107      	bne.n	40f748 <memchr+0x98>
  40f738:	3001      	adds	r0, #1
  40f73a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40f73e:	bf02      	ittt	eq
  40f740:	3001      	addeq	r0, #1
  40f742:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40f746:	3001      	addeq	r0, #1
  40f748:	bcf0      	pop	{r4, r5, r6, r7}
  40f74a:	3801      	subs	r0, #1
  40f74c:	4770      	bx	lr
  40f74e:	bf00      	nop

0040f750 <memcmp>:
  40f750:	2a03      	cmp	r2, #3
  40f752:	b470      	push	{r4, r5, r6}
  40f754:	d926      	bls.n	40f7a4 <memcmp+0x54>
  40f756:	ea40 0301 	orr.w	r3, r0, r1
  40f75a:	079b      	lsls	r3, r3, #30
  40f75c:	d011      	beq.n	40f782 <memcmp+0x32>
  40f75e:	7804      	ldrb	r4, [r0, #0]
  40f760:	780d      	ldrb	r5, [r1, #0]
  40f762:	42ac      	cmp	r4, r5
  40f764:	d122      	bne.n	40f7ac <memcmp+0x5c>
  40f766:	4402      	add	r2, r0
  40f768:	1c43      	adds	r3, r0, #1
  40f76a:	e005      	b.n	40f778 <memcmp+0x28>
  40f76c:	f813 4b01 	ldrb.w	r4, [r3], #1
  40f770:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40f774:	42ac      	cmp	r4, r5
  40f776:	d119      	bne.n	40f7ac <memcmp+0x5c>
  40f778:	4293      	cmp	r3, r2
  40f77a:	d1f7      	bne.n	40f76c <memcmp+0x1c>
  40f77c:	2000      	movs	r0, #0
  40f77e:	bc70      	pop	{r4, r5, r6}
  40f780:	4770      	bx	lr
  40f782:	460c      	mov	r4, r1
  40f784:	4603      	mov	r3, r0
  40f786:	681e      	ldr	r6, [r3, #0]
  40f788:	6825      	ldr	r5, [r4, #0]
  40f78a:	42ae      	cmp	r6, r5
  40f78c:	4618      	mov	r0, r3
  40f78e:	4621      	mov	r1, r4
  40f790:	f103 0304 	add.w	r3, r3, #4
  40f794:	f104 0404 	add.w	r4, r4, #4
  40f798:	d1e1      	bne.n	40f75e <memcmp+0xe>
  40f79a:	3a04      	subs	r2, #4
  40f79c:	2a03      	cmp	r2, #3
  40f79e:	4618      	mov	r0, r3
  40f7a0:	4621      	mov	r1, r4
  40f7a2:	d8f0      	bhi.n	40f786 <memcmp+0x36>
  40f7a4:	2a00      	cmp	r2, #0
  40f7a6:	d1da      	bne.n	40f75e <memcmp+0xe>
  40f7a8:	4610      	mov	r0, r2
  40f7aa:	e7e8      	b.n	40f77e <memcmp+0x2e>
  40f7ac:	1b60      	subs	r0, r4, r5
  40f7ae:	bc70      	pop	{r4, r5, r6}
  40f7b0:	4770      	bx	lr
  40f7b2:	bf00      	nop

0040f7b4 <memmove>:
  40f7b4:	4288      	cmp	r0, r1
  40f7b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f7b8:	d90d      	bls.n	40f7d6 <memmove+0x22>
  40f7ba:	188b      	adds	r3, r1, r2
  40f7bc:	4298      	cmp	r0, r3
  40f7be:	d20a      	bcs.n	40f7d6 <memmove+0x22>
  40f7c0:	1881      	adds	r1, r0, r2
  40f7c2:	2a00      	cmp	r2, #0
  40f7c4:	d051      	beq.n	40f86a <memmove+0xb6>
  40f7c6:	1a9a      	subs	r2, r3, r2
  40f7c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40f7cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40f7d0:	4293      	cmp	r3, r2
  40f7d2:	d1f9      	bne.n	40f7c8 <memmove+0x14>
  40f7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f7d6:	2a0f      	cmp	r2, #15
  40f7d8:	d948      	bls.n	40f86c <memmove+0xb8>
  40f7da:	ea41 0300 	orr.w	r3, r1, r0
  40f7de:	079b      	lsls	r3, r3, #30
  40f7e0:	d146      	bne.n	40f870 <memmove+0xbc>
  40f7e2:	f100 0410 	add.w	r4, r0, #16
  40f7e6:	f101 0310 	add.w	r3, r1, #16
  40f7ea:	4615      	mov	r5, r2
  40f7ec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40f7f0:	f844 6c10 	str.w	r6, [r4, #-16]
  40f7f4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40f7f8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40f7fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40f800:	f844 6c08 	str.w	r6, [r4, #-8]
  40f804:	3d10      	subs	r5, #16
  40f806:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40f80a:	f844 6c04 	str.w	r6, [r4, #-4]
  40f80e:	2d0f      	cmp	r5, #15
  40f810:	f103 0310 	add.w	r3, r3, #16
  40f814:	f104 0410 	add.w	r4, r4, #16
  40f818:	d8e8      	bhi.n	40f7ec <memmove+0x38>
  40f81a:	f1a2 0310 	sub.w	r3, r2, #16
  40f81e:	f023 030f 	bic.w	r3, r3, #15
  40f822:	f002 0e0f 	and.w	lr, r2, #15
  40f826:	3310      	adds	r3, #16
  40f828:	f1be 0f03 	cmp.w	lr, #3
  40f82c:	4419      	add	r1, r3
  40f82e:	4403      	add	r3, r0
  40f830:	d921      	bls.n	40f876 <memmove+0xc2>
  40f832:	1f1e      	subs	r6, r3, #4
  40f834:	460d      	mov	r5, r1
  40f836:	4674      	mov	r4, lr
  40f838:	3c04      	subs	r4, #4
  40f83a:	f855 7b04 	ldr.w	r7, [r5], #4
  40f83e:	f846 7f04 	str.w	r7, [r6, #4]!
  40f842:	2c03      	cmp	r4, #3
  40f844:	d8f8      	bhi.n	40f838 <memmove+0x84>
  40f846:	f1ae 0404 	sub.w	r4, lr, #4
  40f84a:	f024 0403 	bic.w	r4, r4, #3
  40f84e:	3404      	adds	r4, #4
  40f850:	4423      	add	r3, r4
  40f852:	4421      	add	r1, r4
  40f854:	f002 0203 	and.w	r2, r2, #3
  40f858:	b162      	cbz	r2, 40f874 <memmove+0xc0>
  40f85a:	3b01      	subs	r3, #1
  40f85c:	440a      	add	r2, r1
  40f85e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f862:	f803 4f01 	strb.w	r4, [r3, #1]!
  40f866:	428a      	cmp	r2, r1
  40f868:	d1f9      	bne.n	40f85e <memmove+0xaa>
  40f86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f86c:	4603      	mov	r3, r0
  40f86e:	e7f3      	b.n	40f858 <memmove+0xa4>
  40f870:	4603      	mov	r3, r0
  40f872:	e7f2      	b.n	40f85a <memmove+0xa6>
  40f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f876:	4672      	mov	r2, lr
  40f878:	e7ee      	b.n	40f858 <memmove+0xa4>
  40f87a:	bf00      	nop

0040f87c <_Balloc>:
  40f87c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40f87e:	b570      	push	{r4, r5, r6, lr}
  40f880:	4605      	mov	r5, r0
  40f882:	460c      	mov	r4, r1
  40f884:	b14b      	cbz	r3, 40f89a <_Balloc+0x1e>
  40f886:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40f88a:	b180      	cbz	r0, 40f8ae <_Balloc+0x32>
  40f88c:	6802      	ldr	r2, [r0, #0]
  40f88e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40f892:	2300      	movs	r3, #0
  40f894:	6103      	str	r3, [r0, #16]
  40f896:	60c3      	str	r3, [r0, #12]
  40f898:	bd70      	pop	{r4, r5, r6, pc}
  40f89a:	2221      	movs	r2, #33	; 0x21
  40f89c:	2104      	movs	r1, #4
  40f89e:	f000 fffd 	bl	41089c <_calloc_r>
  40f8a2:	64e8      	str	r0, [r5, #76]	; 0x4c
  40f8a4:	4603      	mov	r3, r0
  40f8a6:	2800      	cmp	r0, #0
  40f8a8:	d1ed      	bne.n	40f886 <_Balloc+0xa>
  40f8aa:	2000      	movs	r0, #0
  40f8ac:	bd70      	pop	{r4, r5, r6, pc}
  40f8ae:	2101      	movs	r1, #1
  40f8b0:	fa01 f604 	lsl.w	r6, r1, r4
  40f8b4:	1d72      	adds	r2, r6, #5
  40f8b6:	4628      	mov	r0, r5
  40f8b8:	0092      	lsls	r2, r2, #2
  40f8ba:	f000 ffef 	bl	41089c <_calloc_r>
  40f8be:	2800      	cmp	r0, #0
  40f8c0:	d0f3      	beq.n	40f8aa <_Balloc+0x2e>
  40f8c2:	6044      	str	r4, [r0, #4]
  40f8c4:	6086      	str	r6, [r0, #8]
  40f8c6:	e7e4      	b.n	40f892 <_Balloc+0x16>

0040f8c8 <_Bfree>:
  40f8c8:	b131      	cbz	r1, 40f8d8 <_Bfree+0x10>
  40f8ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40f8cc:	684a      	ldr	r2, [r1, #4]
  40f8ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40f8d2:	6008      	str	r0, [r1, #0]
  40f8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40f8d8:	4770      	bx	lr
  40f8da:	bf00      	nop

0040f8dc <__multadd>:
  40f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f8de:	690c      	ldr	r4, [r1, #16]
  40f8e0:	b083      	sub	sp, #12
  40f8e2:	460d      	mov	r5, r1
  40f8e4:	4606      	mov	r6, r0
  40f8e6:	f101 0e14 	add.w	lr, r1, #20
  40f8ea:	2700      	movs	r7, #0
  40f8ec:	f8de 0000 	ldr.w	r0, [lr]
  40f8f0:	b281      	uxth	r1, r0
  40f8f2:	fb02 3101 	mla	r1, r2, r1, r3
  40f8f6:	0c0b      	lsrs	r3, r1, #16
  40f8f8:	0c00      	lsrs	r0, r0, #16
  40f8fa:	fb02 3300 	mla	r3, r2, r0, r3
  40f8fe:	b289      	uxth	r1, r1
  40f900:	3701      	adds	r7, #1
  40f902:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40f906:	42bc      	cmp	r4, r7
  40f908:	f84e 1b04 	str.w	r1, [lr], #4
  40f90c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40f910:	dcec      	bgt.n	40f8ec <__multadd+0x10>
  40f912:	b13b      	cbz	r3, 40f924 <__multadd+0x48>
  40f914:	68aa      	ldr	r2, [r5, #8]
  40f916:	4294      	cmp	r4, r2
  40f918:	da07      	bge.n	40f92a <__multadd+0x4e>
  40f91a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40f91e:	3401      	adds	r4, #1
  40f920:	6153      	str	r3, [r2, #20]
  40f922:	612c      	str	r4, [r5, #16]
  40f924:	4628      	mov	r0, r5
  40f926:	b003      	add	sp, #12
  40f928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f92a:	6869      	ldr	r1, [r5, #4]
  40f92c:	9301      	str	r3, [sp, #4]
  40f92e:	3101      	adds	r1, #1
  40f930:	4630      	mov	r0, r6
  40f932:	f7ff ffa3 	bl	40f87c <_Balloc>
  40f936:	692a      	ldr	r2, [r5, #16]
  40f938:	3202      	adds	r2, #2
  40f93a:	f105 010c 	add.w	r1, r5, #12
  40f93e:	4607      	mov	r7, r0
  40f940:	0092      	lsls	r2, r2, #2
  40f942:	300c      	adds	r0, #12
  40f944:	f7f9 fb66 	bl	409014 <memcpy>
  40f948:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40f94a:	6869      	ldr	r1, [r5, #4]
  40f94c:	9b01      	ldr	r3, [sp, #4]
  40f94e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40f952:	6028      	str	r0, [r5, #0]
  40f954:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40f958:	463d      	mov	r5, r7
  40f95a:	e7de      	b.n	40f91a <__multadd+0x3e>

0040f95c <__s2b>:
  40f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f960:	4c23      	ldr	r4, [pc, #140]	; (40f9f0 <__s2b+0x94>)
  40f962:	9d08      	ldr	r5, [sp, #32]
  40f964:	461f      	mov	r7, r3
  40f966:	3308      	adds	r3, #8
  40f968:	fb84 4e03 	smull	r4, lr, r4, r3
  40f96c:	17db      	asrs	r3, r3, #31
  40f96e:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
  40f972:	f1be 0f01 	cmp.w	lr, #1
  40f976:	4606      	mov	r6, r0
  40f978:	460c      	mov	r4, r1
  40f97a:	4690      	mov	r8, r2
  40f97c:	dd35      	ble.n	40f9ea <__s2b+0x8e>
  40f97e:	2301      	movs	r3, #1
  40f980:	2100      	movs	r1, #0
  40f982:	005b      	lsls	r3, r3, #1
  40f984:	459e      	cmp	lr, r3
  40f986:	f101 0101 	add.w	r1, r1, #1
  40f98a:	dcfa      	bgt.n	40f982 <__s2b+0x26>
  40f98c:	4630      	mov	r0, r6
  40f98e:	f7ff ff75 	bl	40f87c <_Balloc>
  40f992:	2301      	movs	r3, #1
  40f994:	f1b8 0f09 	cmp.w	r8, #9
  40f998:	6145      	str	r5, [r0, #20]
  40f99a:	6103      	str	r3, [r0, #16]
  40f99c:	dd21      	ble.n	40f9e2 <__s2b+0x86>
  40f99e:	f104 0909 	add.w	r9, r4, #9
  40f9a2:	464d      	mov	r5, r9
  40f9a4:	4444      	add	r4, r8
  40f9a6:	f815 3b01 	ldrb.w	r3, [r5], #1
  40f9aa:	4601      	mov	r1, r0
  40f9ac:	3b30      	subs	r3, #48	; 0x30
  40f9ae:	220a      	movs	r2, #10
  40f9b0:	4630      	mov	r0, r6
  40f9b2:	f7ff ff93 	bl	40f8dc <__multadd>
  40f9b6:	42a5      	cmp	r5, r4
  40f9b8:	d1f5      	bne.n	40f9a6 <__s2b+0x4a>
  40f9ba:	eb09 0408 	add.w	r4, r9, r8
  40f9be:	3c08      	subs	r4, #8
  40f9c0:	4547      	cmp	r7, r8
  40f9c2:	dd0c      	ble.n	40f9de <__s2b+0x82>
  40f9c4:	ebc8 0707 	rsb	r7, r8, r7
  40f9c8:	4427      	add	r7, r4
  40f9ca:	f814 3b01 	ldrb.w	r3, [r4], #1
  40f9ce:	4601      	mov	r1, r0
  40f9d0:	3b30      	subs	r3, #48	; 0x30
  40f9d2:	220a      	movs	r2, #10
  40f9d4:	4630      	mov	r0, r6
  40f9d6:	f7ff ff81 	bl	40f8dc <__multadd>
  40f9da:	42a7      	cmp	r7, r4
  40f9dc:	d1f5      	bne.n	40f9ca <__s2b+0x6e>
  40f9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f9e2:	340a      	adds	r4, #10
  40f9e4:	f04f 0809 	mov.w	r8, #9
  40f9e8:	e7ea      	b.n	40f9c0 <__s2b+0x64>
  40f9ea:	2100      	movs	r1, #0
  40f9ec:	e7ce      	b.n	40f98c <__s2b+0x30>
  40f9ee:	bf00      	nop
  40f9f0:	38e38e39 	.word	0x38e38e39

0040f9f4 <__hi0bits>:
  40f9f4:	0c03      	lsrs	r3, r0, #16
  40f9f6:	041b      	lsls	r3, r3, #16
  40f9f8:	b9b3      	cbnz	r3, 40fa28 <__hi0bits+0x34>
  40f9fa:	0400      	lsls	r0, r0, #16
  40f9fc:	2310      	movs	r3, #16
  40f9fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40fa02:	bf04      	itt	eq
  40fa04:	0200      	lsleq	r0, r0, #8
  40fa06:	3308      	addeq	r3, #8
  40fa08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40fa0c:	bf04      	itt	eq
  40fa0e:	0100      	lsleq	r0, r0, #4
  40fa10:	3304      	addeq	r3, #4
  40fa12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40fa16:	bf04      	itt	eq
  40fa18:	0080      	lsleq	r0, r0, #2
  40fa1a:	3302      	addeq	r3, #2
  40fa1c:	2800      	cmp	r0, #0
  40fa1e:	db07      	blt.n	40fa30 <__hi0bits+0x3c>
  40fa20:	0042      	lsls	r2, r0, #1
  40fa22:	d403      	bmi.n	40fa2c <__hi0bits+0x38>
  40fa24:	2020      	movs	r0, #32
  40fa26:	4770      	bx	lr
  40fa28:	2300      	movs	r3, #0
  40fa2a:	e7e8      	b.n	40f9fe <__hi0bits+0xa>
  40fa2c:	1c58      	adds	r0, r3, #1
  40fa2e:	4770      	bx	lr
  40fa30:	4618      	mov	r0, r3
  40fa32:	4770      	bx	lr

0040fa34 <__lo0bits>:
  40fa34:	6803      	ldr	r3, [r0, #0]
  40fa36:	f013 0207 	ands.w	r2, r3, #7
  40fa3a:	d007      	beq.n	40fa4c <__lo0bits+0x18>
  40fa3c:	07d9      	lsls	r1, r3, #31
  40fa3e:	d420      	bmi.n	40fa82 <__lo0bits+0x4e>
  40fa40:	079a      	lsls	r2, r3, #30
  40fa42:	d420      	bmi.n	40fa86 <__lo0bits+0x52>
  40fa44:	089b      	lsrs	r3, r3, #2
  40fa46:	6003      	str	r3, [r0, #0]
  40fa48:	2002      	movs	r0, #2
  40fa4a:	4770      	bx	lr
  40fa4c:	b299      	uxth	r1, r3
  40fa4e:	b909      	cbnz	r1, 40fa54 <__lo0bits+0x20>
  40fa50:	0c1b      	lsrs	r3, r3, #16
  40fa52:	2210      	movs	r2, #16
  40fa54:	f013 0fff 	tst.w	r3, #255	; 0xff
  40fa58:	bf04      	itt	eq
  40fa5a:	0a1b      	lsreq	r3, r3, #8
  40fa5c:	3208      	addeq	r2, #8
  40fa5e:	0719      	lsls	r1, r3, #28
  40fa60:	bf04      	itt	eq
  40fa62:	091b      	lsreq	r3, r3, #4
  40fa64:	3204      	addeq	r2, #4
  40fa66:	0799      	lsls	r1, r3, #30
  40fa68:	bf04      	itt	eq
  40fa6a:	089b      	lsreq	r3, r3, #2
  40fa6c:	3202      	addeq	r2, #2
  40fa6e:	07d9      	lsls	r1, r3, #31
  40fa70:	d404      	bmi.n	40fa7c <__lo0bits+0x48>
  40fa72:	085b      	lsrs	r3, r3, #1
  40fa74:	d101      	bne.n	40fa7a <__lo0bits+0x46>
  40fa76:	2020      	movs	r0, #32
  40fa78:	4770      	bx	lr
  40fa7a:	3201      	adds	r2, #1
  40fa7c:	6003      	str	r3, [r0, #0]
  40fa7e:	4610      	mov	r0, r2
  40fa80:	4770      	bx	lr
  40fa82:	2000      	movs	r0, #0
  40fa84:	4770      	bx	lr
  40fa86:	085b      	lsrs	r3, r3, #1
  40fa88:	6003      	str	r3, [r0, #0]
  40fa8a:	2001      	movs	r0, #1
  40fa8c:	4770      	bx	lr
  40fa8e:	bf00      	nop

0040fa90 <__i2b>:
  40fa90:	b510      	push	{r4, lr}
  40fa92:	460c      	mov	r4, r1
  40fa94:	2101      	movs	r1, #1
  40fa96:	f7ff fef1 	bl	40f87c <_Balloc>
  40fa9a:	2201      	movs	r2, #1
  40fa9c:	6144      	str	r4, [r0, #20]
  40fa9e:	6102      	str	r2, [r0, #16]
  40faa0:	bd10      	pop	{r4, pc}
  40faa2:	bf00      	nop

0040faa4 <__multiply>:
  40faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40faa8:	690d      	ldr	r5, [r1, #16]
  40faaa:	6917      	ldr	r7, [r2, #16]
  40faac:	42bd      	cmp	r5, r7
  40faae:	b083      	sub	sp, #12
  40fab0:	460c      	mov	r4, r1
  40fab2:	4616      	mov	r6, r2
  40fab4:	da04      	bge.n	40fac0 <__multiply+0x1c>
  40fab6:	462a      	mov	r2, r5
  40fab8:	4634      	mov	r4, r6
  40faba:	463d      	mov	r5, r7
  40fabc:	460e      	mov	r6, r1
  40fabe:	4617      	mov	r7, r2
  40fac0:	68a3      	ldr	r3, [r4, #8]
  40fac2:	6861      	ldr	r1, [r4, #4]
  40fac4:	eb05 0807 	add.w	r8, r5, r7
  40fac8:	4598      	cmp	r8, r3
  40faca:	bfc8      	it	gt
  40facc:	3101      	addgt	r1, #1
  40face:	f7ff fed5 	bl	40f87c <_Balloc>
  40fad2:	f100 0c14 	add.w	ip, r0, #20
  40fad6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40fada:	45cc      	cmp	ip, r9
  40fadc:	9000      	str	r0, [sp, #0]
  40fade:	d205      	bcs.n	40faec <__multiply+0x48>
  40fae0:	4663      	mov	r3, ip
  40fae2:	2100      	movs	r1, #0
  40fae4:	f843 1b04 	str.w	r1, [r3], #4
  40fae8:	4599      	cmp	r9, r3
  40faea:	d8fb      	bhi.n	40fae4 <__multiply+0x40>
  40faec:	f106 0214 	add.w	r2, r6, #20
  40faf0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40faf4:	f104 0314 	add.w	r3, r4, #20
  40faf8:	4552      	cmp	r2, sl
  40fafa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40fafe:	d254      	bcs.n	40fbaa <__multiply+0x106>
  40fb00:	f8cd 9004 	str.w	r9, [sp, #4]
  40fb04:	4699      	mov	r9, r3
  40fb06:	f852 3b04 	ldr.w	r3, [r2], #4
  40fb0a:	fa1f fb83 	uxth.w	fp, r3
  40fb0e:	f1bb 0f00 	cmp.w	fp, #0
  40fb12:	d020      	beq.n	40fb56 <__multiply+0xb2>
  40fb14:	2000      	movs	r0, #0
  40fb16:	464f      	mov	r7, r9
  40fb18:	4666      	mov	r6, ip
  40fb1a:	4605      	mov	r5, r0
  40fb1c:	e000      	b.n	40fb20 <__multiply+0x7c>
  40fb1e:	461e      	mov	r6, r3
  40fb20:	f857 4b04 	ldr.w	r4, [r7], #4
  40fb24:	6830      	ldr	r0, [r6, #0]
  40fb26:	b2a1      	uxth	r1, r4
  40fb28:	b283      	uxth	r3, r0
  40fb2a:	fb0b 3101 	mla	r1, fp, r1, r3
  40fb2e:	0c24      	lsrs	r4, r4, #16
  40fb30:	0c00      	lsrs	r0, r0, #16
  40fb32:	194b      	adds	r3, r1, r5
  40fb34:	fb0b 0004 	mla	r0, fp, r4, r0
  40fb38:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40fb3c:	b299      	uxth	r1, r3
  40fb3e:	4633      	mov	r3, r6
  40fb40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40fb44:	45be      	cmp	lr, r7
  40fb46:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40fb4a:	f843 1b04 	str.w	r1, [r3], #4
  40fb4e:	d8e6      	bhi.n	40fb1e <__multiply+0x7a>
  40fb50:	6075      	str	r5, [r6, #4]
  40fb52:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40fb56:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40fb5a:	d020      	beq.n	40fb9e <__multiply+0xfa>
  40fb5c:	f8dc 3000 	ldr.w	r3, [ip]
  40fb60:	4667      	mov	r7, ip
  40fb62:	4618      	mov	r0, r3
  40fb64:	464d      	mov	r5, r9
  40fb66:	2100      	movs	r1, #0
  40fb68:	e000      	b.n	40fb6c <__multiply+0xc8>
  40fb6a:	4637      	mov	r7, r6
  40fb6c:	882c      	ldrh	r4, [r5, #0]
  40fb6e:	0c00      	lsrs	r0, r0, #16
  40fb70:	fb0b 0004 	mla	r0, fp, r4, r0
  40fb74:	4401      	add	r1, r0
  40fb76:	b29c      	uxth	r4, r3
  40fb78:	463e      	mov	r6, r7
  40fb7a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40fb7e:	f846 3b04 	str.w	r3, [r6], #4
  40fb82:	6878      	ldr	r0, [r7, #4]
  40fb84:	f855 4b04 	ldr.w	r4, [r5], #4
  40fb88:	b283      	uxth	r3, r0
  40fb8a:	0c24      	lsrs	r4, r4, #16
  40fb8c:	fb0b 3404 	mla	r4, fp, r4, r3
  40fb90:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40fb94:	45ae      	cmp	lr, r5
  40fb96:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40fb9a:	d8e6      	bhi.n	40fb6a <__multiply+0xc6>
  40fb9c:	607b      	str	r3, [r7, #4]
  40fb9e:	4592      	cmp	sl, r2
  40fba0:	f10c 0c04 	add.w	ip, ip, #4
  40fba4:	d8af      	bhi.n	40fb06 <__multiply+0x62>
  40fba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40fbaa:	f1b8 0f00 	cmp.w	r8, #0
  40fbae:	dd0b      	ble.n	40fbc8 <__multiply+0x124>
  40fbb0:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40fbb4:	f1a9 0904 	sub.w	r9, r9, #4
  40fbb8:	b11b      	cbz	r3, 40fbc2 <__multiply+0x11e>
  40fbba:	e005      	b.n	40fbc8 <__multiply+0x124>
  40fbbc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40fbc0:	b913      	cbnz	r3, 40fbc8 <__multiply+0x124>
  40fbc2:	f1b8 0801 	subs.w	r8, r8, #1
  40fbc6:	d1f9      	bne.n	40fbbc <__multiply+0x118>
  40fbc8:	9800      	ldr	r0, [sp, #0]
  40fbca:	f8c0 8010 	str.w	r8, [r0, #16]
  40fbce:	b003      	add	sp, #12
  40fbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040fbd4 <__pow5mult>:
  40fbd4:	f012 0303 	ands.w	r3, r2, #3
  40fbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fbdc:	4614      	mov	r4, r2
  40fbde:	4607      	mov	r7, r0
  40fbe0:	d12e      	bne.n	40fc40 <__pow5mult+0x6c>
  40fbe2:	460e      	mov	r6, r1
  40fbe4:	10a4      	asrs	r4, r4, #2
  40fbe6:	d01c      	beq.n	40fc22 <__pow5mult+0x4e>
  40fbe8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40fbea:	b395      	cbz	r5, 40fc52 <__pow5mult+0x7e>
  40fbec:	07e3      	lsls	r3, r4, #31
  40fbee:	f04f 0800 	mov.w	r8, #0
  40fbf2:	d406      	bmi.n	40fc02 <__pow5mult+0x2e>
  40fbf4:	1064      	asrs	r4, r4, #1
  40fbf6:	d014      	beq.n	40fc22 <__pow5mult+0x4e>
  40fbf8:	6828      	ldr	r0, [r5, #0]
  40fbfa:	b1a8      	cbz	r0, 40fc28 <__pow5mult+0x54>
  40fbfc:	4605      	mov	r5, r0
  40fbfe:	07e3      	lsls	r3, r4, #31
  40fc00:	d5f8      	bpl.n	40fbf4 <__pow5mult+0x20>
  40fc02:	462a      	mov	r2, r5
  40fc04:	4631      	mov	r1, r6
  40fc06:	4638      	mov	r0, r7
  40fc08:	f7ff ff4c 	bl	40faa4 <__multiply>
  40fc0c:	b1b6      	cbz	r6, 40fc3c <__pow5mult+0x68>
  40fc0e:	6872      	ldr	r2, [r6, #4]
  40fc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40fc12:	1064      	asrs	r4, r4, #1
  40fc14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40fc18:	6031      	str	r1, [r6, #0]
  40fc1a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40fc1e:	4606      	mov	r6, r0
  40fc20:	d1ea      	bne.n	40fbf8 <__pow5mult+0x24>
  40fc22:	4630      	mov	r0, r6
  40fc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fc28:	462a      	mov	r2, r5
  40fc2a:	4629      	mov	r1, r5
  40fc2c:	4638      	mov	r0, r7
  40fc2e:	f7ff ff39 	bl	40faa4 <__multiply>
  40fc32:	6028      	str	r0, [r5, #0]
  40fc34:	f8c0 8000 	str.w	r8, [r0]
  40fc38:	4605      	mov	r5, r0
  40fc3a:	e7e0      	b.n	40fbfe <__pow5mult+0x2a>
  40fc3c:	4606      	mov	r6, r0
  40fc3e:	e7d9      	b.n	40fbf4 <__pow5mult+0x20>
  40fc40:	1e5a      	subs	r2, r3, #1
  40fc42:	4d0b      	ldr	r5, [pc, #44]	; (40fc70 <__pow5mult+0x9c>)
  40fc44:	2300      	movs	r3, #0
  40fc46:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40fc4a:	f7ff fe47 	bl	40f8dc <__multadd>
  40fc4e:	4606      	mov	r6, r0
  40fc50:	e7c8      	b.n	40fbe4 <__pow5mult+0x10>
  40fc52:	2101      	movs	r1, #1
  40fc54:	4638      	mov	r0, r7
  40fc56:	f7ff fe11 	bl	40f87c <_Balloc>
  40fc5a:	f240 2171 	movw	r1, #625	; 0x271
  40fc5e:	2201      	movs	r2, #1
  40fc60:	2300      	movs	r3, #0
  40fc62:	6141      	str	r1, [r0, #20]
  40fc64:	6102      	str	r2, [r0, #16]
  40fc66:	4605      	mov	r5, r0
  40fc68:	64b8      	str	r0, [r7, #72]	; 0x48
  40fc6a:	6003      	str	r3, [r0, #0]
  40fc6c:	e7be      	b.n	40fbec <__pow5mult+0x18>
  40fc6e:	bf00      	nop
  40fc70:	004130d0 	.word	0x004130d0

0040fc74 <__lshift>:
  40fc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fc78:	4691      	mov	r9, r2
  40fc7a:	690a      	ldr	r2, [r1, #16]
  40fc7c:	688b      	ldr	r3, [r1, #8]
  40fc7e:	ea4f 1469 	mov.w	r4, r9, asr #5
  40fc82:	eb04 0802 	add.w	r8, r4, r2
  40fc86:	f108 0501 	add.w	r5, r8, #1
  40fc8a:	429d      	cmp	r5, r3
  40fc8c:	460e      	mov	r6, r1
  40fc8e:	4682      	mov	sl, r0
  40fc90:	6849      	ldr	r1, [r1, #4]
  40fc92:	dd04      	ble.n	40fc9e <__lshift+0x2a>
  40fc94:	005b      	lsls	r3, r3, #1
  40fc96:	429d      	cmp	r5, r3
  40fc98:	f101 0101 	add.w	r1, r1, #1
  40fc9c:	dcfa      	bgt.n	40fc94 <__lshift+0x20>
  40fc9e:	4650      	mov	r0, sl
  40fca0:	f7ff fdec 	bl	40f87c <_Balloc>
  40fca4:	2c00      	cmp	r4, #0
  40fca6:	f100 0214 	add.w	r2, r0, #20
  40fcaa:	dd38      	ble.n	40fd1e <__lshift+0xaa>
  40fcac:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40fcb0:	2100      	movs	r1, #0
  40fcb2:	f842 1b04 	str.w	r1, [r2], #4
  40fcb6:	4293      	cmp	r3, r2
  40fcb8:	d1fb      	bne.n	40fcb2 <__lshift+0x3e>
  40fcba:	6934      	ldr	r4, [r6, #16]
  40fcbc:	f106 0114 	add.w	r1, r6, #20
  40fcc0:	f019 091f 	ands.w	r9, r9, #31
  40fcc4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40fcc8:	d021      	beq.n	40fd0e <__lshift+0x9a>
  40fcca:	f1c9 0220 	rsb	r2, r9, #32
  40fcce:	2400      	movs	r4, #0
  40fcd0:	680f      	ldr	r7, [r1, #0]
  40fcd2:	fa07 fc09 	lsl.w	ip, r7, r9
  40fcd6:	ea4c 0404 	orr.w	r4, ip, r4
  40fcda:	469c      	mov	ip, r3
  40fcdc:	f843 4b04 	str.w	r4, [r3], #4
  40fce0:	f851 4b04 	ldr.w	r4, [r1], #4
  40fce4:	458e      	cmp	lr, r1
  40fce6:	fa24 f402 	lsr.w	r4, r4, r2
  40fcea:	d8f1      	bhi.n	40fcd0 <__lshift+0x5c>
  40fcec:	f8cc 4004 	str.w	r4, [ip, #4]
  40fcf0:	b10c      	cbz	r4, 40fcf6 <__lshift+0x82>
  40fcf2:	f108 0502 	add.w	r5, r8, #2
  40fcf6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40fcfa:	6872      	ldr	r2, [r6, #4]
  40fcfc:	3d01      	subs	r5, #1
  40fcfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40fd02:	6105      	str	r5, [r0, #16]
  40fd04:	6031      	str	r1, [r6, #0]
  40fd06:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40fd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fd0e:	3b04      	subs	r3, #4
  40fd10:	f851 2b04 	ldr.w	r2, [r1], #4
  40fd14:	f843 2f04 	str.w	r2, [r3, #4]!
  40fd18:	458e      	cmp	lr, r1
  40fd1a:	d8f9      	bhi.n	40fd10 <__lshift+0x9c>
  40fd1c:	e7eb      	b.n	40fcf6 <__lshift+0x82>
  40fd1e:	4613      	mov	r3, r2
  40fd20:	e7cb      	b.n	40fcba <__lshift+0x46>
  40fd22:	bf00      	nop

0040fd24 <__mcmp>:
  40fd24:	6902      	ldr	r2, [r0, #16]
  40fd26:	690b      	ldr	r3, [r1, #16]
  40fd28:	1ad2      	subs	r2, r2, r3
  40fd2a:	d112      	bne.n	40fd52 <__mcmp+0x2e>
  40fd2c:	009b      	lsls	r3, r3, #2
  40fd2e:	3014      	adds	r0, #20
  40fd30:	3114      	adds	r1, #20
  40fd32:	4419      	add	r1, r3
  40fd34:	b410      	push	{r4}
  40fd36:	4403      	add	r3, r0
  40fd38:	e001      	b.n	40fd3e <__mcmp+0x1a>
  40fd3a:	4298      	cmp	r0, r3
  40fd3c:	d20b      	bcs.n	40fd56 <__mcmp+0x32>
  40fd3e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40fd42:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40fd46:	4294      	cmp	r4, r2
  40fd48:	d0f7      	beq.n	40fd3a <__mcmp+0x16>
  40fd4a:	d307      	bcc.n	40fd5c <__mcmp+0x38>
  40fd4c:	2001      	movs	r0, #1
  40fd4e:	bc10      	pop	{r4}
  40fd50:	4770      	bx	lr
  40fd52:	4610      	mov	r0, r2
  40fd54:	4770      	bx	lr
  40fd56:	2000      	movs	r0, #0
  40fd58:	bc10      	pop	{r4}
  40fd5a:	4770      	bx	lr
  40fd5c:	f04f 30ff 	mov.w	r0, #4294967295
  40fd60:	e7f5      	b.n	40fd4e <__mcmp+0x2a>
  40fd62:	bf00      	nop

0040fd64 <__mdiff>:
  40fd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40fd68:	690b      	ldr	r3, [r1, #16]
  40fd6a:	460f      	mov	r7, r1
  40fd6c:	6911      	ldr	r1, [r2, #16]
  40fd6e:	1a5b      	subs	r3, r3, r1
  40fd70:	2b00      	cmp	r3, #0
  40fd72:	4690      	mov	r8, r2
  40fd74:	d117      	bne.n	40fda6 <__mdiff+0x42>
  40fd76:	0089      	lsls	r1, r1, #2
  40fd78:	f107 0214 	add.w	r2, r7, #20
  40fd7c:	f108 0514 	add.w	r5, r8, #20
  40fd80:	1853      	adds	r3, r2, r1
  40fd82:	4429      	add	r1, r5
  40fd84:	e001      	b.n	40fd8a <__mdiff+0x26>
  40fd86:	429a      	cmp	r2, r3
  40fd88:	d25e      	bcs.n	40fe48 <__mdiff+0xe4>
  40fd8a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40fd8e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40fd92:	42a6      	cmp	r6, r4
  40fd94:	d0f7      	beq.n	40fd86 <__mdiff+0x22>
  40fd96:	d260      	bcs.n	40fe5a <__mdiff+0xf6>
  40fd98:	463b      	mov	r3, r7
  40fd9a:	4614      	mov	r4, r2
  40fd9c:	4647      	mov	r7, r8
  40fd9e:	f04f 0901 	mov.w	r9, #1
  40fda2:	4698      	mov	r8, r3
  40fda4:	e006      	b.n	40fdb4 <__mdiff+0x50>
  40fda6:	db5d      	blt.n	40fe64 <__mdiff+0x100>
  40fda8:	f107 0514 	add.w	r5, r7, #20
  40fdac:	f102 0414 	add.w	r4, r2, #20
  40fdb0:	f04f 0900 	mov.w	r9, #0
  40fdb4:	6879      	ldr	r1, [r7, #4]
  40fdb6:	f7ff fd61 	bl	40f87c <_Balloc>
  40fdba:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40fdbe:	693e      	ldr	r6, [r7, #16]
  40fdc0:	f8c0 900c 	str.w	r9, [r0, #12]
  40fdc4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40fdc8:	46a6      	mov	lr, r4
  40fdca:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40fdce:	f100 0414 	add.w	r4, r0, #20
  40fdd2:	2300      	movs	r3, #0
  40fdd4:	f85e 1b04 	ldr.w	r1, [lr], #4
  40fdd8:	f855 8b04 	ldr.w	r8, [r5], #4
  40fddc:	b28a      	uxth	r2, r1
  40fdde:	fa13 f388 	uxtah	r3, r3, r8
  40fde2:	0c09      	lsrs	r1, r1, #16
  40fde4:	1a9a      	subs	r2, r3, r2
  40fde6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40fdea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40fdee:	b292      	uxth	r2, r2
  40fdf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40fdf4:	45f4      	cmp	ip, lr
  40fdf6:	f844 2b04 	str.w	r2, [r4], #4
  40fdfa:	ea4f 4323 	mov.w	r3, r3, asr #16
  40fdfe:	d8e9      	bhi.n	40fdd4 <__mdiff+0x70>
  40fe00:	42af      	cmp	r7, r5
  40fe02:	d917      	bls.n	40fe34 <__mdiff+0xd0>
  40fe04:	46a4      	mov	ip, r4
  40fe06:	4629      	mov	r1, r5
  40fe08:	f851 eb04 	ldr.w	lr, [r1], #4
  40fe0c:	fa13 f28e 	uxtah	r2, r3, lr
  40fe10:	1413      	asrs	r3, r2, #16
  40fe12:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40fe16:	b292      	uxth	r2, r2
  40fe18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40fe1c:	428f      	cmp	r7, r1
  40fe1e:	f84c 2b04 	str.w	r2, [ip], #4
  40fe22:	ea4f 4323 	mov.w	r3, r3, asr #16
  40fe26:	d8ef      	bhi.n	40fe08 <__mdiff+0xa4>
  40fe28:	43ed      	mvns	r5, r5
  40fe2a:	443d      	add	r5, r7
  40fe2c:	f025 0503 	bic.w	r5, r5, #3
  40fe30:	3504      	adds	r5, #4
  40fe32:	442c      	add	r4, r5
  40fe34:	3c04      	subs	r4, #4
  40fe36:	b922      	cbnz	r2, 40fe42 <__mdiff+0xde>
  40fe38:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40fe3c:	3e01      	subs	r6, #1
  40fe3e:	2b00      	cmp	r3, #0
  40fe40:	d0fa      	beq.n	40fe38 <__mdiff+0xd4>
  40fe42:	6106      	str	r6, [r0, #16]
  40fe44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fe48:	2100      	movs	r1, #0
  40fe4a:	f7ff fd17 	bl	40f87c <_Balloc>
  40fe4e:	2201      	movs	r2, #1
  40fe50:	2300      	movs	r3, #0
  40fe52:	6102      	str	r2, [r0, #16]
  40fe54:	6143      	str	r3, [r0, #20]
  40fe56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fe5a:	462c      	mov	r4, r5
  40fe5c:	f04f 0900 	mov.w	r9, #0
  40fe60:	4615      	mov	r5, r2
  40fe62:	e7a7      	b.n	40fdb4 <__mdiff+0x50>
  40fe64:	463b      	mov	r3, r7
  40fe66:	f107 0414 	add.w	r4, r7, #20
  40fe6a:	f108 0514 	add.w	r5, r8, #20
  40fe6e:	4647      	mov	r7, r8
  40fe70:	f04f 0901 	mov.w	r9, #1
  40fe74:	4698      	mov	r8, r3
  40fe76:	e79d      	b.n	40fdb4 <__mdiff+0x50>

0040fe78 <__ulp>:
  40fe78:	4b0f      	ldr	r3, [pc, #60]	; (40feb8 <__ulp+0x40>)
  40fe7a:	400b      	ands	r3, r1
  40fe7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  40fe80:	2b00      	cmp	r3, #0
  40fe82:	dd02      	ble.n	40fe8a <__ulp+0x12>
  40fe84:	2000      	movs	r0, #0
  40fe86:	4619      	mov	r1, r3
  40fe88:	4770      	bx	lr
  40fe8a:	425b      	negs	r3, r3
  40fe8c:	151b      	asrs	r3, r3, #20
  40fe8e:	2b13      	cmp	r3, #19
  40fe90:	dd0b      	ble.n	40feaa <__ulp+0x32>
  40fe92:	3b14      	subs	r3, #20
  40fe94:	2b1e      	cmp	r3, #30
  40fe96:	bfdd      	ittte	le
  40fe98:	f1c3 031f 	rsble	r3, r3, #31
  40fe9c:	2201      	movle	r2, #1
  40fe9e:	fa02 f303 	lslle.w	r3, r2, r3
  40fea2:	2301      	movgt	r3, #1
  40fea4:	2100      	movs	r1, #0
  40fea6:	4618      	mov	r0, r3
  40fea8:	4770      	bx	lr
  40feaa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40feae:	2000      	movs	r0, #0
  40feb0:	fa42 f103 	asr.w	r1, r2, r3
  40feb4:	4770      	bx	lr
  40feb6:	bf00      	nop
  40feb8:	7ff00000 	.word	0x7ff00000

0040febc <__b2d>:
  40febc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fec0:	6906      	ldr	r6, [r0, #16]
  40fec2:	f100 0814 	add.w	r8, r0, #20
  40fec6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
  40feca:	f856 7c04 	ldr.w	r7, [r6, #-4]
  40fece:	4638      	mov	r0, r7
  40fed0:	f7ff fd90 	bl	40f9f4 <__hi0bits>
  40fed4:	f1c0 0320 	rsb	r3, r0, #32
  40fed8:	280a      	cmp	r0, #10
  40feda:	600b      	str	r3, [r1, #0]
  40fedc:	f1a6 0304 	sub.w	r3, r6, #4
  40fee0:	dc1a      	bgt.n	40ff18 <__b2d+0x5c>
  40fee2:	4598      	cmp	r8, r3
  40fee4:	bf38      	it	cc
  40fee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
  40feea:	f1c0 020b 	rsb	r2, r0, #11
  40feee:	fa27 f102 	lsr.w	r1, r7, r2
  40fef2:	bf38      	it	cc
  40fef4:	fa23 f202 	lsrcc.w	r2, r3, r2
  40fef8:	f100 0315 	add.w	r3, r0, #21
  40fefc:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
  40ff00:	bf28      	it	cs
  40ff02:	2200      	movcs	r2, #0
  40ff04:	fa07 f303 	lsl.w	r3, r7, r3
  40ff08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40ff0c:	ea43 0402 	orr.w	r4, r3, r2
  40ff10:	4620      	mov	r0, r4
  40ff12:	4629      	mov	r1, r5
  40ff14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff18:	4598      	cmp	r8, r3
  40ff1a:	d220      	bcs.n	40ff5e <__b2d+0xa2>
  40ff1c:	f1b0 020b 	subs.w	r2, r0, #11
  40ff20:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40ff24:	d01e      	beq.n	40ff64 <__b2d+0xa8>
  40ff26:	fa07 f002 	lsl.w	r0, r7, r2
  40ff2a:	f040 507f 	orr.w	r0, r0, #1069547520	; 0x3fc00000
  40ff2e:	f1c2 0720 	rsb	r7, r2, #32
  40ff32:	f1a6 0308 	sub.w	r3, r6, #8
  40ff36:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
  40ff3a:	fa21 fe07 	lsr.w	lr, r1, r7
  40ff3e:	4598      	cmp	r8, r3
  40ff40:	ea40 050e 	orr.w	r5, r0, lr
  40ff44:	d220      	bcs.n	40ff88 <__b2d+0xcc>
  40ff46:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  40ff4a:	fa01 f002 	lsl.w	r0, r1, r2
  40ff4e:	fa23 f207 	lsr.w	r2, r3, r7
  40ff52:	4302      	orrs	r2, r0
  40ff54:	4614      	mov	r4, r2
  40ff56:	4620      	mov	r0, r4
  40ff58:	4629      	mov	r1, r5
  40ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff5e:	380b      	subs	r0, #11
  40ff60:	d109      	bne.n	40ff76 <__b2d+0xba>
  40ff62:	4601      	mov	r1, r0
  40ff64:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
  40ff68:	460c      	mov	r4, r1
  40ff6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40ff6e:	4620      	mov	r0, r4
  40ff70:	4629      	mov	r1, r5
  40ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff76:	fa07 f000 	lsl.w	r0, r7, r0
  40ff7a:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
  40ff7e:	2200      	movs	r2, #0
  40ff80:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40ff84:	4614      	mov	r4, r2
  40ff86:	e7e6      	b.n	40ff56 <__b2d+0x9a>
  40ff88:	fa01 f202 	lsl.w	r2, r1, r2
  40ff8c:	4614      	mov	r4, r2
  40ff8e:	e7e2      	b.n	40ff56 <__b2d+0x9a>

0040ff90 <__d2b>:
  40ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ff94:	b082      	sub	sp, #8
  40ff96:	2101      	movs	r1, #1
  40ff98:	461c      	mov	r4, r3
  40ff9a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ff9e:	4615      	mov	r5, r2
  40ffa0:	9e08      	ldr	r6, [sp, #32]
  40ffa2:	f7ff fc6b 	bl	40f87c <_Balloc>
  40ffa6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ffaa:	4680      	mov	r8, r0
  40ffac:	b10f      	cbz	r7, 40ffb2 <__d2b+0x22>
  40ffae:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ffb2:	9401      	str	r4, [sp, #4]
  40ffb4:	b31d      	cbz	r5, 40fffe <__d2b+0x6e>
  40ffb6:	a802      	add	r0, sp, #8
  40ffb8:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ffbc:	f7ff fd3a 	bl	40fa34 <__lo0bits>
  40ffc0:	2800      	cmp	r0, #0
  40ffc2:	d134      	bne.n	41002e <__d2b+0x9e>
  40ffc4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ffc8:	f8c8 2014 	str.w	r2, [r8, #20]
  40ffcc:	2b00      	cmp	r3, #0
  40ffce:	bf0c      	ite	eq
  40ffd0:	2101      	moveq	r1, #1
  40ffd2:	2102      	movne	r1, #2
  40ffd4:	f8c8 3018 	str.w	r3, [r8, #24]
  40ffd8:	f8c8 1010 	str.w	r1, [r8, #16]
  40ffdc:	b9df      	cbnz	r7, 410016 <__d2b+0x86>
  40ffde:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40ffe2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40ffe6:	6030      	str	r0, [r6, #0]
  40ffe8:	6918      	ldr	r0, [r3, #16]
  40ffea:	f7ff fd03 	bl	40f9f4 <__hi0bits>
  40ffee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fff0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40fff4:	6018      	str	r0, [r3, #0]
  40fff6:	4640      	mov	r0, r8
  40fff8:	b002      	add	sp, #8
  40fffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fffe:	a801      	add	r0, sp, #4
  410000:	f7ff fd18 	bl	40fa34 <__lo0bits>
  410004:	9b01      	ldr	r3, [sp, #4]
  410006:	f8c8 3014 	str.w	r3, [r8, #20]
  41000a:	2101      	movs	r1, #1
  41000c:	3020      	adds	r0, #32
  41000e:	f8c8 1010 	str.w	r1, [r8, #16]
  410012:	2f00      	cmp	r7, #0
  410014:	d0e3      	beq.n	40ffde <__d2b+0x4e>
  410016:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410018:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  41001c:	4407      	add	r7, r0
  41001e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  410022:	6037      	str	r7, [r6, #0]
  410024:	6018      	str	r0, [r3, #0]
  410026:	4640      	mov	r0, r8
  410028:	b002      	add	sp, #8
  41002a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41002e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  410032:	f1c0 0120 	rsb	r1, r0, #32
  410036:	fa03 f101 	lsl.w	r1, r3, r1
  41003a:	430a      	orrs	r2, r1
  41003c:	40c3      	lsrs	r3, r0
  41003e:	9301      	str	r3, [sp, #4]
  410040:	f8c8 2014 	str.w	r2, [r8, #20]
  410044:	e7c2      	b.n	40ffcc <__d2b+0x3c>
  410046:	bf00      	nop

00410048 <__ratio>:
  410048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41004c:	b083      	sub	sp, #12
  41004e:	460e      	mov	r6, r1
  410050:	4669      	mov	r1, sp
  410052:	4607      	mov	r7, r0
  410054:	f7ff ff32 	bl	40febc <__b2d>
  410058:	4604      	mov	r4, r0
  41005a:	460d      	mov	r5, r1
  41005c:	4630      	mov	r0, r6
  41005e:	a901      	add	r1, sp, #4
  410060:	f7ff ff2c 	bl	40febc <__b2d>
  410064:	4689      	mov	r9, r1
  410066:	e89d 000a 	ldmia.w	sp, {r1, r3}
  41006a:	693a      	ldr	r2, [r7, #16]
  41006c:	6936      	ldr	r6, [r6, #16]
  41006e:	1ac9      	subs	r1, r1, r3
  410070:	1b96      	subs	r6, r2, r6
  410072:	eb01 1346 	add.w	r3, r1, r6, lsl #5
  410076:	2b00      	cmp	r3, #0
  410078:	4680      	mov	r8, r0
  41007a:	dd0b      	ble.n	410094 <__ratio+0x4c>
  41007c:	eb05 5103 	add.w	r1, r5, r3, lsl #20
  410080:	460d      	mov	r5, r1
  410082:	4642      	mov	r2, r8
  410084:	464b      	mov	r3, r9
  410086:	4620      	mov	r0, r4
  410088:	4629      	mov	r1, r5
  41008a:	f7f7 ffa9 	bl	407fe0 <__aeabi_ddiv>
  41008e:	b003      	add	sp, #12
  410090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410094:	eba9 5703 	sub.w	r7, r9, r3, lsl #20
  410098:	46b9      	mov	r9, r7
  41009a:	e7f2      	b.n	410082 <__ratio+0x3a>

0041009c <__copybits>:
  41009c:	b470      	push	{r4, r5, r6}
  41009e:	6914      	ldr	r4, [r2, #16]
  4100a0:	f102 0314 	add.w	r3, r2, #20
  4100a4:	3901      	subs	r1, #1
  4100a6:	114e      	asrs	r6, r1, #5
  4100a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  4100ac:	3601      	adds	r6, #1
  4100ae:	42a3      	cmp	r3, r4
  4100b0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  4100b4:	d20c      	bcs.n	4100d0 <__copybits+0x34>
  4100b6:	1f01      	subs	r1, r0, #4
  4100b8:	f853 5b04 	ldr.w	r5, [r3], #4
  4100bc:	f841 5f04 	str.w	r5, [r1, #4]!
  4100c0:	429c      	cmp	r4, r3
  4100c2:	d8f9      	bhi.n	4100b8 <__copybits+0x1c>
  4100c4:	1aa3      	subs	r3, r4, r2
  4100c6:	3b15      	subs	r3, #21
  4100c8:	f023 0303 	bic.w	r3, r3, #3
  4100cc:	3304      	adds	r3, #4
  4100ce:	4418      	add	r0, r3
  4100d0:	4286      	cmp	r6, r0
  4100d2:	d904      	bls.n	4100de <__copybits+0x42>
  4100d4:	2300      	movs	r3, #0
  4100d6:	f840 3b04 	str.w	r3, [r0], #4
  4100da:	4286      	cmp	r6, r0
  4100dc:	d8fb      	bhi.n	4100d6 <__copybits+0x3a>
  4100de:	bc70      	pop	{r4, r5, r6}
  4100e0:	4770      	bx	lr
  4100e2:	bf00      	nop

004100e4 <__any_on>:
  4100e4:	6903      	ldr	r3, [r0, #16]
  4100e6:	114a      	asrs	r2, r1, #5
  4100e8:	4293      	cmp	r3, r2
  4100ea:	b410      	push	{r4}
  4100ec:	f100 0414 	add.w	r4, r0, #20
  4100f0:	da0f      	bge.n	410112 <__any_on+0x2e>
  4100f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4100f6:	429c      	cmp	r4, r3
  4100f8:	d21f      	bcs.n	41013a <__any_on+0x56>
  4100fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
  4100fe:	3b04      	subs	r3, #4
  410100:	b118      	cbz	r0, 41010a <__any_on+0x26>
  410102:	e014      	b.n	41012e <__any_on+0x4a>
  410104:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  410108:	b98a      	cbnz	r2, 41012e <__any_on+0x4a>
  41010a:	429c      	cmp	r4, r3
  41010c:	d3fa      	bcc.n	410104 <__any_on+0x20>
  41010e:	bc10      	pop	{r4}
  410110:	4770      	bx	lr
  410112:	dd0f      	ble.n	410134 <__any_on+0x50>
  410114:	f011 011f 	ands.w	r1, r1, #31
  410118:	d00c      	beq.n	410134 <__any_on+0x50>
  41011a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  41011e:	fa20 f301 	lsr.w	r3, r0, r1
  410122:	fa03 f101 	lsl.w	r1, r3, r1
  410126:	4288      	cmp	r0, r1
  410128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  41012c:	d0e3      	beq.n	4100f6 <__any_on+0x12>
  41012e:	2001      	movs	r0, #1
  410130:	bc10      	pop	{r4}
  410132:	4770      	bx	lr
  410134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  410138:	e7dd      	b.n	4100f6 <__any_on+0x12>
  41013a:	2000      	movs	r0, #0
  41013c:	e7e7      	b.n	41010e <__any_on+0x2a>
  41013e:	bf00      	nop

00410140 <_realloc_r>:
  410140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410144:	4617      	mov	r7, r2
  410146:	b083      	sub	sp, #12
  410148:	2900      	cmp	r1, #0
  41014a:	f000 80c1 	beq.w	4102d0 <_realloc_r+0x190>
  41014e:	460e      	mov	r6, r1
  410150:	4681      	mov	r9, r0
  410152:	f107 050b 	add.w	r5, r7, #11
  410156:	f7f9 f845 	bl	4091e4 <__malloc_lock>
  41015a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  41015e:	2d16      	cmp	r5, #22
  410160:	f02e 0403 	bic.w	r4, lr, #3
  410164:	f1a6 0808 	sub.w	r8, r6, #8
  410168:	d840      	bhi.n	4101ec <_realloc_r+0xac>
  41016a:	2210      	movs	r2, #16
  41016c:	4615      	mov	r5, r2
  41016e:	42af      	cmp	r7, r5
  410170:	d841      	bhi.n	4101f6 <_realloc_r+0xb6>
  410172:	4294      	cmp	r4, r2
  410174:	da75      	bge.n	410262 <_realloc_r+0x122>
  410176:	4bc9      	ldr	r3, [pc, #804]	; (41049c <_realloc_r+0x35c>)
  410178:	6899      	ldr	r1, [r3, #8]
  41017a:	eb08 0004 	add.w	r0, r8, r4
  41017e:	4288      	cmp	r0, r1
  410180:	6841      	ldr	r1, [r0, #4]
  410182:	f000 80d9 	beq.w	410338 <_realloc_r+0x1f8>
  410186:	f021 0301 	bic.w	r3, r1, #1
  41018a:	4403      	add	r3, r0
  41018c:	685b      	ldr	r3, [r3, #4]
  41018e:	07db      	lsls	r3, r3, #31
  410190:	d57d      	bpl.n	41028e <_realloc_r+0x14e>
  410192:	f01e 0f01 	tst.w	lr, #1
  410196:	d035      	beq.n	410204 <_realloc_r+0xc4>
  410198:	4639      	mov	r1, r7
  41019a:	4648      	mov	r0, r9
  41019c:	f7f8 fc82 	bl	408aa4 <_malloc_r>
  4101a0:	4607      	mov	r7, r0
  4101a2:	b1e0      	cbz	r0, 4101de <_realloc_r+0x9e>
  4101a4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4101a8:	f023 0301 	bic.w	r3, r3, #1
  4101ac:	4443      	add	r3, r8
  4101ae:	f1a0 0208 	sub.w	r2, r0, #8
  4101b2:	429a      	cmp	r2, r3
  4101b4:	f000 8144 	beq.w	410440 <_realloc_r+0x300>
  4101b8:	1f22      	subs	r2, r4, #4
  4101ba:	2a24      	cmp	r2, #36	; 0x24
  4101bc:	f200 8131 	bhi.w	410422 <_realloc_r+0x2e2>
  4101c0:	2a13      	cmp	r2, #19
  4101c2:	f200 8104 	bhi.w	4103ce <_realloc_r+0x28e>
  4101c6:	4603      	mov	r3, r0
  4101c8:	4632      	mov	r2, r6
  4101ca:	6811      	ldr	r1, [r2, #0]
  4101cc:	6019      	str	r1, [r3, #0]
  4101ce:	6851      	ldr	r1, [r2, #4]
  4101d0:	6059      	str	r1, [r3, #4]
  4101d2:	6892      	ldr	r2, [r2, #8]
  4101d4:	609a      	str	r2, [r3, #8]
  4101d6:	4631      	mov	r1, r6
  4101d8:	4648      	mov	r0, r9
  4101da:	f7fe fb9f 	bl	40e91c <_free_r>
  4101de:	4648      	mov	r0, r9
  4101e0:	f7f9 f802 	bl	4091e8 <__malloc_unlock>
  4101e4:	4638      	mov	r0, r7
  4101e6:	b003      	add	sp, #12
  4101e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4101ec:	f025 0507 	bic.w	r5, r5, #7
  4101f0:	2d00      	cmp	r5, #0
  4101f2:	462a      	mov	r2, r5
  4101f4:	dabb      	bge.n	41016e <_realloc_r+0x2e>
  4101f6:	230c      	movs	r3, #12
  4101f8:	2000      	movs	r0, #0
  4101fa:	f8c9 3000 	str.w	r3, [r9]
  4101fe:	b003      	add	sp, #12
  410200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410204:	f856 3c08 	ldr.w	r3, [r6, #-8]
  410208:	ebc3 0a08 	rsb	sl, r3, r8
  41020c:	f8da 3004 	ldr.w	r3, [sl, #4]
  410210:	f023 0c03 	bic.w	ip, r3, #3
  410214:	eb04 030c 	add.w	r3, r4, ip
  410218:	4293      	cmp	r3, r2
  41021a:	dbbd      	blt.n	410198 <_realloc_r+0x58>
  41021c:	4657      	mov	r7, sl
  41021e:	f8da 100c 	ldr.w	r1, [sl, #12]
  410222:	f857 0f08 	ldr.w	r0, [r7, #8]!
  410226:	1f22      	subs	r2, r4, #4
  410228:	2a24      	cmp	r2, #36	; 0x24
  41022a:	60c1      	str	r1, [r0, #12]
  41022c:	6088      	str	r0, [r1, #8]
  41022e:	f200 8117 	bhi.w	410460 <_realloc_r+0x320>
  410232:	2a13      	cmp	r2, #19
  410234:	f240 8112 	bls.w	41045c <_realloc_r+0x31c>
  410238:	6831      	ldr	r1, [r6, #0]
  41023a:	f8ca 1008 	str.w	r1, [sl, #8]
  41023e:	6871      	ldr	r1, [r6, #4]
  410240:	f8ca 100c 	str.w	r1, [sl, #12]
  410244:	2a1b      	cmp	r2, #27
  410246:	f200 812b 	bhi.w	4104a0 <_realloc_r+0x360>
  41024a:	3608      	adds	r6, #8
  41024c:	f10a 0210 	add.w	r2, sl, #16
  410250:	6831      	ldr	r1, [r6, #0]
  410252:	6011      	str	r1, [r2, #0]
  410254:	6871      	ldr	r1, [r6, #4]
  410256:	6051      	str	r1, [r2, #4]
  410258:	68b1      	ldr	r1, [r6, #8]
  41025a:	6091      	str	r1, [r2, #8]
  41025c:	463e      	mov	r6, r7
  41025e:	461c      	mov	r4, r3
  410260:	46d0      	mov	r8, sl
  410262:	1b63      	subs	r3, r4, r5
  410264:	2b0f      	cmp	r3, #15
  410266:	d81d      	bhi.n	4102a4 <_realloc_r+0x164>
  410268:	f8d8 3004 	ldr.w	r3, [r8, #4]
  41026c:	f003 0301 	and.w	r3, r3, #1
  410270:	4323      	orrs	r3, r4
  410272:	4444      	add	r4, r8
  410274:	f8c8 3004 	str.w	r3, [r8, #4]
  410278:	6863      	ldr	r3, [r4, #4]
  41027a:	f043 0301 	orr.w	r3, r3, #1
  41027e:	6063      	str	r3, [r4, #4]
  410280:	4648      	mov	r0, r9
  410282:	f7f8 ffb1 	bl	4091e8 <__malloc_unlock>
  410286:	4630      	mov	r0, r6
  410288:	b003      	add	sp, #12
  41028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41028e:	f021 0103 	bic.w	r1, r1, #3
  410292:	4421      	add	r1, r4
  410294:	4291      	cmp	r1, r2
  410296:	db21      	blt.n	4102dc <_realloc_r+0x19c>
  410298:	68c3      	ldr	r3, [r0, #12]
  41029a:	6882      	ldr	r2, [r0, #8]
  41029c:	460c      	mov	r4, r1
  41029e:	60d3      	str	r3, [r2, #12]
  4102a0:	609a      	str	r2, [r3, #8]
  4102a2:	e7de      	b.n	410262 <_realloc_r+0x122>
  4102a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4102a8:	eb08 0105 	add.w	r1, r8, r5
  4102ac:	f002 0201 	and.w	r2, r2, #1
  4102b0:	4315      	orrs	r5, r2
  4102b2:	f043 0201 	orr.w	r2, r3, #1
  4102b6:	440b      	add	r3, r1
  4102b8:	f8c8 5004 	str.w	r5, [r8, #4]
  4102bc:	604a      	str	r2, [r1, #4]
  4102be:	685a      	ldr	r2, [r3, #4]
  4102c0:	f042 0201 	orr.w	r2, r2, #1
  4102c4:	3108      	adds	r1, #8
  4102c6:	605a      	str	r2, [r3, #4]
  4102c8:	4648      	mov	r0, r9
  4102ca:	f7fe fb27 	bl	40e91c <_free_r>
  4102ce:	e7d7      	b.n	410280 <_realloc_r+0x140>
  4102d0:	4611      	mov	r1, r2
  4102d2:	b003      	add	sp, #12
  4102d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4102d8:	f7f8 bbe4 	b.w	408aa4 <_malloc_r>
  4102dc:	f01e 0f01 	tst.w	lr, #1
  4102e0:	f47f af5a 	bne.w	410198 <_realloc_r+0x58>
  4102e4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4102e8:	ebc3 0a08 	rsb	sl, r3, r8
  4102ec:	f8da 3004 	ldr.w	r3, [sl, #4]
  4102f0:	f023 0c03 	bic.w	ip, r3, #3
  4102f4:	eb01 0e0c 	add.w	lr, r1, ip
  4102f8:	4596      	cmp	lr, r2
  4102fa:	db8b      	blt.n	410214 <_realloc_r+0xd4>
  4102fc:	68c3      	ldr	r3, [r0, #12]
  4102fe:	6882      	ldr	r2, [r0, #8]
  410300:	4657      	mov	r7, sl
  410302:	60d3      	str	r3, [r2, #12]
  410304:	609a      	str	r2, [r3, #8]
  410306:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41030a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41030e:	60cb      	str	r3, [r1, #12]
  410310:	1f22      	subs	r2, r4, #4
  410312:	2a24      	cmp	r2, #36	; 0x24
  410314:	6099      	str	r1, [r3, #8]
  410316:	f200 8099 	bhi.w	41044c <_realloc_r+0x30c>
  41031a:	2a13      	cmp	r2, #19
  41031c:	d962      	bls.n	4103e4 <_realloc_r+0x2a4>
  41031e:	6833      	ldr	r3, [r6, #0]
  410320:	f8ca 3008 	str.w	r3, [sl, #8]
  410324:	6873      	ldr	r3, [r6, #4]
  410326:	f8ca 300c 	str.w	r3, [sl, #12]
  41032a:	2a1b      	cmp	r2, #27
  41032c:	f200 80a0 	bhi.w	410470 <_realloc_r+0x330>
  410330:	3608      	adds	r6, #8
  410332:	f10a 0310 	add.w	r3, sl, #16
  410336:	e056      	b.n	4103e6 <_realloc_r+0x2a6>
  410338:	f021 0b03 	bic.w	fp, r1, #3
  41033c:	44a3      	add	fp, r4
  41033e:	f105 0010 	add.w	r0, r5, #16
  410342:	4583      	cmp	fp, r0
  410344:	da59      	bge.n	4103fa <_realloc_r+0x2ba>
  410346:	f01e 0f01 	tst.w	lr, #1
  41034a:	f47f af25 	bne.w	410198 <_realloc_r+0x58>
  41034e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  410352:	ebc1 0a08 	rsb	sl, r1, r8
  410356:	f8da 1004 	ldr.w	r1, [sl, #4]
  41035a:	f021 0c03 	bic.w	ip, r1, #3
  41035e:	44e3      	add	fp, ip
  410360:	4558      	cmp	r0, fp
  410362:	f73f af57 	bgt.w	410214 <_realloc_r+0xd4>
  410366:	4657      	mov	r7, sl
  410368:	f8da 100c 	ldr.w	r1, [sl, #12]
  41036c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  410370:	1f22      	subs	r2, r4, #4
  410372:	2a24      	cmp	r2, #36	; 0x24
  410374:	60c1      	str	r1, [r0, #12]
  410376:	6088      	str	r0, [r1, #8]
  410378:	f200 80b4 	bhi.w	4104e4 <_realloc_r+0x3a4>
  41037c:	2a13      	cmp	r2, #19
  41037e:	f240 80a5 	bls.w	4104cc <_realloc_r+0x38c>
  410382:	6831      	ldr	r1, [r6, #0]
  410384:	f8ca 1008 	str.w	r1, [sl, #8]
  410388:	6871      	ldr	r1, [r6, #4]
  41038a:	f8ca 100c 	str.w	r1, [sl, #12]
  41038e:	2a1b      	cmp	r2, #27
  410390:	f200 80af 	bhi.w	4104f2 <_realloc_r+0x3b2>
  410394:	3608      	adds	r6, #8
  410396:	f10a 0210 	add.w	r2, sl, #16
  41039a:	6831      	ldr	r1, [r6, #0]
  41039c:	6011      	str	r1, [r2, #0]
  41039e:	6871      	ldr	r1, [r6, #4]
  4103a0:	6051      	str	r1, [r2, #4]
  4103a2:	68b1      	ldr	r1, [r6, #8]
  4103a4:	6091      	str	r1, [r2, #8]
  4103a6:	eb0a 0105 	add.w	r1, sl, r5
  4103aa:	ebc5 020b 	rsb	r2, r5, fp
  4103ae:	f042 0201 	orr.w	r2, r2, #1
  4103b2:	6099      	str	r1, [r3, #8]
  4103b4:	604a      	str	r2, [r1, #4]
  4103b6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4103ba:	f003 0301 	and.w	r3, r3, #1
  4103be:	431d      	orrs	r5, r3
  4103c0:	4648      	mov	r0, r9
  4103c2:	f8ca 5004 	str.w	r5, [sl, #4]
  4103c6:	f7f8 ff0f 	bl	4091e8 <__malloc_unlock>
  4103ca:	4638      	mov	r0, r7
  4103cc:	e75c      	b.n	410288 <_realloc_r+0x148>
  4103ce:	6833      	ldr	r3, [r6, #0]
  4103d0:	6003      	str	r3, [r0, #0]
  4103d2:	6873      	ldr	r3, [r6, #4]
  4103d4:	6043      	str	r3, [r0, #4]
  4103d6:	2a1b      	cmp	r2, #27
  4103d8:	d827      	bhi.n	41042a <_realloc_r+0x2ea>
  4103da:	f100 0308 	add.w	r3, r0, #8
  4103de:	f106 0208 	add.w	r2, r6, #8
  4103e2:	e6f2      	b.n	4101ca <_realloc_r+0x8a>
  4103e4:	463b      	mov	r3, r7
  4103e6:	6832      	ldr	r2, [r6, #0]
  4103e8:	601a      	str	r2, [r3, #0]
  4103ea:	6872      	ldr	r2, [r6, #4]
  4103ec:	605a      	str	r2, [r3, #4]
  4103ee:	68b2      	ldr	r2, [r6, #8]
  4103f0:	609a      	str	r2, [r3, #8]
  4103f2:	463e      	mov	r6, r7
  4103f4:	4674      	mov	r4, lr
  4103f6:	46d0      	mov	r8, sl
  4103f8:	e733      	b.n	410262 <_realloc_r+0x122>
  4103fa:	eb08 0105 	add.w	r1, r8, r5
  4103fe:	ebc5 0b0b 	rsb	fp, r5, fp
  410402:	f04b 0201 	orr.w	r2, fp, #1
  410406:	6099      	str	r1, [r3, #8]
  410408:	604a      	str	r2, [r1, #4]
  41040a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  41040e:	f003 0301 	and.w	r3, r3, #1
  410412:	431d      	orrs	r5, r3
  410414:	4648      	mov	r0, r9
  410416:	f846 5c04 	str.w	r5, [r6, #-4]
  41041a:	f7f8 fee5 	bl	4091e8 <__malloc_unlock>
  41041e:	4630      	mov	r0, r6
  410420:	e732      	b.n	410288 <_realloc_r+0x148>
  410422:	4631      	mov	r1, r6
  410424:	f7ff f9c6 	bl	40f7b4 <memmove>
  410428:	e6d5      	b.n	4101d6 <_realloc_r+0x96>
  41042a:	68b3      	ldr	r3, [r6, #8]
  41042c:	6083      	str	r3, [r0, #8]
  41042e:	68f3      	ldr	r3, [r6, #12]
  410430:	60c3      	str	r3, [r0, #12]
  410432:	2a24      	cmp	r2, #36	; 0x24
  410434:	d028      	beq.n	410488 <_realloc_r+0x348>
  410436:	f100 0310 	add.w	r3, r0, #16
  41043a:	f106 0210 	add.w	r2, r6, #16
  41043e:	e6c4      	b.n	4101ca <_realloc_r+0x8a>
  410440:	f850 3c04 	ldr.w	r3, [r0, #-4]
  410444:	f023 0303 	bic.w	r3, r3, #3
  410448:	441c      	add	r4, r3
  41044a:	e70a      	b.n	410262 <_realloc_r+0x122>
  41044c:	4631      	mov	r1, r6
  41044e:	4638      	mov	r0, r7
  410450:	4674      	mov	r4, lr
  410452:	46d0      	mov	r8, sl
  410454:	f7ff f9ae 	bl	40f7b4 <memmove>
  410458:	463e      	mov	r6, r7
  41045a:	e702      	b.n	410262 <_realloc_r+0x122>
  41045c:	463a      	mov	r2, r7
  41045e:	e6f7      	b.n	410250 <_realloc_r+0x110>
  410460:	4631      	mov	r1, r6
  410462:	4638      	mov	r0, r7
  410464:	461c      	mov	r4, r3
  410466:	46d0      	mov	r8, sl
  410468:	f7ff f9a4 	bl	40f7b4 <memmove>
  41046c:	463e      	mov	r6, r7
  41046e:	e6f8      	b.n	410262 <_realloc_r+0x122>
  410470:	68b3      	ldr	r3, [r6, #8]
  410472:	f8ca 3010 	str.w	r3, [sl, #16]
  410476:	68f3      	ldr	r3, [r6, #12]
  410478:	f8ca 3014 	str.w	r3, [sl, #20]
  41047c:	2a24      	cmp	r2, #36	; 0x24
  41047e:	d01b      	beq.n	4104b8 <_realloc_r+0x378>
  410480:	3610      	adds	r6, #16
  410482:	f10a 0318 	add.w	r3, sl, #24
  410486:	e7ae      	b.n	4103e6 <_realloc_r+0x2a6>
  410488:	6933      	ldr	r3, [r6, #16]
  41048a:	6103      	str	r3, [r0, #16]
  41048c:	6973      	ldr	r3, [r6, #20]
  41048e:	6143      	str	r3, [r0, #20]
  410490:	f106 0218 	add.w	r2, r6, #24
  410494:	f100 0318 	add.w	r3, r0, #24
  410498:	e697      	b.n	4101ca <_realloc_r+0x8a>
  41049a:	bf00      	nop
  41049c:	2000045c 	.word	0x2000045c
  4104a0:	68b1      	ldr	r1, [r6, #8]
  4104a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4104a6:	68f1      	ldr	r1, [r6, #12]
  4104a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4104ac:	2a24      	cmp	r2, #36	; 0x24
  4104ae:	d00f      	beq.n	4104d0 <_realloc_r+0x390>
  4104b0:	3610      	adds	r6, #16
  4104b2:	f10a 0218 	add.w	r2, sl, #24
  4104b6:	e6cb      	b.n	410250 <_realloc_r+0x110>
  4104b8:	6933      	ldr	r3, [r6, #16]
  4104ba:	f8ca 3018 	str.w	r3, [sl, #24]
  4104be:	6973      	ldr	r3, [r6, #20]
  4104c0:	f8ca 301c 	str.w	r3, [sl, #28]
  4104c4:	3618      	adds	r6, #24
  4104c6:	f10a 0320 	add.w	r3, sl, #32
  4104ca:	e78c      	b.n	4103e6 <_realloc_r+0x2a6>
  4104cc:	463a      	mov	r2, r7
  4104ce:	e764      	b.n	41039a <_realloc_r+0x25a>
  4104d0:	6932      	ldr	r2, [r6, #16]
  4104d2:	f8ca 2018 	str.w	r2, [sl, #24]
  4104d6:	6972      	ldr	r2, [r6, #20]
  4104d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4104dc:	3618      	adds	r6, #24
  4104de:	f10a 0220 	add.w	r2, sl, #32
  4104e2:	e6b5      	b.n	410250 <_realloc_r+0x110>
  4104e4:	4631      	mov	r1, r6
  4104e6:	4638      	mov	r0, r7
  4104e8:	9301      	str	r3, [sp, #4]
  4104ea:	f7ff f963 	bl	40f7b4 <memmove>
  4104ee:	9b01      	ldr	r3, [sp, #4]
  4104f0:	e759      	b.n	4103a6 <_realloc_r+0x266>
  4104f2:	68b1      	ldr	r1, [r6, #8]
  4104f4:	f8ca 1010 	str.w	r1, [sl, #16]
  4104f8:	68f1      	ldr	r1, [r6, #12]
  4104fa:	f8ca 1014 	str.w	r1, [sl, #20]
  4104fe:	2a24      	cmp	r2, #36	; 0x24
  410500:	d003      	beq.n	41050a <_realloc_r+0x3ca>
  410502:	3610      	adds	r6, #16
  410504:	f10a 0218 	add.w	r2, sl, #24
  410508:	e747      	b.n	41039a <_realloc_r+0x25a>
  41050a:	6932      	ldr	r2, [r6, #16]
  41050c:	f8ca 2018 	str.w	r2, [sl, #24]
  410510:	6972      	ldr	r2, [r6, #20]
  410512:	f8ca 201c 	str.w	r2, [sl, #28]
  410516:	3618      	adds	r6, #24
  410518:	f10a 0220 	add.w	r2, sl, #32
  41051c:	e73d      	b.n	41039a <_realloc_r+0x25a>
  41051e:	bf00      	nop

00410520 <nanf>:
  410520:	4800      	ldr	r0, [pc, #0]	; (410524 <nanf+0x4>)
  410522:	4770      	bx	lr
  410524:	7fc00000 	.word	0x7fc00000

00410528 <__sread>:
  410528:	b510      	push	{r4, lr}
  41052a:	460c      	mov	r4, r1
  41052c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410530:	f000 fa74 	bl	410a1c <_read_r>
  410534:	2800      	cmp	r0, #0
  410536:	db03      	blt.n	410540 <__sread+0x18>
  410538:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41053a:	4403      	add	r3, r0
  41053c:	6523      	str	r3, [r4, #80]	; 0x50
  41053e:	bd10      	pop	{r4, pc}
  410540:	89a3      	ldrh	r3, [r4, #12]
  410542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  410546:	81a3      	strh	r3, [r4, #12]
  410548:	bd10      	pop	{r4, pc}
  41054a:	bf00      	nop

0041054c <__swrite>:
  41054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410550:	4616      	mov	r6, r2
  410552:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  410556:	461f      	mov	r7, r3
  410558:	05d3      	lsls	r3, r2, #23
  41055a:	460c      	mov	r4, r1
  41055c:	4605      	mov	r5, r0
  41055e:	d507      	bpl.n	410570 <__swrite+0x24>
  410560:	2200      	movs	r2, #0
  410562:	2302      	movs	r3, #2
  410564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410568:	f000 fa42 	bl	4109f0 <_lseek_r>
  41056c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  410574:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  410578:	81a2      	strh	r2, [r4, #12]
  41057a:	463b      	mov	r3, r7
  41057c:	4632      	mov	r2, r6
  41057e:	4628      	mov	r0, r5
  410580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  410584:	f000 b922 	b.w	4107cc <_write_r>

00410588 <__sseek>:
  410588:	b510      	push	{r4, lr}
  41058a:	460c      	mov	r4, r1
  41058c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410590:	f000 fa2e 	bl	4109f0 <_lseek_r>
  410594:	89a3      	ldrh	r3, [r4, #12]
  410596:	1c42      	adds	r2, r0, #1
  410598:	bf0e      	itee	eq
  41059a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  41059e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4105a2:	6520      	strne	r0, [r4, #80]	; 0x50
  4105a4:	81a3      	strh	r3, [r4, #12]
  4105a6:	bd10      	pop	{r4, pc}

004105a8 <__sclose>:
  4105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4105ac:	f000 b9a6 	b.w	4108fc <_close_r>

004105b0 <__ssprint_r>:
  4105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4105b4:	6893      	ldr	r3, [r2, #8]
  4105b6:	b083      	sub	sp, #12
  4105b8:	4690      	mov	r8, r2
  4105ba:	2b00      	cmp	r3, #0
  4105bc:	d072      	beq.n	4106a4 <__ssprint_r+0xf4>
  4105be:	4683      	mov	fp, r0
  4105c0:	f04f 0900 	mov.w	r9, #0
  4105c4:	6816      	ldr	r6, [r2, #0]
  4105c6:	6808      	ldr	r0, [r1, #0]
  4105c8:	688b      	ldr	r3, [r1, #8]
  4105ca:	460d      	mov	r5, r1
  4105cc:	464c      	mov	r4, r9
  4105ce:	2c00      	cmp	r4, #0
  4105d0:	d045      	beq.n	41065e <__ssprint_r+0xae>
  4105d2:	429c      	cmp	r4, r3
  4105d4:	461f      	mov	r7, r3
  4105d6:	469a      	mov	sl, r3
  4105d8:	d346      	bcc.n	410668 <__ssprint_r+0xb8>
  4105da:	89ab      	ldrh	r3, [r5, #12]
  4105dc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4105e0:	d02d      	beq.n	41063e <__ssprint_r+0x8e>
  4105e2:	696f      	ldr	r7, [r5, #20]
  4105e4:	6929      	ldr	r1, [r5, #16]
  4105e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4105ea:	ebc1 0a00 	rsb	sl, r1, r0
  4105ee:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4105f2:	1c60      	adds	r0, r4, #1
  4105f4:	107f      	asrs	r7, r7, #1
  4105f6:	4450      	add	r0, sl
  4105f8:	42b8      	cmp	r0, r7
  4105fa:	463a      	mov	r2, r7
  4105fc:	bf84      	itt	hi
  4105fe:	4607      	movhi	r7, r0
  410600:	463a      	movhi	r2, r7
  410602:	055b      	lsls	r3, r3, #21
  410604:	d533      	bpl.n	41066e <__ssprint_r+0xbe>
  410606:	4611      	mov	r1, r2
  410608:	4658      	mov	r0, fp
  41060a:	f7f8 fa4b 	bl	408aa4 <_malloc_r>
  41060e:	2800      	cmp	r0, #0
  410610:	d037      	beq.n	410682 <__ssprint_r+0xd2>
  410612:	4652      	mov	r2, sl
  410614:	6929      	ldr	r1, [r5, #16]
  410616:	9001      	str	r0, [sp, #4]
  410618:	f7f8 fcfc 	bl	409014 <memcpy>
  41061c:	89aa      	ldrh	r2, [r5, #12]
  41061e:	9b01      	ldr	r3, [sp, #4]
  410620:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  410624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  410628:	81aa      	strh	r2, [r5, #12]
  41062a:	ebca 0207 	rsb	r2, sl, r7
  41062e:	eb03 000a 	add.w	r0, r3, sl
  410632:	616f      	str	r7, [r5, #20]
  410634:	612b      	str	r3, [r5, #16]
  410636:	6028      	str	r0, [r5, #0]
  410638:	60aa      	str	r2, [r5, #8]
  41063a:	4627      	mov	r7, r4
  41063c:	46a2      	mov	sl, r4
  41063e:	4652      	mov	r2, sl
  410640:	4649      	mov	r1, r9
  410642:	f7ff f8b7 	bl	40f7b4 <memmove>
  410646:	f8d8 2008 	ldr.w	r2, [r8, #8]
  41064a:	68ab      	ldr	r3, [r5, #8]
  41064c:	6828      	ldr	r0, [r5, #0]
  41064e:	1bdb      	subs	r3, r3, r7
  410650:	4450      	add	r0, sl
  410652:	1b14      	subs	r4, r2, r4
  410654:	60ab      	str	r3, [r5, #8]
  410656:	6028      	str	r0, [r5, #0]
  410658:	f8c8 4008 	str.w	r4, [r8, #8]
  41065c:	b314      	cbz	r4, 4106a4 <__ssprint_r+0xf4>
  41065e:	f8d6 9000 	ldr.w	r9, [r6]
  410662:	6874      	ldr	r4, [r6, #4]
  410664:	3608      	adds	r6, #8
  410666:	e7b2      	b.n	4105ce <__ssprint_r+0x1e>
  410668:	4627      	mov	r7, r4
  41066a:	46a2      	mov	sl, r4
  41066c:	e7e7      	b.n	41063e <__ssprint_r+0x8e>
  41066e:	4658      	mov	r0, fp
  410670:	f7ff fd66 	bl	410140 <_realloc_r>
  410674:	4603      	mov	r3, r0
  410676:	2800      	cmp	r0, #0
  410678:	d1d7      	bne.n	41062a <__ssprint_r+0x7a>
  41067a:	6929      	ldr	r1, [r5, #16]
  41067c:	4658      	mov	r0, fp
  41067e:	f7fe f94d 	bl	40e91c <_free_r>
  410682:	230c      	movs	r3, #12
  410684:	f8cb 3000 	str.w	r3, [fp]
  410688:	89ab      	ldrh	r3, [r5, #12]
  41068a:	2200      	movs	r2, #0
  41068c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410690:	f04f 30ff 	mov.w	r0, #4294967295
  410694:	81ab      	strh	r3, [r5, #12]
  410696:	f8c8 2008 	str.w	r2, [r8, #8]
  41069a:	f8c8 2004 	str.w	r2, [r8, #4]
  41069e:	b003      	add	sp, #12
  4106a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4106a4:	2000      	movs	r0, #0
  4106a6:	f8c8 0004 	str.w	r0, [r8, #4]
  4106aa:	b003      	add	sp, #12
  4106ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004106b0 <__swbuf_r>:
  4106b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4106b2:	460e      	mov	r6, r1
  4106b4:	4614      	mov	r4, r2
  4106b6:	4607      	mov	r7, r0
  4106b8:	b110      	cbz	r0, 4106c0 <__swbuf_r+0x10>
  4106ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4106bc:	2b00      	cmp	r3, #0
  4106be:	d04a      	beq.n	410756 <__swbuf_r+0xa6>
  4106c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4106c4:	69a3      	ldr	r3, [r4, #24]
  4106c6:	60a3      	str	r3, [r4, #8]
  4106c8:	b291      	uxth	r1, r2
  4106ca:	0708      	lsls	r0, r1, #28
  4106cc:	d538      	bpl.n	410740 <__swbuf_r+0x90>
  4106ce:	6923      	ldr	r3, [r4, #16]
  4106d0:	2b00      	cmp	r3, #0
  4106d2:	d035      	beq.n	410740 <__swbuf_r+0x90>
  4106d4:	0489      	lsls	r1, r1, #18
  4106d6:	b2f5      	uxtb	r5, r6
  4106d8:	d515      	bpl.n	410706 <__swbuf_r+0x56>
  4106da:	6822      	ldr	r2, [r4, #0]
  4106dc:	6961      	ldr	r1, [r4, #20]
  4106de:	1ad3      	subs	r3, r2, r3
  4106e0:	428b      	cmp	r3, r1
  4106e2:	da1c      	bge.n	41071e <__swbuf_r+0x6e>
  4106e4:	3301      	adds	r3, #1
  4106e6:	68a1      	ldr	r1, [r4, #8]
  4106e8:	1c50      	adds	r0, r2, #1
  4106ea:	3901      	subs	r1, #1
  4106ec:	60a1      	str	r1, [r4, #8]
  4106ee:	6020      	str	r0, [r4, #0]
  4106f0:	7016      	strb	r6, [r2, #0]
  4106f2:	6962      	ldr	r2, [r4, #20]
  4106f4:	429a      	cmp	r2, r3
  4106f6:	d01a      	beq.n	41072e <__swbuf_r+0x7e>
  4106f8:	89a3      	ldrh	r3, [r4, #12]
  4106fa:	07db      	lsls	r3, r3, #31
  4106fc:	d501      	bpl.n	410702 <__swbuf_r+0x52>
  4106fe:	2d0a      	cmp	r5, #10
  410700:	d015      	beq.n	41072e <__swbuf_r+0x7e>
  410702:	4628      	mov	r0, r5
  410704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  410706:	6e61      	ldr	r1, [r4, #100]	; 0x64
  410708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41070c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  410710:	81a2      	strh	r2, [r4, #12]
  410712:	6822      	ldr	r2, [r4, #0]
  410714:	6661      	str	r1, [r4, #100]	; 0x64
  410716:	6961      	ldr	r1, [r4, #20]
  410718:	1ad3      	subs	r3, r2, r3
  41071a:	428b      	cmp	r3, r1
  41071c:	dbe2      	blt.n	4106e4 <__swbuf_r+0x34>
  41071e:	4621      	mov	r1, r4
  410720:	4638      	mov	r0, r7
  410722:	f7fd ff9d 	bl	40e660 <_fflush_r>
  410726:	b940      	cbnz	r0, 41073a <__swbuf_r+0x8a>
  410728:	6822      	ldr	r2, [r4, #0]
  41072a:	2301      	movs	r3, #1
  41072c:	e7db      	b.n	4106e6 <__swbuf_r+0x36>
  41072e:	4621      	mov	r1, r4
  410730:	4638      	mov	r0, r7
  410732:	f7fd ff95 	bl	40e660 <_fflush_r>
  410736:	2800      	cmp	r0, #0
  410738:	d0e3      	beq.n	410702 <__swbuf_r+0x52>
  41073a:	f04f 30ff 	mov.w	r0, #4294967295
  41073e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  410740:	4621      	mov	r1, r4
  410742:	4638      	mov	r0, r7
  410744:	f7fc feb4 	bl	40d4b0 <__swsetup_r>
  410748:	2800      	cmp	r0, #0
  41074a:	d1f6      	bne.n	41073a <__swbuf_r+0x8a>
  41074c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410750:	6923      	ldr	r3, [r4, #16]
  410752:	b291      	uxth	r1, r2
  410754:	e7be      	b.n	4106d4 <__swbuf_r+0x24>
  410756:	f7fe f817 	bl	40e788 <__sinit>
  41075a:	e7b1      	b.n	4106c0 <__swbuf_r+0x10>

0041075c <_wcrtomb_r>:
  41075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410760:	4605      	mov	r5, r0
  410762:	b086      	sub	sp, #24
  410764:	461e      	mov	r6, r3
  410766:	460c      	mov	r4, r1
  410768:	b1a1      	cbz	r1, 410794 <_wcrtomb_r+0x38>
  41076a:	4b10      	ldr	r3, [pc, #64]	; (4107ac <_wcrtomb_r+0x50>)
  41076c:	4617      	mov	r7, r2
  41076e:	f8d3 8000 	ldr.w	r8, [r3]
  410772:	f7fe ff1b 	bl	40f5ac <__locale_charset>
  410776:	9600      	str	r6, [sp, #0]
  410778:	4603      	mov	r3, r0
  41077a:	463a      	mov	r2, r7
  41077c:	4621      	mov	r1, r4
  41077e:	4628      	mov	r0, r5
  410780:	47c0      	blx	r8
  410782:	1c43      	adds	r3, r0, #1
  410784:	d103      	bne.n	41078e <_wcrtomb_r+0x32>
  410786:	2200      	movs	r2, #0
  410788:	238a      	movs	r3, #138	; 0x8a
  41078a:	6032      	str	r2, [r6, #0]
  41078c:	602b      	str	r3, [r5, #0]
  41078e:	b006      	add	sp, #24
  410790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410794:	4b05      	ldr	r3, [pc, #20]	; (4107ac <_wcrtomb_r+0x50>)
  410796:	681f      	ldr	r7, [r3, #0]
  410798:	f7fe ff08 	bl	40f5ac <__locale_charset>
  41079c:	9600      	str	r6, [sp, #0]
  41079e:	4603      	mov	r3, r0
  4107a0:	4622      	mov	r2, r4
  4107a2:	a903      	add	r1, sp, #12
  4107a4:	4628      	mov	r0, r5
  4107a6:	47b8      	blx	r7
  4107a8:	e7eb      	b.n	410782 <_wcrtomb_r+0x26>
  4107aa:	bf00      	nop
  4107ac:	200008cc 	.word	0x200008cc

004107b0 <__ascii_wctomb>:
  4107b0:	b121      	cbz	r1, 4107bc <__ascii_wctomb+0xc>
  4107b2:	2aff      	cmp	r2, #255	; 0xff
  4107b4:	d804      	bhi.n	4107c0 <__ascii_wctomb+0x10>
  4107b6:	700a      	strb	r2, [r1, #0]
  4107b8:	2001      	movs	r0, #1
  4107ba:	4770      	bx	lr
  4107bc:	4608      	mov	r0, r1
  4107be:	4770      	bx	lr
  4107c0:	238a      	movs	r3, #138	; 0x8a
  4107c2:	6003      	str	r3, [r0, #0]
  4107c4:	f04f 30ff 	mov.w	r0, #4294967295
  4107c8:	4770      	bx	lr
  4107ca:	bf00      	nop

004107cc <_write_r>:
  4107cc:	b570      	push	{r4, r5, r6, lr}
  4107ce:	460d      	mov	r5, r1
  4107d0:	4c08      	ldr	r4, [pc, #32]	; (4107f4 <_write_r+0x28>)
  4107d2:	4611      	mov	r1, r2
  4107d4:	4606      	mov	r6, r0
  4107d6:	461a      	mov	r2, r3
  4107d8:	4628      	mov	r0, r5
  4107da:	2300      	movs	r3, #0
  4107dc:	6023      	str	r3, [r4, #0]
  4107de:	f7f4 fc23 	bl	405028 <_write>
  4107e2:	1c43      	adds	r3, r0, #1
  4107e4:	d000      	beq.n	4107e8 <_write_r+0x1c>
  4107e6:	bd70      	pop	{r4, r5, r6, pc}
  4107e8:	6823      	ldr	r3, [r4, #0]
  4107ea:	2b00      	cmp	r3, #0
  4107ec:	d0fb      	beq.n	4107e6 <_write_r+0x1a>
  4107ee:	6033      	str	r3, [r6, #0]
  4107f0:	bd70      	pop	{r4, r5, r6, pc}
  4107f2:	bf00      	nop
  4107f4:	2000bf08 	.word	0x2000bf08

004107f8 <__register_exitproc>:
  4107f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4107fc:	4c25      	ldr	r4, [pc, #148]	; (410894 <__register_exitproc+0x9c>)
  4107fe:	6825      	ldr	r5, [r4, #0]
  410800:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  410804:	4606      	mov	r6, r0
  410806:	4688      	mov	r8, r1
  410808:	4692      	mov	sl, r2
  41080a:	4699      	mov	r9, r3
  41080c:	b3c4      	cbz	r4, 410880 <__register_exitproc+0x88>
  41080e:	6860      	ldr	r0, [r4, #4]
  410810:	281f      	cmp	r0, #31
  410812:	dc17      	bgt.n	410844 <__register_exitproc+0x4c>
  410814:	1c43      	adds	r3, r0, #1
  410816:	b176      	cbz	r6, 410836 <__register_exitproc+0x3e>
  410818:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  41081c:	2201      	movs	r2, #1
  41081e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  410822:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  410826:	4082      	lsls	r2, r0
  410828:	4311      	orrs	r1, r2
  41082a:	2e02      	cmp	r6, #2
  41082c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  410830:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  410834:	d01e      	beq.n	410874 <__register_exitproc+0x7c>
  410836:	3002      	adds	r0, #2
  410838:	6063      	str	r3, [r4, #4]
  41083a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  41083e:	2000      	movs	r0, #0
  410840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410844:	4b14      	ldr	r3, [pc, #80]	; (410898 <__register_exitproc+0xa0>)
  410846:	b303      	cbz	r3, 41088a <__register_exitproc+0x92>
  410848:	f44f 70c8 	mov.w	r0, #400	; 0x190
  41084c:	f7f8 f91a 	bl	408a84 <malloc>
  410850:	4604      	mov	r4, r0
  410852:	b1d0      	cbz	r0, 41088a <__register_exitproc+0x92>
  410854:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  410858:	2700      	movs	r7, #0
  41085a:	e880 0088 	stmia.w	r0, {r3, r7}
  41085e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  410862:	4638      	mov	r0, r7
  410864:	2301      	movs	r3, #1
  410866:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  41086a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  41086e:	2e00      	cmp	r6, #0
  410870:	d0e1      	beq.n	410836 <__register_exitproc+0x3e>
  410872:	e7d1      	b.n	410818 <__register_exitproc+0x20>
  410874:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  410878:	430a      	orrs	r2, r1
  41087a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  41087e:	e7da      	b.n	410836 <__register_exitproc+0x3e>
  410880:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  410884:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  410888:	e7c1      	b.n	41080e <__register_exitproc+0x16>
  41088a:	f04f 30ff 	mov.w	r0, #4294967295
  41088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410892:	bf00      	nop
  410894:	00412cd4 	.word	0x00412cd4
  410898:	00408a85 	.word	0x00408a85

0041089c <_calloc_r>:
  41089c:	b510      	push	{r4, lr}
  41089e:	fb02 f101 	mul.w	r1, r2, r1
  4108a2:	f7f8 f8ff 	bl	408aa4 <_malloc_r>
  4108a6:	4604      	mov	r4, r0
  4108a8:	b1d8      	cbz	r0, 4108e2 <_calloc_r+0x46>
  4108aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4108ae:	f022 0203 	bic.w	r2, r2, #3
  4108b2:	3a04      	subs	r2, #4
  4108b4:	2a24      	cmp	r2, #36	; 0x24
  4108b6:	d818      	bhi.n	4108ea <_calloc_r+0x4e>
  4108b8:	2a13      	cmp	r2, #19
  4108ba:	d914      	bls.n	4108e6 <_calloc_r+0x4a>
  4108bc:	2300      	movs	r3, #0
  4108be:	2a1b      	cmp	r2, #27
  4108c0:	6003      	str	r3, [r0, #0]
  4108c2:	6043      	str	r3, [r0, #4]
  4108c4:	d916      	bls.n	4108f4 <_calloc_r+0x58>
  4108c6:	2a24      	cmp	r2, #36	; 0x24
  4108c8:	6083      	str	r3, [r0, #8]
  4108ca:	60c3      	str	r3, [r0, #12]
  4108cc:	bf11      	iteee	ne
  4108ce:	f100 0210 	addne.w	r2, r0, #16
  4108d2:	6103      	streq	r3, [r0, #16]
  4108d4:	6143      	streq	r3, [r0, #20]
  4108d6:	f100 0218 	addeq.w	r2, r0, #24
  4108da:	2300      	movs	r3, #0
  4108dc:	6013      	str	r3, [r2, #0]
  4108de:	6053      	str	r3, [r2, #4]
  4108e0:	6093      	str	r3, [r2, #8]
  4108e2:	4620      	mov	r0, r4
  4108e4:	bd10      	pop	{r4, pc}
  4108e6:	4602      	mov	r2, r0
  4108e8:	e7f7      	b.n	4108da <_calloc_r+0x3e>
  4108ea:	2100      	movs	r1, #0
  4108ec:	f7f8 fc2c 	bl	409148 <memset>
  4108f0:	4620      	mov	r0, r4
  4108f2:	bd10      	pop	{r4, pc}
  4108f4:	f100 0208 	add.w	r2, r0, #8
  4108f8:	e7ef      	b.n	4108da <_calloc_r+0x3e>
  4108fa:	bf00      	nop

004108fc <_close_r>:
  4108fc:	b538      	push	{r3, r4, r5, lr}
  4108fe:	4c07      	ldr	r4, [pc, #28]	; (41091c <_close_r+0x20>)
  410900:	2300      	movs	r3, #0
  410902:	4605      	mov	r5, r0
  410904:	4608      	mov	r0, r1
  410906:	6023      	str	r3, [r4, #0]
  410908:	f7f5 f966 	bl	405bd8 <_close>
  41090c:	1c43      	adds	r3, r0, #1
  41090e:	d000      	beq.n	410912 <_close_r+0x16>
  410910:	bd38      	pop	{r3, r4, r5, pc}
  410912:	6823      	ldr	r3, [r4, #0]
  410914:	2b00      	cmp	r3, #0
  410916:	d0fb      	beq.n	410910 <_close_r+0x14>
  410918:	602b      	str	r3, [r5, #0]
  41091a:	bd38      	pop	{r3, r4, r5, pc}
  41091c:	2000bf08 	.word	0x2000bf08

00410920 <_fclose_r>:
  410920:	2900      	cmp	r1, #0
  410922:	d03d      	beq.n	4109a0 <_fclose_r+0x80>
  410924:	b570      	push	{r4, r5, r6, lr}
  410926:	4605      	mov	r5, r0
  410928:	460c      	mov	r4, r1
  41092a:	b108      	cbz	r0, 410930 <_fclose_r+0x10>
  41092c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41092e:	b37b      	cbz	r3, 410990 <_fclose_r+0x70>
  410930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410934:	b90b      	cbnz	r3, 41093a <_fclose_r+0x1a>
  410936:	2000      	movs	r0, #0
  410938:	bd70      	pop	{r4, r5, r6, pc}
  41093a:	4621      	mov	r1, r4
  41093c:	4628      	mov	r0, r5
  41093e:	f7fd fdeb 	bl	40e518 <__sflush_r>
  410942:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  410944:	4606      	mov	r6, r0
  410946:	b133      	cbz	r3, 410956 <_fclose_r+0x36>
  410948:	69e1      	ldr	r1, [r4, #28]
  41094a:	4628      	mov	r0, r5
  41094c:	4798      	blx	r3
  41094e:	2800      	cmp	r0, #0
  410950:	bfb8      	it	lt
  410952:	f04f 36ff 	movlt.w	r6, #4294967295
  410956:	89a3      	ldrh	r3, [r4, #12]
  410958:	061b      	lsls	r3, r3, #24
  41095a:	d41c      	bmi.n	410996 <_fclose_r+0x76>
  41095c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41095e:	b141      	cbz	r1, 410972 <_fclose_r+0x52>
  410960:	f104 0340 	add.w	r3, r4, #64	; 0x40
  410964:	4299      	cmp	r1, r3
  410966:	d002      	beq.n	41096e <_fclose_r+0x4e>
  410968:	4628      	mov	r0, r5
  41096a:	f7fd ffd7 	bl	40e91c <_free_r>
  41096e:	2300      	movs	r3, #0
  410970:	6323      	str	r3, [r4, #48]	; 0x30
  410972:	6c61      	ldr	r1, [r4, #68]	; 0x44
  410974:	b121      	cbz	r1, 410980 <_fclose_r+0x60>
  410976:	4628      	mov	r0, r5
  410978:	f7fd ffd0 	bl	40e91c <_free_r>
  41097c:	2300      	movs	r3, #0
  41097e:	6463      	str	r3, [r4, #68]	; 0x44
  410980:	f7fd ff08 	bl	40e794 <__sfp_lock_acquire>
  410984:	2300      	movs	r3, #0
  410986:	81a3      	strh	r3, [r4, #12]
  410988:	f7fd ff06 	bl	40e798 <__sfp_lock_release>
  41098c:	4630      	mov	r0, r6
  41098e:	bd70      	pop	{r4, r5, r6, pc}
  410990:	f7fd fefa 	bl	40e788 <__sinit>
  410994:	e7cc      	b.n	410930 <_fclose_r+0x10>
  410996:	6921      	ldr	r1, [r4, #16]
  410998:	4628      	mov	r0, r5
  41099a:	f7fd ffbf 	bl	40e91c <_free_r>
  41099e:	e7dd      	b.n	41095c <_fclose_r+0x3c>
  4109a0:	2000      	movs	r0, #0
  4109a2:	4770      	bx	lr

004109a4 <_fstat_r>:
  4109a4:	b538      	push	{r3, r4, r5, lr}
  4109a6:	460b      	mov	r3, r1
  4109a8:	4c07      	ldr	r4, [pc, #28]	; (4109c8 <_fstat_r+0x24>)
  4109aa:	4605      	mov	r5, r0
  4109ac:	4611      	mov	r1, r2
  4109ae:	4618      	mov	r0, r3
  4109b0:	2300      	movs	r3, #0
  4109b2:	6023      	str	r3, [r4, #0]
  4109b4:	f7f5 f914 	bl	405be0 <_fstat>
  4109b8:	1c43      	adds	r3, r0, #1
  4109ba:	d000      	beq.n	4109be <_fstat_r+0x1a>
  4109bc:	bd38      	pop	{r3, r4, r5, pc}
  4109be:	6823      	ldr	r3, [r4, #0]
  4109c0:	2b00      	cmp	r3, #0
  4109c2:	d0fb      	beq.n	4109bc <_fstat_r+0x18>
  4109c4:	602b      	str	r3, [r5, #0]
  4109c6:	bd38      	pop	{r3, r4, r5, pc}
  4109c8:	2000bf08 	.word	0x2000bf08

004109cc <_isatty_r>:
  4109cc:	b538      	push	{r3, r4, r5, lr}
  4109ce:	4c07      	ldr	r4, [pc, #28]	; (4109ec <_isatty_r+0x20>)
  4109d0:	2300      	movs	r3, #0
  4109d2:	4605      	mov	r5, r0
  4109d4:	4608      	mov	r0, r1
  4109d6:	6023      	str	r3, [r4, #0]
  4109d8:	f7f5 f908 	bl	405bec <_isatty>
  4109dc:	1c43      	adds	r3, r0, #1
  4109de:	d000      	beq.n	4109e2 <_isatty_r+0x16>
  4109e0:	bd38      	pop	{r3, r4, r5, pc}
  4109e2:	6823      	ldr	r3, [r4, #0]
  4109e4:	2b00      	cmp	r3, #0
  4109e6:	d0fb      	beq.n	4109e0 <_isatty_r+0x14>
  4109e8:	602b      	str	r3, [r5, #0]
  4109ea:	bd38      	pop	{r3, r4, r5, pc}
  4109ec:	2000bf08 	.word	0x2000bf08

004109f0 <_lseek_r>:
  4109f0:	b570      	push	{r4, r5, r6, lr}
  4109f2:	460d      	mov	r5, r1
  4109f4:	4c08      	ldr	r4, [pc, #32]	; (410a18 <_lseek_r+0x28>)
  4109f6:	4611      	mov	r1, r2
  4109f8:	4606      	mov	r6, r0
  4109fa:	461a      	mov	r2, r3
  4109fc:	4628      	mov	r0, r5
  4109fe:	2300      	movs	r3, #0
  410a00:	6023      	str	r3, [r4, #0]
  410a02:	f7f5 f8f5 	bl	405bf0 <_lseek>
  410a06:	1c43      	adds	r3, r0, #1
  410a08:	d000      	beq.n	410a0c <_lseek_r+0x1c>
  410a0a:	bd70      	pop	{r4, r5, r6, pc}
  410a0c:	6823      	ldr	r3, [r4, #0]
  410a0e:	2b00      	cmp	r3, #0
  410a10:	d0fb      	beq.n	410a0a <_lseek_r+0x1a>
  410a12:	6033      	str	r3, [r6, #0]
  410a14:	bd70      	pop	{r4, r5, r6, pc}
  410a16:	bf00      	nop
  410a18:	2000bf08 	.word	0x2000bf08

00410a1c <_read_r>:
  410a1c:	b570      	push	{r4, r5, r6, lr}
  410a1e:	460d      	mov	r5, r1
  410a20:	4c08      	ldr	r4, [pc, #32]	; (410a44 <_read_r+0x28>)
  410a22:	4611      	mov	r1, r2
  410a24:	4606      	mov	r6, r0
  410a26:	461a      	mov	r2, r3
  410a28:	4628      	mov	r0, r5
  410a2a:	2300      	movs	r3, #0
  410a2c:	6023      	str	r3, [r4, #0]
  410a2e:	f7f4 fa53 	bl	404ed8 <_read>
  410a32:	1c43      	adds	r3, r0, #1
  410a34:	d000      	beq.n	410a38 <_read_r+0x1c>
  410a36:	bd70      	pop	{r4, r5, r6, pc}
  410a38:	6823      	ldr	r3, [r4, #0]
  410a3a:	2b00      	cmp	r3, #0
  410a3c:	d0fb      	beq.n	410a36 <_read_r+0x1a>
  410a3e:	6033      	str	r3, [r6, #0]
  410a40:	bd70      	pop	{r4, r5, r6, pc}
  410a42:	bf00      	nop
  410a44:	2000bf08 	.word	0x2000bf08

00410a48 <__aeabi_d2iz>:
  410a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
  410a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  410a50:	d215      	bcs.n	410a7e <__aeabi_d2iz+0x36>
  410a52:	d511      	bpl.n	410a78 <__aeabi_d2iz+0x30>
  410a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  410a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  410a5c:	d912      	bls.n	410a84 <__aeabi_d2iz+0x3c>
  410a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  410a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  410a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  410a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  410a6e:	fa23 f002 	lsr.w	r0, r3, r2
  410a72:	bf18      	it	ne
  410a74:	4240      	negne	r0, r0
  410a76:	4770      	bx	lr
  410a78:	f04f 0000 	mov.w	r0, #0
  410a7c:	4770      	bx	lr
  410a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  410a82:	d105      	bne.n	410a90 <__aeabi_d2iz+0x48>
  410a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  410a88:	bf08      	it	eq
  410a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  410a8e:	4770      	bx	lr
  410a90:	f04f 0000 	mov.w	r0, #0
  410a94:	4770      	bx	lr
  410a96:	bf00      	nop

00410a98 <__aeabi_uldivmod>:
  410a98:	b953      	cbnz	r3, 410ab0 <__aeabi_uldivmod+0x18>
  410a9a:	b94a      	cbnz	r2, 410ab0 <__aeabi_uldivmod+0x18>
  410a9c:	2900      	cmp	r1, #0
  410a9e:	bf08      	it	eq
  410aa0:	2800      	cmpeq	r0, #0
  410aa2:	bf1c      	itt	ne
  410aa4:	f04f 31ff 	movne.w	r1, #4294967295
  410aa8:	f04f 30ff 	movne.w	r0, #4294967295
  410aac:	f000 b97e 	b.w	410dac <__aeabi_idiv0>
  410ab0:	f1ad 0c08 	sub.w	ip, sp, #8
  410ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  410ab8:	f000 f806 	bl	410ac8 <__udivmoddi4>
  410abc:	f8dd e004 	ldr.w	lr, [sp, #4]
  410ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410ac4:	b004      	add	sp, #16
  410ac6:	4770      	bx	lr

00410ac8 <__udivmoddi4>:
  410ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410acc:	468c      	mov	ip, r1
  410ace:	460e      	mov	r6, r1
  410ad0:	4604      	mov	r4, r0
  410ad2:	9d08      	ldr	r5, [sp, #32]
  410ad4:	2b00      	cmp	r3, #0
  410ad6:	d150      	bne.n	410b7a <__udivmoddi4+0xb2>
  410ad8:	428a      	cmp	r2, r1
  410ada:	4617      	mov	r7, r2
  410adc:	d96c      	bls.n	410bb8 <__udivmoddi4+0xf0>
  410ade:	fab2 fe82 	clz	lr, r2
  410ae2:	f1be 0f00 	cmp.w	lr, #0
  410ae6:	d00b      	beq.n	410b00 <__udivmoddi4+0x38>
  410ae8:	f1ce 0420 	rsb	r4, lr, #32
  410aec:	fa20 f404 	lsr.w	r4, r0, r4
  410af0:	fa01 f60e 	lsl.w	r6, r1, lr
  410af4:	ea44 0c06 	orr.w	ip, r4, r6
  410af8:	fa02 f70e 	lsl.w	r7, r2, lr
  410afc:	fa00 f40e 	lsl.w	r4, r0, lr
  410b00:	ea4f 4917 	mov.w	r9, r7, lsr #16
  410b04:	0c22      	lsrs	r2, r4, #16
  410b06:	fbbc f0f9 	udiv	r0, ip, r9
  410b0a:	fa1f f887 	uxth.w	r8, r7
  410b0e:	fb09 c610 	mls	r6, r9, r0, ip
  410b12:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  410b16:	fb00 f308 	mul.w	r3, r0, r8
  410b1a:	42b3      	cmp	r3, r6
  410b1c:	d909      	bls.n	410b32 <__udivmoddi4+0x6a>
  410b1e:	19f6      	adds	r6, r6, r7
  410b20:	f100 32ff 	add.w	r2, r0, #4294967295
  410b24:	f080 8122 	bcs.w	410d6c <__udivmoddi4+0x2a4>
  410b28:	42b3      	cmp	r3, r6
  410b2a:	f240 811f 	bls.w	410d6c <__udivmoddi4+0x2a4>
  410b2e:	3802      	subs	r0, #2
  410b30:	443e      	add	r6, r7
  410b32:	1af6      	subs	r6, r6, r3
  410b34:	b2a2      	uxth	r2, r4
  410b36:	fbb6 f3f9 	udiv	r3, r6, r9
  410b3a:	fb09 6613 	mls	r6, r9, r3, r6
  410b3e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  410b42:	fb03 f808 	mul.w	r8, r3, r8
  410b46:	45a0      	cmp	r8, r4
  410b48:	d909      	bls.n	410b5e <__udivmoddi4+0x96>
  410b4a:	19e4      	adds	r4, r4, r7
  410b4c:	f103 32ff 	add.w	r2, r3, #4294967295
  410b50:	f080 810a 	bcs.w	410d68 <__udivmoddi4+0x2a0>
  410b54:	45a0      	cmp	r8, r4
  410b56:	f240 8107 	bls.w	410d68 <__udivmoddi4+0x2a0>
  410b5a:	3b02      	subs	r3, #2
  410b5c:	443c      	add	r4, r7
  410b5e:	ebc8 0404 	rsb	r4, r8, r4
  410b62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  410b66:	2100      	movs	r1, #0
  410b68:	2d00      	cmp	r5, #0
  410b6a:	d062      	beq.n	410c32 <__udivmoddi4+0x16a>
  410b6c:	fa24 f40e 	lsr.w	r4, r4, lr
  410b70:	2300      	movs	r3, #0
  410b72:	602c      	str	r4, [r5, #0]
  410b74:	606b      	str	r3, [r5, #4]
  410b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410b7a:	428b      	cmp	r3, r1
  410b7c:	d907      	bls.n	410b8e <__udivmoddi4+0xc6>
  410b7e:	2d00      	cmp	r5, #0
  410b80:	d055      	beq.n	410c2e <__udivmoddi4+0x166>
  410b82:	2100      	movs	r1, #0
  410b84:	e885 0041 	stmia.w	r5, {r0, r6}
  410b88:	4608      	mov	r0, r1
  410b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410b8e:	fab3 f183 	clz	r1, r3
  410b92:	2900      	cmp	r1, #0
  410b94:	f040 8090 	bne.w	410cb8 <__udivmoddi4+0x1f0>
  410b98:	42b3      	cmp	r3, r6
  410b9a:	d302      	bcc.n	410ba2 <__udivmoddi4+0xda>
  410b9c:	4282      	cmp	r2, r0
  410b9e:	f200 80f8 	bhi.w	410d92 <__udivmoddi4+0x2ca>
  410ba2:	1a84      	subs	r4, r0, r2
  410ba4:	eb66 0603 	sbc.w	r6, r6, r3
  410ba8:	2001      	movs	r0, #1
  410baa:	46b4      	mov	ip, r6
  410bac:	2d00      	cmp	r5, #0
  410bae:	d040      	beq.n	410c32 <__udivmoddi4+0x16a>
  410bb0:	e885 1010 	stmia.w	r5, {r4, ip}
  410bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410bb8:	b912      	cbnz	r2, 410bc0 <__udivmoddi4+0xf8>
  410bba:	2701      	movs	r7, #1
  410bbc:	fbb7 f7f2 	udiv	r7, r7, r2
  410bc0:	fab7 fe87 	clz	lr, r7
  410bc4:	f1be 0f00 	cmp.w	lr, #0
  410bc8:	d135      	bne.n	410c36 <__udivmoddi4+0x16e>
  410bca:	1bf3      	subs	r3, r6, r7
  410bcc:	ea4f 4817 	mov.w	r8, r7, lsr #16
  410bd0:	fa1f fc87 	uxth.w	ip, r7
  410bd4:	2101      	movs	r1, #1
  410bd6:	fbb3 f0f8 	udiv	r0, r3, r8
  410bda:	0c22      	lsrs	r2, r4, #16
  410bdc:	fb08 3610 	mls	r6, r8, r0, r3
  410be0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  410be4:	fb0c f300 	mul.w	r3, ip, r0
  410be8:	42b3      	cmp	r3, r6
  410bea:	d907      	bls.n	410bfc <__udivmoddi4+0x134>
  410bec:	19f6      	adds	r6, r6, r7
  410bee:	f100 32ff 	add.w	r2, r0, #4294967295
  410bf2:	d202      	bcs.n	410bfa <__udivmoddi4+0x132>
  410bf4:	42b3      	cmp	r3, r6
  410bf6:	f200 80ce 	bhi.w	410d96 <__udivmoddi4+0x2ce>
  410bfa:	4610      	mov	r0, r2
  410bfc:	1af6      	subs	r6, r6, r3
  410bfe:	b2a2      	uxth	r2, r4
  410c00:	fbb6 f3f8 	udiv	r3, r6, r8
  410c04:	fb08 6613 	mls	r6, r8, r3, r6
  410c08:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  410c0c:	fb0c fc03 	mul.w	ip, ip, r3
  410c10:	45a4      	cmp	ip, r4
  410c12:	d907      	bls.n	410c24 <__udivmoddi4+0x15c>
  410c14:	19e4      	adds	r4, r4, r7
  410c16:	f103 32ff 	add.w	r2, r3, #4294967295
  410c1a:	d202      	bcs.n	410c22 <__udivmoddi4+0x15a>
  410c1c:	45a4      	cmp	ip, r4
  410c1e:	f200 80b5 	bhi.w	410d8c <__udivmoddi4+0x2c4>
  410c22:	4613      	mov	r3, r2
  410c24:	ebcc 0404 	rsb	r4, ip, r4
  410c28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  410c2c:	e79c      	b.n	410b68 <__udivmoddi4+0xa0>
  410c2e:	4629      	mov	r1, r5
  410c30:	4628      	mov	r0, r5
  410c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410c36:	f1ce 0120 	rsb	r1, lr, #32
  410c3a:	fa06 f30e 	lsl.w	r3, r6, lr
  410c3e:	fa07 f70e 	lsl.w	r7, r7, lr
  410c42:	fa20 f901 	lsr.w	r9, r0, r1
  410c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
  410c4a:	40ce      	lsrs	r6, r1
  410c4c:	ea49 0903 	orr.w	r9, r9, r3
  410c50:	fbb6 faf8 	udiv	sl, r6, r8
  410c54:	ea4f 4419 	mov.w	r4, r9, lsr #16
  410c58:	fb08 661a 	mls	r6, r8, sl, r6
  410c5c:	fa1f fc87 	uxth.w	ip, r7
  410c60:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  410c64:	fb0a f20c 	mul.w	r2, sl, ip
  410c68:	429a      	cmp	r2, r3
  410c6a:	fa00 f40e 	lsl.w	r4, r0, lr
  410c6e:	d90a      	bls.n	410c86 <__udivmoddi4+0x1be>
  410c70:	19db      	adds	r3, r3, r7
  410c72:	f10a 31ff 	add.w	r1, sl, #4294967295
  410c76:	f080 8087 	bcs.w	410d88 <__udivmoddi4+0x2c0>
  410c7a:	429a      	cmp	r2, r3
  410c7c:	f240 8084 	bls.w	410d88 <__udivmoddi4+0x2c0>
  410c80:	f1aa 0a02 	sub.w	sl, sl, #2
  410c84:	443b      	add	r3, r7
  410c86:	1a9b      	subs	r3, r3, r2
  410c88:	fa1f f989 	uxth.w	r9, r9
  410c8c:	fbb3 f1f8 	udiv	r1, r3, r8
  410c90:	fb08 3311 	mls	r3, r8, r1, r3
  410c94:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  410c98:	fb01 f60c 	mul.w	r6, r1, ip
  410c9c:	429e      	cmp	r6, r3
  410c9e:	d907      	bls.n	410cb0 <__udivmoddi4+0x1e8>
  410ca0:	19db      	adds	r3, r3, r7
  410ca2:	f101 32ff 	add.w	r2, r1, #4294967295
  410ca6:	d26b      	bcs.n	410d80 <__udivmoddi4+0x2b8>
  410ca8:	429e      	cmp	r6, r3
  410caa:	d969      	bls.n	410d80 <__udivmoddi4+0x2b8>
  410cac:	3902      	subs	r1, #2
  410cae:	443b      	add	r3, r7
  410cb0:	1b9b      	subs	r3, r3, r6
  410cb2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  410cb6:	e78e      	b.n	410bd6 <__udivmoddi4+0x10e>
  410cb8:	f1c1 0e20 	rsb	lr, r1, #32
  410cbc:	fa22 f40e 	lsr.w	r4, r2, lr
  410cc0:	408b      	lsls	r3, r1
  410cc2:	4323      	orrs	r3, r4
  410cc4:	fa20 f70e 	lsr.w	r7, r0, lr
  410cc8:	fa06 f401 	lsl.w	r4, r6, r1
  410ccc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  410cd0:	fa26 f60e 	lsr.w	r6, r6, lr
  410cd4:	433c      	orrs	r4, r7
  410cd6:	fbb6 f9fc 	udiv	r9, r6, ip
  410cda:	0c27      	lsrs	r7, r4, #16
  410cdc:	fb0c 6619 	mls	r6, ip, r9, r6
  410ce0:	fa1f f883 	uxth.w	r8, r3
  410ce4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  410ce8:	fb09 f708 	mul.w	r7, r9, r8
  410cec:	42b7      	cmp	r7, r6
  410cee:	fa02 f201 	lsl.w	r2, r2, r1
  410cf2:	fa00 fa01 	lsl.w	sl, r0, r1
  410cf6:	d908      	bls.n	410d0a <__udivmoddi4+0x242>
  410cf8:	18f6      	adds	r6, r6, r3
  410cfa:	f109 30ff 	add.w	r0, r9, #4294967295
  410cfe:	d241      	bcs.n	410d84 <__udivmoddi4+0x2bc>
  410d00:	42b7      	cmp	r7, r6
  410d02:	d93f      	bls.n	410d84 <__udivmoddi4+0x2bc>
  410d04:	f1a9 0902 	sub.w	r9, r9, #2
  410d08:	441e      	add	r6, r3
  410d0a:	1bf6      	subs	r6, r6, r7
  410d0c:	b2a0      	uxth	r0, r4
  410d0e:	fbb6 f4fc 	udiv	r4, r6, ip
  410d12:	fb0c 6614 	mls	r6, ip, r4, r6
  410d16:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  410d1a:	fb04 f808 	mul.w	r8, r4, r8
  410d1e:	45b8      	cmp	r8, r7
  410d20:	d907      	bls.n	410d32 <__udivmoddi4+0x26a>
  410d22:	18ff      	adds	r7, r7, r3
  410d24:	f104 30ff 	add.w	r0, r4, #4294967295
  410d28:	d228      	bcs.n	410d7c <__udivmoddi4+0x2b4>
  410d2a:	45b8      	cmp	r8, r7
  410d2c:	d926      	bls.n	410d7c <__udivmoddi4+0x2b4>
  410d2e:	3c02      	subs	r4, #2
  410d30:	441f      	add	r7, r3
  410d32:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  410d36:	ebc8 0707 	rsb	r7, r8, r7
  410d3a:	fba0 8902 	umull	r8, r9, r0, r2
  410d3e:	454f      	cmp	r7, r9
  410d40:	4644      	mov	r4, r8
  410d42:	464e      	mov	r6, r9
  410d44:	d314      	bcc.n	410d70 <__udivmoddi4+0x2a8>
  410d46:	d029      	beq.n	410d9c <__udivmoddi4+0x2d4>
  410d48:	b365      	cbz	r5, 410da4 <__udivmoddi4+0x2dc>
  410d4a:	ebba 0304 	subs.w	r3, sl, r4
  410d4e:	eb67 0706 	sbc.w	r7, r7, r6
  410d52:	fa07 fe0e 	lsl.w	lr, r7, lr
  410d56:	40cb      	lsrs	r3, r1
  410d58:	40cf      	lsrs	r7, r1
  410d5a:	ea4e 0303 	orr.w	r3, lr, r3
  410d5e:	e885 0088 	stmia.w	r5, {r3, r7}
  410d62:	2100      	movs	r1, #0
  410d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410d68:	4613      	mov	r3, r2
  410d6a:	e6f8      	b.n	410b5e <__udivmoddi4+0x96>
  410d6c:	4610      	mov	r0, r2
  410d6e:	e6e0      	b.n	410b32 <__udivmoddi4+0x6a>
  410d70:	ebb8 0402 	subs.w	r4, r8, r2
  410d74:	eb69 0603 	sbc.w	r6, r9, r3
  410d78:	3801      	subs	r0, #1
  410d7a:	e7e5      	b.n	410d48 <__udivmoddi4+0x280>
  410d7c:	4604      	mov	r4, r0
  410d7e:	e7d8      	b.n	410d32 <__udivmoddi4+0x26a>
  410d80:	4611      	mov	r1, r2
  410d82:	e795      	b.n	410cb0 <__udivmoddi4+0x1e8>
  410d84:	4681      	mov	r9, r0
  410d86:	e7c0      	b.n	410d0a <__udivmoddi4+0x242>
  410d88:	468a      	mov	sl, r1
  410d8a:	e77c      	b.n	410c86 <__udivmoddi4+0x1be>
  410d8c:	3b02      	subs	r3, #2
  410d8e:	443c      	add	r4, r7
  410d90:	e748      	b.n	410c24 <__udivmoddi4+0x15c>
  410d92:	4608      	mov	r0, r1
  410d94:	e70a      	b.n	410bac <__udivmoddi4+0xe4>
  410d96:	3802      	subs	r0, #2
  410d98:	443e      	add	r6, r7
  410d9a:	e72f      	b.n	410bfc <__udivmoddi4+0x134>
  410d9c:	45c2      	cmp	sl, r8
  410d9e:	d3e7      	bcc.n	410d70 <__udivmoddi4+0x2a8>
  410da0:	463e      	mov	r6, r7
  410da2:	e7d1      	b.n	410d48 <__udivmoddi4+0x280>
  410da4:	4629      	mov	r1, r5
  410da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410daa:	bf00      	nop

00410dac <__aeabi_idiv0>:
  410dac:	4770      	bx	lr
  410dae:	bf00      	nop

00410db0 <nand_flash_model_list>:
  410db0:	006e 0100 0001 0004 1170 0041 0064 0100     n.......p.A.d...
  410dc0:	0002 0004 1170 0041 006b 0200 0004 0008     ....p.A.k.......
  410dd0:	1068 0041 00e8 0100 0001 0004 1170 0041     h.A.........p.A.
  410de0:	00ec 0100 0001 0004 1170 0041 00ea 0100     ........p.A.....
  410df0:	0002 0004 1170 0041 00d5 0200 0004 0008     ....p.A.........
  410e00:	1068 0041 00e3 0200 0004 0008 1068 0041     h.A.........h.A.
  410e10:	00e5 0200 0004 0008 1068 0041 00d6 0200     ........h.A.....
  410e20:	0008 0008 1068 0041 0039 0200 0008 0008     ....h.A.9.......
  410e30:	1068 0041 00e6 0200 0008 0008 1068 0041     h.A.........h.A.
  410e40:	0149 0200 0008 0008 1068 0041 0159 0200     I.......h.A.Y...
  410e50:	0008 0008 1068 0041 0033 0200 0010 0010     ....h.A.3.......
  410e60:	1068 0041 0073 0200 0010 0010 1068 0041     h.A.s.......h.A.
  410e70:	0143 0200 0010 0010 1068 0041 0153 0200     C.......h.A.S...
  410e80:	0010 0010 1068 0041 0035 0200 0020 0010     ....h.A.5... ...
  410e90:	1068 0041 0075 0200 0020 0010 1068 0041     h.A.u... ...h.A.
  410ea0:	0145 0200 0020 0010 1068 0041 0155 0200     E... ...h.A.U...
  410eb0:	0020 0010 1068 0041 0036 0200 0040 0010      ...h.A.6...@...
  410ec0:	1068 0041 0076 0200 0040 0010 1068 0041     h.A.v...@...h.A.
  410ed0:	0146 0200 0040 0010 1068 0041 0156 0200     F...@...h.A.V...
  410ee0:	0040 0010 1068 0041 0078 0200 0080 0010     @...h.A.x.......
  410ef0:	1068 0041 0039 0200 0080 0010 1068 0041     h.A.9.......h.A.
  410f00:	0079 0200 0080 0010 1068 0041 0172 0200     y.......h.A.r...
  410f10:	0080 0010 1068 0041 0149 0200 0080 0010     ....h.A.I.......
  410f20:	1068 0041 0174 0200 0080 0010 1068 0041     h.A.t.......h.A.
  410f30:	0159 0200 0080 0010 1068 0041 0071 0200     Y.......h.A.q...
  410f40:	0100 0010 1068 0041 00a2 0000 0040 0000     ....h.A.....@...
  410f50:	10ec 0041 00f2 0000 0040 0000 10ec 0041     ..A.....@.....A.
  410f60:	01b2 0000 0040 0000 10ec 0041 01c2 0000     ....@.....A.....
  410f70:	0040 0000 10ec 0041 00a1 0000 0080 0000     @.....A.........
  410f80:	10ec 0041 00f1 0000 0080 0000 10ec 0041     ..A...........A.
  410f90:	01b1 0000 0080 0000 10ec 0041 01c1 0000     ..........A.....
  410fa0:	0080 0000 10ec 0041 00aa 0000 0100 0000     ......A.........
  410fb0:	10ec 0041 00da 0000 0100 0000 10ec 0041     ..A...........A.
  410fc0:	01ba 0000 0100 0000 10ec 0041 01ca 0000     ..........A.....
  410fd0:	0100 0000 10ec 0041 00ac 0000 0200 0000     ......A.........
  410fe0:	10ec 0041 00dc 0000 0200 0000 10ec 0041     ..A...........A.
  410ff0:	01bc 0000 0200 0000 10ec 0041 01cc 0000     ..........A.....
  411000:	0200 0000 10ec 0041 00a3 0000 0400 0000     ......A.........
  411010:	10ec 0041 00d3 0000 0400 0000 10ec 0041     ..A...........A.
  411020:	01b3 0000 0400 0000 10ec 0041 01c3 0000     ..........A.....
  411030:	0400 0000 10ec 0041 00a5 0000 0800 0000     ......A.........
  411040:	10ec 0041 00d5 0000 0800 0000 10ec 0041     ..A...........A.
  411050:	01b5 0000 0800 0000 10ec 0041 01c5 0000     ..........A.....
  411060:	0800 0000 10ec 0041                         ......A.

00411068 <nand_flash_spare_scheme_512>:
  411068:	0605 0100 0302 0706 0000 0000 0000 0000     ................
	...
  411098:	0000 0808 0a09 0c0b 0e0d 000f 0000 0000     ................
	...

004110ec <nand_flash_spare_scheme_2048>:
  4110ec:	1800 2928 2b2a 2d2c 2f2e 3130 3332 3534     ..()*+,-./012345
  4110fc:	3736 3938 3b3a 3d3c 3f3e 0000 0000 0000     6789:;<=>?......
	...
  41111c:	0000 0226 0403 0605 0807 0a09 0c0b 0e0d     ..&.............
  41112c:	100f 1211 1413 1615 1817 1a19 1c1b 1e1d     ................
  41113c:	201f 2221 2423 2625 0027 0000 0000 0000     . !"#$%&'.......
	...

00411170 <nand_flash_spare_scheme_256>:
  411170:	0305 0100 0002 0000 0000 0000 0000 0000     ................
	...
  4111a0:	0000 0304 0604 0007 0000 0000 0000 0000     ................
	...
  4111f4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
  411204:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
  411214:	0100 0000 0200 0000 0400 0000 452d 202d     ............-E- 
  411224:	6544 6976 6563 5520 6b6e 6f6e 6e77 0a0d     Device Unknown..
  411234:	0000 0000 492d 202d 414e 444e 4620 616c     ....-I- NAND Fla
  411244:	6873 6420 6972 6576 2072 6e69 7469 6169     sh driver initia
  411254:	696c 657a 0d64 000a 492d 202d 6953 657a     lized...-I- Size
  411264:	6f20 2066 6874 2065 6877 6c6f 2065 6564      of the whole de
  411274:	6976 6563 6920 206e 7962 6574 2073 203a     vice in bytes : 
  411284:	7830 7825 0d20 000a 492d 202d 6953 657a     0x%x ...-I- Size
  411294:	6920 206e 7962 6574 2073 666f 6f20 656e      in bytes of one
  4112a4:	7320 6e69 6c67 2065 6c62 636f 206b 666f      single block of
  4112b4:	6120 6420 7665 6369 2065 203a 7830 7825      a device : 0x%x
  4112c4:	0d20 000a 492d 202d 754e 626d 7265 6f20      ...-I- Number o
  4112d4:	2066 6c62 636f 736b 6920 206e 6874 2065     f blocks in the 
  4112e4:	6e65 6974 6572 6420 7665 6369 2065 203a     entire device : 
  4112f4:	7830 7825 0d20 000a 492d 202d 754e 626d     0x%x ...-I- Numb
  411304:	7265 6f20 2066 6c62 636f 736b 7520 6573     er of blocks use
  411314:	2064 7962 7420 6568 6120 7070 696c 6163     d by the applica
  411324:	6974 6e6f 3a20 3020 2578 2078 0a0d 0000     tion : 0x%x ....
  411334:	492d 202d 6953 657a 6f20 2066 6874 2065     -I- Size of the 
  411344:	6164 6174 6120 6572 2061 666f 6120 7020     data area of a p
  411354:	6761 2065 6e69 6220 7479 7365 3a20 3020     age in bytes : 0
  411364:	2578 2078 0a0d 0000 492d 202d 754e 626d     x%x ....-I- Numb
  411374:	7265 6f20 2066 6170 6567 2073 6e69 7420     er of pages in t
  411384:	6568 6520 746e 7269 2065 6564 6976 6563     he entire device
  411394:	3a20 3020 2578 2078 0a0d 0000 492d 202d      : 0x%x ....-I- 
  4113a4:	7250 7065 7261 6e69 2067 7562 6666 7265     Preparing buffer
  4113b4:	6920 206e 5253 4d41 2e20 2e2e 0a0d 0000      in SRAM .......
  4113c4:	452d 202d 6c42 636f 206b 7525 6920 2073     -E- Block %u is 
  4113d4:	4142 2044 6c62 636f 2e6b 0a0d 0000 0000     BAD block.......
  4113e4:	492d 202d 7257 7469 6e69 2067 6874 2065     -I- Writing the 
  4113f4:	7562 6666 7265 6920 206e 6170 6567 2520     buffer in page %
  411404:	2064 666f 6220 6f6c 6b63 2520 2064 6977     d of block %d wi
  411414:	6874 756f 2074 4345 0d43 000a 452d 202d     thout ECC...-E- 
  411424:	6143 6e6e 746f 7720 6972 6574 7020 6761     Cannot write pag
  411434:	2065 6425 6f20 2066 6c62 636f 206b 6425     e %d of block %d
  411444:	202e 7254 6979 676e 6e20 7865 2074 6c62     . Trying next bl
  411454:	636f 2e6b 2e2e 0a0d 0000 0000 492d 202d     ock.........-I- 
  411464:	6552 6461 6e69 2067 6170 6567 2520 2064     Reading page %d 
  411474:	666f 6220 6f6c 6b63 2520 0d64 000a 0000     of block %d.....
  411484:	452d 202d 6143 6e6e 746f 7220 6165 2064     -E- Cannot read 
  411494:	6170 6567 2520 2064 666f 6220 6f6c 6b63     page %d of block
  4114a4:	2520 2e64 5420 7972 6e69 2067 656e 7478      %d. Trying next
  4114b4:	6220 6f6c 6b63 2e2e 0d2e 000a 452d 202d      block......-E- 
  4114c4:	6c42 636f 206b 7525 6920 2073 4142 2044     Block %u is BAD 
  4114d4:	6c62 636f 2e6b 0d20 000a 0000 452d 202d     block. .....-E- 
  4114e4:	654e 7774 726f 696b 676e 203a 6166 6c69     Networking: fail
  4114f4:	6465 7420 206f 7263 6165 6574 5420 5043     ed to create TCP
  411504:	6320 696c 6e65 2074 6f73 6b63 7465 6520      client socket e
  411514:	7272 726f 0d21 000a 452d 202d 654e 7774     rror!...-E- Netw
  411524:	726f 696b 676e 203a 6166 6c69 6465 7420     orking: failed t
  411534:	206f 6f63 6e6e 6365 2074 4354 2050 6c63     o connect TCP cl
  411544:	6569 746e 7320 636f 656b 2074 7265 6f72     ient socket erro
  411554:	2172 0a0d 0000 0000 6425 0000 452d 202d     r!......%d..-E- 
  411564:	6374 5f70 6f63 6e6e 6365 6974 6e6f 655f     tcp_connection_e
  411574:	7473 735f 636f 656b 3a74 6320 6e6f 656e     st_socket: conne
  411584:	7463 6520 7272 726f 0d21 000a 492d 202d     ct error!...-I- 
  411594:	6f48 7473 7020 726f 2074 6572 6f73 766c     Host port resolv
  4115a4:	6465 7420 3a6f 2820 6425 0d29 000a 0000     ed to: (%d).....
  4115b4:	452d 202d 6374 5f70 6f63 6e6e 6365 6974     -E- tcp_connecti
  4115c4:	6e6f 655f 7473 735f 636f 656b 3a74 7220     on_est_socket: r
  4115d4:	6365 2076 7265 6f72 2172 0a0d 0000 0000     ecv error!......
  4115e4:	452d 202d 6475 5f70 6f63 6d6d 6e61 5f64     -E- udp_command_
  4115f4:	6f73 6b63 7465 203a 6942 646e 4620 6961     socket: Bind Fai
  411604:	656c 0a64 0000 0000 492d 202d 6475 5f70     led.....-I- udp_
  411614:	6f63 6d6d 6e61 5f64 6f73 6b63 7465 203a     command_socket: 
  411624:	6f63 6d6d 6e61 2064 6572 6563 7669 6465     command received
  411634:	203a 7325 0a0d 0000 452d 202d 6374 5f70     : %s....-E- tcp_
  411644:	6573 7474 6e69 7367 6c5f 7369 6574 5f6e     settings_listen_
  411654:	6f73 6b63 7465 203a 6942 646e 4620 6961     socket: Bind Fai
  411664:	656c 0a64 0000 0000 452d 202d 6374 5f70     led.....-E- tcp_
  411674:	6573 7474 6e69 7367 6c5f 7369 6574 5f6e     settings_listen_
  411684:	6f73 6b63 7465 203a 696c 7473 6e65 4620     socket: listen F
  411694:	6961 656c 2e64 5220 7365 6174 7472 6e69     ailed. Restartin
  4116a4:	2e67 2e2e 000a 0000 452d 202d 6374 5f70     g.......-E- tcp_
  4116b4:	6573 7474 6e69 7367 6c5f 7369 6574 5f6e     settings_listen_
  4116c4:	6f73 6b63 7465 203a 6341 6563 7470 4620     socket: Accept F
  4116d4:	6961 656c 0a64 0000 492d 202d 6374 5f70     ailed...-I- tcp_
  4116e4:	6573 7474 6e69 7367 645f 7461 5f61 6f73     settings_data_so
  4116f4:	6b63 7465 203a 6573 7474 6e69 7367 7220     cket: settings r
  411704:	6365 6965 6576 3a64 2520 0d73 000a 0000     eceived: %s.....
  411714:	4d43 2a44 4b4f 0000 492d 202d 6374 5f70     CMD*OK..-I- tcp_
  411724:	6573 7474 6e69 7367 645f 7461 5f61 6f73     settings_data_so
  411734:	6b63 7465 203a 6f63 666e 6769 7275 7461     cket: configurat
  411744:	6f69 206e 7573 6363 7365 6673 6c75 202e     ion successful. 
  411754:	6553 646e 6e69 2067 4341 2e4b 2e2e 0a0d     Sending ACK.....
  411764:	0000 0000 4d43 2a44 4f4e 0000 492d 202d     ....CMD*NO..-I- 
  411774:	6374 5f70 6573 7474 6e69 7367 645f 7461     tcp_settings_dat
  411784:	5f61 6f73 6b63 7465 203a 6f63 666e 6769     a_socket: config
  411794:	7275 7461 6f69 206e 6177 2073 6f6e 2074     uration was not 
  4117a4:	7573 6363 7365 6673 6c75 202e 6553 646e     successful. Send
  4117b4:	6e69 2067 414e 4b43 2e2e 0d2e 000a 0000     ing NACK........
  4117c4:	492d 202d 6475 5f70 7473 7461 7375 735f     -I- udp_status_s
  4117d4:	636f 656b 3a74 5320 6174 7574 2073 6573     ocket: Status se
  4117e4:	746e 0d21 000a 0000 504f 4e45 0000 0000     nt!.....OPEN....
  4117f4:	5057 2f41 5057 3241 0000 0000 492d 202d     WPA/WPA2....-I- 
  411804:	6957 462d 2069 6964 6373 6e6f 656e 7463     Wi-Fi disconnect
  411814:	6465 0a0d 0000 0000 492d 202d 6957 462d     ed......-I- Wi-F
  411824:	2069 6f63 6e6e 6365 6574 0d64 000a 0000     i connected.....
  411834:	492d 202d 6957 462d 2069 5049 6920 2073     -I- Wi-Fi IP is 
  411844:	7525 252e 2e75 7525 252e 0d75 000a 0000     %u.%u.%u.%u.....
  411854:	492d 202d 6957 462d 2069 7247 756f 2070     -I- Wi-Fi Group 
  411864:	776f 656e 2072 5049 6920 2073 7525 252e     owner IP is %u.%
  411874:	2e75 7525 252e 0d75 000a 0000 492d 202d     u.%u.%u.....-I- 
  411884:	5057 2053 5353 4449 3a20 2520 0a73 0000     WPS SSID : %s...
  411894:	492d 202d 5057 2053 5350 204b 203a 7325     -I- WPS PSK : %s
  4118a4:	000a 0000 492d 202d 5057 2053 5353 4449     ....-I- WPS SSID
  4118b4:	4120 7475 2068 7954 6570 3a20 2520 0a73      Auth Type : %s.
  4118c4:	0000 0000 492d 202d 5057 2053 6843 6e61     ....-I- WPS Chan
  4118d4:	656e 206c 203a 6425 000a 0000 452d 202d     nel : %d....-E- 
  4118e4:	5057 2053 7349 6e20 746f 6520 616e 6c62     WPS Is not enabl
  4118f4:	6465 4f20 2052 6954 656d 2064 756f 0a74     ed OR Timed out.
  411904:	0000 0000 6957 6946 505f 5032 203a 326d     ....WiFi_P2P: m2
  411914:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
  411924:	6520 7272 726f 2821 6425 0d29 000a 0000      error!(%d).....
  411934:	452d 202d 6957 6946 505f 5032 203a 326d     -E- WiFi_P2P: m2
  411944:	5f6d 6977 6966 705f 7032 6320 6c61 206c     m_wifi_p2p call 
  411954:	7265 6f72 2172 0a0d 0000 0000 492d 202d     error!......-I- 
  411964:	3250 2050 6f6d 6564 7320 6174 7472 6465     P2P mode started
  411974:	202e 7325 6920 2073 7761 6961 6974 676e     . %s is awaiting
  411984:	6320 6e6f 656e 7463 6f69 2e6e 0a0d 0000      connection.....
  411994:	6142 6863 6c65 726f 6f47 6f47 002a 0000     BachelorGoGo*...
  4119a4:	452d 202d 6957 6946 505f 5032 203a 326d     -E- WiFi_P2P: m2
  4119b4:	5f6d 6977 6966 735f 7465 645f 7665 6369     m_wifi_set_devic
  4119c4:	5f65 616e 656d 6320 6c61 206c 7265 6f72     e_name call erro
  4119d4:	2172 0a0d 0000 0000 4d43 2a44 5443 0000     r!......CMD*CT..
  4119e4:	003b 0000 7750 0072 6741 006c 452d 202d     ;...Pwr.Agl.-E- 
  4119f4:	6f43 746e 6f72 206c 7571 7565 2065 7369     Control queue is
  411a04:	6620 6c75 0d6c 000a 452d 202d 7551 7565      full...-E- Queu
  411a14:	2065 6f63 6c75 2064 6f6e 2074 6562 6320     e could not be c
  411a24:	656c 7261 6465 0a0d 0000 0000 4d43 2a44     leared......CMD*
  411a34:	4553 0000 614e 656d 0000 0000 7341 6973     SE..Name....Assi
  411a44:	7473 6465 0000 0000 6f50 6577 4d72 646f     sted....PowerMod
  411a54:	0065 0000 6956 6564 516f 6175 696c 7974     e...VideoQuality
  411a64:	0000 0000 452d 202d 6f43 6c75 2064 6f6e     ....-E- Could no
  411a74:	2074 6573 2074 6564 6976 6563 6e20 6d61     t set device nam
  411a84:	0d65 000a 452d 202d 614e 656d 7120 6575     e...-E- Name que
  411a94:	6575 6920 2073 7566 6c6c 0a0d 0000 0000     ue is full......
  411aa4:	452d 202d 6553 7474 6e69 7367 7120 6575     -E- Settings que
  411ab4:	6575 6920 2073 7566 6c6c 0a0d 0000 0000     ue is full......
  411ac4:	4d43 2a44 5453 0000 6142 7474 7265 0079     CMD*ST..Battery.
  411ad4:	6143 656d 6172 0000 7053 6361 0065 0000     Camera..Space...
  411ae4:	6552 616d 6e69 6e69 0067 0000 6f52 6f62     Remaining...Robo
  411af4:	6f47 6f47 0000 0000 4128 5050 2829 5245     GoGo....(APP)(ER
  411b04:	2952 255b 5d73 255b 5d64 0000 6e69 6176     R)[%s][%d]..inva
  411b14:	696c 6564 6920 636f 746c 6320 646d 000a     lide ioclt cmd..
  411b24:	000d 0000                                   ....

00411b28 <__FUNCTION__.9647>:
  411b28:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....

00411b38 <__FUNCTION__.11634>:
  411b38:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.

00411b48 <__FUNCTION__.11598>:
  411b48:	6968 5f66 7369 0072                         hif_isr.

00411b50 <__FUNCTION__.11604>:
  411b50:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00411b60 <__FUNCTION__.11619>:
  411b60:	6968 5f66 6572 6563 7669 0065 4828 4649     hif_receive.(HIF
  411b70:	4629 6961 206c 6f74 7720 6b61 7075 7420     )Fail to wakup t
  411b80:	6568 6320 6968 0a70 0000 0000 6828 6669     he chip.....(hif
  411b90:	2029 4957 4946 485f 534f 5f54 4352 5f56     ) WIFI_HOST_RCV_
  411ba0:	5443 4c52 315f 6220 7375 6620 6961 0a6c     CTRL_1 bus fail.
  411bb0:	0000 0000 6828 6669 2029 6461 7264 7365     ....(hif) addres
  411bc0:	2073 7562 2073 6166 6c69 000a 6828 6669     s bus fail..(hif
  411bd0:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
  411be0:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
  411bf0:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
  411c00:	3d20 2520 3230 3e58 000a 0000 6828 6669      = %02X>....(hif
  411c10:	2029 6e69 6176 696c 2064 7267 756f 2070     ) invalid group 
  411c20:	4449 000a 6828 6669 2029 6f68 7473 6120     ID..(hif) host a
  411c30:	7070 6420 6469 276e 2074 6573 2074 5852     pp didn't set RX
  411c40:	4420 6e6f 0a65 0000 6828 6669 2029 7257      Done...(hif) Wr
  411c50:	6e6f 2067 6953 657a 000a 0000 6828 6669     ong Size....(hif
  411c60:	2029 6146 736c 2065 6e69 6574 7272 7075     ) False interrup
  411c70:	2074 6c25 0078 0000 6828 6669 2029 6146     t %lx...(hif) Fa
  411c80:	6c69 7420 206f 6552 6461 6920 746e 7265     il to Read inter
  411c90:	7572 7470 7220 6765 000a 0000 6828 6669     rupt reg....(hif
  411ca0:	2029 4146 4c49 7420 206f 6177 656b 7075     ) FAIL to wakeup
  411cb0:	7420 6568 6320 6968 0a70 0000 4828 4649      the chip...(HIF
  411cc0:	2029 6146 6c69 7420 206f 6168 646e 656c     ) Fail to handle
  411cd0:	6920 746e 7265 7572 7470 2520 2064 7274      interrupt %d tr
  411ce0:	2079 6741 6961 2e6e 0a2e 0000 6820 6669     y Again..... hif
  411cf0:	725f 6365 6965 6576 203a 6e49 6176 696c     _receive: Invali
  411d00:	2064 7261 7567 656d 746e 000a 5041 2050     d argument..APP 
  411d10:	6552 7571 7365 6574 2064 6953 657a 6920     Requested Size i
  411d20:	2073 616c 6772 7265 7420 6168 206e 6874     s larger than th
  411d30:	2065 6572 6963 6576 2064 7562 6666 7265     e recived buffer
  411d40:	7320 7a69 2065 253c 3e64 253c 3e64 000a      size <%d><%d>..
  411d50:	5041 2050 6552 7571 7365 6574 2064 6441     APP Requested Ad
  411d60:	7264 7365 2073 6562 6f79 646e 7420 6568     dress beyond the
  411d70:	7220 6365 7669 6465 6220 6675 6566 2072      recived buffer 
  411d80:	6461 7264 7365 2073 6e61 2064 656c 676e     address and leng
  411d90:	6874 000a 5247 2070 203f 6425 000a 0000     th..GRp ? %d....

00411da0 <__FUNCTION__.11588>:
  411da0:	6968 5f66 6573 646e 0000 0000               hif_send....

00411dac <__FUNCTION__.8179>:
  411dac:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  411dbc:	735f 0063                                   _sc.

00411dc0 <__FUNCTION__.8127>:
  411dc0:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00411dcc <__FUNCTION__.8254>:
  411dcc:	326d 5f6d 6977 6966 705f 7032 0000 0000     m2m_wifi_p2p....

00411ddc <__FUNCTION__.8151>:
  411ddc:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...
  411dec:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
  411dfc:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
  411e0c:	2e75 7525 252e 2075 2022 000a 4552 2051     u.%u.%u " ..REQ 
  411e1c:	6f4e 2074 6564 6966 656e 2064 6425 000a     Not defined %d..
  411e2c:	4e49 4156 494c 2044 4f50 4e49 4554 0a52     INVALID POINTER.
  411e3c:	0000 0000 4e49 4156 494c 2044 5353 4449     ....INVALID SSID
  411e4c:	000a 0000 4e49 4156 494c 2044 4843 000a     ....INVALID CH..
  411e5c:	4e49 4156 494c 2044 4844 5043 5320 5245     INVALID DHCP SER
  411e6c:	4556 2052 5049 000a 4e49 4156 494c 2044     VER IP..INVALID 
  411e7c:	454b 2059 4e49 4544 0a58 0000 4e49 4156     KEY INDEX...INVA
  411e8c:	494c 2044 454b 2059 4953 455a 000a 0000     LID KEY SIZE....
  411e9c:	4e49 4156 494c 2044 4557 2050 454b 0a59     INVALID WEP KEY.
  411eac:	0000 0000 4e49 4156 494c 2044 5541 4854     ....INVALID AUTH
  411ebc:	4e45 4954 4143 4954 4e4f 4d20 444f 0a45     ENTICATION MODE.
  411ecc:	0000 0000 6946 6d72 6177 6572 7620 7265     ....Firmware ver
  411edc:	2020 3a20 2520 2e75 7525 252e 0a75 0000        : %u.%u.%u...
  411eec:	694d 206e 7264 7669 7265 7620 7265 3a20     Min driver ver :
  411efc:	2520 2e75 7525 252e 0a75 0000 7543 7272      %u.%u.%u...Curr
  411f0c:	6420 6972 6576 2072 6576 3a72 2520 2e75      driver ver: %u.
  411f1c:	7525 252e 0a75 0000 694d 6d73 7461 6863     %u.%u...Mismatch
  411f2c:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
  411f3c:	0a6e 0000 654b 2079 7369 6e20 746f 7620     n...Key is not v
  411f4c:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  411f5c:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  411f6c:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  411f7c:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  411f8c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  411f9c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  411fac:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  411fbc:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  411fcc:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  411fdc:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  411fec:	4e49 4156 494c 2044 6f4e 6f20 2066 6373     INVALID No of sc
  411ffc:	6e61 7320 6f6c 7374 0a21 0000 4e49 4156     an slots!...INVA
  41200c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
  41201c:	656d 0a21 0000 0000 4e49 4156 494c 2044     me!.....INVALID 
  41202c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
  41203c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
  41204c:	746f 000a 4e49 4156 494c 2044 5352 4953     ot..INVALID RSSI
  41205c:	7420 7268 7365 6f68 646c 2520 2064 000a      threshold %d ..
  41206c:	505f 5f53 4553 5652 5245 205f 7369 6e20     _PS_SERVER_ is n
  41207c:	746f 6420 6665 6e69 6465 000a 694c 7473     ot defined..List
  41208c:	6e65 6320 6168 6e6e 6c65 7320 6f68 6c75     en channel shoul
  41209c:	2064 6e6f 796c 6220 2065 2c31 3620 6f20     d only be 1, 6 o
  4120ac:	2072 3131 000a 0000 4f50 4557 2052 4153     r 11....POWER SA
  4120bc:	4556 2520 0a64 0000 4e49 4156 494c 2044     VE %d...INVALID 
  4120cc:	4f44 414d 4e49 4e20 4d41 0a45 0000 0000     DOMAIN NAME.....
  4120dc:	5250 474e 4220 6675 6566 2072 7865 6563     PRNG Buffer exce
  4120ec:	6465 6465 6d20 7861 6d69 6d75 7320 7a69     eded maximum siz
  4120fc:	2065 6425 6f20 2072 554e 4c4c 4220 6675     e %d or NULL Buf
  41210c:	6566 0a72 0000 0000                         fer.....

00412114 <__FUNCTION__.7964>:
  412114:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.
  412124:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  412134:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  412144:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  412154:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  412164:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  412174:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  412184:	000a 0000 6e5b 696d 7320 6174 7472 3a5d     ....[nmi start]:
  412194:	6620 6961 206c 6572 6461 7220 6765 3020      fail read reg 0
  4121a4:	3178 3131 2038 2e2e 0a2e 0000 6166 6c69     x1118 ......fail
  4121b4:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  4121c4:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  4121d4:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  4121e4:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  4121f4:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  412204:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  412214:	6961 656c 2064 6f74 7220 6165 0a64 0000     ailed to read...
  412224:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  412234:	6961 656c 2064 6f74 7720 6972 6574 000a     ailed to write..

00412244 <__FUNCTION__.8058>:
  412244:	6863 7069 645f 6965 696e 0074 6e5b 696d     chip_deinit.[nmi
  412254:	7320 6174 7472 3a5d 6620 6961 206c 6e69      start]: fail in
  412264:	7469 6220 7375 000a 6843 7069 4920 2044     it bus..Chip ID 
  412274:	6c25 0a78 0000 0000 6166 6c69 6465 7420     %lx.....failed t
  412284:	206f 6e65 6261 656c 6920 746e 7265 7572     o enable interru
  412294:	7470 2e73 0a2e 0000 6e5b 696d 7320 6f74     pts.....[nmi sto
  4122a4:	5d70 203a 6863 7069 645f 6965 696e 2074     p]: chip_deinit 
  4122b4:	6166 6c69 000a 0000 6e5b 696d 7320 6f74     fail....[nmi sto
  4122c4:	5d70 203a 5053 2049 6c66 7361 2068 6964     p]: SPI flash di
  4122d4:	6173 6c62 2065 6166 6c69 000a 6e5b 696d     sable fail..[nmi
  4122e4:	7320 6f74 5d70 203a 6166 6c69 6920 696e      stop]: fail ini
  4122f4:	2074 7562 0a73 0000                         t bus...

004122fc <__FUNCTION__.8045>:
  4122fc:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00412308 <__FUNCTION__.8052>:
  412308:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00412318 <__FUNCTION__.7520>:
  412318:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00412324 <__FUNCTION__.7468>:
  412324:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00412334 <__FUNCTION__.7478>:
  412334:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00412344 <__FUNCTION__.7495>:
  412344:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00412354 <__FUNCTION__.7486>:
  412354:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....
  412364:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  412374:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
  412384:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
  412394:	0a2e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4123a4:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  4123b4:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
  4123c4:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
  4123d4:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
  4123e4:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
  4123f4:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
  412404:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  412414:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
  412424:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
  412434:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  412444:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
  412454:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
  412464:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  412474:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
  412484:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  412494:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4124a4:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  4124b4:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  4124c4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4124d4:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  4124e4:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  4124f4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  412504:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
  412514:	6572 2067 2528 3830 2978 2e2e 0a2e 0000     reg (%08x)......
  412524:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  412534:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
  412544:	6572 6461 7220 6765 2820 3025 7838 2e29     read reg (%08x).
  412554:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  412564:	6961 656c 2064 6164 6174 7220 6165 2e64     ailed data read.
  412574:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  412584:	6961 656c 2064 6e69 6574 6e72 6c61 7220     ailed internal r
  412594:	6165 2064 7270 746f 636f 6c6f 7720 7469     ead protocol wit
  4125a4:	2068 5243 2043 6e6f 202c 6572 7974 6972     h CRC on, retyri
  4125b4:	676e 7720 7469 2068 5243 2043 666f 2e66     ng with CRC off.
  4125c4:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4125d4:	6961 656c 2064 6e69 6574 6e72 6c61 7220     ailed internal r
  4125e4:	6165 2064 7270 746f 636f 6c6f 2e2e 0a2e     ead protocol....
  4125f4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  412604:	6961 656c 2064 6e69 6574 6e72 6c61 7720     ailed internal w
  412614:	6972 6574 7020 6f72 6f74 6f63 206c 6572     rite protocol re
  412624:	2e67 2e2e 000a 0000 6e5b 696d 7320 6970     g.......[nmi spi
  412634:	3a5d 4620 6961 206c 6d63 2064 6572 6461     ]: Fail cmd read
  412644:	6320 6968 2070 6469 2e2e 0a2e 0000 0000      chip id........
  412654:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  412664:	2064 6d63 2c64 7220 6165 2064 6c62 636f     d cmd, read bloc
  412674:	206b 2528 3830 2978 2e2e 0a2e 0000 0000     k (%08x)........
  412684:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  412694:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
  4126a4:	6572 6461 6220 6f6c 6b63 2820 3025 7838     read block (%08x
  4126b4:	2e29 2e2e 000a 0000 6e5b 696d 7320 6970     ).......[nmi spi
  4126c4:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  4126d4:	6164 6174 7220 6165 2e64 2e2e 000a 0000     data read.......
  4126e4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4126f4:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
  412704:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
  412714:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
  412724:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
  412734:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
  412744:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
  412754:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  412764:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
  412774:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  412784:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  412794:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
  4127a4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
  4127b4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4127c4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  4127d4:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
  4127e4:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  4127f4:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
  412804:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
  412814:	0a2e 0000                                   ....

00412818 <__FUNCTION__.7429>:
  412818:	7073 5f69 6d63 0064                         spi_cmd.

00412820 <__FUNCTION__.7437>:
  412820:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0041282c <__FUNCTION__.7503>:
  41282c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00412838 <crc7_syndrome_table>:
  412838:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  412848:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  412858:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  412868:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  412878:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  412888:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  412898:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  4128a8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  4128b8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  4128c8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  4128d8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  4128e8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  4128f8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  412908:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  412918:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  412928:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy

00412938 <__FUNCTION__.7453>:
  412938:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...
  412948:	4528 5252 2952 7543 7272 6e65 2074 253c     (ERRR)Current <%
  412958:	3e64 000a 4e53 2049 7845 6563 6465 2073     d>..SNI Exceeds 
  412968:	614d 2078 654c 676e 6874 000a 6e55 6e6b     Max Length..Unkn
  412978:	776f 206e 5353 204c 6f53 6b63 7465 4f20     own SSL Socket O
  412988:	7470 6f69 206e 6425 000a 0000 6f4e 2074     ption %d....Not 
  412998:	5353 204c 6f53 6b63 7465 000a 7325 0909     SSL Socket..%s..
  4129a8:	6325 2509 0975 7525 2509 0d75 000a 0000     %c.%u.%u.%u.....
  4129b8:	4449 454c 0000 0000 6d54 2072 7653 0063     IDLE....Tmr Svc.
  4129c8:	452d 202d 7245 6f72 2072 6567 656e 6172     -E- Error genera
  4129d8:	6974 676e 7320 6174 7574 2073 656d 7373     ting status mess
  4129e8:	6761 0d65 000a 0000 492d 202d 6552 7473     age.....-I- Rest
  4129f8:	726f 6e69 2067 6573 7474 6e69 7367 6620     oring settings f
  412a08:	6f72 206d 6f6e 2d6e 6f76 616c 6974 656c     rom non-volatile
  412a18:	6d20 6d65 726f 2e79 2e2e 0a0d 0000 0000      memory.........
  412a28:	492d 202d 6553 7474 6e69 7367 7320 6375     -I- Settings suc
  412a38:	6563 7373 7566 6c6c 2079 6572 7473 726f     cessfully restor
  412a48:	6465 0a0d 0000 0000 492d 202d 6f4e 7320     ed......-I- No s
  412a58:	7465 6974 676e 2073 6f66 6e75 2e64 4420     ettings found. D
  412a68:	6665 7561 746c 7320 7465 6974 676e 2073     efault settings 
  412a78:	7061 6c70 6569 2e64 0a0d 0000 452d 202d     applied.....-E- 
  412a88:	7245 6f72 2072 6572 7473 726f 6e69 2067     Error restoring 
  412a98:	6573 7474 6e69 7367 202e 6544 6166 6c75     settings. Defaul
  412aa8:	2074 6573 7474 6e69 7367 6120 7070 696c     t settings appli
  412ab8:	6465 0d2e 000a 0000 452d 202d 7245 6f72     ed......-E- Erro
  412ac8:	2072 6572 7274 6569 6976 676e 7320 7465     r retrieving set
  412ad8:	6974 676e 2e73 4420 6665 7561 746c 7320     tings. Default s
  412ae8:	7465 6974 676e 2073 7061 6c70 6569 2e64     ettings applied.
  412af8:	0a0d 0000 7473 6361 206b 766f 7265 6c66     ....stack overfl
  412b08:	776f 2520 2078 7325 0a0d 0000 2d2d 5220     ow %x %s....-- R
  412b18:	626f 206f 4f47 4f47 5220 626f 746f 4320     obo GOGO Robot C
  412b28:	6e6f 7274 6c6f 4d20 5543 5020 6f72 7267     ontrol MCU Progr
  412b38:	6d61 2d20 0d2d 2d0a 202d 4153 344d 5f53     am --..-- SAM4S_
  412b48:	5058 414c 4e49 4445 505f 4f52 2d20 0d2d     XPLAINED_PRO --.
  412b58:	2d0a 202d 6f43 706d 6c69 6465 203a 6544     .-- Compiled: De
  412b68:	2063 3820 3220 3130 2036 3731 303a 3a38     c  8 2016 17:08:
  412b78:	3930 2d20 0d2d 000a 454c 2044 6154 6b73     09 --...LED Task
  412b88:	0000 0000 452d 202d 6146 6c69 6465 7420     ....-E- Failed t
  412b98:	206f 7263 6165 6574 4c20 4445 5420 7361     o create LED Tas
  412ba8:	0d6b 000a 492d 202d 7243 6165 6574 2064     k...-I- Created 
  412bb8:	454c 2044 6154 6b73 0a0d 0000 4957 434e     LED Task....WINC
  412bc8:	5420 7361 006b 0000 452d 202d 6146 6c69      Task...-E- Fail
  412bd8:	6465 7420 206f 7263 6165 6574 5720 4e49     ed to create WIN
  412be8:	2043 6154 6b73 0a0d 0000 0000 492d 202d     C Task......-I- 
  412bf8:	7243 6165 6574 2064 4957 434e 5420 7361     Created WINC Tas
  412c08:	0d6b 000a 6f43 746e 6f72 206c 6f4c 706f     k...Control Loop
  412c18:	5420 7361 006b 0000 452d 202d 6146 6c69      Task...-E- Fail
  412c28:	6465 7420 206f 7263 6165 6574 4320 6e6f     ed to create Con
  412c38:	7274 6c6f 4c20 6f6f 2070 6154 6b73 0a0d     trol Loop Task..
  412c48:	0000 0000 492d 202d 7243 6165 6574 2064     ....-I- Created 
  412c58:	6f43 746e 6f72 206c 6f4c 706f 5420 7361     Control Loop Tas
  412c68:	0d6b 000a 6553 646e 5320 6174 7574 2073     k...Send Status 
  412c78:	6154 6b73 0000 0000 452d 202d 6146 6c69     Task....-E- Fail
  412c88:	6465 7420 206f 7263 6165 6574 5320 6e65     ed to create Sen
  412c98:	2064 7453 7461 7375 5420 7361 0d6b 000a     d Status Task...
  412ca8:	492d 202d 7243 6165 6574 2064 6553 646e     -I- Created Send
  412cb8:	5320 6174 7574 2073 6154 6b73 0a0d 0000      Status Task....
  412cc8:	7173 7472 0000 0000 0043 0000               sqrt....C...

00412cd4 <_global_impure_ptr>:
  412cd4:	0030 2000                                   0.. 

00412cd8 <fpinan.5370>:
  412cd8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
  412ce8:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  412cf8:	6e61 0000 0000 0000                         an......

00412d00 <tinytens>:
  412d00:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  412d10:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  412d20:	6f43 64ac 0628 1168                         Co.d(.h.

00412d28 <fpi.5334>:
  412d28:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  412d38:	0000 0000                                   ....

00412d3c <zeroes.7035>:
  412d3c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  412d4c:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  412d5c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  412d6c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  412d7c:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  412d8c:	0030 0000                                   0...

00412d90 <blanks.7034>:
  412d90:	2020 2020 2020 2020 2020 2020 2020 2020                     

00412da0 <zeroes.6993>:
  412da0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00412db0 <blanks.6992>:
  412db0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00412dc0 <_ctype_>:
  412dc0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  412dd0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  412de0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  412df0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  412e00:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  412e10:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  412e20:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  412e30:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  412e40:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  412ec4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00412ed4 <__hexdig>:
	...
  412f04:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  412f14:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  412f34:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  412fd4:	4f50 4953 0058 0000 002e 0000               POSIX.......

00412fe0 <__mprec_tens>:
  412fe0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  412ff0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  413000:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  413010:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  413020:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  413030:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  413040:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  413050:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  413060:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  413070:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  413080:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413090:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4130a0:	9db4 79d9 7843 44ea                         ...yCx.D

004130a8 <__mprec_bigtens>:
  4130a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4130b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4130c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

004130d0 <p05.5373>:
  4130d0:	0005 0000 0019 0000 007d 0000               ........}...

004130dc <_init>:
  4130dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4130de:	bf00      	nop
  4130e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4130e2:	bc08      	pop	{r3}
  4130e4:	469e      	mov	lr, r3
  4130e6:	4770      	bx	lr

004130e8 <__init_array_start>:
  4130e8:	0040d579 	.word	0x0040d579

004130ec <__frame_dummy_init_array_entry>:
  4130ec:	004000f1                                ..@.

004130f0 <_fini>:
  4130f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4130f2:	bf00      	nop
  4130f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4130f6:	bc08      	pop	{r3}
  4130f8:	469e      	mov	lr, r3
  4130fa:	4770      	bx	lr

004130fc <__fini_array_start>:
  4130fc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <udp_status_socket>:
2000000c:	ffff                                             .

2000000d <udp_command_socket>:
2000000d:	ffff                                             .

2000000e <tcp_settings_listen_socket>:
2000000e:	ffff                                             .

2000000f <tcp_connection_est_socket>:
2000000f:	ffff                                             .

20000010 <tcp_settings_data_socket>:
20000010:	00ff 0000                                   ....

20000014 <egstrNmBusCapabilities>:
20000014:	1000 0000                                   ....

20000018 <clk_status_reg_adr>:
20000018:	000f 0000                                   ....

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <uxCriticalNesting>:
20000020:	aaaa aaaa                                   ....

20000024 <xFreeBytesRemaining>:
20000024:	a000 0000                                   ....

20000028 <xNextTaskUnblockTime>:
20000028:	ffff ffff                                   ....

2000002c <__fdlib_version>:
2000002c:	0001 0000                                   ....

20000030 <impure_data>:
20000030:	0000 0000 031c 2000 0384 2000 03ec 2000     ....... ... ... 
	...
20000064:	2cd0 0041 0000 0000 0000 0000 0000 0000     .,A.............
	...
200000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000458 <_impure_ptr>:
20000458:	0030 2000                                   0.. 

2000045c <__malloc_av_>:
	...
20000464:	045c 2000 045c 2000 0464 2000 0464 2000     \.. \.. d.. d.. 
20000474:	046c 2000 046c 2000 0474 2000 0474 2000     l.. l.. t.. t.. 
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 

20000864 <__malloc_trim_threshold>:
20000864:	0000 0002                                   ....

20000868 <__malloc_sbrk_base>:
20000868:	ffff ffff                                   ....

2000086c <__ctype_ptr__>:
2000086c:	2dc0 0041                                   .-A.

20000870 <lconv>:
20000870:	2fdc 0041 19d8 0041 19d8 0041 19d8 0041     ./A...A...A...A.
20000880:	19d8 0041 19d8 0041 19d8 0041 19d8 0041     ..A...A...A...A.
20000890:	19d8 0041 19d8 0041 ffff ffff ffff ffff     ..A...A.........
200008a0:	ffff ffff ffff 0000                         ........

200008a8 <lc_ctype_charset>:
200008a8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200008c8 <__mb_cur_max>:
200008c8:	0001 0000                                   ....

200008cc <__wctomb>:
200008cc:	07b1 0041                                   ..A.
