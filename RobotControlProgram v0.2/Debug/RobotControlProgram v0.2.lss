
RobotControlProgram v0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000102c0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004102c0  004102c0  000202c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d0  20000000  004102c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a54c  200008d0  00410b98  000308d0  2**3
                  ALLOC
  4 .stack        00003004  2000ae1c  0041b0e4  000308d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000308fa  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021a5e  00000000  00000000  00030953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000547b  00000000  00000000  000523b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000119a0  00000000  00000000  0005782c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001458  00000000  00000000  000691cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013e0  00000000  00000000  0006a624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d119  00000000  00000000  0006ba04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001de03  00000000  00000000  00088b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00060e68  00000000  00000000  000a6920  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000049ac  00000000  00000000  00107788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000de20 	.word	0x2000de20
  400004:	00404185 	.word	0x00404185
  400008:	0040416d 	.word	0x0040416d
  40000c:	0040416d 	.word	0x0040416d
  400010:	0040416d 	.word	0x0040416d
  400014:	0040416d 	.word	0x0040416d
  400018:	0040416d 	.word	0x0040416d
	...
  40002c:	004044fd 	.word	0x004044fd
  400030:	0040416d 	.word	0x0040416d
  400034:	00000000 	.word	0x00000000
  400038:	00404579 	.word	0x00404579
  40003c:	004045b5 	.word	0x004045b5
  400040:	0040416d 	.word	0x0040416d
  400044:	0040416d 	.word	0x0040416d
  400048:	0040416d 	.word	0x0040416d
  40004c:	0040416d 	.word	0x0040416d
  400050:	0040416d 	.word	0x0040416d
  400054:	0040416d 	.word	0x0040416d
  400058:	0040416d 	.word	0x0040416d
  40005c:	0040416d 	.word	0x0040416d
  400060:	0040416d 	.word	0x0040416d
  400064:	0040416d 	.word	0x0040416d
  400068:	00000000 	.word	0x00000000
  40006c:	00403f69 	.word	0x00403f69
  400070:	00403f7d 	.word	0x00403f7d
  400074:	00403f91 	.word	0x00403f91
  400078:	0040416d 	.word	0x0040416d
  40007c:	0040416d 	.word	0x0040416d
	...
  400088:	0040416d 	.word	0x0040416d
  40008c:	0040416d 	.word	0x0040416d
  400090:	0040416d 	.word	0x0040416d
  400094:	0040416d 	.word	0x0040416d
  400098:	0040416d 	.word	0x0040416d
  40009c:	0040416d 	.word	0x0040416d
  4000a0:	0040416d 	.word	0x0040416d
  4000a4:	0040416d 	.word	0x0040416d
  4000a8:	0040416d 	.word	0x0040416d
  4000ac:	0040416d 	.word	0x0040416d
  4000b0:	0040416d 	.word	0x0040416d
  4000b4:	0040416d 	.word	0x0040416d
  4000b8:	0040416d 	.word	0x0040416d
  4000bc:	0040416d 	.word	0x0040416d
  4000c0:	0040416d 	.word	0x0040416d
  4000c4:	0040416d 	.word	0x0040416d
  4000c8:	0040416d 	.word	0x0040416d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008d0 	.word	0x200008d0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004102c8 	.word	0x004102c8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200008d4 	.word	0x200008d4
  40011c:	004102c8 	.word	0x004102c8
  400120:	004102c8 	.word	0x004102c8
  400124:	00000000 	.word	0x00000000

00400128 <network_establish_connection>:
		}
	}
}

void network_establish_connection(uint32_t address)
{
  400128:	b510      	push	{r4, lr}
  40012a:	b084      	sub	sp, #16
	int8_t ret;
	struct sockaddr_in addr;
	
	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  40012c:	2302      	movs	r3, #2
  40012e:	f8ad 3000 	strh.w	r3, [sp]
	addr.sin_port = _htons(GO_PORT);
  400132:	f640 7327 	movw	r3, #3879	; 0xf27
  400136:	f8ad 3002 	strh.w	r3, [sp, #2]
	addr.sin_addr.s_addr = _htonl(address);
  40013a:	0e03      	lsrs	r3, r0, #24
  40013c:	ea43 6200 	orr.w	r2, r3, r0, lsl #24
  400140:	0203      	lsls	r3, r0, #8
  400142:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  400146:	4313      	orrs	r3, r2
  400148:	0a00      	lsrs	r0, r0, #8
  40014a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  40014e:	4318      	orrs	r0, r3
  400150:	9001      	str	r0, [sp, #4]
	
	/* Initialize socket module */
	socketInit();
  400152:	4b18      	ldr	r3, [pc, #96]	; (4001b4 <network_establish_connection+0x8c>)
  400154:	4798      	blx	r3
	registerSocketCallback(socket_event_handler_cb, NULL);
  400156:	2100      	movs	r1, #0
  400158:	4817      	ldr	r0, [pc, #92]	; (4001b8 <network_establish_connection+0x90>)
  40015a:	4b18      	ldr	r3, [pc, #96]	; (4001bc <network_establish_connection+0x94>)
  40015c:	4798      	blx	r3
	
	/* Open client socket. */
	if (tcp_port_exchange_socket < 0) {
  40015e:	4b18      	ldr	r3, [pc, #96]	; (4001c0 <network_establish_connection+0x98>)
  400160:	f993 3000 	ldrsb.w	r3, [r3]
  400164:	2b00      	cmp	r3, #0
  400166:	da22      	bge.n	4001ae <network_establish_connection+0x86>
		if ((tcp_port_exchange_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  400168:	2200      	movs	r2, #0
  40016a:	2101      	movs	r1, #1
  40016c:	2002      	movs	r0, #2
  40016e:	4b15      	ldr	r3, [pc, #84]	; (4001c4 <network_establish_connection+0x9c>)
  400170:	4798      	blx	r3
  400172:	4b13      	ldr	r3, [pc, #76]	; (4001c0 <network_establish_connection+0x98>)
  400174:	7018      	strb	r0, [r3, #0]
  400176:	2800      	cmp	r0, #0
  400178:	da04      	bge.n	400184 <network_establish_connection+0x5c>
			printf("Networking: failed to create TCP client socket error!\r\n");
  40017a:	4813      	ldr	r0, [pc, #76]	; (4001c8 <network_establish_connection+0xa0>)
  40017c:	4b13      	ldr	r3, [pc, #76]	; (4001cc <network_establish_connection+0xa4>)
  40017e:	4798      	blx	r3
			m2m_wifi_disconnect();
  400180:	4b13      	ldr	r3, [pc, #76]	; (4001d0 <network_establish_connection+0xa8>)
  400182:	4798      	blx	r3
		}

		/* Connect server */
		ret = connect(tcp_port_exchange_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
  400184:	2210      	movs	r2, #16
  400186:	4669      	mov	r1, sp
  400188:	4b0d      	ldr	r3, [pc, #52]	; (4001c0 <network_establish_connection+0x98>)
  40018a:	f993 0000 	ldrsb.w	r0, [r3]
  40018e:	4b11      	ldr	r3, [pc, #68]	; (4001d4 <network_establish_connection+0xac>)
  400190:	4798      	blx	r3

		if (ret < 0) {
  400192:	2800      	cmp	r0, #0
  400194:	da0b      	bge.n	4001ae <network_establish_connection+0x86>
			printf("Networking: failed to connect TCP client socket error!\r\n");
  400196:	4810      	ldr	r0, [pc, #64]	; (4001d8 <network_establish_connection+0xb0>)
  400198:	4b0c      	ldr	r3, [pc, #48]	; (4001cc <network_establish_connection+0xa4>)
  40019a:	4798      	blx	r3
			close(tcp_port_exchange_socket);
  40019c:	4c08      	ldr	r4, [pc, #32]	; (4001c0 <network_establish_connection+0x98>)
  40019e:	f994 0000 	ldrsb.w	r0, [r4]
  4001a2:	4b0e      	ldr	r3, [pc, #56]	; (4001dc <network_establish_connection+0xb4>)
  4001a4:	4798      	blx	r3
			tcp_port_exchange_socket = -1;
  4001a6:	23ff      	movs	r3, #255	; 0xff
  4001a8:	7023      	strb	r3, [r4, #0]
			m2m_wifi_disconnect();
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <network_establish_connection+0xa8>)
  4001ac:	4798      	blx	r3
		}
	}	
}
  4001ae:	b004      	add	sp, #16
  4001b0:	bd10      	pop	{r4, pc}
  4001b2:	bf00      	nop
  4001b4:	004030a1 	.word	0x004030a1
  4001b8:	0040034d 	.word	0x0040034d
  4001bc:	004030e5 	.word	0x004030e5
  4001c0:	2000000d 	.word	0x2000000d
  4001c4:	004030f9 	.word	0x004030f9
  4001c8:	0040e84c 	.word	0x0040e84c
  4001cc:	00405e29 	.word	0x00405e29
  4001d0:	00401bd1 	.word	0x00401bd1
  4001d4:	004032d5 	.word	0x004032d5
  4001d8:	0040e884 	.word	0x0040e884
  4001dc:	00403571 	.word	0x00403571

004001e0 <network_listen_for_commands>:

void network_listen_for_commands(void)
{
  4001e0:	b500      	push	{lr}
  4001e2:	b085      	sub	sp, #20
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  4001e4:	4b0e      	ldr	r3, [pc, #56]	; (400220 <network_listen_for_commands+0x40>)
  4001e6:	4798      	blx	r3
	
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  4001e8:	2100      	movs	r1, #0
  4001ea:	480e      	ldr	r0, [pc, #56]	; (400224 <network_listen_for_commands+0x44>)
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <network_listen_for_commands+0x48>)
  4001ee:	4798      	blx	r3
	
	// Open socket
	udp_command_socket = socket(AF_INET,SOCK_DGRAM,0);
  4001f0:	2200      	movs	r2, #0
  4001f2:	2102      	movs	r1, #2
  4001f4:	4608      	mov	r0, r1
  4001f6:	4b0d      	ldr	r3, [pc, #52]	; (40022c <network_listen_for_commands+0x4c>)
  4001f8:	4798      	blx	r3
  4001fa:	4b0d      	ldr	r3, [pc, #52]	; (400230 <network_listen_for_commands+0x50>)
  4001fc:	7018      	strb	r0, [r3, #0]
	
	// Bind socket and listen from any address
	strAddr.sin_family = AF_INET;
  4001fe:	2302      	movs	r3, #2
  400200:	f8ad 3000 	strh.w	r3, [sp]
	strAddr.sin_port = _htons(UDP_COMMAND_PORT);
  400204:	f248 6313 	movw	r3, #34323	; 0x8613
  400208:	f8ad 3002 	strh.w	r3, [sp, #2]
	strAddr.sin_addr.s_addr = 0; //INADDR_ANY
  40020c:	2300      	movs	r3, #0
  40020e:	9301      	str	r3, [sp, #4]
	bind(udp_command_socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
  400210:	2210      	movs	r2, #16
  400212:	4669      	mov	r1, sp
  400214:	4b07      	ldr	r3, [pc, #28]	; (400234 <network_listen_for_commands+0x54>)
  400216:	4798      	blx	r3
}
  400218:	b005      	add	sp, #20
  40021a:	f85d fb04 	ldr.w	pc, [sp], #4
  40021e:	bf00      	nop
  400220:	004030a1 	.word	0x004030a1
  400224:	0040034d 	.word	0x0040034d
  400228:	004030e5 	.word	0x004030e5
  40022c:	004030f9 	.word	0x004030f9
  400230:	2000000e 	.word	0x2000000e
  400234:	004031d9 	.word	0x004031d9

00400238 <network_listen_for_settings>:

void network_listen_for_settings(void)
{
  400238:	b500      	push	{lr}
  40023a:	b085      	sub	sp, #20
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  40023c:	4b0f      	ldr	r3, [pc, #60]	; (40027c <network_listen_for_settings+0x44>)
  40023e:	4798      	blx	r3
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  400240:	2100      	movs	r1, #0
  400242:	480f      	ldr	r0, [pc, #60]	; (400280 <network_listen_for_settings+0x48>)
  400244:	4b0f      	ldr	r3, [pc, #60]	; (400284 <network_listen_for_settings+0x4c>)
  400246:	4798      	blx	r3
	// Create the server listen socket.
	tcp_settings_listen_socket = socket(AF_INET, SOCK_STREAM, 0);
  400248:	2200      	movs	r2, #0
  40024a:	2101      	movs	r1, #1
  40024c:	2002      	movs	r0, #2
  40024e:	4b0e      	ldr	r3, [pc, #56]	; (400288 <network_listen_for_settings+0x50>)
  400250:	4798      	blx	r3
  400252:	4b0e      	ldr	r3, [pc, #56]	; (40028c <network_listen_for_settings+0x54>)
  400254:	7018      	strb	r0, [r3, #0]
	if(tcp_settings_listen_socket >= 0)
  400256:	2800      	cmp	r0, #0
  400258:	db0c      	blt.n	400274 <network_listen_for_settings+0x3c>
	{
		strAddr.sin_family = AF_INET;
  40025a:	2302      	movs	r3, #2
  40025c:	f8ad 3000 	strh.w	r3, [sp]
		strAddr.sin_port = _htons(TCP_SETTINGS_PORT);
  400260:	f248 7313 	movw	r3, #34579	; 0x8713
  400264:	f8ad 3002 	strh.w	r3, [sp, #2]
		strAddr.sin_addr.s_addr = 0; //INADDR_ANY
  400268:	2300      	movs	r3, #0
  40026a:	9301      	str	r3, [sp, #4]
		
		bind(tcp_settings_listen_socket, (struct sockaddr*)&strAddr, sizeof(struct sockaddr_in));
  40026c:	2210      	movs	r2, #16
  40026e:	4669      	mov	r1, sp
  400270:	4b07      	ldr	r3, [pc, #28]	; (400290 <network_listen_for_settings+0x58>)
  400272:	4798      	blx	r3
	}
}
  400274:	b005      	add	sp, #20
  400276:	f85d fb04 	ldr.w	pc, [sp], #4
  40027a:	bf00      	nop
  40027c:	004030a1 	.word	0x004030a1
  400280:	0040034d 	.word	0x0040034d
  400284:	004030e5 	.word	0x004030e5
  400288:	004030f9 	.word	0x004030f9
  40028c:	2000000f 	.word	0x2000000f
  400290:	004031d9 	.word	0x004031d9

00400294 <network_send_status>:

void network_send_status(char* msg, uint32_t address)
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	b0c6      	sub	sp, #280	; 0x118
  400298:	4606      	mov	r6, r0
  40029a:	460c      	mov	r4, r1
	struct sockaddr_in strAddr;
	// Initialize the socket layer.
	socketInit();
  40029c:	4b1b      	ldr	r3, [pc, #108]	; (40030c <network_send_status+0x78>)
  40029e:	4798      	blx	r3
	// Register socket application callbacks.
	registerSocketCallback(socket_event_handler_cb, NULL);
  4002a0:	2100      	movs	r1, #0
  4002a2:	481b      	ldr	r0, [pc, #108]	; (400310 <network_send_status+0x7c>)
  4002a4:	4b1b      	ldr	r3, [pc, #108]	; (400314 <network_send_status+0x80>)
  4002a6:	4798      	blx	r3
	udp_status_socket = socket(AF_INET,SOCK_DGRAM,0);
  4002a8:	2200      	movs	r2, #0
  4002aa:	2102      	movs	r1, #2
  4002ac:	4608      	mov	r0, r1
  4002ae:	4b1a      	ldr	r3, [pc, #104]	; (400318 <network_send_status+0x84>)
  4002b0:	4798      	blx	r3
  4002b2:	4b1a      	ldr	r3, [pc, #104]	; (40031c <network_send_status+0x88>)
  4002b4:	7018      	strb	r0, [r3, #0]
	if(udp_status_socket >= 0)
  4002b6:	2800      	cmp	r0, #0
  4002b8:	db26      	blt.n	400308 <network_send_status+0x74>
  4002ba:	4605      	mov	r5, r0
	{
	strAddr.sin_family = AF_INET;
  4002bc:	2302      	movs	r3, #2
  4002be:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
	strAddr.sin_port = _htons(host_udp_port);
  4002c2:	4b17      	ldr	r3, [pc, #92]	; (400320 <network_send_status+0x8c>)
  4002c4:	881a      	ldrh	r2, [r3, #0]
  4002c6:	0a13      	lsrs	r3, r2, #8
  4002c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4002cc:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
	strAddr.sin_addr.s_addr = _htonl(address);
  4002d0:	0e23      	lsrs	r3, r4, #24
  4002d2:	ea43 6204 	orr.w	r2, r3, r4, lsl #24
  4002d6:	0223      	lsls	r3, r4, #8
  4002d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  4002dc:	4313      	orrs	r3, r2
  4002de:	0a24      	lsrs	r4, r4, #8
  4002e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
  4002e4:	431c      	orrs	r4, r3
  4002e6:	9443      	str	r4, [sp, #268]	; 0x10c
		
	// Fill in data
	s_msg_status status_msg;
	memcpy(status_msg.status,msg,PACKET_SIZE);
  4002e8:	24ff      	movs	r4, #255	; 0xff
  4002ea:	4622      	mov	r2, r4
  4002ec:	4631      	mov	r1, r6
  4002ee:	a802      	add	r0, sp, #8
  4002f0:	4b0c      	ldr	r3, [pc, #48]	; (400324 <network_send_status+0x90>)
  4002f2:	4798      	blx	r3

	// Format and send status message
	sendto(udp_status_socket, &status_msg, sizeof(s_msg_status), 0, (struct sockaddr*)&strAddr,
  4002f4:	2310      	movs	r3, #16
  4002f6:	9301      	str	r3, [sp, #4]
  4002f8:	ab42      	add	r3, sp, #264	; 0x108
  4002fa:	9300      	str	r3, [sp, #0]
  4002fc:	2300      	movs	r3, #0
  4002fe:	4622      	mov	r2, r4
  400300:	a902      	add	r1, sp, #8
  400302:	4628      	mov	r0, r5
  400304:	4c08      	ldr	r4, [pc, #32]	; (400328 <network_send_status+0x94>)
  400306:	47a0      	blx	r4
	sizeof(struct sockaddr_in));
	}
}
  400308:	b046      	add	sp, #280	; 0x118
  40030a:	bd70      	pop	{r4, r5, r6, pc}
  40030c:	004030a1 	.word	0x004030a1
  400310:	0040034d 	.word	0x0040034d
  400314:	004030e5 	.word	0x004030e5
  400318:	004030f9 	.word	0x004030f9
  40031c:	2000000c 	.word	0x2000000c
  400320:	2000ad40 	.word	0x2000ad40
  400324:	00405e51 	.word	0x00405e51
  400328:	00403415 	.word	0x00403415

0040032c <network_connected>:

void network_connected(void)
{
  40032c:	b508      	push	{r3, lr}
	network_is_connected = 1;
  40032e:	2201      	movs	r2, #1
  400330:	4b03      	ldr	r3, [pc, #12]	; (400340 <network_connected+0x14>)
  400332:	701a      	strb	r2, [r3, #0]
	network_listen_for_commands();
  400334:	4b03      	ldr	r3, [pc, #12]	; (400344 <network_connected+0x18>)
  400336:	4798      	blx	r3
	network_listen_for_settings();
  400338:	4b03      	ldr	r3, [pc, #12]	; (400348 <network_connected+0x1c>)
  40033a:	4798      	blx	r3
  40033c:	bd08      	pop	{r3, pc}
  40033e:	bf00      	nop
  400340:	2000ad30 	.word	0x2000ad30
  400344:	004001e1 	.word	0x004001e1
  400348:	00400239 	.word	0x00400239

0040034c <socket_event_handler_cb>:

/**
 * Callback to handle socket events
 */
static void socket_event_handler_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  40034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400350:	b082      	sub	sp, #8
  400352:	4615      	mov	r5, r2
	/** Establishing connection */
	if(sock == tcp_port_exchange_socket)
  400354:	4b98      	ldr	r3, [pc, #608]	; (4005b8 <socket_event_handler_cb+0x26c>)
  400356:	f993 4000 	ldrsb.w	r4, [r3]
  40035a:	4284      	cmp	r4, r0
  40035c:	d170      	bne.n	400440 <socket_event_handler_cb+0xf4>
	{
		/* Socket connected */
		if(u8Msg == SOCKET_MSG_CONNECT)
  40035e:	2905      	cmp	r1, #5
  400360:	d142      	bne.n	4003e8 <socket_event_handler_cb+0x9c>
		{
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
			if (pstrConnect && pstrConnect->s8Error >= 0) {
  400362:	2a00      	cmp	r2, #0
  400364:	d033      	beq.n	4003ce <socket_event_handler_cb+0x82>
  400366:	f992 3001 	ldrsb.w	r3, [r2, #1]
  40036a:	2b00      	cmp	r3, #0
  40036c:	db2f      	blt.n	4003ce <socket_event_handler_cb+0x82>
				printf("tcp_port_exchange_socket: connect success!\r\n");
  40036e:	4893      	ldr	r0, [pc, #588]	; (4005bc <socket_event_handler_cb+0x270>)
  400370:	4b93      	ldr	r3, [pc, #588]	; (4005c0 <socket_event_handler_cb+0x274>)
  400372:	4798      	blx	r3
				// Perform data exchange.
				s_msg_port port_msg;
			
				// Send UDP command port
				sprintf(port_msg.port, "%d", UDP_COMMAND_PORT);
  400374:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 40064c <socket_event_handler_cb+0x300>
  400378:	f241 3286 	movw	r2, #4998	; 0x1386
  40037c:	4641      	mov	r1, r8
  40037e:	4668      	mov	r0, sp
  400380:	4f90      	ldr	r7, [pc, #576]	; (4005c4 <socket_event_handler_cb+0x278>)
  400382:	47b8      	blx	r7
				send(tcp_port_exchange_socket, &port_msg, sizeof(s_msg_port), 0);
  400384:	4e8c      	ldr	r6, [pc, #560]	; (4005b8 <socket_event_handler_cb+0x26c>)
  400386:	2300      	movs	r3, #0
  400388:	2204      	movs	r2, #4
  40038a:	4669      	mov	r1, sp
  40038c:	f996 0000 	ldrsb.w	r0, [r6]
  400390:	4d8d      	ldr	r5, [pc, #564]	; (4005c8 <socket_event_handler_cb+0x27c>)
  400392:	47a8      	blx	r5
				
				// Send TCP settings port
				sprintf(port_msg.port, "%d", TCP_SETTINGS_PORT);
  400394:	f241 3287 	movw	r2, #4999	; 0x1387
  400398:	4641      	mov	r1, r8
  40039a:	4668      	mov	r0, sp
  40039c:	47b8      	blx	r7
				send(tcp_port_exchange_socket, &port_msg, sizeof(s_msg_port), 0);
  40039e:	2300      	movs	r3, #0
  4003a0:	2204      	movs	r2, #4
  4003a2:	4669      	mov	r1, sp
  4003a4:	f996 0000 	ldrsb.w	r0, [r6]
  4003a8:	47a8      	blx	r5
			
				// Send TCP settings port
				sprintf(port_msg.port, "%d", HTTP_VIDEO_PORT);
  4003aa:	f241 3285 	movw	r2, #4997	; 0x1385
  4003ae:	4641      	mov	r1, r8
  4003b0:	4668      	mov	r0, sp
  4003b2:	47b8      	blx	r7
				send(tcp_port_exchange_socket, &port_msg, sizeof(s_msg_port), 0);
  4003b4:	2300      	movs	r3, #0
  4003b6:	2204      	movs	r2, #4
  4003b8:	4669      	mov	r1, sp
  4003ba:	f996 0000 	ldrsb.w	r0, [r6]
  4003be:	47a8      	blx	r5
			
				// Recv. UDP status port
				recv(sock, TCPPortExchangeRxBuffer, sizeof(TCPPortExchangeRxBuffer), 0);
  4003c0:	2300      	movs	r3, #0
  4003c2:	2204      	movs	r2, #4
  4003c4:	4981      	ldr	r1, [pc, #516]	; (4005cc <socket_event_handler_cb+0x280>)
  4003c6:	4620      	mov	r0, r4
  4003c8:	4c81      	ldr	r4, [pc, #516]	; (4005d0 <socket_event_handler_cb+0x284>)
  4003ca:	47a0      	blx	r4
	{
		/* Socket connected */
		if(u8Msg == SOCKET_MSG_CONNECT)
		{
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
			if (pstrConnect && pstrConnect->s8Error >= 0) {
  4003cc:	e154      	b.n	400678 <socket_event_handler_cb+0x32c>
			
				// Recv. UDP status port
				recv(sock, TCPPortExchangeRxBuffer, sizeof(TCPPortExchangeRxBuffer), 0);
		
			} else {
				printf("tcp_port_exchange_socket: connect error!\r\n");
  4003ce:	4881      	ldr	r0, [pc, #516]	; (4005d4 <socket_event_handler_cb+0x288>)
  4003d0:	4b7b      	ldr	r3, [pc, #492]	; (4005c0 <socket_event_handler_cb+0x274>)
  4003d2:	4798      	blx	r3
				close(tcp_port_exchange_socket);
  4003d4:	4c78      	ldr	r4, [pc, #480]	; (4005b8 <socket_event_handler_cb+0x26c>)
  4003d6:	f994 0000 	ldrsb.w	r0, [r4]
  4003da:	4b7f      	ldr	r3, [pc, #508]	; (4005d8 <socket_event_handler_cb+0x28c>)
  4003dc:	4798      	blx	r3
				tcp_port_exchange_socket = -1;
  4003de:	23ff      	movs	r3, #255	; 0xff
  4003e0:	7023      	strb	r3, [r4, #0]
				m2m_wifi_disconnect();
  4003e2:	4b7e      	ldr	r3, [pc, #504]	; (4005dc <socket_event_handler_cb+0x290>)
  4003e4:	4798      	blx	r3
  4003e6:	e147      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
		}
		/* Message receive */
		else if(u8Msg == SOCKET_MSG_RECV)
  4003e8:	2906      	cmp	r1, #6
  4003ea:	f040 8145 	bne.w	400678 <socket_event_handler_cb+0x32c>
		{
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  4003ee:	b1d2      	cbz	r2, 400426 <socket_event_handler_cb+0xda>
  4003f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4003f4:	2b00      	cmp	r3, #0
  4003f6:	dd16      	ble.n	400426 <socket_event_handler_cb+0xda>
				printf("tcp_port_exchange_socket: recv success!\r\n");
  4003f8:	4879      	ldr	r0, [pc, #484]	; (4005e0 <socket_event_handler_cb+0x294>)
  4003fa:	4c71      	ldr	r4, [pc, #452]	; (4005c0 <socket_event_handler_cb+0x274>)
  4003fc:	47a0      	blx	r4
				char *ptr;
				host_udp_port = strtol(TCPPortExchangeRxBuffer,ptr,10);
  4003fe:	220a      	movs	r2, #10
  400400:	2100      	movs	r1, #0
  400402:	4872      	ldr	r0, [pc, #456]	; (4005cc <socket_event_handler_cb+0x280>)
  400404:	4b77      	ldr	r3, [pc, #476]	; (4005e4 <socket_event_handler_cb+0x298>)
  400406:	4798      	blx	r3
  400408:	4b77      	ldr	r3, [pc, #476]	; (4005e8 <socket_event_handler_cb+0x29c>)
  40040a:	8018      	strh	r0, [r3, #0]
				printf("Host port resolved to: (%d)\r\n",host_udp_port);
  40040c:	b281      	uxth	r1, r0
  40040e:	4877      	ldr	r0, [pc, #476]	; (4005ec <socket_event_handler_cb+0x2a0>)
  400410:	47a0      	blx	r4
				close(tcp_port_exchange_socket);
  400412:	4c69      	ldr	r4, [pc, #420]	; (4005b8 <socket_event_handler_cb+0x26c>)
  400414:	f994 0000 	ldrsb.w	r0, [r4]
  400418:	4b6f      	ldr	r3, [pc, #444]	; (4005d8 <socket_event_handler_cb+0x28c>)
  40041a:	4798      	blx	r3
				tcp_port_exchange_socket = -1;
  40041c:	23ff      	movs	r3, #255	; 0xff
  40041e:	7023      	strb	r3, [r4, #0]
				network_connected();
  400420:	4b73      	ldr	r3, [pc, #460]	; (4005f0 <socket_event_handler_cb+0x2a4>)
  400422:	4798      	blx	r3
		}
		/* Message receive */
		else if(u8Msg == SOCKET_MSG_RECV)
		{
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  400424:	e128      	b.n	400678 <socket_event_handler_cb+0x32c>
				printf("Host port resolved to: (%d)\r\n",host_udp_port);
				close(tcp_port_exchange_socket);
				tcp_port_exchange_socket = -1;
				network_connected();
			} else {
				printf("tcp_port_exchange_socket: recv error!\r\n");
  400426:	4873      	ldr	r0, [pc, #460]	; (4005f4 <socket_event_handler_cb+0x2a8>)
  400428:	4b65      	ldr	r3, [pc, #404]	; (4005c0 <socket_event_handler_cb+0x274>)
  40042a:	4798      	blx	r3
				close(tcp_port_exchange_socket);
  40042c:	4c62      	ldr	r4, [pc, #392]	; (4005b8 <socket_event_handler_cb+0x26c>)
  40042e:	f994 0000 	ldrsb.w	r0, [r4]
  400432:	4b69      	ldr	r3, [pc, #420]	; (4005d8 <socket_event_handler_cb+0x28c>)
  400434:	4798      	blx	r3
				tcp_port_exchange_socket = -1;
  400436:	23ff      	movs	r3, #255	; 0xff
  400438:	7023      	strb	r3, [r4, #0]
				m2m_wifi_disconnect();
  40043a:	4b68      	ldr	r3, [pc, #416]	; (4005dc <socket_event_handler_cb+0x290>)
  40043c:	4798      	blx	r3
  40043e:	e11b      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
		}
	}
	/** Listening for control commands */
	else if(sock == udp_command_socket)
  400440:	4b6d      	ldr	r3, [pc, #436]	; (4005f8 <socket_event_handler_cb+0x2ac>)
  400442:	f993 3000 	ldrsb.w	r3, [r3]
  400446:	4283      	cmp	r3, r0
  400448:	d12f      	bne.n	4004aa <socket_event_handler_cb+0x15e>
	{
		/** Socket bound */
		if(u8Msg == SOCKET_MSG_BIND)
  40044a:	2901      	cmp	r1, #1
  40044c:	d10b      	bne.n	400466 <socket_event_handler_cb+0x11a>
		{
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*)pvMsg;
			if(pstrBind->status == 0)
  40044e:	f992 3000 	ldrsb.w	r3, [r2]
  400452:	b923      	cbnz	r3, 40045e <socket_event_handler_cb+0x112>
			{
				// call Recv
				recvfrom(udp_command_socket, UDPCommandRxBuffer, sizeof(UDPCommandRxBuffer), 0);
  400454:	22ff      	movs	r2, #255	; 0xff
  400456:	4969      	ldr	r1, [pc, #420]	; (4005fc <socket_event_handler_cb+0x2b0>)
  400458:	4c69      	ldr	r4, [pc, #420]	; (400600 <socket_event_handler_cb+0x2b4>)
  40045a:	47a0      	blx	r4
  40045c:	e01c      	b.n	400498 <socket_event_handler_cb+0x14c>
			}
			else
			{
				printf("udp_command_socket: Bind Failed\n");
  40045e:	4869      	ldr	r0, [pc, #420]	; (400604 <socket_event_handler_cb+0x2b8>)
  400460:	4b57      	ldr	r3, [pc, #348]	; (4005c0 <socket_event_handler_cb+0x274>)
  400462:	4798      	blx	r3
  400464:	e018      	b.n	400498 <socket_event_handler_cb+0x14c>
			}
		}
		/** Command received */
		else if((u8Msg == SOCKET_MSG_RECV) || (u8Msg == SOCKET_MSG_RECVFROM))
  400466:	2906      	cmp	r1, #6
  400468:	d001      	beq.n	40046e <socket_event_handler_cb+0x122>
  40046a:	2909      	cmp	r1, #9
  40046c:	d114      	bne.n	400498 <socket_event_handler_cb+0x14c>
		{
			tstrSocketRecvMsg *pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
			if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
  40046e:	682b      	ldr	r3, [r5, #0]
  400470:	b193      	cbz	r3, 400498 <socket_event_handler_cb+0x14c>
  400472:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  400476:	2b00      	cmp	r3, #0
  400478:	dd0e      	ble.n	400498 <socket_event_handler_cb+0x14c>
			{
				printf("udp_command_socket: recvfrom success!\r\n");
  40047a:	4863      	ldr	r0, [pc, #396]	; (400608 <socket_event_handler_cb+0x2bc>)
  40047c:	4b50      	ldr	r3, [pc, #320]	; (4005c0 <socket_event_handler_cb+0x274>)
  40047e:	4798      	blx	r3
				
				if(pstrRecvMsg->s16BufferSize == UDP_COMMAND_BUFFER_SIZE)
  400480:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  400484:	2bff      	cmp	r3, #255	; 0xff
  400486:	d107      	bne.n	400498 <socket_event_handler_cb+0x14c>
				{
					printf("udp_command_socket: command received: %s\r\n",UDPCommandRxBuffer);
  400488:	4c5c      	ldr	r4, [pc, #368]	; (4005fc <socket_event_handler_cb+0x2b0>)
  40048a:	4621      	mov	r1, r4
  40048c:	485f      	ldr	r0, [pc, #380]	; (40060c <socket_event_handler_cb+0x2c0>)
  40048e:	4b4c      	ldr	r3, [pc, #304]	; (4005c0 <socket_event_handler_cb+0x274>)
  400490:	4798      	blx	r3
					//xQueueSendToFront(xControl_Msg_Queue_handle, UDPCommandRxBuffer, 0);
					network_message_parser(UDPCommandRxBuffer);
  400492:	4620      	mov	r0, r4
  400494:	4b5e      	ldr	r3, [pc, #376]	; (400610 <socket_event_handler_cb+0x2c4>)
  400496:	4798      	blx	r3
				}
			}
		}
		recvfrom(udp_command_socket, UDPCommandRxBuffer, sizeof(UDPCommandRxBuffer), 0);
  400498:	2300      	movs	r3, #0
  40049a:	22ff      	movs	r2, #255	; 0xff
  40049c:	4957      	ldr	r1, [pc, #348]	; (4005fc <socket_event_handler_cb+0x2b0>)
  40049e:	4856      	ldr	r0, [pc, #344]	; (4005f8 <socket_event_handler_cb+0x2ac>)
  4004a0:	f990 0000 	ldrsb.w	r0, [r0]
  4004a4:	4c56      	ldr	r4, [pc, #344]	; (400600 <socket_event_handler_cb+0x2b4>)
  4004a6:	47a0      	blx	r4
  4004a8:	e0e6      	b.n	400678 <socket_event_handler_cb+0x32c>
	}
	/** Server socket listening for connection request to transfer settings command */
	else if(sock == tcp_settings_listen_socket)
  4004aa:	4b5a      	ldr	r3, [pc, #360]	; (400614 <socket_event_handler_cb+0x2c8>)
  4004ac:	f993 3000 	ldrsb.w	r3, [r3]
  4004b0:	4283      	cmp	r3, r0
  4004b2:	d152      	bne.n	40055a <socket_event_handler_cb+0x20e>
	{
		/** Socket bound */
		if(u8Msg == SOCKET_MSG_BIND)
  4004b4:	2901      	cmp	r1, #1
  4004b6:	d111      	bne.n	4004dc <socket_event_handler_cb+0x190>
		{
			tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg*)pvMsg;
			if(pstrBind->status == 0)
  4004b8:	f992 3000 	ldrsb.w	r3, [r2]
  4004bc:	b91b      	cbnz	r3, 4004c6 <socket_event_handler_cb+0x17a>
			{
				listen(tcp_settings_listen_socket, 0);
  4004be:	2100      	movs	r1, #0
  4004c0:	4b55      	ldr	r3, [pc, #340]	; (400618 <socket_event_handler_cb+0x2cc>)
  4004c2:	4798      	blx	r3
  4004c4:	e0d8      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
			else
			{
				printf("tcp_settings_listen_socket: Bind Failed\n");
  4004c6:	4855      	ldr	r0, [pc, #340]	; (40061c <socket_event_handler_cb+0x2d0>)
  4004c8:	4b3d      	ldr	r3, [pc, #244]	; (4005c0 <socket_event_handler_cb+0x274>)
  4004ca:	4798      	blx	r3
				close(tcp_settings_listen_socket);
  4004cc:	4c51      	ldr	r4, [pc, #324]	; (400614 <socket_event_handler_cb+0x2c8>)
  4004ce:	f994 0000 	ldrsb.w	r0, [r4]
  4004d2:	4b41      	ldr	r3, [pc, #260]	; (4005d8 <socket_event_handler_cb+0x28c>)
  4004d4:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  4004d6:	23ff      	movs	r3, #255	; 0xff
  4004d8:	7023      	strb	r3, [r4, #0]
  4004da:	e0cd      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
		}
		/** Socket listening */
		else if(u8Msg == SOCKET_MSG_LISTEN)
  4004dc:	2902      	cmp	r1, #2
  4004de:	d119      	bne.n	400514 <socket_event_handler_cb+0x1c8>
		{
			tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg*)pvMsg;
			if (pstrListen && pstrListen->status == 0) {
  4004e0:	b16a      	cbz	r2, 4004fe <socket_event_handler_cb+0x1b2>
  4004e2:	f992 3000 	ldrsb.w	r3, [r2]
  4004e6:	b953      	cbnz	r3, 4004fe <socket_event_handler_cb+0x1b2>
				printf("tcp_settings_listen_socket: listen success!\r\n");
  4004e8:	484d      	ldr	r0, [pc, #308]	; (400620 <socket_event_handler_cb+0x2d4>)
  4004ea:	4b35      	ldr	r3, [pc, #212]	; (4005c0 <socket_event_handler_cb+0x274>)
  4004ec:	4798      	blx	r3
				accept(tcp_settings_listen_socket, NULL, NULL);
  4004ee:	2200      	movs	r2, #0
  4004f0:	4611      	mov	r1, r2
  4004f2:	4b48      	ldr	r3, [pc, #288]	; (400614 <socket_event_handler_cb+0x2c8>)
  4004f4:	f993 0000 	ldrsb.w	r0, [r3]
  4004f8:	4b4a      	ldr	r3, [pc, #296]	; (400624 <socket_event_handler_cb+0x2d8>)
  4004fa:	4798      	blx	r3
  4004fc:	e0bc      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
			else
			{
				close(tcp_settings_listen_socket);
  4004fe:	4b36      	ldr	r3, [pc, #216]	; (4005d8 <socket_event_handler_cb+0x28c>)
  400500:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  400502:	22ff      	movs	r2, #255	; 0xff
  400504:	4b43      	ldr	r3, [pc, #268]	; (400614 <socket_event_handler_cb+0x2c8>)
  400506:	701a      	strb	r2, [r3, #0]
				printf("tcp_settings_listen_socket: listen Failed. Restarting...\n");
  400508:	4847      	ldr	r0, [pc, #284]	; (400628 <socket_event_handler_cb+0x2dc>)
  40050a:	4b2d      	ldr	r3, [pc, #180]	; (4005c0 <socket_event_handler_cb+0x274>)
  40050c:	4798      	blx	r3
				network_listen_for_settings();
  40050e:	4b47      	ldr	r3, [pc, #284]	; (40062c <socket_event_handler_cb+0x2e0>)
  400510:	4798      	blx	r3
  400512:	e0b1      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
		}
		/** Accepting incoming connection */
		else if(u8Msg == SOCKET_MSG_ACCEPT)
  400514:	2904      	cmp	r1, #4
  400516:	f040 80af 	bne.w	400678 <socket_event_handler_cb+0x32c>
		{
			// Socket is accepted.
			tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
			if(pstrAccept)
  40051a:	b19a      	cbz	r2, 400544 <socket_event_handler_cb+0x1f8>
			{
				printf("tcp_settings_listen_socket: accept success!\r\n");
  40051c:	4844      	ldr	r0, [pc, #272]	; (400630 <socket_event_handler_cb+0x2e4>)
  40051e:	4b28      	ldr	r3, [pc, #160]	; (4005c0 <socket_event_handler_cb+0x274>)
  400520:	4798      	blx	r3
				accept(tcp_settings_listen_socket, NULL, NULL);
  400522:	2200      	movs	r2, #0
  400524:	4611      	mov	r1, r2
  400526:	4b3b      	ldr	r3, [pc, #236]	; (400614 <socket_event_handler_cb+0x2c8>)
  400528:	f993 0000 	ldrsb.w	r0, [r3]
  40052c:	4b3d      	ldr	r3, [pc, #244]	; (400624 <socket_event_handler_cb+0x2d8>)
  40052e:	4798      	blx	r3
				tcp_settings_data_socket = pstrAccept->sock;
  400530:	f995 0000 	ldrsb.w	r0, [r5]
  400534:	4b3f      	ldr	r3, [pc, #252]	; (400634 <socket_event_handler_cb+0x2e8>)
  400536:	7018      	strb	r0, [r3, #0]
				recv(tcp_settings_data_socket, TCPSettingsRxBuffer, sizeof(TCPSettingsRxBuffer), 0);
  400538:	2300      	movs	r3, #0
  40053a:	22ff      	movs	r2, #255	; 0xff
  40053c:	493e      	ldr	r1, [pc, #248]	; (400638 <socket_event_handler_cb+0x2ec>)
  40053e:	4c24      	ldr	r4, [pc, #144]	; (4005d0 <socket_event_handler_cb+0x284>)
  400540:	47a0      	blx	r4
  400542:	e099      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
			else
			{
				close(tcp_settings_listen_socket);
  400544:	4b24      	ldr	r3, [pc, #144]	; (4005d8 <socket_event_handler_cb+0x28c>)
  400546:	4798      	blx	r3
				tcp_settings_listen_socket = -1;
  400548:	22ff      	movs	r2, #255	; 0xff
  40054a:	4b32      	ldr	r3, [pc, #200]	; (400614 <socket_event_handler_cb+0x2c8>)
  40054c:	701a      	strb	r2, [r3, #0]
				printf("tcp_settings_listen_socket: Accept Failed\n");
  40054e:	483b      	ldr	r0, [pc, #236]	; (40063c <socket_event_handler_cb+0x2f0>)
  400550:	4b1b      	ldr	r3, [pc, #108]	; (4005c0 <socket_event_handler_cb+0x274>)
  400552:	4798      	blx	r3
				network_listen_for_settings();
  400554:	4b35      	ldr	r3, [pc, #212]	; (40062c <socket_event_handler_cb+0x2e0>)
  400556:	4798      	blx	r3
  400558:	e08e      	b.n	400678 <socket_event_handler_cb+0x32c>
			}
		}
	}
	/** Accepted connection for transfer of settings command */
	else if(sock == tcp_settings_data_socket)
  40055a:	4b36      	ldr	r3, [pc, #216]	; (400634 <socket_event_handler_cb+0x2e8>)
  40055c:	f993 3000 	ldrsb.w	r3, [r3]
  400560:	4283      	cmp	r3, r0
  400562:	d175      	bne.n	400650 <socket_event_handler_cb+0x304>
	{
		if(u8Msg == SOCKET_MSG_RECV)
  400564:	2906      	cmp	r1, #6
  400566:	f040 8087 	bne.w	400678 <socket_event_handler_cb+0x32c>
		{
			tstrSocketRecvMsg *pstrRecvMsg = (tstrSocketRecvMsg*)pvMsg;
			if((pstrRecvMsg->pu8Buffer != NULL) && (pstrRecvMsg->s16BufferSize > 0))
  40056a:	6813      	ldr	r3, [r2, #0]
  40056c:	2b00      	cmp	r3, #0
  40056e:	f000 8083 	beq.w	400678 <socket_event_handler_cb+0x32c>
  400572:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  400576:	2b00      	cmp	r3, #0
  400578:	dd7e      	ble.n	400678 <socket_event_handler_cb+0x32c>
			{			
				// Process the received message
				printf("tcp_settings_data_socket: settings received: %s\r\n",TCPSettingsRxBuffer);
  40057a:	4d2f      	ldr	r5, [pc, #188]	; (400638 <socket_event_handler_cb+0x2ec>)
  40057c:	4629      	mov	r1, r5
  40057e:	4830      	ldr	r0, [pc, #192]	; (400640 <socket_event_handler_cb+0x2f4>)
  400580:	4c0f      	ldr	r4, [pc, #60]	; (4005c0 <socket_event_handler_cb+0x274>)
  400582:	47a0      	blx	r4
				
				//TODO: set settings and parse return to determine success or failure
				// for now just return ACK
				s_msg_ack msg;
				strncpy(msg.ack,CMD_ACK,CMD_SPECIFIER_SIZE);
  400584:	4b2f      	ldr	r3, [pc, #188]	; (400644 <socket_event_handler_cb+0x2f8>)
  400586:	e893 0003 	ldmia.w	r3, {r0, r1}
  40058a:	9000      	str	r0, [sp, #0]
  40058c:	f8ad 1004 	strh.w	r1, [sp, #4]
				network_message_parser(TCPSettingsRxBuffer);
  400590:	4628      	mov	r0, r5
  400592:	4b1f      	ldr	r3, [pc, #124]	; (400610 <socket_event_handler_cb+0x2c4>)
  400594:	4798      	blx	r3
				printf("tcp_settings_data_socket: configuration successful. Sending ACK...\r\n");
  400596:	482c      	ldr	r0, [pc, #176]	; (400648 <socket_event_handler_cb+0x2fc>)
  400598:	47a0      	blx	r4
				send(tcp_settings_data_socket, &msg, sizeof(s_msg_ack), 0);
  40059a:	4c26      	ldr	r4, [pc, #152]	; (400634 <socket_event_handler_cb+0x2e8>)
  40059c:	2300      	movs	r3, #0
  40059e:	2206      	movs	r2, #6
  4005a0:	4669      	mov	r1, sp
  4005a2:	f994 0000 	ldrsb.w	r0, [r4]
  4005a6:	4d08      	ldr	r5, [pc, #32]	; (4005c8 <socket_event_handler_cb+0x27c>)
  4005a8:	47a8      	blx	r5
				
				// Close the accepted socket when finished.
				close(tcp_settings_data_socket);
  4005aa:	f994 0000 	ldrsb.w	r0, [r4]
  4005ae:	4b0a      	ldr	r3, [pc, #40]	; (4005d8 <socket_event_handler_cb+0x28c>)
  4005b0:	4798      	blx	r3
				tcp_settings_data_socket = -1;
  4005b2:	23ff      	movs	r3, #255	; 0xff
  4005b4:	7023      	strb	r3, [r4, #0]
  4005b6:	e05f      	b.n	400678 <socket_event_handler_cb+0x32c>
  4005b8:	2000000d 	.word	0x2000000d
  4005bc:	0040e8c0 	.word	0x0040e8c0
  4005c0:	00405e29 	.word	0x00405e29
  4005c4:	00406181 	.word	0x00406181
  4005c8:	00403375 	.word	0x00403375
  4005cc:	20000aec 	.word	0x20000aec
  4005d0:	004034cd 	.word	0x004034cd
  4005d4:	0040e8f4 	.word	0x0040e8f4
  4005d8:	00403571 	.word	0x00403571
  4005dc:	00401bd1 	.word	0x00401bd1
  4005e0:	0040e920 	.word	0x0040e920
  4005e4:	00407a5d 	.word	0x00407a5d
  4005e8:	2000ad40 	.word	0x2000ad40
  4005ec:	0040e94c 	.word	0x0040e94c
  4005f0:	0040032d 	.word	0x0040032d
  4005f4:	0040e96c 	.word	0x0040e96c
  4005f8:	2000000e 	.word	0x2000000e
  4005fc:	200009ec 	.word	0x200009ec
  400600:	004035f5 	.word	0x004035f5
  400604:	0040e994 	.word	0x0040e994
  400608:	0040e9b8 	.word	0x0040e9b8
  40060c:	0040e9e0 	.word	0x0040e9e0
  400610:	0040084d 	.word	0x0040084d
  400614:	2000000f 	.word	0x2000000f
  400618:	00403251 	.word	0x00403251
  40061c:	0040ea0c 	.word	0x0040ea0c
  400620:	0040ea38 	.word	0x0040ea38
  400624:	004032b1 	.word	0x004032b1
  400628:	0040ea68 	.word	0x0040ea68
  40062c:	00400239 	.word	0x00400239
  400630:	0040eaa4 	.word	0x0040eaa4
  400634:	20000010 	.word	0x20000010
  400638:	200008ec 	.word	0x200008ec
  40063c:	0040ead4 	.word	0x0040ead4
  400640:	0040eb00 	.word	0x0040eb00
  400644:	0040eb34 	.word	0x0040eb34
  400648:	0040eb3c 	.word	0x0040eb3c
  40064c:	0040e8f0 	.word	0x0040e8f0
			}
		}
	}
	else if(sock == udp_status_socket)
  400650:	4b0b      	ldr	r3, [pc, #44]	; (400680 <socket_event_handler_cb+0x334>)
  400652:	f993 3000 	ldrsb.w	r3, [r3]
  400656:	4283      	cmp	r3, r0
  400658:	d10e      	bne.n	400678 <socket_event_handler_cb+0x32c>
	{
		if(u8Msg == SOCKET_MSG_SENDTO)
  40065a:	2908      	cmp	r1, #8
  40065c:	d10c      	bne.n	400678 <socket_event_handler_cb+0x32c>
		{
			printf("udp_status_socket: Status sent!\r\n");
  40065e:	4809      	ldr	r0, [pc, #36]	; (400684 <socket_event_handler_cb+0x338>)
  400660:	4b09      	ldr	r3, [pc, #36]	; (400688 <socket_event_handler_cb+0x33c>)
  400662:	4798      	blx	r3
			if(udp_status_socket > 0) {
  400664:	4b06      	ldr	r3, [pc, #24]	; (400680 <socket_event_handler_cb+0x334>)
  400666:	f993 0000 	ldrsb.w	r0, [r3]
  40066a:	2800      	cmp	r0, #0
  40066c:	dd04      	ble.n	400678 <socket_event_handler_cb+0x32c>
				close(udp_status_socket);
  40066e:	4b07      	ldr	r3, [pc, #28]	; (40068c <socket_event_handler_cb+0x340>)
  400670:	4798      	blx	r3
				udp_status_socket = -1;
  400672:	22ff      	movs	r2, #255	; 0xff
  400674:	4b02      	ldr	r3, [pc, #8]	; (400680 <socket_event_handler_cb+0x334>)
  400676:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
  400678:	b002      	add	sp, #8
  40067a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40067e:	bf00      	nop
  400680:	2000000c 	.word	0x2000000c
  400684:	0040eb84 	.word	0x0040eb84
  400688:	00405e29 	.word	0x00405e29
  40068c:	00403571 	.word	0x00403571

00400690 <network_disconnected>:
	network_listen_for_commands();
	network_listen_for_settings();
}

void network_disconnected(void)
{
  400690:	b508      	push	{r3, lr}
	network_is_connected = -1;
  400692:	22ff      	movs	r2, #255	; 0xff
  400694:	4b15      	ldr	r3, [pc, #84]	; (4006ec <network_disconnected+0x5c>)
  400696:	701a      	strb	r2, [r3, #0]
	if(tcp_port_exchange_socket > 0)
  400698:	4b15      	ldr	r3, [pc, #84]	; (4006f0 <network_disconnected+0x60>)
  40069a:	f993 0000 	ldrsb.w	r0, [r3]
  40069e:	2800      	cmp	r0, #0
  4006a0:	dd04      	ble.n	4006ac <network_disconnected+0x1c>
	{
		close(tcp_port_exchange_socket);
  4006a2:	4b14      	ldr	r3, [pc, #80]	; (4006f4 <network_disconnected+0x64>)
  4006a4:	4798      	blx	r3
		tcp_port_exchange_socket = -1;
  4006a6:	22ff      	movs	r2, #255	; 0xff
  4006a8:	4b11      	ldr	r3, [pc, #68]	; (4006f0 <network_disconnected+0x60>)
  4006aa:	701a      	strb	r2, [r3, #0]
	}
	if(udp_command_socket > 0)
  4006ac:	4b12      	ldr	r3, [pc, #72]	; (4006f8 <network_disconnected+0x68>)
  4006ae:	f993 0000 	ldrsb.w	r0, [r3]
  4006b2:	2800      	cmp	r0, #0
  4006b4:	dd04      	ble.n	4006c0 <network_disconnected+0x30>
	{
		close(udp_command_socket);
  4006b6:	4b0f      	ldr	r3, [pc, #60]	; (4006f4 <network_disconnected+0x64>)
  4006b8:	4798      	blx	r3
		udp_command_socket = -1;		
  4006ba:	22ff      	movs	r2, #255	; 0xff
  4006bc:	4b0e      	ldr	r3, [pc, #56]	; (4006f8 <network_disconnected+0x68>)
  4006be:	701a      	strb	r2, [r3, #0]
	}
	if(tcp_settings_listen_socket > 0)
  4006c0:	4b0e      	ldr	r3, [pc, #56]	; (4006fc <network_disconnected+0x6c>)
  4006c2:	f993 0000 	ldrsb.w	r0, [r3]
  4006c6:	2800      	cmp	r0, #0
  4006c8:	dd04      	ble.n	4006d4 <network_disconnected+0x44>
	{
		close(tcp_settings_listen_socket);
  4006ca:	4b0a      	ldr	r3, [pc, #40]	; (4006f4 <network_disconnected+0x64>)
  4006cc:	4798      	blx	r3
		tcp_settings_listen_socket = -1;
  4006ce:	22ff      	movs	r2, #255	; 0xff
  4006d0:	4b0a      	ldr	r3, [pc, #40]	; (4006fc <network_disconnected+0x6c>)
  4006d2:	701a      	strb	r2, [r3, #0]
	}
	if(tcp_settings_data_socket > 0)
  4006d4:	4b0a      	ldr	r3, [pc, #40]	; (400700 <network_disconnected+0x70>)
  4006d6:	f993 0000 	ldrsb.w	r0, [r3]
  4006da:	2800      	cmp	r0, #0
  4006dc:	dd04      	ble.n	4006e8 <network_disconnected+0x58>
	{
		close(tcp_settings_data_socket);
  4006de:	4b05      	ldr	r3, [pc, #20]	; (4006f4 <network_disconnected+0x64>)
  4006e0:	4798      	blx	r3
		tcp_settings_data_socket = -1;
  4006e2:	22ff      	movs	r2, #255	; 0xff
  4006e4:	4b06      	ldr	r3, [pc, #24]	; (400700 <network_disconnected+0x70>)
  4006e6:	701a      	strb	r2, [r3, #0]
  4006e8:	bd08      	pop	{r3, pc}
  4006ea:	bf00      	nop
  4006ec:	2000ad30 	.word	0x2000ad30
  4006f0:	2000000d 	.word	0x2000000d
  4006f4:	00403571 	.word	0x00403571
  4006f8:	2000000e 	.word	0x2000000e
  4006fc:	2000000f 	.word	0x2000000f
  400700:	20000010 	.word	0x20000010

00400704 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  400704:	b530      	push	{r4, r5, lr}
  400706:	b083      	sub	sp, #12
  400708:	460c      	mov	r4, r1
	switch (u8MsgType) {
  40070a:	282c      	cmp	r0, #44	; 0x2c
  40070c:	d002      	beq.n	400714 <wifi_cb+0x10>
  40070e:	2832      	cmp	r0, #50	; 0x32
  400710:	d011      	beq.n	400736 <wifi_cb+0x32>
  400712:	e036      	b.n	400782 <wifi_cb+0x7e>
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  400714:	780b      	ldrb	r3, [r1, #0]
  400716:	2b01      	cmp	r3, #1
  400718:	d102      	bne.n	400720 <wifi_cb+0x1c>
				m2m_wifi_request_dhcp_client();
  40071a:	4b1b      	ldr	r3, [pc, #108]	; (400788 <wifi_cb+0x84>)
  40071c:	4798      	blx	r3
  40071e:	e030      	b.n	400782 <wifi_cb+0x7e>
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  400720:	2b00      	cmp	r3, #0
  400722:	d12e      	bne.n	400782 <wifi_cb+0x7e>
				WIFI_CONNECTION_STATE = 0;
  400724:	2200      	movs	r2, #0
  400726:	4b19      	ldr	r3, [pc, #100]	; (40078c <wifi_cb+0x88>)
  400728:	701a      	strb	r2, [r3, #0]
				network_disconnected();
  40072a:	4b19      	ldr	r3, [pc, #100]	; (400790 <wifi_cb+0x8c>)
  40072c:	4798      	blx	r3
				printf("Wi-Fi disconnected\r\n");
  40072e:	4819      	ldr	r0, [pc, #100]	; (400794 <wifi_cb+0x90>)
  400730:	4b19      	ldr	r3, [pc, #100]	; (400798 <wifi_cb+0x94>)
  400732:	4798      	blx	r3
  400734:	e025      	b.n	400782 <wifi_cb+0x7e>
			break;
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			WIFI_CONNECTION_STATE = 1;
  400736:	2201      	movs	r2, #1
  400738:	4b14      	ldr	r3, [pc, #80]	; (40078c <wifi_cb+0x88>)
  40073a:	701a      	strb	r2, [r3, #0]
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("Wi-Fi connected\r\n");
  40073c:	4817      	ldr	r0, [pc, #92]	; (40079c <wifi_cb+0x98>)
  40073e:	4d16      	ldr	r5, [pc, #88]	; (400798 <wifi_cb+0x94>)
  400740:	47a8      	blx	r5
			printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
  400742:	78a3      	ldrb	r3, [r4, #2]
  400744:	7862      	ldrb	r2, [r4, #1]
  400746:	7821      	ldrb	r1, [r4, #0]
  400748:	78e0      	ldrb	r0, [r4, #3]
  40074a:	9000      	str	r0, [sp, #0]
  40074c:	4814      	ldr	r0, [pc, #80]	; (4007a0 <wifi_cb+0x9c>)
  40074e:	47a8      	blx	r5
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			printf("Wi-Fi Group owner IP is %u.%u.%u.%u\r\n",
  400750:	79a3      	ldrb	r3, [r4, #6]
  400752:	7962      	ldrb	r2, [r4, #5]
  400754:	7921      	ldrb	r1, [r4, #4]
  400756:	79e0      	ldrb	r0, [r4, #7]
  400758:	9000      	str	r0, [sp, #0]
  40075a:	4812      	ldr	r0, [pc, #72]	; (4007a4 <wifi_cb+0xa0>)
  40075c:	47a8      	blx	r5
			pu8IPAddress[4], pu8IPAddress[5], pu8IPAddress[6], pu8IPAddress[7]);
			
			// Convert IP address from uint8 array to uint32
			peer_address = pu8IPAddress[4]<<24 | pu8IPAddress[5]<<16 | pu8IPAddress[6]<<8 | pu8IPAddress[7];
  40075e:	4d12      	ldr	r5, [pc, #72]	; (4007a8 <wifi_cb+0xa4>)
  400760:	7921      	ldrb	r1, [r4, #4]
  400762:	7962      	ldrb	r2, [r4, #5]
  400764:	0413      	lsls	r3, r2, #16
  400766:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  40076a:	79e3      	ldrb	r3, [r4, #7]
  40076c:	4313      	orrs	r3, r2
  40076e:	79a2      	ldrb	r2, [r4, #6]
  400770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400774:	602b      	str	r3, [r5, #0]
			delay_ms(100);	// Delay necessary to allow app to open socket
  400776:	480d      	ldr	r0, [pc, #52]	; (4007ac <wifi_cb+0xa8>)
  400778:	4b0d      	ldr	r3, [pc, #52]	; (4007b0 <wifi_cb+0xac>)
  40077a:	4798      	blx	r3
			network_establish_connection(peer_address);
  40077c:	6828      	ldr	r0, [r5, #0]
  40077e:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <wifi_cb+0xb0>)
  400780:	4798      	blx	r3
		default:
		{
			break;
		}
	}
}
  400782:	b003      	add	sp, #12
  400784:	bd30      	pop	{r4, r5, pc}
  400786:	bf00      	nop
  400788:	00401bf1 	.word	0x00401bf1
  40078c:	20000af0 	.word	0x20000af0
  400790:	00400691 	.word	0x00400691
  400794:	0040eba8 	.word	0x0040eba8
  400798:	00405e29 	.word	0x00405e29
  40079c:	0040ebc0 	.word	0x0040ebc0
  4007a0:	0040ebd4 	.word	0x0040ebd4
  4007a4:	0040ebf0 	.word	0x0040ebf0
  4007a8:	2000ad34 	.word	0x2000ad34
  4007ac:	000d1437 	.word	0x000d1437
  4007b0:	20000001 	.word	0x20000001
  4007b4:	00400129 	.word	0x00400129

004007b8 <wifi_init>:
/**
 * \Function to initialize the Wi-Fi module. 
 * \ Sets the status callback and device name
 */
void wifi_init(void)
{
  4007b8:	b500      	push	{lr}
  4007ba:	b087      	sub	sp, #28
		network_is_connected = -1;
  4007bc:	22ff      	movs	r2, #255	; 0xff
  4007be:	4b0f      	ldr	r3, [pc, #60]	; (4007fc <wifi_init+0x44>)
  4007c0:	701a      	strb	r2, [r3, #0]
		//network_test = -1;
		tstrWifiInitParam param;
		int8_t ret;

		/* Initialize Wi-Fi parameters structure. */
		memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4007c2:	2300      	movs	r3, #0
  4007c4:	9301      	str	r3, [sp, #4]
  4007c6:	9302      	str	r3, [sp, #8]
  4007c8:	9303      	str	r3, [sp, #12]
  4007ca:	9304      	str	r3, [sp, #16]
  4007cc:	9305      	str	r3, [sp, #20]

		/* Initialize Wi-Fi driver with data and status callbacks. */
		param.pfAppWifiCb = wifi_cb;
  4007ce:	4b0c      	ldr	r3, [pc, #48]	; (400800 <wifi_init+0x48>)
  4007d0:	9300      	str	r3, [sp, #0]
		ret = m2m_wifi_init(&param);
  4007d2:	4668      	mov	r0, sp
  4007d4:	4b0b      	ldr	r3, [pc, #44]	; (400804 <wifi_init+0x4c>)
  4007d6:	4798      	blx	r3
		if (M2M_SUCCESS != ret) {
  4007d8:	b120      	cbz	r0, 4007e4 <wifi_init+0x2c>
  4007da:	4601      	mov	r1, r0
			printf("WiFi_P2P: m2m_wifi_init call error!(%d)\r\n", ret);
  4007dc:	480a      	ldr	r0, [pc, #40]	; (400808 <wifi_init+0x50>)
  4007de:	4b0b      	ldr	r3, [pc, #44]	; (40080c <wifi_init+0x54>)
  4007e0:	4798      	blx	r3
  4007e2:	e7fe      	b.n	4007e2 <wifi_init+0x2a>
			while (1) {
			}
		}

		/* Set device name to be shown in peer device. */
		ret = m2m_wifi_set_device_name((uint8_t *)MAIN_WLAN_DEVICE_NAME, strlen(MAIN_WLAN_DEVICE_NAME));
  4007e4:	2115      	movs	r1, #21
  4007e6:	480a      	ldr	r0, [pc, #40]	; (400810 <wifi_init+0x58>)
  4007e8:	4b0a      	ldr	r3, [pc, #40]	; (400814 <wifi_init+0x5c>)
  4007ea:	4798      	blx	r3
		if (M2M_SUCCESS != ret) {
  4007ec:	b118      	cbz	r0, 4007f6 <wifi_init+0x3e>
			printf("WiFi_P2P: m2m_wifi_set_device_name call error!\r\n");
  4007ee:	480a      	ldr	r0, [pc, #40]	; (400818 <wifi_init+0x60>)
  4007f0:	4b06      	ldr	r3, [pc, #24]	; (40080c <wifi_init+0x54>)
  4007f2:	4798      	blx	r3
  4007f4:	e7fe      	b.n	4007f4 <wifi_init+0x3c>
			while (1) {
			}
		}
}
  4007f6:	b007      	add	sp, #28
  4007f8:	f85d fb04 	ldr.w	pc, [sp], #4
  4007fc:	2000ad30 	.word	0x2000ad30
  400800:	00400705 	.word	0x00400705
  400804:	00401ac9 	.word	0x00401ac9
  400808:	0040ec18 	.word	0x0040ec18
  40080c:	00405e29 	.word	0x00405e29
  400810:	0040ec44 	.word	0x0040ec44
  400814:	00401c59 	.word	0x00401c59
  400818:	0040ec5c 	.word	0x0040ec5c

0040081c <wifi_p2p_start>:

/**
 * \Function to start the Wi-Fi module in P2P mode.
 */
void wifi_p2p_start(void)
{
  40081c:	b508      	push	{r3, lr}
		int8_t ret;
		
		/* Bring up P2P mode with channel number. */
		ret = m2m_wifi_p2p(M2M_WIFI_CH_6);
  40081e:	2005      	movs	r0, #5
  400820:	4b05      	ldr	r3, [pc, #20]	; (400838 <wifi_p2p_start+0x1c>)
  400822:	4798      	blx	r3
		if (M2M_SUCCESS != ret) {
  400824:	b110      	cbz	r0, 40082c <wifi_p2p_start+0x10>
			printf("WiFi_P2P: m2m_wifi_p2p call error!\r\n");
  400826:	4805      	ldr	r0, [pc, #20]	; (40083c <wifi_p2p_start+0x20>)
  400828:	4b05      	ldr	r3, [pc, #20]	; (400840 <wifi_p2p_start+0x24>)
  40082a:	4798      	blx	r3
		}

		printf("P2P mode started. %s is awaiting connection.\r\n", (char *)MAIN_WLAN_DEVICE_NAME);
  40082c:	4905      	ldr	r1, [pc, #20]	; (400844 <wifi_p2p_start+0x28>)
  40082e:	4806      	ldr	r0, [pc, #24]	; (400848 <wifi_p2p_start+0x2c>)
  400830:	4b03      	ldr	r3, [pc, #12]	; (400840 <wifi_p2p_start+0x24>)
  400832:	4798      	blx	r3
  400834:	bd08      	pop	{r3, pc}
  400836:	bf00      	nop
  400838:	00401bf5 	.word	0x00401bf5
  40083c:	0040ec90 	.word	0x0040ec90
  400840:	00405e29 	.word	0x00405e29
  400844:	0040ec44 	.word	0x0040ec44
  400848:	0040ecb8 	.word	0x0040ecb8

0040084c <network_message_parser>:
#include "queue.h"
#include "freertos_tasks.h"

/** Event handler for network messages */
void network_message_parser(char *msg)
{
  40084c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400850:	b0c3      	sub	sp, #268	; 0x10c
	char cmd[PACKET_SIZE];
	memcpy( cmd, msg, PACKET_SIZE );
  400852:	22ff      	movs	r2, #255	; 0xff
  400854:	4601      	mov	r1, r0
  400856:	a802      	add	r0, sp, #8
  400858:	4b71      	ldr	r3, [pc, #452]	; (400a20 <network_message_parser+0x1d4>)
  40085a:	4798      	blx	r3
	
	/** Control message received */
	if(strstr(cmd, CMD_CONTROL) != NULL)
  40085c:	4971      	ldr	r1, [pc, #452]	; (400a24 <network_message_parser+0x1d8>)
  40085e:	a802      	add	r0, sp, #8
  400860:	4b71      	ldr	r3, [pc, #452]	; (400a28 <network_message_parser+0x1dc>)
  400862:	4798      	blx	r3
  400864:	2800      	cmp	r0, #0
  400866:	f000 8088 	beq.w	40097a <network_message_parser+0x12e>
	{
		char *token;
		
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
  40086a:	4970      	ldr	r1, [pc, #448]	; (400a2c <network_message_parser+0x1e0>)
  40086c:	a802      	add	r0, sp, #8
  40086e:	4b70      	ldr	r3, [pc, #448]	; (400a30 <network_message_parser+0x1e4>)
  400870:	4798      	blx	r3
		
		int8_t coords[2];
		portBASE_TYPE xStatus;
		volatile int8_t iValidCount = 0;
  400872:	2300      	movs	r3, #0
  400874:	f88d 3003 	strb.w	r3, [sp, #3]
		
		/* walk through other tokens */
		while(token != NULL)
  400878:	4607      	mov	r7, r0
  40087a:	2800      	cmp	r0, #0
  40087c:	f000 80cc 	beq.w	400a18 <network_message_parser+0x1cc>
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  400880:	4c6c      	ldr	r4, [pc, #432]	; (400a34 <network_message_parser+0x1e8>)
				}
				
				/* Write to queue */
				if (iValidCount == 2)
				{
					xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, coords, 0);
  400882:	4e6d      	ldr	r6, [pc, #436]	; (400a38 <network_message_parser+0x1ec>)
  400884:	461d      	mov	r5, r3
		
		/* walk through other tokens */
		while(token != NULL)
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  400886:	213a      	movs	r1, #58	; 0x3a
  400888:	4638      	mov	r0, r7
  40088a:	47a0      	blx	r4
			if(value)
  40088c:	f110 0801 	adds.w	r8, r0, #1
  400890:	d06b      	beq.n	40096a <network_message_parser+0x11e>
			{				
				/** X coordinate */
				if(strstr(token, TAG_CONTROL_STEERING_X) != NULL)
  400892:	2158      	movs	r1, #88	; 0x58
  400894:	4638      	mov	r0, r7
  400896:	47a0      	blx	r4
  400898:	b1b0      	cbz	r0, 4008c8 <network_message_parser+0x7c>
				{
					float x_coord = strtof(value,NULL);
  40089a:	4629      	mov	r1, r5
  40089c:	4640      	mov	r0, r8
  40089e:	4b67      	ldr	r3, [pc, #412]	; (400a3c <network_message_parser+0x1f0>)
  4008a0:	4798      	blx	r3
  4008a2:	4681      	mov	r9, r0
					printf("X: %s (%d)\r\n",value,(int)x_coord);
  4008a4:	4f66      	ldr	r7, [pc, #408]	; (400a40 <network_message_parser+0x1f4>)
  4008a6:	47b8      	blx	r7
  4008a8:	4602      	mov	r2, r0
  4008aa:	4641      	mov	r1, r8
  4008ac:	4865      	ldr	r0, [pc, #404]	; (400a44 <network_message_parser+0x1f8>)
  4008ae:	4b66      	ldr	r3, [pc, #408]	; (400a48 <network_message_parser+0x1fc>)
  4008b0:	4798      	blx	r3
					int8_t iX_coord = (int8_t)x_coord;
					coords[0] = iX_coord;
  4008b2:	4648      	mov	r0, r9
  4008b4:	47b8      	blx	r7
  4008b6:	f88d 0004 	strb.w	r0, [sp, #4]
					iValidCount++;
  4008ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008be:	3301      	adds	r3, #1
  4008c0:	b25b      	sxtb	r3, r3
  4008c2:	f88d 3003 	strb.w	r3, [sp, #3]
  4008c6:	e03b      	b.n	400940 <network_message_parser+0xf4>
				}
				/** Y coordinate */
				else if(strstr(token, TAG_CONTROL_STEERING_Y) != NULL)
  4008c8:	2159      	movs	r1, #89	; 0x59
  4008ca:	4638      	mov	r0, r7
  4008cc:	47a0      	blx	r4
  4008ce:	b1b0      	cbz	r0, 4008fe <network_message_parser+0xb2>
				{
					float y_coord = strtof(value,NULL);
  4008d0:	4629      	mov	r1, r5
  4008d2:	4640      	mov	r0, r8
  4008d4:	4b59      	ldr	r3, [pc, #356]	; (400a3c <network_message_parser+0x1f0>)
  4008d6:	4798      	blx	r3
  4008d8:	4681      	mov	r9, r0
					printf("Y: %s (%d)\r\n",value,(int)y_coord);
  4008da:	4f59      	ldr	r7, [pc, #356]	; (400a40 <network_message_parser+0x1f4>)
  4008dc:	47b8      	blx	r7
  4008de:	4602      	mov	r2, r0
  4008e0:	4641      	mov	r1, r8
  4008e2:	485a      	ldr	r0, [pc, #360]	; (400a4c <network_message_parser+0x200>)
  4008e4:	4b58      	ldr	r3, [pc, #352]	; (400a48 <network_message_parser+0x1fc>)
  4008e6:	4798      	blx	r3
					int8_t iY_coord = (int8_t)y_coord;
					coords[1] = iY_coord;
  4008e8:	4648      	mov	r0, r9
  4008ea:	47b8      	blx	r7
  4008ec:	f88d 0005 	strb.w	r0, [sp, #5]
					iValidCount++;
  4008f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008f4:	3301      	adds	r3, #1
  4008f6:	b25b      	sxtb	r3, r3
  4008f8:	f88d 3003 	strb.w	r3, [sp, #3]
  4008fc:	e020      	b.n	400940 <network_message_parser+0xf4>
				}
				/** Power */
				else if(strstr(token, TAG_CONTROL_STEERING_POWER) != NULL)
  4008fe:	4954      	ldr	r1, [pc, #336]	; (400a50 <network_message_parser+0x204>)
  400900:	4638      	mov	r0, r7
  400902:	4b49      	ldr	r3, [pc, #292]	; (400a28 <network_message_parser+0x1dc>)
  400904:	4798      	blx	r3
  400906:	b158      	cbz	r0, 400920 <network_message_parser+0xd4>
				{
					float power = strtof(value,NULL);
  400908:	4629      	mov	r1, r5
  40090a:	4640      	mov	r0, r8
  40090c:	4b4b      	ldr	r3, [pc, #300]	; (400a3c <network_message_parser+0x1f0>)
  40090e:	4798      	blx	r3
					printf("Pwr: %s (%d)\r\n",value,(int)power);
  400910:	4b4b      	ldr	r3, [pc, #300]	; (400a40 <network_message_parser+0x1f4>)
  400912:	4798      	blx	r3
  400914:	4602      	mov	r2, r0
  400916:	4641      	mov	r1, r8
  400918:	484e      	ldr	r0, [pc, #312]	; (400a54 <network_message_parser+0x208>)
  40091a:	4b4b      	ldr	r3, [pc, #300]	; (400a48 <network_message_parser+0x1fc>)
  40091c:	4798      	blx	r3
  40091e:	e00f      	b.n	400940 <network_message_parser+0xf4>
				}
				/** Angle */
				else if(strstr(token, TAG_CONTROL_STEERING_ANGLE) != NULL)
  400920:	494d      	ldr	r1, [pc, #308]	; (400a58 <network_message_parser+0x20c>)
  400922:	4638      	mov	r0, r7
  400924:	4b40      	ldr	r3, [pc, #256]	; (400a28 <network_message_parser+0x1dc>)
  400926:	4798      	blx	r3
  400928:	b150      	cbz	r0, 400940 <network_message_parser+0xf4>
				{
					float angle = strtof(value,NULL);
  40092a:	4629      	mov	r1, r5
  40092c:	4640      	mov	r0, r8
  40092e:	4b43      	ldr	r3, [pc, #268]	; (400a3c <network_message_parser+0x1f0>)
  400930:	4798      	blx	r3
					printf("Ang: %s (%d)\r\n",value,(int)angle);
  400932:	4b43      	ldr	r3, [pc, #268]	; (400a40 <network_message_parser+0x1f4>)
  400934:	4798      	blx	r3
  400936:	4602      	mov	r2, r0
  400938:	4641      	mov	r1, r8
  40093a:	4848      	ldr	r0, [pc, #288]	; (400a5c <network_message_parser+0x210>)
  40093c:	4b42      	ldr	r3, [pc, #264]	; (400a48 <network_message_parser+0x1fc>)
  40093e:	4798      	blx	r3
				}
				
				/* Write to queue */
				if (iValidCount == 2)
  400940:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400944:	b25b      	sxtb	r3, r3
  400946:	2b02      	cmp	r3, #2
  400948:	d10f      	bne.n	40096a <network_message_parser+0x11e>
				{
					xStatus = xQueueSendToBack(xControl_Msg_Queue_handle, coords, 0);
  40094a:	462b      	mov	r3, r5
  40094c:	462a      	mov	r2, r5
  40094e:	a901      	add	r1, sp, #4
  400950:	6830      	ldr	r0, [r6, #0]
  400952:	4f43      	ldr	r7, [pc, #268]	; (400a60 <network_message_parser+0x214>)
  400954:	47b8      	blx	r7
					if ((xStatus == pdPASS))
  400956:	2801      	cmp	r0, #1
  400958:	d103      	bne.n	400962 <network_message_parser+0x116>
					{
						printf("Queue write OK\r\n");
  40095a:	4842      	ldr	r0, [pc, #264]	; (400a64 <network_message_parser+0x218>)
  40095c:	4b3a      	ldr	r3, [pc, #232]	; (400a48 <network_message_parser+0x1fc>)
  40095e:	4798      	blx	r3
  400960:	e003      	b.n	40096a <network_message_parser+0x11e>
					}
					else if((xStatus == errQUEUE_FULL))
  400962:	b910      	cbnz	r0, 40096a <network_message_parser+0x11e>
					{
						printf("FUCK\r\n");
  400964:	4840      	ldr	r0, [pc, #256]	; (400a68 <network_message_parser+0x21c>)
  400966:	4b38      	ldr	r3, [pc, #224]	; (400a48 <network_message_parser+0x1fc>)
  400968:	4798      	blx	r3
					}
				}
			}	
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
  40096a:	4930      	ldr	r1, [pc, #192]	; (400a2c <network_message_parser+0x1e0>)
  40096c:	4628      	mov	r0, r5
  40096e:	4b30      	ldr	r3, [pc, #192]	; (400a30 <network_message_parser+0x1e4>)
  400970:	4798      	blx	r3
		int8_t coords[2];
		portBASE_TYPE xStatus;
		volatile int8_t iValidCount = 0;
		
		/* walk through other tokens */
		while(token != NULL)
  400972:	4607      	mov	r7, r0
  400974:	2800      	cmp	r0, #0
  400976:	d186      	bne.n	400886 <network_message_parser+0x3a>
  400978:	e04e      	b.n	400a18 <network_message_parser+0x1cc>
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
		}
	}
	/** Settings message received*/
	else if(strstr(cmd, CMD_SETTINGS) != NULL)
  40097a:	493c      	ldr	r1, [pc, #240]	; (400a6c <network_message_parser+0x220>)
  40097c:	a802      	add	r0, sp, #8
  40097e:	4b2a      	ldr	r3, [pc, #168]	; (400a28 <network_message_parser+0x1dc>)
  400980:	4798      	blx	r3
  400982:	2800      	cmp	r0, #0
  400984:	d048      	beq.n	400a18 <network_message_parser+0x1cc>
	{
		char *token;
		
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
  400986:	4929      	ldr	r1, [pc, #164]	; (400a2c <network_message_parser+0x1e0>)
  400988:	a802      	add	r0, sp, #8
  40098a:	4b29      	ldr	r3, [pc, #164]	; (400a30 <network_message_parser+0x1e4>)
  40098c:	4798      	blx	r3
		
		/* walk through other tokens */
		while(token != NULL)
  40098e:	4604      	mov	r4, r0
  400990:	2800      	cmp	r0, #0
  400992:	d041      	beq.n	400a18 <network_message_parser+0x1cc>
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  400994:	4f27      	ldr	r7, [pc, #156]	; (400a34 <network_message_parser+0x1e8>)
			if(value)
			{
				/** Robot name setting */
				if(strstr(token, TAG_SETTINGS_NAME) != NULL)
  400996:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 400a90 <network_message_parser+0x244>
  40099a:	4e23      	ldr	r6, [pc, #140]	; (400a28 <network_message_parser+0x1dc>)
		
		/* walk through other tokens */
		while(token != NULL)
		{
			// Find tag-value separator and extract value
			char* value = strchr(token,DATA_TAG_SPACING[0])+1;
  40099c:	213a      	movs	r1, #58	; 0x3a
  40099e:	4620      	mov	r0, r4
  4009a0:	47b8      	blx	r7
			if(value)
  4009a2:	1c45      	adds	r5, r0, #1
  4009a4:	d031      	beq.n	400a0a <network_message_parser+0x1be>
			{
				/** Robot name setting */
				if(strstr(token, TAG_SETTINGS_NAME) != NULL)
  4009a6:	4641      	mov	r1, r8
  4009a8:	4620      	mov	r0, r4
  4009aa:	47b0      	blx	r6
  4009ac:	b120      	cbz	r0, 4009b8 <network_message_parser+0x16c>
				{
					char* name = value;
					printf("Name: %s\r\n",name);
  4009ae:	4629      	mov	r1, r5
  4009b0:	482f      	ldr	r0, [pc, #188]	; (400a70 <network_message_parser+0x224>)
  4009b2:	4b25      	ldr	r3, [pc, #148]	; (400a48 <network_message_parser+0x1fc>)
  4009b4:	4798      	blx	r3
  4009b6:	e028      	b.n	400a0a <network_message_parser+0x1be>
				}
				/** Assisted Driving Mode setting */
				else if(strstr(token, TAG_SETTINGS_ASSISTED_DRIVE_MODE) != NULL)
  4009b8:	492e      	ldr	r1, [pc, #184]	; (400a74 <network_message_parser+0x228>)
  4009ba:	4620      	mov	r0, r4
  4009bc:	47b0      	blx	r6
  4009be:	b148      	cbz	r0, 4009d4 <network_message_parser+0x188>
				{
					char* ptr;
					uint8_t assisted_drive_mode = strtol(value,ptr,10);
  4009c0:	220a      	movs	r2, #10
  4009c2:	2100      	movs	r1, #0
  4009c4:	4628      	mov	r0, r5
  4009c6:	4b2c      	ldr	r3, [pc, #176]	; (400a78 <network_message_parser+0x22c>)
  4009c8:	4798      	blx	r3
					printf("Assisted Drive Mode: %d\r\n",assisted_drive_mode);
  4009ca:	b2c1      	uxtb	r1, r0
  4009cc:	482b      	ldr	r0, [pc, #172]	; (400a7c <network_message_parser+0x230>)
  4009ce:	4b1e      	ldr	r3, [pc, #120]	; (400a48 <network_message_parser+0x1fc>)
  4009d0:	4798      	blx	r3
  4009d2:	e01a      	b.n	400a0a <network_message_parser+0x1be>
				}
				/** Power Save Mode setting */
				else if(strstr(token, TAG_SETTINGS_POWER_SAVE_MODE) != NULL)
  4009d4:	492a      	ldr	r1, [pc, #168]	; (400a80 <network_message_parser+0x234>)
  4009d6:	4620      	mov	r0, r4
  4009d8:	47b0      	blx	r6
  4009da:	b148      	cbz	r0, 4009f0 <network_message_parser+0x1a4>
				{
					char* ptr;
					uint8_t power_save_mode = strtol(value,ptr,10);
  4009dc:	220a      	movs	r2, #10
  4009de:	2100      	movs	r1, #0
  4009e0:	4628      	mov	r0, r5
  4009e2:	4b25      	ldr	r3, [pc, #148]	; (400a78 <network_message_parser+0x22c>)
  4009e4:	4798      	blx	r3
					printf("Power Save Mode: %d\r\n",power_save_mode);
  4009e6:	b2c1      	uxtb	r1, r0
  4009e8:	4826      	ldr	r0, [pc, #152]	; (400a84 <network_message_parser+0x238>)
  4009ea:	4b17      	ldr	r3, [pc, #92]	; (400a48 <network_message_parser+0x1fc>)
  4009ec:	4798      	blx	r3
  4009ee:	e00c      	b.n	400a0a <network_message_parser+0x1be>
				}
				/** Video Quality setting*/
				else if(strstr(token, TAG_SETTINGS_VIDEO_QUALITY) != NULL)
  4009f0:	4925      	ldr	r1, [pc, #148]	; (400a88 <network_message_parser+0x23c>)
  4009f2:	4620      	mov	r0, r4
  4009f4:	47b0      	blx	r6
  4009f6:	b140      	cbz	r0, 400a0a <network_message_parser+0x1be>
				{
					char* ptr;
					uint8_t video_quality = strtol(value,ptr,10);
  4009f8:	220a      	movs	r2, #10
  4009fa:	2100      	movs	r1, #0
  4009fc:	4628      	mov	r0, r5
  4009fe:	4b1e      	ldr	r3, [pc, #120]	; (400a78 <network_message_parser+0x22c>)
  400a00:	4798      	blx	r3
					printf("Video Quality: %d\r\n",video_quality);
  400a02:	b2c1      	uxtb	r1, r0
  400a04:	4821      	ldr	r0, [pc, #132]	; (400a8c <network_message_parser+0x240>)
  400a06:	4b10      	ldr	r3, [pc, #64]	; (400a48 <network_message_parser+0x1fc>)
  400a08:	4798      	blx	r3
				}
			}
			
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
  400a0a:	4908      	ldr	r1, [pc, #32]	; (400a2c <network_message_parser+0x1e0>)
  400a0c:	2000      	movs	r0, #0
  400a0e:	4b08      	ldr	r3, [pc, #32]	; (400a30 <network_message_parser+0x1e4>)
  400a10:	4798      	blx	r3
		
		/* get the first token */
		token = strtok(cmd, TAG_SEPARATOR);
		
		/* walk through other tokens */
		while(token != NULL)
  400a12:	4604      	mov	r4, r0
  400a14:	2800      	cmp	r0, #0
  400a16:	d1c1      	bne.n	40099c <network_message_parser+0x150>
			
			// Read next token
			token = strtok(NULL, TAG_SEPARATOR);
		}
	}
}
  400a18:	b043      	add	sp, #268	; 0x10c
  400a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400a1e:	bf00      	nop
  400a20:	00405e51 	.word	0x00405e51
  400a24:	0040ece8 	.word	0x0040ece8
  400a28:	0040675d 	.word	0x0040675d
  400a2c:	0040ecf0 	.word	0x0040ecf0
  400a30:	004078c1 	.word	0x004078c1
  400a34:	004061cd 	.word	0x004061cd
  400a38:	2000ad3c 	.word	0x2000ad3c
  400a3c:	0040788d 	.word	0x0040788d
  400a40:	00405d8d 	.word	0x00405d8d
  400a44:	0040ecf4 	.word	0x0040ecf4
  400a48:	00405e29 	.word	0x00405e29
  400a4c:	0040ed04 	.word	0x0040ed04
  400a50:	0040ed14 	.word	0x0040ed14
  400a54:	0040ed18 	.word	0x0040ed18
  400a58:	0040ed28 	.word	0x0040ed28
  400a5c:	0040ed2c 	.word	0x0040ed2c
  400a60:	00404981 	.word	0x00404981
  400a64:	0040ed3c 	.word	0x0040ed3c
  400a68:	0040ed50 	.word	0x0040ed50
  400a6c:	0040ed58 	.word	0x0040ed58
  400a70:	0040ed68 	.word	0x0040ed68
  400a74:	0040ed74 	.word	0x0040ed74
  400a78:	00407a5d 	.word	0x00407a5d
  400a7c:	0040ed80 	.word	0x0040ed80
  400a80:	0040ed9c 	.word	0x0040ed9c
  400a84:	0040eda8 	.word	0x0040eda8
  400a88:	0040edc0 	.word	0x0040edc0
  400a8c:	0040edd0 	.word	0x0040edd0
  400a90:	0040ed60 	.word	0x0040ed60

00400a94 <network_generate_status_packet>:
									char* name,
									uint8_t battery,
									int8_t camera,
									uint16_t space,
									uint16_t remaining_space)
{
  400a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a98:	b083      	sub	sp, #12
  400a9a:	af00      	add	r7, sp, #0
  400a9c:	4605      	mov	r5, r0
  400a9e:	460c      	mov	r4, r1
  400aa0:	4690      	mov	r8, r2
  400aa2:	469b      	mov	fp, r3
  400aa4:	f8b7 9030 	ldrh.w	r9, [r7, #48]	; 0x30
  400aa8:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
	/** Multiple use tag sizes */
	uint8_t data_spacing_size = sizeof(DATA_TAG_SPACING) -1;	//ignore NUL-terminator
	uint8_t tag_separator_size = sizeof(TAG_SEPARATOR) -1;		//ignore NUL-terminator
		
	/** Initialize packet to zero */
	memset(packet,0,PACKET_SIZE);
  400aaa:	22ff      	movs	r2, #255	; 0xff
  400aac:	2100      	movs	r1, #0
  400aae:	4b80      	ldr	r3, [pc, #512]	; (400cb0 <network_generate_status_packet+0x21c>)
  400ab0:	4798      	blx	r3
		
	/** Cmd specifier */
	memcpy(packet,CMD_STATUS,CMD_SPECIFIER_SIZE);
  400ab2:	4b80      	ldr	r3, [pc, #512]	; (400cb4 <network_generate_status_packet+0x220>)
  400ab4:	6818      	ldr	r0, [r3, #0]
  400ab6:	6028      	str	r0, [r5, #0]
  400ab8:	889b      	ldrh	r3, [r3, #4]
  400aba:	80ab      	strh	r3, [r5, #4]
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
  400abc:	233b      	movs	r3, #59	; 0x3b
  400abe:	71ab      	strb	r3, [r5, #6]
	index = index + tag_separator_size;			
		
	/** Name */
	if(name != NULL)
  400ac0:	b16c      	cbz	r4, 400ade <network_generate_status_packet+0x4a>
	{
		if(sizeof(name) <= 30)
		{
			uint8_t tag_size = sizeof(TAG_STATUS_NAME)-1;	//ignore NUL-terminator	
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_NAME,tag_size);
  400ac2:	4b7d      	ldr	r3, [pc, #500]	; (400cb8 <network_generate_status_packet+0x224>)
  400ac4:	6818      	ldr	r0, [r3, #0]
  400ac6:	f8c5 0007 	str.w	r0, [r5, #7]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  400aca:	233a      	movs	r3, #58	; 0x3a
  400acc:	72eb      	strb	r3, [r5, #11]
			index = index + data_spacing_size;
				
			// Data
			uint8_t data_size = sizeof(name)-1;				//ignore NUL-terminator
			memcpy(packet+index,name,data_size);
  400ace:	8822      	ldrh	r2, [r4, #0]
  400ad0:	78a3      	ldrb	r3, [r4, #2]
  400ad2:	81aa      	strh	r2, [r5, #12]
  400ad4:	73ab      	strb	r3, [r5, #14]
			index = index + data_size;
				
			// Tag separator
			packet[index] = TAG_SEPARATOR[0];
  400ad6:	233b      	movs	r3, #59	; 0x3b
  400ad8:	73eb      	strb	r3, [r5, #15]
			index = index + tag_separator_size;
  400ada:	2410      	movs	r4, #16
  400adc:	e000      	b.n	400ae0 <network_generate_status_packet+0x4c>
		
	/** Cmd specifier */
	memcpy(packet,CMD_STATUS,CMD_SPECIFIER_SIZE);
	index = index + CMD_SPECIFIER_SIZE;
	packet[CMD_SPECIFIER_SIZE] = TAG_SEPARATOR[0];
	index = index + tag_separator_size;			
  400ade:	2407      	movs	r4, #7
			ret = -1;
		}
	}
		
	/** Battery */
	if(battery != NULL)
  400ae0:	f1b8 0f00 	cmp.w	r8, #0
  400ae4:	d031      	beq.n	400b4a <network_generate_status_packet+0xb6>
	{
  400ae6:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t tag_size = sizeof(TAG_STATUS_BATTERY)-1;	//ignore NUL-terminator
		// Data tag specifier
		memcpy(packet+index,TAG_STATUS_BATTERY,tag_size);
  400aea:	192a      	adds	r2, r5, r4
  400aec:	4b73      	ldr	r3, [pc, #460]	; (400cbc <network_generate_status_packet+0x228>)
  400aee:	6818      	ldr	r0, [r3, #0]
  400af0:	5128      	str	r0, [r5, r4]
  400af2:	8899      	ldrh	r1, [r3, #4]
  400af4:	799b      	ldrb	r3, [r3, #6]
  400af6:	8091      	strh	r1, [r2, #4]
  400af8:	7193      	strb	r3, [r2, #6]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  400afa:	1de3      	adds	r3, r4, #7
  400afc:	b2db      	uxtb	r3, r3
  400afe:	223a      	movs	r2, #58	; 0x3a
  400b00:	54ea      	strb	r2, [r5, r3]
		index = index + data_spacing_size;	
  400b02:	3408      	adds	r4, #8
  400b04:	b2e4      	uxtb	r4, r4
			
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
  400b06:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
			battery = 100;
			digits = 3;
		}
		else
		{
			digits = 2;
  400b0a:	bf92      	itee	ls
  400b0c:	f04f 0a02 	movls.w	sl, #2
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
		{
			battery = 100;
			digits = 3;
  400b10:	f04f 0a03 	movhi.w	sl, #3
			
		// Battery > 100 -> Battery = 100
		uint8_t digits;
		if(battery >= 100)
		{
			battery = 100;
  400b14:	f04f 0864 	movhi.w	r8, #100	; 0x64
		else
		{
			digits = 2;
		}
		// Data
		char* tmp[digits];
  400b18:	ea4f 038a 	mov.w	r3, sl, lsl #2
  400b1c:	330a      	adds	r3, #10
  400b1e:	f023 0307 	bic.w	r3, r3, #7
  400b22:	ebad 0d03 	sub.w	sp, sp, r3
		sprintf(tmp, "%d", battery);
  400b26:	4642      	mov	r2, r8
  400b28:	4965      	ldr	r1, [pc, #404]	; (400cc0 <network_generate_status_packet+0x22c>)
  400b2a:	4668      	mov	r0, sp
  400b2c:	4b65      	ldr	r3, [pc, #404]	; (400cc4 <network_generate_status_packet+0x230>)
  400b2e:	4798      	blx	r3
		memcpy(packet+index,tmp,digits);
  400b30:	4652      	mov	r2, sl
  400b32:	4669      	mov	r1, sp
  400b34:	1928      	adds	r0, r5, r4
  400b36:	4b64      	ldr	r3, [pc, #400]	; (400cc8 <network_generate_status_packet+0x234>)
  400b38:	4798      	blx	r3
		index = index + digits;
  400b3a:	4454      	add	r4, sl
  400b3c:	b2e4      	uxtb	r4, r4
			
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  400b3e:	233b      	movs	r3, #59	; 0x3b
  400b40:	552b      	strb	r3, [r5, r4]
		index = index + tag_separator_size;
  400b42:	3401      	adds	r4, #1
  400b44:	b2e4      	uxtb	r4, r4
  400b46:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}
		
	/** Camera */
	if(camera != NULL)
  400b4a:	f1bb 0f00 	cmp.w	fp, #0
  400b4e:	d017      	beq.n	400b80 <network_generate_status_packet+0xec>
	{
		uint8_t tag_size = sizeof(TAG_STATUS_CAMERA)-1;	//ignore NUL-terminator
		// Data tag specifier
		memcpy(packet+index,TAG_STATUS_CAMERA,tag_size);
  400b50:	192b      	adds	r3, r5, r4
  400b52:	4a5e      	ldr	r2, [pc, #376]	; (400ccc <network_generate_status_packet+0x238>)
  400b54:	6810      	ldr	r0, [r2, #0]
  400b56:	5128      	str	r0, [r5, r4]
  400b58:	8892      	ldrh	r2, [r2, #4]
  400b5a:	809a      	strh	r2, [r3, #4]
		index = index + tag_size;
		packet[index] = DATA_TAG_SPACING[0];
  400b5c:	1da3      	adds	r3, r4, #6
  400b5e:	b2db      	uxtb	r3, r3
  400b60:	223a      	movs	r2, #58	; 0x3a
  400b62:	54ea      	strb	r2, [r5, r3]
		index = index + data_spacing_size;	
  400b64:	1de3      	adds	r3, r4, #7
  400b66:	b2db      	uxtb	r3, r3
			
		// Data
		if(camera < 0)
  400b68:	f1bb 0f00 	cmp.w	fp, #0
		{
			packet[index] = VALUE_FALSE[0];
  400b6c:	bfb4      	ite	lt
  400b6e:	2230      	movlt	r2, #48	; 0x30
			index = index + sizeof(VALUE_FALSE[0]);
		}
		else
		{
			packet[index] = VALUE_TRUE[0];
  400b70:	2231      	movge	r2, #49	; 0x31
  400b72:	54ea      	strb	r2, [r5, r3]
			index = index + sizeof(VALUE_TRUE[0]);
  400b74:	3408      	adds	r4, #8
  400b76:	b2e4      	uxtb	r4, r4
		}
			
		// Tag separator
		packet[index] = TAG_SEPARATOR[0];
  400b78:	233b      	movs	r3, #59	; 0x3b
  400b7a:	552b      	strb	r3, [r5, r4]
		index = index + tag_separator_size;
  400b7c:	3401      	adds	r4, #1
  400b7e:	b2e4      	uxtb	r4, r4
	}
		
	/** Storage space */
	if(space != NULL)
  400b80:	f1b9 0f00 	cmp.w	r9, #0
  400b84:	d042      	beq.n	400c0c <network_generate_status_packet+0x178>
	{
		// Remaining space must also be set
		if(remaining_space!= NULL)
  400b86:	2e00      	cmp	r6, #0
  400b88:	f000 8086 	beq.w	400c98 <network_generate_status_packet+0x204>
		{
  400b8c:	46e8      	mov	r8, sp
			uint8_t tag_size = sizeof(TAG_STATUS_STORAGE_SPACE)-1;	//ignore NUL-terminator
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_STORAGE_SPACE,tag_size);
  400b8e:	192a      	adds	r2, r5, r4
  400b90:	4b4f      	ldr	r3, [pc, #316]	; (400cd0 <network_generate_status_packet+0x23c>)
  400b92:	6818      	ldr	r0, [r3, #0]
  400b94:	5128      	str	r0, [r5, r4]
  400b96:	791b      	ldrb	r3, [r3, #4]
  400b98:	7113      	strb	r3, [r2, #4]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  400b9a:	1d63      	adds	r3, r4, #5
  400b9c:	b2db      	uxtb	r3, r3
  400b9e:	223a      	movs	r2, #58	; 0x3a
  400ba0:	54ea      	strb	r2, [r5, r3]
			index = index + data_spacing_size;		
  400ba2:	3406      	adds	r4, #6
  400ba4:	b2e4      	uxtb	r4, r4
						
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
  400ba6:	2e09      	cmp	r6, #9
  400ba8:	d90d      	bls.n	400bc6 <network_generate_status_packet+0x132>
			{
				digits = 1;
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
  400baa:	2e63      	cmp	r6, #99	; 0x63
  400bac:	d90e      	bls.n	400bcc <network_generate_status_packet+0x138>
			{
				digits = 2;
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
  400bae:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
  400bb2:	d30e      	bcc.n	400bd2 <network_generate_status_packet+0x13e>
				digits = 4;
			}
			// 10000-65536 = 5 digits
			else
			{
				digits = 5;
  400bb4:	f242 7a0f 	movw	sl, #9999	; 0x270f
  400bb8:	4556      	cmp	r6, sl
  400bba:	bf94      	ite	ls
  400bbc:	f04f 0a04 	movls.w	sl, #4
  400bc0:	f04f 0a05 	movhi.w	sl, #5
  400bc4:	e007      	b.n	400bd6 <network_generate_status_packet+0x142>
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
			{
				digits = 1;
  400bc6:	f04f 0a01 	mov.w	sl, #1
  400bca:	e004      	b.n	400bd6 <network_generate_status_packet+0x142>
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
			{
				digits = 2;
  400bcc:	f04f 0a02 	mov.w	sl, #2
  400bd0:	e001      	b.n	400bd6 <network_generate_status_packet+0x142>
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
			{
				digits = 3;
  400bd2:	f04f 0a03 	mov.w	sl, #3
			{
				digits = 5;
			}
				
			// Data
			char* tmp[digits];
  400bd6:	ea4f 038a 	mov.w	r3, sl, lsl #2
  400bda:	330a      	adds	r3, #10
  400bdc:	f023 0307 	bic.w	r3, r3, #7
  400be0:	ebad 0d03 	sub.w	sp, sp, r3
			sprintf(tmp, "%d", space);
  400be4:	464a      	mov	r2, r9
  400be6:	4936      	ldr	r1, [pc, #216]	; (400cc0 <network_generate_status_packet+0x22c>)
  400be8:	4668      	mov	r0, sp
  400bea:	4b36      	ldr	r3, [pc, #216]	; (400cc4 <network_generate_status_packet+0x230>)
  400bec:	4798      	blx	r3
			memcpy(packet+index,tmp,digits);
  400bee:	4652      	mov	r2, sl
  400bf0:	4669      	mov	r1, sp
  400bf2:	1928      	adds	r0, r5, r4
  400bf4:	4b34      	ldr	r3, [pc, #208]	; (400cc8 <network_generate_status_packet+0x234>)
  400bf6:	4798      	blx	r3
			index = index + digits;
  400bf8:	4454      	add	r4, sl
  400bfa:	b2e4      	uxtb	r4, r4
				
			// Tag separator
			packet[index] = TAG_SEPARATOR[0];
  400bfc:	233b      	movs	r3, #59	; 0x3b
  400bfe:	552b      	strb	r3, [r5, r4]
			index = index + tag_separator_size;	
  400c00:	1c63      	adds	r3, r4, #1
  400c02:	b2db      	uxtb	r3, r3
  400c04:	46c5      	mov	sp, r8
					
	/** Remaining storage space */
	if(remaining_space != NULL)
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
  400c06:	45b1      	cmp	r9, r6
  400c08:	d949      	bls.n	400c9e <network_generate_status_packet+0x20a>
  400c0a:	e002      	b.n	400c12 <network_generate_status_packet+0x17e>
			ret = -1;
		}
	}
					
	/** Remaining storage space */
	if(remaining_space != NULL)
  400c0c:	2e00      	cmp	r6, #0
  400c0e:	d146      	bne.n	400c9e <network_generate_status_packet+0x20a>
  400c10:	e048      	b.n	400ca4 <network_generate_status_packet+0x210>
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
		{
  400c12:	46e8      	mov	r8, sp
			uint8_t tag_size = sizeof(TAG_STATUS_STORAGE_REMAINING)-1;	//ignore NUL-terminator
			// Data tag specifier
			memcpy(packet+index,TAG_STATUS_STORAGE_REMAINING,tag_size);
  400c14:	eb05 0e03 	add.w	lr, r5, r3
  400c18:	4a2e      	ldr	r2, [pc, #184]	; (400cd4 <network_generate_status_packet+0x240>)
  400c1a:	ca03      	ldmia	r2!, {r0, r1}
  400c1c:	50e8      	str	r0, [r5, r3]
  400c1e:	f8ce 1004 	str.w	r1, [lr, #4]
  400c22:	7813      	ldrb	r3, [r2, #0]
  400c24:	f88e 3008 	strb.w	r3, [lr, #8]
			index = index + tag_size;
			packet[index] = DATA_TAG_SPACING[0];
  400c28:	f104 030a 	add.w	r3, r4, #10
  400c2c:	b2db      	uxtb	r3, r3
  400c2e:	223a      	movs	r2, #58	; 0x3a
  400c30:	54ea      	strb	r2, [r5, r3]
			index = index + data_spacing_size;
  400c32:	340b      	adds	r4, #11
  400c34:	b2e4      	uxtb	r4, r4
			
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
  400c36:	2e09      	cmp	r6, #9
  400c38:	d90d      	bls.n	400c56 <network_generate_status_packet+0x1c2>
			{
				digits = 1;
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
  400c3a:	2e63      	cmp	r6, #99	; 0x63
  400c3c:	d90e      	bls.n	400c5c <network_generate_status_packet+0x1c8>
			{
				digits = 2;
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
  400c3e:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
  400c42:	d30e      	bcc.n	400c62 <network_generate_status_packet+0x1ce>
				digits = 4;
			}
			// 10000-65536 = 5 digits
			else
			{
				digits = 5;
  400c44:	f242 790f 	movw	r9, #9999	; 0x270f
  400c48:	454e      	cmp	r6, r9
  400c4a:	bf94      	ite	ls
  400c4c:	f04f 0904 	movls.w	r9, #4
  400c50:	f04f 0905 	movhi.w	r9, #5
  400c54:	e007      	b.n	400c66 <network_generate_status_packet+0x1d2>
			// Find number of characters needed to represent the number			
			uint8_t digits;
			// 0-9 = 1 digit
			if(remaining_space < 10)
			{
				digits = 1;
  400c56:	f04f 0901 	mov.w	r9, #1
  400c5a:	e004      	b.n	400c66 <network_generate_status_packet+0x1d2>
			}
			// 10-99 = 2 digits
			else if(remaining_space < 100)
			{
				digits = 2;
  400c5c:	f04f 0902 	mov.w	r9, #2
  400c60:	e001      	b.n	400c66 <network_generate_status_packet+0x1d2>
			}
			// 100-999 = 3 digits
			else if(remaining_space < 1000)
			{
				digits = 3;
  400c62:	f04f 0903 	mov.w	r9, #3
			{
				digits = 5;
			}
				
			// Data
			char* tmp[digits];
  400c66:	ea4f 0389 	mov.w	r3, r9, lsl #2
  400c6a:	330a      	adds	r3, #10
  400c6c:	f023 0307 	bic.w	r3, r3, #7
  400c70:	ebad 0d03 	sub.w	sp, sp, r3
			sprintf(tmp, "%d", remaining_space);
  400c74:	4632      	mov	r2, r6
  400c76:	4912      	ldr	r1, [pc, #72]	; (400cc0 <network_generate_status_packet+0x22c>)
  400c78:	4668      	mov	r0, sp
  400c7a:	4b12      	ldr	r3, [pc, #72]	; (400cc4 <network_generate_status_packet+0x230>)
  400c7c:	4798      	blx	r3
			memcpy(packet+index,tmp,digits);
  400c7e:	464a      	mov	r2, r9
  400c80:	4669      	mov	r1, sp
  400c82:	1928      	adds	r0, r5, r4
  400c84:	4b10      	ldr	r3, [pc, #64]	; (400cc8 <network_generate_status_packet+0x234>)
  400c86:	4798      	blx	r3
				
			// Tag separator
			index = index + digits;
  400c88:	444c      	add	r4, r9
  400c8a:	b2e4      	uxtb	r4, r4
			packet[index] = TAG_SEPARATOR[0];
  400c8c:	233b      	movs	r3, #59	; 0x3b
  400c8e:	552b      	strb	r3, [r5, r4]
			index = index + tag_separator_size;
  400c90:	3401      	adds	r4, #1
  400c92:	b2e4      	uxtb	r4, r4
  400c94:	46c5      	mov	sp, r8
	/** Remaining storage space */
	if(remaining_space != NULL)
	{
		// Storage space must also be set and must be larger than remaining space
		if(space!=NULL && (remaining_space < space) )
		{
  400c96:	e005      	b.n	400ca4 <network_generate_status_packet+0x210>
			packet[index] = TAG_SEPARATOR[0];
			index = index + tag_separator_size;	
		}
		else
		{
			ret = -1;
  400c98:	f04f 30ff 	mov.w	r0, #4294967295
  400c9c:	e003      	b.n	400ca6 <network_generate_status_packet+0x212>
  400c9e:	f04f 30ff 	mov.w	r0, #4294967295
  400ca2:	e000      	b.n	400ca6 <network_generate_status_packet+0x212>
	}	
	
	if(ret < 0)
		return ret;
	else
		return index;
  400ca4:	b260      	sxtb	r0, r4
}
  400ca6:	370c      	adds	r7, #12
  400ca8:	46bd      	mov	sp, r7
  400caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cae:	bf00      	nop
  400cb0:	00405f85 	.word	0x00405f85
  400cb4:	0040ede4 	.word	0x0040ede4
  400cb8:	0040ed60 	.word	0x0040ed60
  400cbc:	0040edec 	.word	0x0040edec
  400cc0:	0040e8f0 	.word	0x0040e8f0
  400cc4:	00406181 	.word	0x00406181
  400cc8:	00405e51 	.word	0x00405e51
  400ccc:	0040edf4 	.word	0x0040edf4
  400cd0:	0040edfc 	.word	0x0040edfc
  400cd4:	0040ee04 	.word	0x0040ee04

00400cd8 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  400cd8:	280b      	cmp	r0, #11
  400cda:	d107      	bne.n	400cec <chip_isr+0x14>
  400cdc:	2902      	cmp	r1, #2
  400cde:	d105      	bne.n	400cec <chip_isr+0x14>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  400ce0:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  400ce2:	4b03      	ldr	r3, [pc, #12]	; (400cf0 <chip_isr+0x18>)
  400ce4:	681b      	ldr	r3, [r3, #0]
  400ce6:	b103      	cbz	r3, 400cea <chip_isr+0x12>
			gpfIsr();
  400ce8:	4798      	blx	r3
  400cea:	bd08      	pop	{r3, pc}
  400cec:	4770      	bx	lr
  400cee:	bf00      	nop
  400cf0:	20000af4 	.word	0x20000af4

00400cf4 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  400cf4:	b148      	cbz	r0, 400d0a <nm_bsp_sleep+0x16>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  400cf6:	b570      	push	{r4, r5, r6, lr}
  400cf8:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(1);
  400cfa:	f242 167c 	movw	r6, #8572	; 0x217c
  400cfe:	4d03      	ldr	r5, [pc, #12]	; (400d0c <nm_bsp_sleep+0x18>)
  400d00:	4630      	mov	r0, r6
  400d02:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  400d04:	3c01      	subs	r4, #1
  400d06:	d1fb      	bne.n	400d00 <nm_bsp_sleep+0xc>
  400d08:	bd70      	pop	{r4, r5, r6, pc}
  400d0a:	4770      	bx	lr
  400d0c:	20000001 	.word	0x20000001

00400d10 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  400d10:	b538      	push	{r3, r4, r5, lr}
	pio_set_pin_low(CONF_WINC_PIN_CHIP_ENABLE);
  400d12:	2006      	movs	r0, #6
  400d14:	4c08      	ldr	r4, [pc, #32]	; (400d38 <nm_bsp_reset+0x28>)
  400d16:	47a0      	blx	r4
	pio_set_pin_low(CONF_WINC_PIN_RESET);
  400d18:	2018      	movs	r0, #24
  400d1a:	47a0      	blx	r4
	nm_bsp_sleep(100);
  400d1c:	2064      	movs	r0, #100	; 0x64
  400d1e:	4c07      	ldr	r4, [pc, #28]	; (400d3c <nm_bsp_reset+0x2c>)
  400d20:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_PIN_CHIP_ENABLE);
  400d22:	2006      	movs	r0, #6
  400d24:	4d06      	ldr	r5, [pc, #24]	; (400d40 <nm_bsp_reset+0x30>)
  400d26:	47a8      	blx	r5
	nm_bsp_sleep(10);
  400d28:	200a      	movs	r0, #10
  400d2a:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_PIN_RESET);
  400d2c:	2018      	movs	r0, #24
  400d2e:	47a8      	blx	r5
	nm_bsp_sleep(10);
  400d30:	200a      	movs	r0, #10
  400d32:	47a0      	blx	r4
  400d34:	bd38      	pop	{r3, r4, r5, pc}
  400d36:	bf00      	nop
  400d38:	00403c0d 	.word	0x00403c0d
  400d3c:	00400cf5 	.word	0x00400cf5
  400d40:	00403bf1 	.word	0x00403bf1

00400d44 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400d44:	b538      	push	{r3, r4, r5, lr}
	gpfIsr = NULL;
  400d46:	2200      	movs	r2, #0
  400d48:	4b0e      	ldr	r3, [pc, #56]	; (400d84 <nm_bsp_init+0x40>)
  400d4a:	601a      	str	r2, [r3, #0]
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
#ifdef __SAM4SD32C__
	pio_configure_pin(CONF_WINC_PIN_RESET, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  400d4c:	4d0e      	ldr	r5, [pc, #56]	; (400d88 <nm_bsp_init+0x44>)
  400d4e:	4629      	mov	r1, r5
  400d50:	2018      	movs	r0, #24
  400d52:	4c0e      	ldr	r4, [pc, #56]	; (400d8c <nm_bsp_init+0x48>)
  400d54:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_PIN_CHIP_ENABLE, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  400d56:	4629      	mov	r1, r5
  400d58:	2006      	movs	r0, #6
  400d5a:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_PIN_WAKE, PIO_TYPE_PIO_OUTPUT_0|PIO_PULLUP);
  400d5c:	4629      	mov	r1, r5
  400d5e:	2019      	movs	r0, #25
  400d60:	47a0      	blx	r4
	pio_configure_pin(CONF_WINC_SPI_CS_GPIO, PIO_DEFAULT|PIO_PULLUP);
  400d62:	2101      	movs	r1, #1
  400d64:	200b      	movs	r0, #11
  400d66:	47a0      	blx	r4
	pio_set_pin_high(CONF_WINC_SPI_CS_GPIO);
  400d68:	200b      	movs	r0, #11
  400d6a:	4b09      	ldr	r3, [pc, #36]	; (400d90 <nm_bsp_init+0x4c>)
  400d6c:	4798      	blx	r3

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400d6e:	4b09      	ldr	r3, [pc, #36]	; (400d94 <nm_bsp_init+0x50>)
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	f013 0f01 	tst.w	r3, #1
  400d76:	bf1c      	itt	ne
  400d78:	4b06      	ldrne	r3, [pc, #24]	; (400d94 <nm_bsp_init+0x50>)
  400d7a:	681b      	ldrne	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400d7c:	4b06      	ldr	r3, [pc, #24]	; (400d98 <nm_bsp_init+0x54>)
  400d7e:	4798      	blx	r3

	return 0;
}
  400d80:	2000      	movs	r0, #0
  400d82:	bd38      	pop	{r3, r4, r5, pc}
  400d84:	20000af4 	.word	0x20000af4
  400d88:	30000001 	.word	0x30000001
  400d8c:	00403c29 	.word	0x00403c29
  400d90:	00403bf1 	.word	0x00403bf1
  400d94:	e000e010 	.word	0xe000e010
  400d98:	00400d11 	.word	0x00400d11

00400d9c <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400d9c:	b510      	push	{r4, lr}
	gpfIsr = pfIsr;
  400d9e:	4b11      	ldr	r3, [pc, #68]	; (400de4 <nm_bsp_register_isr+0x48>)
  400da0:	6018      	str	r0, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400da2:	200b      	movs	r0, #11
  400da4:	4b10      	ldr	r3, [pc, #64]	; (400de8 <nm_bsp_register_isr+0x4c>)
  400da6:	4798      	blx	r3

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	sysclk_enable_peripheral_clock(CONF_WINC_SPI_INT_PIO_ID);
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  400da8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400dac:	2001      	movs	r0, #1
  400dae:	4b0f      	ldr	r3, [pc, #60]	; (400dec <nm_bsp_register_isr+0x50>)
  400db0:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400db2:	4c0f      	ldr	r4, [pc, #60]	; (400df0 <nm_bsp_register_isr+0x54>)
  400db4:	2201      	movs	r2, #1
  400db6:	2102      	movs	r1, #2
  400db8:	4620      	mov	r0, r4
  400dba:	4b0e      	ldr	r3, [pc, #56]	; (400df4 <nm_bsp_register_isr+0x58>)
  400dbc:	4798      	blx	r3
//	pio_set_debounce_filter(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, 10);
	pio_handler_set_pin(CONF_WINC_SPI_INT_PIN, PIO_IT_LOW_LEVEL, chip_isr);
  400dbe:	4a0e      	ldr	r2, [pc, #56]	; (400df8 <nm_bsp_register_isr+0x5c>)
  400dc0:	2110      	movs	r1, #16
  400dc2:	2001      	movs	r0, #1
  400dc4:	4b0d      	ldr	r3, [pc, #52]	; (400dfc <nm_bsp_register_isr+0x60>)
  400dc6:	4798      	blx	r3
	pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  400dc8:	4620      	mov	r0, r4
  400dca:	4b0d      	ldr	r3, [pc, #52]	; (400e00 <nm_bsp_register_isr+0x64>)
  400dcc:	4798      	blx	r3
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400dce:	2102      	movs	r1, #2
  400dd0:	4620      	mov	r0, r4
  400dd2:	4b0c      	ldr	r3, [pc, #48]	; (400e04 <nm_bsp_register_isr+0x68>)
  400dd4:	4798      	blx	r3
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  400dd6:	2200      	movs	r2, #0
  400dd8:	210b      	movs	r1, #11
  400dda:	4620      	mov	r0, r4
  400ddc:	4b0a      	ldr	r3, [pc, #40]	; (400e08 <nm_bsp_register_isr+0x6c>)
  400dde:	4798      	blx	r3
  400de0:	bd10      	pop	{r4, pc}
  400de2:	bf00      	nop
  400de4:	20000af4 	.word	0x20000af4
  400de8:	00404111 	.word	0x00404111
  400dec:	00403c29 	.word	0x00403c29
  400df0:	400e0e00 	.word	0x400e0e00
  400df4:	00403ab9 	.word	0x00403ab9
  400df8:	00400cd9 	.word	0x00400cd9
  400dfc:	00403f21 	.word	0x00403f21
  400e00:	00403be9 	.word	0x00403be9
  400e04:	00403be1 	.word	0x00403be1
  400e08:	00403fa5 	.word	0x00403fa5

00400e0c <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400e0c:	b510      	push	{r4, lr}
	if (u8Enable) {
  400e0e:	b140      	cbz	r0, 400e22 <nm_bsp_interrupt_ctrl+0x16>
		pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  400e10:	4c06      	ldr	r4, [pc, #24]	; (400e2c <nm_bsp_interrupt_ctrl+0x20>)
  400e12:	4620      	mov	r0, r4
  400e14:	4b06      	ldr	r3, [pc, #24]	; (400e30 <nm_bsp_interrupt_ctrl+0x24>)
  400e16:	4798      	blx	r3
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400e18:	2102      	movs	r1, #2
  400e1a:	4620      	mov	r0, r4
  400e1c:	4b05      	ldr	r3, [pc, #20]	; (400e34 <nm_bsp_interrupt_ctrl+0x28>)
  400e1e:	4798      	blx	r3
  400e20:	bd10      	pop	{r4, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400e22:	2102      	movs	r1, #2
  400e24:	4801      	ldr	r0, [pc, #4]	; (400e2c <nm_bsp_interrupt_ctrl+0x20>)
  400e26:	4b04      	ldr	r3, [pc, #16]	; (400e38 <nm_bsp_interrupt_ctrl+0x2c>)
  400e28:	4798      	blx	r3
  400e2a:	bd10      	pop	{r4, pc}
  400e2c:	400e0e00 	.word	0x400e0e00
  400e30:	00403be9 	.word	0x00403be9
  400e34:	00403be1 	.word	0x00403be1
  400e38:	00403be5 	.word	0x00403be5

00400e3c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
  400e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 result = M2M_SUCCESS;
#ifdef CONF_WINC_USE_I2C

#elif defined CONF_WINC_USE_SPI
	/* Configure SPI pins. */
	gpio_configure_pin(CONF_WINC_SPI_MISO_GPIO, CONF_WINC_SPI_MISO_FLAGS);
  400e3e:	4d29      	ldr	r5, [pc, #164]	; (400ee4 <nm_bus_init+0xa8>)
  400e40:	4629      	mov	r1, r5
  400e42:	200c      	movs	r0, #12
  400e44:	4c28      	ldr	r4, [pc, #160]	; (400ee8 <nm_bus_init+0xac>)
  400e46:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_MOSI_GPIO, CONF_WINC_SPI_MOSI_FLAGS);
  400e48:	4629      	mov	r1, r5
  400e4a:	200d      	movs	r0, #13
  400e4c:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_CLK_GPIO, CONF_WINC_SPI_CLK_FLAGS);
  400e4e:	4629      	mov	r1, r5
  400e50:	200e      	movs	r0, #14
  400e52:	47a0      	blx	r4
	gpio_configure_pin(CONF_WINC_SPI_CS_GPIO, CONF_WINC_SPI_CS_FLAGS);
  400e54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400e58:	200b      	movs	r0, #11
  400e5a:	47a0      	blx	r4

	/* Get the PIO instance used for CS. */
	p_pio_cs = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (CONF_WINC_SPI_CS_GPIO >> 5)));
  400e5c:	4e23      	ldr	r6, [pc, #140]	; (400eec <nm_bus_init+0xb0>)
  400e5e:	4b24      	ldr	r3, [pc, #144]	; (400ef0 <nm_bus_init+0xb4>)
  400e60:	6033      	str	r3, [r6, #0]
	SPI_DEASSERT_CS();
  400e62:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400e66:	631d      	str	r5, [r3, #48]	; 0x30

	/* Configure SPI module. */
	spi_enable_clock(CONF_WINC_SPI);
  400e68:	4c22      	ldr	r4, [pc, #136]	; (400ef4 <nm_bus_init+0xb8>)
  400e6a:	4620      	mov	r0, r4
  400e6c:	4b22      	ldr	r3, [pc, #136]	; (400ef8 <nm_bus_init+0xbc>)
  400e6e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400e70:	2302      	movs	r3, #2
  400e72:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400e74:	2380      	movs	r3, #128	; 0x80
  400e76:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400e78:	6863      	ldr	r3, [r4, #4]
  400e7a:	f043 0301 	orr.w	r3, r3, #1
  400e7e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400e80:	6863      	ldr	r3, [r4, #4]
  400e82:	f043 0310 	orr.w	r3, r3, #16
  400e86:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400e88:	6863      	ldr	r3, [r4, #4]
  400e8a:	f023 0302 	bic.w	r3, r3, #2
  400e8e:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(CONF_WINC_SPI);
#else
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
#endif

	spi_set_clock_polarity(CONF_WINC_SPI,
  400e90:	2200      	movs	r2, #0
  400e92:	4611      	mov	r1, r2
  400e94:	4620      	mov	r0, r4
  400e96:	4b19      	ldr	r3, [pc, #100]	; (400efc <nm_bus_init+0xc0>)
  400e98:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  400e9a:	2201      	movs	r2, #1
  400e9c:	2100      	movs	r1, #0
  400e9e:	4620      	mov	r0, r4
  400ea0:	4b17      	ldr	r3, [pc, #92]	; (400f00 <nm_bus_init+0xc4>)
  400ea2:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  400ea4:	2200      	movs	r2, #0
  400ea6:	4611      	mov	r1, r2
  400ea8:	4620      	mov	r0, r4
  400eaa:	4b16      	ldr	r3, [pc, #88]	; (400f04 <nm_bus_init+0xc8>)
  400eac:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400eae:	2203      	movs	r2, #3
  400eb0:	2100      	movs	r1, #0
  400eb2:	4620      	mov	r0, r4
  400eb4:	4b14      	ldr	r3, [pc, #80]	; (400f08 <nm_bus_init+0xcc>)
  400eb6:	4798      	blx	r3
			div_ceil(sysclk_get_peripheral_hz(), CONF_WINC_SPI_CLOCK));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  400eb8:	2300      	movs	r3, #0
  400eba:	461a      	mov	r2, r3
  400ebc:	4619      	mov	r1, r3
  400ebe:	4620      	mov	r0, r4
  400ec0:	4f12      	ldr	r7, [pc, #72]	; (400f0c <nm_bus_init+0xd0>)
  400ec2:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400ec4:	2301      	movs	r3, #1
  400ec6:	6023      	str	r3, [r4, #0]
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
	return (Pdc *)&(p_spi->SPI_RPR);
  400ec8:	4811      	ldr	r0, [pc, #68]	; (400f10 <nm_bus_init+0xd4>)
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);

	/* Get pointer to SPI master PDC register base. */
	g_p_pdc_spi = spi_get_pdc_base(CONF_WINC_SPI);
  400eca:	4b12      	ldr	r3, [pc, #72]	; (400f14 <nm_bus_init+0xd8>)
  400ecc:	6018      	str	r0, [r3, #0]
	pdc_disable_transfer(g_p_pdc_spi, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  400ece:	f240 2102 	movw	r1, #514	; 0x202
  400ed2:	4b11      	ldr	r3, [pc, #68]	; (400f18 <nm_bus_init+0xdc>)
  400ed4:	4798      	blx	r3

	nm_bsp_reset();
  400ed6:	4b11      	ldr	r3, [pc, #68]	; (400f1c <nm_bus_init+0xe0>)
  400ed8:	4798      	blx	r3
	SPI_DEASSERT_CS();
  400eda:	6833      	ldr	r3, [r6, #0]
  400edc:	631d      	str	r5, [r3, #48]	; 0x30
#endif
	return result;
}
  400ede:	2000      	movs	r0, #0
  400ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ee2:	bf00      	nop
  400ee4:	08000001 	.word	0x08000001
  400ee8:	00403c29 	.word	0x00403c29
  400eec:	2000ad44 	.word	0x2000ad44
  400ef0:	400e0e00 	.word	0x400e0e00
  400ef4:	40008000 	.word	0x40008000
  400ef8:	00403805 	.word	0x00403805
  400efc:	00403815 	.word	0x00403815
  400f00:	00403835 	.word	0x00403835
  400f04:	00403855 	.word	0x00403855
  400f08:	00403869 	.word	0x00403869
  400f0c:	00403891 	.word	0x00403891
  400f10:	40008100 	.word	0x40008100
  400f14:	20000af8 	.word	0x20000af8
  400f18:	004037f5 	.word	0x004037f5
  400f1c:	00400d11 	.word	0x00400d11

00400f20 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400f20:	b510      	push	{r4, lr}
  400f22:	b084      	sub	sp, #16
	sint8 s8Ret = 0;
	switch(u8Cmd)
  400f24:	2803      	cmp	r0, #3
  400f26:	d12d      	bne.n	400f84 <nm_bus_ioctl+0x64>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400f28:	684b      	ldr	r3, [r1, #4]
  400f2a:	890a      	ldrh	r2, [r1, #8]

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	pdc_packet_t pdc_spi_tx_packet, pdc_spi_rx_packet;

	pdc_spi_tx_packet.ul_addr = (uint32_t)pu8Mosi;;
  400f2c:	6809      	ldr	r1, [r1, #0]
  400f2e:	9100      	str	r1, [sp, #0]
	pdc_spi_rx_packet.ul_addr = (uint32_t)pu8Miso;
  400f30:	9302      	str	r3, [sp, #8]
	pdc_spi_tx_packet.ul_size = u16Sz;
  400f32:	9201      	str	r2, [sp, #4]
	pdc_spi_rx_packet.ul_size = u16Sz;
  400f34:	9203      	str	r2, [sp, #12]

	if (pu8Miso == 0) {
  400f36:	b913      	cbnz	r3, 400f3e <nm_bus_ioctl+0x1e>
		pdc_spi_rx_packet.ul_addr = (uint32_t)0x400000;
  400f38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400f3c:	9302      	str	r3, [sp, #8]
	}

	/* Trigger SPI PDC transfer. */
	SPI_ASSERT_CS();
  400f3e:	4b18      	ldr	r3, [pc, #96]	; (400fa0 <nm_bus_ioctl+0x80>)
  400f40:	681b      	ldr	r3, [r3, #0]
  400f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400f46:	635a      	str	r2, [r3, #52]	; 0x34
	pdc_tx_init(g_p_pdc_spi, &pdc_spi_tx_packet, NULL);
  400f48:	4c16      	ldr	r4, [pc, #88]	; (400fa4 <nm_bus_ioctl+0x84>)
  400f4a:	2200      	movs	r2, #0
  400f4c:	4669      	mov	r1, sp
  400f4e:	6820      	ldr	r0, [r4, #0]
  400f50:	4b15      	ldr	r3, [pc, #84]	; (400fa8 <nm_bus_ioctl+0x88>)
  400f52:	4798      	blx	r3
	pdc_rx_init(g_p_pdc_spi, &pdc_spi_rx_packet, NULL);
  400f54:	2200      	movs	r2, #0
  400f56:	a902      	add	r1, sp, #8
  400f58:	6820      	ldr	r0, [r4, #0]
  400f5a:	4b14      	ldr	r3, [pc, #80]	; (400fac <nm_bus_ioctl+0x8c>)
  400f5c:	4798      	blx	r3
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN;
  400f5e:	6821      	ldr	r1, [r4, #0]
  400f60:	f240 1301 	movw	r3, #257	; 0x101
  400f64:	620b      	str	r3, [r1, #32]
	while ((CONF_WINC_SPI->SPI_SR & SPI_SR_RXBUFF) == 0)
  400f66:	4a12      	ldr	r2, [pc, #72]	; (400fb0 <nm_bus_ioctl+0x90>)
  400f68:	6913      	ldr	r3, [r2, #16]
  400f6a:	f013 0f40 	tst.w	r3, #64	; 0x40
  400f6e:	d0fb      	beq.n	400f68 <nm_bus_ioctl+0x48>
		;
	SPI_DEASSERT_CS();
  400f70:	4b0b      	ldr	r3, [pc, #44]	; (400fa0 <nm_bus_ioctl+0x80>)
  400f72:	681b      	ldr	r3, [r3, #0]
  400f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400f78:	631a      	str	r2, [r3, #48]	; 0x30
	g_p_pdc_spi->PERIPH_PTCR = PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS;
  400f7a:	f240 2302 	movw	r3, #514	; 0x202
  400f7e:	620b      	str	r3, [r1, #32]
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400f80:	2000      	movs	r0, #0
		}
		break;
  400f82:	e00a      	b.n	400f9a <nm_bus_ioctl+0x7a>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
  400f84:	22d6      	movs	r2, #214	; 0xd6
  400f86:	490b      	ldr	r1, [pc, #44]	; (400fb4 <nm_bus_ioctl+0x94>)
  400f88:	480b      	ldr	r0, [pc, #44]	; (400fb8 <nm_bus_ioctl+0x98>)
  400f8a:	4c0c      	ldr	r4, [pc, #48]	; (400fbc <nm_bus_ioctl+0x9c>)
  400f8c:	47a0      	blx	r4
  400f8e:	480c      	ldr	r0, [pc, #48]	; (400fc0 <nm_bus_ioctl+0xa0>)
  400f90:	47a0      	blx	r4
  400f92:	480c      	ldr	r0, [pc, #48]	; (400fc4 <nm_bus_ioctl+0xa4>)
  400f94:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  400f96:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
  400f9a:	b004      	add	sp, #16
  400f9c:	bd10      	pop	{r4, pc}
  400f9e:	bf00      	nop
  400fa0:	2000ad44 	.word	0x2000ad44
  400fa4:	20000af8 	.word	0x20000af8
  400fa8:	004037c5 	.word	0x004037c5
  400fac:	004037dd 	.word	0x004037dd
  400fb0:	40008000 	.word	0x40008000
  400fb4:	0040ee3c 	.word	0x0040ee3c
  400fb8:	0040ee10 	.word	0x0040ee10
  400fbc:	00405e29 	.word	0x00405e29
  400fc0:	0040ee24 	.word	0x0040ee24
  400fc4:	0040ee38 	.word	0x0040ee38

00400fc8 <nm_bus_deinit>:
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
  400fc8:	2000      	movs	r0, #0
  400fca:	4770      	bx	lr

00400fcc <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400fcc:	b13a      	cbz	r2, 400fde <m2m_memcpy+0x12>
  400fce:	3901      	subs	r1, #1
  400fd0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  400fd2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  400fd6:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400fda:	4290      	cmp	r0, r2
  400fdc:	d1f9      	bne.n	400fd2 <m2m_memcpy+0x6>
  400fde:	4770      	bx	lr

00400fe0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400fe0:	b122      	cbz	r2, 400fec <m2m_memset+0xc>
  400fe2:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  400fe4:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400fe8:	4290      	cmp	r0, r2
  400fea:	d1fb      	bne.n	400fe4 <m2m_memset+0x4>
  400fec:	4770      	bx	lr
  400fee:	bf00      	nop

00400ff0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop

00400ff4 <hif_set_rx_done>:
	{
		taskYIELD();
	}
}
static sint8 hif_set_rx_done(void)
{
  400ff4:	b510      	push	{r4, lr}
  400ff6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400ff8:	a901      	add	r1, sp, #4
  400ffa:	f241 0070 	movw	r0, #4208	; 0x1070
  400ffe:	4b0a      	ldr	r3, [pc, #40]	; (401028 <hif_set_rx_done+0x34>)
  401000:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401002:	4604      	mov	r4, r0
  401004:	b960      	cbnz	r0, 401020 <hif_set_rx_done+0x2c>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  401006:	9901      	ldr	r1, [sp, #4]
  401008:	f041 0102 	orr.w	r1, r1, #2
  40100c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40100e:	f241 0070 	movw	r0, #4208	; 0x1070
  401012:	4b06      	ldr	r3, [pc, #24]	; (40102c <hif_set_rx_done+0x38>)
  401014:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401016:	4604      	mov	r4, r0
  401018:	b910      	cbnz	r0, 401020 <hif_set_rx_done+0x2c>
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  40101a:	2001      	movs	r0, #1
  40101c:	4b04      	ldr	r3, [pc, #16]	; (401030 <hif_set_rx_done+0x3c>)
  40101e:	4798      	blx	r3
#endif
ERR1:
	return ret;

}
  401020:	4620      	mov	r0, r4
  401022:	b002      	add	sp, #8
  401024:	bd10      	pop	{r4, pc}
  401026:	bf00      	nop
  401028:	00402145 	.word	0x00402145
  40102c:	00402151 	.word	0x00402151
  401030:	00400e0d 	.word	0x00400e0d

00401034 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
  401034:	b538      	push	{r3, r4, r5, lr}
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
	xSemaphoreGiveFromISR(xWINC_Semaphore_handle, &xHigherPriorityTaskWoken);
  401036:	4c0b      	ldr	r4, [pc, #44]	; (401064 <isr+0x30>)
  401038:	2300      	movs	r3, #0
  40103a:	4622      	mov	r2, r4
  40103c:	4619      	mov	r1, r3
  40103e:	480a      	ldr	r0, [pc, #40]	; (401068 <isr+0x34>)
  401040:	6800      	ldr	r0, [r0, #0]
  401042:	4d0a      	ldr	r5, [pc, #40]	; (40106c <isr+0x38>)
  401044:	47a8      	blx	r5
	gu8Interrupt++;
  401046:	4a0a      	ldr	r2, [pc, #40]	; (401070 <isr+0x3c>)
  401048:	7813      	ldrb	r3, [r2, #0]
  40104a:	3301      	adds	r3, #1
  40104c:	b2db      	uxtb	r3, r3
  40104e:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
  401050:	2000      	movs	r0, #0
  401052:	4b08      	ldr	r3, [pc, #32]	; (401074 <isr+0x40>)
  401054:	4798      	blx	r3
#endif
	
	if (xHigherPriorityTaskWoken == pdTRUE)
  401056:	6823      	ldr	r3, [r4, #0]
  401058:	2b01      	cmp	r3, #1
  40105a:	d101      	bne.n	401060 <isr+0x2c>
	{
		taskYIELD();
  40105c:	4b06      	ldr	r3, [pc, #24]	; (401078 <isr+0x44>)
  40105e:	4798      	blx	r3
  401060:	bd38      	pop	{r3, r4, r5, pc}
  401062:	bf00      	nop
  401064:	20000b04 	.word	0x20000b04
  401068:	2000ad38 	.word	0x2000ad38
  40106c:	00404aa1 	.word	0x00404aa1
  401070:	20000b08 	.word	0x20000b08
  401074:	00400e0d 	.word	0x00400e0d
  401078:	0040451d 	.word	0x0040451d

0040107c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  40107c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40107e:	4b11      	ldr	r3, [pc, #68]	; (4010c4 <hif_chip_wake+0x48>)
  401080:	781b      	ldrb	r3, [r3, #0]
  401082:	f013 0fff 	tst.w	r3, #255	; 0xff
  401086:	d115      	bne.n	4010b4 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  401088:	4b0f      	ldr	r3, [pc, #60]	; (4010c8 <hif_chip_wake+0x4c>)
  40108a:	781b      	ldrb	r3, [r3, #0]
  40108c:	b2db      	uxtb	r3, r3
  40108e:	2b03      	cmp	r3, #3
  401090:	d004      	beq.n	40109c <hif_chip_wake+0x20>
  401092:	4b0d      	ldr	r3, [pc, #52]	; (4010c8 <hif_chip_wake+0x4c>)
  401094:	781b      	ldrb	r3, [r3, #0]
  401096:	b2db      	uxtb	r3, r3
  401098:	2b04      	cmp	r3, #4
  40109a:	d10b      	bne.n	4010b4 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  40109c:	4b0b      	ldr	r3, [pc, #44]	; (4010cc <hif_chip_wake+0x50>)
  40109e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4010a0:	4603      	mov	r3, r0
  4010a2:	b968      	cbnz	r0, 4010c0 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4010a4:	f245 6178 	movw	r1, #22136	; 0x5678
  4010a8:	f241 0074 	movw	r0, #4212	; 0x1074
  4010ac:	4b08      	ldr	r3, [pc, #32]	; (4010d0 <hif_chip_wake+0x54>)
  4010ae:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4010b0:	4603      	mov	r3, r0
  4010b2:	b928      	cbnz	r0, 4010c0 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4010b4:	4a03      	ldr	r2, [pc, #12]	; (4010c4 <hif_chip_wake+0x48>)
  4010b6:	7813      	ldrb	r3, [r2, #0]
  4010b8:	3301      	adds	r3, #1
  4010ba:	b2db      	uxtb	r3, r3
  4010bc:	7013      	strb	r3, [r2, #0]
  4010be:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4010c0:	4618      	mov	r0, r3
  4010c2:	bd08      	pop	{r3, pc}
  4010c4:	20000b24 	.word	0x20000b24
  4010c8:	20000b14 	.word	0x20000b14
  4010cc:	00401ccd 	.word	0x00401ccd
  4010d0:	00402151 	.word	0x00402151

004010d4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4010d4:	b500      	push	{lr}
  4010d6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4010d8:	4b1d      	ldr	r3, [pc, #116]	; (401150 <hif_chip_sleep+0x7c>)
  4010da:	781b      	ldrb	r3, [r3, #0]
  4010dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010e0:	d004      	beq.n	4010ec <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  4010e2:	4a1b      	ldr	r2, [pc, #108]	; (401150 <hif_chip_sleep+0x7c>)
  4010e4:	7813      	ldrb	r3, [r2, #0]
  4010e6:	3b01      	subs	r3, #1
  4010e8:	b2db      	uxtb	r3, r3
  4010ea:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4010ec:	4b18      	ldr	r3, [pc, #96]	; (401150 <hif_chip_sleep+0x7c>)
  4010ee:	781b      	ldrb	r3, [r3, #0]
  4010f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010f4:	d125      	bne.n	401142 <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4010f6:	4b17      	ldr	r3, [pc, #92]	; (401154 <hif_chip_sleep+0x80>)
  4010f8:	781b      	ldrb	r3, [r3, #0]
  4010fa:	b2db      	uxtb	r3, r3
  4010fc:	2b03      	cmp	r3, #3
  4010fe:	d004      	beq.n	40110a <hif_chip_sleep+0x36>
  401100:	4b14      	ldr	r3, [pc, #80]	; (401154 <hif_chip_sleep+0x80>)
  401102:	781b      	ldrb	r3, [r3, #0]
  401104:	b2db      	uxtb	r3, r3
  401106:	2b04      	cmp	r3, #4
  401108:	d11d      	bne.n	401146 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  40110a:	2300      	movs	r3, #0
  40110c:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40110e:	f244 3121 	movw	r1, #17185	; 0x4321
  401112:	f241 0074 	movw	r0, #4212	; 0x1074
  401116:	4b10      	ldr	r3, [pc, #64]	; (401158 <hif_chip_sleep+0x84>)
  401118:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40111a:	4603      	mov	r3, r0
  40111c:	b9a0      	cbnz	r0, 401148 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40111e:	a901      	add	r1, sp, #4
  401120:	2001      	movs	r0, #1
  401122:	4b0e      	ldr	r3, [pc, #56]	; (40115c <hif_chip_sleep+0x88>)
  401124:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  401126:	4603      	mov	r3, r0
  401128:	b970      	cbnz	r0, 401148 <hif_chip_sleep+0x74>
			if(reg&0x2)
  40112a:	9901      	ldr	r1, [sp, #4]
  40112c:	f011 0f02 	tst.w	r1, #2
  401130:	d00a      	beq.n	401148 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  401132:	f021 0102 	bic.w	r1, r1, #2
  401136:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  401138:	2001      	movs	r0, #1
  40113a:	4b07      	ldr	r3, [pc, #28]	; (401158 <hif_chip_sleep+0x84>)
  40113c:	4798      	blx	r3
  40113e:	4603      	mov	r3, r0
  401140:	e002      	b.n	401148 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  401142:	2300      	movs	r3, #0
  401144:	e000      	b.n	401148 <hif_chip_sleep+0x74>
  401146:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  401148:	4618      	mov	r0, r3
  40114a:	b003      	add	sp, #12
  40114c:	f85d fb04 	ldr.w	pc, [sp], #4
  401150:	20000b24 	.word	0x20000b24
  401154:	20000b14 	.word	0x20000b14
  401158:	00402151 	.word	0x00402151
  40115c:	00402145 	.word	0x00402145

00401160 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  401160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401164:	b087      	sub	sp, #28
  401166:	4680      	mov	r8, r0
  401168:	460f      	mov	r7, r1
  40116a:	4692      	mov	sl, r2
  40116c:	4699      	mov	r9, r3
  40116e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  401170:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  401174:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  401178:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40117c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  401180:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  401184:	2308      	movs	r3, #8
  401186:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40118a:	b144      	cbz	r4, 40119e <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  40118c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401190:	fa16 f383 	uxtah	r3, r6, r3
  401194:	442b      	add	r3, r5
  401196:	b29b      	uxth	r3, r3
  401198:	f8ad 3016 	strh.w	r3, [sp, #22]
  40119c:	e006      	b.n	4011ac <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40119e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4011a2:	fa19 f383 	uxtah	r3, r9, r3
  4011a6:	b29b      	uxth	r3, r3
  4011a8:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  4011ac:	4b57      	ldr	r3, [pc, #348]	; (40130c <hif_send+0x1ac>)
  4011ae:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4011b0:	4683      	mov	fp, r0
  4011b2:	2800      	cmp	r0, #0
  4011b4:	f040 8095 	bne.w	4012e2 <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4011b8:	2300      	movs	r3, #0
  4011ba:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4011bc:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4011c0:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4011c2:	9b02      	ldr	r3, [sp, #8]
  4011c4:	ea48 0303 	orr.w	r3, r8, r3
  4011c8:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4011ca:	9b02      	ldr	r3, [sp, #8]
  4011cc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4011d0:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4011d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4011d6:	9b02      	ldr	r3, [sp, #8]
  4011d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4011dc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4011de:	9902      	ldr	r1, [sp, #8]
  4011e0:	f241 008c 	movw	r0, #4236	; 0x108c
  4011e4:	4b4a      	ldr	r3, [pc, #296]	; (401310 <hif_send+0x1b0>)
  4011e6:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4011e8:	4683      	mov	fp, r0
  4011ea:	2800      	cmp	r0, #0
  4011ec:	f040 808a 	bne.w	401304 <hif_send+0x1a4>


		reg = 0;
  4011f0:	2300      	movs	r3, #0
  4011f2:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4011f4:	9b02      	ldr	r3, [sp, #8]
  4011f6:	f043 0302 	orr.w	r3, r3, #2
  4011fa:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4011fc:	9902      	ldr	r1, [sp, #8]
  4011fe:	f241 0078 	movw	r0, #4216	; 0x1078
  401202:	4b43      	ldr	r3, [pc, #268]	; (401310 <hif_send+0x1b0>)
  401204:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  401206:	4683      	mov	fp, r0
  401208:	2800      	cmp	r0, #0
  40120a:	d17b      	bne.n	401304 <hif_send+0x1a4>
		dma_addr = 0;
  40120c:	2300      	movs	r3, #0
  40120e:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  401210:	f8ad 3006 	strh.w	r3, [sp, #6]
  401214:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401218:	b29b      	uxth	r3, r3
  40121a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40121e:	d21e      	bcs.n	40125e <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  401220:	f241 0878 	movw	r8, #4216	; 0x1078
  401224:	4f3b      	ldr	r7, [pc, #236]	; (401314 <hif_send+0x1b4>)
  401226:	a902      	add	r1, sp, #8
  401228:	4640      	mov	r0, r8
  40122a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  40122c:	b9b8      	cbnz	r0, 40125e <hif_send+0xfe>
			if (!(reg & 0x2))
  40122e:	9b02      	ldr	r3, [sp, #8]
  401230:	f013 0f02 	tst.w	r3, #2
  401234:	d107      	bne.n	401246 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  401236:	a903      	add	r1, sp, #12
  401238:	4837      	ldr	r0, [pc, #220]	; (401318 <hif_send+0x1b8>)
  40123a:	4b36      	ldr	r3, [pc, #216]	; (401314 <hif_send+0x1b4>)
  40123c:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40123e:	b170      	cbz	r0, 40125e <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  401240:	2300      	movs	r3, #0
  401242:	9303      	str	r3, [sp, #12]
  401244:	e00b      	b.n	40125e <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  401246:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40124a:	3301      	adds	r3, #1
  40124c:	b29b      	uxth	r3, r3
  40124e:	f8ad 3006 	strh.w	r3, [sp, #6]
  401252:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401256:	b29b      	uxth	r3, r3
  401258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40125c:	d3e3      	bcc.n	401226 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40125e:	9b03      	ldr	r3, [sp, #12]
  401260:	2b00      	cmp	r3, #0
  401262:	d04d      	beq.n	401300 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  401264:	9b03      	ldr	r3, [sp, #12]
  401266:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  401268:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40126c:	b29b      	uxth	r3, r3
  40126e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  401272:	9804      	ldr	r0, [sp, #16]
  401274:	2208      	movs	r2, #8
  401276:	a905      	add	r1, sp, #20
  401278:	4b28      	ldr	r3, [pc, #160]	; (40131c <hif_send+0x1bc>)
  40127a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  40127c:	4683      	mov	fp, r0
  40127e:	2800      	cmp	r0, #0
  401280:	d140      	bne.n	401304 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  401282:	9b04      	ldr	r3, [sp, #16]
  401284:	3308      	adds	r3, #8
  401286:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  401288:	f1ba 0f00 	cmp.w	sl, #0
  40128c:	d00a      	beq.n	4012a4 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  40128e:	9804      	ldr	r0, [sp, #16]
  401290:	464a      	mov	r2, r9
  401292:	4651      	mov	r1, sl
  401294:	4b21      	ldr	r3, [pc, #132]	; (40131c <hif_send+0x1bc>)
  401296:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401298:	4683      	mov	fp, r0
  40129a:	2800      	cmp	r0, #0
  40129c:	d132      	bne.n	401304 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40129e:	9b04      	ldr	r3, [sp, #16]
  4012a0:	444b      	add	r3, r9
  4012a2:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4012a4:	b174      	cbz	r4, 4012c4 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4012a6:	9b04      	ldr	r3, [sp, #16]
  4012a8:	ebc9 0505 	rsb	r5, r9, r5
  4012ac:	441d      	add	r5, r3
  4012ae:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4012b0:	9804      	ldr	r0, [sp, #16]
  4012b2:	4632      	mov	r2, r6
  4012b4:	4621      	mov	r1, r4
  4012b6:	4b19      	ldr	r3, [pc, #100]	; (40131c <hif_send+0x1bc>)
  4012b8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4012ba:	4683      	mov	fp, r0
  4012bc:	bb10      	cbnz	r0, 401304 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4012be:	9b04      	ldr	r3, [sp, #16]
  4012c0:	441e      	add	r6, r3
  4012c2:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4012c4:	9b03      	ldr	r3, [sp, #12]
  4012c6:	009b      	lsls	r3, r3, #2
  4012c8:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4012ca:	9b02      	ldr	r3, [sp, #8]
  4012cc:	f043 0302 	orr.w	r3, r3, #2
  4012d0:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4012d2:	9902      	ldr	r1, [sp, #8]
  4012d4:	f241 006c 	movw	r0, #4204	; 0x106c
  4012d8:	4b0d      	ldr	r3, [pc, #52]	; (401310 <hif_send+0x1b0>)
  4012da:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4012dc:	4683      	mov	fp, r0
  4012de:	b988      	cbnz	r0, 401304 <hif_send+0x1a4>
  4012e0:	e00a      	b.n	4012f8 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4012e2:	f240 12ab 	movw	r2, #427	; 0x1ab
  4012e6:	490e      	ldr	r1, [pc, #56]	; (401320 <hif_send+0x1c0>)
  4012e8:	480e      	ldr	r0, [pc, #56]	; (401324 <hif_send+0x1c4>)
  4012ea:	4c0f      	ldr	r4, [pc, #60]	; (401328 <hif_send+0x1c8>)
  4012ec:	47a0      	blx	r4
  4012ee:	480f      	ldr	r0, [pc, #60]	; (40132c <hif_send+0x1cc>)
  4012f0:	47a0      	blx	r4
  4012f2:	480f      	ldr	r0, [pc, #60]	; (401330 <hif_send+0x1d0>)
  4012f4:	47a0      	blx	r4
		goto ERR1;
  4012f6:	e005      	b.n	401304 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  4012f8:	4b0e      	ldr	r3, [pc, #56]	; (401334 <hif_send+0x1d4>)
  4012fa:	4798      	blx	r3
  4012fc:	4683      	mov	fp, r0
  4012fe:	e001      	b.n	401304 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  401300:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  401304:	4658      	mov	r0, fp
  401306:	b007      	add	sp, #28
  401308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40130c:	0040107d 	.word	0x0040107d
  401310:	00402151 	.word	0x00402151
  401314:	00402145 	.word	0x00402145
  401318:	00150400 	.word	0x00150400
  40131c:	004021bd 	.word	0x004021bd
  401320:	0040f0b4 	.word	0x0040f0b4
  401324:	0040ee10 	.word	0x0040ee10
  401328:	00405e29 	.word	0x00405e29
  40132c:	0040ee64 	.word	0x0040ee64
  401330:	0040ee38 	.word	0x0040ee38
  401334:	004010d5 	.word	0x004010d5

00401338 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  401338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40133c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40133e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 40163c <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  401342:	4fa3      	ldr	r7, [pc, #652]	; (4015d0 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401344:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 401640 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401348:	4ea2      	ldr	r6, [pc, #648]	; (4015d4 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40134a:	e17b      	b.n	401644 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  40134c:	f899 3000 	ldrb.w	r3, [r9]
  401350:	3b01      	subs	r3, #1
  401352:	b2db      	uxtb	r3, r3
  401354:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  401358:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40135a:	4604      	mov	r4, r0
  40135c:	2800      	cmp	r0, #0
  40135e:	f040 811a 	bne.w	401596 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  401362:	a903      	add	r1, sp, #12
  401364:	f241 0070 	movw	r0, #4208	; 0x1070
  401368:	4b9b      	ldr	r3, [pc, #620]	; (4015d8 <hif_handle_isr+0x2a0>)
  40136a:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  40136c:	4604      	mov	r4, r0
  40136e:	2800      	cmp	r0, #0
  401370:	f040 8106 	bne.w	401580 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  401374:	9b03      	ldr	r3, [sp, #12]
  401376:	f013 0f01 	tst.w	r3, #1
  40137a:	f000 80f5 	beq.w	401568 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  40137e:	4b97      	ldr	r3, [pc, #604]	; (4015dc <hif_handle_isr+0x2a4>)
  401380:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  401382:	9903      	ldr	r1, [sp, #12]
  401384:	f021 0101 	bic.w	r1, r1, #1
  401388:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40138a:	f241 0070 	movw	r0, #4208	; 0x1070
  40138e:	4b94      	ldr	r3, [pc, #592]	; (4015e0 <hif_handle_isr+0x2a8>)
  401390:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  401392:	4604      	mov	r4, r0
  401394:	2800      	cmp	r0, #0
  401396:	f040 810e 	bne.w	4015b6 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  40139a:	2200      	movs	r2, #0
  40139c:	4b91      	ldr	r3, [pc, #580]	; (4015e4 <hif_handle_isr+0x2ac>)
  40139e:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4013a0:	9d03      	ldr	r5, [sp, #12]
  4013a2:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4013a6:	2d00      	cmp	r5, #0
  4013a8:	f000 80d1 	beq.w	40154e <hif_handle_isr+0x216>
					uint32 address = 0;
  4013ac:	a906      	add	r1, sp, #24
  4013ae:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4013b2:	f241 0084 	movw	r0, #4228	; 0x1084
  4013b6:	4b88      	ldr	r3, [pc, #544]	; (4015d8 <hif_handle_isr+0x2a0>)
  4013b8:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4013ba:	4604      	mov	r4, r0
  4013bc:	b168      	cbz	r0, 4013da <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4013be:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  4013c2:	4641      	mov	r1, r8
  4013c4:	4630      	mov	r0, r6
  4013c6:	4d88      	ldr	r5, [pc, #544]	; (4015e8 <hif_handle_isr+0x2b0>)
  4013c8:	47a8      	blx	r5
  4013ca:	4888      	ldr	r0, [pc, #544]	; (4015ec <hif_handle_isr+0x2b4>)
  4013cc:	47a8      	blx	r5
  4013ce:	4888      	ldr	r0, [pc, #544]	; (4015f0 <hif_handle_isr+0x2b8>)
  4013d0:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4013d2:	2001      	movs	r0, #1
  4013d4:	4b81      	ldr	r3, [pc, #516]	; (4015dc <hif_handle_isr+0x2a4>)
  4013d6:	4798      	blx	r3
  4013d8:	e0eb      	b.n	4015b2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4013da:	2204      	movs	r2, #4
  4013dc:	a904      	add	r1, sp, #16
  4013de:	9805      	ldr	r0, [sp, #20]
  4013e0:	4b84      	ldr	r3, [pc, #528]	; (4015f4 <hif_handle_isr+0x2bc>)
  4013e2:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4013e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4013e8:	b29b      	uxth	r3, r3
  4013ea:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4013ee:	4604      	mov	r4, r0
  4013f0:	b168      	cbz	r0, 40140e <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  4013f2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
  4013f6:	4641      	mov	r1, r8
  4013f8:	4630      	mov	r0, r6
  4013fa:	4d7b      	ldr	r5, [pc, #492]	; (4015e8 <hif_handle_isr+0x2b0>)
  4013fc:	47a8      	blx	r5
  4013fe:	487e      	ldr	r0, [pc, #504]	; (4015f8 <hif_handle_isr+0x2c0>)
  401400:	47a8      	blx	r5
  401402:	487b      	ldr	r0, [pc, #492]	; (4015f0 <hif_handle_isr+0x2b8>)
  401404:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  401406:	2001      	movs	r0, #1
  401408:	4b74      	ldr	r3, [pc, #464]	; (4015dc <hif_handle_isr+0x2a4>)
  40140a:	4798      	blx	r3
  40140c:	e0d1      	b.n	4015b2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40140e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401412:	b29b      	uxth	r3, r3
  401414:	429d      	cmp	r5, r3
  401416:	d01e      	beq.n	401456 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  401418:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40141c:	b29b      	uxth	r3, r3
  40141e:	1aeb      	subs	r3, r5, r3
  401420:	2b04      	cmp	r3, #4
  401422:	dd18      	ble.n	401456 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401424:	f240 12eb 	movw	r2, #491	; 0x1eb
  401428:	4641      	mov	r1, r8
  40142a:	4630      	mov	r0, r6
  40142c:	4c6e      	ldr	r4, [pc, #440]	; (4015e8 <hif_handle_isr+0x2b0>)
  40142e:	47a0      	blx	r4
  401430:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  401434:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401438:	f89d 1011 	ldrb.w	r1, [sp, #17]
  40143c:	9100      	str	r1, [sp, #0]
  40143e:	b292      	uxth	r2, r2
  401440:	4629      	mov	r1, r5
  401442:	486e      	ldr	r0, [pc, #440]	; (4015fc <hif_handle_isr+0x2c4>)
  401444:	47a0      	blx	r4
  401446:	486a      	ldr	r0, [pc, #424]	; (4015f0 <hif_handle_isr+0x2b8>)
  401448:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  40144a:	2001      	movs	r0, #1
  40144c:	4b63      	ldr	r3, [pc, #396]	; (4015dc <hif_handle_isr+0x2a4>)
  40144e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  401450:	f06f 0405 	mvn.w	r4, #5
  401454:	e0ad      	b.n	4015b2 <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  401456:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40145a:	b2db      	uxtb	r3, r3
  40145c:	2b01      	cmp	r3, #1
  40145e:	d10d      	bne.n	40147c <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  401460:	4b67      	ldr	r3, [pc, #412]	; (401600 <hif_handle_isr+0x2c8>)
  401462:	681b      	ldr	r3, [r3, #0]
  401464:	2b00      	cmp	r3, #0
  401466:	d060      	beq.n	40152a <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401468:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40146c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401470:	3908      	subs	r1, #8
  401472:	9a05      	ldr	r2, [sp, #20]
  401474:	3208      	adds	r2, #8
  401476:	b289      	uxth	r1, r1
  401478:	4798      	blx	r3
  40147a:	e056      	b.n	40152a <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40147c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401480:	b2db      	uxtb	r3, r3
  401482:	2b02      	cmp	r3, #2
  401484:	d10d      	bne.n	4014a2 <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  401486:	4b5f      	ldr	r3, [pc, #380]	; (401604 <hif_handle_isr+0x2cc>)
  401488:	681b      	ldr	r3, [r3, #0]
  40148a:	2b00      	cmp	r3, #0
  40148c:	d04d      	beq.n	40152a <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40148e:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401492:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401496:	3908      	subs	r1, #8
  401498:	9a05      	ldr	r2, [sp, #20]
  40149a:	3208      	adds	r2, #8
  40149c:	b289      	uxth	r1, r1
  40149e:	4798      	blx	r3
  4014a0:	e043      	b.n	40152a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4014a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4014a6:	b2db      	uxtb	r3, r3
  4014a8:	2b04      	cmp	r3, #4
  4014aa:	d10d      	bne.n	4014c8 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  4014ac:	4b56      	ldr	r3, [pc, #344]	; (401608 <hif_handle_isr+0x2d0>)
  4014ae:	681b      	ldr	r3, [r3, #0]
  4014b0:	2b00      	cmp	r3, #0
  4014b2:	d03a      	beq.n	40152a <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4014b4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4014b8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4014bc:	3908      	subs	r1, #8
  4014be:	9a05      	ldr	r2, [sp, #20]
  4014c0:	3208      	adds	r2, #8
  4014c2:	b289      	uxth	r1, r1
  4014c4:	4798      	blx	r3
  4014c6:	e030      	b.n	40152a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4014c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4014cc:	b2db      	uxtb	r3, r3
  4014ce:	2b06      	cmp	r3, #6
  4014d0:	d10c      	bne.n	4014ec <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4014d2:	4b4e      	ldr	r3, [pc, #312]	; (40160c <hif_handle_isr+0x2d4>)
  4014d4:	681b      	ldr	r3, [r3, #0]
  4014d6:	b343      	cbz	r3, 40152a <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4014d8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4014dc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4014e0:	3908      	subs	r1, #8
  4014e2:	9a05      	ldr	r2, [sp, #20]
  4014e4:	3208      	adds	r2, #8
  4014e6:	b289      	uxth	r1, r1
  4014e8:	4798      	blx	r3
  4014ea:	e01e      	b.n	40152a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4014ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4014f0:	b2db      	uxtb	r3, r3
  4014f2:	2b07      	cmp	r3, #7
  4014f4:	d10c      	bne.n	401510 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  4014f6:	4b46      	ldr	r3, [pc, #280]	; (401610 <hif_handle_isr+0x2d8>)
  4014f8:	681b      	ldr	r3, [r3, #0]
  4014fa:	b1b3      	cbz	r3, 40152a <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4014fc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401500:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401504:	3908      	subs	r1, #8
  401506:	9a05      	ldr	r2, [sp, #20]
  401508:	3208      	adds	r2, #8
  40150a:	b289      	uxth	r1, r1
  40150c:	4798      	blx	r3
  40150e:	e00c      	b.n	40152a <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  401510:	f240 220e 	movw	r2, #526	; 0x20e
  401514:	4641      	mov	r1, r8
  401516:	4630      	mov	r0, r6
  401518:	4c33      	ldr	r4, [pc, #204]	; (4015e8 <hif_handle_isr+0x2b0>)
  40151a:	47a0      	blx	r4
  40151c:	483d      	ldr	r0, [pc, #244]	; (401614 <hif_handle_isr+0x2dc>)
  40151e:	47a0      	blx	r4
  401520:	4833      	ldr	r0, [pc, #204]	; (4015f0 <hif_handle_isr+0x2b8>)
  401522:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  401524:	f06f 0405 	mvn.w	r4, #5
  401528:	e043      	b.n	4015b2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  40152a:	4b2e      	ldr	r3, [pc, #184]	; (4015e4 <hif_handle_isr+0x2ac>)
  40152c:	781b      	ldrb	r3, [r3, #0]
  40152e:	f013 0fff 	tst.w	r3, #255	; 0xff
  401532:	d13b      	bne.n	4015ac <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  401534:	f240 2215 	movw	r2, #533	; 0x215
  401538:	4641      	mov	r1, r8
  40153a:	4630      	mov	r0, r6
  40153c:	4c2a      	ldr	r4, [pc, #168]	; (4015e8 <hif_handle_isr+0x2b0>)
  40153e:	47a0      	blx	r4
  401540:	4835      	ldr	r0, [pc, #212]	; (401618 <hif_handle_isr+0x2e0>)
  401542:	47a0      	blx	r4
  401544:	482a      	ldr	r0, [pc, #168]	; (4015f0 <hif_handle_isr+0x2b8>)
  401546:	47a0      	blx	r4
						ret = hif_set_rx_done();
  401548:	4b34      	ldr	r3, [pc, #208]	; (40161c <hif_handle_isr+0x2e4>)
  40154a:	4798      	blx	r3
  40154c:	e02e      	b.n	4015ac <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  40154e:	f240 221d 	movw	r2, #541	; 0x21d
  401552:	4641      	mov	r1, r8
  401554:	4630      	mov	r0, r6
  401556:	4c24      	ldr	r4, [pc, #144]	; (4015e8 <hif_handle_isr+0x2b0>)
  401558:	47a0      	blx	r4
  40155a:	4831      	ldr	r0, [pc, #196]	; (401620 <hif_handle_isr+0x2e8>)
  40155c:	47a0      	blx	r4
  40155e:	4824      	ldr	r0, [pc, #144]	; (4015f0 <hif_handle_isr+0x2b8>)
  401560:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  401562:	f06f 0401 	mvn.w	r4, #1
  401566:	e026      	b.n	4015b6 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  401568:	f44f 7209 	mov.w	r2, #548	; 0x224
  40156c:	4641      	mov	r1, r8
  40156e:	4630      	mov	r0, r6
  401570:	4c1d      	ldr	r4, [pc, #116]	; (4015e8 <hif_handle_isr+0x2b0>)
  401572:	47a0      	blx	r4
  401574:	9903      	ldr	r1, [sp, #12]
  401576:	482b      	ldr	r0, [pc, #172]	; (401624 <hif_handle_isr+0x2ec>)
  401578:	47a0      	blx	r4
  40157a:	481d      	ldr	r0, [pc, #116]	; (4015f0 <hif_handle_isr+0x2b8>)
  40157c:	47a0      	blx	r4
  40157e:	e015      	b.n	4015ac <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  401580:	f240 222a 	movw	r2, #554	; 0x22a
  401584:	4641      	mov	r1, r8
  401586:	4630      	mov	r0, r6
  401588:	4d17      	ldr	r5, [pc, #92]	; (4015e8 <hif_handle_isr+0x2b0>)
  40158a:	47a8      	blx	r5
  40158c:	4826      	ldr	r0, [pc, #152]	; (401628 <hif_handle_isr+0x2f0>)
  40158e:	47a8      	blx	r5
  401590:	4817      	ldr	r0, [pc, #92]	; (4015f0 <hif_handle_isr+0x2b8>)
  401592:	47a8      	blx	r5
  401594:	e00f      	b.n	4015b6 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401596:	f44f 720c 	mov.w	r2, #560	; 0x230
  40159a:	4641      	mov	r1, r8
  40159c:	4630      	mov	r0, r6
  40159e:	4d12      	ldr	r5, [pc, #72]	; (4015e8 <hif_handle_isr+0x2b0>)
  4015a0:	47a8      	blx	r5
  4015a2:	4822      	ldr	r0, [pc, #136]	; (40162c <hif_handle_isr+0x2f4>)
  4015a4:	47a8      	blx	r5
  4015a6:	4812      	ldr	r0, [pc, #72]	; (4015f0 <hif_handle_isr+0x2b8>)
  4015a8:	47a8      	blx	r5
  4015aa:	e004      	b.n	4015b6 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  4015ac:	4b20      	ldr	r3, [pc, #128]	; (401630 <hif_handle_isr+0x2f8>)
  4015ae:	4798      	blx	r3
  4015b0:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  4015b2:	2c00      	cmp	r4, #0
  4015b4:	d046      	beq.n	401644 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4015b6:	f240 224f 	movw	r2, #591	; 0x24f
  4015ba:	491e      	ldr	r1, [pc, #120]	; (401634 <hif_handle_isr+0x2fc>)
  4015bc:	4630      	mov	r0, r6
  4015be:	4d0a      	ldr	r5, [pc, #40]	; (4015e8 <hif_handle_isr+0x2b0>)
  4015c0:	47a8      	blx	r5
  4015c2:	4621      	mov	r1, r4
  4015c4:	481c      	ldr	r0, [pc, #112]	; (401638 <hif_handle_isr+0x300>)
  4015c6:	47a8      	blx	r5
  4015c8:	4809      	ldr	r0, [pc, #36]	; (4015f0 <hif_handle_isr+0x2b8>)
  4015ca:	47a8      	blx	r5
			}
		}
  4015cc:	e6c4      	b.n	401358 <hif_handle_isr+0x20>
  4015ce:	bf00      	nop
  4015d0:	0040107d 	.word	0x0040107d
  4015d4:	0040ee10 	.word	0x0040ee10
  4015d8:	00402145 	.word	0x00402145
  4015dc:	00400e0d 	.word	0x00400e0d
  4015e0:	00402151 	.word	0x00402151
  4015e4:	20000b1c 	.word	0x20000b1c
  4015e8:	00405e29 	.word	0x00405e29
  4015ec:	0040ee84 	.word	0x0040ee84
  4015f0:	0040ee38 	.word	0x0040ee38
  4015f4:	0040215d 	.word	0x0040215d
  4015f8:	0040eeac 	.word	0x0040eeac
  4015fc:	0040eec4 	.word	0x0040eec4
  401600:	20000b00 	.word	0x20000b00
  401604:	20000b18 	.word	0x20000b18
  401608:	20000b20 	.word	0x20000b20
  40160c:	20000afc 	.word	0x20000afc
  401610:	20000b10 	.word	0x20000b10
  401614:	0040ef04 	.word	0x0040ef04
  401618:	0040ef1c 	.word	0x0040ef1c
  40161c:	00400ff5 	.word	0x00400ff5
  401620:	0040ef40 	.word	0x0040ef40
  401624:	0040ef54 	.word	0x0040ef54
  401628:	0040ef70 	.word	0x0040ef70
  40162c:	0040ef94 	.word	0x0040ef94
  401630:	004010d5 	.word	0x004010d5
  401634:	0040ee54 	.word	0x0040ee54
  401638:	0040efb4 	.word	0x0040efb4
  40163c:	20000b08 	.word	0x20000b08
  401640:	0040ee4c 	.word	0x0040ee4c

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401644:	f899 3000 	ldrb.w	r3, [r9]
  401648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40164c:	f47f ae7e 	bne.w	40134c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  401650:	2000      	movs	r0, #0
  401652:	b007      	add	sp, #28
  401654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00401658 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  401658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40165c:	b083      	sub	sp, #12
  40165e:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  401660:	b120      	cbz	r0, 40166c <hif_receive+0x14>
  401662:	460d      	mov	r5, r1
  401664:	4616      	mov	r6, r2
  401666:	4607      	mov	r7, r0
  401668:	b101      	cbz	r1, 40166c <hif_receive+0x14>
  40166a:	b9a2      	cbnz	r2, 401696 <hif_receive+0x3e>
	{
		if(isDone)
  40166c:	b134      	cbz	r4, 40167c <hif_receive+0x24>
		{
			gu8HifSizeDone = 1;
  40166e:	2201      	movs	r2, #1
  401670:	4b31      	ldr	r3, [pc, #196]	; (401738 <hif_receive+0xe0>)
  401672:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401674:	4b31      	ldr	r3, [pc, #196]	; (40173c <hif_receive+0xe4>)
  401676:	4798      	blx	r3
  401678:	4603      	mov	r3, r0
  40167a:	e058      	b.n	40172e <hif_receive+0xd6>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  40167c:	f240 2275 	movw	r2, #629	; 0x275
  401680:	492f      	ldr	r1, [pc, #188]	; (401740 <hif_receive+0xe8>)
  401682:	4830      	ldr	r0, [pc, #192]	; (401744 <hif_receive+0xec>)
  401684:	4c30      	ldr	r4, [pc, #192]	; (401748 <hif_receive+0xf0>)
  401686:	47a0      	blx	r4
  401688:	4830      	ldr	r0, [pc, #192]	; (40174c <hif_receive+0xf4>)
  40168a:	47a0      	blx	r4
  40168c:	4830      	ldr	r0, [pc, #192]	; (401750 <hif_receive+0xf8>)
  40168e:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  401690:	f06f 030b 	mvn.w	r3, #11
  401694:	e04b      	b.n	40172e <hif_receive+0xd6>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401696:	4669      	mov	r1, sp
  401698:	f241 0070 	movw	r0, #4208	; 0x1070
  40169c:	4b2d      	ldr	r3, [pc, #180]	; (401754 <hif_receive+0xfc>)
  40169e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4016a0:	4603      	mov	r3, r0
  4016a2:	2800      	cmp	r0, #0
  4016a4:	d143      	bne.n	40172e <hif_receive+0xd6>


	size = (uint16)((reg >> 2) & 0xfff);
  4016a6:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  4016aa:	a901      	add	r1, sp, #4
  4016ac:	f241 0084 	movw	r0, #4228	; 0x1084
  4016b0:	4b28      	ldr	r3, [pc, #160]	; (401754 <hif_receive+0xfc>)
  4016b2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4016b4:	4603      	mov	r3, r0
  4016b6:	2800      	cmp	r0, #0
  4016b8:	d139      	bne.n	40172e <hif_receive+0xd6>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  4016ba:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  4016be:	4546      	cmp	r6, r8
  4016c0:	d90e      	bls.n	4016e0 <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  4016c2:	f240 2286 	movw	r2, #646	; 0x286
  4016c6:	491e      	ldr	r1, [pc, #120]	; (401740 <hif_receive+0xe8>)
  4016c8:	481e      	ldr	r0, [pc, #120]	; (401744 <hif_receive+0xec>)
  4016ca:	4c1f      	ldr	r4, [pc, #124]	; (401748 <hif_receive+0xf0>)
  4016cc:	47a0      	blx	r4
  4016ce:	4642      	mov	r2, r8
  4016d0:	4631      	mov	r1, r6
  4016d2:	4821      	ldr	r0, [pc, #132]	; (401758 <hif_receive+0x100>)
  4016d4:	47a0      	blx	r4
  4016d6:	481e      	ldr	r0, [pc, #120]	; (401750 <hif_receive+0xf8>)
  4016d8:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  4016da:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  4016de:	e026      	b.n	40172e <hif_receive+0xd6>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4016e0:	9b01      	ldr	r3, [sp, #4]
  4016e2:	429f      	cmp	r7, r3
  4016e4:	d304      	bcc.n	4016f0 <hif_receive+0x98>
  4016e6:	eb07 0906 	add.w	r9, r7, r6
  4016ea:	4443      	add	r3, r8
  4016ec:	4599      	cmp	r9, r3
  4016ee:	d90c      	bls.n	40170a <hif_receive+0xb2>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  4016f0:	f44f 7223 	mov.w	r2, #652	; 0x28c
  4016f4:	4912      	ldr	r1, [pc, #72]	; (401740 <hif_receive+0xe8>)
  4016f6:	4813      	ldr	r0, [pc, #76]	; (401744 <hif_receive+0xec>)
  4016f8:	4c13      	ldr	r4, [pc, #76]	; (401748 <hif_receive+0xf0>)
  4016fa:	47a0      	blx	r4
  4016fc:	4817      	ldr	r0, [pc, #92]	; (40175c <hif_receive+0x104>)
  4016fe:	47a0      	blx	r4
  401700:	4813      	ldr	r0, [pc, #76]	; (401750 <hif_receive+0xf8>)
  401702:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  401704:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  401708:	e011      	b.n	40172e <hif_receive+0xd6>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  40170a:	4632      	mov	r2, r6
  40170c:	4629      	mov	r1, r5
  40170e:	4638      	mov	r0, r7
  401710:	4b13      	ldr	r3, [pc, #76]	; (401760 <hif_receive+0x108>)
  401712:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401714:	4603      	mov	r3, r0
  401716:	b950      	cbnz	r0, 40172e <hif_receive+0xd6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  401718:	9a01      	ldr	r2, [sp, #4]
  40171a:	4442      	add	r2, r8
  40171c:	4591      	cmp	r9, r2
  40171e:	d000      	beq.n	401722 <hif_receive+0xca>
  401720:	b12c      	cbz	r4, 40172e <hif_receive+0xd6>
	{
		gu8HifSizeDone = 1;
  401722:	2201      	movs	r2, #1
  401724:	4b04      	ldr	r3, [pc, #16]	; (401738 <hif_receive+0xe0>)
  401726:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  401728:	4b04      	ldr	r3, [pc, #16]	; (40173c <hif_receive+0xe4>)
  40172a:	4798      	blx	r3
  40172c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  40172e:	4618      	mov	r0, r3
  401730:	b003      	add	sp, #12
  401732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401736:	bf00      	nop
  401738:	20000b1c 	.word	0x20000b1c
  40173c:	00400ff5 	.word	0x00400ff5
  401740:	0040f098 	.word	0x0040f098
  401744:	0040ee10 	.word	0x0040ee10
  401748:	00405e29 	.word	0x00405e29
  40174c:	0040efe4 	.word	0x0040efe4
  401750:	0040ee38 	.word	0x0040ee38
  401754:	00402145 	.word	0x00402145
  401758:	0040f004 	.word	0x0040f004
  40175c:	0040f048 	.word	0x0040f048
  401760:	0040215d 	.word	0x0040215d

00401764 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  401764:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  401766:	1e43      	subs	r3, r0, #1
  401768:	2b06      	cmp	r3, #6
  40176a:	d81d      	bhi.n	4017a8 <hif_register_cb+0x44>
  40176c:	e8df f003 	tbb	[pc, r3]
  401770:	0c100408 	.word	0x0c100408
  401774:	141c      	.short	0x141c
  401776:	18          	.byte	0x18
  401777:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401778:	4b13      	ldr	r3, [pc, #76]	; (4017c8 <hif_register_cb+0x64>)
  40177a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  40177c:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  40177e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401780:	4b12      	ldr	r3, [pc, #72]	; (4017cc <hif_register_cb+0x68>)
  401782:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401784:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  401786:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  401788:	4b11      	ldr	r3, [pc, #68]	; (4017d0 <hif_register_cb+0x6c>)
  40178a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  40178c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  40178e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401790:	4b10      	ldr	r3, [pc, #64]	; (4017d4 <hif_register_cb+0x70>)
  401792:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401794:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  401796:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  401798:	4b0f      	ldr	r3, [pc, #60]	; (4017d8 <hif_register_cb+0x74>)
  40179a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  40179c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  40179e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  4017a0:	4b0e      	ldr	r3, [pc, #56]	; (4017dc <hif_register_cb+0x78>)
  4017a2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  4017a4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  4017a6:	bd38      	pop	{r3, r4, r5, pc}
  4017a8:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  4017aa:	f240 22c5 	movw	r2, #709	; 0x2c5
  4017ae:	490c      	ldr	r1, [pc, #48]	; (4017e0 <hif_register_cb+0x7c>)
  4017b0:	480c      	ldr	r0, [pc, #48]	; (4017e4 <hif_register_cb+0x80>)
  4017b2:	4d0d      	ldr	r5, [pc, #52]	; (4017e8 <hif_register_cb+0x84>)
  4017b4:	47a8      	blx	r5
  4017b6:	4621      	mov	r1, r4
  4017b8:	480c      	ldr	r0, [pc, #48]	; (4017ec <hif_register_cb+0x88>)
  4017ba:	47a8      	blx	r5
  4017bc:	480c      	ldr	r0, [pc, #48]	; (4017f0 <hif_register_cb+0x8c>)
  4017be:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  4017c0:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  4017c4:	bd38      	pop	{r3, r4, r5, pc}
  4017c6:	bf00      	nop
  4017c8:	20000b18 	.word	0x20000b18
  4017cc:	20000b00 	.word	0x20000b00
  4017d0:	20000b20 	.word	0x20000b20
  4017d4:	20000b0c 	.word	0x20000b0c
  4017d8:	20000afc 	.word	0x20000afc
  4017dc:	20000b10 	.word	0x20000b10
  4017e0:	0040f0a4 	.word	0x0040f0a4
  4017e4:	0040ee10 	.word	0x0040ee10
  4017e8:	00405e29 	.word	0x00405e29
  4017ec:	0040f08c 	.word	0x0040f08c
  4017f0:	0040ee38 	.word	0x0040ee38

004017f4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  4017f4:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  4017f6:	2400      	movs	r4, #0
  4017f8:	4b09      	ldr	r3, [pc, #36]	; (401820 <hif_init+0x2c>)
  4017fa:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  4017fc:	4b09      	ldr	r3, [pc, #36]	; (401824 <hif_init+0x30>)
  4017fe:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  401800:	4b09      	ldr	r3, [pc, #36]	; (401828 <hif_init+0x34>)
  401802:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401804:	4b09      	ldr	r3, [pc, #36]	; (40182c <hif_init+0x38>)
  401806:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  401808:	4b09      	ldr	r3, [pc, #36]	; (401830 <hif_init+0x3c>)
  40180a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  40180c:	4809      	ldr	r0, [pc, #36]	; (401834 <hif_init+0x40>)
  40180e:	4b0a      	ldr	r3, [pc, #40]	; (401838 <hif_init+0x44>)
  401810:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401812:	490a      	ldr	r1, [pc, #40]	; (40183c <hif_init+0x48>)
  401814:	2003      	movs	r0, #3
  401816:	4b0a      	ldr	r3, [pc, #40]	; (401840 <hif_init+0x4c>)
  401818:	4798      	blx	r3

	return M2M_SUCCESS;
}
  40181a:	4620      	mov	r0, r4
  40181c:	bd10      	pop	{r4, pc}
  40181e:	bf00      	nop
  401820:	20000b00 	.word	0x20000b00
  401824:	20000b18 	.word	0x20000b18
  401828:	20000b24 	.word	0x20000b24
  40182c:	20000b14 	.word	0x20000b14
  401830:	20000b08 	.word	0x20000b08
  401834:	00401035 	.word	0x00401035
  401838:	00400d9d 	.word	0x00400d9d
  40183c:	00400ff1 	.word	0x00400ff1
  401840:	00401765 	.word	0x00401765

00401844 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401844:	b530      	push	{r4, r5, lr}
  401846:	b09f      	sub	sp, #124	; 0x7c
  401848:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  40184a:	282c      	cmp	r0, #44	; 0x2c
  40184c:	d111      	bne.n	401872 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  40184e:	2300      	movs	r3, #0
  401850:	2204      	movs	r2, #4
  401852:	a903      	add	r1, sp, #12
  401854:	4628      	mov	r0, r5
  401856:	4c90      	ldr	r4, [pc, #576]	; (401a98 <m2m_wifi_cb+0x254>)
  401858:	47a0      	blx	r4
  40185a:	2800      	cmp	r0, #0
  40185c:	f040 8119 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401860:	4b8e      	ldr	r3, [pc, #568]	; (401a9c <m2m_wifi_cb+0x258>)
  401862:	681b      	ldr	r3, [r3, #0]
  401864:	2b00      	cmp	r3, #0
  401866:	f000 8114 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  40186a:	a903      	add	r1, sp, #12
  40186c:	202c      	movs	r0, #44	; 0x2c
  40186e:	4798      	blx	r3
  401870:	e10f      	b.n	401a92 <m2m_wifi_cb+0x24e>
  401872:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  401874:	281b      	cmp	r0, #27
  401876:	d111      	bne.n	40189c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401878:	2300      	movs	r3, #0
  40187a:	2208      	movs	r2, #8
  40187c:	a903      	add	r1, sp, #12
  40187e:	4628      	mov	r0, r5
  401880:	4c85      	ldr	r4, [pc, #532]	; (401a98 <m2m_wifi_cb+0x254>)
  401882:	47a0      	blx	r4
  401884:	2800      	cmp	r0, #0
  401886:	f040 8104 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  40188a:	4b84      	ldr	r3, [pc, #528]	; (401a9c <m2m_wifi_cb+0x258>)
  40188c:	681b      	ldr	r3, [r3, #0]
  40188e:	2b00      	cmp	r3, #0
  401890:	f000 80ff 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401894:	a903      	add	r1, sp, #12
  401896:	201b      	movs	r0, #27
  401898:	4798      	blx	r3
  40189a:	e0fa      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  40189c:	2806      	cmp	r0, #6
  40189e:	d111      	bne.n	4018c4 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  4018a0:	2301      	movs	r3, #1
  4018a2:	2230      	movs	r2, #48	; 0x30
  4018a4:	a903      	add	r1, sp, #12
  4018a6:	4628      	mov	r0, r5
  4018a8:	4c7b      	ldr	r4, [pc, #492]	; (401a98 <m2m_wifi_cb+0x254>)
  4018aa:	47a0      	blx	r4
  4018ac:	2800      	cmp	r0, #0
  4018ae:	f040 80f0 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  4018b2:	4b7a      	ldr	r3, [pc, #488]	; (401a9c <m2m_wifi_cb+0x258>)
  4018b4:	681b      	ldr	r3, [r3, #0]
  4018b6:	2b00      	cmp	r3, #0
  4018b8:	f000 80eb 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  4018bc:	a903      	add	r1, sp, #12
  4018be:	2006      	movs	r0, #6
  4018c0:	4798      	blx	r3
  4018c2:	e0e6      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4018c4:	280e      	cmp	r0, #14
  4018c6:	f000 80e4 	beq.w	401a92 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4018ca:	2832      	cmp	r0, #50	; 0x32
  4018cc:	d111      	bne.n	4018f2 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  4018ce:	2300      	movs	r3, #0
  4018d0:	2210      	movs	r2, #16
  4018d2:	a903      	add	r1, sp, #12
  4018d4:	4628      	mov	r0, r5
  4018d6:	4c70      	ldr	r4, [pc, #448]	; (401a98 <m2m_wifi_cb+0x254>)
  4018d8:	47a0      	blx	r4
  4018da:	2800      	cmp	r0, #0
  4018dc:	f040 80d9 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4018e0:	4b6e      	ldr	r3, [pc, #440]	; (401a9c <m2m_wifi_cb+0x258>)
  4018e2:	681b      	ldr	r3, [r3, #0]
  4018e4:	2b00      	cmp	r3, #0
  4018e6:	f000 80d4 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  4018ea:	a903      	add	r1, sp, #12
  4018ec:	2032      	movs	r0, #50	; 0x32
  4018ee:	4798      	blx	r3
  4018f0:	e0cf      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  4018f2:	282f      	cmp	r0, #47	; 0x2f
  4018f4:	d116      	bne.n	401924 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  4018f6:	2264      	movs	r2, #100	; 0x64
  4018f8:	2100      	movs	r1, #0
  4018fa:	a803      	add	r0, sp, #12
  4018fc:	4b68      	ldr	r3, [pc, #416]	; (401aa0 <m2m_wifi_cb+0x25c>)
  4018fe:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401900:	2300      	movs	r3, #0
  401902:	2264      	movs	r2, #100	; 0x64
  401904:	a903      	add	r1, sp, #12
  401906:	4628      	mov	r0, r5
  401908:	4c63      	ldr	r4, [pc, #396]	; (401a98 <m2m_wifi_cb+0x254>)
  40190a:	47a0      	blx	r4
  40190c:	2800      	cmp	r0, #0
  40190e:	f040 80c0 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401912:	4b62      	ldr	r3, [pc, #392]	; (401a9c <m2m_wifi_cb+0x258>)
  401914:	681b      	ldr	r3, [r3, #0]
  401916:	2b00      	cmp	r3, #0
  401918:	f000 80bb 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  40191c:	a903      	add	r1, sp, #12
  40191e:	202f      	movs	r0, #47	; 0x2f
  401920:	4798      	blx	r3
  401922:	e0b6      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401924:	2834      	cmp	r0, #52	; 0x34
  401926:	d120      	bne.n	40196a <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  401928:	2300      	movs	r3, #0
  40192a:	2204      	movs	r2, #4
  40192c:	a903      	add	r1, sp, #12
  40192e:	4628      	mov	r0, r5
  401930:	4c59      	ldr	r4, [pc, #356]	; (401a98 <m2m_wifi_cb+0x254>)
  401932:	47a0      	blx	r4
  401934:	2800      	cmp	r0, #0
  401936:	f040 80ac 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  40193a:	485a      	ldr	r0, [pc, #360]	; (401aa4 <m2m_wifi_cb+0x260>)
  40193c:	4c5a      	ldr	r4, [pc, #360]	; (401aa8 <m2m_wifi_cb+0x264>)
  40193e:	47a0      	blx	r4
  401940:	9903      	ldr	r1, [sp, #12]
  401942:	0e0b      	lsrs	r3, r1, #24
  401944:	9300      	str	r3, [sp, #0]
  401946:	f3c1 4307 	ubfx	r3, r1, #16, #8
  40194a:	f3c1 2207 	ubfx	r2, r1, #8, #8
  40194e:	b2c9      	uxtb	r1, r1
  401950:	4856      	ldr	r0, [pc, #344]	; (401aac <m2m_wifi_cb+0x268>)
  401952:	47a0      	blx	r4
  401954:	4856      	ldr	r0, [pc, #344]	; (401ab0 <m2m_wifi_cb+0x26c>)
  401956:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  401958:	4b50      	ldr	r3, [pc, #320]	; (401a9c <m2m_wifi_cb+0x258>)
  40195a:	681b      	ldr	r3, [r3, #0]
  40195c:	2b00      	cmp	r3, #0
  40195e:	f000 8098 	beq.w	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401962:	2100      	movs	r1, #0
  401964:	2034      	movs	r0, #52	; 0x34
  401966:	4798      	blx	r3
  401968:	e093      	b.n	401a92 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  40196a:	2811      	cmp	r0, #17
  40196c:	d116      	bne.n	40199c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  40196e:	2300      	movs	r3, #0
  401970:	4a50      	ldr	r2, [pc, #320]	; (401ab4 <m2m_wifi_cb+0x270>)
  401972:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  401974:	2204      	movs	r2, #4
  401976:	a903      	add	r1, sp, #12
  401978:	4628      	mov	r0, r5
  40197a:	4c47      	ldr	r4, [pc, #284]	; (401a98 <m2m_wifi_cb+0x254>)
  40197c:	47a0      	blx	r4
  40197e:	2800      	cmp	r0, #0
  401980:	f040 8087 	bne.w	401a92 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  401984:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401988:	4b4b      	ldr	r3, [pc, #300]	; (401ab8 <m2m_wifi_cb+0x274>)
  40198a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  40198c:	4b43      	ldr	r3, [pc, #268]	; (401a9c <m2m_wifi_cb+0x258>)
  40198e:	681b      	ldr	r3, [r3, #0]
  401990:	2b00      	cmp	r3, #0
  401992:	d07e      	beq.n	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401994:	a903      	add	r1, sp, #12
  401996:	2011      	movs	r0, #17
  401998:	4798      	blx	r3
  40199a:	e07a      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  40199c:	2813      	cmp	r0, #19
  40199e:	d10f      	bne.n	4019c0 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  4019a0:	2300      	movs	r3, #0
  4019a2:	222c      	movs	r2, #44	; 0x2c
  4019a4:	a903      	add	r1, sp, #12
  4019a6:	4628      	mov	r0, r5
  4019a8:	4c3b      	ldr	r4, [pc, #236]	; (401a98 <m2m_wifi_cb+0x254>)
  4019aa:	47a0      	blx	r4
  4019ac:	2800      	cmp	r0, #0
  4019ae:	d170      	bne.n	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4019b0:	4b3a      	ldr	r3, [pc, #232]	; (401a9c <m2m_wifi_cb+0x258>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	d06c      	beq.n	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  4019b8:	a903      	add	r1, sp, #12
  4019ba:	2013      	movs	r0, #19
  4019bc:	4798      	blx	r3
  4019be:	e068      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  4019c0:	2804      	cmp	r0, #4
  4019c2:	d10f      	bne.n	4019e4 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4019c4:	2300      	movs	r3, #0
  4019c6:	2204      	movs	r2, #4
  4019c8:	a91c      	add	r1, sp, #112	; 0x70
  4019ca:	4628      	mov	r0, r5
  4019cc:	4c32      	ldr	r4, [pc, #200]	; (401a98 <m2m_wifi_cb+0x254>)
  4019ce:	47a0      	blx	r4
  4019d0:	2800      	cmp	r0, #0
  4019d2:	d15e      	bne.n	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4019d4:	4b31      	ldr	r3, [pc, #196]	; (401a9c <m2m_wifi_cb+0x258>)
  4019d6:	681b      	ldr	r3, [r3, #0]
  4019d8:	2b00      	cmp	r3, #0
  4019da:	d05a      	beq.n	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  4019dc:	a91c      	add	r1, sp, #112	; 0x70
  4019de:	2004      	movs	r0, #4
  4019e0:	4798      	blx	r3
  4019e2:	e056      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  4019e4:	2865      	cmp	r0, #101	; 0x65
  4019e6:	d10f      	bne.n	401a08 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4019e8:	2300      	movs	r3, #0
  4019ea:	2204      	movs	r2, #4
  4019ec:	a91c      	add	r1, sp, #112	; 0x70
  4019ee:	4628      	mov	r0, r5
  4019f0:	4c29      	ldr	r4, [pc, #164]	; (401a98 <m2m_wifi_cb+0x254>)
  4019f2:	47a0      	blx	r4
  4019f4:	2800      	cmp	r0, #0
  4019f6:	d14c      	bne.n	401a92 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  4019f8:	4b28      	ldr	r3, [pc, #160]	; (401a9c <m2m_wifi_cb+0x258>)
  4019fa:	681b      	ldr	r3, [r3, #0]
  4019fc:	2b00      	cmp	r3, #0
  4019fe:	d048      	beq.n	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401a00:	a91c      	add	r1, sp, #112	; 0x70
  401a02:	2065      	movs	r0, #101	; 0x65
  401a04:	4798      	blx	r3
  401a06:	e044      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  401a08:	2809      	cmp	r0, #9
  401a0a:	d10f      	bne.n	401a2c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401a0c:	2301      	movs	r3, #1
  401a0e:	2264      	movs	r2, #100	; 0x64
  401a10:	a903      	add	r1, sp, #12
  401a12:	4628      	mov	r0, r5
  401a14:	4c20      	ldr	r4, [pc, #128]	; (401a98 <m2m_wifi_cb+0x254>)
  401a16:	47a0      	blx	r4
  401a18:	2800      	cmp	r0, #0
  401a1a:	d13a      	bne.n	401a92 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401a1c:	4b1f      	ldr	r3, [pc, #124]	; (401a9c <m2m_wifi_cb+0x258>)
  401a1e:	681b      	ldr	r3, [r3, #0]
  401a20:	2b00      	cmp	r3, #0
  401a22:	d036      	beq.n	401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401a24:	a903      	add	r1, sp, #12
  401a26:	2009      	movs	r0, #9
  401a28:	4798      	blx	r3
  401a2a:	e032      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  401a2c:	282a      	cmp	r0, #42	; 0x2a
  401a2e:	d10d      	bne.n	401a4c <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401a30:	2301      	movs	r3, #1
  401a32:	2204      	movs	r2, #4
  401a34:	a903      	add	r1, sp, #12
  401a36:	4628      	mov	r0, r5
  401a38:	4c17      	ldr	r4, [pc, #92]	; (401a98 <m2m_wifi_cb+0x254>)
  401a3a:	47a0      	blx	r4
  401a3c:	bb48      	cbnz	r0, 401a92 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401a3e:	4b17      	ldr	r3, [pc, #92]	; (401a9c <m2m_wifi_cb+0x258>)
  401a40:	681b      	ldr	r3, [r3, #0]
  401a42:	b333      	cbz	r3, 401a92 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  401a44:	a903      	add	r1, sp, #12
  401a46:	202a      	movs	r0, #42	; 0x2a
  401a48:	4798      	blx	r3
  401a4a:	e022      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401a4c:	2820      	cmp	r0, #32
  401a4e:	d115      	bne.n	401a7c <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401a50:	2300      	movs	r3, #0
  401a52:	2208      	movs	r2, #8
  401a54:	a903      	add	r1, sp, #12
  401a56:	4628      	mov	r0, r5
  401a58:	4c0f      	ldr	r4, [pc, #60]	; (401a98 <m2m_wifi_cb+0x254>)
  401a5a:	47a0      	blx	r4
  401a5c:	b9c8      	cbnz	r0, 401a92 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401a5e:	2301      	movs	r3, #1
  401a60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401a64:	9903      	ldr	r1, [sp, #12]
  401a66:	f105 0008 	add.w	r0, r5, #8
  401a6a:	47a0      	blx	r4
  401a6c:	b988      	cbnz	r0, 401a92 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  401a6e:	4b0b      	ldr	r3, [pc, #44]	; (401a9c <m2m_wifi_cb+0x258>)
  401a70:	681b      	ldr	r3, [r3, #0]
  401a72:	b173      	cbz	r3, 401a92 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401a74:	a903      	add	r1, sp, #12
  401a76:	2020      	movs	r0, #32
  401a78:	4798      	blx	r3
  401a7a:	e00a      	b.n	401a92 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401a7c:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401a80:	490e      	ldr	r1, [pc, #56]	; (401abc <m2m_wifi_cb+0x278>)
  401a82:	480f      	ldr	r0, [pc, #60]	; (401ac0 <m2m_wifi_cb+0x27c>)
  401a84:	4d08      	ldr	r5, [pc, #32]	; (401aa8 <m2m_wifi_cb+0x264>)
  401a86:	47a8      	blx	r5
  401a88:	4621      	mov	r1, r4
  401a8a:	480e      	ldr	r0, [pc, #56]	; (401ac4 <m2m_wifi_cb+0x280>)
  401a8c:	47a8      	blx	r5
  401a8e:	4808      	ldr	r0, [pc, #32]	; (401ab0 <m2m_wifi_cb+0x26c>)
  401a90:	47a8      	blx	r5
	}
}
  401a92:	b01f      	add	sp, #124	; 0x7c
  401a94:	bd30      	pop	{r4, r5, pc}
  401a96:	bf00      	nop
  401a98:	00401659 	.word	0x00401659
  401a9c:	20000b28 	.word	0x20000b28
  401aa0:	00400fe1 	.word	0x00400fe1
  401aa4:	0040f0ec 	.word	0x0040f0ec
  401aa8:	00405e29 	.word	0x00405e29
  401aac:	0040f0f8 	.word	0x0040f0f8
  401ab0:	0040ee38 	.word	0x0040ee38
  401ab4:	20000b2c 	.word	0x20000b2c
  401ab8:	20000b2d 	.word	0x20000b2d
  401abc:	0040f0c0 	.word	0x0040f0c0
  401ac0:	0040ee10 	.word	0x0040ee10
  401ac4:	0040f118 	.word	0x0040f118

00401ac8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401aca:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401acc:	2301      	movs	r3, #1
  401ace:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  401ad2:	2800      	cmp	r0, #0
  401ad4:	d04e      	beq.n	401b74 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401ad6:	6802      	ldr	r2, [r0, #0]
  401ad8:	4b29      	ldr	r3, [pc, #164]	; (401b80 <m2m_wifi_init+0xb8>)
  401ada:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401adc:	2200      	movs	r2, #0
  401ade:	4b29      	ldr	r3, [pc, #164]	; (401b84 <m2m_wifi_init+0xbc>)
  401ae0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401ae2:	f10d 0007 	add.w	r0, sp, #7
  401ae6:	4b28      	ldr	r3, [pc, #160]	; (401b88 <m2m_wifi_init+0xc0>)
  401ae8:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401aea:	4604      	mov	r4, r0
  401aec:	2800      	cmp	r0, #0
  401aee:	d143      	bne.n	401b78 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401af0:	4b26      	ldr	r3, [pc, #152]	; (401b8c <m2m_wifi_init+0xc4>)
  401af2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401af4:	4604      	mov	r4, r0
  401af6:	2800      	cmp	r0, #0
  401af8:	d138      	bne.n	401b6c <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  401afa:	4925      	ldr	r1, [pc, #148]	; (401b90 <m2m_wifi_init+0xc8>)
  401afc:	2001      	movs	r0, #1
  401afe:	4b25      	ldr	r3, [pc, #148]	; (401b94 <m2m_wifi_init+0xcc>)
  401b00:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401b02:	a802      	add	r0, sp, #8
  401b04:	4b24      	ldr	r3, [pc, #144]	; (401b98 <m2m_wifi_init+0xd0>)
  401b06:	4798      	blx	r3
  401b08:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  401b0a:	4f24      	ldr	r7, [pc, #144]	; (401b9c <m2m_wifi_init+0xd4>)
  401b0c:	4638      	mov	r0, r7
  401b0e:	4d24      	ldr	r5, [pc, #144]	; (401ba0 <m2m_wifi_init+0xd8>)
  401b10:	47a8      	blx	r5
  401b12:	f89d 300e 	ldrb.w	r3, [sp, #14]
  401b16:	f89d 200d 	ldrb.w	r2, [sp, #13]
  401b1a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  401b1e:	4821      	ldr	r0, [pc, #132]	; (401ba4 <m2m_wifi_init+0xdc>)
  401b20:	47a8      	blx	r5
  401b22:	4e21      	ldr	r6, [pc, #132]	; (401ba8 <m2m_wifi_init+0xe0>)
  401b24:	4630      	mov	r0, r6
  401b26:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401b28:	4638      	mov	r0, r7
  401b2a:	47a8      	blx	r5
  401b2c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  401b30:	f89d 2010 	ldrb.w	r2, [sp, #16]
  401b34:	f89d 100f 	ldrb.w	r1, [sp, #15]
  401b38:	481c      	ldr	r0, [pc, #112]	; (401bac <m2m_wifi_init+0xe4>)
  401b3a:	47a8      	blx	r5
  401b3c:	4630      	mov	r0, r6
  401b3e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401b40:	4638      	mov	r0, r7
  401b42:	47a8      	blx	r5
  401b44:	2300      	movs	r3, #0
  401b46:	2203      	movs	r2, #3
  401b48:	2113      	movs	r1, #19
  401b4a:	4819      	ldr	r0, [pc, #100]	; (401bb0 <m2m_wifi_init+0xe8>)
  401b4c:	47a8      	blx	r5
  401b4e:	4630      	mov	r0, r6
  401b50:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  401b52:	f114 0f0d 	cmn.w	r4, #13
  401b56:	d10f      	bne.n	401b78 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  401b58:	f240 12d5 	movw	r2, #469	; 0x1d5
  401b5c:	4915      	ldr	r1, [pc, #84]	; (401bb4 <m2m_wifi_init+0xec>)
  401b5e:	4816      	ldr	r0, [pc, #88]	; (401bb8 <m2m_wifi_init+0xf0>)
  401b60:	47a8      	blx	r5
  401b62:	4816      	ldr	r0, [pc, #88]	; (401bbc <m2m_wifi_init+0xf4>)
  401b64:	47a8      	blx	r5
  401b66:	4630      	mov	r0, r6
  401b68:	47a8      	blx	r5
  401b6a:	e005      	b.n	401b78 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401b6c:	2000      	movs	r0, #0
  401b6e:	4b14      	ldr	r3, [pc, #80]	; (401bc0 <m2m_wifi_init+0xf8>)
  401b70:	4798      	blx	r3
  401b72:	e001      	b.n	401b78 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  401b74:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  401b78:	4620      	mov	r0, r4
  401b7a:	b00b      	add	sp, #44	; 0x2c
  401b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401b7e:	bf00      	nop
  401b80:	20000b28 	.word	0x20000b28
  401b84:	20000b2c 	.word	0x20000b2c
  401b88:	004022c9 	.word	0x004022c9
  401b8c:	004017f5 	.word	0x004017f5
  401b90:	00401845 	.word	0x00401845
  401b94:	00401765 	.word	0x00401765
  401b98:	0040221d 	.word	0x0040221d
  401b9c:	0040f0ec 	.word	0x0040f0ec
  401ba0:	00405e29 	.word	0x00405e29
  401ba4:	0040f1d0 	.word	0x0040f1d0
  401ba8:	0040ee38 	.word	0x0040ee38
  401bac:	0040f1ec 	.word	0x0040f1ec
  401bb0:	0040f208 	.word	0x0040f208
  401bb4:	0040f0dc 	.word	0x0040f0dc
  401bb8:	0040ee10 	.word	0x0040ee10
  401bbc:	0040f224 	.word	0x0040f224
  401bc0:	00402391 	.word	0x00402391

00401bc4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401bc4:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401bc6:	4b01      	ldr	r3, [pc, #4]	; (401bcc <m2m_wifi_handle_events+0x8>)
  401bc8:	4798      	blx	r3
}
  401bca:	bd08      	pop	{r3, pc}
  401bcc:	00401339 	.word	0x00401339

00401bd0 <m2m_wifi_disconnect>:
ERR1:
	return ret;
}

sint8 m2m_wifi_disconnect(void)
{
  401bd0:	b510      	push	{r4, lr}
  401bd2:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
  401bd4:	2200      	movs	r2, #0
  401bd6:	9202      	str	r2, [sp, #8]
  401bd8:	9201      	str	r2, [sp, #4]
  401bda:	9200      	str	r2, [sp, #0]
  401bdc:	4613      	mov	r3, r2
  401bde:	212b      	movs	r1, #43	; 0x2b
  401be0:	2001      	movs	r0, #1
  401be2:	4c02      	ldr	r4, [pc, #8]	; (401bec <m2m_wifi_disconnect+0x1c>)
  401be4:	47a0      	blx	r4
}
  401be6:	b004      	add	sp, #16
  401be8:	bd10      	pop	{r4, pc}
  401bea:	bf00      	nop
  401bec:	00401161 	.word	0x00401161

00401bf0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  401bf0:	2000      	movs	r0, #0
  401bf2:	4770      	bx	lr

00401bf4 <m2m_wifi_p2p>:
	M2M_ERR("_PS_SERVER_ is not defined\n");
#endif
	return ret;
}
sint8 m2m_wifi_p2p(uint8 u8Channel)
{
  401bf4:	b510      	push	{r4, lr}
  401bf6:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;
	if((u8Channel == M2M_WIFI_CH_1) || (u8Channel == M2M_WIFI_CH_6) || (u8Channel == M2M_WIFI_CH_11))
  401bf8:	280a      	cmp	r0, #10
  401bfa:	d812      	bhi.n	401c22 <m2m_wifi_p2p+0x2e>
  401bfc:	f240 4321 	movw	r3, #1057	; 0x421
  401c00:	40c3      	lsrs	r3, r0
  401c02:	f013 0f01 	tst.w	r3, #1
  401c06:	d00c      	beq.n	401c22 <m2m_wifi_p2p+0x2e>
	{
		tstrM2MP2PConnect strtmp;
		strtmp.u8ListenChannel = u8Channel;
  401c08:	aa06      	add	r2, sp, #24
  401c0a:	f802 0d04 	strb.w	r0, [r2, #-4]!
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_P2P, (uint8*)&strtmp, sizeof(tstrM2MP2PConnect), NULL, 0,0);
  401c0e:	2300      	movs	r3, #0
  401c10:	9302      	str	r3, [sp, #8]
  401c12:	9301      	str	r3, [sp, #4]
  401c14:	9300      	str	r3, [sp, #0]
  401c16:	2304      	movs	r3, #4
  401c18:	215b      	movs	r1, #91	; 0x5b
  401c1a:	2001      	movs	r0, #1
  401c1c:	4c08      	ldr	r4, [pc, #32]	; (401c40 <m2m_wifi_p2p+0x4c>)
  401c1e:	47a0      	blx	r4
}
sint8 m2m_wifi_p2p(uint8 u8Channel)
{
	sint8 ret = M2M_SUCCESS;
	if((u8Channel == M2M_WIFI_CH_1) || (u8Channel == M2M_WIFI_CH_6) || (u8Channel == M2M_WIFI_CH_11))
	{
  401c20:	e00b      	b.n	401c3a <m2m_wifi_p2p+0x46>
		strtmp.u8ListenChannel = u8Channel;
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_P2P, (uint8*)&strtmp, sizeof(tstrM2MP2PConnect), NULL, 0,0);
	}
	else
	{
		M2M_ERR("Listen channel should only be 1, 6 or 11\n");
  401c22:	f44f 724b 	mov.w	r2, #812	; 0x32c
  401c26:	4907      	ldr	r1, [pc, #28]	; (401c44 <m2m_wifi_p2p+0x50>)
  401c28:	4807      	ldr	r0, [pc, #28]	; (401c48 <m2m_wifi_p2p+0x54>)
  401c2a:	4c08      	ldr	r4, [pc, #32]	; (401c4c <m2m_wifi_p2p+0x58>)
  401c2c:	47a0      	blx	r4
  401c2e:	4808      	ldr	r0, [pc, #32]	; (401c50 <m2m_wifi_p2p+0x5c>)
  401c30:	47a0      	blx	r4
  401c32:	4808      	ldr	r0, [pc, #32]	; (401c54 <m2m_wifi_p2p+0x60>)
  401c34:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401c36:	f06f 000b 	mvn.w	r0, #11
	}
	return ret;
}
  401c3a:	b006      	add	sp, #24
  401c3c:	bd10      	pop	{r4, pc}
  401c3e:	bf00      	nop
  401c40:	00401161 	.word	0x00401161
  401c44:	0040f0cc 	.word	0x0040f0cc
  401c48:	0040ee10 	.word	0x0040ee10
  401c4c:	00405e29 	.word	0x00405e29
  401c50:	0040f388 	.word	0x0040f388
  401c54:	0040ee38 	.word	0x0040ee38

00401c58 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
  401c58:	b510      	push	{r4, lr}
  401c5a:	b090      	sub	sp, #64	; 0x40
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
  401c5c:	2930      	cmp	r1, #48	; 0x30
  401c5e:	bf28      	it	cs
  401c60:	2130      	movcs	r1, #48	; 0x30
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
  401c62:	1c4a      	adds	r2, r1, #1
  401c64:	b2d2      	uxtb	r2, r2
  401c66:	4601      	mov	r1, r0
  401c68:	a804      	add	r0, sp, #16
  401c6a:	4b07      	ldr	r3, [pc, #28]	; (401c88 <m2m_wifi_set_device_name+0x30>)
  401c6c:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
  401c6e:	2300      	movs	r3, #0
  401c70:	9302      	str	r3, [sp, #8]
  401c72:	9301      	str	r3, [sp, #4]
  401c74:	9300      	str	r3, [sp, #0]
  401c76:	2330      	movs	r3, #48	; 0x30
  401c78:	aa04      	add	r2, sp, #16
  401c7a:	2107      	movs	r1, #7
  401c7c:	2001      	movs	r0, #1
  401c7e:	4c03      	ldr	r4, [pc, #12]	; (401c8c <m2m_wifi_set_device_name+0x34>)
  401c80:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
  401c82:	b010      	add	sp, #64	; 0x40
  401c84:	bd10      	pop	{r4, pc}
  401c86:	bf00      	nop
  401c88:	00400fcd 	.word	0x00400fcd
  401c8c:	00401161 	.word	0x00401161

00401c90 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  401c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c92:	b083      	sub	sp, #12
  401c94:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401c96:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  401c9a:	4e0a      	ldr	r6, [pc, #40]	; (401cc4 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401c9c:	4f0a      	ldr	r7, [pc, #40]	; (401cc8 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  401c9e:	4621      	mov	r1, r4
  401ca0:	4628      	mov	r0, r5
  401ca2:	47b0      	blx	r6
		if(val32 != 0) {		
  401ca4:	b154      	cbz	r4, 401cbc <chip_apply_conf+0x2c>
			uint32 reg = 0;
  401ca6:	a902      	add	r1, sp, #8
  401ca8:	2300      	movs	r3, #0
  401caa:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  401cae:	4628      	mov	r0, r5
  401cb0:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  401cb2:	2800      	cmp	r0, #0
  401cb4:	d1f3      	bne.n	401c9e <chip_apply_conf+0xe>
				if(reg == val32)
  401cb6:	9b01      	ldr	r3, [sp, #4]
  401cb8:	429c      	cmp	r4, r3
  401cba:	d1f0      	bne.n	401c9e <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401cbc:	2000      	movs	r0, #0
  401cbe:	b003      	add	sp, #12
  401cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401cc2:	bf00      	nop
  401cc4:	00402151 	.word	0x00402151
  401cc8:	00402145 	.word	0x00402145

00401ccc <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  401ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cd0:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  401cd2:	2001      	movs	r0, #1
  401cd4:	4b3d      	ldr	r3, [pc, #244]	; (401dcc <nm_clkless_wake+0x100>)
  401cd6:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401cd8:	a901      	add	r1, sp, #4
  401cda:	2001      	movs	r0, #1
  401cdc:	4b3c      	ldr	r3, [pc, #240]	; (401dd0 <nm_clkless_wake+0x104>)
  401cde:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  401ce0:	4682      	mov	sl, r0
  401ce2:	b148      	cbz	r0, 401cf8 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  401ce4:	2272      	movs	r2, #114	; 0x72
  401ce6:	493b      	ldr	r1, [pc, #236]	; (401dd4 <nm_clkless_wake+0x108>)
  401ce8:	483b      	ldr	r0, [pc, #236]	; (401dd8 <nm_clkless_wake+0x10c>)
  401cea:	4c3c      	ldr	r4, [pc, #240]	; (401ddc <nm_clkless_wake+0x110>)
  401cec:	47a0      	blx	r4
  401cee:	483c      	ldr	r0, [pc, #240]	; (401de0 <nm_clkless_wake+0x114>)
  401cf0:	47a0      	blx	r4
  401cf2:	483c      	ldr	r0, [pc, #240]	; (401de4 <nm_clkless_wake+0x118>)
  401cf4:	47a0      	blx	r4
		goto _WAKE_EXIT;
  401cf6:	e064      	b.n	401dc2 <nm_clkless_wake+0xf6>
  401cf8:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401cfa:	f04f 0801 	mov.w	r8, #1
  401cfe:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 401df8 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401d02:	4d32      	ldr	r5, [pc, #200]	; (401dcc <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401d04:	4f38      	ldr	r7, [pc, #224]	; (401de8 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401d06:	9901      	ldr	r1, [sp, #4]
  401d08:	f041 0102 	orr.w	r1, r1, #2
  401d0c:	4640      	mov	r0, r8
  401d0e:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401d10:	4640      	mov	r0, r8
  401d12:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d14:	4669      	mov	r1, sp
  401d16:	4b35      	ldr	r3, [pc, #212]	; (401dec <nm_clkless_wake+0x120>)
  401d18:	6818      	ldr	r0, [r3, #0]
  401d1a:	4b2d      	ldr	r3, [pc, #180]	; (401dd0 <nm_clkless_wake+0x104>)
  401d1c:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  401d1e:	b918      	cbnz	r0, 401d28 <nm_clkless_wake+0x5c>
  401d20:	9b00      	ldr	r3, [sp, #0]
  401d22:	b10b      	cbz	r3, 401d28 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d24:	4e31      	ldr	r6, [pc, #196]	; (401dec <nm_clkless_wake+0x120>)
  401d26:	e037      	b.n	401d98 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  401d28:	4e30      	ldr	r6, [pc, #192]	; (401dec <nm_clkless_wake+0x120>)
  401d2a:	230e      	movs	r3, #14
  401d2c:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  401d2e:	4640      	mov	r0, r8
  401d30:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d32:	4669      	mov	r1, sp
  401d34:	6830      	ldr	r0, [r6, #0]
  401d36:	4b26      	ldr	r3, [pc, #152]	; (401dd0 <nm_clkless_wake+0x104>)
  401d38:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  401d3a:	b910      	cbnz	r0, 401d42 <nm_clkless_wake+0x76>
  401d3c:	9b00      	ldr	r3, [sp, #0]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d1f0      	bne.n	401d24 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  401d42:	4e2a      	ldr	r6, [pc, #168]	; (401dec <nm_clkless_wake+0x120>)
  401d44:	2313      	movs	r3, #19
  401d46:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  401d48:	4640      	mov	r0, r8
  401d4a:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d4c:	4669      	mov	r1, sp
  401d4e:	6830      	ldr	r0, [r6, #0]
  401d50:	4b1f      	ldr	r3, [pc, #124]	; (401dd0 <nm_clkless_wake+0x104>)
  401d52:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  401d54:	4606      	mov	r6, r0
  401d56:	2800      	cmp	r0, #0
  401d58:	d0e4      	beq.n	401d24 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  401d5a:	2296      	movs	r2, #150	; 0x96
  401d5c:	491d      	ldr	r1, [pc, #116]	; (401dd4 <nm_clkless_wake+0x108>)
  401d5e:	481e      	ldr	r0, [pc, #120]	; (401dd8 <nm_clkless_wake+0x10c>)
  401d60:	4c1e      	ldr	r4, [pc, #120]	; (401ddc <nm_clkless_wake+0x110>)
  401d62:	47a0      	blx	r4
  401d64:	4822      	ldr	r0, [pc, #136]	; (401df0 <nm_clkless_wake+0x124>)
  401d66:	47a0      	blx	r4
  401d68:	481e      	ldr	r0, [pc, #120]	; (401de4 <nm_clkless_wake+0x118>)
  401d6a:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d6c:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  401d6e:	e028      	b.n	401dc2 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  401d70:	2002      	movs	r0, #2
  401d72:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401d74:	4669      	mov	r1, sp
  401d76:	6830      	ldr	r0, [r6, #0]
  401d78:	4b15      	ldr	r3, [pc, #84]	; (401dd0 <nm_clkless_wake+0x104>)
  401d7a:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401d7c:	9b00      	ldr	r3, [sp, #0]
  401d7e:	f013 0f04 	tst.w	r3, #4
  401d82:	d109      	bne.n	401d98 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  401d84:	22aa      	movs	r2, #170	; 0xaa
  401d86:	4913      	ldr	r1, [pc, #76]	; (401dd4 <nm_clkless_wake+0x108>)
  401d88:	4813      	ldr	r0, [pc, #76]	; (401dd8 <nm_clkless_wake+0x10c>)
  401d8a:	f8df b050 	ldr.w	fp, [pc, #80]	; 401ddc <nm_clkless_wake+0x110>
  401d8e:	47d8      	blx	fp
  401d90:	4818      	ldr	r0, [pc, #96]	; (401df4 <nm_clkless_wake+0x128>)
  401d92:	47d8      	blx	fp
  401d94:	4813      	ldr	r0, [pc, #76]	; (401de4 <nm_clkless_wake+0x118>)
  401d96:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401d98:	9b00      	ldr	r3, [sp, #0]
  401d9a:	f013 0f04 	tst.w	r3, #4
  401d9e:	d110      	bne.n	401dc2 <nm_clkless_wake+0xf6>
  401da0:	3401      	adds	r4, #1
  401da2:	fba7 2304 	umull	r2, r3, r7, r4
  401da6:	085b      	lsrs	r3, r3, #1
  401da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401dac:	429c      	cmp	r4, r3
  401dae:	d0df      	beq.n	401d70 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  401db0:	9901      	ldr	r1, [sp, #4]
  401db2:	f041 0102 	orr.w	r1, r1, #2
  401db6:	4640      	mov	r0, r8
  401db8:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  401dba:	9b00      	ldr	r3, [sp, #0]
  401dbc:	f013 0f04 	tst.w	r3, #4
  401dc0:	d0a1      	beq.n	401d06 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  401dc2:	4650      	mov	r0, sl
  401dc4:	b003      	add	sp, #12
  401dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dca:	bf00      	nop
  401dcc:	00400cf5 	.word	0x00400cf5
  401dd0:	00402145 	.word	0x00402145
  401dd4:	0040f414 	.word	0x0040f414
  401dd8:	0040ee10 	.word	0x0040ee10
  401ddc:	00405e29 	.word	0x00405e29
  401de0:	0040f424 	.word	0x0040f424
  401de4:	0040ee38 	.word	0x0040ee38
  401de8:	aaaaaaab 	.word	0xaaaaaaab
  401dec:	20000018 	.word	0x20000018
  401df0:	0040f444 	.word	0x0040f444
  401df4:	0040f464 	.word	0x0040f464
  401df8:	00402151 	.word	0x00402151

00401dfc <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401dfc:	b500      	push	{lr}
  401dfe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401e00:	a901      	add	r1, sp, #4
  401e02:	f241 4008 	movw	r0, #5128	; 0x1408
  401e06:	4b15      	ldr	r3, [pc, #84]	; (401e5c <enable_interrupts+0x60>)
  401e08:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e0a:	b9e0      	cbnz	r0, 401e46 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401e0c:	9901      	ldr	r1, [sp, #4]
  401e0e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401e12:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401e14:	f241 4008 	movw	r0, #5128	; 0x1408
  401e18:	4b11      	ldr	r3, [pc, #68]	; (401e60 <enable_interrupts+0x64>)
  401e1a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e1c:	b9b0      	cbnz	r0, 401e4c <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401e1e:	a901      	add	r1, sp, #4
  401e20:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401e24:	4b0d      	ldr	r3, [pc, #52]	; (401e5c <enable_interrupts+0x60>)
  401e26:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e28:	b998      	cbnz	r0, 401e52 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  401e2a:	9901      	ldr	r1, [sp, #4]
  401e2c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401e30:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  401e32:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401e36:	4b0a      	ldr	r3, [pc, #40]	; (401e60 <enable_interrupts+0x64>)
  401e38:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e3a:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  401e3c:	bf14      	ite	ne
  401e3e:	f06f 0005 	mvnne.w	r0, #5
  401e42:	2000      	moveq	r0, #0
  401e44:	e007      	b.n	401e56 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401e46:	f06f 0005 	mvn.w	r0, #5
  401e4a:	e004      	b.n	401e56 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401e4c:	f06f 0005 	mvn.w	r0, #5
  401e50:	e001      	b.n	401e56 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401e52:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  401e56:	b003      	add	sp, #12
  401e58:	f85d fb04 	ldr.w	pc, [sp], #4
  401e5c:	00402145 	.word	0x00402145
  401e60:	00402151 	.word	0x00402151

00401e64 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401e64:	b510      	push	{r4, lr}
  401e66:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  401e68:	4b24      	ldr	r3, [pc, #144]	; (401efc <nmi_get_chipid+0x98>)
  401e6a:	681c      	ldr	r4, [r3, #0]
  401e6c:	2c00      	cmp	r4, #0
  401e6e:	d140      	bne.n	401ef2 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  401e70:	4619      	mov	r1, r3
  401e72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  401e76:	4b22      	ldr	r3, [pc, #136]	; (401f00 <nmi_get_chipid+0x9c>)
  401e78:	4798      	blx	r3
  401e7a:	b118      	cbz	r0, 401e84 <nmi_get_chipid+0x20>
			chipid = 0;
  401e7c:	2200      	movs	r2, #0
  401e7e:	4b1f      	ldr	r3, [pc, #124]	; (401efc <nmi_get_chipid+0x98>)
  401e80:	601a      	str	r2, [r3, #0]
			return 0;
  401e82:	e038      	b.n	401ef6 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401e84:	a901      	add	r1, sp, #4
  401e86:	f241 30f4 	movw	r0, #5108	; 0x13f4
  401e8a:	4b1d      	ldr	r3, [pc, #116]	; (401f00 <nmi_get_chipid+0x9c>)
  401e8c:	4798      	blx	r3
  401e8e:	b118      	cbz	r0, 401e98 <nmi_get_chipid+0x34>
			chipid = 0;
  401e90:	2200      	movs	r2, #0
  401e92:	4b1a      	ldr	r3, [pc, #104]	; (401efc <nmi_get_chipid+0x98>)
  401e94:	601a      	str	r2, [r3, #0]
			return 0;
  401e96:	e02e      	b.n	401ef6 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  401e98:	4b18      	ldr	r3, [pc, #96]	; (401efc <nmi_get_chipid+0x98>)
  401e9a:	681b      	ldr	r3, [r3, #0]
  401e9c:	4a19      	ldr	r2, [pc, #100]	; (401f04 <nmi_get_chipid+0xa0>)
  401e9e:	4293      	cmp	r3, r2
  401ea0:	d106      	bne.n	401eb0 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  401ea2:	9b01      	ldr	r3, [sp, #4]
  401ea4:	2b01      	cmp	r3, #1
  401ea6:	d01d      	beq.n	401ee4 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  401ea8:	3201      	adds	r2, #1
  401eaa:	4b14      	ldr	r3, [pc, #80]	; (401efc <nmi_get_chipid+0x98>)
  401eac:	601a      	str	r2, [r3, #0]
  401eae:	e019      	b.n	401ee4 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  401eb0:	4a15      	ldr	r2, [pc, #84]	; (401f08 <nmi_get_chipid+0xa4>)
  401eb2:	4293      	cmp	r3, r2
  401eb4:	d109      	bne.n	401eca <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  401eb6:	9b01      	ldr	r3, [sp, #4]
  401eb8:	2b03      	cmp	r3, #3
  401eba:	d013      	beq.n	401ee4 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  401ebc:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  401ebe:	bf0c      	ite	eq
  401ec0:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  401ec2:	4a12      	ldrne	r2, [pc, #72]	; (401f0c <nmi_get_chipid+0xa8>)
  401ec4:	4b0d      	ldr	r3, [pc, #52]	; (401efc <nmi_get_chipid+0x98>)
  401ec6:	601a      	str	r2, [r3, #0]
  401ec8:	e00c      	b.n	401ee4 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  401eca:	4a11      	ldr	r2, [pc, #68]	; (401f10 <nmi_get_chipid+0xac>)
  401ecc:	4293      	cmp	r3, r2
  401ece:	d109      	bne.n	401ee4 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401ed0:	490a      	ldr	r1, [pc, #40]	; (401efc <nmi_get_chipid+0x98>)
  401ed2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401ed6:	4b0a      	ldr	r3, [pc, #40]	; (401f00 <nmi_get_chipid+0x9c>)
  401ed8:	4798      	blx	r3
  401eda:	b118      	cbz	r0, 401ee4 <nmi_get_chipid+0x80>
			chipid = 0;
  401edc:	2200      	movs	r2, #0
  401ede:	4b07      	ldr	r3, [pc, #28]	; (401efc <nmi_get_chipid+0x98>)
  401ee0:	601a      	str	r2, [r3, #0]
			return 0;
  401ee2:	e008      	b.n	401ef6 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  401ee4:	4a05      	ldr	r2, [pc, #20]	; (401efc <nmi_get_chipid+0x98>)
  401ee6:	6813      	ldr	r3, [r2, #0]
  401ee8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401eec:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401ef0:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  401ef2:	4b02      	ldr	r3, [pc, #8]	; (401efc <nmi_get_chipid+0x98>)
  401ef4:	681c      	ldr	r4, [r3, #0]
}
  401ef6:	4620      	mov	r0, r4
  401ef8:	b002      	add	sp, #8
  401efa:	bd10      	pop	{r4, pc}
  401efc:	20000b30 	.word	0x20000b30
  401f00:	00402145 	.word	0x00402145
  401f04:	001002a0 	.word	0x001002a0
  401f08:	001002b0 	.word	0x001002b0
  401f0c:	001002b2 	.word	0x001002b2
  401f10:	001000f0 	.word	0x001000f0

00401f14 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f16:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401f18:	f241 0514 	movw	r5, #4116	; 0x1014
  401f1c:	4c24      	ldr	r4, [pc, #144]	; (401fb0 <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401f1e:	4e25      	ldr	r6, [pc, #148]	; (401fb4 <wait_for_bootrom+0xa0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401f20:	4628      	mov	r0, r5
  401f22:	47a0      	blx	r4
		if (reg & 0x80000000) {
  401f24:	2800      	cmp	r0, #0
  401f26:	db02      	blt.n	401f2e <wait_for_bootrom+0x1a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401f28:	2001      	movs	r0, #1
  401f2a:	47b0      	blx	r6
	}
  401f2c:	e7f8      	b.n	401f20 <wait_for_bootrom+0xc>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401f2e:	4822      	ldr	r0, [pc, #136]	; (401fb8 <wait_for_bootrom+0xa4>)
  401f30:	4b1f      	ldr	r3, [pc, #124]	; (401fb0 <wait_for_bootrom+0x9c>)
  401f32:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  401f34:	f010 0f01 	tst.w	r0, #1
  401f38:	d109      	bne.n	401f4e <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401f3a:	4e1e      	ldr	r6, [pc, #120]	; (401fb4 <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
  401f3c:	4d1c      	ldr	r5, [pc, #112]	; (401fb0 <wait_for_bootrom+0x9c>)

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  401f3e:	4c1f      	ldr	r4, [pc, #124]	; (401fbc <wait_for_bootrom+0xa8>)
		{
			nm_bsp_sleep(1);
  401f40:	2001      	movs	r0, #1
  401f42:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
  401f44:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401f48:	47a8      	blx	r5

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  401f4a:	42a0      	cmp	r0, r4
  401f4c:	d1f8      	bne.n	401f40 <wait_for_bootrom+0x2c>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  401f4e:	2f02      	cmp	r7, #2
  401f50:	d10a      	bne.n	401f68 <wait_for_bootrom+0x54>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401f52:	491b      	ldr	r1, [pc, #108]	; (401fc0 <wait_for_bootrom+0xac>)
  401f54:	481b      	ldr	r0, [pc, #108]	; (401fc4 <wait_for_bootrom+0xb0>)
  401f56:	4c1c      	ldr	r4, [pc, #112]	; (401fc8 <wait_for_bootrom+0xb4>)
  401f58:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  401f5a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401f5e:	f241 008c 	movw	r0, #4236	; 0x108c
  401f62:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401f64:	2400      	movs	r4, #0
  401f66:	e00f      	b.n	401f88 <wait_for_bootrom+0x74>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  401f68:	2f03      	cmp	r7, #3
  401f6a:	d109      	bne.n	401f80 <wait_for_bootrom+0x6c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401f6c:	4914      	ldr	r1, [pc, #80]	; (401fc0 <wait_for_bootrom+0xac>)
  401f6e:	4815      	ldr	r0, [pc, #84]	; (401fc4 <wait_for_bootrom+0xb0>)
  401f70:	4c15      	ldr	r4, [pc, #84]	; (401fc8 <wait_for_bootrom+0xb4>)
  401f72:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401f74:	2100      	movs	r1, #0
  401f76:	f241 008c 	movw	r0, #4236	; 0x108c
  401f7a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401f7c:	2400      	movs	r4, #0
  401f7e:	e003      	b.n	401f88 <wait_for_bootrom+0x74>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  401f80:	2f04      	cmp	r7, #4
  401f82:	bf14      	ite	ne
  401f84:	2400      	movne	r4, #0
  401f86:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  401f88:	4b10      	ldr	r3, [pc, #64]	; (401fcc <wait_for_bootrom+0xb8>)
  401f8a:	4798      	blx	r3
  401f8c:	f3c0 000b 	ubfx	r0, r0, #0, #12
  401f90:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  401f94:	bf0c      	ite	eq
  401f96:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  401f9a:	4620      	movne	r0, r4
  401f9c:	4b0c      	ldr	r3, [pc, #48]	; (401fd0 <wait_for_bootrom+0xbc>)
  401f9e:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  401fa0:	490c      	ldr	r1, [pc, #48]	; (401fd4 <wait_for_bootrom+0xc0>)
  401fa2:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401fa6:	4b08      	ldr	r3, [pc, #32]	; (401fc8 <wait_for_bootrom+0xb4>)
  401fa8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  401faa:	2000      	movs	r0, #0
  401fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fae:	bf00      	nop
  401fb0:	00402139 	.word	0x00402139
  401fb4:	00400cf5 	.word	0x00400cf5
  401fb8:	000207bc 	.word	0x000207bc
  401fbc:	10add09e 	.word	0x10add09e
  401fc0:	3c1cd57d 	.word	0x3c1cd57d
  401fc4:	000207ac 	.word	0x000207ac
  401fc8:	00402151 	.word	0x00402151
  401fcc:	00401e65 	.word	0x00401e65
  401fd0:	00401c91 	.word	0x00401c91
  401fd4:	ef522f61 	.word	0xef522f61

00401fd8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401fda:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401fdc:	f241 038c 	movw	r3, #4236	; 0x108c
  401fe0:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  401fe2:	4b18      	ldr	r3, [pc, #96]	; (402044 <wait_for_firmware_start+0x6c>)
  401fe4:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  401fe6:	3802      	subs	r0, #2
  401fe8:	b2c0      	uxtb	r0, r0
  401fea:	2801      	cmp	r0, #1
  401fec:	d810      	bhi.n	402010 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  401fee:	4b16      	ldr	r3, [pc, #88]	; (402048 <wait_for_firmware_start+0x70>)
  401ff0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  401ff2:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401ff6:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401ffa:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401ffe:	9300      	str	r3, [sp, #0]
  402000:	e006      	b.n	402010 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  402002:	4638      	mov	r0, r7
  402004:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  402006:	9801      	ldr	r0, [sp, #4]
  402008:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40200a:	3c01      	subs	r4, #1
  40200c:	d106      	bne.n	40201c <wait_for_firmware_start+0x44>
  40200e:	e013      	b.n	402038 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  402010:	f04f 34ff 	mov.w	r4, #4294967295
  402014:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  402016:	2702      	movs	r7, #2
  402018:	4e0c      	ldr	r6, [pc, #48]	; (40204c <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40201a:	4d0d      	ldr	r5, [pc, #52]	; (402050 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  40201c:	9b00      	ldr	r3, [sp, #0]
  40201e:	4298      	cmp	r0, r3
  402020:	d1ef      	bne.n	402002 <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  402022:	9a00      	ldr	r2, [sp, #0]
  402024:	4b07      	ldr	r3, [pc, #28]	; (402044 <wait_for_firmware_start+0x6c>)
  402026:	429a      	cmp	r2, r3
  402028:	d109      	bne.n	40203e <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  40202a:	2100      	movs	r1, #0
  40202c:	f241 008c 	movw	r0, #4236	; 0x108c
  402030:	4b08      	ldr	r3, [pc, #32]	; (402054 <wait_for_firmware_start+0x7c>)
  402032:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  402034:	2000      	movs	r0, #0
  402036:	e003      	b.n	402040 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  402038:	f06f 0004 	mvn.w	r0, #4
  40203c:	e000      	b.n	402040 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40203e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  402040:	b003      	add	sp, #12
  402042:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402044:	02532636 	.word	0x02532636
  402048:	000207ac 	.word	0x000207ac
  40204c:	00400cf5 	.word	0x00400cf5
  402050:	00402139 	.word	0x00402139
  402054:	00402151 	.word	0x00402151

00402058 <chip_deinit>:

sint8 chip_deinit(void)
{
  402058:	b5f0      	push	{r4, r5, r6, r7, lr}
  40205a:	b083      	sub	sp, #12
	uint32 reg = 0;
  40205c:	a902      	add	r1, sp, #8
  40205e:	2300      	movs	r3, #0
  402060:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402064:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402068:	4b24      	ldr	r3, [pc, #144]	; (4020fc <chip_deinit+0xa4>)
  40206a:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  40206c:	b148      	cbz	r0, 402082 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  40206e:	f240 222f 	movw	r2, #559	; 0x22f
  402072:	4923      	ldr	r1, [pc, #140]	; (402100 <chip_deinit+0xa8>)
  402074:	4823      	ldr	r0, [pc, #140]	; (402104 <chip_deinit+0xac>)
  402076:	4c24      	ldr	r4, [pc, #144]	; (402108 <chip_deinit+0xb0>)
  402078:	47a0      	blx	r4
  40207a:	4824      	ldr	r0, [pc, #144]	; (40210c <chip_deinit+0xb4>)
  40207c:	47a0      	blx	r4
  40207e:	4824      	ldr	r0, [pc, #144]	; (402110 <chip_deinit+0xb8>)
  402080:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  402082:	9901      	ldr	r1, [sp, #4]
  402084:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  402088:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40208a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40208e:	4b21      	ldr	r3, [pc, #132]	; (402114 <chip_deinit+0xbc>)
  402090:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  402092:	4605      	mov	r5, r0
  402094:	b158      	cbz	r0, 4020ae <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  402096:	f240 2235 	movw	r2, #565	; 0x235
  40209a:	4919      	ldr	r1, [pc, #100]	; (402100 <chip_deinit+0xa8>)
  40209c:	4819      	ldr	r0, [pc, #100]	; (402104 <chip_deinit+0xac>)
  40209e:	4c1a      	ldr	r4, [pc, #104]	; (402108 <chip_deinit+0xb0>)
  4020a0:	47a0      	blx	r4
  4020a2:	481d      	ldr	r0, [pc, #116]	; (402118 <chip_deinit+0xc0>)
  4020a4:	47a0      	blx	r4
  4020a6:	481a      	ldr	r0, [pc, #104]	; (402110 <chip_deinit+0xb8>)
  4020a8:	47a0      	blx	r4
		return ret;
  4020aa:	4628      	mov	r0, r5
  4020ac:	e024      	b.n	4020f8 <chip_deinit+0xa0>
  4020ae:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4020b0:	4e12      	ldr	r6, [pc, #72]	; (4020fc <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4020b2:	4f18      	ldr	r7, [pc, #96]	; (402114 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4020b4:	a901      	add	r1, sp, #4
  4020b6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4020ba:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4020bc:	4605      	mov	r5, r0
  4020be:	b158      	cbz	r0, 4020d8 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  4020c0:	f44f 720f 	mov.w	r2, #572	; 0x23c
  4020c4:	490e      	ldr	r1, [pc, #56]	; (402100 <chip_deinit+0xa8>)
  4020c6:	480f      	ldr	r0, [pc, #60]	; (402104 <chip_deinit+0xac>)
  4020c8:	4c0f      	ldr	r4, [pc, #60]	; (402108 <chip_deinit+0xb0>)
  4020ca:	47a0      	blx	r4
  4020cc:	4813      	ldr	r0, [pc, #76]	; (40211c <chip_deinit+0xc4>)
  4020ce:	47a0      	blx	r4
  4020d0:	480f      	ldr	r0, [pc, #60]	; (402110 <chip_deinit+0xb8>)
  4020d2:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4020d4:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  4020d6:	e00f      	b.n	4020f8 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  4020d8:	9901      	ldr	r1, [sp, #4]
  4020da:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4020de:	d00a      	beq.n	4020f6 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  4020e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4020e4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4020e6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4020ea:	47b8      	blx	r7
  4020ec:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4020ee:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4020f2:	d1df      	bne.n	4020b4 <chip_deinit+0x5c>
  4020f4:	e000      	b.n	4020f8 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4020f6:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  4020f8:	b003      	add	sp, #12
  4020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4020fc:	00402145 	.word	0x00402145
  402100:	0040f544 	.word	0x0040f544
  402104:	0040ee10 	.word	0x0040ee10
  402108:	00405e29 	.word	0x00405e29
  40210c:	0040f4b0 	.word	0x0040f4b0
  402110:	0040ee38 	.word	0x0040ee38
  402114:	00402151 	.word	0x00402151
  402118:	0040f4cc 	.word	0x0040f4cc
  40211c:	0040f4e8 	.word	0x0040f4e8

00402120 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  402120:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  402122:	4b01      	ldr	r3, [pc, #4]	; (402128 <nm_bus_iface_init+0x8>)
  402124:	4798      	blx	r3

	return ret;
}
  402126:	bd08      	pop	{r3, pc}
  402128:	00400e3d 	.word	0x00400e3d

0040212c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40212c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40212e:	4b01      	ldr	r3, [pc, #4]	; (402134 <nm_bus_iface_deinit+0x8>)
  402130:	4798      	blx	r3

	return ret;
}
  402132:	bd08      	pop	{r3, pc}
  402134:	00400fc9 	.word	0x00400fc9

00402138 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  402138:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40213a:	4b01      	ldr	r3, [pc, #4]	; (402140 <nm_read_reg+0x8>)
  40213c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40213e:	bd08      	pop	{r3, pc}
  402140:	00402989 	.word	0x00402989

00402144 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402144:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  402146:	4b01      	ldr	r3, [pc, #4]	; (40214c <nm_read_reg_with_ret+0x8>)
  402148:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40214a:	bd08      	pop	{r3, pc}
  40214c:	004029a1 	.word	0x004029a1

00402150 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402150:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  402152:	4b01      	ldr	r3, [pc, #4]	; (402158 <nm_write_reg+0x8>)
  402154:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  402156:	bd08      	pop	{r3, pc}
  402158:	004029b9 	.word	0x004029b9

0040215c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402160:	4607      	mov	r7, r0
  402162:	4689      	mov	r9, r1
  402164:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402166:	4b13      	ldr	r3, [pc, #76]	; (4021b4 <nm_read_block+0x58>)
  402168:	f8b3 8000 	ldrh.w	r8, [r3]
  40216c:	f1a8 0808 	sub.w	r8, r8, #8
  402170:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402174:	4542      	cmp	r2, r8
  402176:	d808      	bhi.n	40218a <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  402178:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40217a:	b2aa      	uxth	r2, r5
  40217c:	eb09 0106 	add.w	r1, r9, r6
  402180:	4638      	mov	r0, r7
  402182:	4b0d      	ldr	r3, [pc, #52]	; (4021b8 <nm_read_block+0x5c>)
  402184:	4798      	blx	r3
  402186:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  402188:	e010      	b.n	4021ac <nm_read_block+0x50>
  40218a:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40218c:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40218e:	f8df a028 	ldr.w	sl, [pc, #40]	; 4021b8 <nm_read_block+0x5c>
  402192:	4642      	mov	r2, r8
  402194:	eb09 0106 	add.w	r1, r9, r6
  402198:	4638      	mov	r0, r7
  40219a:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40219c:	4603      	mov	r3, r0
  40219e:	b928      	cbnz	r0, 4021ac <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4021a0:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4021a2:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4021a4:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4021a6:	42a5      	cmp	r5, r4
  4021a8:	d8f3      	bhi.n	402192 <nm_read_block+0x36>
  4021aa:	e7e6      	b.n	40217a <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4021ac:	4618      	mov	r0, r3
  4021ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021b2:	bf00      	nop
  4021b4:	20000014 	.word	0x20000014
  4021b8:	00402add 	.word	0x00402add

004021bc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4021c0:	4607      	mov	r7, r0
  4021c2:	4689      	mov	r9, r1
  4021c4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4021c6:	4b13      	ldr	r3, [pc, #76]	; (402214 <nm_write_block+0x58>)
  4021c8:	f8b3 8000 	ldrh.w	r8, [r3]
  4021cc:	f1a8 0808 	sub.w	r8, r8, #8
  4021d0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4021d4:	4542      	cmp	r2, r8
  4021d6:	d808      	bhi.n	4021ea <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4021d8:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4021da:	b2aa      	uxth	r2, r5
  4021dc:	eb09 0106 	add.w	r1, r9, r6
  4021e0:	4638      	mov	r0, r7
  4021e2:	4b0d      	ldr	r3, [pc, #52]	; (402218 <nm_write_block+0x5c>)
  4021e4:	4798      	blx	r3
  4021e6:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4021e8:	e010      	b.n	40220c <nm_write_block+0x50>
  4021ea:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4021ec:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4021ee:	f8df a028 	ldr.w	sl, [pc, #40]	; 402218 <nm_write_block+0x5c>
  4021f2:	4642      	mov	r2, r8
  4021f4:	eb09 0106 	add.w	r1, r9, r6
  4021f8:	4638      	mov	r0, r7
  4021fa:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4021fc:	4603      	mov	r3, r0
  4021fe:	b928      	cbnz	r0, 40220c <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  402200:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  402202:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  402204:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402206:	42a5      	cmp	r5, r4
  402208:	d8f3      	bhi.n	4021f2 <nm_write_block+0x36>
  40220a:	e7e6      	b.n	4021da <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  40220c:	4618      	mov	r0, r3
  40220e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402212:	bf00      	nop
  402214:	20000014 	.word	0x20000014
  402218:	00402ba9 	.word	0x00402ba9

0040221c <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  40221c:	b530      	push	{r4, r5, lr}
  40221e:	b083      	sub	sp, #12
  402220:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  402222:	a902      	add	r1, sp, #8
  402224:	2300      	movs	r3, #0
  402226:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  40222a:	4823      	ldr	r0, [pc, #140]	; (4022b8 <nm_get_firmware_info+0x9c>)
  40222c:	4b23      	ldr	r3, [pc, #140]	; (4022bc <nm_get_firmware_info+0xa0>)
  40222e:	4798      	blx	r3
  402230:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  402232:	9a01      	ldr	r2, [sp, #4]
  402234:	4b22      	ldr	r3, [pc, #136]	; (4022c0 <nm_get_firmware_info+0xa4>)
  402236:	429a      	cmp	r2, r3
  402238:	d105      	bne.n	402246 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  40223a:	a901      	add	r1, sp, #4
  40223c:	f241 0048 	movw	r0, #4168	; 0x1048
  402240:	4b1e      	ldr	r3, [pc, #120]	; (4022bc <nm_get_firmware_info+0xa0>)
  402242:	4798      	blx	r3
  402244:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  402246:	9b01      	ldr	r3, [sp, #4]
  402248:	0c1a      	lsrs	r2, r3, #16
  40224a:	1211      	asrs	r1, r2, #8
  40224c:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40224e:	f3c2 1103 	ubfx	r1, r2, #4, #4
  402252:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  402254:	f002 020f 	and.w	r2, r2, #15
  402258:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  40225a:	121a      	asrs	r2, r3, #8
  40225c:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40225e:	f3c3 1203 	ubfx	r2, r3, #4, #4
  402262:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  402264:	f003 030f 	and.w	r3, r3, #15
  402268:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40226a:	4b16      	ldr	r3, [pc, #88]	; (4022c4 <nm_get_firmware_info+0xa8>)
  40226c:	4798      	blx	r3
  40226e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  402270:	7922      	ldrb	r2, [r4, #4]
  402272:	79a3      	ldrb	r3, [r4, #6]
  402274:	f003 030f 	and.w	r3, r3, #15
  402278:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40227c:	7963      	ldrb	r3, [r4, #5]
  40227e:	011b      	lsls	r3, r3, #4
  402280:	b2db      	uxtb	r3, r3
  402282:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  402284:	79e1      	ldrb	r1, [r4, #7]
  402286:	7a62      	ldrb	r2, [r4, #9]
  402288:	f002 020f 	and.w	r2, r2, #15
  40228c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  402290:	7a22      	ldrb	r2, [r4, #8]
  402292:	0112      	lsls	r2, r2, #4
  402294:	b2d2      	uxtb	r2, r2
  402296:	430a      	orrs	r2, r1
  402298:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  40229c:	428a      	cmp	r2, r1
  40229e:	bf88      	it	hi
  4022a0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4022a4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4022a8:	4293      	cmp	r3, r2
	}
	return ret;
}
  4022aa:	bf8c      	ite	hi
  4022ac:	4628      	movhi	r0, r5
  4022ae:	f06f 000c 	mvnls.w	r0, #12
  4022b2:	b003      	add	sp, #12
  4022b4:	bd30      	pop	{r4, r5, pc}
  4022b6:	bf00      	nop
  4022b8:	000207ac 	.word	0x000207ac
  4022bc:	00402145 	.word	0x00402145
  4022c0:	d75dc1c3 	.word	0xd75dc1c3
  4022c4:	00401e65 	.word	0x00401e65

004022c8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4022c8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4022ca:	b130      	cbz	r0, 4022da <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  4022cc:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4022ce:	1e63      	subs	r3, r4, #1
  4022d0:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4022d2:	2b04      	cmp	r3, #4
  4022d4:	bf28      	it	cs
  4022d6:	2401      	movcs	r4, #1
  4022d8:	e000      	b.n	4022dc <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  4022da:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  4022dc:	2000      	movs	r0, #0
  4022de:	4b1d      	ldr	r3, [pc, #116]	; (402354 <nm_drv_init+0x8c>)
  4022e0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4022e2:	4605      	mov	r5, r0
  4022e4:	b150      	cbz	r0, 4022fc <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  4022e6:	f44f 7292 	mov.w	r2, #292	; 0x124
  4022ea:	491b      	ldr	r1, [pc, #108]	; (402358 <nm_drv_init+0x90>)
  4022ec:	481b      	ldr	r0, [pc, #108]	; (40235c <nm_drv_init+0x94>)
  4022ee:	4c1c      	ldr	r4, [pc, #112]	; (402360 <nm_drv_init+0x98>)
  4022f0:	47a0      	blx	r4
  4022f2:	481c      	ldr	r0, [pc, #112]	; (402364 <nm_drv_init+0x9c>)
  4022f4:	47a0      	blx	r4
  4022f6:	481c      	ldr	r0, [pc, #112]	; (402368 <nm_drv_init+0xa0>)
  4022f8:	47a0      	blx	r4
		goto ERR1;
  4022fa:	e029      	b.n	402350 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4022fc:	481b      	ldr	r0, [pc, #108]	; (40236c <nm_drv_init+0xa4>)
  4022fe:	4d18      	ldr	r5, [pc, #96]	; (402360 <nm_drv_init+0x98>)
  402300:	47a8      	blx	r5
  402302:	4b1b      	ldr	r3, [pc, #108]	; (402370 <nm_drv_init+0xa8>)
  402304:	4798      	blx	r3
  402306:	4601      	mov	r1, r0
  402308:	481a      	ldr	r0, [pc, #104]	; (402374 <nm_drv_init+0xac>)
  40230a:	47a8      	blx	r5
  40230c:	4816      	ldr	r0, [pc, #88]	; (402368 <nm_drv_init+0xa0>)
  40230e:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  402310:	4b19      	ldr	r3, [pc, #100]	; (402378 <nm_drv_init+0xb0>)
  402312:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  402314:	4620      	mov	r0, r4
  402316:	4b19      	ldr	r3, [pc, #100]	; (40237c <nm_drv_init+0xb4>)
  402318:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40231a:	4605      	mov	r5, r0
  40231c:	b9b0      	cbnz	r0, 40234c <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  40231e:	4620      	mov	r0, r4
  402320:	4b17      	ldr	r3, [pc, #92]	; (402380 <nm_drv_init+0xb8>)
  402322:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402324:	4605      	mov	r5, r0
  402326:	b988      	cbnz	r0, 40234c <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  402328:	3c02      	subs	r4, #2
  40232a:	b2e4      	uxtb	r4, r4
  40232c:	2c01      	cmp	r4, #1
  40232e:	d90f      	bls.n	402350 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  402330:	4b14      	ldr	r3, [pc, #80]	; (402384 <nm_drv_init+0xbc>)
  402332:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402334:	4605      	mov	r5, r0
  402336:	b158      	cbz	r0, 402350 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  402338:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  40233c:	4906      	ldr	r1, [pc, #24]	; (402358 <nm_drv_init+0x90>)
  40233e:	4807      	ldr	r0, [pc, #28]	; (40235c <nm_drv_init+0x94>)
  402340:	4c07      	ldr	r4, [pc, #28]	; (402360 <nm_drv_init+0x98>)
  402342:	47a0      	blx	r4
  402344:	4810      	ldr	r0, [pc, #64]	; (402388 <nm_drv_init+0xc0>)
  402346:	47a0      	blx	r4
  402348:	4807      	ldr	r0, [pc, #28]	; (402368 <nm_drv_init+0xa0>)
  40234a:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  40234c:	4b0f      	ldr	r3, [pc, #60]	; (40238c <nm_drv_init+0xc4>)
  40234e:	4798      	blx	r3
ERR1:
	return ret;
}
  402350:	4628      	mov	r0, r5
  402352:	bd38      	pop	{r3, r4, r5, pc}
  402354:	00402121 	.word	0x00402121
  402358:	0040f5fc 	.word	0x0040f5fc
  40235c:	0040ee10 	.word	0x0040ee10
  402360:	00405e29 	.word	0x00405e29
  402364:	0040f550 	.word	0x0040f550
  402368:	0040ee38 	.word	0x0040ee38
  40236c:	0040f0ec 	.word	0x0040f0ec
  402370:	00401e65 	.word	0x00401e65
  402374:	0040f56c 	.word	0x0040f56c
  402378:	004029d1 	.word	0x004029d1
  40237c:	00401f15 	.word	0x00401f15
  402380:	00401fd9 	.word	0x00401fd9
  402384:	00401dfd 	.word	0x00401dfd
  402388:	0040f57c 	.word	0x0040f57c
  40238c:	0040212d 	.word	0x0040212d

00402390 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  402390:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  402392:	4b19      	ldr	r3, [pc, #100]	; (4023f8 <nm_drv_deinit+0x68>)
  402394:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402396:	b158      	cbz	r0, 4023b0 <nm_drv_deinit+0x20>
  402398:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  40239a:	f44f 72ba 	mov.w	r2, #372	; 0x174
  40239e:	4917      	ldr	r1, [pc, #92]	; (4023fc <nm_drv_deinit+0x6c>)
  4023a0:	4817      	ldr	r0, [pc, #92]	; (402400 <nm_drv_deinit+0x70>)
  4023a2:	4d18      	ldr	r5, [pc, #96]	; (402404 <nm_drv_deinit+0x74>)
  4023a4:	47a8      	blx	r5
  4023a6:	4818      	ldr	r0, [pc, #96]	; (402408 <nm_drv_deinit+0x78>)
  4023a8:	47a8      	blx	r5
  4023aa:	4818      	ldr	r0, [pc, #96]	; (40240c <nm_drv_deinit+0x7c>)
  4023ac:	47a8      	blx	r5
		goto ERR1;
  4023ae:	e020      	b.n	4023f2 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  4023b0:	2000      	movs	r0, #0
  4023b2:	4b17      	ldr	r3, [pc, #92]	; (402410 <nm_drv_deinit+0x80>)
  4023b4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4023b6:	4604      	mov	r4, r0
  4023b8:	b150      	cbz	r0, 4023d0 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  4023ba:	f240 127b 	movw	r2, #379	; 0x17b
  4023be:	490f      	ldr	r1, [pc, #60]	; (4023fc <nm_drv_deinit+0x6c>)
  4023c0:	480f      	ldr	r0, [pc, #60]	; (402400 <nm_drv_deinit+0x70>)
  4023c2:	4d10      	ldr	r5, [pc, #64]	; (402404 <nm_drv_deinit+0x74>)
  4023c4:	47a8      	blx	r5
  4023c6:	4813      	ldr	r0, [pc, #76]	; (402414 <nm_drv_deinit+0x84>)
  4023c8:	47a8      	blx	r5
  4023ca:	4810      	ldr	r0, [pc, #64]	; (40240c <nm_drv_deinit+0x7c>)
  4023cc:	47a8      	blx	r5
		goto ERR1;
  4023ce:	e010      	b.n	4023f2 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  4023d0:	4b11      	ldr	r3, [pc, #68]	; (402418 <nm_drv_deinit+0x88>)
  4023d2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4023d4:	4604      	mov	r4, r0
  4023d6:	b150      	cbz	r0, 4023ee <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  4023d8:	f240 1281 	movw	r2, #385	; 0x181
  4023dc:	4907      	ldr	r1, [pc, #28]	; (4023fc <nm_drv_deinit+0x6c>)
  4023de:	4808      	ldr	r0, [pc, #32]	; (402400 <nm_drv_deinit+0x70>)
  4023e0:	4d08      	ldr	r5, [pc, #32]	; (402404 <nm_drv_deinit+0x74>)
  4023e2:	47a8      	blx	r5
  4023e4:	480d      	ldr	r0, [pc, #52]	; (40241c <nm_drv_deinit+0x8c>)
  4023e6:	47a8      	blx	r5
  4023e8:	4808      	ldr	r0, [pc, #32]	; (40240c <nm_drv_deinit+0x7c>)
  4023ea:	47a8      	blx	r5
		goto ERR1;
  4023ec:	e001      	b.n	4023f2 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  4023ee:	4b0c      	ldr	r3, [pc, #48]	; (402420 <nm_drv_deinit+0x90>)
  4023f0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  4023f2:	4620      	mov	r0, r4
  4023f4:	bd38      	pop	{r3, r4, r5, pc}
  4023f6:	bf00      	nop
  4023f8:	00402059 	.word	0x00402059
  4023fc:	0040f608 	.word	0x0040f608
  402400:	0040ee10 	.word	0x0040ee10
  402404:	00405e29 	.word	0x00405e29
  402408:	0040f59c 	.word	0x0040f59c
  40240c:	0040ee38 	.word	0x0040ee38
  402410:	004036a1 	.word	0x004036a1
  402414:	0040f5bc 	.word	0x0040f5bc
  402418:	0040212d 	.word	0x0040212d
  40241c:	0040f5e0 	.word	0x0040f5e0
  402420:	0040297d 	.word	0x0040297d

00402424 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  402424:	b500      	push	{lr}
  402426:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  402428:	2300      	movs	r3, #0
  40242a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  40242c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40242e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402432:	a901      	add	r1, sp, #4
  402434:	2003      	movs	r0, #3
  402436:	4b02      	ldr	r3, [pc, #8]	; (402440 <nmi_spi_read+0x1c>)
  402438:	4798      	blx	r3
}
  40243a:	b005      	add	sp, #20
  40243c:	f85d fb04 	ldr.w	pc, [sp], #4
  402440:	00400f21 	.word	0x00400f21

00402444 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402444:	b5f0      	push	{r4, r5, r6, r7, lr}
  402446:	b083      	sub	sp, #12
  402448:	4605      	mov	r5, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
  40244a:	28cf      	cmp	r0, #207	; 0xcf
  40244c:	d004      	beq.n	402458 <spi_cmd_rsp+0x14>
  40244e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  402452:	b2db      	uxtb	r3, r3
  402454:	2b01      	cmp	r3, #1
  402456:	d806      	bhi.n	402466 <spi_cmd_rsp+0x22>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402458:	2101      	movs	r1, #1
  40245a:	f10d 0007 	add.w	r0, sp, #7
  40245e:	4b22      	ldr	r3, [pc, #136]	; (4024e8 <spi_cmd_rsp+0xa4>)
  402460:	4798      	blx	r3
  402462:	2800      	cmp	r0, #0
  402464:	d13a      	bne.n	4024dc <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402466:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402468:	2701      	movs	r7, #1
  40246a:	4e1f      	ldr	r6, [pc, #124]	; (4024e8 <spi_cmd_rsp+0xa4>)
  40246c:	4639      	mov	r1, r7
  40246e:	f10d 0007 	add.w	r0, sp, #7
  402472:	47b0      	blx	r6
  402474:	b158      	cbz	r0, 40248e <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402476:	f240 1227 	movw	r2, #295	; 0x127
  40247a:	491c      	ldr	r1, [pc, #112]	; (4024ec <spi_cmd_rsp+0xa8>)
  40247c:	481c      	ldr	r0, [pc, #112]	; (4024f0 <spi_cmd_rsp+0xac>)
  40247e:	4c1d      	ldr	r4, [pc, #116]	; (4024f4 <spi_cmd_rsp+0xb0>)
  402480:	47a0      	blx	r4
  402482:	481d      	ldr	r0, [pc, #116]	; (4024f8 <spi_cmd_rsp+0xb4>)
  402484:	47a0      	blx	r4
  402486:	481d      	ldr	r0, [pc, #116]	; (4024fc <spi_cmd_rsp+0xb8>)
  402488:	47a0      	blx	r4
			result = N_FAIL;
  40248a:	2000      	movs	r0, #0
			goto _fail_;
  40248c:	e029      	b.n	4024e2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  40248e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402492:	42ab      	cmp	r3, r5
  402494:	d005      	beq.n	4024a2 <spi_cmd_rsp+0x5e>
  402496:	1e63      	subs	r3, r4, #1
  402498:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40249c:	d1e6      	bne.n	40246c <spi_cmd_rsp+0x28>
  40249e:	240b      	movs	r4, #11
  4024a0:	e000      	b.n	4024a4 <spi_cmd_rsp+0x60>
  4024a2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4024a4:	2601      	movs	r6, #1
  4024a6:	4d10      	ldr	r5, [pc, #64]	; (4024e8 <spi_cmd_rsp+0xa4>)
  4024a8:	4631      	mov	r1, r6
  4024aa:	f10d 0007 	add.w	r0, sp, #7
  4024ae:	47a8      	blx	r5
  4024b0:	b158      	cbz	r0, 4024ca <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4024b2:	f240 1235 	movw	r2, #309	; 0x135
  4024b6:	490d      	ldr	r1, [pc, #52]	; (4024ec <spi_cmd_rsp+0xa8>)
  4024b8:	480d      	ldr	r0, [pc, #52]	; (4024f0 <spi_cmd_rsp+0xac>)
  4024ba:	4c0e      	ldr	r4, [pc, #56]	; (4024f4 <spi_cmd_rsp+0xb0>)
  4024bc:	47a0      	blx	r4
  4024be:	480e      	ldr	r0, [pc, #56]	; (4024f8 <spi_cmd_rsp+0xb4>)
  4024c0:	47a0      	blx	r4
  4024c2:	480e      	ldr	r0, [pc, #56]	; (4024fc <spi_cmd_rsp+0xb8>)
  4024c4:	47a0      	blx	r4
			result = N_FAIL;
  4024c6:	2000      	movs	r0, #0
			goto _fail_;
  4024c8:	e00b      	b.n	4024e2 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4024ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4024ce:	b13b      	cbz	r3, 4024e0 <spi_cmd_rsp+0x9c>
  4024d0:	1e63      	subs	r3, r4, #1
  4024d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4024d6:	d1e7      	bne.n	4024a8 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  4024d8:	2001      	movs	r0, #1
  4024da:	e002      	b.n	4024e2 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  4024dc:	2000      	movs	r0, #0
  4024de:	e000      	b.n	4024e2 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  4024e0:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  4024e2:	b003      	add	sp, #12
  4024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4024e6:	bf00      	nop
  4024e8:	00402425 	.word	0x00402425
  4024ec:	0040fb20 	.word	0x0040fb20
  4024f0:	0040ee10 	.word	0x0040ee10
  4024f4:	00405e29 	.word	0x00405e29
  4024f8:	0040f664 	.word	0x0040f664
  4024fc:	0040ee38 	.word	0x0040ee38

00402500 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402504:	b083      	sub	sp, #12
  402506:	4682      	mov	sl, r0
  402508:	4689      	mov	r9, r1
  40250a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  40250c:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402510:	4d35      	ldr	r5, [pc, #212]	; (4025e8 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  402512:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  402516:	bf94      	ite	ls
  402518:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  40251c:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  402520:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402522:	2601      	movs	r6, #1
  402524:	4631      	mov	r1, r6
  402526:	f10d 0003 	add.w	r0, sp, #3
  40252a:	47a8      	blx	r5
  40252c:	b158      	cbz	r0, 402546 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40252e:	f240 1257 	movw	r2, #343	; 0x157
  402532:	492e      	ldr	r1, [pc, #184]	; (4025ec <spi_data_read+0xec>)
  402534:	482e      	ldr	r0, [pc, #184]	; (4025f0 <spi_data_read+0xf0>)
  402536:	4c2f      	ldr	r4, [pc, #188]	; (4025f4 <spi_data_read+0xf4>)
  402538:	47a0      	blx	r4
  40253a:	482f      	ldr	r0, [pc, #188]	; (4025f8 <spi_data_read+0xf8>)
  40253c:	47a0      	blx	r4
  40253e:	482f      	ldr	r0, [pc, #188]	; (4025fc <spi_data_read+0xfc>)
  402540:	47a0      	blx	r4
  402542:	2000      	movs	r0, #0
  402544:	e04d      	b.n	4025e2 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  402546:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40254a:	091b      	lsrs	r3, r3, #4
  40254c:	2b0f      	cmp	r3, #15
  40254e:	d005      	beq.n	40255c <spi_data_read+0x5c>
  402550:	3c01      	subs	r4, #1
  402552:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  402554:	f1b4 3fff 	cmp.w	r4, #4294967295
  402558:	d1e4      	bne.n	402524 <spi_data_read+0x24>
  40255a:	e001      	b.n	402560 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  40255c:	2c00      	cmp	r4, #0
  40255e:	dc0d      	bgt.n	40257c <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402560:	f240 1263 	movw	r2, #355	; 0x163
  402564:	4921      	ldr	r1, [pc, #132]	; (4025ec <spi_data_read+0xec>)
  402566:	4822      	ldr	r0, [pc, #136]	; (4025f0 <spi_data_read+0xf0>)
  402568:	4c22      	ldr	r4, [pc, #136]	; (4025f4 <spi_data_read+0xf4>)
  40256a:	47a0      	blx	r4
  40256c:	f89d 1003 	ldrb.w	r1, [sp, #3]
  402570:	4823      	ldr	r0, [pc, #140]	; (402600 <spi_data_read+0x100>)
  402572:	47a0      	blx	r4
  402574:	4821      	ldr	r0, [pc, #132]	; (4025fc <spi_data_read+0xfc>)
  402576:	47a0      	blx	r4
			result = N_FAIL;
  402578:	2000      	movs	r0, #0
			break;
  40257a:	e032      	b.n	4025e2 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  40257c:	b2bf      	uxth	r7, r7
  40257e:	4639      	mov	r1, r7
  402580:	eb0a 0008 	add.w	r0, sl, r8
  402584:	47a8      	blx	r5
  402586:	b158      	cbz	r0, 4025a0 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402588:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  40258c:	4917      	ldr	r1, [pc, #92]	; (4025ec <spi_data_read+0xec>)
  40258e:	4818      	ldr	r0, [pc, #96]	; (4025f0 <spi_data_read+0xf0>)
  402590:	4c18      	ldr	r4, [pc, #96]	; (4025f4 <spi_data_read+0xf4>)
  402592:	47a0      	blx	r4
  402594:	481b      	ldr	r0, [pc, #108]	; (402604 <spi_data_read+0x104>)
  402596:	47a0      	blx	r4
  402598:	4818      	ldr	r0, [pc, #96]	; (4025fc <spi_data_read+0xfc>)
  40259a:	47a0      	blx	r4
			result = N_FAIL;
  40259c:	2000      	movs	r0, #0
			break;
  40259e:	e020      	b.n	4025e2 <spi_data_read+0xe2>
		}
		if(!clockless)
  4025a0:	f1bb 0f00 	cmp.w	fp, #0
  4025a4:	d112      	bne.n	4025cc <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  4025a6:	4b18      	ldr	r3, [pc, #96]	; (402608 <spi_data_read+0x108>)
  4025a8:	781b      	ldrb	r3, [r3, #0]
  4025aa:	b97b      	cbnz	r3, 4025cc <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  4025ac:	2102      	movs	r1, #2
  4025ae:	a801      	add	r0, sp, #4
  4025b0:	47a8      	blx	r5
  4025b2:	b158      	cbz	r0, 4025cc <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  4025b4:	f240 1277 	movw	r2, #375	; 0x177
  4025b8:	490c      	ldr	r1, [pc, #48]	; (4025ec <spi_data_read+0xec>)
  4025ba:	480d      	ldr	r0, [pc, #52]	; (4025f0 <spi_data_read+0xf0>)
  4025bc:	4c0d      	ldr	r4, [pc, #52]	; (4025f4 <spi_data_read+0xf4>)
  4025be:	47a0      	blx	r4
  4025c0:	4812      	ldr	r0, [pc, #72]	; (40260c <spi_data_read+0x10c>)
  4025c2:	47a0      	blx	r4
  4025c4:	480d      	ldr	r0, [pc, #52]	; (4025fc <spi_data_read+0xfc>)
  4025c6:	47a0      	blx	r4
					result = N_FAIL;
  4025c8:	2000      	movs	r0, #0
					break;
  4025ca:	e00a      	b.n	4025e2 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  4025cc:	44b8      	add	r8, r7
  4025ce:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  4025d2:	ebc7 0709 	rsb	r7, r7, r9
  4025d6:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  4025da:	f1b9 0f00 	cmp.w	r9, #0
  4025de:	d198      	bne.n	402512 <spi_data_read+0x12>
  4025e0:	2001      	movs	r0, #1

	return result;
}
  4025e2:	b003      	add	sp, #12
  4025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025e8:	00402425 	.word	0x00402425
  4025ec:	0040fc38 	.word	0x0040fc38
  4025f0:	0040ee10 	.word	0x0040ee10
  4025f4:	00405e29 	.word	0x00405e29
  4025f8:	0040f698 	.word	0x0040f698
  4025fc:	0040ee38 	.word	0x0040ee38
  402600:	0040f6cc 	.word	0x0040f6cc
  402604:	0040f6fc 	.word	0x0040f6fc
  402608:	20000b34 	.word	0x20000b34
  40260c:	0040f730 	.word	0x0040f730

00402610 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  402610:	b500      	push	{lr}
  402612:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  402614:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  402616:	2300      	movs	r3, #0
  402618:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  40261a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40261e:	a901      	add	r1, sp, #4
  402620:	2003      	movs	r0, #3
  402622:	4b02      	ldr	r3, [pc, #8]	; (40262c <nmi_spi_write+0x1c>)
  402624:	4798      	blx	r3
}
  402626:	b005      	add	sp, #20
  402628:	f85d fb04 	ldr.w	pc, [sp], #4
  40262c:	00400f21 	.word	0x00400f21

00402630 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  402630:	b570      	push	{r4, r5, r6, lr}
  402632:	b084      	sub	sp, #16
  402634:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  402638:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  40263c:	38c1      	subs	r0, #193	; 0xc1
  40263e:	280e      	cmp	r0, #14
  402640:	f200 80ae 	bhi.w	4027a0 <spi_cmd+0x170>
  402644:	e8df f000 	tbb	[pc, r0]
  402648:	125f3e3e 	.word	0x125f3e3e
  40264c:	4d4d2c23 	.word	0x4d4d2c23
  402650:	acac0878 	.word	0xacac0878
  402654:	acac      	.short	0xacac
  402656:	35          	.byte	0x35
  402657:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402658:	0c0b      	lsrs	r3, r1, #16
  40265a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40265e:	0a0b      	lsrs	r3, r1, #8
  402660:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402664:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402668:	2105      	movs	r1, #5
		break;
  40266a:	e0a4      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  40266c:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402670:	b914      	cbnz	r4, 402678 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402672:	f88d 3005 	strb.w	r3, [sp, #5]
  402676:	e003      	b.n	402680 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  402678:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40267c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402680:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402684:	2300      	movs	r3, #0
  402686:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40268a:	2105      	movs	r1, #5
		break;
  40268c:	e093      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  40268e:	2300      	movs	r3, #0
  402690:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402694:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402698:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40269c:	2105      	movs	r1, #5
		break;
  40269e:	e08a      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  4026a0:	2300      	movs	r3, #0
  4026a2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  4026a6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  4026aa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4026ae:	2105      	movs	r1, #5
		break;
  4026b0:	e081      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  4026b2:	23ff      	movs	r3, #255	; 0xff
  4026b4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  4026b8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  4026bc:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4026c0:	2105      	movs	r1, #5
		break;
  4026c2:	e078      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  4026c4:	0c0a      	lsrs	r2, r1, #16
  4026c6:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4026ca:	0a0a      	lsrs	r2, r1, #8
  4026cc:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4026d0:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  4026d4:	0a1a      	lsrs	r2, r3, #8
  4026d6:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  4026da:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  4026de:	2107      	movs	r1, #7
		break;
  4026e0:	e069      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  4026e2:	0c0a      	lsrs	r2, r1, #16
  4026e4:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4026e8:	0a0a      	lsrs	r2, r1, #8
  4026ea:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4026ee:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  4026f2:	0c1a      	lsrs	r2, r3, #16
  4026f4:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  4026f8:	0a1a      	lsrs	r2, r3, #8
  4026fa:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  4026fe:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402702:	2108      	movs	r1, #8
		break;
  402704:	e057      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402706:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  40270a:	b914      	cbnz	r4, 402712 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  40270c:	f88d 3005 	strb.w	r3, [sp, #5]
  402710:	e003      	b.n	40271a <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  402712:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402716:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  40271a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  40271e:	0e13      	lsrs	r3, r2, #24
  402720:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  402724:	0c13      	lsrs	r3, r2, #16
  402726:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  40272a:	0a13      	lsrs	r3, r2, #8
  40272c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  402730:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  402734:	2108      	movs	r1, #8
		break;
  402736:	e03e      	b.n	4027b6 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  402738:	0c0b      	lsrs	r3, r1, #16
  40273a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40273e:	0a0b      	lsrs	r3, r1, #8
  402740:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402744:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402748:	0e13      	lsrs	r3, r2, #24
  40274a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  40274e:	0c13      	lsrs	r3, r2, #16
  402750:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402754:	0a13      	lsrs	r3, r2, #8
  402756:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  40275a:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  40275e:	2109      	movs	r1, #9
		break;
  402760:	e029      	b.n	4027b6 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402762:	f812 3b01 	ldrb.w	r3, [r2], #1
  402766:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  40276a:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  40276c:	4295      	cmp	r5, r2
  40276e:	d1f8      	bne.n	402762 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402770:	ab04      	add	r3, sp, #16
  402772:	441e      	add	r6, r3
  402774:	0043      	lsls	r3, r0, #1
  402776:	f806 3c0c 	strb.w	r3, [r6, #-12]
  40277a:	e001      	b.n	402780 <spi_cmd+0x150>
		else
			len-=1;
  40277c:	3901      	subs	r1, #1
  40277e:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402780:	a801      	add	r0, sp, #4
  402782:	4b10      	ldr	r3, [pc, #64]	; (4027c4 <spi_cmd+0x194>)
  402784:	4798      	blx	r3
  402786:	b168      	cbz	r0, 4027a4 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402788:	f44f 7284 	mov.w	r2, #264	; 0x108
  40278c:	490e      	ldr	r1, [pc, #56]	; (4027c8 <spi_cmd+0x198>)
  40278e:	480f      	ldr	r0, [pc, #60]	; (4027cc <spi_cmd+0x19c>)
  402790:	4c0f      	ldr	r4, [pc, #60]	; (4027d0 <spi_cmd+0x1a0>)
  402792:	47a0      	blx	r4
  402794:	480f      	ldr	r0, [pc, #60]	; (4027d4 <spi_cmd+0x1a4>)
  402796:	47a0      	blx	r4
  402798:	480f      	ldr	r0, [pc, #60]	; (4027d8 <spi_cmd+0x1a8>)
  40279a:	47a0      	blx	r4
			result = N_FAIL;
  40279c:	2000      	movs	r0, #0
  40279e:	e00f      	b.n	4027c0 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  4027a0:	2000      	movs	r0, #0
  4027a2:	e00d      	b.n	4027c0 <spi_cmd+0x190>
  4027a4:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  4027a6:	e00b      	b.n	4027c0 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4027a8:	1e4e      	subs	r6, r1, #1
  4027aa:	ab01      	add	r3, sp, #4
  4027ac:	199d      	adds	r5, r3, r6
  4027ae:	207f      	movs	r0, #127	; 0x7f
  4027b0:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  4027b2:	4c0a      	ldr	r4, [pc, #40]	; (4027dc <spi_cmd+0x1ac>)
  4027b4:	e7d5      	b.n	402762 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  4027b6:	4b0a      	ldr	r3, [pc, #40]	; (4027e0 <spi_cmd+0x1b0>)
  4027b8:	781b      	ldrb	r3, [r3, #0]
  4027ba:	2b00      	cmp	r3, #0
  4027bc:	d1de      	bne.n	40277c <spi_cmd+0x14c>
  4027be:	e7f3      	b.n	4027a8 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  4027c0:	b004      	add	sp, #16
  4027c2:	bd70      	pop	{r4, r5, r6, pc}
  4027c4:	00402611 	.word	0x00402611
  4027c8:	0040fb18 	.word	0x0040fb18
  4027cc:	0040ee10 	.word	0x0040ee10
  4027d0:	00405e29 	.word	0x00405e29
  4027d4:	0040f768 	.word	0x0040f768
  4027d8:	0040ee38 	.word	0x0040ee38
  4027dc:	0040fb38 	.word	0x0040fb38
  4027e0:	20000b34 	.word	0x20000b34

004027e4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  4027e4:	b570      	push	{r4, r5, r6, lr}
  4027e6:	b082      	sub	sp, #8
  4027e8:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  4027ea:	2831      	cmp	r0, #49	; 0x31
  4027ec:	bf35      	itete	cc
  4027ee:	2301      	movcc	r3, #1
  4027f0:	2300      	movcs	r3, #0
  4027f2:	25c3      	movcc	r5, #195	; 0xc3
  4027f4:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4027f6:	9300      	str	r3, [sp, #0]
  4027f8:	2304      	movs	r3, #4
  4027fa:	460a      	mov	r2, r1
  4027fc:	4601      	mov	r1, r0
  4027fe:	4628      	mov	r0, r5
  402800:	4e16      	ldr	r6, [pc, #88]	; (40285c <spi_write_reg+0x78>)
  402802:	47b0      	blx	r6
	if (result != N_OK) {
  402804:	2801      	cmp	r0, #1
  402806:	d00c      	beq.n	402822 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402808:	f240 12eb 	movw	r2, #491	; 0x1eb
  40280c:	4914      	ldr	r1, [pc, #80]	; (402860 <spi_write_reg+0x7c>)
  40280e:	4815      	ldr	r0, [pc, #84]	; (402864 <spi_write_reg+0x80>)
  402810:	4d15      	ldr	r5, [pc, #84]	; (402868 <spi_write_reg+0x84>)
  402812:	47a8      	blx	r5
  402814:	4621      	mov	r1, r4
  402816:	4815      	ldr	r0, [pc, #84]	; (40286c <spi_write_reg+0x88>)
  402818:	47a8      	blx	r5
  40281a:	4815      	ldr	r0, [pc, #84]	; (402870 <spi_write_reg+0x8c>)
  40281c:	47a8      	blx	r5
		return N_FAIL;
  40281e:	2000      	movs	r0, #0
  402820:	e01a      	b.n	402858 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  402822:	4628      	mov	r0, r5
  402824:	4b13      	ldr	r3, [pc, #76]	; (402874 <spi_write_reg+0x90>)
  402826:	4798      	blx	r3
	if (result != N_OK) {
  402828:	2801      	cmp	r0, #1
  40282a:	d014      	beq.n	402856 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  40282c:	f240 12f1 	movw	r2, #497	; 0x1f1
  402830:	490b      	ldr	r1, [pc, #44]	; (402860 <spi_write_reg+0x7c>)
  402832:	480c      	ldr	r0, [pc, #48]	; (402864 <spi_write_reg+0x80>)
  402834:	4d0c      	ldr	r5, [pc, #48]	; (402868 <spi_write_reg+0x84>)
  402836:	47a8      	blx	r5
  402838:	4621      	mov	r1, r4
  40283a:	480f      	ldr	r0, [pc, #60]	; (402878 <spi_write_reg+0x94>)
  40283c:	47a8      	blx	r5
  40283e:	480c      	ldr	r0, [pc, #48]	; (402870 <spi_write_reg+0x8c>)
  402840:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402842:	2400      	movs	r4, #0
  402844:	9400      	str	r4, [sp, #0]
  402846:	4623      	mov	r3, r4
  402848:	4622      	mov	r2, r4
  40284a:	4621      	mov	r1, r4
  40284c:	20cf      	movs	r0, #207	; 0xcf
  40284e:	4d03      	ldr	r5, [pc, #12]	; (40285c <spi_write_reg+0x78>)
  402850:	47a8      	blx	r5
		return N_FAIL;
  402852:	4620      	mov	r0, r4
  402854:	e000      	b.n	402858 <spi_write_reg+0x74>
	}

	return N_OK;
  402856:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  402858:	b002      	add	sp, #8
  40285a:	bd70      	pop	{r4, r5, r6, pc}
  40285c:	00402631 	.word	0x00402631
  402860:	0040f634 	.word	0x0040f634
  402864:	0040ee10 	.word	0x0040ee10
  402868:	00405e29 	.word	0x00405e29
  40286c:	0040f794 	.word	0x0040f794
  402870:	0040ee38 	.word	0x0040ee38
  402874:	00402445 	.word	0x00402445
  402878:	0040f7c0 	.word	0x0040f7c0

0040287c <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  40287c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402880:	b084      	sub	sp, #16
  402882:	4604      	mov	r4, r0
  402884:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402886:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40288a:	bf35      	itete	cc
  40288c:	2601      	movcc	r6, #1
  40288e:	2600      	movcs	r6, #0
  402890:	25c4      	movcc	r5, #196	; 0xc4
  402892:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402894:	9600      	str	r6, [sp, #0]
  402896:	2304      	movs	r3, #4
  402898:	2200      	movs	r2, #0
  40289a:	4601      	mov	r1, r0
  40289c:	4628      	mov	r0, r5
  40289e:	4f2d      	ldr	r7, [pc, #180]	; (402954 <spi_read_reg+0xd8>)
  4028a0:	47b8      	blx	r7
	if (result != N_OK) {
  4028a2:	2801      	cmp	r0, #1
  4028a4:	d00c      	beq.n	4028c0 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4028a6:	f240 2245 	movw	r2, #581	; 0x245
  4028aa:	492b      	ldr	r1, [pc, #172]	; (402958 <spi_read_reg+0xdc>)
  4028ac:	482b      	ldr	r0, [pc, #172]	; (40295c <spi_read_reg+0xe0>)
  4028ae:	4d2c      	ldr	r5, [pc, #176]	; (402960 <spi_read_reg+0xe4>)
  4028b0:	47a8      	blx	r5
  4028b2:	4621      	mov	r1, r4
  4028b4:	482b      	ldr	r0, [pc, #172]	; (402964 <spi_read_reg+0xe8>)
  4028b6:	47a8      	blx	r5
  4028b8:	482b      	ldr	r0, [pc, #172]	; (402968 <spi_read_reg+0xec>)
  4028ba:	47a8      	blx	r5
		return N_FAIL;
  4028bc:	2000      	movs	r0, #0
  4028be:	e045      	b.n	40294c <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  4028c0:	4628      	mov	r0, r5
  4028c2:	4b2a      	ldr	r3, [pc, #168]	; (40296c <spi_read_reg+0xf0>)
  4028c4:	4798      	blx	r3
	if (result != N_OK) {
  4028c6:	2801      	cmp	r0, #1
  4028c8:	d014      	beq.n	4028f4 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  4028ca:	f240 224b 	movw	r2, #587	; 0x24b
  4028ce:	4922      	ldr	r1, [pc, #136]	; (402958 <spi_read_reg+0xdc>)
  4028d0:	4822      	ldr	r0, [pc, #136]	; (40295c <spi_read_reg+0xe0>)
  4028d2:	4d23      	ldr	r5, [pc, #140]	; (402960 <spi_read_reg+0xe4>)
  4028d4:	47a8      	blx	r5
  4028d6:	4621      	mov	r1, r4
  4028d8:	4825      	ldr	r0, [pc, #148]	; (402970 <spi_read_reg+0xf4>)
  4028da:	47a8      	blx	r5
  4028dc:	4822      	ldr	r0, [pc, #136]	; (402968 <spi_read_reg+0xec>)
  4028de:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4028e0:	2400      	movs	r4, #0
  4028e2:	9400      	str	r4, [sp, #0]
  4028e4:	4623      	mov	r3, r4
  4028e6:	4622      	mov	r2, r4
  4028e8:	4621      	mov	r1, r4
  4028ea:	20cf      	movs	r0, #207	; 0xcf
  4028ec:	4d19      	ldr	r5, [pc, #100]	; (402954 <spi_read_reg+0xd8>)
  4028ee:	47a8      	blx	r5
		return N_FAIL;
  4028f0:	4620      	mov	r0, r4
  4028f2:	e02b      	b.n	40294c <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  4028f4:	4632      	mov	r2, r6
  4028f6:	2104      	movs	r1, #4
  4028f8:	a803      	add	r0, sp, #12
  4028fa:	4b1e      	ldr	r3, [pc, #120]	; (402974 <spi_read_reg+0xf8>)
  4028fc:	4798      	blx	r3
	if (result != N_OK) {
  4028fe:	2801      	cmp	r0, #1
  402900:	d013      	beq.n	40292a <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402902:	f240 2253 	movw	r2, #595	; 0x253
  402906:	4914      	ldr	r1, [pc, #80]	; (402958 <spi_read_reg+0xdc>)
  402908:	4814      	ldr	r0, [pc, #80]	; (40295c <spi_read_reg+0xe0>)
  40290a:	4c15      	ldr	r4, [pc, #84]	; (402960 <spi_read_reg+0xe4>)
  40290c:	47a0      	blx	r4
  40290e:	481a      	ldr	r0, [pc, #104]	; (402978 <spi_read_reg+0xfc>)
  402910:	47a0      	blx	r4
  402912:	4815      	ldr	r0, [pc, #84]	; (402968 <spi_read_reg+0xec>)
  402914:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402916:	2400      	movs	r4, #0
  402918:	9400      	str	r4, [sp, #0]
  40291a:	4623      	mov	r3, r4
  40291c:	4622      	mov	r2, r4
  40291e:	4621      	mov	r1, r4
  402920:	20cf      	movs	r0, #207	; 0xcf
  402922:	4d0c      	ldr	r5, [pc, #48]	; (402954 <spi_read_reg+0xd8>)
  402924:	47a8      	blx	r5
		return N_FAIL;
  402926:	4620      	mov	r0, r4
  402928:	e010      	b.n	40294c <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  40292a:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40292e:	f89d 200e 	ldrb.w	r2, [sp, #14]
  402932:	0413      	lsls	r3, r2, #16
  402934:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  402938:	f89d 300c 	ldrb.w	r3, [sp, #12]
  40293c:	4313      	orrs	r3, r2
  40293e:	f89d 200f 	ldrb.w	r2, [sp, #15]
  402942:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402946:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40294a:	2001      	movs	r0, #1
}
  40294c:	b004      	add	sp, #16
  40294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402952:	bf00      	nop
  402954:	00402631 	.word	0x00402631
  402958:	0040f644 	.word	0x0040f644
  40295c:	0040ee10 	.word	0x0040ee10
  402960:	00405e29 	.word	0x00405e29
  402964:	0040f7f8 	.word	0x0040f7f8
  402968:	0040ee38 	.word	0x0040ee38
  40296c:	00402445 	.word	0x00402445
  402970:	0040f824 	.word	0x0040f824
  402974:	00402501 	.word	0x00402501
  402978:	0040f858 	.word	0x0040f858

0040297c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  40297c:	2000      	movs	r0, #0
  40297e:	4b01      	ldr	r3, [pc, #4]	; (402984 <nm_spi_deinit+0x8>)
  402980:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  402982:	4770      	bx	lr
  402984:	20000b34 	.word	0x20000b34

00402988 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  402988:	b500      	push	{lr}
  40298a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  40298c:	a901      	add	r1, sp, #4
  40298e:	4b03      	ldr	r3, [pc, #12]	; (40299c <nm_spi_read_reg+0x14>)
  402990:	4798      	blx	r3

	return u32Val;
}
  402992:	9801      	ldr	r0, [sp, #4]
  402994:	b003      	add	sp, #12
  402996:	f85d fb04 	ldr.w	pc, [sp], #4
  40299a:	bf00      	nop
  40299c:	0040287d 	.word	0x0040287d

004029a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4029a0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4029a2:	4b04      	ldr	r3, [pc, #16]	; (4029b4 <nm_spi_read_reg_with_ret+0x14>)
  4029a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4029a6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4029a8:	bf0c      	ite	eq
  4029aa:	2000      	moveq	r0, #0
  4029ac:	f06f 0005 	mvnne.w	r0, #5
  4029b0:	bd08      	pop	{r3, pc}
  4029b2:	bf00      	nop
  4029b4:	0040287d 	.word	0x0040287d

004029b8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4029b8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4029ba:	4b04      	ldr	r3, [pc, #16]	; (4029cc <nm_spi_write_reg+0x14>)
  4029bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4029be:	2801      	cmp	r0, #1

	return s8Ret;
}
  4029c0:	bf0c      	ite	eq
  4029c2:	2000      	moveq	r0, #0
  4029c4:	f06f 0005 	mvnne.w	r0, #5
  4029c8:	bd08      	pop	{r3, pc}
  4029ca:	bf00      	nop
  4029cc:	004027e5 	.word	0x004027e5

004029d0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4029d0:	b530      	push	{r4, r5, lr}
  4029d2:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  4029d4:	2300      	movs	r3, #0
  4029d6:	a902      	add	r1, sp, #8
  4029d8:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  4029dc:	4a32      	ldr	r2, [pc, #200]	; (402aa8 <nm_spi_init+0xd8>)
  4029de:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4029e0:	f64e 0024 	movw	r0, #59428	; 0xe824
  4029e4:	4b31      	ldr	r3, [pc, #196]	; (402aac <nm_spi_init+0xdc>)
  4029e6:	4798      	blx	r3
  4029e8:	b9f0      	cbnz	r0, 402a28 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4029ea:	2201      	movs	r2, #1
  4029ec:	4b2e      	ldr	r3, [pc, #184]	; (402aa8 <nm_spi_init+0xd8>)
  4029ee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4029f0:	f240 22c5 	movw	r2, #709	; 0x2c5
  4029f4:	492e      	ldr	r1, [pc, #184]	; (402ab0 <nm_spi_init+0xe0>)
  4029f6:	482f      	ldr	r0, [pc, #188]	; (402ab4 <nm_spi_init+0xe4>)
  4029f8:	4c2f      	ldr	r4, [pc, #188]	; (402ab8 <nm_spi_init+0xe8>)
  4029fa:	47a0      	blx	r4
  4029fc:	482f      	ldr	r0, [pc, #188]	; (402abc <nm_spi_init+0xec>)
  4029fe:	47a0      	blx	r4
  402a00:	482f      	ldr	r0, [pc, #188]	; (402ac0 <nm_spi_init+0xf0>)
  402a02:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  402a04:	4669      	mov	r1, sp
  402a06:	f64e 0024 	movw	r0, #59428	; 0xe824
  402a0a:	4b28      	ldr	r3, [pc, #160]	; (402aac <nm_spi_init+0xdc>)
  402a0c:	4798      	blx	r3
  402a0e:	4604      	mov	r4, r0
  402a10:	b950      	cbnz	r0, 402a28 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  402a12:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  402a16:	4926      	ldr	r1, [pc, #152]	; (402ab0 <nm_spi_init+0xe0>)
  402a18:	4826      	ldr	r0, [pc, #152]	; (402ab4 <nm_spi_init+0xe4>)
  402a1a:	4d27      	ldr	r5, [pc, #156]	; (402ab8 <nm_spi_init+0xe8>)
  402a1c:	47a8      	blx	r5
  402a1e:	4829      	ldr	r0, [pc, #164]	; (402ac4 <nm_spi_init+0xf4>)
  402a20:	47a8      	blx	r5
  402a22:	4827      	ldr	r0, [pc, #156]	; (402ac0 <nm_spi_init+0xf0>)
  402a24:	47a8      	blx	r5
			return 0;
  402a26:	e03c      	b.n	402aa2 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  402a28:	4b1f      	ldr	r3, [pc, #124]	; (402aa8 <nm_spi_init+0xd8>)
  402a2a:	781b      	ldrb	r3, [r3, #0]
  402a2c:	b9cb      	cbnz	r3, 402a62 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  402a2e:	9900      	ldr	r1, [sp, #0]
  402a30:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  402a34:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402a38:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402a3a:	f64e 0024 	movw	r0, #59428	; 0xe824
  402a3e:	4b22      	ldr	r3, [pc, #136]	; (402ac8 <nm_spi_init+0xf8>)
  402a40:	4798      	blx	r3
  402a42:	4604      	mov	r4, r0
  402a44:	b950      	cbnz	r0, 402a5c <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402a46:	f240 22d2 	movw	r2, #722	; 0x2d2
  402a4a:	4919      	ldr	r1, [pc, #100]	; (402ab0 <nm_spi_init+0xe0>)
  402a4c:	4819      	ldr	r0, [pc, #100]	; (402ab4 <nm_spi_init+0xe4>)
  402a4e:	4d1a      	ldr	r5, [pc, #104]	; (402ab8 <nm_spi_init+0xe8>)
  402a50:	47a8      	blx	r5
  402a52:	481e      	ldr	r0, [pc, #120]	; (402acc <nm_spi_init+0xfc>)
  402a54:	47a8      	blx	r5
  402a56:	481a      	ldr	r0, [pc, #104]	; (402ac0 <nm_spi_init+0xf0>)
  402a58:	47a8      	blx	r5
			return 0;
  402a5a:	e022      	b.n	402aa2 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  402a5c:	2201      	movs	r2, #1
  402a5e:	4b12      	ldr	r3, [pc, #72]	; (402aa8 <nm_spi_init+0xd8>)
  402a60:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  402a62:	a901      	add	r1, sp, #4
  402a64:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402a68:	4b10      	ldr	r3, [pc, #64]	; (402aac <nm_spi_init+0xdc>)
  402a6a:	4798      	blx	r3
  402a6c:	b960      	cbnz	r0, 402a88 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  402a6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402a72:	490f      	ldr	r1, [pc, #60]	; (402ab0 <nm_spi_init+0xe0>)
  402a74:	480f      	ldr	r0, [pc, #60]	; (402ab4 <nm_spi_init+0xe4>)
  402a76:	4c10      	ldr	r4, [pc, #64]	; (402ab8 <nm_spi_init+0xe8>)
  402a78:	47a0      	blx	r4
  402a7a:	4815      	ldr	r0, [pc, #84]	; (402ad0 <nm_spi_init+0x100>)
  402a7c:	47a0      	blx	r4
  402a7e:	4810      	ldr	r0, [pc, #64]	; (402ac0 <nm_spi_init+0xf0>)
  402a80:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402a82:	f06f 0405 	mvn.w	r4, #5
  402a86:	e00c      	b.n	402aa2 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402a88:	f64e 0024 	movw	r0, #59428	; 0xe824
  402a8c:	4b11      	ldr	r3, [pc, #68]	; (402ad4 <nm_spi_init+0x104>)
  402a8e:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  402a90:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402a94:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402a98:	f64e 0024 	movw	r0, #59428	; 0xe824
  402a9c:	4b0e      	ldr	r3, [pc, #56]	; (402ad8 <nm_spi_init+0x108>)
  402a9e:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  402aa0:	2400      	movs	r4, #0
}
  402aa2:	4620      	mov	r0, r4
  402aa4:	b003      	add	sp, #12
  402aa6:	bd30      	pop	{r4, r5, pc}
  402aa8:	20000b34 	.word	0x20000b34
  402aac:	0040287d 	.word	0x0040287d
  402ab0:	0040f618 	.word	0x0040f618
  402ab4:	0040ee10 	.word	0x0040ee10
  402ab8:	00405e29 	.word	0x00405e29
  402abc:	0040f878 	.word	0x0040f878
  402ac0:	0040ee38 	.word	0x0040ee38
  402ac4:	0040f8c8 	.word	0x0040f8c8
  402ac8:	004027e5 	.word	0x004027e5
  402acc:	0040f8f8 	.word	0x0040f8f8
  402ad0:	0040f92c 	.word	0x0040f92c
  402ad4:	00402989 	.word	0x00402989
  402ad8:	004029b9 	.word	0x004029b9

00402adc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ade:	b083      	sub	sp, #12
  402ae0:	4604      	mov	r4, r0
  402ae2:	460f      	mov	r7, r1
  402ae4:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402ae6:	2200      	movs	r2, #0
  402ae8:	9200      	str	r2, [sp, #0]
  402aea:	462b      	mov	r3, r5
  402aec:	4601      	mov	r1, r0
  402aee:	20c8      	movs	r0, #200	; 0xc8
  402af0:	4e23      	ldr	r6, [pc, #140]	; (402b80 <nm_spi_read_block+0xa4>)
  402af2:	47b0      	blx	r6
	if (result != N_OK) {
  402af4:	2801      	cmp	r0, #1
  402af6:	d00b      	beq.n	402b10 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402af8:	f44f 721d 	mov.w	r2, #628	; 0x274
  402afc:	4921      	ldr	r1, [pc, #132]	; (402b84 <nm_spi_read_block+0xa8>)
  402afe:	4822      	ldr	r0, [pc, #136]	; (402b88 <nm_spi_read_block+0xac>)
  402b00:	4d22      	ldr	r5, [pc, #136]	; (402b8c <nm_spi_read_block+0xb0>)
  402b02:	47a8      	blx	r5
  402b04:	4621      	mov	r1, r4
  402b06:	4822      	ldr	r0, [pc, #136]	; (402b90 <nm_spi_read_block+0xb4>)
  402b08:	47a8      	blx	r5
  402b0a:	4822      	ldr	r0, [pc, #136]	; (402b94 <nm_spi_read_block+0xb8>)
  402b0c:	47a8      	blx	r5
  402b0e:	e032      	b.n	402b76 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402b10:	20c8      	movs	r0, #200	; 0xc8
  402b12:	4b21      	ldr	r3, [pc, #132]	; (402b98 <nm_spi_read_block+0xbc>)
  402b14:	4798      	blx	r3
	if (result != N_OK) {
  402b16:	2801      	cmp	r0, #1
  402b18:	d012      	beq.n	402b40 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402b1a:	f240 227a 	movw	r2, #634	; 0x27a
  402b1e:	4919      	ldr	r1, [pc, #100]	; (402b84 <nm_spi_read_block+0xa8>)
  402b20:	4819      	ldr	r0, [pc, #100]	; (402b88 <nm_spi_read_block+0xac>)
  402b22:	4d1a      	ldr	r5, [pc, #104]	; (402b8c <nm_spi_read_block+0xb0>)
  402b24:	47a8      	blx	r5
  402b26:	4621      	mov	r1, r4
  402b28:	481c      	ldr	r0, [pc, #112]	; (402b9c <nm_spi_read_block+0xc0>)
  402b2a:	47a8      	blx	r5
  402b2c:	4819      	ldr	r0, [pc, #100]	; (402b94 <nm_spi_read_block+0xb8>)
  402b2e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402b30:	2100      	movs	r1, #0
  402b32:	9100      	str	r1, [sp, #0]
  402b34:	460b      	mov	r3, r1
  402b36:	460a      	mov	r2, r1
  402b38:	20cf      	movs	r0, #207	; 0xcf
  402b3a:	4c11      	ldr	r4, [pc, #68]	; (402b80 <nm_spi_read_block+0xa4>)
  402b3c:	47a0      	blx	r4
  402b3e:	e01a      	b.n	402b76 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  402b40:	2200      	movs	r2, #0
  402b42:	4629      	mov	r1, r5
  402b44:	4638      	mov	r0, r7
  402b46:	4b16      	ldr	r3, [pc, #88]	; (402ba0 <nm_spi_read_block+0xc4>)
  402b48:	4798      	blx	r3
	if (result != N_OK) {
  402b4a:	2801      	cmp	r0, #1
  402b4c:	d011      	beq.n	402b72 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  402b4e:	f44f 7221 	mov.w	r2, #644	; 0x284
  402b52:	490c      	ldr	r1, [pc, #48]	; (402b84 <nm_spi_read_block+0xa8>)
  402b54:	480c      	ldr	r0, [pc, #48]	; (402b88 <nm_spi_read_block+0xac>)
  402b56:	4c0d      	ldr	r4, [pc, #52]	; (402b8c <nm_spi_read_block+0xb0>)
  402b58:	47a0      	blx	r4
  402b5a:	4812      	ldr	r0, [pc, #72]	; (402ba4 <nm_spi_read_block+0xc8>)
  402b5c:	47a0      	blx	r4
  402b5e:	480d      	ldr	r0, [pc, #52]	; (402b94 <nm_spi_read_block+0xb8>)
  402b60:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402b62:	2100      	movs	r1, #0
  402b64:	9100      	str	r1, [sp, #0]
  402b66:	460b      	mov	r3, r1
  402b68:	460a      	mov	r2, r1
  402b6a:	20cf      	movs	r0, #207	; 0xcf
  402b6c:	4c04      	ldr	r4, [pc, #16]	; (402b80 <nm_spi_read_block+0xa4>)
  402b6e:	47a0      	blx	r4
  402b70:	e001      	b.n	402b76 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402b72:	2000      	movs	r0, #0
  402b74:	e001      	b.n	402b7a <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402b76:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402b7a:	b003      	add	sp, #12
  402b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b7e:	bf00      	nop
  402b80:	00402631 	.word	0x00402631
  402b84:	0040fb2c 	.word	0x0040fb2c
  402b88:	0040ee10 	.word	0x0040ee10
  402b8c:	00405e29 	.word	0x00405e29
  402b90:	0040f954 	.word	0x0040f954
  402b94:	0040ee38 	.word	0x0040ee38
  402b98:	00402445 	.word	0x00402445
  402b9c:	0040f984 	.word	0x0040f984
  402ba0:	00402501 	.word	0x00402501
  402ba4:	0040f9bc 	.word	0x0040f9bc

00402ba8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402bac:	b085      	sub	sp, #20
  402bae:	4604      	mov	r4, r0
  402bb0:	4688      	mov	r8, r1
  402bb2:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402bb4:	2200      	movs	r2, #0
  402bb6:	9200      	str	r2, [sp, #0]
  402bb8:	462b      	mov	r3, r5
  402bba:	4601      	mov	r1, r0
  402bbc:	20c7      	movs	r0, #199	; 0xc7
  402bbe:	4e4c      	ldr	r6, [pc, #304]	; (402cf0 <nm_spi_write_block+0x148>)
  402bc0:	47b0      	blx	r6
	if (result != N_OK) {
  402bc2:	2801      	cmp	r0, #1
  402bc4:	d00b      	beq.n	402bde <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  402bc6:	f240 220f 	movw	r2, #527	; 0x20f
  402bca:	494a      	ldr	r1, [pc, #296]	; (402cf4 <nm_spi_write_block+0x14c>)
  402bcc:	484a      	ldr	r0, [pc, #296]	; (402cf8 <nm_spi_write_block+0x150>)
  402bce:	4d4b      	ldr	r5, [pc, #300]	; (402cfc <nm_spi_write_block+0x154>)
  402bd0:	47a8      	blx	r5
  402bd2:	4621      	mov	r1, r4
  402bd4:	484a      	ldr	r0, [pc, #296]	; (402d00 <nm_spi_write_block+0x158>)
  402bd6:	47a8      	blx	r5
  402bd8:	484a      	ldr	r0, [pc, #296]	; (402d04 <nm_spi_write_block+0x15c>)
  402bda:	47a8      	blx	r5
  402bdc:	e082      	b.n	402ce4 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402bde:	20c7      	movs	r0, #199	; 0xc7
  402be0:	4b49      	ldr	r3, [pc, #292]	; (402d08 <nm_spi_write_block+0x160>)
  402be2:	4798      	blx	r3
	if (result != N_OK) {
  402be4:	2801      	cmp	r0, #1
  402be6:	d012      	beq.n	402c0e <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  402be8:	f240 2215 	movw	r2, #533	; 0x215
  402bec:	4941      	ldr	r1, [pc, #260]	; (402cf4 <nm_spi_write_block+0x14c>)
  402bee:	4842      	ldr	r0, [pc, #264]	; (402cf8 <nm_spi_write_block+0x150>)
  402bf0:	4d42      	ldr	r5, [pc, #264]	; (402cfc <nm_spi_write_block+0x154>)
  402bf2:	47a8      	blx	r5
  402bf4:	4621      	mov	r1, r4
  402bf6:	4845      	ldr	r0, [pc, #276]	; (402d0c <nm_spi_write_block+0x164>)
  402bf8:	47a8      	blx	r5
  402bfa:	4842      	ldr	r0, [pc, #264]	; (402d04 <nm_spi_write_block+0x15c>)
  402bfc:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402bfe:	2100      	movs	r1, #0
  402c00:	9100      	str	r1, [sp, #0]
  402c02:	460b      	mov	r3, r1
  402c04:	460a      	mov	r2, r1
  402c06:	20cf      	movs	r0, #207	; 0xcf
  402c08:	4c39      	ldr	r4, [pc, #228]	; (402cf0 <nm_spi_write_block+0x148>)
  402c0a:	47a0      	blx	r4
  402c0c:	e06a      	b.n	402ce4 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  402c0e:	2400      	movs	r4, #0
  402c10:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402c14:	4f3e      	ldr	r7, [pc, #248]	; (402d10 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402c16:	f8df 9110 	ldr.w	r9, [pc, #272]	; 402d28 <nm_spi_write_block+0x180>
  402c1a:	462e      	mov	r6, r5
  402c1c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402c20:	bf28      	it	cs
  402c22:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  402c26:	b92c      	cbnz	r4, 402c34 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  402c28:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402c2c:	bf94      	ite	ls
  402c2e:	2303      	movls	r3, #3
  402c30:	2301      	movhi	r3, #1
  402c32:	e004      	b.n	402c3e <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  402c34:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402c38:	bf94      	ite	ls
  402c3a:	2303      	movls	r3, #3
  402c3c:	2302      	movhi	r3, #2
		}
		cmd |= order;
  402c3e:	f063 030f 	orn	r3, r3, #15
  402c42:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402c46:	2101      	movs	r1, #1
  402c48:	f10d 000b 	add.w	r0, sp, #11
  402c4c:	47b8      	blx	r7
  402c4e:	b150      	cbz	r0, 402c66 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  402c50:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402c54:	492f      	ldr	r1, [pc, #188]	; (402d14 <nm_spi_write_block+0x16c>)
  402c56:	4828      	ldr	r0, [pc, #160]	; (402cf8 <nm_spi_write_block+0x150>)
  402c58:	4c28      	ldr	r4, [pc, #160]	; (402cfc <nm_spi_write_block+0x154>)
  402c5a:	47a0      	blx	r4
  402c5c:	482e      	ldr	r0, [pc, #184]	; (402d18 <nm_spi_write_block+0x170>)
  402c5e:	47a0      	blx	r4
  402c60:	4828      	ldr	r0, [pc, #160]	; (402d04 <nm_spi_write_block+0x15c>)
  402c62:	47a0      	blx	r4
  402c64:	e028      	b.n	402cb8 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  402c66:	4631      	mov	r1, r6
  402c68:	eb08 0004 	add.w	r0, r8, r4
  402c6c:	47b8      	blx	r7
  402c6e:	b150      	cbz	r0, 402c86 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402c70:	f240 12b1 	movw	r2, #433	; 0x1b1
  402c74:	4927      	ldr	r1, [pc, #156]	; (402d14 <nm_spi_write_block+0x16c>)
  402c76:	4820      	ldr	r0, [pc, #128]	; (402cf8 <nm_spi_write_block+0x150>)
  402c78:	4c20      	ldr	r4, [pc, #128]	; (402cfc <nm_spi_write_block+0x154>)
  402c7a:	47a0      	blx	r4
  402c7c:	4827      	ldr	r0, [pc, #156]	; (402d1c <nm_spi_write_block+0x174>)
  402c7e:	47a0      	blx	r4
  402c80:	4820      	ldr	r0, [pc, #128]	; (402d04 <nm_spi_write_block+0x15c>)
  402c82:	47a0      	blx	r4
  402c84:	e018      	b.n	402cb8 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402c86:	f899 3000 	ldrb.w	r3, [r9]
  402c8a:	b973      	cbnz	r3, 402caa <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  402c8c:	2102      	movs	r1, #2
  402c8e:	a803      	add	r0, sp, #12
  402c90:	47b8      	blx	r7
  402c92:	b150      	cbz	r0, 402caa <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402c94:	f240 12bb 	movw	r2, #443	; 0x1bb
  402c98:	491e      	ldr	r1, [pc, #120]	; (402d14 <nm_spi_write_block+0x16c>)
  402c9a:	4817      	ldr	r0, [pc, #92]	; (402cf8 <nm_spi_write_block+0x150>)
  402c9c:	4c17      	ldr	r4, [pc, #92]	; (402cfc <nm_spi_write_block+0x154>)
  402c9e:	47a0      	blx	r4
  402ca0:	481f      	ldr	r0, [pc, #124]	; (402d20 <nm_spi_write_block+0x178>)
  402ca2:	47a0      	blx	r4
  402ca4:	4817      	ldr	r0, [pc, #92]	; (402d04 <nm_spi_write_block+0x15c>)
  402ca6:	47a0      	blx	r4
  402ca8:	e006      	b.n	402cb8 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  402caa:	4434      	add	r4, r6
  402cac:	b224      	sxth	r4, r4
		sz -= nbytes;
  402cae:	1bad      	subs	r5, r5, r6
  402cb0:	b2ad      	uxth	r5, r5
	} while (sz);
  402cb2:	2d00      	cmp	r5, #0
  402cb4:	d1b1      	bne.n	402c1a <nm_spi_write_block+0x72>
  402cb6:	e013      	b.n	402ce0 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  402cb8:	f240 2226 	movw	r2, #550	; 0x226
  402cbc:	490d      	ldr	r1, [pc, #52]	; (402cf4 <nm_spi_write_block+0x14c>)
  402cbe:	480e      	ldr	r0, [pc, #56]	; (402cf8 <nm_spi_write_block+0x150>)
  402cc0:	4c0e      	ldr	r4, [pc, #56]	; (402cfc <nm_spi_write_block+0x154>)
  402cc2:	47a0      	blx	r4
  402cc4:	4817      	ldr	r0, [pc, #92]	; (402d24 <nm_spi_write_block+0x17c>)
  402cc6:	47a0      	blx	r4
  402cc8:	480e      	ldr	r0, [pc, #56]	; (402d04 <nm_spi_write_block+0x15c>)
  402cca:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402ccc:	2400      	movs	r4, #0
  402cce:	9400      	str	r4, [sp, #0]
  402cd0:	4623      	mov	r3, r4
  402cd2:	4622      	mov	r2, r4
  402cd4:	4621      	mov	r1, r4
  402cd6:	20cf      	movs	r0, #207	; 0xcf
  402cd8:	4d05      	ldr	r5, [pc, #20]	; (402cf0 <nm_spi_write_block+0x148>)
  402cda:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402cdc:	4620      	mov	r0, r4
  402cde:	e003      	b.n	402ce8 <nm_spi_write_block+0x140>
  402ce0:	2000      	movs	r0, #0
  402ce2:	e001      	b.n	402ce8 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402ce4:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402ce8:	b005      	add	sp, #20
  402cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402cee:	bf00      	nop
  402cf0:	00402631 	.word	0x00402631
  402cf4:	0040f654 	.word	0x0040f654
  402cf8:	0040ee10 	.word	0x0040ee10
  402cfc:	00405e29 	.word	0x00405e29
  402d00:	0040f9e4 	.word	0x0040f9e4
  402d04:	0040ee38 	.word	0x0040ee38
  402d08:	00402445 	.word	0x00402445
  402d0c:	0040fa14 	.word	0x0040fa14
  402d10:	00402611 	.word	0x00402611
  402d14:	0040f624 	.word	0x0040f624
  402d18:	0040fa4c 	.word	0x0040fa4c
  402d1c:	0040fa84 	.word	0x0040fa84
  402d20:	0040fab8 	.word	0x0040fab8
  402d24:	0040faf0 	.word	0x0040faf0
  402d28:	20000b34 	.word	0x20000b34

00402d2c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  402d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d30:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  402d34:	2c00      	cmp	r4, #0
  402d36:	d047      	beq.n	402dc8 <Socket_ReadSocketData+0x9c>
  402d38:	4681      	mov	r9, r0
  402d3a:	460e      	mov	r6, r1
  402d3c:	4692      	mov	sl, r2
  402d3e:	4698      	mov	r8, r3
  402d40:	0103      	lsls	r3, r0, #4
  402d42:	4922      	ldr	r1, [pc, #136]	; (402dcc <Socket_ReadSocketData+0xa0>)
  402d44:	58cb      	ldr	r3, [r1, r3]
  402d46:	2b00      	cmp	r3, #0
  402d48:	d03e      	beq.n	402dc8 <Socket_ReadSocketData+0x9c>
  402d4a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  402d4e:	889b      	ldrh	r3, [r3, #4]
  402d50:	b29b      	uxth	r3, r3
  402d52:	2b00      	cmp	r3, #0
  402d54:	d038      	beq.n	402dc8 <Socket_ReadSocketData+0x9c>
  402d56:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  402d5a:	7a9b      	ldrb	r3, [r3, #10]
  402d5c:	b2db      	uxtb	r3, r3
  402d5e:	2b01      	cmp	r3, #1
  402d60:	d132      	bne.n	402dc8 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  402d62:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402d64:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402d68:	f8df b078 	ldr.w	fp, [pc, #120]	; 402de4 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402d6c:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  402d6e:	1ae3      	subs	r3, r4, r3
  402d70:	b21b      	sxth	r3, r3
  402d72:	2b00      	cmp	r3, #0
  402d74:	dd03      	ble.n	402d7e <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  402d76:	88bd      	ldrh	r5, [r7, #4]
  402d78:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  402d7a:	2300      	movs	r3, #0
  402d7c:	e001      	b.n	402d82 <Socket_ReadSocketData+0x56>
  402d7e:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  402d80:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402d82:	6839      	ldr	r1, [r7, #0]
  402d84:	462a      	mov	r2, r5
  402d86:	4640      	mov	r0, r8
  402d88:	47d8      	blx	fp
  402d8a:	b9a8      	cbnz	r0, 402db8 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  402d8c:	683b      	ldr	r3, [r7, #0]
  402d8e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  402d90:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  402d92:	88f3      	ldrh	r3, [r6, #6]
  402d94:	1b5b      	subs	r3, r3, r5
  402d96:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  402d98:	4b0d      	ldr	r3, [pc, #52]	; (402dd0 <Socket_ReadSocketData+0xa4>)
  402d9a:	681b      	ldr	r3, [r3, #0]
  402d9c:	b12b      	cbz	r3, 402daa <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  402d9e:	4b0c      	ldr	r3, [pc, #48]	; (402dd0 <Socket_ReadSocketData+0xa4>)
  402da0:	681b      	ldr	r3, [r3, #0]
  402da2:	4632      	mov	r2, r6
  402da4:	4651      	mov	r1, sl
  402da6:	4648      	mov	r0, r9
  402da8:	4798      	blx	r3

				u16ReadCount -= u16Read;
  402daa:	1b64      	subs	r4, r4, r5
  402dac:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  402dae:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  402db0:	2c00      	cmp	r4, #0
  402db2:	d1db      	bne.n	402d6c <Socket_ReadSocketData+0x40>
  402db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  402db8:	4806      	ldr	r0, [pc, #24]	; (402dd4 <Socket_ReadSocketData+0xa8>)
  402dba:	4d07      	ldr	r5, [pc, #28]	; (402dd8 <Socket_ReadSocketData+0xac>)
  402dbc:	47a8      	blx	r5
  402dbe:	4621      	mov	r1, r4
  402dc0:	4806      	ldr	r0, [pc, #24]	; (402ddc <Socket_ReadSocketData+0xb0>)
  402dc2:	47a8      	blx	r5
  402dc4:	4806      	ldr	r0, [pc, #24]	; (402de0 <Socket_ReadSocketData+0xb4>)
  402dc6:	47a8      	blx	r5
  402dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dcc:	2000ad4c 	.word	0x2000ad4c
  402dd0:	2000adfc 	.word	0x2000adfc
  402dd4:	0040f0ec 	.word	0x0040f0ec
  402dd8:	00405e29 	.word	0x00405e29
  402ddc:	0040fc48 	.word	0x0040fc48
  402de0:	0040ee38 	.word	0x0040ee38
  402de4:	00401659 	.word	0x00401659

00402de8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  402de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402dea:	b099      	sub	sp, #100	; 0x64
  402dec:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  402dee:	2841      	cmp	r0, #65	; 0x41
  402df0:	d119      	bne.n	402e26 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  402df2:	2300      	movs	r3, #0
  402df4:	2204      	movs	r2, #4
  402df6:	a907      	add	r1, sp, #28
  402df8:	4620      	mov	r0, r4
  402dfa:	4ca2      	ldr	r4, [pc, #648]	; (403084 <m2m_ip_cb+0x29c>)
  402dfc:	47a0      	blx	r4
  402dfe:	2800      	cmp	r0, #0
  402e00:	f040 813e 	bne.w	403080 <m2m_ip_cb+0x298>
		{
			strBind.status = strBindReply.s8Status;
  402e04:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402e08:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402e0c:	4b9e      	ldr	r3, [pc, #632]	; (403088 <m2m_ip_cb+0x2a0>)
  402e0e:	681b      	ldr	r3, [r3, #0]
  402e10:	2b00      	cmp	r3, #0
  402e12:	f000 8135 	beq.w	403080 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402e16:	4b9c      	ldr	r3, [pc, #624]	; (403088 <m2m_ip_cb+0x2a0>)
  402e18:	681b      	ldr	r3, [r3, #0]
  402e1a:	aa03      	add	r2, sp, #12
  402e1c:	2101      	movs	r1, #1
  402e1e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402e22:	4798      	blx	r3
  402e24:	e12c      	b.n	403080 <m2m_ip_cb+0x298>
  402e26:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402e28:	2842      	cmp	r0, #66	; 0x42
  402e2a:	d119      	bne.n	402e60 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402e2c:	2300      	movs	r3, #0
  402e2e:	2204      	movs	r2, #4
  402e30:	a907      	add	r1, sp, #28
  402e32:	4620      	mov	r0, r4
  402e34:	4c93      	ldr	r4, [pc, #588]	; (403084 <m2m_ip_cb+0x29c>)
  402e36:	47a0      	blx	r4
  402e38:	2800      	cmp	r0, #0
  402e3a:	f040 8121 	bne.w	403080 <m2m_ip_cb+0x298>
		{
			strListen.status = strListenReply.s8Status;
  402e3e:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402e42:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402e46:	4b90      	ldr	r3, [pc, #576]	; (403088 <m2m_ip_cb+0x2a0>)
  402e48:	681b      	ldr	r3, [r3, #0]
  402e4a:	2b00      	cmp	r3, #0
  402e4c:	f000 8118 	beq.w	403080 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402e50:	4b8d      	ldr	r3, [pc, #564]	; (403088 <m2m_ip_cb+0x2a0>)
  402e52:	681b      	ldr	r3, [r3, #0]
  402e54:	aa03      	add	r2, sp, #12
  402e56:	2102      	movs	r1, #2
  402e58:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402e5c:	4798      	blx	r3
  402e5e:	e10f      	b.n	403080 <m2m_ip_cb+0x298>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402e60:	2843      	cmp	r0, #67	; 0x43
  402e62:	d13f      	bne.n	402ee4 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402e64:	2300      	movs	r3, #0
  402e66:	220c      	movs	r2, #12
  402e68:	eb0d 0102 	add.w	r1, sp, r2
  402e6c:	4620      	mov	r0, r4
  402e6e:	4c85      	ldr	r4, [pc, #532]	; (403084 <m2m_ip_cb+0x29c>)
  402e70:	47a0      	blx	r4
  402e72:	2800      	cmp	r0, #0
  402e74:	f040 8104 	bne.w	403080 <m2m_ip_cb+0x298>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  402e78:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  402e7c:	2b00      	cmp	r3, #0
  402e7e:	db19      	blt.n	402eb4 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  402e80:	4a82      	ldr	r2, [pc, #520]	; (40308c <m2m_ip_cb+0x2a4>)
  402e82:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402e86:	2100      	movs	r1, #0
  402e88:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  402e8a:	2101      	movs	r1, #1
  402e8c:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  402e8e:	4980      	ldr	r1, [pc, #512]	; (403090 <m2m_ip_cb+0x2a8>)
  402e90:	880a      	ldrh	r2, [r1, #0]
  402e92:	3201      	adds	r2, #1
  402e94:	b292      	uxth	r2, r2
  402e96:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  402e98:	880a      	ldrh	r2, [r1, #0]
  402e9a:	b292      	uxth	r2, r2
  402e9c:	b91a      	cbnz	r2, 402ea6 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  402e9e:	880a      	ldrh	r2, [r1, #0]
  402ea0:	3201      	adds	r2, #1
  402ea2:	b292      	uxth	r2, r2
  402ea4:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  402ea6:	4a7a      	ldr	r2, [pc, #488]	; (403090 <m2m_ip_cb+0x2a8>)
  402ea8:	8811      	ldrh	r1, [r2, #0]
  402eaa:	b289      	uxth	r1, r1
  402eac:	4a77      	ldr	r2, [pc, #476]	; (40308c <m2m_ip_cb+0x2a4>)
  402eae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402eb2:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  402eb4:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  402eb8:	2302      	movs	r3, #2
  402eba:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  402ebe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  402ec2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  402ec6:	9b04      	ldr	r3, [sp, #16]
  402ec8:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  402eca:	4b6f      	ldr	r3, [pc, #444]	; (403088 <m2m_ip_cb+0x2a0>)
  402ecc:	681b      	ldr	r3, [r3, #0]
  402ece:	2b00      	cmp	r3, #0
  402ed0:	f000 80d6 	beq.w	403080 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  402ed4:	4b6c      	ldr	r3, [pc, #432]	; (403088 <m2m_ip_cb+0x2a0>)
  402ed6:	681b      	ldr	r3, [r3, #0]
  402ed8:	aa07      	add	r2, sp, #28
  402eda:	2104      	movs	r1, #4
  402edc:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  402ee0:	4798      	blx	r3
  402ee2:	e0cd      	b.n	403080 <m2m_ip_cb+0x298>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  402ee4:	2844      	cmp	r0, #68	; 0x44
  402ee6:	d001      	beq.n	402eec <m2m_ip_cb+0x104>
  402ee8:	284b      	cmp	r0, #75	; 0x4b
  402eea:	d124      	bne.n	402f36 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  402eec:	2300      	movs	r3, #0
  402eee:	2204      	movs	r2, #4
  402ef0:	a907      	add	r1, sp, #28
  402ef2:	4620      	mov	r0, r4
  402ef4:	4c63      	ldr	r4, [pc, #396]	; (403084 <m2m_ip_cb+0x29c>)
  402ef6:	47a0      	blx	r4
  402ef8:	2800      	cmp	r0, #0
  402efa:	f040 80c1 	bne.w	403080 <m2m_ip_cb+0x298>
		{
			strConnMsg.sock		= strConnectReply.sock;
  402efe:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402f02:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402f06:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402f0a:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  402f0e:	b93b      	cbnz	r3, 402f20 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  402f10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402f14:	3b08      	subs	r3, #8
  402f16:	b29b      	uxth	r3, r3
  402f18:	4a5c      	ldr	r2, [pc, #368]	; (40308c <m2m_ip_cb+0x2a4>)
  402f1a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402f1e:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  402f20:	4b59      	ldr	r3, [pc, #356]	; (403088 <m2m_ip_cb+0x2a0>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	2b00      	cmp	r3, #0
  402f26:	f000 80ab 	beq.w	403080 <m2m_ip_cb+0x298>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402f2a:	4b57      	ldr	r3, [pc, #348]	; (403088 <m2m_ip_cb+0x2a0>)
  402f2c:	681b      	ldr	r3, [r3, #0]
  402f2e:	aa03      	add	r2, sp, #12
  402f30:	2105      	movs	r1, #5
  402f32:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
  402f34:	e0a4      	b.n	403080 <m2m_ip_cb+0x298>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402f36:	284a      	cmp	r0, #74	; 0x4a
  402f38:	d113      	bne.n	402f62 <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402f3a:	2300      	movs	r3, #0
  402f3c:	2244      	movs	r2, #68	; 0x44
  402f3e:	a907      	add	r1, sp, #28
  402f40:	4620      	mov	r0, r4
  402f42:	4c50      	ldr	r4, [pc, #320]	; (403084 <m2m_ip_cb+0x29c>)
  402f44:	47a0      	blx	r4
  402f46:	2800      	cmp	r0, #0
  402f48:	f040 809a 	bne.w	403080 <m2m_ip_cb+0x298>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  402f4c:	4b51      	ldr	r3, [pc, #324]	; (403094 <m2m_ip_cb+0x2ac>)
  402f4e:	681b      	ldr	r3, [r3, #0]
  402f50:	2b00      	cmp	r3, #0
  402f52:	f000 8095 	beq.w	403080 <m2m_ip_cb+0x298>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402f56:	4b4f      	ldr	r3, [pc, #316]	; (403094 <m2m_ip_cb+0x2ac>)
  402f58:	681b      	ldr	r3, [r3, #0]
  402f5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402f5c:	a807      	add	r0, sp, #28
  402f5e:	4798      	blx	r3
  402f60:	e08e      	b.n	403080 <m2m_ip_cb+0x298>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  402f62:	2846      	cmp	r0, #70	; 0x46
  402f64:	d005      	beq.n	402f72 <m2m_ip_cb+0x18a>
  402f66:	2848      	cmp	r0, #72	; 0x48
  402f68:	d005      	beq.n	402f76 <m2m_ip_cb+0x18e>
  402f6a:	284d      	cmp	r0, #77	; 0x4d
  402f6c:	d148      	bne.n	403000 <m2m_ip_cb+0x218>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
  402f6e:	2706      	movs	r7, #6
  402f70:	e002      	b.n	402f78 <m2m_ip_cb+0x190>
  402f72:	2706      	movs	r7, #6
  402f74:	e000      	b.n	402f78 <m2m_ip_cb+0x190>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402f76:	2709      	movs	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  402f78:	2300      	movs	r3, #0
  402f7a:	2210      	movs	r2, #16
  402f7c:	a903      	add	r1, sp, #12
  402f7e:	4620      	mov	r0, r4
  402f80:	4e40      	ldr	r6, [pc, #256]	; (403084 <m2m_ip_cb+0x29c>)
  402f82:	47b0      	blx	r6
  402f84:	2800      	cmp	r0, #0
  402f86:	d17b      	bne.n	403080 <m2m_ip_cb+0x298>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  402f88:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  402f8c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  402f90:	4a3e      	ldr	r2, [pc, #248]	; (40308c <m2m_ip_cb+0x2a4>)
  402f92:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402f96:	2300      	movs	r3, #0
  402f98:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  402f9a:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  402f9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  402fa2:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  402fa6:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  402faa:	9e04      	ldr	r6, [sp, #16]
  402fac:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402fae:	88d2      	ldrh	r2, [r2, #6]
  402fb0:	b292      	uxth	r2, r2
  402fb2:	4291      	cmp	r1, r2
  402fb4:	d11b      	bne.n	402fee <m2m_ip_cb+0x206>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  402fb6:	f1be 0f00 	cmp.w	lr, #0
  402fba:	dd0a      	ble.n	402fd2 <m2m_ip_cb+0x1ea>
  402fbc:	45ae      	cmp	lr, r5
  402fbe:	da08      	bge.n	402fd2 <m2m_ip_cb+0x1ea>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402fc0:	fa1f f28e 	uxth.w	r2, lr
  402fc4:	9200      	str	r2, [sp, #0]
  402fc6:	4423      	add	r3, r4
  402fc8:	463a      	mov	r2, r7
  402fca:	a907      	add	r1, sp, #28
  402fcc:	4c32      	ldr	r4, [pc, #200]	; (403098 <m2m_ip_cb+0x2b0>)
  402fce:	47a0      	blx	r4
  402fd0:	e056      	b.n	403080 <m2m_ip_cb+0x298>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402fd2:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402fd6:	2300      	movs	r3, #0
  402fd8:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  402fda:	4b2b      	ldr	r3, [pc, #172]	; (403088 <m2m_ip_cb+0x2a0>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	2b00      	cmp	r3, #0
  402fe0:	d04e      	beq.n	403080 <m2m_ip_cb+0x298>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402fe2:	4b29      	ldr	r3, [pc, #164]	; (403088 <m2m_ip_cb+0x2a0>)
  402fe4:	681b      	ldr	r3, [r3, #0]
  402fe6:	aa07      	add	r2, sp, #28
  402fe8:	4639      	mov	r1, r7
  402fea:	4798      	blx	r3
  402fec:	e048      	b.n	403080 <m2m_ip_cb+0x298>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  402fee:	2d10      	cmp	r5, #16
  402ff0:	d946      	bls.n	403080 <m2m_ip_cb+0x298>
					hif_receive(0, NULL, 0, 1);
  402ff2:	2301      	movs	r3, #1
  402ff4:	2200      	movs	r2, #0
  402ff6:	4611      	mov	r1, r2
  402ff8:	4610      	mov	r0, r2
  402ffa:	4c22      	ldr	r4, [pc, #136]	; (403084 <m2m_ip_cb+0x29c>)
  402ffc:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  402ffe:	e03f      	b.n	403080 <m2m_ip_cb+0x298>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  403000:	2845      	cmp	r0, #69	; 0x45
  403002:	d005      	beq.n	403010 <m2m_ip_cb+0x228>
  403004:	2847      	cmp	r0, #71	; 0x47
  403006:	d005      	beq.n	403014 <m2m_ip_cb+0x22c>
  403008:	284c      	cmp	r0, #76	; 0x4c
  40300a:	d124      	bne.n	403056 <m2m_ip_cb+0x26e>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
  40300c:	2507      	movs	r5, #7
  40300e:	e002      	b.n	403016 <m2m_ip_cb+0x22e>
  403010:	2507      	movs	r5, #7
  403012:	e000      	b.n	403016 <m2m_ip_cb+0x22e>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  403014:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  403016:	2300      	movs	r3, #0
  403018:	2208      	movs	r2, #8
  40301a:	a907      	add	r1, sp, #28
  40301c:	4620      	mov	r0, r4
  40301e:	4c19      	ldr	r4, [pc, #100]	; (403084 <m2m_ip_cb+0x29c>)
  403020:	47a0      	blx	r4
  403022:	2800      	cmp	r0, #0
  403024:	d12c      	bne.n	403080 <m2m_ip_cb+0x298>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  403026:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40302a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40302e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  403032:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  403036:	4b15      	ldr	r3, [pc, #84]	; (40308c <m2m_ip_cb+0x2a4>)
  403038:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40303c:	88db      	ldrh	r3, [r3, #6]
  40303e:	b29b      	uxth	r3, r3
  403040:	429a      	cmp	r2, r3
  403042:	d11d      	bne.n	403080 <m2m_ip_cb+0x298>
			{
				if(gpfAppSocketCb)
  403044:	4b10      	ldr	r3, [pc, #64]	; (403088 <m2m_ip_cb+0x2a0>)
  403046:	681b      	ldr	r3, [r3, #0]
  403048:	b1d3      	cbz	r3, 403080 <m2m_ip_cb+0x298>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40304a:	4b0f      	ldr	r3, [pc, #60]	; (403088 <m2m_ip_cb+0x2a0>)
  40304c:	681b      	ldr	r3, [r3, #0]
  40304e:	aa03      	add	r2, sp, #12
  403050:	4629      	mov	r1, r5
  403052:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  403054:	e014      	b.n	403080 <m2m_ip_cb+0x298>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  403056:	2852      	cmp	r0, #82	; 0x52
  403058:	d112      	bne.n	403080 <m2m_ip_cb+0x298>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40305a:	2301      	movs	r3, #1
  40305c:	2214      	movs	r2, #20
  40305e:	a907      	add	r1, sp, #28
  403060:	4620      	mov	r0, r4
  403062:	4c08      	ldr	r4, [pc, #32]	; (403084 <m2m_ip_cb+0x29c>)
  403064:	47a0      	blx	r4
  403066:	b958      	cbnz	r0, 403080 <m2m_ip_cb+0x298>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  403068:	4b0c      	ldr	r3, [pc, #48]	; (40309c <m2m_ip_cb+0x2b4>)
  40306a:	9a08      	ldr	r2, [sp, #32]
  40306c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  40306e:	681b      	ldr	r3, [r3, #0]
  403070:	b133      	cbz	r3, 403080 <m2m_ip_cb+0x298>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  403072:	4b0a      	ldr	r3, [pc, #40]	; (40309c <m2m_ip_cb+0x2b4>)
  403074:	681b      	ldr	r3, [r3, #0]
  403076:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  40307a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40307c:	9807      	ldr	r0, [sp, #28]
  40307e:	4798      	blx	r3
			}
		}
	}
}
  403080:	b019      	add	sp, #100	; 0x64
  403082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403084:	00401659 	.word	0x00401659
  403088:	2000adfc 	.word	0x2000adfc
  40308c:	2000ad4c 	.word	0x2000ad4c
  403090:	20000b36 	.word	0x20000b36
  403094:	2000ae04 	.word	0x2000ae04
  403098:	00402d2d 	.word	0x00402d2d
  40309c:	2000ae00 	.word	0x2000ae00

004030a0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4030a0:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4030a2:	4b0a      	ldr	r3, [pc, #40]	; (4030cc <socketInit+0x2c>)
  4030a4:	781b      	ldrb	r3, [r3, #0]
  4030a6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4030aa:	d10e      	bne.n	4030ca <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4030ac:	22b0      	movs	r2, #176	; 0xb0
  4030ae:	2100      	movs	r1, #0
  4030b0:	4807      	ldr	r0, [pc, #28]	; (4030d0 <socketInit+0x30>)
  4030b2:	4b08      	ldr	r3, [pc, #32]	; (4030d4 <socketInit+0x34>)
  4030b4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4030b6:	4908      	ldr	r1, [pc, #32]	; (4030d8 <socketInit+0x38>)
  4030b8:	2002      	movs	r0, #2
  4030ba:	4b08      	ldr	r3, [pc, #32]	; (4030dc <socketInit+0x3c>)
  4030bc:	4798      	blx	r3
		gbSocketInit=1;
  4030be:	2201      	movs	r2, #1
  4030c0:	4b02      	ldr	r3, [pc, #8]	; (4030cc <socketInit+0x2c>)
  4030c2:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4030c4:	2200      	movs	r2, #0
  4030c6:	4b06      	ldr	r3, [pc, #24]	; (4030e0 <socketInit+0x40>)
  4030c8:	801a      	strh	r2, [r3, #0]
  4030ca:	bd08      	pop	{r3, pc}
  4030cc:	20000b35 	.word	0x20000b35
  4030d0:	2000ad4c 	.word	0x2000ad4c
  4030d4:	00400fe1 	.word	0x00400fe1
  4030d8:	00402de9 	.word	0x00402de9
  4030dc:	00401765 	.word	0x00401765
  4030e0:	20000b36 	.word	0x20000b36

004030e4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4030e4:	4b02      	ldr	r3, [pc, #8]	; (4030f0 <registerSocketCallback+0xc>)
  4030e6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4030e8:	4b02      	ldr	r3, [pc, #8]	; (4030f4 <registerSocketCallback+0x10>)
  4030ea:	6019      	str	r1, [r3, #0]
  4030ec:	4770      	bx	lr
  4030ee:	bf00      	nop
  4030f0:	2000adfc 	.word	0x2000adfc
  4030f4:	2000ae04 	.word	0x2000ae04

004030f8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4030f8:	b570      	push	{r4, r5, r6, lr}
  4030fa:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4030fc:	2802      	cmp	r0, #2
  4030fe:	d14c      	bne.n	40319a <socket+0xa2>
	{
		if(u8Type == SOCK_STREAM)
  403100:	2901      	cmp	r1, #1
  403102:	d04d      	beq.n	4031a0 <socket+0xa8>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  403104:	2902      	cmp	r1, #2
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  403106:	bf18      	it	ne
  403108:	f04f 34ff 	movne.w	r4, #4294967295
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  40310c:	d159      	bne.n	4031c2 <socket+0xca>
  40310e:	e04a      	b.n	4031a6 <socket+0xae>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403110:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  403112:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  403116:	7a9b      	ldrb	r3, [r3, #10]
  403118:	f013 0fff 	tst.w	r3, #255	; 0xff
  40311c:	d136      	bne.n	40318c <socket+0x94>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40311e:	482a      	ldr	r0, [pc, #168]	; (4031c8 <socket+0xd0>)
  403120:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403124:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  403126:	2210      	movs	r2, #16
  403128:	2100      	movs	r1, #0
  40312a:	4b28      	ldr	r3, [pc, #160]	; (4031cc <socket+0xd4>)
  40312c:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  40312e:	4b26      	ldr	r3, [pc, #152]	; (4031c8 <socket+0xd0>)
  403130:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  403134:	2201      	movs	r2, #1
  403136:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  403138:	4a25      	ldr	r2, [pc, #148]	; (4031d0 <socket+0xd8>)
  40313a:	8813      	ldrh	r3, [r2, #0]
  40313c:	3301      	adds	r3, #1
  40313e:	b29b      	uxth	r3, r3
  403140:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  403142:	8813      	ldrh	r3, [r2, #0]
  403144:	b29b      	uxth	r3, r3
  403146:	b91b      	cbnz	r3, 403150 <socket+0x58>
					++gu16SessionID;
  403148:	8813      	ldrh	r3, [r2, #0]
  40314a:	3301      	adds	r3, #1
  40314c:	b29b      	uxth	r3, r3
  40314e:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  403150:	4b1f      	ldr	r3, [pc, #124]	; (4031d0 <socket+0xd8>)
  403152:	881a      	ldrh	r2, [r3, #0]
  403154:	b292      	uxth	r2, r2
  403156:	4b1c      	ldr	r3, [pc, #112]	; (4031c8 <socket+0xd0>)
  403158:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40315c:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  40315e:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  403160:	f016 0f01 	tst.w	r6, #1
  403164:	d02d      	beq.n	4031c2 <socket+0xca>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  403166:	aa06      	add	r2, sp, #24
  403168:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40316c:	4b16      	ldr	r3, [pc, #88]	; (4031c8 <socket+0xd0>)
  40316e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  403172:	2321      	movs	r3, #33	; 0x21
  403174:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  403176:	2300      	movs	r3, #0
  403178:	9302      	str	r3, [sp, #8]
  40317a:	9301      	str	r3, [sp, #4]
  40317c:	9300      	str	r3, [sp, #0]
  40317e:	2304      	movs	r3, #4
  403180:	2150      	movs	r1, #80	; 0x50
  403182:	2002      	movs	r0, #2
  403184:	4d13      	ldr	r5, [pc, #76]	; (4031d4 <socket+0xdc>)
  403186:	47a8      	blx	r5
  403188:	e01b      	b.n	4031c2 <socket+0xca>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  40318a:	480f      	ldr	r0, [pc, #60]	; (4031c8 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  40318c:	3401      	adds	r4, #1
  40318e:	b2e4      	uxtb	r4, r4
  403190:	428c      	cmp	r4, r1
  403192:	d3bd      	bcc.n	403110 <socket+0x18>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  403194:	f04f 34ff 	mov.w	r4, #4294967295
  403198:	e013      	b.n	4031c2 <socket+0xca>
  40319a:	f04f 34ff 	mov.w	r4, #4294967295
  40319e:	e010      	b.n	4031c2 <socket+0xca>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  4031a0:	2107      	movs	r1, #7
			u8Count = 0;
  4031a2:	2400      	movs	r4, #0
  4031a4:	e001      	b.n	4031aa <socket+0xb2>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4031a6:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  4031a8:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4031aa:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4031ac:	4b06      	ldr	r3, [pc, #24]	; (4031c8 <socket+0xd0>)
  4031ae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4031b2:	7a9b      	ldrb	r3, [r3, #10]
  4031b4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4031b8:	d1e7      	bne.n	40318a <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4031ba:	4803      	ldr	r0, [pc, #12]	; (4031c8 <socket+0xd0>)
  4031bc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4031c0:	e7b0      	b.n	403124 <socket+0x2c>
				break;
			}
		}
	}
	return sock;
}
  4031c2:	4620      	mov	r0, r4
  4031c4:	b006      	add	sp, #24
  4031c6:	bd70      	pop	{r4, r5, r6, pc}
  4031c8:	2000ad4c 	.word	0x2000ad4c
  4031cc:	00400fe1 	.word	0x00400fe1
  4031d0:	20000b36 	.word	0x20000b36
  4031d4:	00401161 	.word	0x00401161

004031d8 <bind>:
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4031d8:	b339      	cbz	r1, 40322a <bind+0x52>

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4031da:	b510      	push	{r4, lr}
  4031dc:	b088      	sub	sp, #32
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4031de:	2800      	cmp	r0, #0
  4031e0:	db26      	blt.n	403230 <bind+0x58>
  4031e2:	4b18      	ldr	r3, [pc, #96]	; (403244 <bind+0x6c>)
  4031e4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4031e8:	7a9b      	ldrb	r3, [r3, #10]
  4031ea:	b2db      	uxtb	r3, r3
  4031ec:	2b01      	cmp	r3, #1
  4031ee:	d122      	bne.n	403236 <bind+0x5e>
  4031f0:	b322      	cbz	r2, 40323c <bind+0x64>
  4031f2:	4604      	mov	r4, r0
	{
		tstrBindCmd			strBind;

		/* Build the bind request. */
		strBind.sock = sock;
  4031f4:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4031f8:	2208      	movs	r2, #8
  4031fa:	a805      	add	r0, sp, #20
  4031fc:	4b12      	ldr	r3, [pc, #72]	; (403248 <bind+0x70>)
  4031fe:	4798      	blx	r3

		strBind.strAddr.u16Family	= strBind.strAddr.u16Family;
		strBind.strAddr.u16Port		= strBind.strAddr.u16Port;
		strBind.strAddr.u32IPAddr	= strBind.strAddr.u32IPAddr;
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
  403200:	4810      	ldr	r0, [pc, #64]	; (403244 <bind+0x6c>)
  403202:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403206:	88c3      	ldrh	r3, [r0, #6]
  403208:	f8ad 301e 	strh.w	r3, [sp, #30]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(SOCKET_CMD_BIND, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
  40320c:	2300      	movs	r3, #0
  40320e:	9302      	str	r3, [sp, #8]
  403210:	9301      	str	r3, [sp, #4]
  403212:	9300      	str	r3, [sp, #0]
  403214:	230c      	movs	r3, #12
  403216:	aa05      	add	r2, sp, #20
  403218:	2141      	movs	r1, #65	; 0x41
  40321a:	2002      	movs	r0, #2
  40321c:	4c0b      	ldr	r4, [pc, #44]	; (40324c <bind+0x74>)
  40321e:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403220:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403222:	bf18      	it	ne
  403224:	f06f 0008 	mvnne.w	r0, #8
  403228:	e00a      	b.n	403240 <bind+0x68>
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40322a:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40322e:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403230:	f06f 0005 	mvn.w	r0, #5
  403234:	e004      	b.n	403240 <bind+0x68>
  403236:	f06f 0005 	mvn.w	r0, #5
  40323a:	e001      	b.n	403240 <bind+0x68>
  40323c:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  403240:	b008      	add	sp, #32
  403242:	bd10      	pop	{r4, pc}
  403244:	2000ad4c 	.word	0x2000ad4c
  403248:	00400fcd 	.word	0x00400fcd
  40324c:	00401161 	.word	0x00401161

00403250 <listen>:
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403250:	2800      	cmp	r0, #0
  403252:	db21      	blt.n	403298 <listen+0x48>
  403254:	4b14      	ldr	r3, [pc, #80]	; (4032a8 <listen+0x58>)
  403256:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40325a:	7a9b      	ldrb	r3, [r3, #10]
  40325c:	b2db      	uxtb	r3, r3
  40325e:	2b01      	cmp	r3, #1
  403260:	d11d      	bne.n	40329e <listen+0x4e>

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
  403262:	b510      	push	{r4, lr}
  403264:	b086      	sub	sp, #24
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
  403266:	f88d 0014 	strb.w	r0, [sp, #20]
		strListen.u8BackLog = backlog;
  40326a:	f88d 1015 	strb.w	r1, [sp, #21]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
  40326e:	4b0e      	ldr	r3, [pc, #56]	; (4032a8 <listen+0x58>)
  403270:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403274:	88c3      	ldrh	r3, [r0, #6]
  403276:	f8ad 3016 	strh.w	r3, [sp, #22]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
  40327a:	2300      	movs	r3, #0
  40327c:	9302      	str	r3, [sp, #8]
  40327e:	9301      	str	r3, [sp, #4]
  403280:	9300      	str	r3, [sp, #0]
  403282:	2304      	movs	r3, #4
  403284:	aa05      	add	r2, sp, #20
  403286:	2142      	movs	r1, #66	; 0x42
  403288:	2002      	movs	r0, #2
  40328a:	4c08      	ldr	r4, [pc, #32]	; (4032ac <listen+0x5c>)
  40328c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40328e:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403290:	bf18      	it	ne
  403292:	f06f 0008 	mvnne.w	r0, #8
  403296:	e005      	b.n	4032a4 <listen+0x54>
Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403298:	f06f 0005 	mvn.w	r0, #5
  40329c:	4770      	bx	lr
  40329e:	f06f 0005 	mvn.w	r0, #5
  4032a2:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  4032a4:	b006      	add	sp, #24
  4032a6:	bd10      	pop	{r4, pc}
  4032a8:	2000ad4c 	.word	0x2000ad4c
  4032ac:	00401161 	.word	0x00401161

004032b0 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
  4032b0:	2800      	cmp	r0, #0
  4032b2:	db0a      	blt.n	4032ca <accept+0x1a>
  4032b4:	4b06      	ldr	r3, [pc, #24]	; (4032d0 <accept+0x20>)
  4032b6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4032ba:	7a83      	ldrb	r3, [r0, #10]
  4032bc:	b2db      	uxtb	r3, r3
	{
		s8Ret = SOCK_ERR_NO_ERROR;
  4032be:	2b01      	cmp	r3, #1
  4032c0:	bf14      	ite	ne
  4032c2:	f06f 0005 	mvnne.w	r0, #5
  4032c6:	2000      	moveq	r0, #0
  4032c8:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4032ca:	f06f 0005 	mvn.w	r0, #5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
	{
		s8Ret = SOCK_ERR_NO_ERROR;
	}
	return s8Ret;
}
  4032ce:	4770      	bx	lr
  4032d0:	2000ad4c 	.word	0x2000ad4c

004032d4 <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4032d4:	2800      	cmp	r0, #0
  4032d6:	db38      	blt.n	40334a <connect+0x76>
  4032d8:	2900      	cmp	r1, #0
  4032da:	d039      	beq.n	403350 <connect+0x7c>
  4032dc:	4b22      	ldr	r3, [pc, #136]	; (403368 <connect+0x94>)
  4032de:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4032e2:	7a9b      	ldrb	r3, [r3, #10]
  4032e4:	b2db      	uxtb	r3, r3
  4032e6:	2b01      	cmp	r3, #1
  4032e8:	d135      	bne.n	403356 <connect+0x82>
  4032ea:	2a00      	cmp	r2, #0
  4032ec:	d036      	beq.n	40335c <connect+0x88>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4032ee:	b530      	push	{r4, r5, lr}
  4032f0:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4032f2:	4b1d      	ldr	r3, [pc, #116]	; (403368 <connect+0x94>)
  4032f4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4032f8:	7adb      	ldrb	r3, [r3, #11]
  4032fa:	f013 0f01 	tst.w	r3, #1
  4032fe:	d007      	beq.n	403310 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  403300:	4b19      	ldr	r3, [pc, #100]	; (403368 <connect+0x94>)
  403302:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403306:	7adb      	ldrb	r3, [r3, #11]
  403308:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  40330c:	254b      	movs	r5, #75	; 0x4b
  40330e:	e000      	b.n	403312 <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  403310:	2544      	movs	r5, #68	; 0x44
  403312:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  403314:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  403318:	2208      	movs	r2, #8
  40331a:	a805      	add	r0, sp, #20
  40331c:	4b13      	ldr	r3, [pc, #76]	; (40336c <connect+0x98>)
  40331e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  403320:	4811      	ldr	r0, [pc, #68]	; (403368 <connect+0x94>)
  403322:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403326:	88c3      	ldrh	r3, [r0, #6]
  403328:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40332c:	2300      	movs	r3, #0
  40332e:	9302      	str	r3, [sp, #8]
  403330:	9301      	str	r3, [sp, #4]
  403332:	9300      	str	r3, [sp, #0]
  403334:	230c      	movs	r3, #12
  403336:	aa05      	add	r2, sp, #20
  403338:	4629      	mov	r1, r5
  40333a:	2002      	movs	r0, #2
  40333c:	4c0c      	ldr	r4, [pc, #48]	; (403370 <connect+0x9c>)
  40333e:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403340:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403342:	bf18      	it	ne
  403344:	f06f 0008 	mvnne.w	r0, #8
  403348:	e00b      	b.n	403362 <connect+0x8e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40334a:	f06f 0005 	mvn.w	r0, #5
  40334e:	4770      	bx	lr
  403350:	f06f 0005 	mvn.w	r0, #5
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  403354:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403356:	f06f 0005 	mvn.w	r0, #5
  40335a:	4770      	bx	lr
  40335c:	f06f 0005 	mvn.w	r0, #5
  403360:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  403362:	b009      	add	sp, #36	; 0x24
  403364:	bd30      	pop	{r4, r5, pc}
  403366:	bf00      	nop
  403368:	2000ad4c 	.word	0x2000ad4c
  40336c:	00400fcd 	.word	0x00400fcd
  403370:	00401161 	.word	0x00401161

00403374 <send>:
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  403374:	2800      	cmp	r0, #0
  403376:	db3b      	blt.n	4033f0 <send+0x7c>
  403378:	2900      	cmp	r1, #0
  40337a:	d03c      	beq.n	4033f6 <send+0x82>
  40337c:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  403380:	d83c      	bhi.n	4033fc <send+0x88>
  403382:	4b22      	ldr	r3, [pc, #136]	; (40340c <send+0x98>)
  403384:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403388:	7a9b      	ldrb	r3, [r3, #10]
  40338a:	b2db      	uxtb	r3, r3
  40338c:	2b01      	cmp	r3, #1
  40338e:	d138      	bne.n	403402 <send+0x8e>

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  403390:	b510      	push	{r4, lr}
  403392:	b088      	sub	sp, #32
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  403394:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  403398:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  40339c:	4b1b      	ldr	r3, [pc, #108]	; (40340c <send+0x98>)
  40339e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4033a2:	88db      	ldrh	r3, [r3, #6]
  4033a4:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4033a8:	2807      	cmp	r0, #7
  4033aa:	bfb4      	ite	lt
  4033ac:	2450      	movlt	r4, #80	; 0x50
  4033ae:	2444      	movge	r4, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4033b0:	4b16      	ldr	r3, [pc, #88]	; (40340c <send+0x98>)
  4033b2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4033b6:	7adb      	ldrb	r3, [r3, #11]
  4033b8:	f013 0f01 	tst.w	r3, #1
  4033bc:	d006      	beq.n	4033cc <send+0x58>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4033be:	4b13      	ldr	r3, [pc, #76]	; (40340c <send+0x98>)
  4033c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4033c4:	8904      	ldrh	r4, [r0, #8]
  4033c6:	b2a4      	uxth	r4, r4
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4033c8:	204c      	movs	r0, #76	; 0x4c
  4033ca:	e000      	b.n	4033ce <send+0x5a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  4033cc:	2045      	movs	r0, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4033ce:	9402      	str	r4, [sp, #8]
  4033d0:	9201      	str	r2, [sp, #4]
  4033d2:	9100      	str	r1, [sp, #0]
  4033d4:	2310      	movs	r3, #16
  4033d6:	eb0d 0203 	add.w	r2, sp, r3
  4033da:	f040 0180 	orr.w	r1, r0, #128	; 0x80
  4033de:	2002      	movs	r0, #2
  4033e0:	4c0b      	ldr	r4, [pc, #44]	; (403410 <send+0x9c>)
  4033e2:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4033e4:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4033e6:	bf0c      	ite	eq
  4033e8:	2000      	moveq	r0, #0
  4033ea:	f06f 000d 	mvnne.w	r0, #13
  4033ee:	e00b      	b.n	403408 <send+0x94>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4033f0:	f06f 0005 	mvn.w	r0, #5
  4033f4:	4770      	bx	lr
  4033f6:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  4033fa:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4033fc:	f06f 0005 	mvn.w	r0, #5
  403400:	4770      	bx	lr
  403402:	f06f 0005 	mvn.w	r0, #5
  403406:	4770      	bx	lr
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  403408:	b008      	add	sp, #32
  40340a:	bd10      	pop	{r4, pc}
  40340c:	2000ad4c 	.word	0x2000ad4c
  403410:	00401161 	.word	0x00401161

00403414 <sendto>:

Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
  403414:	b5f0      	push	{r4, r5, r6, r7, lr}
  403416:	b089      	sub	sp, #36	; 0x24
  403418:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  40341a:	2800      	cmp	r0, #0
  40341c:	db3f      	blt.n	40349e <sendto+0x8a>
  40341e:	2900      	cmp	r1, #0
  403420:	d040      	beq.n	4034a4 <sendto+0x90>
  403422:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  403426:	d840      	bhi.n	4034aa <sendto+0x96>
  403428:	4b25      	ldr	r3, [pc, #148]	; (4034c0 <sendto+0xac>)
  40342a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40342e:	7a9b      	ldrb	r3, [r3, #10]
  403430:	b2db      	uxtb	r3, r3
  403432:	2b01      	cmp	r3, #1
  403434:	d13c      	bne.n	4034b0 <sendto+0x9c>
	{
		if(gastrSockets[sock].bIsUsed)
  403436:	4b22      	ldr	r3, [pc, #136]	; (4034c0 <sendto+0xac>)
  403438:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40343c:	7a9b      	ldrb	r3, [r3, #10]
  40343e:	f013 0fff 	tst.w	r3, #255	; 0xff
  403442:	d038      	beq.n	4034b6 <sendto+0xa2>
  403444:	4604      	mov	r4, r0
  403446:	4616      	mov	r6, r2
  403448:	460f      	mov	r7, r1
		{
			tstrSendCmd	strSendTo;

			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
  40344a:	2210      	movs	r2, #16
  40344c:	2100      	movs	r1, #0
  40344e:	eb0d 0002 	add.w	r0, sp, r2
  403452:	4b1c      	ldr	r3, [pc, #112]	; (4034c4 <sendto+0xb0>)
  403454:	4798      	blx	r3

			strSendTo.sock			= sock;
  403456:	f88d 4010 	strb.w	r4, [sp, #16]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
  40345a:	f8ad 6012 	strh.w	r6, [sp, #18]
			strSendTo.u16SessionID	= gastrSockets[sock].u16SessionID;
  40345e:	4818      	ldr	r0, [pc, #96]	; (4034c0 <sendto+0xac>)
  403460:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403464:	88c3      	ldrh	r3, [r0, #6]
  403466:	f8ad 301c 	strh.w	r3, [sp, #28]
			
			if(pstrDestAddr != NULL)
  40346a:	b13d      	cbz	r5, 40347c <sendto+0x68>
			{
				struct sockaddr_in	*pstrAddr;
				pstrAddr = (void*)pstrDestAddr;

				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
  40346c:	882b      	ldrh	r3, [r5, #0]
  40346e:	f8ad 3014 	strh.w	r3, [sp, #20]
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
  403472:	886b      	ldrh	r3, [r5, #2]
  403474:	f8ad 3016 	strh.w	r3, [sp, #22]
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
  403478:	686b      	ldr	r3, [r5, #4]
  40347a:	9306      	str	r3, [sp, #24]
			}
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd),
  40347c:	2344      	movs	r3, #68	; 0x44
  40347e:	9302      	str	r3, [sp, #8]
  403480:	9601      	str	r6, [sp, #4]
  403482:	9700      	str	r7, [sp, #0]
  403484:	2310      	movs	r3, #16
  403486:	eb0d 0203 	add.w	r2, sp, r3
  40348a:	21c7      	movs	r1, #199	; 0xc7
  40348c:	2002      	movs	r0, #2
  40348e:	4c0e      	ldr	r4, [pc, #56]	; (4034c8 <sendto+0xb4>)
  403490:	47a0      	blx	r4
				pvSendBuffer, u16SendLength, UDP_TX_PACKET_OFFSET);

			if(s16Ret != SOCK_ERR_NO_ERROR)
  403492:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  403494:	bf0c      	ite	eq
  403496:	2000      	moveq	r0, #0
  403498:	f06f 000d 	mvnne.w	r0, #13
  40349c:	e00d      	b.n	4034ba <sendto+0xa6>
Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40349e:	f06f 0005 	mvn.w	r0, #5
  4034a2:	e00a      	b.n	4034ba <sendto+0xa6>
  4034a4:	f06f 0005 	mvn.w	r0, #5
  4034a8:	e007      	b.n	4034ba <sendto+0xa6>
  4034aa:	f06f 0005 	mvn.w	r0, #5
  4034ae:	e004      	b.n	4034ba <sendto+0xa6>
  4034b0:	f06f 0005 	mvn.w	r0, #5
  4034b4:	e001      	b.n	4034ba <sendto+0xa6>
  4034b6:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  4034ba:	b009      	add	sp, #36	; 0x24
  4034bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034be:	bf00      	nop
  4034c0:	2000ad4c 	.word	0x2000ad4c
  4034c4:	00400fe1 	.word	0x00400fe1
  4034c8:	00401161 	.word	0x00401161

004034cc <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4034cc:	2800      	cmp	r0, #0
  4034ce:	db3c      	blt.n	40354a <recv+0x7e>
  4034d0:	2900      	cmp	r1, #0
  4034d2:	d03d      	beq.n	403550 <recv+0x84>
  4034d4:	2a00      	cmp	r2, #0
  4034d6:	d03e      	beq.n	403556 <recv+0x8a>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  4034d8:	b570      	push	{r4, r5, r6, lr}
  4034da:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4034dc:	4c22      	ldr	r4, [pc, #136]	; (403568 <recv+0x9c>)
  4034de:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  4034e2:	7aa4      	ldrb	r4, [r4, #10]
  4034e4:	b2e4      	uxtb	r4, r4
  4034e6:	2c01      	cmp	r4, #1
  4034e8:	d138      	bne.n	40355c <recv+0x90>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  4034ea:	4e1f      	ldr	r6, [pc, #124]	; (403568 <recv+0x9c>)
  4034ec:	0105      	lsls	r5, r0, #4
  4034ee:	1974      	adds	r4, r6, r5
  4034f0:	5171      	str	r1, [r6, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  4034f2:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  4034f4:	7b22      	ldrb	r2, [r4, #12]
  4034f6:	f012 0fff 	tst.w	r2, #255	; 0xff
  4034fa:	d132      	bne.n	403562 <recv+0x96>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  4034fc:	eb06 1200 	add.w	r2, r6, r0, lsl #4
  403500:	2101      	movs	r1, #1
  403502:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403504:	7ad2      	ldrb	r2, [r2, #11]
  403506:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  403508:	2a00      	cmp	r2, #0
  40350a:	bf0c      	ite	eq
  40350c:	2146      	moveq	r1, #70	; 0x46
  40350e:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  403510:	b91b      	cbnz	r3, 40351a <recv+0x4e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  403512:	f04f 33ff 	mov.w	r3, #4294967295
  403516:	9304      	str	r3, [sp, #16]
  403518:	e000      	b.n	40351c <recv+0x50>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  40351a:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  40351c:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  403520:	4b11      	ldr	r3, [pc, #68]	; (403568 <recv+0x9c>)
  403522:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403526:	88c3      	ldrh	r3, [r0, #6]
  403528:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  40352c:	2300      	movs	r3, #0
  40352e:	9302      	str	r3, [sp, #8]
  403530:	9301      	str	r3, [sp, #4]
  403532:	9300      	str	r3, [sp, #0]
  403534:	2308      	movs	r3, #8
  403536:	aa04      	add	r2, sp, #16
  403538:	2002      	movs	r0, #2
  40353a:	4c0c      	ldr	r4, [pc, #48]	; (40356c <recv+0xa0>)
  40353c:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  40353e:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  403540:	bf0c      	ite	eq
  403542:	2000      	moveq	r0, #0
  403544:	f06f 000d 	mvnne.w	r0, #13
  403548:	e00c      	b.n	403564 <recv+0x98>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40354a:	f06f 0005 	mvn.w	r0, #5
  40354e:	4770      	bx	lr
  403550:	f06f 0005 	mvn.w	r0, #5
  403554:	4770      	bx	lr
  403556:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  40355a:	4770      	bx	lr
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40355c:	f06f 0005 	mvn.w	r0, #5
  403560:	e000      	b.n	403564 <recv+0x98>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  403562:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  403564:	b006      	add	sp, #24
  403566:	bd70      	pop	{r4, r5, r6, pc}
  403568:	2000ad4c 	.word	0x2000ad4c
  40356c:	00401161 	.word	0x00401161

00403570 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  403570:	b530      	push	{r4, r5, lr}
  403572:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403574:	2800      	cmp	r0, #0
  403576:	db2e      	blt.n	4035d6 <close+0x66>
  403578:	4b1b      	ldr	r3, [pc, #108]	; (4035e8 <close+0x78>)
  40357a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40357e:	7a9b      	ldrb	r3, [r3, #10]
  403580:	b2db      	uxtb	r3, r3
  403582:	2b01      	cmp	r3, #1
  403584:	d12a      	bne.n	4035dc <close+0x6c>
  403586:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  403588:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40358c:	4b16      	ldr	r3, [pc, #88]	; (4035e8 <close+0x78>)
  40358e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403592:	88da      	ldrh	r2, [r3, #6]
  403594:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403598:	2200      	movs	r2, #0
  40359a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  40359c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40359e:	7adb      	ldrb	r3, [r3, #11]
  4035a0:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  4035a4:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  4035a6:	9202      	str	r2, [sp, #8]
  4035a8:	9201      	str	r2, [sp, #4]
  4035aa:	9200      	str	r2, [sp, #0]
  4035ac:	f04f 0304 	mov.w	r3, #4
  4035b0:	aa05      	add	r2, sp, #20
  4035b2:	bf0c      	ite	eq
  4035b4:	2149      	moveq	r1, #73	; 0x49
  4035b6:	214e      	movne	r1, #78	; 0x4e
  4035b8:	2002      	movs	r0, #2
  4035ba:	4d0c      	ldr	r5, [pc, #48]	; (4035ec <close+0x7c>)
  4035bc:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4035be:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4035c0:	bf18      	it	ne
  4035c2:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  4035c6:	2210      	movs	r2, #16
  4035c8:	2100      	movs	r1, #0
  4035ca:	4807      	ldr	r0, [pc, #28]	; (4035e8 <close+0x78>)
  4035cc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4035d0:	4b07      	ldr	r3, [pc, #28]	; (4035f0 <close+0x80>)
  4035d2:	4798      	blx	r3
  4035d4:	e004      	b.n	4035e0 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4035d6:	f06f 0505 	mvn.w	r5, #5
  4035da:	e001      	b.n	4035e0 <close+0x70>
  4035dc:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  4035e0:	4628      	mov	r0, r5
  4035e2:	b007      	add	sp, #28
  4035e4:	bd30      	pop	{r4, r5, pc}
  4035e6:	bf00      	nop
  4035e8:	2000ad4c 	.word	0x2000ad4c
  4035ec:	00401161 	.word	0x00401161
  4035f0:	00400fe1 	.word	0x00400fe1

004035f4 <recvfrom>:
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4035f4:	2800      	cmp	r0, #0
  4035f6:	db3e      	blt.n	403676 <recvfrom+0x82>
  4035f8:	2900      	cmp	r1, #0
  4035fa:	d03f      	beq.n	40367c <recvfrom+0x88>
  4035fc:	2a00      	cmp	r2, #0
  4035fe:	d040      	beq.n	403682 <recvfrom+0x8e>

Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  403600:	b570      	push	{r4, r5, r6, lr}
  403602:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403604:	4c24      	ldr	r4, [pc, #144]	; (403698 <recvfrom+0xa4>)
  403606:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  40360a:	7aa4      	ldrb	r4, [r4, #10]
  40360c:	b2e4      	uxtb	r4, r4
  40360e:	2c01      	cmp	r4, #1
  403610:	d13a      	bne.n	403688 <recvfrom+0x94>
	{
		if(gastrSockets[sock].bIsUsed)
  403612:	4c21      	ldr	r4, [pc, #132]	; (403698 <recvfrom+0xa4>)
  403614:	eb04 1400 	add.w	r4, r4, r0, lsl #4
  403618:	7aa4      	ldrb	r4, [r4, #10]
  40361a:	f014 0fff 	tst.w	r4, #255	; 0xff
  40361e:	d036      	beq.n	40368e <recvfrom+0x9a>
		{
			s16Ret = SOCK_ERR_NO_ERROR;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
  403620:	4e1d      	ldr	r6, [pc, #116]	; (403698 <recvfrom+0xa4>)
  403622:	0105      	lsls	r5, r0, #4
  403624:	1974      	adds	r4, r6, r5
  403626:	5171      	str	r1, [r6, r5]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
  403628:	80a2      	strh	r2, [r4, #4]

			if(!gastrSockets[sock].bIsRecvPending)
  40362a:	7b22      	ldrb	r2, [r4, #12]
  40362c:	f012 0fff 	tst.w	r2, #255	; 0xff
  403630:	d12f      	bne.n	403692 <recvfrom+0x9e>
			{
				tstrRecvCmd	strRecv;

				gastrSockets[sock].bIsRecvPending = 1;
  403632:	eb06 1200 	add.w	r2, r6, r0, lsl #4
  403636:	2101      	movs	r1, #1
  403638:	7311      	strb	r1, [r2, #12]

				/* Check the timeout value. */
				if(u32Timeoutmsec == 0)
  40363a:	b91b      	cbnz	r3, 403644 <recvfrom+0x50>
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  40363c:	f04f 33ff 	mov.w	r3, #4294967295
  403640:	9304      	str	r3, [sp, #16]
  403642:	e000      	b.n	403646 <recvfrom+0x52>
				else
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  403644:	9304      	str	r3, [sp, #16]
				strRecv.sock = sock;
  403646:	f88d 0014 	strb.w	r0, [sp, #20]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  40364a:	4b13      	ldr	r3, [pc, #76]	; (403698 <recvfrom+0xa4>)
  40364c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403650:	88c3      	ldrh	r3, [r0, #6]
  403652:	f8ad 3016 	strh.w	r3, [sp, #22]
				
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  403656:	2300      	movs	r3, #0
  403658:	9302      	str	r3, [sp, #8]
  40365a:	9301      	str	r3, [sp, #4]
  40365c:	9300      	str	r3, [sp, #0]
  40365e:	2308      	movs	r3, #8
  403660:	aa04      	add	r2, sp, #16
  403662:	2148      	movs	r1, #72	; 0x48
  403664:	2002      	movs	r0, #2
  403666:	4c0d      	ldr	r4, [pc, #52]	; (40369c <recvfrom+0xa8>)
  403668:	47a0      	blx	r4
				if(s16Ret != SOCK_ERR_NO_ERROR)
  40366a:	2800      	cmp	r0, #0
				{
					s16Ret = SOCK_ERR_BUFFER_FULL;
  40366c:	bf0c      	ite	eq
  40366e:	2000      	moveq	r0, #0
  403670:	f06f 000d 	mvnne.w	r0, #13
  403674:	e00e      	b.n	403694 <recvfrom+0xa0>
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
  403676:	f06f 0005 	mvn.w	r0, #5
  40367a:	4770      	bx	lr
  40367c:	f06f 0005 	mvn.w	r0, #5
  403680:	4770      	bx	lr
  403682:	f06f 0005 	mvn.w	r0, #5
	}
	return s16Ret;
}
  403686:	4770      	bx	lr
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
  403688:	f06f 0005 	mvn.w	r0, #5
  40368c:	e002      	b.n	403694 <recvfrom+0xa0>
Date
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
  40368e:	2000      	movs	r0, #0
  403690:	e000      	b.n	403694 <recvfrom+0xa0>
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		if(gastrSockets[sock].bIsUsed)
		{
			s16Ret = SOCK_ERR_NO_ERROR;
  403692:	2000      	movs	r0, #0
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
	}
	return s16Ret;
}
  403694:	b006      	add	sp, #24
  403696:	bd70      	pop	{r4, r5, r6, pc}
  403698:	2000ad4c 	.word	0x2000ad4c
  40369c:	00401161 	.word	0x00401161

004036a0 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  4036a0:	b570      	push	{r4, r5, r6, lr}
  4036a2:	b082      	sub	sp, #8
  4036a4:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  4036a6:	4b2e      	ldr	r3, [pc, #184]	; (403760 <spi_flash_enable+0xc0>)
  4036a8:	4798      	blx	r3
  4036aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4036ae:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  4036b2:	d350      	bcc.n	403756 <spi_flash_enable+0xb6>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4036b4:	a901      	add	r1, sp, #4
  4036b6:	f241 4010 	movw	r0, #5136	; 0x1410
  4036ba:	4b2a      	ldr	r3, [pc, #168]	; (403764 <spi_flash_enable+0xc4>)
  4036bc:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  4036be:	4604      	mov	r4, r0
  4036c0:	2800      	cmp	r0, #0
  4036c2:	d149      	bne.n	403758 <spi_flash_enable+0xb8>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  4036c4:	9901      	ldr	r1, [sp, #4]
  4036c6:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  4036ca:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
  4036ce:	f041 7188 	orr.w	r1, r1, #17825792	; 0x1100000
  4036d2:	f441 3188 	orr.w	r1, r1, #69632	; 0x11000
  4036d6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4036d8:	f241 4010 	movw	r0, #5136	; 0x1410
  4036dc:	4b22      	ldr	r3, [pc, #136]	; (403768 <spi_flash_enable+0xc8>)
  4036de:	4798      	blx	r3
		if(enable) {
  4036e0:	b1b5      	cbz	r5, 403710 <spi_flash_enable+0x70>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4036e2:	2100      	movs	r1, #0
  4036e4:	4821      	ldr	r0, [pc, #132]	; (40376c <spi_flash_enable+0xcc>)
  4036e6:	4d20      	ldr	r5, [pc, #128]	; (403768 <spi_flash_enable+0xc8>)
  4036e8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4036ea:	21ab      	movs	r1, #171	; 0xab
  4036ec:	4820      	ldr	r0, [pc, #128]	; (403770 <spi_flash_enable+0xd0>)
  4036ee:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4036f0:	2101      	movs	r1, #1
  4036f2:	4820      	ldr	r0, [pc, #128]	; (403774 <spi_flash_enable+0xd4>)
  4036f4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4036f6:	2100      	movs	r1, #0
  4036f8:	481f      	ldr	r0, [pc, #124]	; (403778 <spi_flash_enable+0xd8>)
  4036fa:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  4036fc:	2181      	movs	r1, #129	; 0x81
  4036fe:	481f      	ldr	r0, [pc, #124]	; (40377c <spi_flash_enable+0xdc>)
  403700:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403702:	4e1f      	ldr	r6, [pc, #124]	; (403780 <spi_flash_enable+0xe0>)
  403704:	4d1f      	ldr	r5, [pc, #124]	; (403784 <spi_flash_enable+0xe4>)
  403706:	4630      	mov	r0, r6
  403708:	47a8      	blx	r5
  40370a:	2801      	cmp	r0, #1
  40370c:	d1fb      	bne.n	403706 <spi_flash_enable+0x66>
  40370e:	e015      	b.n	40373c <spi_flash_enable+0x9c>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403710:	2100      	movs	r1, #0
  403712:	4816      	ldr	r0, [pc, #88]	; (40376c <spi_flash_enable+0xcc>)
  403714:	4d14      	ldr	r5, [pc, #80]	; (403768 <spi_flash_enable+0xc8>)
  403716:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403718:	21b9      	movs	r1, #185	; 0xb9
  40371a:	4815      	ldr	r0, [pc, #84]	; (403770 <spi_flash_enable+0xd0>)
  40371c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  40371e:	2101      	movs	r1, #1
  403720:	4814      	ldr	r0, [pc, #80]	; (403774 <spi_flash_enable+0xd4>)
  403722:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403724:	2100      	movs	r1, #0
  403726:	4814      	ldr	r0, [pc, #80]	; (403778 <spi_flash_enable+0xd8>)
  403728:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  40372a:	2181      	movs	r1, #129	; 0x81
  40372c:	4813      	ldr	r0, [pc, #76]	; (40377c <spi_flash_enable+0xdc>)
  40372e:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403730:	4e13      	ldr	r6, [pc, #76]	; (403780 <spi_flash_enable+0xe0>)
  403732:	4d14      	ldr	r5, [pc, #80]	; (403784 <spi_flash_enable+0xe4>)
  403734:	4630      	mov	r0, r6
  403736:	47a8      	blx	r5
  403738:	2801      	cmp	r0, #1
  40373a:	d1fb      	bne.n	403734 <spi_flash_enable+0x94>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  40373c:	9901      	ldr	r1, [sp, #4]
  40373e:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
  403742:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
  403746:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40374a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  40374c:	f241 4010 	movw	r0, #5136	; 0x1410
  403750:	4b05      	ldr	r3, [pc, #20]	; (403768 <spi_flash_enable+0xc8>)
  403752:	4798      	blx	r3
  403754:	e000      	b.n	403758 <spi_flash_enable+0xb8>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  403756:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403758:	4620      	mov	r0, r4
  40375a:	b002      	add	sp, #8
  40375c:	bd70      	pop	{r4, r5, r6, pc}
  40375e:	bf00      	nop
  403760:	00401e65 	.word	0x00401e65
  403764:	00402145 	.word	0x00402145
  403768:	00402151 	.word	0x00402151
  40376c:	00010208 	.word	0x00010208
  403770:	0001020c 	.word	0x0001020c
  403774:	00010214 	.word	0x00010214
  403778:	0001021c 	.word	0x0001021c
  40377c:	00010204 	.word	0x00010204
  403780:	00010218 	.word	0x00010218
  403784:	00402139 	.word	0x00402139

00403788 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  403788:	b990      	cbnz	r0, 4037b0 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40378a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40378e:	460c      	mov	r4, r1
  403790:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403792:	2a00      	cmp	r2, #0
  403794:	dd0f      	ble.n	4037b6 <_read+0x2e>
  403796:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403798:	4e08      	ldr	r6, [pc, #32]	; (4037bc <_read+0x34>)
  40379a:	4d09      	ldr	r5, [pc, #36]	; (4037c0 <_read+0x38>)
  40379c:	6830      	ldr	r0, [r6, #0]
  40379e:	4621      	mov	r1, r4
  4037a0:	682b      	ldr	r3, [r5, #0]
  4037a2:	4798      	blx	r3
		ptr++;
  4037a4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4037a6:	42a7      	cmp	r7, r4
  4037a8:	d1f8      	bne.n	40379c <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4037aa:	4640      	mov	r0, r8
  4037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4037b0:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4037b4:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4037b6:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4037b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4037bc:	2000ae10 	.word	0x2000ae10
  4037c0:	2000ae08 	.word	0x2000ae08

004037c4 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4037c4:	460b      	mov	r3, r1
  4037c6:	b119      	cbz	r1, 4037d0 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4037c8:	6809      	ldr	r1, [r1, #0]
  4037ca:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4037cc:	685b      	ldr	r3, [r3, #4]
  4037ce:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  4037d0:	b11a      	cbz	r2, 4037da <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4037d2:	6813      	ldr	r3, [r2, #0]
  4037d4:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4037d6:	6853      	ldr	r3, [r2, #4]
  4037d8:	61c3      	str	r3, [r0, #28]
  4037da:	4770      	bx	lr

004037dc <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4037dc:	460b      	mov	r3, r1
  4037de:	b119      	cbz	r1, 4037e8 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4037e0:	6809      	ldr	r1, [r1, #0]
  4037e2:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4037e4:	685b      	ldr	r3, [r3, #4]
  4037e6:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  4037e8:	b11a      	cbz	r2, 4037f2 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4037ea:	6813      	ldr	r3, [r2, #0]
  4037ec:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4037ee:	6853      	ldr	r3, [r2, #4]
  4037f0:	6143      	str	r3, [r0, #20]
  4037f2:	4770      	bx	lr

004037f4 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4037f4:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  4037f8:	f021 0101 	bic.w	r1, r1, #1
  4037fc:	0589      	lsls	r1, r1, #22
  4037fe:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403800:	6201      	str	r1, [r0, #32]
  403802:	4770      	bx	lr

00403804 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403804:	b508      	push	{r3, lr}
  403806:	2015      	movs	r0, #21
  403808:	4b01      	ldr	r3, [pc, #4]	; (403810 <spi_enable_clock+0xc>)
  40380a:	4798      	blx	r3
  40380c:	bd08      	pop	{r3, pc}
  40380e:	bf00      	nop
  403810:	00404111 	.word	0x00404111

00403814 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403814:	b132      	cbz	r2, 403824 <spi_set_clock_polarity+0x10>
  403816:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40381a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40381c:	f043 0301 	orr.w	r3, r3, #1
  403820:	6303      	str	r3, [r0, #48]	; 0x30
  403822:	4770      	bx	lr
  403824:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  403828:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40382a:	f023 0301 	bic.w	r3, r3, #1
  40382e:	6303      	str	r3, [r0, #48]	; 0x30
  403830:	4770      	bx	lr
  403832:	bf00      	nop

00403834 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403834:	b132      	cbz	r2, 403844 <spi_set_clock_phase+0x10>
  403836:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40383a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40383c:	f043 0302 	orr.w	r3, r3, #2
  403840:	6303      	str	r3, [r0, #48]	; 0x30
  403842:	4770      	bx	lr
  403844:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  403848:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40384a:	f023 0302 	bic.w	r3, r3, #2
  40384e:	6303      	str	r3, [r0, #48]	; 0x30
  403850:	4770      	bx	lr
  403852:	bf00      	nop

00403854 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403854:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403858:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40385a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40385e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  403860:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403862:	431a      	orrs	r2, r3
  403864:	630a      	str	r2, [r1, #48]	; 0x30
  403866:	4770      	bx	lr

00403868 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  403868:	b16a      	cbz	r2, 403886 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40386a:	b410      	push	{r4}
  40386c:	4614      	mov	r4, r2
  40386e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403872:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403878:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40387a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40387c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403880:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403882:	2000      	movs	r0, #0
  403884:	e002      	b.n	40388c <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  403886:	f04f 30ff 	mov.w	r0, #4294967295
  40388a:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  40388c:	bc10      	pop	{r4}
  40388e:	4770      	bx	lr

00403890 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  403890:	b410      	push	{r4}
  403892:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  403896:	6b08      	ldr	r0, [r1, #48]	; 0x30
  403898:	b280      	uxth	r0, r0
  40389a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40389c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40389e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4038a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4038a6:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4038a8:	bc10      	pop	{r4}
  4038aa:	4770      	bx	lr

004038ac <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4038ac:	6943      	ldr	r3, [r0, #20]
  4038ae:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4038b2:	bf1d      	ittte	ne
  4038b4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4038b8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4038ba:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4038bc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4038be:	4770      	bx	lr

004038c0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4038c0:	6943      	ldr	r3, [r0, #20]
  4038c2:	f013 0f01 	tst.w	r3, #1
  4038c6:	d005      	beq.n	4038d4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4038c8:	6983      	ldr	r3, [r0, #24]
  4038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4038ce:	600b      	str	r3, [r1, #0]

	return 0;
  4038d0:	2000      	movs	r0, #0
  4038d2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4038d4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4038d6:	4770      	bx	lr

004038d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4038d8:	3801      	subs	r0, #1
  4038da:	2802      	cmp	r0, #2
  4038dc:	d815      	bhi.n	40390a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4038de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038e2:	460e      	mov	r6, r1
  4038e4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4038e6:	b19a      	cbz	r2, 403910 <_write+0x38>
  4038e8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4038ea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403924 <_write+0x4c>
  4038ee:	4f0c      	ldr	r7, [pc, #48]	; (403920 <_write+0x48>)
  4038f0:	f8d8 0000 	ldr.w	r0, [r8]
  4038f4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4038f8:	683b      	ldr	r3, [r7, #0]
  4038fa:	4798      	blx	r3
  4038fc:	2800      	cmp	r0, #0
  4038fe:	db0a      	blt.n	403916 <_write+0x3e>
  403900:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403902:	3c01      	subs	r4, #1
  403904:	d1f4      	bne.n	4038f0 <_write+0x18>
  403906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40390a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40390e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403910:	2000      	movs	r0, #0
  403912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  403916:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40391e:	bf00      	nop
  403920:	2000ae0c 	.word	0x2000ae0c
  403924:	2000ae10 	.word	0x2000ae10

00403928 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  403928:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40392a:	23ac      	movs	r3, #172	; 0xac
  40392c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40392e:	680b      	ldr	r3, [r1, #0]
  403930:	684a      	ldr	r2, [r1, #4]
  403932:	fbb3 f3f2 	udiv	r3, r3, r2
  403936:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  403938:	1e5c      	subs	r4, r3, #1
  40393a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40393e:	4294      	cmp	r4, r2
  403940:	d80a      	bhi.n	403958 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  403942:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  403944:	688b      	ldr	r3, [r1, #8]
  403946:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  403948:	f240 2302 	movw	r3, #514	; 0x202
  40394c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  403950:	2350      	movs	r3, #80	; 0x50
  403952:	6003      	str	r3, [r0, #0]

	return 0;
  403954:	2000      	movs	r0, #0
  403956:	e000      	b.n	40395a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  403958:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40395a:	bc10      	pop	{r4}
  40395c:	4770      	bx	lr
  40395e:	bf00      	nop

00403960 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403960:	6943      	ldr	r3, [r0, #20]
  403962:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403966:	bf1a      	itte	ne
  403968:	61c1      	strne	r1, [r0, #28]
	return 0;
  40396a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40396c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40396e:	4770      	bx	lr

00403970 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403970:	6943      	ldr	r3, [r0, #20]
  403972:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  403976:	bf1d      	ittte	ne
  403978:	6983      	ldrne	r3, [r0, #24]
  40397a:	700b      	strbne	r3, [r1, #0]
	return 0;
  40397c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40397e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  403980:	4770      	bx	lr
  403982:	bf00      	nop

00403984 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403984:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403986:	480e      	ldr	r0, [pc, #56]	; (4039c0 <sysclk_init+0x3c>)
  403988:	4b0e      	ldr	r3, [pc, #56]	; (4039c4 <sysclk_init+0x40>)
  40398a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40398c:	213e      	movs	r1, #62	; 0x3e
  40398e:	2000      	movs	r0, #0
  403990:	4b0d      	ldr	r3, [pc, #52]	; (4039c8 <sysclk_init+0x44>)
  403992:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403994:	4c0d      	ldr	r4, [pc, #52]	; (4039cc <sysclk_init+0x48>)
  403996:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403998:	2800      	cmp	r0, #0
  40399a:	d0fc      	beq.n	403996 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40399c:	4b0c      	ldr	r3, [pc, #48]	; (4039d0 <sysclk_init+0x4c>)
  40399e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4039a0:	4a0c      	ldr	r2, [pc, #48]	; (4039d4 <sysclk_init+0x50>)
  4039a2:	4b0d      	ldr	r3, [pc, #52]	; (4039d8 <sysclk_init+0x54>)
  4039a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4039a6:	4c0d      	ldr	r4, [pc, #52]	; (4039dc <sysclk_init+0x58>)
  4039a8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4039aa:	2800      	cmp	r0, #0
  4039ac:	d0fc      	beq.n	4039a8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4039ae:	2010      	movs	r0, #16
  4039b0:	4b0b      	ldr	r3, [pc, #44]	; (4039e0 <sysclk_init+0x5c>)
  4039b2:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4039b4:	4b0b      	ldr	r3, [pc, #44]	; (4039e4 <sysclk_init+0x60>)
  4039b6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4039b8:	4801      	ldr	r0, [pc, #4]	; (4039c0 <sysclk_init+0x3c>)
  4039ba:	4b02      	ldr	r3, [pc, #8]	; (4039c4 <sysclk_init+0x40>)
  4039bc:	4798      	blx	r3
  4039be:	bd10      	pop	{r4, pc}
  4039c0:	07270e00 	.word	0x07270e00
  4039c4:	00404349 	.word	0x00404349
  4039c8:	0040408d 	.word	0x0040408d
  4039cc:	004040e1 	.word	0x004040e1
  4039d0:	004040f1 	.word	0x004040f1
  4039d4:	20133f01 	.word	0x20133f01
  4039d8:	400e0400 	.word	0x400e0400
  4039dc:	00404101 	.word	0x00404101
  4039e0:	00404025 	.word	0x00404025
  4039e4:	00404235 	.word	0x00404235

004039e8 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4039ea:	482a      	ldr	r0, [pc, #168]	; (403a94 <board_init+0xac>)
  4039ec:	4b2a      	ldr	r3, [pc, #168]	; (403a98 <board_init+0xb0>)
  4039ee:	4798      	blx	r3
  4039f0:	200b      	movs	r0, #11
  4039f2:	4c2a      	ldr	r4, [pc, #168]	; (403a9c <board_init+0xb4>)
  4039f4:	47a0      	blx	r4
  4039f6:	200c      	movs	r0, #12
  4039f8:	47a0      	blx	r4
  4039fa:	200d      	movs	r0, #13
  4039fc:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4039fe:	4b28      	ldr	r3, [pc, #160]	; (403aa0 <board_init+0xb8>)
  403a00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  403a04:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403a06:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403a08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403a0c:	4c25      	ldr	r4, [pc, #148]	; (403aa4 <board_init+0xbc>)
  403a0e:	2504      	movs	r5, #4
  403a10:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403a12:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403a16:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403a18:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403a1c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403a1e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403a20:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403a24:	6f22      	ldr	r2, [r4, #112]	; 0x70
  403a26:	f022 0204 	bic.w	r2, r2, #4
  403a2a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403a2c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  403a2e:	f022 0204 	bic.w	r2, r2, #4
  403a32:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  403a38:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403a3a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403a40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403a44:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403a46:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403a48:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403a4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  403a50:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403a52:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  403a58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403a5c:	210c      	movs	r1, #12
  403a5e:	4812      	ldr	r0, [pc, #72]	; (403aa8 <board_init+0xc0>)
  403a60:	4b12      	ldr	r3, [pc, #72]	; (403aac <board_init+0xc4>)
  403a62:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  403a64:	4f12      	ldr	r7, [pc, #72]	; (403ab0 <board_init+0xc8>)
  403a66:	4639      	mov	r1, r7
  403a68:	2003      	movs	r0, #3
  403a6a:	4e12      	ldr	r6, [pc, #72]	; (403ab4 <board_init+0xcc>)
  403a6c:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  403a6e:	4639      	mov	r1, r7
  403a70:	4628      	mov	r0, r5
  403a72:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403a74:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403a76:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403a7a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403a7c:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403a7e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403a82:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403a84:	f023 0304 	bic.w	r3, r3, #4
  403a88:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403a8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403a8c:	f023 0304 	bic.w	r3, r3, #4
  403a90:	6763      	str	r3, [r4, #116]	; 0x74
  403a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a94:	400e1450 	.word	0x400e1450
  403a98:	00404165 	.word	0x00404165
  403a9c:	00404111 	.word	0x00404111
  403aa0:	400e1200 	.word	0x400e1200
  403aa4:	400e0e00 	.word	0x400e0e00
  403aa8:	400e1000 	.word	0x400e1000
  403aac:	00403d4d 	.word	0x00403d4d
  403ab0:	08000001 	.word	0x08000001
  403ab4:	00403c29 	.word	0x00403c29

00403ab8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403ab8:	b10a      	cbz	r2, 403abe <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  403aba:	6641      	str	r1, [r0, #100]	; 0x64
  403abc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403abe:	6601      	str	r1, [r0, #96]	; 0x60
  403ac0:	4770      	bx	lr
  403ac2:	bf00      	nop

00403ac4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403ac4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403ac6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403aca:	d02f      	beq.n	403b2c <pio_set_peripheral+0x68>
  403acc:	d807      	bhi.n	403ade <pio_set_peripheral+0x1a>
  403ace:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403ad2:	d014      	beq.n	403afe <pio_set_peripheral+0x3a>
  403ad4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403ad8:	d01e      	beq.n	403b18 <pio_set_peripheral+0x54>
  403ada:	b939      	cbnz	r1, 403aec <pio_set_peripheral+0x28>
  403adc:	4770      	bx	lr
  403ade:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403ae2:	d036      	beq.n	403b52 <pio_set_peripheral+0x8e>
  403ae4:	d804      	bhi.n	403af0 <pio_set_peripheral+0x2c>
  403ae6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403aea:	d029      	beq.n	403b40 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403aec:	6042      	str	r2, [r0, #4]
  403aee:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403af0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403af4:	d02d      	beq.n	403b52 <pio_set_peripheral+0x8e>
  403af6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403afa:	d02a      	beq.n	403b52 <pio_set_peripheral+0x8e>
  403afc:	e7f6      	b.n	403aec <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403afe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403b00:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403b02:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403b04:	43d3      	mvns	r3, r2
  403b06:	4021      	ands	r1, r4
  403b08:	4019      	ands	r1, r3
  403b0a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403b0c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403b0e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403b10:	4021      	ands	r1, r4
  403b12:	400b      	ands	r3, r1
  403b14:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403b16:	e01a      	b.n	403b4e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403b18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403b1a:	4313      	orrs	r3, r2
  403b1c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403b1e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403b20:	6f43      	ldr	r3, [r0, #116]	; 0x74
  403b22:	400b      	ands	r3, r1
  403b24:	ea23 0302 	bic.w	r3, r3, r2
  403b28:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403b2a:	e7df      	b.n	403aec <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403b2c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403b2e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  403b30:	400b      	ands	r3, r1
  403b32:	ea23 0302 	bic.w	r3, r3, r2
  403b36:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403b38:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403b3a:	4313      	orrs	r3, r2
  403b3c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403b3e:	e7d5      	b.n	403aec <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403b40:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403b42:	4313      	orrs	r3, r2
  403b44:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403b46:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403b48:	4313      	orrs	r3, r2
  403b4a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403b4c:	e7ce      	b.n	403aec <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403b4e:	6042      	str	r2, [r0, #4]
}
  403b50:	bc10      	pop	{r4}
  403b52:	4770      	bx	lr

00403b54 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403b54:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403b56:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  403b5a:	bf14      	ite	ne
  403b5c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403b5e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403b60:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  403b64:	bf14      	ite	ne
  403b66:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403b68:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403b6a:	f012 0f02 	tst.w	r2, #2
  403b6e:	d002      	beq.n	403b76 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  403b70:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403b74:	e004      	b.n	403b80 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403b76:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  403b7a:	bf18      	it	ne
  403b7c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403b80:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403b82:	6001      	str	r1, [r0, #0]
  403b84:	4770      	bx	lr
  403b86:	bf00      	nop

00403b88 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403b88:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403b8a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403b8c:	9c01      	ldr	r4, [sp, #4]
  403b8e:	b10c      	cbz	r4, 403b94 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  403b90:	6641      	str	r1, [r0, #100]	; 0x64
  403b92:	e000      	b.n	403b96 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403b94:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  403b96:	b10b      	cbz	r3, 403b9c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  403b98:	6501      	str	r1, [r0, #80]	; 0x50
  403b9a:	e000      	b.n	403b9e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403b9c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  403b9e:	b10a      	cbz	r2, 403ba4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  403ba0:	6301      	str	r1, [r0, #48]	; 0x30
  403ba2:	e000      	b.n	403ba6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  403ba4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  403ba6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403ba8:	6001      	str	r1, [r0, #0]
}
  403baa:	bc10      	pop	{r4}
  403bac:	4770      	bx	lr
  403bae:	bf00      	nop

00403bb0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  403bb0:	f012 0f10 	tst.w	r2, #16
  403bb4:	d010      	beq.n	403bd8 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  403bb6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  403bba:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  403bbe:	bf14      	ite	ne
  403bc0:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  403bc4:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  403bc8:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  403bcc:	bf14      	ite	ne
  403bce:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  403bd2:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  403bd6:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  403bd8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  403bdc:	4770      	bx	lr
  403bde:	bf00      	nop

00403be0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  403be0:	6401      	str	r1, [r0, #64]	; 0x40
  403be2:	4770      	bx	lr

00403be4 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403be4:	6441      	str	r1, [r0, #68]	; 0x44
  403be6:	4770      	bx	lr

00403be8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403be8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403bea:	4770      	bx	lr

00403bec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403bec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403bee:	4770      	bx	lr

00403bf0 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403bf0:	0943      	lsrs	r3, r0, #5
  403bf2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403bf6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403bfa:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  403bfc:	f000 001f 	and.w	r0, r0, #31
  403c00:	2201      	movs	r2, #1
  403c02:	fa02 f000 	lsl.w	r0, r2, r0
  403c06:	6318      	str	r0, [r3, #48]	; 0x30
  403c08:	4770      	bx	lr
  403c0a:	bf00      	nop

00403c0c <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403c0c:	0943      	lsrs	r3, r0, #5
  403c0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403c12:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403c16:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  403c18:	f000 001f 	and.w	r0, r0, #31
  403c1c:	2201      	movs	r2, #1
  403c1e:	fa02 f000 	lsl.w	r0, r2, r0
  403c22:	6358      	str	r0, [r3, #52]	; 0x34
  403c24:	4770      	bx	lr
  403c26:	bf00      	nop

00403c28 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403c28:	b570      	push	{r4, r5, r6, lr}
  403c2a:	b082      	sub	sp, #8
  403c2c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403c2e:	0943      	lsrs	r3, r0, #5
  403c30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403c34:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403c38:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403c3a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403c42:	d047      	beq.n	403cd4 <pio_configure_pin+0xac>
  403c44:	d809      	bhi.n	403c5a <pio_configure_pin+0x32>
  403c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403c4a:	d021      	beq.n	403c90 <pio_configure_pin+0x68>
  403c4c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403c50:	d02f      	beq.n	403cb2 <pio_configure_pin+0x8a>
  403c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403c56:	d16f      	bne.n	403d38 <pio_configure_pin+0x110>
  403c58:	e009      	b.n	403c6e <pio_configure_pin+0x46>
  403c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403c5e:	d055      	beq.n	403d0c <pio_configure_pin+0xe4>
  403c60:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403c64:	d052      	beq.n	403d0c <pio_configure_pin+0xe4>
  403c66:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403c6a:	d044      	beq.n	403cf6 <pio_configure_pin+0xce>
  403c6c:	e064      	b.n	403d38 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403c6e:	f000 001f 	and.w	r0, r0, #31
  403c72:	2601      	movs	r6, #1
  403c74:	4086      	lsls	r6, r0
  403c76:	4632      	mov	r2, r6
  403c78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403c7c:	4620      	mov	r0, r4
  403c7e:	4b30      	ldr	r3, [pc, #192]	; (403d40 <pio_configure_pin+0x118>)
  403c80:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403c82:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  403c86:	bf14      	ite	ne
  403c88:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403c8a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403c8c:	2001      	movs	r0, #1
  403c8e:	e054      	b.n	403d3a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403c90:	f000 001f 	and.w	r0, r0, #31
  403c94:	2601      	movs	r6, #1
  403c96:	4086      	lsls	r6, r0
  403c98:	4632      	mov	r2, r6
  403c9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403c9e:	4620      	mov	r0, r4
  403ca0:	4b27      	ldr	r3, [pc, #156]	; (403d40 <pio_configure_pin+0x118>)
  403ca2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403ca4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  403ca8:	bf14      	ite	ne
  403caa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403cac:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403cae:	2001      	movs	r0, #1
  403cb0:	e043      	b.n	403d3a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403cb2:	f000 001f 	and.w	r0, r0, #31
  403cb6:	2601      	movs	r6, #1
  403cb8:	4086      	lsls	r6, r0
  403cba:	4632      	mov	r2, r6
  403cbc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403cc0:	4620      	mov	r0, r4
  403cc2:	4b1f      	ldr	r3, [pc, #124]	; (403d40 <pio_configure_pin+0x118>)
  403cc4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403cc6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  403cca:	bf14      	ite	ne
  403ccc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403cce:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403cd0:	2001      	movs	r0, #1
  403cd2:	e032      	b.n	403d3a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  403cd4:	f000 001f 	and.w	r0, r0, #31
  403cd8:	2601      	movs	r6, #1
  403cda:	4086      	lsls	r6, r0
  403cdc:	4632      	mov	r2, r6
  403cde:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403ce2:	4620      	mov	r0, r4
  403ce4:	4b16      	ldr	r3, [pc, #88]	; (403d40 <pio_configure_pin+0x118>)
  403ce6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403ce8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  403cec:	bf14      	ite	ne
  403cee:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403cf0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403cf2:	2001      	movs	r0, #1
  403cf4:	e021      	b.n	403d3a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  403cf6:	f000 011f 	and.w	r1, r0, #31
  403cfa:	2601      	movs	r6, #1
  403cfc:	462a      	mov	r2, r5
  403cfe:	fa06 f101 	lsl.w	r1, r6, r1
  403d02:	4620      	mov	r0, r4
  403d04:	4b0f      	ldr	r3, [pc, #60]	; (403d44 <pio_configure_pin+0x11c>)
  403d06:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403d08:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  403d0a:	e016      	b.n	403d3a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403d0c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  403d10:	f000 011f 	and.w	r1, r0, #31
  403d14:	2601      	movs	r6, #1
  403d16:	ea05 0306 	and.w	r3, r5, r6
  403d1a:	9300      	str	r3, [sp, #0]
  403d1c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403d20:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  403d24:	bf14      	ite	ne
  403d26:	2200      	movne	r2, #0
  403d28:	2201      	moveq	r2, #1
  403d2a:	fa06 f101 	lsl.w	r1, r6, r1
  403d2e:	4620      	mov	r0, r4
  403d30:	4c05      	ldr	r4, [pc, #20]	; (403d48 <pio_configure_pin+0x120>)
  403d32:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  403d34:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  403d36:	e000      	b.n	403d3a <pio_configure_pin+0x112>

	default:
		return 0;
  403d38:	2000      	movs	r0, #0
	}

	return 1;
}
  403d3a:	b002      	add	sp, #8
  403d3c:	bd70      	pop	{r4, r5, r6, pc}
  403d3e:	bf00      	nop
  403d40:	00403ac5 	.word	0x00403ac5
  403d44:	00403b55 	.word	0x00403b55
  403d48:	00403b89 	.word	0x00403b89

00403d4c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  403d4c:	b570      	push	{r4, r5, r6, lr}
  403d4e:	b082      	sub	sp, #8
  403d50:	4605      	mov	r5, r0
  403d52:	460e      	mov	r6, r1
  403d54:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403d56:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  403d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403d5e:	d038      	beq.n	403dd2 <pio_configure_pin_group+0x86>
  403d60:	d809      	bhi.n	403d76 <pio_configure_pin_group+0x2a>
  403d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403d66:	d01c      	beq.n	403da2 <pio_configure_pin_group+0x56>
  403d68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403d6c:	d025      	beq.n	403dba <pio_configure_pin_group+0x6e>
  403d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403d72:	d150      	bne.n	403e16 <pio_configure_pin_group+0xca>
  403d74:	e009      	b.n	403d8a <pio_configure_pin_group+0x3e>
  403d76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403d7a:	d03a      	beq.n	403df2 <pio_configure_pin_group+0xa6>
  403d7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403d80:	d037      	beq.n	403df2 <pio_configure_pin_group+0xa6>
  403d82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403d86:	d030      	beq.n	403dea <pio_configure_pin_group+0x9e>
  403d88:	e045      	b.n	403e16 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  403d8a:	460a      	mov	r2, r1
  403d8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403d90:	4b22      	ldr	r3, [pc, #136]	; (403e1c <pio_configure_pin_group+0xd0>)
  403d92:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403d94:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  403d98:	bf14      	ite	ne
  403d9a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403d9c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403d9e:	2001      	movs	r0, #1
  403da0:	e03a      	b.n	403e18 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  403da2:	460a      	mov	r2, r1
  403da4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403da8:	4b1c      	ldr	r3, [pc, #112]	; (403e1c <pio_configure_pin_group+0xd0>)
  403daa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403dac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  403db0:	bf14      	ite	ne
  403db2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403db4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403db6:	2001      	movs	r0, #1
  403db8:	e02e      	b.n	403e18 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  403dba:	460a      	mov	r2, r1
  403dbc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403dc0:	4b16      	ldr	r3, [pc, #88]	; (403e1c <pio_configure_pin_group+0xd0>)
  403dc2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403dc4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  403dc8:	bf14      	ite	ne
  403dca:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403dcc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403dce:	2001      	movs	r0, #1
  403dd0:	e022      	b.n	403e18 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  403dd2:	460a      	mov	r2, r1
  403dd4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403dd8:	4b10      	ldr	r3, [pc, #64]	; (403e1c <pio_configure_pin_group+0xd0>)
  403dda:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403ddc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  403de0:	bf14      	ite	ne
  403de2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403de4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403de6:	2001      	movs	r0, #1
  403de8:	e016      	b.n	403e18 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  403dea:	4b0d      	ldr	r3, [pc, #52]	; (403e20 <pio_configure_pin_group+0xd4>)
  403dec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403dee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  403df0:	e012      	b.n	403e18 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  403df2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  403df6:	f004 0301 	and.w	r3, r4, #1
  403dfa:	9300      	str	r3, [sp, #0]
  403dfc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  403e00:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  403e04:	bf14      	ite	ne
  403e06:	2200      	movne	r2, #0
  403e08:	2201      	moveq	r2, #1
  403e0a:	4631      	mov	r1, r6
  403e0c:	4628      	mov	r0, r5
  403e0e:	4c05      	ldr	r4, [pc, #20]	; (403e24 <pio_configure_pin_group+0xd8>)
  403e10:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  403e12:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  403e14:	e000      	b.n	403e18 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  403e16:	2000      	movs	r0, #0
	}

	return 1;
}
  403e18:	b002      	add	sp, #8
  403e1a:	bd70      	pop	{r4, r5, r6, pc}
  403e1c:	00403ac5 	.word	0x00403ac5
  403e20:	00403b55 	.word	0x00403b55
  403e24:	00403b89 	.word	0x00403b89

00403e28 <pio_get_pin_group>:
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
#endif
	return p_pio;
  403e28:	0940      	lsrs	r0, r0, #5
  403e2a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
  403e2e:	f200 7007 	addw	r0, r0, #1799	; 0x707
}
  403e32:	0240      	lsls	r0, r0, #9
  403e34:	4770      	bx	lr
  403e36:	bf00      	nop

00403e38 <pio_get_pin_group_id>:
	if (ul_pin >= PIO_PE0_IDX) ul_id = ID_PIOE; 
	#endif 
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
#endif
	return ul_id;
  403e38:	0940      	lsrs	r0, r0, #5
}
  403e3a:	300b      	adds	r0, #11
  403e3c:	4770      	bx	lr
  403e3e:	bf00      	nop

00403e40 <pio_get_pin_group_mask>:
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
	return ul_mask;
  403e40:	f000 001f 	and.w	r0, r0, #31
}
  403e44:	2301      	movs	r3, #1
  403e46:	fa03 f000 	lsl.w	r0, r3, r0
  403e4a:	4770      	bx	lr

00403e4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403e50:	4681      	mov	r9, r0
  403e52:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403e54:	4b12      	ldr	r3, [pc, #72]	; (403ea0 <pio_handler_process+0x54>)
  403e56:	4798      	blx	r3
  403e58:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403e5a:	4648      	mov	r0, r9
  403e5c:	4b11      	ldr	r3, [pc, #68]	; (403ea4 <pio_handler_process+0x58>)
  403e5e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403e60:	4005      	ands	r5, r0
  403e62:	d013      	beq.n	403e8c <pio_handler_process+0x40>
  403e64:	4c10      	ldr	r4, [pc, #64]	; (403ea8 <pio_handler_process+0x5c>)
  403e66:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  403e6a:	6823      	ldr	r3, [r4, #0]
  403e6c:	4543      	cmp	r3, r8
  403e6e:	d108      	bne.n	403e82 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403e70:	6861      	ldr	r1, [r4, #4]
  403e72:	4229      	tst	r1, r5
  403e74:	d005      	beq.n	403e82 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403e76:	68e3      	ldr	r3, [r4, #12]
  403e78:	4640      	mov	r0, r8
  403e7a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403e7c:	6863      	ldr	r3, [r4, #4]
  403e7e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403e82:	42b4      	cmp	r4, r6
  403e84:	d002      	beq.n	403e8c <pio_handler_process+0x40>
  403e86:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  403e88:	2d00      	cmp	r5, #0
  403e8a:	d1ee      	bne.n	403e6a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  403e8c:	4b07      	ldr	r3, [pc, #28]	; (403eac <pio_handler_process+0x60>)
  403e8e:	681b      	ldr	r3, [r3, #0]
  403e90:	b123      	cbz	r3, 403e9c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  403e92:	4b07      	ldr	r3, [pc, #28]	; (403eb0 <pio_handler_process+0x64>)
  403e94:	681b      	ldr	r3, [r3, #0]
  403e96:	b10b      	cbz	r3, 403e9c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  403e98:	4648      	mov	r0, r9
  403e9a:	4798      	blx	r3
  403e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ea0:	00403be9 	.word	0x00403be9
  403ea4:	00403bed 	.word	0x00403bed
  403ea8:	20000b40 	.word	0x20000b40
  403eac:	2000ae14 	.word	0x2000ae14
  403eb0:	20000b3c 	.word	0x20000b3c

00403eb4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  403eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  403eb6:	4c17      	ldr	r4, [pc, #92]	; (403f14 <pio_handler_set+0x60>)
  403eb8:	6826      	ldr	r6, [r4, #0]
  403eba:	2e06      	cmp	r6, #6
  403ebc:	d828      	bhi.n	403f10 <pio_handler_set+0x5c>
  403ebe:	f04f 0c00 	mov.w	ip, #0
  403ec2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  403ec4:	4f14      	ldr	r7, [pc, #80]	; (403f18 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  403ec6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  403ec8:	0125      	lsls	r5, r4, #4
  403eca:	597d      	ldr	r5, [r7, r5]
  403ecc:	428d      	cmp	r5, r1
  403ece:	d104      	bne.n	403eda <pio_handler_set+0x26>
  403ed0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  403ed4:	686d      	ldr	r5, [r5, #4]
  403ed6:	4295      	cmp	r5, r2
  403ed8:	d004      	beq.n	403ee4 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  403eda:	3401      	adds	r4, #1
  403edc:	b2e4      	uxtb	r4, r4
  403ede:	46a4      	mov	ip, r4
  403ee0:	42a6      	cmp	r6, r4
  403ee2:	d2f0      	bcs.n	403ec6 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  403ee4:	4d0c      	ldr	r5, [pc, #48]	; (403f18 <pio_handler_set+0x64>)
  403ee6:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  403eea:	eb05 040e 	add.w	r4, r5, lr
  403eee:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  403ef2:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  403ef4:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  403ef6:	9906      	ldr	r1, [sp, #24]
  403ef8:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  403efa:	3601      	adds	r6, #1
  403efc:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  403efe:	bf04      	itt	eq
  403f00:	4904      	ldreq	r1, [pc, #16]	; (403f14 <pio_handler_set+0x60>)
  403f02:	600e      	streq	r6, [r1, #0]
  403f04:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  403f06:	461a      	mov	r2, r3
  403f08:	4b04      	ldr	r3, [pc, #16]	; (403f1c <pio_handler_set+0x68>)
  403f0a:	4798      	blx	r3

	return 0;
  403f0c:	2000      	movs	r0, #0
  403f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  403f10:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  403f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f14:	20000b38 	.word	0x20000b38
  403f18:	20000b40 	.word	0x20000b40
  403f1c:	00403bb1 	.word	0x00403bb1

00403f20 <pio_handler_set_pin>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set_pin(uint32_t ul_pin, uint32_t ul_flag,
		void (*p_handler) (uint32_t, uint32_t))
{
  403f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f24:	b082      	sub	sp, #8
  403f26:	4604      	mov	r4, r0
  403f28:	460f      	mov	r7, r1
  403f2a:	4690      	mov	r8, r2
	Pio *p_pio = pio_get_pin_group(ul_pin);
  403f2c:	4b0a      	ldr	r3, [pc, #40]	; (403f58 <pio_handler_set_pin+0x38>)
  403f2e:	4798      	blx	r3
  403f30:	4605      	mov	r5, r0
	uint32_t group_id =  pio_get_pin_group_id(ul_pin);
  403f32:	4620      	mov	r0, r4
  403f34:	4b09      	ldr	r3, [pc, #36]	; (403f5c <pio_handler_set_pin+0x3c>)
  403f36:	4798      	blx	r3
  403f38:	4606      	mov	r6, r0
	uint32_t group_mask = pio_get_pin_group_mask(ul_pin);
  403f3a:	4620      	mov	r0, r4
  403f3c:	4b08      	ldr	r3, [pc, #32]	; (403f60 <pio_handler_set_pin+0x40>)
  403f3e:	4798      	blx	r3

	return pio_handler_set(p_pio, group_id, group_mask, ul_flag, p_handler);
  403f40:	f8cd 8000 	str.w	r8, [sp]
  403f44:	463b      	mov	r3, r7
  403f46:	4602      	mov	r2, r0
  403f48:	4631      	mov	r1, r6
  403f4a:	4628      	mov	r0, r5
  403f4c:	4c05      	ldr	r4, [pc, #20]	; (403f64 <pio_handler_set_pin+0x44>)
  403f4e:	47a0      	blx	r4
}
  403f50:	b002      	add	sp, #8
  403f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f56:	bf00      	nop
  403f58:	00403e29 	.word	0x00403e29
  403f5c:	00403e39 	.word	0x00403e39
  403f60:	00403e41 	.word	0x00403e41
  403f64:	00403eb5 	.word	0x00403eb5

00403f68 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403f68:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403f6a:	210b      	movs	r1, #11
  403f6c:	4801      	ldr	r0, [pc, #4]	; (403f74 <PIOA_Handler+0xc>)
  403f6e:	4b02      	ldr	r3, [pc, #8]	; (403f78 <PIOA_Handler+0x10>)
  403f70:	4798      	blx	r3
  403f72:	bd08      	pop	{r3, pc}
  403f74:	400e0e00 	.word	0x400e0e00
  403f78:	00403e4d 	.word	0x00403e4d

00403f7c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403f7c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403f7e:	210c      	movs	r1, #12
  403f80:	4801      	ldr	r0, [pc, #4]	; (403f88 <PIOB_Handler+0xc>)
  403f82:	4b02      	ldr	r3, [pc, #8]	; (403f8c <PIOB_Handler+0x10>)
  403f84:	4798      	blx	r3
  403f86:	bd08      	pop	{r3, pc}
  403f88:	400e1000 	.word	0x400e1000
  403f8c:	00403e4d 	.word	0x00403e4d

00403f90 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403f90:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403f92:	210d      	movs	r1, #13
  403f94:	4801      	ldr	r0, [pc, #4]	; (403f9c <PIOC_Handler+0xc>)
  403f96:	4b02      	ldr	r3, [pc, #8]	; (403fa0 <PIOC_Handler+0x10>)
  403f98:	4798      	blx	r3
  403f9a:	bd08      	pop	{r3, pc}
  403f9c:	400e1200 	.word	0x400e1200
  403fa0:	00403e4d 	.word	0x00403e4d

00403fa4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403fa6:	4605      	mov	r5, r0
  403fa8:	460c      	mov	r4, r1
  403faa:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  403fac:	4b18      	ldr	r3, [pc, #96]	; (404010 <pio_handler_set_priority+0x6c>)
  403fae:	4798      	blx	r3
  403fb0:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  403fb2:	f04f 31ff 	mov.w	r1, #4294967295
  403fb6:	4628      	mov	r0, r5
  403fb8:	4b16      	ldr	r3, [pc, #88]	; (404014 <pio_handler_set_priority+0x70>)
  403fba:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  403fbc:	4628      	mov	r0, r5
  403fbe:	4b16      	ldr	r3, [pc, #88]	; (404018 <pio_handler_set_priority+0x74>)
  403fc0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403fc2:	b2e2      	uxtb	r2, r4
  403fc4:	f002 031f 	and.w	r3, r2, #31
  403fc8:	2101      	movs	r1, #1
  403fca:	4099      	lsls	r1, r3
  403fcc:	0963      	lsrs	r3, r4, #5
  403fce:	009b      	lsls	r3, r3, #2
  403fd0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  403fd4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  403fd8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403fdc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  403fe0:	2c00      	cmp	r4, #0
  403fe2:	da06      	bge.n	403ff2 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403fe4:	f002 020f 	and.w	r2, r2, #15
  403fe8:	013f      	lsls	r7, r7, #4
  403fea:	b2ff      	uxtb	r7, r7
  403fec:	480b      	ldr	r0, [pc, #44]	; (40401c <pio_handler_set_priority+0x78>)
  403fee:	5487      	strb	r7, [r0, r2]
  403ff0:	e007      	b.n	404002 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403ff2:	013f      	lsls	r7, r7, #4
  403ff4:	b2ff      	uxtb	r7, r7
  403ff6:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  403ffa:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  403ffe:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404002:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404004:	4631      	mov	r1, r6
  404006:	4628      	mov	r0, r5
  404008:	4b05      	ldr	r3, [pc, #20]	; (404020 <pio_handler_set_priority+0x7c>)
  40400a:	4798      	blx	r3
  40400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40400e:	bf00      	nop
  404010:	00403bed 	.word	0x00403bed
  404014:	00403be5 	.word	0x00403be5
  404018:	00403be9 	.word	0x00403be9
  40401c:	e000ed14 	.word	0xe000ed14
  404020:	00403be1 	.word	0x00403be1

00404024 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404024:	4a18      	ldr	r2, [pc, #96]	; (404088 <pmc_switch_mck_to_pllack+0x64>)
  404026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40402c:	4318      	orrs	r0, r3
  40402e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404030:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404032:	f013 0f08 	tst.w	r3, #8
  404036:	d003      	beq.n	404040 <pmc_switch_mck_to_pllack+0x1c>
  404038:	e009      	b.n	40404e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40403a:	3b01      	subs	r3, #1
  40403c:	d103      	bne.n	404046 <pmc_switch_mck_to_pllack+0x22>
  40403e:	e01e      	b.n	40407e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404040:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404044:	4910      	ldr	r1, [pc, #64]	; (404088 <pmc_switch_mck_to_pllack+0x64>)
  404046:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404048:	f012 0f08 	tst.w	r2, #8
  40404c:	d0f5      	beq.n	40403a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40404e:	4a0e      	ldr	r2, [pc, #56]	; (404088 <pmc_switch_mck_to_pllack+0x64>)
  404050:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404052:	f023 0303 	bic.w	r3, r3, #3
  404056:	f043 0302 	orr.w	r3, r3, #2
  40405a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40405c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40405e:	f010 0008 	ands.w	r0, r0, #8
  404062:	d004      	beq.n	40406e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404064:	2000      	movs	r0, #0
  404066:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  404068:	3b01      	subs	r3, #1
  40406a:	d103      	bne.n	404074 <pmc_switch_mck_to_pllack+0x50>
  40406c:	e009      	b.n	404082 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40406e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404072:	4905      	ldr	r1, [pc, #20]	; (404088 <pmc_switch_mck_to_pllack+0x64>)
  404074:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404076:	f012 0f08 	tst.w	r2, #8
  40407a:	d0f5      	beq.n	404068 <pmc_switch_mck_to_pllack+0x44>
  40407c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40407e:	2001      	movs	r0, #1
  404080:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  404082:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404084:	4770      	bx	lr
  404086:	bf00      	nop
  404088:	400e0400 	.word	0x400e0400

0040408c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40408c:	b138      	cbz	r0, 40409e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40408e:	4911      	ldr	r1, [pc, #68]	; (4040d4 <pmc_switch_mainck_to_xtal+0x48>)
  404090:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404092:	4a11      	ldr	r2, [pc, #68]	; (4040d8 <pmc_switch_mainck_to_xtal+0x4c>)
  404094:	401a      	ands	r2, r3
  404096:	4b11      	ldr	r3, [pc, #68]	; (4040dc <pmc_switch_mainck_to_xtal+0x50>)
  404098:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40409a:	620b      	str	r3, [r1, #32]
  40409c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40409e:	480d      	ldr	r0, [pc, #52]	; (4040d4 <pmc_switch_mainck_to_xtal+0x48>)
  4040a0:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4040a2:	0209      	lsls	r1, r1, #8
  4040a4:	b289      	uxth	r1, r1
  4040a6:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4040aa:	f023 0303 	bic.w	r3, r3, #3
  4040ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4040b2:	f043 0301 	orr.w	r3, r3, #1
  4040b6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4040b8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4040ba:	4602      	mov	r2, r0
  4040bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4040be:	f013 0f01 	tst.w	r3, #1
  4040c2:	d0fb      	beq.n	4040bc <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4040c4:	4a03      	ldr	r2, [pc, #12]	; (4040d4 <pmc_switch_mainck_to_xtal+0x48>)
  4040c6:	6a13      	ldr	r3, [r2, #32]
  4040c8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4040d0:	6213      	str	r3, [r2, #32]
  4040d2:	4770      	bx	lr
  4040d4:	400e0400 	.word	0x400e0400
  4040d8:	fec8fffc 	.word	0xfec8fffc
  4040dc:	01370002 	.word	0x01370002

004040e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4040e0:	4b02      	ldr	r3, [pc, #8]	; (4040ec <pmc_osc_is_ready_mainck+0xc>)
  4040e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4040e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4040e8:	4770      	bx	lr
  4040ea:	bf00      	nop
  4040ec:	400e0400 	.word	0x400e0400

004040f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4040f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4040f4:	4b01      	ldr	r3, [pc, #4]	; (4040fc <pmc_disable_pllack+0xc>)
  4040f6:	629a      	str	r2, [r3, #40]	; 0x28
  4040f8:	4770      	bx	lr
  4040fa:	bf00      	nop
  4040fc:	400e0400 	.word	0x400e0400

00404100 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404100:	4b02      	ldr	r3, [pc, #8]	; (40410c <pmc_is_locked_pllack+0xc>)
  404102:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404104:	f000 0002 	and.w	r0, r0, #2
  404108:	4770      	bx	lr
  40410a:	bf00      	nop
  40410c:	400e0400 	.word	0x400e0400

00404110 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404110:	2822      	cmp	r0, #34	; 0x22
  404112:	d81e      	bhi.n	404152 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404114:	281f      	cmp	r0, #31
  404116:	d80c      	bhi.n	404132 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404118:	4b11      	ldr	r3, [pc, #68]	; (404160 <pmc_enable_periph_clk+0x50>)
  40411a:	699a      	ldr	r2, [r3, #24]
  40411c:	2301      	movs	r3, #1
  40411e:	4083      	lsls	r3, r0
  404120:	4393      	bics	r3, r2
  404122:	d018      	beq.n	404156 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404124:	2301      	movs	r3, #1
  404126:	fa03 f000 	lsl.w	r0, r3, r0
  40412a:	4b0d      	ldr	r3, [pc, #52]	; (404160 <pmc_enable_periph_clk+0x50>)
  40412c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40412e:	2000      	movs	r0, #0
  404130:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  404132:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404134:	4b0a      	ldr	r3, [pc, #40]	; (404160 <pmc_enable_periph_clk+0x50>)
  404136:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40413a:	2301      	movs	r3, #1
  40413c:	4083      	lsls	r3, r0
  40413e:	4393      	bics	r3, r2
  404140:	d00b      	beq.n	40415a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  404142:	2301      	movs	r3, #1
  404144:	fa03 f000 	lsl.w	r0, r3, r0
  404148:	4b05      	ldr	r3, [pc, #20]	; (404160 <pmc_enable_periph_clk+0x50>)
  40414a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40414e:	2000      	movs	r0, #0
  404150:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  404152:	2001      	movs	r0, #1
  404154:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404156:	2000      	movs	r0, #0
  404158:	4770      	bx	lr
  40415a:	2000      	movs	r0, #0
}
  40415c:	4770      	bx	lr
  40415e:	bf00      	nop
  404160:	400e0400 	.word	0x400e0400

00404164 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  404164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404168:	6043      	str	r3, [r0, #4]
  40416a:	4770      	bx	lr

0040416c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40416c:	b082      	sub	sp, #8
	volatile phantomISR = 9999;
  40416e:	f242 730f 	movw	r3, #9999	; 0x270f
  404172:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
  404174:	f3ef 8305 	mrs	r3, IPSR
	phantomISR = __get_IPSR();
  404178:	9301      	str	r3, [sp, #4]
	while (1) {
		volatile int lol;
		lol++;
  40417a:	9b00      	ldr	r3, [sp, #0]
  40417c:	3301      	adds	r3, #1
  40417e:	9300      	str	r3, [sp, #0]
  404180:	e7fb      	b.n	40417a <Dummy_Handler+0xe>
  404182:	bf00      	nop

00404184 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404184:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  404186:	4b20      	ldr	r3, [pc, #128]	; (404208 <Reset_Handler+0x84>)
  404188:	4a20      	ldr	r2, [pc, #128]	; (40420c <Reset_Handler+0x88>)
  40418a:	429a      	cmp	r2, r3
  40418c:	d912      	bls.n	4041b4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40418e:	4b20      	ldr	r3, [pc, #128]	; (404210 <Reset_Handler+0x8c>)
  404190:	4a1d      	ldr	r2, [pc, #116]	; (404208 <Reset_Handler+0x84>)
  404192:	429a      	cmp	r2, r3
  404194:	d21e      	bcs.n	4041d4 <Reset_Handler+0x50>
  404196:	4611      	mov	r1, r2
  404198:	3b01      	subs	r3, #1
  40419a:	1a9b      	subs	r3, r3, r2
  40419c:	f023 0303 	bic.w	r3, r3, #3
  4041a0:	3304      	adds	r3, #4
  4041a2:	4a1a      	ldr	r2, [pc, #104]	; (40420c <Reset_Handler+0x88>)
  4041a4:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4041a6:	f852 0b04 	ldr.w	r0, [r2], #4
  4041aa:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4041ae:	429a      	cmp	r2, r3
  4041b0:	d1f9      	bne.n	4041a6 <Reset_Handler+0x22>
  4041b2:	e00f      	b.n	4041d4 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4041b4:	4b14      	ldr	r3, [pc, #80]	; (404208 <Reset_Handler+0x84>)
  4041b6:	4a15      	ldr	r2, [pc, #84]	; (40420c <Reset_Handler+0x88>)
  4041b8:	429a      	cmp	r2, r3
  4041ba:	d20b      	bcs.n	4041d4 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4041bc:	4b14      	ldr	r3, [pc, #80]	; (404210 <Reset_Handler+0x8c>)
  4041be:	4a12      	ldr	r2, [pc, #72]	; (404208 <Reset_Handler+0x84>)
  4041c0:	1a9a      	subs	r2, r3, r2
  4041c2:	4814      	ldr	r0, [pc, #80]	; (404214 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4041c4:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4041c6:	b12a      	cbz	r2, 4041d4 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4041c8:	f851 2904 	ldr.w	r2, [r1], #-4
  4041cc:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4041d0:	4281      	cmp	r1, r0
  4041d2:	d1f9      	bne.n	4041c8 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4041d4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4041d6:	4b10      	ldr	r3, [pc, #64]	; (404218 <Reset_Handler+0x94>)
  4041d8:	4a10      	ldr	r2, [pc, #64]	; (40421c <Reset_Handler+0x98>)
  4041da:	429a      	cmp	r2, r3
  4041dc:	d20b      	bcs.n	4041f6 <Reset_Handler+0x72>
  4041de:	1d13      	adds	r3, r2, #4
  4041e0:	4a0f      	ldr	r2, [pc, #60]	; (404220 <Reset_Handler+0x9c>)
  4041e2:	1ad2      	subs	r2, r2, r3
  4041e4:	f022 0203 	bic.w	r2, r2, #3
  4041e8:	441a      	add	r2, r3
  4041ea:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4041ec:	2100      	movs	r1, #0
  4041ee:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4041f2:	429a      	cmp	r2, r3
  4041f4:	d1fb      	bne.n	4041ee <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4041f6:	4b0b      	ldr	r3, [pc, #44]	; (404224 <Reset_Handler+0xa0>)
  4041f8:	4a0b      	ldr	r2, [pc, #44]	; (404228 <Reset_Handler+0xa4>)
  4041fa:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4041fc:	4b0b      	ldr	r3, [pc, #44]	; (40422c <Reset_Handler+0xa8>)
  4041fe:	4798      	blx	r3

	/* Branch to main function */
	main();
  404200:	4b0b      	ldr	r3, [pc, #44]	; (404230 <Reset_Handler+0xac>)
  404202:	4798      	blx	r3
  404204:	e7fe      	b.n	404204 <Reset_Handler+0x80>
  404206:	bf00      	nop
  404208:	20000000 	.word	0x20000000
  40420c:	004102c8 	.word	0x004102c8
  404210:	200008d0 	.word	0x200008d0
  404214:	004102c4 	.word	0x004102c4
  404218:	2000ae1c 	.word	0x2000ae1c
  40421c:	200008d0 	.word	0x200008d0
  404220:	2000ae1f 	.word	0x2000ae1f
  404224:	e000ed00 	.word	0xe000ed00
  404228:	00400000 	.word	0x00400000
  40422c:	00405dd9 	.word	0x00405dd9
  404230:	00405bd1 	.word	0x00405bd1

00404234 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  404234:	4b3d      	ldr	r3, [pc, #244]	; (40432c <SystemCoreClockUpdate+0xf8>)
  404236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404238:	f003 0303 	and.w	r3, r3, #3
  40423c:	2b03      	cmp	r3, #3
  40423e:	d85d      	bhi.n	4042fc <SystemCoreClockUpdate+0xc8>
  404240:	e8df f003 	tbb	[pc, r3]
  404244:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  404248:	4b39      	ldr	r3, [pc, #228]	; (404330 <SystemCoreClockUpdate+0xfc>)
  40424a:	695b      	ldr	r3, [r3, #20]
  40424c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404250:	bf14      	ite	ne
  404252:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404256:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40425a:	4b36      	ldr	r3, [pc, #216]	; (404334 <SystemCoreClockUpdate+0x100>)
  40425c:	601a      	str	r2, [r3, #0]
  40425e:	e04d      	b.n	4042fc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  404260:	4b32      	ldr	r3, [pc, #200]	; (40432c <SystemCoreClockUpdate+0xf8>)
  404262:	6a1b      	ldr	r3, [r3, #32]
  404264:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404268:	d003      	beq.n	404272 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40426a:	4a33      	ldr	r2, [pc, #204]	; (404338 <SystemCoreClockUpdate+0x104>)
  40426c:	4b31      	ldr	r3, [pc, #196]	; (404334 <SystemCoreClockUpdate+0x100>)
  40426e:	601a      	str	r2, [r3, #0]
  404270:	e044      	b.n	4042fc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404272:	4a32      	ldr	r2, [pc, #200]	; (40433c <SystemCoreClockUpdate+0x108>)
  404274:	4b2f      	ldr	r3, [pc, #188]	; (404334 <SystemCoreClockUpdate+0x100>)
  404276:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  404278:	4b2c      	ldr	r3, [pc, #176]	; (40432c <SystemCoreClockUpdate+0xf8>)
  40427a:	6a1b      	ldr	r3, [r3, #32]
  40427c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404280:	2b10      	cmp	r3, #16
  404282:	d002      	beq.n	40428a <SystemCoreClockUpdate+0x56>
  404284:	2b20      	cmp	r3, #32
  404286:	d004      	beq.n	404292 <SystemCoreClockUpdate+0x5e>
  404288:	e038      	b.n	4042fc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40428a:	4a2d      	ldr	r2, [pc, #180]	; (404340 <SystemCoreClockUpdate+0x10c>)
  40428c:	4b29      	ldr	r3, [pc, #164]	; (404334 <SystemCoreClockUpdate+0x100>)
  40428e:	601a      	str	r2, [r3, #0]
			break;
  404290:	e034      	b.n	4042fc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  404292:	4a29      	ldr	r2, [pc, #164]	; (404338 <SystemCoreClockUpdate+0x104>)
  404294:	4b27      	ldr	r3, [pc, #156]	; (404334 <SystemCoreClockUpdate+0x100>)
  404296:	601a      	str	r2, [r3, #0]
			break;
  404298:	e030      	b.n	4042fc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40429a:	4b24      	ldr	r3, [pc, #144]	; (40432c <SystemCoreClockUpdate+0xf8>)
  40429c:	6a1b      	ldr	r3, [r3, #32]
  40429e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4042a2:	d003      	beq.n	4042ac <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4042a4:	4a24      	ldr	r2, [pc, #144]	; (404338 <SystemCoreClockUpdate+0x104>)
  4042a6:	4b23      	ldr	r3, [pc, #140]	; (404334 <SystemCoreClockUpdate+0x100>)
  4042a8:	601a      	str	r2, [r3, #0]
  4042aa:	e012      	b.n	4042d2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4042ac:	4a23      	ldr	r2, [pc, #140]	; (40433c <SystemCoreClockUpdate+0x108>)
  4042ae:	4b21      	ldr	r3, [pc, #132]	; (404334 <SystemCoreClockUpdate+0x100>)
  4042b0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4042b2:	4b1e      	ldr	r3, [pc, #120]	; (40432c <SystemCoreClockUpdate+0xf8>)
  4042b4:	6a1b      	ldr	r3, [r3, #32]
  4042b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4042ba:	2b10      	cmp	r3, #16
  4042bc:	d002      	beq.n	4042c4 <SystemCoreClockUpdate+0x90>
  4042be:	2b20      	cmp	r3, #32
  4042c0:	d004      	beq.n	4042cc <SystemCoreClockUpdate+0x98>
  4042c2:	e006      	b.n	4042d2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4042c4:	4a1e      	ldr	r2, [pc, #120]	; (404340 <SystemCoreClockUpdate+0x10c>)
  4042c6:	4b1b      	ldr	r3, [pc, #108]	; (404334 <SystemCoreClockUpdate+0x100>)
  4042c8:	601a      	str	r2, [r3, #0]
					break;
  4042ca:	e002      	b.n	4042d2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4042cc:	4a1a      	ldr	r2, [pc, #104]	; (404338 <SystemCoreClockUpdate+0x104>)
  4042ce:	4b19      	ldr	r3, [pc, #100]	; (404334 <SystemCoreClockUpdate+0x100>)
  4042d0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4042d2:	4b16      	ldr	r3, [pc, #88]	; (40432c <SystemCoreClockUpdate+0xf8>)
  4042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4042d6:	f003 0303 	and.w	r3, r3, #3
  4042da:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4042dc:	4a13      	ldr	r2, [pc, #76]	; (40432c <SystemCoreClockUpdate+0xf8>)
  4042de:	bf07      	ittee	eq
  4042e0:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4042e2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4042e4:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4042e6:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4042e8:	4812      	ldr	r0, [pc, #72]	; (404334 <SystemCoreClockUpdate+0x100>)
  4042ea:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4042ee:	6803      	ldr	r3, [r0, #0]
  4042f0:	fb01 3303 	mla	r3, r1, r3, r3
  4042f4:	b2d2      	uxtb	r2, r2
  4042f6:	fbb3 f3f2 	udiv	r3, r3, r2
  4042fa:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4042fc:	4b0b      	ldr	r3, [pc, #44]	; (40432c <SystemCoreClockUpdate+0xf8>)
  4042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404300:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404304:	2b70      	cmp	r3, #112	; 0x70
  404306:	d107      	bne.n	404318 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  404308:	4a0a      	ldr	r2, [pc, #40]	; (404334 <SystemCoreClockUpdate+0x100>)
  40430a:	6813      	ldr	r3, [r2, #0]
  40430c:	490d      	ldr	r1, [pc, #52]	; (404344 <SystemCoreClockUpdate+0x110>)
  40430e:	fba1 1303 	umull	r1, r3, r1, r3
  404312:	085b      	lsrs	r3, r3, #1
  404314:	6013      	str	r3, [r2, #0]
  404316:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404318:	4b04      	ldr	r3, [pc, #16]	; (40432c <SystemCoreClockUpdate+0xf8>)
  40431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40431c:	4905      	ldr	r1, [pc, #20]	; (404334 <SystemCoreClockUpdate+0x100>)
  40431e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  404322:	680b      	ldr	r3, [r1, #0]
  404324:	40d3      	lsrs	r3, r2
  404326:	600b      	str	r3, [r1, #0]
  404328:	4770      	bx	lr
  40432a:	bf00      	nop
  40432c:	400e0400 	.word	0x400e0400
  404330:	400e1410 	.word	0x400e1410
  404334:	2000001c 	.word	0x2000001c
  404338:	00b71b00 	.word	0x00b71b00
  40433c:	003d0900 	.word	0x003d0900
  404340:	007a1200 	.word	0x007a1200
  404344:	aaaaaaab 	.word	0xaaaaaaab

00404348 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  404348:	4b1a      	ldr	r3, [pc, #104]	; (4043b4 <system_init_flash+0x6c>)
  40434a:	4298      	cmp	r0, r3
  40434c:	d807      	bhi.n	40435e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40434e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  404352:	4a19      	ldr	r2, [pc, #100]	; (4043b8 <system_init_flash+0x70>)
  404354:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404356:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40435a:	6013      	str	r3, [r2, #0]
  40435c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40435e:	4b17      	ldr	r3, [pc, #92]	; (4043bc <system_init_flash+0x74>)
  404360:	4298      	cmp	r0, r3
  404362:	d806      	bhi.n	404372 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404364:	4b16      	ldr	r3, [pc, #88]	; (4043c0 <system_init_flash+0x78>)
  404366:	4a14      	ldr	r2, [pc, #80]	; (4043b8 <system_init_flash+0x70>)
  404368:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40436a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40436e:	6013      	str	r3, [r2, #0]
  404370:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  404372:	4b14      	ldr	r3, [pc, #80]	; (4043c4 <system_init_flash+0x7c>)
  404374:	4298      	cmp	r0, r3
  404376:	d806      	bhi.n	404386 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404378:	4b13      	ldr	r3, [pc, #76]	; (4043c8 <system_init_flash+0x80>)
  40437a:	4a0f      	ldr	r2, [pc, #60]	; (4043b8 <system_init_flash+0x70>)
  40437c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40437e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  404382:	6013      	str	r3, [r2, #0]
  404384:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  404386:	4b11      	ldr	r3, [pc, #68]	; (4043cc <system_init_flash+0x84>)
  404388:	4298      	cmp	r0, r3
  40438a:	d806      	bhi.n	40439a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40438c:	4b10      	ldr	r3, [pc, #64]	; (4043d0 <system_init_flash+0x88>)
  40438e:	4a0a      	ldr	r2, [pc, #40]	; (4043b8 <system_init_flash+0x70>)
  404390:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404392:	f502 7200 	add.w	r2, r2, #512	; 0x200
  404396:	6013      	str	r3, [r2, #0]
  404398:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40439a:	4b0e      	ldr	r3, [pc, #56]	; (4043d4 <system_init_flash+0x8c>)
  40439c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40439e:	bf94      	ite	ls
  4043a0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4043a4:	4b0c      	ldrhi	r3, [pc, #48]	; (4043d8 <system_init_flash+0x90>)
  4043a6:	4a04      	ldr	r2, [pc, #16]	; (4043b8 <system_init_flash+0x70>)
  4043a8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4043aa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4043ae:	6013      	str	r3, [r2, #0]
  4043b0:	4770      	bx	lr
  4043b2:	bf00      	nop
  4043b4:	01312cff 	.word	0x01312cff
  4043b8:	400e0a00 	.word	0x400e0a00
  4043bc:	026259ff 	.word	0x026259ff
  4043c0:	04000100 	.word	0x04000100
  4043c4:	039386ff 	.word	0x039386ff
  4043c8:	04000200 	.word	0x04000200
  4043cc:	04c4b3ff 	.word	0x04c4b3ff
  4043d0:	04000300 	.word	0x04000300
  4043d4:	05f5e0ff 	.word	0x05f5e0ff
  4043d8:	04000500 	.word	0x04000500

004043dc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4043dc:	4b09      	ldr	r3, [pc, #36]	; (404404 <_sbrk+0x28>)
  4043de:	681b      	ldr	r3, [r3, #0]
  4043e0:	b913      	cbnz	r3, 4043e8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4043e2:	4a09      	ldr	r2, [pc, #36]	; (404408 <_sbrk+0x2c>)
  4043e4:	4b07      	ldr	r3, [pc, #28]	; (404404 <_sbrk+0x28>)
  4043e6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4043e8:	4b06      	ldr	r3, [pc, #24]	; (404404 <_sbrk+0x28>)
  4043ea:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4043ec:	181a      	adds	r2, r3, r0
  4043ee:	4907      	ldr	r1, [pc, #28]	; (40440c <_sbrk+0x30>)
  4043f0:	4291      	cmp	r1, r2
  4043f2:	db04      	blt.n	4043fe <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4043f4:	4610      	mov	r0, r2
  4043f6:	4a03      	ldr	r2, [pc, #12]	; (404404 <_sbrk+0x28>)
  4043f8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4043fa:	4618      	mov	r0, r3
  4043fc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4043fe:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  404402:	4770      	bx	lr
  404404:	20000bb0 	.word	0x20000bb0
  404408:	2000de20 	.word	0x2000de20
  40440c:	20027ffc 	.word	0x20027ffc

00404410 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404410:	f04f 30ff 	mov.w	r0, #4294967295
  404414:	4770      	bx	lr
  404416:	bf00      	nop

00404418 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40441c:	604b      	str	r3, [r1, #4]

	return 0;
}
  40441e:	2000      	movs	r0, #0
  404420:	4770      	bx	lr
  404422:	bf00      	nop

00404424 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404424:	2001      	movs	r0, #1
  404426:	4770      	bx	lr

00404428 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404428:	2000      	movs	r0, #0
  40442a:	4770      	bx	lr

0040442c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  40442c:	f100 0308 	add.w	r3, r0, #8
  404430:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  404432:	f04f 32ff 	mov.w	r2, #4294967295
  404436:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  404438:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  40443a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40443c:	2300      	movs	r3, #0
  40443e:	6003      	str	r3, [r0, #0]
  404440:	4770      	bx	lr
  404442:	bf00      	nop

00404444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  404444:	2300      	movs	r3, #0
  404446:	6103      	str	r3, [r0, #16]
  404448:	4770      	bx	lr
  40444a:	bf00      	nop

0040444c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40444c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40444e:	685a      	ldr	r2, [r3, #4]
  404450:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  404452:	6842      	ldr	r2, [r0, #4]
  404454:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404456:	685a      	ldr	r2, [r3, #4]
  404458:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  40445a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  40445c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40445e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  404460:	6803      	ldr	r3, [r0, #0]
  404462:	3301      	adds	r3, #1
  404464:	6003      	str	r3, [r0, #0]
  404466:	4770      	bx	lr

00404468 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  404468:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40446a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40446c:	f1b4 3fff 	cmp.w	r4, #4294967295
  404470:	d101      	bne.n	404476 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  404472:	6903      	ldr	r3, [r0, #16]
  404474:	e00a      	b.n	40448c <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  404476:	f100 0308 	add.w	r3, r0, #8
  40447a:	68c2      	ldr	r2, [r0, #12]
  40447c:	6812      	ldr	r2, [r2, #0]
  40447e:	4294      	cmp	r4, r2
  404480:	d304      	bcc.n	40448c <vListInsert+0x24>
  404482:	685b      	ldr	r3, [r3, #4]
  404484:	685a      	ldr	r2, [r3, #4]
  404486:	6812      	ldr	r2, [r2, #0]
  404488:	4294      	cmp	r4, r2
  40448a:	d2fa      	bcs.n	404482 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40448c:	685a      	ldr	r2, [r3, #4]
  40448e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404490:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  404492:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  404494:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  404496:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  404498:	6803      	ldr	r3, [r0, #0]
  40449a:	3301      	adds	r3, #1
  40449c:	6003      	str	r3, [r0, #0]
}
  40449e:	bc10      	pop	{r4}
  4044a0:	4770      	bx	lr
  4044a2:	bf00      	nop

004044a4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4044a4:	6843      	ldr	r3, [r0, #4]
  4044a6:	6882      	ldr	r2, [r0, #8]
  4044a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4044aa:	6883      	ldr	r3, [r0, #8]
  4044ac:	6842      	ldr	r2, [r0, #4]
  4044ae:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4044b0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4044b2:	685a      	ldr	r2, [r3, #4]
  4044b4:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4044b6:	bf04      	itt	eq
  4044b8:	6882      	ldreq	r2, [r0, #8]
  4044ba:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4044bc:	2200      	movs	r2, #0
  4044be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4044c0:	681a      	ldr	r2, [r3, #0]
  4044c2:	3a01      	subs	r2, #1
  4044c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4044c6:	6818      	ldr	r0, [r3, #0]
}
  4044c8:	4770      	bx	lr
  4044ca:	bf00      	nop

004044cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4044cc:	4803      	ldr	r0, [pc, #12]	; (4044dc <prvPortStartFirstTask+0x10>)
  4044ce:	6800      	ldr	r0, [r0, #0]
  4044d0:	6800      	ldr	r0, [r0, #0]
  4044d2:	f380 8808 	msr	MSP, r0
  4044d6:	b662      	cpsie	i
  4044d8:	df00      	svc	0
  4044da:	bf00      	nop
  4044dc:	e000ed08 	.word	0xe000ed08

004044e0 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4044e4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  4044e8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  4044ec:	2300      	movs	r3, #0
  4044ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  4044f2:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4044f6:	3840      	subs	r0, #64	; 0x40
  4044f8:	4770      	bx	lr
  4044fa:	bf00      	nop

004044fc <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  4044fc:	4b06      	ldr	r3, [pc, #24]	; (404518 <pxCurrentTCBConst2>)
  4044fe:	6819      	ldr	r1, [r3, #0]
  404500:	6808      	ldr	r0, [r1, #0]
  404502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404506:	f380 8809 	msr	PSP, r0
  40450a:	f04f 0000 	mov.w	r0, #0
  40450e:	f380 8811 	msr	BASEPRI, r0
  404512:	f04e 0e0d 	orr.w	lr, lr, #13
  404516:	4770      	bx	lr

00404518 <pxCurrentTCBConst2>:
  404518:	2000ac7c 	.word	0x2000ac7c

0040451c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404520:	4b01      	ldr	r3, [pc, #4]	; (404528 <vPortYieldFromISR+0xc>)
  404522:	601a      	str	r2, [r3, #0]
  404524:	4770      	bx	lr
  404526:	bf00      	nop
  404528:	e000ed04 	.word	0xe000ed04

0040452c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  40452c:	f3ef 8011 	mrs	r0, BASEPRI
  404530:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  404534:	f381 8811 	msr	BASEPRI, r1
  404538:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  40453a:	2000      	movs	r0, #0

0040453c <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  40453c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  40453e:	4b03      	ldr	r3, [pc, #12]	; (40454c <vPortEnterCritical+0x10>)
  404540:	4798      	blx	r3
	uxCriticalNesting++;
  404542:	4a03      	ldr	r2, [pc, #12]	; (404550 <vPortEnterCritical+0x14>)
  404544:	6813      	ldr	r3, [r2, #0]
  404546:	3301      	adds	r3, #1
  404548:	6013      	str	r3, [r2, #0]
  40454a:	bd08      	pop	{r3, pc}
  40454c:	0040452d 	.word	0x0040452d
  404550:	20000020 	.word	0x20000020

00404554 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  404554:	f380 8811 	msr	BASEPRI, r0
  404558:	4770      	bx	lr
  40455a:	bf00      	nop

0040455c <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40455c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  40455e:	4a04      	ldr	r2, [pc, #16]	; (404570 <vPortExitCritical+0x14>)
  404560:	6813      	ldr	r3, [r2, #0]
  404562:	3b01      	subs	r3, #1
  404564:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  404566:	b913      	cbnz	r3, 40456e <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
  404568:	2000      	movs	r0, #0
  40456a:	4b02      	ldr	r3, [pc, #8]	; (404574 <vPortExitCritical+0x18>)
  40456c:	4798      	blx	r3
  40456e:	bd08      	pop	{r3, pc}
  404570:	20000020 	.word	0x20000020
  404574:	00404555 	.word	0x00404555

00404578 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  404578:	f3ef 8009 	mrs	r0, PSP
  40457c:	4b0c      	ldr	r3, [pc, #48]	; (4045b0 <pxCurrentTCBConst>)
  40457e:	681a      	ldr	r2, [r3, #0]
  404580:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404584:	6010      	str	r0, [r2, #0]
  404586:	e92d 4008 	stmdb	sp!, {r3, lr}
  40458a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40458e:	f380 8811 	msr	BASEPRI, r0
  404592:	f000 fe93 	bl	4052bc <vTaskSwitchContext>
  404596:	f04f 0000 	mov.w	r0, #0
  40459a:	f380 8811 	msr	BASEPRI, r0
  40459e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4045a2:	6819      	ldr	r1, [r3, #0]
  4045a4:	6808      	ldr	r0, [r1, #0]
  4045a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4045aa:	f380 8809 	msr	PSP, r0
  4045ae:	4770      	bx	lr

004045b0 <pxCurrentTCBConst>:
  4045b0:	2000ac7c 	.word	0x2000ac7c

004045b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4045b4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4045ba:	4b05      	ldr	r3, [pc, #20]	; (4045d0 <SysTick_Handler+0x1c>)
  4045bc:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4045be:	4b05      	ldr	r3, [pc, #20]	; (4045d4 <SysTick_Handler+0x20>)
  4045c0:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4045c2:	4b05      	ldr	r3, [pc, #20]	; (4045d8 <SysTick_Handler+0x24>)
  4045c4:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4045c6:	2000      	movs	r0, #0
  4045c8:	4b04      	ldr	r3, [pc, #16]	; (4045dc <SysTick_Handler+0x28>)
  4045ca:	4798      	blx	r3
  4045cc:	bd08      	pop	{r3, pc}
  4045ce:	bf00      	nop
  4045d0:	e000ed04 	.word	0xe000ed04
  4045d4:	0040452d 	.word	0x0040452d
  4045d8:	00404fcd 	.word	0x00404fcd
  4045dc:	00404555 	.word	0x00404555

004045e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  4045e0:	4a03      	ldr	r2, [pc, #12]	; (4045f0 <vPortSetupTimerInterrupt+0x10>)
  4045e2:	4b04      	ldr	r3, [pc, #16]	; (4045f4 <vPortSetupTimerInterrupt+0x14>)
  4045e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  4045e6:	2207      	movs	r2, #7
  4045e8:	3b04      	subs	r3, #4
  4045ea:	601a      	str	r2, [r3, #0]
  4045ec:	4770      	bx	lr
  4045ee:	bf00      	nop
  4045f0:	0001d4bf 	.word	0x0001d4bf
  4045f4:	e000e014 	.word	0xe000e014

004045f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4045f8:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4045fa:	4b09      	ldr	r3, [pc, #36]	; (404620 <xPortStartScheduler+0x28>)
  4045fc:	681a      	ldr	r2, [r3, #0]
  4045fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  404602:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  404604:	681a      	ldr	r2, [r3, #0]
  404606:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40460a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  40460c:	4b05      	ldr	r3, [pc, #20]	; (404624 <xPortStartScheduler+0x2c>)
  40460e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  404610:	2400      	movs	r4, #0
  404612:	4b05      	ldr	r3, [pc, #20]	; (404628 <xPortStartScheduler+0x30>)
  404614:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  404616:	4b05      	ldr	r3, [pc, #20]	; (40462c <xPortStartScheduler+0x34>)
  404618:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  40461a:	4620      	mov	r0, r4
  40461c:	bd10      	pop	{r4, pc}
  40461e:	bf00      	nop
  404620:	e000ed20 	.word	0xe000ed20
  404624:	004045e1 	.word	0x004045e1
  404628:	20000020 	.word	0x20000020
  40462c:	004044cd 	.word	0x004044cd

00404630 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  404630:	4a12      	ldr	r2, [pc, #72]	; (40467c <prvInsertBlockIntoFreeList+0x4c>)
  404632:	e000      	b.n	404636 <prvInsertBlockIntoFreeList+0x6>
  404634:	461a      	mov	r2, r3
  404636:	6813      	ldr	r3, [r2, #0]
  404638:	4283      	cmp	r3, r0
  40463a:	d3fb      	bcc.n	404634 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  40463c:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  40463e:	6851      	ldr	r1, [r2, #4]
  404640:	1854      	adds	r4, r2, r1
  404642:	42a0      	cmp	r0, r4
  404644:	d103      	bne.n	40464e <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  404646:	6840      	ldr	r0, [r0, #4]
  404648:	4401      	add	r1, r0
  40464a:	6051      	str	r1, [r2, #4]
  40464c:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  40464e:	6841      	ldr	r1, [r0, #4]
  404650:	1844      	adds	r4, r0, r1
  404652:	42a3      	cmp	r3, r4
  404654:	d10c      	bne.n	404670 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  404656:	4b0a      	ldr	r3, [pc, #40]	; (404680 <prvInsertBlockIntoFreeList+0x50>)
  404658:	681b      	ldr	r3, [r3, #0]
  40465a:	429c      	cmp	r4, r3
  40465c:	d006      	beq.n	40466c <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40465e:	6863      	ldr	r3, [r4, #4]
  404660:	4419      	add	r1, r3
  404662:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  404664:	6813      	ldr	r3, [r2, #0]
  404666:	681b      	ldr	r3, [r3, #0]
  404668:	6003      	str	r3, [r0, #0]
  40466a:	e002      	b.n	404672 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40466c:	6004      	str	r4, [r0, #0]
  40466e:	e000      	b.n	404672 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  404670:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  404672:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  404674:	bf18      	it	ne
  404676:	6010      	strne	r0, [r2, #0]
	}
}
  404678:	bc10      	pop	{r4}
  40467a:	4770      	bx	lr
  40467c:	2000abbc 	.word	0x2000abbc
  404680:	2000abb8 	.word	0x2000abb8

00404684 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  404684:	b538      	push	{r3, r4, r5, lr}
  404686:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  404688:	4b2b      	ldr	r3, [pc, #172]	; (404738 <pvPortMalloc+0xb4>)
  40468a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  40468c:	4b2b      	ldr	r3, [pc, #172]	; (40473c <pvPortMalloc+0xb8>)
  40468e:	681b      	ldr	r3, [r3, #0]
  404690:	b99b      	cbnz	r3, 4046ba <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  404692:	4a2b      	ldr	r2, [pc, #172]	; (404740 <pvPortMalloc+0xbc>)
  404694:	4b2b      	ldr	r3, [pc, #172]	; (404744 <pvPortMalloc+0xc0>)
  404696:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  404698:	2100      	movs	r1, #0
  40469a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  40469c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
  4046a0:	1898      	adds	r0, r3, r2
  4046a2:	4d26      	ldr	r5, [pc, #152]	; (40473c <pvPortMalloc+0xb8>)
  4046a4:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  4046a6:	f649 75f4 	movw	r5, #40948	; 0x9ff4
  4046aa:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  4046ac:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4046ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4046b0:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  4046b2:	4a25      	ldr	r2, [pc, #148]	; (404748 <pvPortMalloc+0xc4>)
  4046b4:	6813      	ldr	r3, [r2, #0]
  4046b6:	3b10      	subs	r3, #16
  4046b8:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4046ba:	2c00      	cmp	r4, #0
  4046bc:	d037      	beq.n	40472e <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4046be:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4046c2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4046c6:	bf1c      	itt	ne
  4046c8:	f022 0207 	bicne.w	r2, r2, #7
  4046cc:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4046ce:	1e51      	subs	r1, r2, #1
  4046d0:	f649 73fe 	movw	r3, #40958	; 0x9ffe
  4046d4:	4299      	cmp	r1, r3
  4046d6:	d827      	bhi.n	404728 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  4046d8:	4919      	ldr	r1, [pc, #100]	; (404740 <pvPortMalloc+0xbc>)
  4046da:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4046dc:	e001      	b.n	4046e2 <pvPortMalloc+0x5e>
  4046de:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  4046e0:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4046e2:	6863      	ldr	r3, [r4, #4]
  4046e4:	429a      	cmp	r2, r3
  4046e6:	d902      	bls.n	4046ee <pvPortMalloc+0x6a>
  4046e8:	6823      	ldr	r3, [r4, #0]
  4046ea:	2b00      	cmp	r3, #0
  4046ec:	d1f7      	bne.n	4046de <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4046ee:	4b13      	ldr	r3, [pc, #76]	; (40473c <pvPortMalloc+0xb8>)
  4046f0:	681b      	ldr	r3, [r3, #0]
  4046f2:	429c      	cmp	r4, r3
  4046f4:	d018      	beq.n	404728 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4046f6:	680d      	ldr	r5, [r1, #0]
  4046f8:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4046fa:	6823      	ldr	r3, [r4, #0]
  4046fc:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4046fe:	6863      	ldr	r3, [r4, #4]
  404700:	1a9b      	subs	r3, r3, r2
  404702:	2b20      	cmp	r3, #32
  404704:	d904      	bls.n	404710 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  404706:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  404708:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  40470a:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40470c:	4b0f      	ldr	r3, [pc, #60]	; (40474c <pvPortMalloc+0xc8>)
  40470e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  404710:	4a0d      	ldr	r2, [pc, #52]	; (404748 <pvPortMalloc+0xc4>)
  404712:	6813      	ldr	r3, [r2, #0]
  404714:	6861      	ldr	r1, [r4, #4]
  404716:	1a5b      	subs	r3, r3, r1
  404718:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  40471a:	4b0d      	ldr	r3, [pc, #52]	; (404750 <pvPortMalloc+0xcc>)
  40471c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40471e:	b94d      	cbnz	r5, 404734 <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
  404720:	4b0c      	ldr	r3, [pc, #48]	; (404754 <pvPortMalloc+0xd0>)
  404722:	4798      	blx	r3
  404724:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
  404726:	e005      	b.n	404734 <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  404728:	4b09      	ldr	r3, [pc, #36]	; (404750 <pvPortMalloc+0xcc>)
  40472a:	4798      	blx	r3
  40472c:	e7f8      	b.n	404720 <pvPortMalloc+0x9c>
  40472e:	4b08      	ldr	r3, [pc, #32]	; (404750 <pvPortMalloc+0xcc>)
  404730:	4798      	blx	r3
  404732:	e7f5      	b.n	404720 <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
  404734:	4628      	mov	r0, r5
  404736:	bd38      	pop	{r3, r4, r5, pc}
  404738:	00404f9d 	.word	0x00404f9d
  40473c:	2000abb8 	.word	0x2000abb8
  404740:	2000abbc 	.word	0x2000abbc
  404744:	20000bb8 	.word	0x20000bb8
  404748:	20000024 	.word	0x20000024
  40474c:	00404631 	.word	0x00404631
  404750:	004050ed 	.word	0x004050ed
  404754:	00405bc1 	.word	0x00405bc1

00404758 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  404758:	b180      	cbz	r0, 40477c <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40475a:	b510      	push	{r4, lr}
  40475c:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  40475e:	4b08      	ldr	r3, [pc, #32]	; (404780 <vPortFree+0x28>)
  404760:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  404762:	4a08      	ldr	r2, [pc, #32]	; (404784 <vPortFree+0x2c>)
  404764:	f854 1c0c 	ldr.w	r1, [r4, #-12]
  404768:	6813      	ldr	r3, [r2, #0]
  40476a:	440b      	add	r3, r1
  40476c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40476e:	f1a4 0010 	sub.w	r0, r4, #16
  404772:	4b05      	ldr	r3, [pc, #20]	; (404788 <vPortFree+0x30>)
  404774:	4798      	blx	r3
		}
		xTaskResumeAll();
  404776:	4b05      	ldr	r3, [pc, #20]	; (40478c <vPortFree+0x34>)
  404778:	4798      	blx	r3
  40477a:	bd10      	pop	{r4, pc}
  40477c:	4770      	bx	lr
  40477e:	bf00      	nop
  404780:	00404f9d 	.word	0x00404f9d
  404784:	20000024 	.word	0x20000024
  404788:	00404631 	.word	0x00404631
  40478c:	004050ed 	.word	0x004050ed

00404790 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  404790:	b510      	push	{r4, lr}
  404792:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  404794:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404796:	b93b      	cbnz	r3, 4047a8 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  404798:	6803      	ldr	r3, [r0, #0]
  40479a:	bb1b      	cbnz	r3, 4047e4 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40479c:	6840      	ldr	r0, [r0, #4]
  40479e:	4b13      	ldr	r3, [pc, #76]	; (4047ec <prvCopyDataToQueue+0x5c>)
  4047a0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4047a2:	2300      	movs	r3, #0
  4047a4:	6063      	str	r3, [r4, #4]
  4047a6:	e01d      	b.n	4047e4 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  4047a8:	b96a      	cbnz	r2, 4047c6 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4047aa:	461a      	mov	r2, r3
  4047ac:	6880      	ldr	r0, [r0, #8]
  4047ae:	4b10      	ldr	r3, [pc, #64]	; (4047f0 <prvCopyDataToQueue+0x60>)
  4047b0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4047b2:	68a2      	ldr	r2, [r4, #8]
  4047b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4047b6:	4413      	add	r3, r2
  4047b8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  4047ba:	6862      	ldr	r2, [r4, #4]
  4047bc:	4293      	cmp	r3, r2
  4047be:	d311      	bcc.n	4047e4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4047c0:	6823      	ldr	r3, [r4, #0]
  4047c2:	60a3      	str	r3, [r4, #8]
  4047c4:	e00e      	b.n	4047e4 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4047c6:	461a      	mov	r2, r3
  4047c8:	68c0      	ldr	r0, [r0, #12]
  4047ca:	4b09      	ldr	r3, [pc, #36]	; (4047f0 <prvCopyDataToQueue+0x60>)
  4047cc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  4047ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4047d0:	425b      	negs	r3, r3
  4047d2:	68e2      	ldr	r2, [r4, #12]
  4047d4:	441a      	add	r2, r3
  4047d6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4047d8:	6821      	ldr	r1, [r4, #0]
  4047da:	428a      	cmp	r2, r1
  4047dc:	d202      	bcs.n	4047e4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4047de:	6862      	ldr	r2, [r4, #4]
  4047e0:	4413      	add	r3, r2
  4047e2:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4047e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4047e6:	3301      	adds	r3, #1
  4047e8:	63a3      	str	r3, [r4, #56]	; 0x38
  4047ea:	bd10      	pop	{r4, pc}
  4047ec:	004055ed 	.word	0x004055ed
  4047f0:	00405e51 	.word	0x00405e51

004047f4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4047f4:	b538      	push	{r3, r4, r5, lr}
  4047f6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4047f8:	6800      	ldr	r0, [r0, #0]
  4047fa:	b158      	cbz	r0, 404814 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4047fe:	68dc      	ldr	r4, [r3, #12]
  404800:	4414      	add	r4, r2
  404802:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  404804:	685d      	ldr	r5, [r3, #4]
  404806:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  404808:	bf28      	it	cs
  40480a:	60d8      	strcs	r0, [r3, #12]
  40480c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  40480e:	68d9      	ldr	r1, [r3, #12]
  404810:	4b01      	ldr	r3, [pc, #4]	; (404818 <prvCopyDataFromQueue+0x24>)
  404812:	4798      	blx	r3
  404814:	bd38      	pop	{r3, r4, r5, pc}
  404816:	bf00      	nop
  404818:	00405e51 	.word	0x00405e51

0040481c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  40481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40481e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  404820:	4b1e      	ldr	r3, [pc, #120]	; (40489c <prvUnlockQueue+0x80>)
  404822:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  404824:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404826:	2b00      	cmp	r3, #0
  404828:	dd13      	ble.n	404852 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40482a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40482c:	b91b      	cbnz	r3, 404836 <prvUnlockQueue+0x1a>
  40482e:	e010      	b.n	404852 <prvUnlockQueue+0x36>
  404830:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404832:	b923      	cbnz	r3, 40483e <prvUnlockQueue+0x22>
  404834:	e00d      	b.n	404852 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404836:	f104 0624 	add.w	r6, r4, #36	; 0x24
  40483a:	4d19      	ldr	r5, [pc, #100]	; (4048a0 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40483c:	4f19      	ldr	r7, [pc, #100]	; (4048a4 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40483e:	4630      	mov	r0, r6
  404840:	47a8      	blx	r5
  404842:	b100      	cbz	r0, 404846 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  404844:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  404846:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404848:	3b01      	subs	r3, #1
  40484a:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40484c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40484e:	2b00      	cmp	r3, #0
  404850:	dcee      	bgt.n	404830 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  404852:	f04f 33ff 	mov.w	r3, #4294967295
  404856:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  404858:	4b13      	ldr	r3, [pc, #76]	; (4048a8 <prvUnlockQueue+0x8c>)
  40485a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40485c:	4b0f      	ldr	r3, [pc, #60]	; (40489c <prvUnlockQueue+0x80>)
  40485e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  404860:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404862:	2b00      	cmp	r3, #0
  404864:	dd13      	ble.n	40488e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404866:	6923      	ldr	r3, [r4, #16]
  404868:	b91b      	cbnz	r3, 404872 <prvUnlockQueue+0x56>
  40486a:	e010      	b.n	40488e <prvUnlockQueue+0x72>
  40486c:	6923      	ldr	r3, [r4, #16]
  40486e:	b923      	cbnz	r3, 40487a <prvUnlockQueue+0x5e>
  404870:	e00d      	b.n	40488e <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  404872:	f104 0610 	add.w	r6, r4, #16
  404876:	4d0a      	ldr	r5, [pc, #40]	; (4048a0 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  404878:	4f0a      	ldr	r7, [pc, #40]	; (4048a4 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40487a:	4630      	mov	r0, r6
  40487c:	47a8      	blx	r5
  40487e:	b100      	cbz	r0, 404882 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  404880:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  404882:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404884:	3b01      	subs	r3, #1
  404886:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  404888:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40488a:	2b00      	cmp	r3, #0
  40488c:	dcee      	bgt.n	40486c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40488e:	f04f 33ff 	mov.w	r3, #4294967295
  404892:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  404894:	4b04      	ldr	r3, [pc, #16]	; (4048a8 <prvUnlockQueue+0x8c>)
  404896:	4798      	blx	r3
  404898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40489a:	bf00      	nop
  40489c:	0040453d 	.word	0x0040453d
  4048a0:	00405405 	.word	0x00405405
  4048a4:	00405535 	.word	0x00405535
  4048a8:	0040455d 	.word	0x0040455d

004048ac <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4048ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4048ae:	b918      	cbnz	r0, 4048b8 <xQueueGenericReset+0xc>
  4048b0:	4b17      	ldr	r3, [pc, #92]	; (404910 <xQueueGenericReset+0x64>)
  4048b2:	4798      	blx	r3
  4048b4:	bf00      	nop
  4048b6:	e7fd      	b.n	4048b4 <xQueueGenericReset+0x8>
  4048b8:	460d      	mov	r5, r1
  4048ba:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  4048bc:	4b15      	ldr	r3, [pc, #84]	; (404914 <xQueueGenericReset+0x68>)
  4048be:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4048c0:	6822      	ldr	r2, [r4, #0]
  4048c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4048c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4048c6:	fb03 f301 	mul.w	r3, r3, r1
  4048ca:	18d0      	adds	r0, r2, r3
  4048cc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  4048ce:	2000      	movs	r0, #0
  4048d0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4048d2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  4048d4:	1a5b      	subs	r3, r3, r1
  4048d6:	4413      	add	r3, r2
  4048d8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4048da:	f04f 33ff 	mov.w	r3, #4294967295
  4048de:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4048e0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4048e2:	b955      	cbnz	r5, 4048fa <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4048e4:	6923      	ldr	r3, [r4, #16]
  4048e6:	b17b      	cbz	r3, 404908 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4048e8:	f104 0010 	add.w	r0, r4, #16
  4048ec:	4b0a      	ldr	r3, [pc, #40]	; (404918 <xQueueGenericReset+0x6c>)
  4048ee:	4798      	blx	r3
  4048f0:	2801      	cmp	r0, #1
  4048f2:	d109      	bne.n	404908 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
  4048f4:	4b09      	ldr	r3, [pc, #36]	; (40491c <xQueueGenericReset+0x70>)
  4048f6:	4798      	blx	r3
  4048f8:	e006      	b.n	404908 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4048fa:	f104 0010 	add.w	r0, r4, #16
  4048fe:	4d08      	ldr	r5, [pc, #32]	; (404920 <xQueueGenericReset+0x74>)
  404900:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  404902:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404906:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  404908:	4b06      	ldr	r3, [pc, #24]	; (404924 <xQueueGenericReset+0x78>)
  40490a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  40490c:	2001      	movs	r0, #1
  40490e:	bd38      	pop	{r3, r4, r5, pc}
  404910:	0040452d 	.word	0x0040452d
  404914:	0040453d 	.word	0x0040453d
  404918:	00405405 	.word	0x00405405
  40491c:	0040451d 	.word	0x0040451d
  404920:	0040442d 	.word	0x0040442d
  404924:	0040455d 	.word	0x0040455d

00404928 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  404928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40492a:	b1a0      	cbz	r0, 404956 <xQueueGenericCreate+0x2e>
  40492c:	460d      	mov	r5, r1
  40492e:	4617      	mov	r7, r2
  404930:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  404932:	2050      	movs	r0, #80	; 0x50
  404934:	4b0e      	ldr	r3, [pc, #56]	; (404970 <xQueueGenericCreate+0x48>)
  404936:	4798      	blx	r3
		if( pxNewQueue != NULL )
  404938:	4604      	mov	r4, r0
  40493a:	b160      	cbz	r0, 404956 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  40493c:	fb05 f006 	mul.w	r0, r5, r6
  404940:	3001      	adds	r0, #1
  404942:	4b0b      	ldr	r3, [pc, #44]	; (404970 <xQueueGenericCreate+0x48>)
  404944:	4798      	blx	r3
  404946:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  404948:	b940      	cbnz	r0, 40495c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  40494a:	4620      	mov	r0, r4
  40494c:	4b09      	ldr	r3, [pc, #36]	; (404974 <xQueueGenericCreate+0x4c>)
  40494e:	4798      	blx	r3
  404950:	e001      	b.n	404956 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
  404952:	bf00      	nop
  404954:	e7fd      	b.n	404952 <xQueueGenericCreate+0x2a>
  404956:	4b08      	ldr	r3, [pc, #32]	; (404978 <xQueueGenericCreate+0x50>)
  404958:	4798      	blx	r3
  40495a:	e7fa      	b.n	404952 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  40495c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  40495e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  404960:	2101      	movs	r1, #1
  404962:	4620      	mov	r0, r4
  404964:	4b05      	ldr	r3, [pc, #20]	; (40497c <xQueueGenericCreate+0x54>)
  404966:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  404968:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
  40496c:	4620      	mov	r0, r4
  40496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404970:	00404685 	.word	0x00404685
  404974:	00404759 	.word	0x00404759
  404978:	0040452d 	.word	0x0040452d
  40497c:	004048ad 	.word	0x004048ad

00404980 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  404980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404984:	b085      	sub	sp, #20
  404986:	9201      	str	r2, [sp, #4]
  404988:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40498a:	b918      	cbnz	r0, 404994 <xQueueGenericSend+0x14>
  40498c:	4b38      	ldr	r3, [pc, #224]	; (404a70 <xQueueGenericSend+0xf0>)
  40498e:	4798      	blx	r3
  404990:	bf00      	nop
  404992:	e7fd      	b.n	404990 <xQueueGenericSend+0x10>
  404994:	468a      	mov	sl, r1
  404996:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  404998:	b929      	cbnz	r1, 4049a6 <xQueueGenericSend+0x26>
  40499a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40499c:	b12b      	cbz	r3, 4049aa <xQueueGenericSend+0x2a>
  40499e:	4b34      	ldr	r3, [pc, #208]	; (404a70 <xQueueGenericSend+0xf0>)
  4049a0:	4798      	blx	r3
  4049a2:	bf00      	nop
  4049a4:	e7fd      	b.n	4049a2 <xQueueGenericSend+0x22>
  4049a6:	2700      	movs	r7, #0
  4049a8:	e000      	b.n	4049ac <xQueueGenericSend+0x2c>
  4049aa:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4049ac:	4e31      	ldr	r6, [pc, #196]	; (404a74 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4049ae:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 404a9c <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  4049b2:	4d31      	ldr	r5, [pc, #196]	; (404a78 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4049b4:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4049b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4049b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4049ba:	429a      	cmp	r2, r3
  4049bc:	d212      	bcs.n	4049e4 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4049be:	9a00      	ldr	r2, [sp, #0]
  4049c0:	4651      	mov	r1, sl
  4049c2:	4620      	mov	r0, r4
  4049c4:	4b2d      	ldr	r3, [pc, #180]	; (404a7c <xQueueGenericSend+0xfc>)
  4049c6:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4049c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4049ca:	b13b      	cbz	r3, 4049dc <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4049cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4049d0:	4b2b      	ldr	r3, [pc, #172]	; (404a80 <xQueueGenericSend+0x100>)
  4049d2:	4798      	blx	r3
  4049d4:	2801      	cmp	r0, #1
  4049d6:	d101      	bne.n	4049dc <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  4049d8:	4b2a      	ldr	r3, [pc, #168]	; (404a84 <xQueueGenericSend+0x104>)
  4049da:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4049dc:	4b26      	ldr	r3, [pc, #152]	; (404a78 <xQueueGenericSend+0xf8>)
  4049de:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4049e0:	2001      	movs	r0, #1
  4049e2:	e042      	b.n	404a6a <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4049e4:	9b01      	ldr	r3, [sp, #4]
  4049e6:	b91b      	cbnz	r3, 4049f0 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4049e8:	4b23      	ldr	r3, [pc, #140]	; (404a78 <xQueueGenericSend+0xf8>)
  4049ea:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4049ec:	2000      	movs	r0, #0
  4049ee:	e03c      	b.n	404a6a <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
  4049f0:	b917      	cbnz	r7, 4049f8 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4049f2:	a802      	add	r0, sp, #8
  4049f4:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  4049f6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4049f8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4049fa:	4b23      	ldr	r3, [pc, #140]	; (404a88 <xQueueGenericSend+0x108>)
  4049fc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4049fe:	47b0      	blx	r6
  404a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404a02:	f1b3 3fff 	cmp.w	r3, #4294967295
  404a06:	bf04      	itt	eq
  404a08:	2300      	moveq	r3, #0
  404a0a:	6463      	streq	r3, [r4, #68]	; 0x44
  404a0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404a12:	bf04      	itt	eq
  404a14:	2300      	moveq	r3, #0
  404a16:	64a3      	streq	r3, [r4, #72]	; 0x48
  404a18:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  404a1a:	a901      	add	r1, sp, #4
  404a1c:	a802      	add	r0, sp, #8
  404a1e:	4b1b      	ldr	r3, [pc, #108]	; (404a8c <xQueueGenericSend+0x10c>)
  404a20:	4798      	blx	r3
  404a22:	b9e0      	cbnz	r0, 404a5e <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  404a24:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  404a26:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  404a2a:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  404a2e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  404a30:	45c1      	cmp	r9, r8
  404a32:	d10e      	bne.n	404a52 <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  404a34:	9901      	ldr	r1, [sp, #4]
  404a36:	f104 0010 	add.w	r0, r4, #16
  404a3a:	4b15      	ldr	r3, [pc, #84]	; (404a90 <xQueueGenericSend+0x110>)
  404a3c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  404a3e:	4620      	mov	r0, r4
  404a40:	4b14      	ldr	r3, [pc, #80]	; (404a94 <xQueueGenericSend+0x114>)
  404a42:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  404a44:	4b14      	ldr	r3, [pc, #80]	; (404a98 <xQueueGenericSend+0x118>)
  404a46:	4798      	blx	r3
  404a48:	2800      	cmp	r0, #0
  404a4a:	d1b3      	bne.n	4049b4 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
  404a4c:	4b0d      	ldr	r3, [pc, #52]	; (404a84 <xQueueGenericSend+0x104>)
  404a4e:	4798      	blx	r3
  404a50:	e7b0      	b.n	4049b4 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  404a52:	4620      	mov	r0, r4
  404a54:	4b0f      	ldr	r3, [pc, #60]	; (404a94 <xQueueGenericSend+0x114>)
  404a56:	4798      	blx	r3
				( void ) xTaskResumeAll();
  404a58:	4b0f      	ldr	r3, [pc, #60]	; (404a98 <xQueueGenericSend+0x118>)
  404a5a:	4798      	blx	r3
  404a5c:	e7aa      	b.n	4049b4 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  404a5e:	4620      	mov	r0, r4
  404a60:	4b0c      	ldr	r3, [pc, #48]	; (404a94 <xQueueGenericSend+0x114>)
  404a62:	4798      	blx	r3
			( void ) xTaskResumeAll();
  404a64:	4b0c      	ldr	r3, [pc, #48]	; (404a98 <xQueueGenericSend+0x118>)
  404a66:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  404a68:	2000      	movs	r0, #0
		}
	}
}
  404a6a:	b005      	add	sp, #20
  404a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a70:	0040452d 	.word	0x0040452d
  404a74:	0040453d 	.word	0x0040453d
  404a78:	0040455d 	.word	0x0040455d
  404a7c:	00404791 	.word	0x00404791
  404a80:	00405405 	.word	0x00405405
  404a84:	0040451d 	.word	0x0040451d
  404a88:	00404f9d 	.word	0x00404f9d
  404a8c:	004054b1 	.word	0x004054b1
  404a90:	00405361 	.word	0x00405361
  404a94:	0040481d 	.word	0x0040481d
  404a98:	004050ed 	.word	0x004050ed
  404a9c:	00405489 	.word	0x00405489

00404aa0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  404aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  404aa4:	b918      	cbnz	r0, 404aae <xQueueGenericSendFromISR+0xe>
  404aa6:	4b1e      	ldr	r3, [pc, #120]	; (404b20 <xQueueGenericSendFromISR+0x80>)
  404aa8:	4798      	blx	r3
  404aaa:	bf00      	nop
  404aac:	e7fd      	b.n	404aaa <xQueueGenericSendFromISR+0xa>
  404aae:	460e      	mov	r6, r1
  404ab0:	4615      	mov	r5, r2
  404ab2:	4698      	mov	r8, r3
  404ab4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  404ab6:	b929      	cbnz	r1, 404ac4 <xQueueGenericSendFromISR+0x24>
  404ab8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404aba:	b11b      	cbz	r3, 404ac4 <xQueueGenericSendFromISR+0x24>
  404abc:	4b18      	ldr	r3, [pc, #96]	; (404b20 <xQueueGenericSendFromISR+0x80>)
  404abe:	4798      	blx	r3
  404ac0:	bf00      	nop
  404ac2:	e7fd      	b.n	404ac0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  404ac4:	4b16      	ldr	r3, [pc, #88]	; (404b20 <xQueueGenericSendFromISR+0x80>)
  404ac6:	4798      	blx	r3
  404ac8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  404aca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404acc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404ace:	429a      	cmp	r2, r3
  404ad0:	d218      	bcs.n	404b04 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  404ad2:	4642      	mov	r2, r8
  404ad4:	4631      	mov	r1, r6
  404ad6:	4620      	mov	r0, r4
  404ad8:	4b12      	ldr	r3, [pc, #72]	; (404b24 <xQueueGenericSendFromISR+0x84>)
  404ada:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  404adc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404ade:	f1b3 3fff 	cmp.w	r3, #4294967295
  404ae2:	d10a      	bne.n	404afa <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404ae6:	b17b      	cbz	r3, 404b08 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404aec:	4b0e      	ldr	r3, [pc, #56]	; (404b28 <xQueueGenericSendFromISR+0x88>)
  404aee:	4798      	blx	r3
  404af0:	b160      	cbz	r0, 404b0c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  404af2:	b16d      	cbz	r5, 404b10 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  404af4:	2401      	movs	r4, #1
  404af6:	602c      	str	r4, [r5, #0]
  404af8:	e00b      	b.n	404b12 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  404afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404afc:	3301      	adds	r3, #1
  404afe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  404b00:	2401      	movs	r4, #1
  404b02:	e006      	b.n	404b12 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  404b04:	2400      	movs	r4, #0
  404b06:	e004      	b.n	404b12 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  404b08:	2401      	movs	r4, #1
  404b0a:	e002      	b.n	404b12 <xQueueGenericSendFromISR+0x72>
  404b0c:	2401      	movs	r4, #1
  404b0e:	e000      	b.n	404b12 <xQueueGenericSendFromISR+0x72>
  404b10:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  404b12:	4638      	mov	r0, r7
  404b14:	4b05      	ldr	r3, [pc, #20]	; (404b2c <xQueueGenericSendFromISR+0x8c>)
  404b16:	4798      	blx	r3

	return xReturn;
}
  404b18:	4620      	mov	r0, r4
  404b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b1e:	bf00      	nop
  404b20:	0040452d 	.word	0x0040452d
  404b24:	00404791 	.word	0x00404791
  404b28:	00405405 	.word	0x00405405
  404b2c:	00404555 	.word	0x00404555

00404b30 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  404b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b34:	b085      	sub	sp, #20
  404b36:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  404b38:	b918      	cbnz	r0, 404b42 <xQueueGenericReceive+0x12>
  404b3a:	4b46      	ldr	r3, [pc, #280]	; (404c54 <xQueueGenericReceive+0x124>)
  404b3c:	4798      	blx	r3
  404b3e:	bf00      	nop
  404b40:	e7fd      	b.n	404b3e <xQueueGenericReceive+0xe>
  404b42:	4689      	mov	r9, r1
  404b44:	469a      	mov	sl, r3
  404b46:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  404b48:	b929      	cbnz	r1, 404b56 <xQueueGenericReceive+0x26>
  404b4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404b4c:	b12b      	cbz	r3, 404b5a <xQueueGenericReceive+0x2a>
  404b4e:	4b41      	ldr	r3, [pc, #260]	; (404c54 <xQueueGenericReceive+0x124>)
  404b50:	4798      	blx	r3
  404b52:	bf00      	nop
  404b54:	e7fd      	b.n	404b52 <xQueueGenericReceive+0x22>
  404b56:	2700      	movs	r7, #0
  404b58:	e000      	b.n	404b5c <xQueueGenericReceive+0x2c>
  404b5a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  404b5c:	4e3e      	ldr	r6, [pc, #248]	; (404c58 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  404b5e:	f8df b128 	ldr.w	fp, [pc, #296]	; 404c88 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  404b62:	4d3e      	ldr	r5, [pc, #248]	; (404c5c <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  404b64:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  404b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404b68:	b343      	cbz	r3, 404bbc <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  404b6a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  404b6c:	4649      	mov	r1, r9
  404b6e:	4620      	mov	r0, r4
  404b70:	4b3b      	ldr	r3, [pc, #236]	; (404c60 <xQueueGenericReceive+0x130>)
  404b72:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  404b74:	f1ba 0f00 	cmp.w	sl, #0
  404b78:	d112      	bne.n	404ba0 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  404b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404b7c:	3b01      	subs	r3, #1
  404b7e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  404b80:	6823      	ldr	r3, [r4, #0]
  404b82:	b913      	cbnz	r3, 404b8a <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  404b84:	4b37      	ldr	r3, [pc, #220]	; (404c64 <xQueueGenericReceive+0x134>)
  404b86:	4798      	blx	r3
  404b88:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404b8a:	6923      	ldr	r3, [r4, #16]
  404b8c:	b193      	cbz	r3, 404bb4 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  404b8e:	f104 0010 	add.w	r0, r4, #16
  404b92:	4b35      	ldr	r3, [pc, #212]	; (404c68 <xQueueGenericReceive+0x138>)
  404b94:	4798      	blx	r3
  404b96:	2801      	cmp	r0, #1
  404b98:	d10c      	bne.n	404bb4 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
  404b9a:	4b34      	ldr	r3, [pc, #208]	; (404c6c <xQueueGenericReceive+0x13c>)
  404b9c:	4798      	blx	r3
  404b9e:	e009      	b.n	404bb4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  404ba0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404ba4:	b133      	cbz	r3, 404bb4 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404ba6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404baa:	4b2f      	ldr	r3, [pc, #188]	; (404c68 <xQueueGenericReceive+0x138>)
  404bac:	4798      	blx	r3
  404bae:	b108      	cbz	r0, 404bb4 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  404bb0:	4b2e      	ldr	r3, [pc, #184]	; (404c6c <xQueueGenericReceive+0x13c>)
  404bb2:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  404bb4:	4b29      	ldr	r3, [pc, #164]	; (404c5c <xQueueGenericReceive+0x12c>)
  404bb6:	4798      	blx	r3
				return pdPASS;
  404bb8:	2001      	movs	r0, #1
  404bba:	e048      	b.n	404c4e <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  404bbc:	9b01      	ldr	r3, [sp, #4]
  404bbe:	b91b      	cbnz	r3, 404bc8 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  404bc0:	4b26      	ldr	r3, [pc, #152]	; (404c5c <xQueueGenericReceive+0x12c>)
  404bc2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  404bc4:	2000      	movs	r0, #0
  404bc6:	e042      	b.n	404c4e <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
  404bc8:	b917      	cbnz	r7, 404bd0 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  404bca:	a802      	add	r0, sp, #8
  404bcc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  404bce:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  404bd0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  404bd2:	4b27      	ldr	r3, [pc, #156]	; (404c70 <xQueueGenericReceive+0x140>)
  404bd4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  404bd6:	47b0      	blx	r6
  404bd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404bda:	f1b3 3fff 	cmp.w	r3, #4294967295
  404bde:	bf04      	itt	eq
  404be0:	2300      	moveq	r3, #0
  404be2:	6463      	streq	r3, [r4, #68]	; 0x44
  404be4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404be6:	f1b3 3fff 	cmp.w	r3, #4294967295
  404bea:	bf04      	itt	eq
  404bec:	2300      	moveq	r3, #0
  404bee:	64a3      	streq	r3, [r4, #72]	; 0x48
  404bf0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  404bf2:	a901      	add	r1, sp, #4
  404bf4:	a802      	add	r0, sp, #8
  404bf6:	4b1f      	ldr	r3, [pc, #124]	; (404c74 <xQueueGenericReceive+0x144>)
  404bf8:	4798      	blx	r3
  404bfa:	bb10      	cbnz	r0, 404c42 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  404bfc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  404bfe:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  404c02:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  404c04:	f1b8 0f00 	cmp.w	r8, #0
  404c08:	d115      	bne.n	404c36 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  404c0a:	6823      	ldr	r3, [r4, #0]
  404c0c:	b923      	cbnz	r3, 404c18 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
  404c0e:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  404c10:	6860      	ldr	r0, [r4, #4]
  404c12:	4b19      	ldr	r3, [pc, #100]	; (404c78 <xQueueGenericReceive+0x148>)
  404c14:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  404c16:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  404c18:	9901      	ldr	r1, [sp, #4]
  404c1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404c1e:	4b17      	ldr	r3, [pc, #92]	; (404c7c <xQueueGenericReceive+0x14c>)
  404c20:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  404c22:	4620      	mov	r0, r4
  404c24:	4b16      	ldr	r3, [pc, #88]	; (404c80 <xQueueGenericReceive+0x150>)
  404c26:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404c28:	4b16      	ldr	r3, [pc, #88]	; (404c84 <xQueueGenericReceive+0x154>)
  404c2a:	4798      	blx	r3
  404c2c:	2800      	cmp	r0, #0
  404c2e:	d199      	bne.n	404b64 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
  404c30:	4b0e      	ldr	r3, [pc, #56]	; (404c6c <xQueueGenericReceive+0x13c>)
  404c32:	4798      	blx	r3
  404c34:	e796      	b.n	404b64 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  404c36:	4620      	mov	r0, r4
  404c38:	4b11      	ldr	r3, [pc, #68]	; (404c80 <xQueueGenericReceive+0x150>)
  404c3a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  404c3c:	4b11      	ldr	r3, [pc, #68]	; (404c84 <xQueueGenericReceive+0x154>)
  404c3e:	4798      	blx	r3
  404c40:	e790      	b.n	404b64 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  404c42:	4620      	mov	r0, r4
  404c44:	4b0e      	ldr	r3, [pc, #56]	; (404c80 <xQueueGenericReceive+0x150>)
  404c46:	4798      	blx	r3
			( void ) xTaskResumeAll();
  404c48:	4b0e      	ldr	r3, [pc, #56]	; (404c84 <xQueueGenericReceive+0x154>)
  404c4a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  404c4c:	2000      	movs	r0, #0
		}
	}
}
  404c4e:	b005      	add	sp, #20
  404c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c54:	0040452d 	.word	0x0040452d
  404c58:	0040453d 	.word	0x0040453d
  404c5c:	0040455d 	.word	0x0040455d
  404c60:	004047f5 	.word	0x004047f5
  404c64:	00405541 	.word	0x00405541
  404c68:	00405405 	.word	0x00405405
  404c6c:	0040451d 	.word	0x0040451d
  404c70:	00404f9d 	.word	0x00404f9d
  404c74:	004054b1 	.word	0x004054b1
  404c78:	0040556d 	.word	0x0040556d
  404c7c:	00405361 	.word	0x00405361
  404c80:	0040481d 	.word	0x0040481d
  404c84:	004050ed 	.word	0x004050ed
  404c88:	00405489 	.word	0x00405489

00404c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  404c8c:	b538      	push	{r3, r4, r5, lr}
  404c8e:	4604      	mov	r4, r0
  404c90:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  404c92:	4b0d      	ldr	r3, [pc, #52]	; (404cc8 <vQueueWaitForMessageRestricted+0x3c>)
  404c94:	4798      	blx	r3
  404c96:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404c98:	f1b3 3fff 	cmp.w	r3, #4294967295
  404c9c:	bf04      	itt	eq
  404c9e:	2300      	moveq	r3, #0
  404ca0:	6463      	streq	r3, [r4, #68]	; 0x44
  404ca2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
  404ca8:	bf04      	itt	eq
  404caa:	2300      	moveq	r3, #0
  404cac:	64a3      	streq	r3, [r4, #72]	; 0x48
  404cae:	4b07      	ldr	r3, [pc, #28]	; (404ccc <vQueueWaitForMessageRestricted+0x40>)
  404cb0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  404cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404cb4:	b923      	cbnz	r3, 404cc0 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  404cb6:	4629      	mov	r1, r5
  404cb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404cbc:	4b04      	ldr	r3, [pc, #16]	; (404cd0 <vQueueWaitForMessageRestricted+0x44>)
  404cbe:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  404cc0:	4620      	mov	r0, r4
  404cc2:	4b04      	ldr	r3, [pc, #16]	; (404cd4 <vQueueWaitForMessageRestricted+0x48>)
  404cc4:	4798      	blx	r3
  404cc6:	bd38      	pop	{r3, r4, r5, pc}
  404cc8:	0040453d 	.word	0x0040453d
  404ccc:	0040455d 	.word	0x0040455d
  404cd0:	004053c1 	.word	0x004053c1
  404cd4:	0040481d 	.word	0x0040481d

00404cd8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  404cd8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  404cda:	4b0f      	ldr	r3, [pc, #60]	; (404d18 <prvAddCurrentTaskToDelayedList+0x40>)
  404cdc:	681b      	ldr	r3, [r3, #0]
  404cde:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  404ce0:	4b0e      	ldr	r3, [pc, #56]	; (404d1c <prvAddCurrentTaskToDelayedList+0x44>)
  404ce2:	681b      	ldr	r3, [r3, #0]
  404ce4:	4298      	cmp	r0, r3
  404ce6:	d207      	bcs.n	404cf8 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  404ce8:	4b0d      	ldr	r3, [pc, #52]	; (404d20 <prvAddCurrentTaskToDelayedList+0x48>)
  404cea:	6818      	ldr	r0, [r3, #0]
  404cec:	4b0a      	ldr	r3, [pc, #40]	; (404d18 <prvAddCurrentTaskToDelayedList+0x40>)
  404cee:	6819      	ldr	r1, [r3, #0]
  404cf0:	3104      	adds	r1, #4
  404cf2:	4b0c      	ldr	r3, [pc, #48]	; (404d24 <prvAddCurrentTaskToDelayedList+0x4c>)
  404cf4:	4798      	blx	r3
  404cf6:	bd10      	pop	{r4, pc}
  404cf8:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  404cfa:	4b0b      	ldr	r3, [pc, #44]	; (404d28 <prvAddCurrentTaskToDelayedList+0x50>)
  404cfc:	6818      	ldr	r0, [r3, #0]
  404cfe:	4b06      	ldr	r3, [pc, #24]	; (404d18 <prvAddCurrentTaskToDelayedList+0x40>)
  404d00:	6819      	ldr	r1, [r3, #0]
  404d02:	3104      	adds	r1, #4
  404d04:	4b07      	ldr	r3, [pc, #28]	; (404d24 <prvAddCurrentTaskToDelayedList+0x4c>)
  404d06:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  404d08:	4b08      	ldr	r3, [pc, #32]	; (404d2c <prvAddCurrentTaskToDelayedList+0x54>)
  404d0a:	681b      	ldr	r3, [r3, #0]
  404d0c:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  404d0e:	bf3c      	itt	cc
  404d10:	4b06      	ldrcc	r3, [pc, #24]	; (404d2c <prvAddCurrentTaskToDelayedList+0x54>)
  404d12:	601c      	strcc	r4, [r3, #0]
  404d14:	bd10      	pop	{r4, pc}
  404d16:	bf00      	nop
  404d18:	2000ac7c 	.word	0x2000ac7c
  404d1c:	2000ac98 	.word	0x2000ac98
  404d20:	2000ac9c 	.word	0x2000ac9c
  404d24:	00404469 	.word	0x00404469
  404d28:	2000abd8 	.word	0x2000abd8
  404d2c:	20000028 	.word	0x20000028

00404d30 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  404d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d34:	b083      	sub	sp, #12
  404d36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404d38:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404d3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  404d3e:	9001      	str	r0, [sp, #4]
  404d40:	b918      	cbnz	r0, 404d4a <xTaskGenericCreate+0x1a>
  404d42:	4b62      	ldr	r3, [pc, #392]	; (404ecc <xTaskGenericCreate+0x19c>)
  404d44:	4798      	blx	r3
  404d46:	bf00      	nop
  404d48:	e7fd      	b.n	404d46 <xTaskGenericCreate+0x16>
  404d4a:	4689      	mov	r9, r1
  404d4c:	4615      	mov	r5, r2
  404d4e:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  404d50:	2f04      	cmp	r7, #4
  404d52:	d903      	bls.n	404d5c <xTaskGenericCreate+0x2c>
  404d54:	4b5d      	ldr	r3, [pc, #372]	; (404ecc <xTaskGenericCreate+0x19c>)
  404d56:	4798      	blx	r3
  404d58:	bf00      	nop
  404d5a:	e7fd      	b.n	404d58 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  404d5c:	204c      	movs	r0, #76	; 0x4c
  404d5e:	4b5c      	ldr	r3, [pc, #368]	; (404ed0 <xTaskGenericCreate+0x1a0>)
  404d60:	4798      	blx	r3

	if( pxNewTCB != NULL )
  404d62:	4604      	mov	r4, r0
  404d64:	2800      	cmp	r0, #0
  404d66:	f000 80ab 	beq.w	404ec0 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  404d6a:	2e00      	cmp	r6, #0
  404d6c:	f040 80a5 	bne.w	404eba <xTaskGenericCreate+0x18a>
  404d70:	00a8      	lsls	r0, r5, #2
  404d72:	4b57      	ldr	r3, [pc, #348]	; (404ed0 <xTaskGenericCreate+0x1a0>)
  404d74:	4798      	blx	r3
  404d76:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  404d78:	b918      	cbnz	r0, 404d82 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  404d7a:	4620      	mov	r0, r4
  404d7c:	4b55      	ldr	r3, [pc, #340]	; (404ed4 <xTaskGenericCreate+0x1a4>)
  404d7e:	4798      	blx	r3
  404d80:	e09e      	b.n	404ec0 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  404d82:	00aa      	lsls	r2, r5, #2
  404d84:	21a5      	movs	r1, #165	; 0xa5
  404d86:	4b54      	ldr	r3, [pc, #336]	; (404ed8 <xTaskGenericCreate+0x1a8>)
  404d88:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  404d8a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  404d8e:	3d01      	subs	r5, #1
  404d90:	6b23      	ldr	r3, [r4, #48]	; 0x30
  404d92:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  404d96:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  404d9a:	220a      	movs	r2, #10
  404d9c:	4649      	mov	r1, r9
  404d9e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  404da2:	4b4e      	ldr	r3, [pc, #312]	; (404edc <xTaskGenericCreate+0x1ac>)
  404da4:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  404da6:	2300      	movs	r3, #0
  404da8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  404dac:	463e      	mov	r6, r7
  404dae:	2f04      	cmp	r7, #4
  404db0:	bf28      	it	cs
  404db2:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  404db4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  404db6:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  404db8:	f104 0904 	add.w	r9, r4, #4
  404dbc:	4648      	mov	r0, r9
  404dbe:	f8df a16c 	ldr.w	sl, [pc, #364]	; 404f2c <xTaskGenericCreate+0x1fc>
  404dc2:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  404dc4:	f104 0018 	add.w	r0, r4, #24
  404dc8:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  404dca:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  404dcc:	f1c6 0605 	rsb	r6, r6, #5
  404dd0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  404dd2:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  404dd4:	465a      	mov	r2, fp
  404dd6:	9901      	ldr	r1, [sp, #4]
  404dd8:	4628      	mov	r0, r5
  404dda:	4b41      	ldr	r3, [pc, #260]	; (404ee0 <xTaskGenericCreate+0x1b0>)
  404ddc:	4798      	blx	r3
  404dde:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  404de0:	f010 0f07 	tst.w	r0, #7
  404de4:	d003      	beq.n	404dee <xTaskGenericCreate+0xbe>
  404de6:	4b39      	ldr	r3, [pc, #228]	; (404ecc <xTaskGenericCreate+0x19c>)
  404de8:	4798      	blx	r3
  404dea:	bf00      	nop
  404dec:	e7fd      	b.n	404dea <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
  404dee:	f1b8 0f00 	cmp.w	r8, #0
  404df2:	d001      	beq.n	404df8 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  404df4:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  404df8:	4b3a      	ldr	r3, [pc, #232]	; (404ee4 <xTaskGenericCreate+0x1b4>)
  404dfa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  404dfc:	4a3a      	ldr	r2, [pc, #232]	; (404ee8 <xTaskGenericCreate+0x1b8>)
  404dfe:	6813      	ldr	r3, [r2, #0]
  404e00:	3301      	adds	r3, #1
  404e02:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  404e04:	4b39      	ldr	r3, [pc, #228]	; (404eec <xTaskGenericCreate+0x1bc>)
  404e06:	681b      	ldr	r3, [r3, #0]
  404e08:	bb0b      	cbnz	r3, 404e4e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  404e0a:	4b38      	ldr	r3, [pc, #224]	; (404eec <xTaskGenericCreate+0x1bc>)
  404e0c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  404e0e:	6813      	ldr	r3, [r2, #0]
  404e10:	2b01      	cmp	r3, #1
  404e12:	d126      	bne.n	404e62 <xTaskGenericCreate+0x132>
  404e14:	4d36      	ldr	r5, [pc, #216]	; (404ef0 <xTaskGenericCreate+0x1c0>)
  404e16:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  404e1a:	4e36      	ldr	r6, [pc, #216]	; (404ef4 <xTaskGenericCreate+0x1c4>)
  404e1c:	4628      	mov	r0, r5
  404e1e:	47b0      	blx	r6
  404e20:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  404e22:	4545      	cmp	r5, r8
  404e24:	d1fa      	bne.n	404e1c <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  404e26:	f8df 8108 	ldr.w	r8, [pc, #264]	; 404f30 <xTaskGenericCreate+0x200>
  404e2a:	4640      	mov	r0, r8
  404e2c:	4d31      	ldr	r5, [pc, #196]	; (404ef4 <xTaskGenericCreate+0x1c4>)
  404e2e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  404e30:	4e31      	ldr	r6, [pc, #196]	; (404ef8 <xTaskGenericCreate+0x1c8>)
  404e32:	4630      	mov	r0, r6
  404e34:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  404e36:	4831      	ldr	r0, [pc, #196]	; (404efc <xTaskGenericCreate+0x1cc>)
  404e38:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  404e3a:	4831      	ldr	r0, [pc, #196]	; (404f00 <xTaskGenericCreate+0x1d0>)
  404e3c:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  404e3e:	4831      	ldr	r0, [pc, #196]	; (404f04 <xTaskGenericCreate+0x1d4>)
  404e40:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  404e42:	4b31      	ldr	r3, [pc, #196]	; (404f08 <xTaskGenericCreate+0x1d8>)
  404e44:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  404e48:	4b30      	ldr	r3, [pc, #192]	; (404f0c <xTaskGenericCreate+0x1dc>)
  404e4a:	601e      	str	r6, [r3, #0]
  404e4c:	e009      	b.n	404e62 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  404e4e:	4b30      	ldr	r3, [pc, #192]	; (404f10 <xTaskGenericCreate+0x1e0>)
  404e50:	681b      	ldr	r3, [r3, #0]
  404e52:	b933      	cbnz	r3, 404e62 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  404e54:	4b25      	ldr	r3, [pc, #148]	; (404eec <xTaskGenericCreate+0x1bc>)
  404e56:	681b      	ldr	r3, [r3, #0]
  404e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404e5a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  404e5c:	bf24      	itt	cs
  404e5e:	4b23      	ldrcs	r3, [pc, #140]	; (404eec <xTaskGenericCreate+0x1bc>)
  404e60:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  404e62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404e64:	4b2b      	ldr	r3, [pc, #172]	; (404f14 <xTaskGenericCreate+0x1e4>)
  404e66:	681b      	ldr	r3, [r3, #0]
  404e68:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  404e6a:	bf84      	itt	hi
  404e6c:	4b29      	ldrhi	r3, [pc, #164]	; (404f14 <xTaskGenericCreate+0x1e4>)
  404e6e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  404e70:	4a29      	ldr	r2, [pc, #164]	; (404f18 <xTaskGenericCreate+0x1e8>)
  404e72:	6813      	ldr	r3, [r2, #0]
  404e74:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  404e76:	3301      	adds	r3, #1
  404e78:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  404e7a:	4b28      	ldr	r3, [pc, #160]	; (404f1c <xTaskGenericCreate+0x1ec>)
  404e7c:	681b      	ldr	r3, [r3, #0]
  404e7e:	4298      	cmp	r0, r3
  404e80:	bf84      	itt	hi
  404e82:	4b26      	ldrhi	r3, [pc, #152]	; (404f1c <xTaskGenericCreate+0x1ec>)
  404e84:	6018      	strhi	r0, [r3, #0]
  404e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404e8a:	4649      	mov	r1, r9
  404e8c:	4b18      	ldr	r3, [pc, #96]	; (404ef0 <xTaskGenericCreate+0x1c0>)
  404e8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404e92:	4b23      	ldr	r3, [pc, #140]	; (404f20 <xTaskGenericCreate+0x1f0>)
  404e94:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  404e96:	4b23      	ldr	r3, [pc, #140]	; (404f24 <xTaskGenericCreate+0x1f4>)
  404e98:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  404e9a:	4b1d      	ldr	r3, [pc, #116]	; (404f10 <xTaskGenericCreate+0x1e0>)
  404e9c:	681b      	ldr	r3, [r3, #0]
  404e9e:	b143      	cbz	r3, 404eb2 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  404ea0:	4b12      	ldr	r3, [pc, #72]	; (404eec <xTaskGenericCreate+0x1bc>)
  404ea2:	681b      	ldr	r3, [r3, #0]
  404ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404ea6:	429f      	cmp	r7, r3
  404ea8:	d905      	bls.n	404eb6 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
  404eaa:	4b1f      	ldr	r3, [pc, #124]	; (404f28 <xTaskGenericCreate+0x1f8>)
  404eac:	4798      	blx	r3
  404eae:	2001      	movs	r0, #1
  404eb0:	e008      	b.n	404ec4 <xTaskGenericCreate+0x194>
  404eb2:	2001      	movs	r0, #1
  404eb4:	e006      	b.n	404ec4 <xTaskGenericCreate+0x194>
  404eb6:	2001      	movs	r0, #1
  404eb8:	e004      	b.n	404ec4 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  404eba:	6306      	str	r6, [r0, #48]	; 0x30
  404ebc:	4630      	mov	r0, r6
  404ebe:	e760      	b.n	404d82 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  404ec0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  404ec4:	b003      	add	sp, #12
  404ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404eca:	bf00      	nop
  404ecc:	0040452d 	.word	0x0040452d
  404ed0:	00404685 	.word	0x00404685
  404ed4:	00404759 	.word	0x00404759
  404ed8:	00405f85 	.word	0x00405f85
  404edc:	0040643d 	.word	0x0040643d
  404ee0:	004044e1 	.word	0x004044e1
  404ee4:	0040453d 	.word	0x0040453d
  404ee8:	2000acbc 	.word	0x2000acbc
  404eec:	2000ac7c 	.word	0x2000ac7c
  404ef0:	2000ac14 	.word	0x2000ac14
  404ef4:	0040442d 	.word	0x0040442d
  404ef8:	2000abfc 	.word	0x2000abfc
  404efc:	2000ac80 	.word	0x2000ac80
  404f00:	2000abe8 	.word	0x2000abe8
  404f04:	2000abc4 	.word	0x2000abc4
  404f08:	2000abd8 	.word	0x2000abd8
  404f0c:	2000ac9c 	.word	0x2000ac9c
  404f10:	2000abe0 	.word	0x2000abe0
  404f14:	2000acc0 	.word	0x2000acc0
  404f18:	2000aca0 	.word	0x2000aca0
  404f1c:	2000ac10 	.word	0x2000ac10
  404f20:	0040444d 	.word	0x0040444d
  404f24:	0040455d 	.word	0x0040455d
  404f28:	0040451d 	.word	0x0040451d
  404f2c:	00404445 	.word	0x00404445
  404f30:	2000aca4 	.word	0x2000aca4

00404f34 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  404f34:	b510      	push	{r4, lr}
  404f36:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  404f38:	2300      	movs	r3, #0
  404f3a:	9303      	str	r3, [sp, #12]
  404f3c:	9302      	str	r3, [sp, #8]
  404f3e:	9301      	str	r3, [sp, #4]
  404f40:	9300      	str	r3, [sp, #0]
  404f42:	2282      	movs	r2, #130	; 0x82
  404f44:	490d      	ldr	r1, [pc, #52]	; (404f7c <vTaskStartScheduler+0x48>)
  404f46:	480e      	ldr	r0, [pc, #56]	; (404f80 <vTaskStartScheduler+0x4c>)
  404f48:	4c0e      	ldr	r4, [pc, #56]	; (404f84 <vTaskStartScheduler+0x50>)
  404f4a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  404f4c:	2801      	cmp	r0, #1
  404f4e:	d10e      	bne.n	404f6e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
  404f50:	4b0d      	ldr	r3, [pc, #52]	; (404f88 <vTaskStartScheduler+0x54>)
  404f52:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  404f54:	2801      	cmp	r0, #1
  404f56:	d10a      	bne.n	404f6e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  404f58:	4b0c      	ldr	r3, [pc, #48]	; (404f8c <vTaskStartScheduler+0x58>)
  404f5a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  404f5c:	2201      	movs	r2, #1
  404f5e:	4b0c      	ldr	r3, [pc, #48]	; (404f90 <vTaskStartScheduler+0x5c>)
  404f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  404f62:	2200      	movs	r2, #0
  404f64:	4b0b      	ldr	r3, [pc, #44]	; (404f94 <vTaskStartScheduler+0x60>)
  404f66:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  404f68:	4b0b      	ldr	r3, [pc, #44]	; (404f98 <vTaskStartScheduler+0x64>)
  404f6a:	4798      	blx	r3
  404f6c:	e004      	b.n	404f78 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  404f6e:	b918      	cbnz	r0, 404f78 <vTaskStartScheduler+0x44>
  404f70:	4b06      	ldr	r3, [pc, #24]	; (404f8c <vTaskStartScheduler+0x58>)
  404f72:	4798      	blx	r3
  404f74:	bf00      	nop
  404f76:	e7fd      	b.n	404f74 <vTaskStartScheduler+0x40>
}
  404f78:	b004      	add	sp, #16
  404f7a:	bd10      	pop	{r4, pc}
  404f7c:	0040fcb8 	.word	0x0040fcb8
  404f80:	00405239 	.word	0x00405239
  404f84:	00404d31 	.word	0x00404d31
  404f88:	004056e5 	.word	0x004056e5
  404f8c:	0040452d 	.word	0x0040452d
  404f90:	2000abe0 	.word	0x2000abe0
  404f94:	2000ac98 	.word	0x2000ac98
  404f98:	004045f9 	.word	0x004045f9

00404f9c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  404f9c:	4a02      	ldr	r2, [pc, #8]	; (404fa8 <vTaskSuspendAll+0xc>)
  404f9e:	6813      	ldr	r3, [r2, #0]
  404fa0:	3301      	adds	r3, #1
  404fa2:	6013      	str	r3, [r2, #0]
  404fa4:	4770      	bx	lr
  404fa6:	bf00      	nop
  404fa8:	2000ac78 	.word	0x2000ac78

00404fac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  404fac:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  404fae:	4b04      	ldr	r3, [pc, #16]	; (404fc0 <xTaskGetTickCount+0x14>)
  404fb0:	4798      	blx	r3
	{
		xTicks = xTickCount;
  404fb2:	4b04      	ldr	r3, [pc, #16]	; (404fc4 <xTaskGetTickCount+0x18>)
  404fb4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  404fb6:	4b04      	ldr	r3, [pc, #16]	; (404fc8 <xTaskGetTickCount+0x1c>)
  404fb8:	4798      	blx	r3

	return xTicks;
}
  404fba:	4620      	mov	r0, r4
  404fbc:	bd10      	pop	{r4, pc}
  404fbe:	bf00      	nop
  404fc0:	0040453d 	.word	0x0040453d
  404fc4:	2000ac98 	.word	0x2000ac98
  404fc8:	0040455d 	.word	0x0040455d

00404fcc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  404fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  404fd0:	4b3a      	ldr	r3, [pc, #232]	; (4050bc <vTaskIncrementTick+0xf0>)
  404fd2:	681b      	ldr	r3, [r3, #0]
  404fd4:	2b00      	cmp	r3, #0
  404fd6:	d16b      	bne.n	4050b0 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
  404fd8:	4b39      	ldr	r3, [pc, #228]	; (4050c0 <vTaskIncrementTick+0xf4>)
  404fda:	681a      	ldr	r2, [r3, #0]
  404fdc:	3201      	adds	r2, #1
  404fde:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  404fe0:	681b      	ldr	r3, [r3, #0]
  404fe2:	bb03      	cbnz	r3, 405026 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  404fe4:	4b37      	ldr	r3, [pc, #220]	; (4050c4 <vTaskIncrementTick+0xf8>)
  404fe6:	681b      	ldr	r3, [r3, #0]
  404fe8:	681b      	ldr	r3, [r3, #0]
  404fea:	b11b      	cbz	r3, 404ff4 <vTaskIncrementTick+0x28>
  404fec:	4b36      	ldr	r3, [pc, #216]	; (4050c8 <vTaskIncrementTick+0xfc>)
  404fee:	4798      	blx	r3
  404ff0:	bf00      	nop
  404ff2:	e7fd      	b.n	404ff0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
  404ff4:	4b33      	ldr	r3, [pc, #204]	; (4050c4 <vTaskIncrementTick+0xf8>)
  404ff6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  404ff8:	4a34      	ldr	r2, [pc, #208]	; (4050cc <vTaskIncrementTick+0x100>)
  404ffa:	6810      	ldr	r0, [r2, #0]
  404ffc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  404ffe:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  405000:	4933      	ldr	r1, [pc, #204]	; (4050d0 <vTaskIncrementTick+0x104>)
  405002:	680a      	ldr	r2, [r1, #0]
  405004:	3201      	adds	r2, #1
  405006:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  405008:	681b      	ldr	r3, [r3, #0]
  40500a:	681b      	ldr	r3, [r3, #0]
  40500c:	b923      	cbnz	r3, 405018 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40500e:	f04f 32ff 	mov.w	r2, #4294967295
  405012:	4b30      	ldr	r3, [pc, #192]	; (4050d4 <vTaskIncrementTick+0x108>)
  405014:	601a      	str	r2, [r3, #0]
  405016:	e006      	b.n	405026 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  405018:	4b2a      	ldr	r3, [pc, #168]	; (4050c4 <vTaskIncrementTick+0xf8>)
  40501a:	681b      	ldr	r3, [r3, #0]
  40501c:	68db      	ldr	r3, [r3, #12]
  40501e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  405020:	685a      	ldr	r2, [r3, #4]
  405022:	4b2c      	ldr	r3, [pc, #176]	; (4050d4 <vTaskIncrementTick+0x108>)
  405024:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  405026:	4b26      	ldr	r3, [pc, #152]	; (4050c0 <vTaskIncrementTick+0xf4>)
  405028:	681a      	ldr	r2, [r3, #0]
  40502a:	4b2a      	ldr	r3, [pc, #168]	; (4050d4 <vTaskIncrementTick+0x108>)
  40502c:	681b      	ldr	r3, [r3, #0]
  40502e:	429a      	cmp	r2, r3
  405030:	d342      	bcc.n	4050b8 <vTaskIncrementTick+0xec>
  405032:	4b24      	ldr	r3, [pc, #144]	; (4050c4 <vTaskIncrementTick+0xf8>)
  405034:	681b      	ldr	r3, [r3, #0]
  405036:	681b      	ldr	r3, [r3, #0]
  405038:	b16b      	cbz	r3, 405056 <vTaskIncrementTick+0x8a>
  40503a:	4b22      	ldr	r3, [pc, #136]	; (4050c4 <vTaskIncrementTick+0xf8>)
  40503c:	681b      	ldr	r3, [r3, #0]
  40503e:	68db      	ldr	r3, [r3, #12]
  405040:	68dc      	ldr	r4, [r3, #12]
  405042:	6863      	ldr	r3, [r4, #4]
  405044:	4a1e      	ldr	r2, [pc, #120]	; (4050c0 <vTaskIncrementTick+0xf4>)
  405046:	6812      	ldr	r2, [r2, #0]
  405048:	4293      	cmp	r3, r2
  40504a:	d813      	bhi.n	405074 <vTaskIncrementTick+0xa8>
  40504c:	4e22      	ldr	r6, [pc, #136]	; (4050d8 <vTaskIncrementTick+0x10c>)
  40504e:	4f23      	ldr	r7, [pc, #140]	; (4050dc <vTaskIncrementTick+0x110>)
  405050:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4050e8 <vTaskIncrementTick+0x11c>
  405054:	e012      	b.n	40507c <vTaskIncrementTick+0xb0>
  405056:	f04f 32ff 	mov.w	r2, #4294967295
  40505a:	4b1e      	ldr	r3, [pc, #120]	; (4050d4 <vTaskIncrementTick+0x108>)
  40505c:	601a      	str	r2, [r3, #0]
  40505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405062:	4b18      	ldr	r3, [pc, #96]	; (4050c4 <vTaskIncrementTick+0xf8>)
  405064:	681b      	ldr	r3, [r3, #0]
  405066:	68db      	ldr	r3, [r3, #12]
  405068:	68dc      	ldr	r4, [r3, #12]
  40506a:	6863      	ldr	r3, [r4, #4]
  40506c:	4a14      	ldr	r2, [pc, #80]	; (4050c0 <vTaskIncrementTick+0xf4>)
  40506e:	6812      	ldr	r2, [r2, #0]
  405070:	4293      	cmp	r3, r2
  405072:	d903      	bls.n	40507c <vTaskIncrementTick+0xb0>
  405074:	4a17      	ldr	r2, [pc, #92]	; (4050d4 <vTaskIncrementTick+0x108>)
  405076:	6013      	str	r3, [r2, #0]
  405078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40507c:	1d25      	adds	r5, r4, #4
  40507e:	4628      	mov	r0, r5
  405080:	47b0      	blx	r6
  405082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  405084:	b113      	cbz	r3, 40508c <vTaskIncrementTick+0xc0>
  405086:	f104 0018 	add.w	r0, r4, #24
  40508a:	47b0      	blx	r6
  40508c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40508e:	683b      	ldr	r3, [r7, #0]
  405090:	4298      	cmp	r0, r3
  405092:	bf88      	it	hi
  405094:	6038      	strhi	r0, [r7, #0]
  405096:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40509a:	4629      	mov	r1, r5
  40509c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  4050a0:	4b0f      	ldr	r3, [pc, #60]	; (4050e0 <vTaskIncrementTick+0x114>)
  4050a2:	4798      	blx	r3
  4050a4:	4b07      	ldr	r3, [pc, #28]	; (4050c4 <vTaskIncrementTick+0xf8>)
  4050a6:	681b      	ldr	r3, [r3, #0]
  4050a8:	681b      	ldr	r3, [r3, #0]
  4050aa:	2b00      	cmp	r3, #0
  4050ac:	d1d9      	bne.n	405062 <vTaskIncrementTick+0x96>
  4050ae:	e7d2      	b.n	405056 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
  4050b0:	4a0c      	ldr	r2, [pc, #48]	; (4050e4 <vTaskIncrementTick+0x118>)
  4050b2:	6813      	ldr	r3, [r2, #0]
  4050b4:	3301      	adds	r3, #1
  4050b6:	6013      	str	r3, [r2, #0]
  4050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050bc:	2000ac78 	.word	0x2000ac78
  4050c0:	2000ac98 	.word	0x2000ac98
  4050c4:	2000abd8 	.word	0x2000abd8
  4050c8:	0040452d 	.word	0x0040452d
  4050cc:	2000ac9c 	.word	0x2000ac9c
  4050d0:	2000ac94 	.word	0x2000ac94
  4050d4:	20000028 	.word	0x20000028
  4050d8:	004044a5 	.word	0x004044a5
  4050dc:	2000ac10 	.word	0x2000ac10
  4050e0:	0040444d 	.word	0x0040444d
  4050e4:	2000abdc 	.word	0x2000abdc
  4050e8:	2000ac14 	.word	0x2000ac14

004050ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4050f0:	4b30      	ldr	r3, [pc, #192]	; (4051b4 <xTaskResumeAll+0xc8>)
  4050f2:	681b      	ldr	r3, [r3, #0]
  4050f4:	b91b      	cbnz	r3, 4050fe <xTaskResumeAll+0x12>
  4050f6:	4b30      	ldr	r3, [pc, #192]	; (4051b8 <xTaskResumeAll+0xcc>)
  4050f8:	4798      	blx	r3
  4050fa:	bf00      	nop
  4050fc:	e7fd      	b.n	4050fa <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4050fe:	4b2f      	ldr	r3, [pc, #188]	; (4051bc <xTaskResumeAll+0xd0>)
  405100:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  405102:	4b2c      	ldr	r3, [pc, #176]	; (4051b4 <xTaskResumeAll+0xc8>)
  405104:	681a      	ldr	r2, [r3, #0]
  405106:	3a01      	subs	r2, #1
  405108:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40510a:	681b      	ldr	r3, [r3, #0]
  40510c:	2b00      	cmp	r3, #0
  40510e:	d149      	bne.n	4051a4 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  405110:	4b2b      	ldr	r3, [pc, #172]	; (4051c0 <xTaskResumeAll+0xd4>)
  405112:	681b      	ldr	r3, [r3, #0]
  405114:	bb03      	cbnz	r3, 405158 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  405116:	2400      	movs	r4, #0
  405118:	e047      	b.n	4051aa <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  40511a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40511e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  405120:	f104 0018 	add.w	r0, r4, #24
  405124:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  405126:	f104 0904 	add.w	r9, r4, #4
  40512a:	4648      	mov	r0, r9
  40512c:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  40512e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405130:	6833      	ldr	r3, [r6, #0]
  405132:	4298      	cmp	r0, r3
  405134:	bf88      	it	hi
  405136:	6030      	strhi	r0, [r6, #0]
  405138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40513c:	4649      	mov	r1, r9
  40513e:	4b21      	ldr	r3, [pc, #132]	; (4051c4 <xTaskResumeAll+0xd8>)
  405140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405144:	4b20      	ldr	r3, [pc, #128]	; (4051c8 <xTaskResumeAll+0xdc>)
  405146:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  405148:	4b20      	ldr	r3, [pc, #128]	; (4051cc <xTaskResumeAll+0xe0>)
  40514a:	681b      	ldr	r3, [r3, #0]
  40514c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  405150:	429a      	cmp	r2, r3
  405152:	bf28      	it	cs
  405154:	2501      	movcs	r5, #1
  405156:	e004      	b.n	405162 <xTaskResumeAll+0x76>
  405158:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40515a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4051ec <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  40515e:	4f1c      	ldr	r7, [pc, #112]	; (4051d0 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  405160:	4e1c      	ldr	r6, [pc, #112]	; (4051d4 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  405162:	f8d8 3000 	ldr.w	r3, [r8]
  405166:	2b00      	cmp	r3, #0
  405168:	d1d7      	bne.n	40511a <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40516a:	4b1b      	ldr	r3, [pc, #108]	; (4051d8 <xTaskResumeAll+0xec>)
  40516c:	681b      	ldr	r3, [r3, #0]
  40516e:	b163      	cbz	r3, 40518a <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405170:	4b19      	ldr	r3, [pc, #100]	; (4051d8 <xTaskResumeAll+0xec>)
  405172:	681b      	ldr	r3, [r3, #0]
  405174:	b17b      	cbz	r3, 405196 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
  405176:	4d19      	ldr	r5, [pc, #100]	; (4051dc <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
  405178:	4c17      	ldr	r4, [pc, #92]	; (4051d8 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  40517a:	47a8      	blx	r5
						--uxMissedTicks;
  40517c:	6823      	ldr	r3, [r4, #0]
  40517e:	3b01      	subs	r3, #1
  405180:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405182:	6823      	ldr	r3, [r4, #0]
  405184:	2b00      	cmp	r3, #0
  405186:	d1f8      	bne.n	40517a <xTaskResumeAll+0x8e>
  405188:	e005      	b.n	405196 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40518a:	2d01      	cmp	r5, #1
  40518c:	d003      	beq.n	405196 <xTaskResumeAll+0xaa>
  40518e:	4b14      	ldr	r3, [pc, #80]	; (4051e0 <xTaskResumeAll+0xf4>)
  405190:	681b      	ldr	r3, [r3, #0]
  405192:	2b01      	cmp	r3, #1
  405194:	d108      	bne.n	4051a8 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  405196:	2200      	movs	r2, #0
  405198:	4b11      	ldr	r3, [pc, #68]	; (4051e0 <xTaskResumeAll+0xf4>)
  40519a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40519c:	4b11      	ldr	r3, [pc, #68]	; (4051e4 <xTaskResumeAll+0xf8>)
  40519e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  4051a0:	2401      	movs	r4, #1
  4051a2:	e002      	b.n	4051aa <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4051a4:	2400      	movs	r4, #0
  4051a6:	e000      	b.n	4051aa <xTaskResumeAll+0xbe>
  4051a8:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4051aa:	4b0f      	ldr	r3, [pc, #60]	; (4051e8 <xTaskResumeAll+0xfc>)
  4051ac:	4798      	blx	r3

	return xAlreadyYielded;
}
  4051ae:	4620      	mov	r0, r4
  4051b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4051b4:	2000ac78 	.word	0x2000ac78
  4051b8:	0040452d 	.word	0x0040452d
  4051bc:	0040453d 	.word	0x0040453d
  4051c0:	2000acbc 	.word	0x2000acbc
  4051c4:	2000ac14 	.word	0x2000ac14
  4051c8:	0040444d 	.word	0x0040444d
  4051cc:	2000ac7c 	.word	0x2000ac7c
  4051d0:	004044a5 	.word	0x004044a5
  4051d4:	2000ac10 	.word	0x2000ac10
  4051d8:	2000abdc 	.word	0x2000abdc
  4051dc:	00404fcd 	.word	0x00404fcd
  4051e0:	2000acb8 	.word	0x2000acb8
  4051e4:	0040451d 	.word	0x0040451d
  4051e8:	0040455d 	.word	0x0040455d
  4051ec:	2000ac80 	.word	0x2000ac80

004051f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4051f0:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4051f2:	b180      	cbz	r0, 405216 <vTaskDelay+0x26>
  4051f4:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
  4051f6:	4b09      	ldr	r3, [pc, #36]	; (40521c <vTaskDelay+0x2c>)
  4051f8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4051fa:	4b09      	ldr	r3, [pc, #36]	; (405220 <vTaskDelay+0x30>)
  4051fc:	681b      	ldr	r3, [r3, #0]
  4051fe:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  405200:	4b08      	ldr	r3, [pc, #32]	; (405224 <vTaskDelay+0x34>)
  405202:	6818      	ldr	r0, [r3, #0]
  405204:	3004      	adds	r0, #4
  405206:	4b08      	ldr	r3, [pc, #32]	; (405228 <vTaskDelay+0x38>)
  405208:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40520a:	4620      	mov	r0, r4
  40520c:	4b07      	ldr	r3, [pc, #28]	; (40522c <vTaskDelay+0x3c>)
  40520e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  405210:	4b07      	ldr	r3, [pc, #28]	; (405230 <vTaskDelay+0x40>)
  405212:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  405214:	b908      	cbnz	r0, 40521a <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
  405216:	4b07      	ldr	r3, [pc, #28]	; (405234 <vTaskDelay+0x44>)
  405218:	4798      	blx	r3
  40521a:	bd10      	pop	{r4, pc}
  40521c:	00404f9d 	.word	0x00404f9d
  405220:	2000ac98 	.word	0x2000ac98
  405224:	2000ac7c 	.word	0x2000ac7c
  405228:	004044a5 	.word	0x004044a5
  40522c:	00404cd9 	.word	0x00404cd9
  405230:	004050ed 	.word	0x004050ed
  405234:	0040451d 	.word	0x0040451d

00405238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  405238:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40523a:	4d15      	ldr	r5, [pc, #84]	; (405290 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40523c:	4f15      	ldr	r7, [pc, #84]	; (405294 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  40523e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4052b4 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  405242:	4e15      	ldr	r6, [pc, #84]	; (405298 <prvIdleTask+0x60>)
  405244:	e019      	b.n	40527a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  405246:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  405248:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
  40524a:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  40524c:	b1ac      	cbz	r4, 40527a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  40524e:	4b13      	ldr	r3, [pc, #76]	; (40529c <prvIdleTask+0x64>)
  405250:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  405252:	68fb      	ldr	r3, [r7, #12]
  405254:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  405256:	1d20      	adds	r0, r4, #4
  405258:	4b11      	ldr	r3, [pc, #68]	; (4052a0 <prvIdleTask+0x68>)
  40525a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40525c:	4a11      	ldr	r2, [pc, #68]	; (4052a4 <prvIdleTask+0x6c>)
  40525e:	6813      	ldr	r3, [r2, #0]
  405260:	3b01      	subs	r3, #1
  405262:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  405264:	682b      	ldr	r3, [r5, #0]
  405266:	3b01      	subs	r3, #1
  405268:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  40526a:	4b0f      	ldr	r3, [pc, #60]	; (4052a8 <prvIdleTask+0x70>)
  40526c:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40526e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405270:	f8df 9044 	ldr.w	r9, [pc, #68]	; 4052b8 <prvIdleTask+0x80>
  405274:	47c8      	blx	r9
		vPortFree( pxTCB );
  405276:	4620      	mov	r0, r4
  405278:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40527a:	682b      	ldr	r3, [r5, #0]
  40527c:	2b00      	cmp	r3, #0
  40527e:	d1e2      	bne.n	405246 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  405280:	4b0a      	ldr	r3, [pc, #40]	; (4052ac <prvIdleTask+0x74>)
  405282:	681b      	ldr	r3, [r3, #0]
  405284:	2b01      	cmp	r3, #1
  405286:	d9dc      	bls.n	405242 <prvIdleTask+0xa>
			{
				taskYIELD();
  405288:	4b09      	ldr	r3, [pc, #36]	; (4052b0 <prvIdleTask+0x78>)
  40528a:	4798      	blx	r3
  40528c:	e7d7      	b.n	40523e <prvIdleTask+0x6>
  40528e:	bf00      	nop
  405290:	2000abe4 	.word	0x2000abe4
  405294:	2000abe8 	.word	0x2000abe8
  405298:	004050ed 	.word	0x004050ed
  40529c:	0040453d 	.word	0x0040453d
  4052a0:	004044a5 	.word	0x004044a5
  4052a4:	2000acbc 	.word	0x2000acbc
  4052a8:	0040455d 	.word	0x0040455d
  4052ac:	2000ac14 	.word	0x2000ac14
  4052b0:	0040451d 	.word	0x0040451d
  4052b4:	00404f9d 	.word	0x00404f9d
  4052b8:	00404759 	.word	0x00404759

004052bc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4052bc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4052be:	4b22      	ldr	r3, [pc, #136]	; (405348 <vTaskSwitchContext+0x8c>)
  4052c0:	681b      	ldr	r3, [r3, #0]
  4052c2:	b96b      	cbnz	r3, 4052e0 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  4052c4:	4b21      	ldr	r3, [pc, #132]	; (40534c <vTaskSwitchContext+0x90>)
  4052c6:	681b      	ldr	r3, [r3, #0]
  4052c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4052cc:	009b      	lsls	r3, r3, #2
  4052ce:	4a20      	ldr	r2, [pc, #128]	; (405350 <vTaskSwitchContext+0x94>)
  4052d0:	58d3      	ldr	r3, [r2, r3]
  4052d2:	b9cb      	cbnz	r3, 405308 <vTaskSwitchContext+0x4c>
  4052d4:	4b1d      	ldr	r3, [pc, #116]	; (40534c <vTaskSwitchContext+0x90>)
  4052d6:	681b      	ldr	r3, [r3, #0]
  4052d8:	b143      	cbz	r3, 4052ec <vTaskSwitchContext+0x30>
  4052da:	4a1c      	ldr	r2, [pc, #112]	; (40534c <vTaskSwitchContext+0x90>)
  4052dc:	491c      	ldr	r1, [pc, #112]	; (405350 <vTaskSwitchContext+0x94>)
  4052de:	e009      	b.n	4052f4 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4052e0:	2201      	movs	r2, #1
  4052e2:	4b1c      	ldr	r3, [pc, #112]	; (405354 <vTaskSwitchContext+0x98>)
  4052e4:	601a      	str	r2, [r3, #0]
  4052e6:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  4052e8:	6813      	ldr	r3, [r2, #0]
  4052ea:	b91b      	cbnz	r3, 4052f4 <vTaskSwitchContext+0x38>
  4052ec:	4b1a      	ldr	r3, [pc, #104]	; (405358 <vTaskSwitchContext+0x9c>)
  4052ee:	4798      	blx	r3
  4052f0:	bf00      	nop
  4052f2:	e7fd      	b.n	4052f0 <vTaskSwitchContext+0x34>
  4052f4:	6813      	ldr	r3, [r2, #0]
  4052f6:	3b01      	subs	r3, #1
  4052f8:	6013      	str	r3, [r2, #0]
  4052fa:	6813      	ldr	r3, [r2, #0]
  4052fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  405304:	2b00      	cmp	r3, #0
  405306:	d0ef      	beq.n	4052e8 <vTaskSwitchContext+0x2c>
  405308:	4b10      	ldr	r3, [pc, #64]	; (40534c <vTaskSwitchContext+0x90>)
  40530a:	681b      	ldr	r3, [r3, #0]
  40530c:	4a10      	ldr	r2, [pc, #64]	; (405350 <vTaskSwitchContext+0x94>)
  40530e:	0099      	lsls	r1, r3, #2
  405310:	18c8      	adds	r0, r1, r3
  405312:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  405316:	6844      	ldr	r4, [r0, #4]
  405318:	6864      	ldr	r4, [r4, #4]
  40531a:	6044      	str	r4, [r0, #4]
  40531c:	4602      	mov	r2, r0
  40531e:	3208      	adds	r2, #8
  405320:	4294      	cmp	r4, r2
  405322:	d106      	bne.n	405332 <vTaskSwitchContext+0x76>
  405324:	6860      	ldr	r0, [r4, #4]
  405326:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40532a:	4a09      	ldr	r2, [pc, #36]	; (405350 <vTaskSwitchContext+0x94>)
  40532c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  405330:	6050      	str	r0, [r2, #4]
  405332:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405336:	4a06      	ldr	r2, [pc, #24]	; (405350 <vTaskSwitchContext+0x94>)
  405338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40533c:	685b      	ldr	r3, [r3, #4]
  40533e:	68da      	ldr	r2, [r3, #12]
  405340:	4b06      	ldr	r3, [pc, #24]	; (40535c <vTaskSwitchContext+0xa0>)
  405342:	601a      	str	r2, [r3, #0]
  405344:	bd10      	pop	{r4, pc}
  405346:	bf00      	nop
  405348:	2000ac78 	.word	0x2000ac78
  40534c:	2000ac10 	.word	0x2000ac10
  405350:	2000ac14 	.word	0x2000ac14
  405354:	2000acb8 	.word	0x2000acb8
  405358:	0040452d 	.word	0x0040452d
  40535c:	2000ac7c 	.word	0x2000ac7c

00405360 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  405360:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
  405362:	b918      	cbnz	r0, 40536c <vTaskPlaceOnEventList+0xc>
  405364:	4b0e      	ldr	r3, [pc, #56]	; (4053a0 <vTaskPlaceOnEventList+0x40>)
  405366:	4798      	blx	r3
  405368:	bf00      	nop
  40536a:	e7fd      	b.n	405368 <vTaskPlaceOnEventList+0x8>
  40536c:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40536e:	4d0d      	ldr	r5, [pc, #52]	; (4053a4 <vTaskPlaceOnEventList+0x44>)
  405370:	6829      	ldr	r1, [r5, #0]
  405372:	3118      	adds	r1, #24
  405374:	4b0c      	ldr	r3, [pc, #48]	; (4053a8 <vTaskPlaceOnEventList+0x48>)
  405376:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  405378:	6828      	ldr	r0, [r5, #0]
  40537a:	3004      	adds	r0, #4
  40537c:	4b0b      	ldr	r3, [pc, #44]	; (4053ac <vTaskPlaceOnEventList+0x4c>)
  40537e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  405380:	f1b4 3fff 	cmp.w	r4, #4294967295
  405384:	d105      	bne.n	405392 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  405386:	6829      	ldr	r1, [r5, #0]
  405388:	3104      	adds	r1, #4
  40538a:	4809      	ldr	r0, [pc, #36]	; (4053b0 <vTaskPlaceOnEventList+0x50>)
  40538c:	4b09      	ldr	r3, [pc, #36]	; (4053b4 <vTaskPlaceOnEventList+0x54>)
  40538e:	4798      	blx	r3
  405390:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  405392:	4b09      	ldr	r3, [pc, #36]	; (4053b8 <vTaskPlaceOnEventList+0x58>)
  405394:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  405396:	4420      	add	r0, r4
  405398:	4b08      	ldr	r3, [pc, #32]	; (4053bc <vTaskPlaceOnEventList+0x5c>)
  40539a:	4798      	blx	r3
  40539c:	bd38      	pop	{r3, r4, r5, pc}
  40539e:	bf00      	nop
  4053a0:	0040452d 	.word	0x0040452d
  4053a4:	2000ac7c 	.word	0x2000ac7c
  4053a8:	00404469 	.word	0x00404469
  4053ac:	004044a5 	.word	0x004044a5
  4053b0:	2000abc4 	.word	0x2000abc4
  4053b4:	0040444d 	.word	0x0040444d
  4053b8:	2000ac98 	.word	0x2000ac98
  4053bc:	00404cd9 	.word	0x00404cd9

004053c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  4053c0:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  4053c2:	b918      	cbnz	r0, 4053cc <vTaskPlaceOnEventListRestricted+0xc>
  4053c4:	4b09      	ldr	r3, [pc, #36]	; (4053ec <vTaskPlaceOnEventListRestricted+0x2c>)
  4053c6:	4798      	blx	r3
  4053c8:	bf00      	nop
  4053ca:	e7fd      	b.n	4053c8 <vTaskPlaceOnEventListRestricted+0x8>
  4053cc:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4053ce:	4c08      	ldr	r4, [pc, #32]	; (4053f0 <vTaskPlaceOnEventListRestricted+0x30>)
  4053d0:	6821      	ldr	r1, [r4, #0]
  4053d2:	3118      	adds	r1, #24
  4053d4:	4b07      	ldr	r3, [pc, #28]	; (4053f4 <vTaskPlaceOnEventListRestricted+0x34>)
  4053d6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4053d8:	6820      	ldr	r0, [r4, #0]
  4053da:	3004      	adds	r0, #4
  4053dc:	4b06      	ldr	r3, [pc, #24]	; (4053f8 <vTaskPlaceOnEventListRestricted+0x38>)
  4053de:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4053e0:	4b06      	ldr	r3, [pc, #24]	; (4053fc <vTaskPlaceOnEventListRestricted+0x3c>)
  4053e2:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4053e4:	4428      	add	r0, r5
  4053e6:	4b06      	ldr	r3, [pc, #24]	; (405400 <vTaskPlaceOnEventListRestricted+0x40>)
  4053e8:	4798      	blx	r3
  4053ea:	bd38      	pop	{r3, r4, r5, pc}
  4053ec:	0040452d 	.word	0x0040452d
  4053f0:	2000ac7c 	.word	0x2000ac7c
  4053f4:	0040444d 	.word	0x0040444d
  4053f8:	004044a5 	.word	0x004044a5
  4053fc:	2000ac98 	.word	0x2000ac98
  405400:	00404cd9 	.word	0x00404cd9

00405404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  405404:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  405406:	68c3      	ldr	r3, [r0, #12]
  405408:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40540a:	b91c      	cbnz	r4, 405414 <xTaskRemoveFromEventList+0x10>
  40540c:	4b16      	ldr	r3, [pc, #88]	; (405468 <xTaskRemoveFromEventList+0x64>)
  40540e:	4798      	blx	r3
  405410:	bf00      	nop
  405412:	e7fd      	b.n	405410 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  405414:	f104 0518 	add.w	r5, r4, #24
  405418:	4628      	mov	r0, r5
  40541a:	4b14      	ldr	r3, [pc, #80]	; (40546c <xTaskRemoveFromEventList+0x68>)
  40541c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40541e:	4b14      	ldr	r3, [pc, #80]	; (405470 <xTaskRemoveFromEventList+0x6c>)
  405420:	681b      	ldr	r3, [r3, #0]
  405422:	b99b      	cbnz	r3, 40544c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  405424:	1d25      	adds	r5, r4, #4
  405426:	4628      	mov	r0, r5
  405428:	4b10      	ldr	r3, [pc, #64]	; (40546c <xTaskRemoveFromEventList+0x68>)
  40542a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40542c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40542e:	4b11      	ldr	r3, [pc, #68]	; (405474 <xTaskRemoveFromEventList+0x70>)
  405430:	681b      	ldr	r3, [r3, #0]
  405432:	4298      	cmp	r0, r3
  405434:	bf84      	itt	hi
  405436:	4b0f      	ldrhi	r3, [pc, #60]	; (405474 <xTaskRemoveFromEventList+0x70>)
  405438:	6018      	strhi	r0, [r3, #0]
  40543a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40543e:	4629      	mov	r1, r5
  405440:	4b0d      	ldr	r3, [pc, #52]	; (405478 <xTaskRemoveFromEventList+0x74>)
  405442:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405446:	4b0d      	ldr	r3, [pc, #52]	; (40547c <xTaskRemoveFromEventList+0x78>)
  405448:	4798      	blx	r3
  40544a:	e003      	b.n	405454 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40544c:	4629      	mov	r1, r5
  40544e:	480c      	ldr	r0, [pc, #48]	; (405480 <xTaskRemoveFromEventList+0x7c>)
  405450:	4b0a      	ldr	r3, [pc, #40]	; (40547c <xTaskRemoveFromEventList+0x78>)
  405452:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  405454:	4b0b      	ldr	r3, [pc, #44]	; (405484 <xTaskRemoveFromEventList+0x80>)
  405456:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
  405458:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  40545c:	4298      	cmp	r0, r3
  40545e:	bf34      	ite	cc
  405460:	2000      	movcc	r0, #0
  405462:	2001      	movcs	r0, #1
  405464:	bd38      	pop	{r3, r4, r5, pc}
  405466:	bf00      	nop
  405468:	0040452d 	.word	0x0040452d
  40546c:	004044a5 	.word	0x004044a5
  405470:	2000ac78 	.word	0x2000ac78
  405474:	2000ac10 	.word	0x2000ac10
  405478:	2000ac14 	.word	0x2000ac14
  40547c:	0040444d 	.word	0x0040444d
  405480:	2000ac80 	.word	0x2000ac80
  405484:	2000ac7c 	.word	0x2000ac7c

00405488 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  405488:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40548a:	b918      	cbnz	r0, 405494 <vTaskSetTimeOutState+0xc>
  40548c:	4b05      	ldr	r3, [pc, #20]	; (4054a4 <vTaskSetTimeOutState+0x1c>)
  40548e:	4798      	blx	r3
  405490:	bf00      	nop
  405492:	e7fd      	b.n	405490 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  405494:	4a04      	ldr	r2, [pc, #16]	; (4054a8 <vTaskSetTimeOutState+0x20>)
  405496:	6812      	ldr	r2, [r2, #0]
  405498:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40549a:	4a04      	ldr	r2, [pc, #16]	; (4054ac <vTaskSetTimeOutState+0x24>)
  40549c:	6812      	ldr	r2, [r2, #0]
  40549e:	6042      	str	r2, [r0, #4]
  4054a0:	bd08      	pop	{r3, pc}
  4054a2:	bf00      	nop
  4054a4:	0040452d 	.word	0x0040452d
  4054a8:	2000ac94 	.word	0x2000ac94
  4054ac:	2000ac98 	.word	0x2000ac98

004054b0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4054b0:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4054b2:	b918      	cbnz	r0, 4054bc <xTaskCheckForTimeOut+0xc>
  4054b4:	4b19      	ldr	r3, [pc, #100]	; (40551c <xTaskCheckForTimeOut+0x6c>)
  4054b6:	4798      	blx	r3
  4054b8:	bf00      	nop
  4054ba:	e7fd      	b.n	4054b8 <xTaskCheckForTimeOut+0x8>
  4054bc:	460d      	mov	r5, r1
  4054be:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4054c0:	b919      	cbnz	r1, 4054ca <xTaskCheckForTimeOut+0x1a>
  4054c2:	4b16      	ldr	r3, [pc, #88]	; (40551c <xTaskCheckForTimeOut+0x6c>)
  4054c4:	4798      	blx	r3
  4054c6:	bf00      	nop
  4054c8:	e7fd      	b.n	4054c6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
  4054ca:	4b15      	ldr	r3, [pc, #84]	; (405520 <xTaskCheckForTimeOut+0x70>)
  4054cc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4054ce:	682b      	ldr	r3, [r5, #0]
  4054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4054d4:	d018      	beq.n	405508 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4054d6:	4a13      	ldr	r2, [pc, #76]	; (405524 <xTaskCheckForTimeOut+0x74>)
  4054d8:	6812      	ldr	r2, [r2, #0]
  4054da:	6821      	ldr	r1, [r4, #0]
  4054dc:	4291      	cmp	r1, r2
  4054de:	d004      	beq.n	4054ea <xTaskCheckForTimeOut+0x3a>
  4054e0:	4a11      	ldr	r2, [pc, #68]	; (405528 <xTaskCheckForTimeOut+0x78>)
  4054e2:	6812      	ldr	r2, [r2, #0]
  4054e4:	6861      	ldr	r1, [r4, #4]
  4054e6:	4291      	cmp	r1, r2
  4054e8:	d910      	bls.n	40550c <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4054ea:	4a0f      	ldr	r2, [pc, #60]	; (405528 <xTaskCheckForTimeOut+0x78>)
  4054ec:	6811      	ldr	r1, [r2, #0]
  4054ee:	6860      	ldr	r0, [r4, #4]
  4054f0:	1a09      	subs	r1, r1, r0
  4054f2:	428b      	cmp	r3, r1
  4054f4:	d90c      	bls.n	405510 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4054f6:	6812      	ldr	r2, [r2, #0]
  4054f8:	1a12      	subs	r2, r2, r0
  4054fa:	1a9b      	subs	r3, r3, r2
  4054fc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4054fe:	4620      	mov	r0, r4
  405500:	4b0a      	ldr	r3, [pc, #40]	; (40552c <xTaskCheckForTimeOut+0x7c>)
  405502:	4798      	blx	r3
			xReturn = pdFALSE;
  405504:	2400      	movs	r4, #0
  405506:	e004      	b.n	405512 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  405508:	2400      	movs	r4, #0
  40550a:	e002      	b.n	405512 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40550c:	2401      	movs	r4, #1
  40550e:	e000      	b.n	405512 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  405510:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  405512:	4b07      	ldr	r3, [pc, #28]	; (405530 <xTaskCheckForTimeOut+0x80>)
  405514:	4798      	blx	r3

	return xReturn;
}
  405516:	4620      	mov	r0, r4
  405518:	bd38      	pop	{r3, r4, r5, pc}
  40551a:	bf00      	nop
  40551c:	0040452d 	.word	0x0040452d
  405520:	0040453d 	.word	0x0040453d
  405524:	2000ac94 	.word	0x2000ac94
  405528:	2000ac98 	.word	0x2000ac98
  40552c:	00405489 	.word	0x00405489
  405530:	0040455d 	.word	0x0040455d

00405534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  405534:	2201      	movs	r2, #1
  405536:	4b01      	ldr	r3, [pc, #4]	; (40553c <vTaskMissedYield+0x8>)
  405538:	601a      	str	r2, [r3, #0]
  40553a:	4770      	bx	lr
  40553c:	2000acb8 	.word	0x2000acb8

00405540 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  405540:	4b01      	ldr	r3, [pc, #4]	; (405548 <xTaskGetCurrentTaskHandle+0x8>)
  405542:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  405544:	4770      	bx	lr
  405546:	bf00      	nop
  405548:	2000ac7c 	.word	0x2000ac7c

0040554c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40554c:	4b05      	ldr	r3, [pc, #20]	; (405564 <xTaskGetSchedulerState+0x18>)
  40554e:	681b      	ldr	r3, [r3, #0]
  405550:	b133      	cbz	r3, 405560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  405552:	4b05      	ldr	r3, [pc, #20]	; (405568 <xTaskGetSchedulerState+0x1c>)
  405554:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  405556:	2b00      	cmp	r3, #0
  405558:	bf0c      	ite	eq
  40555a:	2001      	moveq	r0, #1
  40555c:	2002      	movne	r0, #2
  40555e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  405560:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  405562:	4770      	bx	lr
  405564:	2000abe0 	.word	0x2000abe0
  405568:	2000ac78 	.word	0x2000ac78

0040556c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40556c:	2800      	cmp	r0, #0
  40556e:	d031      	beq.n	4055d4 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  405570:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  405572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  405574:	4918      	ldr	r1, [pc, #96]	; (4055d8 <vTaskPriorityInherit+0x6c>)
  405576:	6809      	ldr	r1, [r1, #0]
  405578:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40557a:	428b      	cmp	r3, r1
  40557c:	d229      	bcs.n	4055d2 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40557e:	4916      	ldr	r1, [pc, #88]	; (4055d8 <vTaskPriorityInherit+0x6c>)
  405580:	6809      	ldr	r1, [r1, #0]
  405582:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  405584:	f1c1 0105 	rsb	r1, r1, #5
  405588:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40558a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40558e:	4913      	ldr	r1, [pc, #76]	; (4055dc <vTaskPriorityInherit+0x70>)
  405590:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  405594:	6941      	ldr	r1, [r0, #20]
  405596:	4299      	cmp	r1, r3
  405598:	d117      	bne.n	4055ca <vTaskPriorityInherit+0x5e>
  40559a:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40559c:	1d04      	adds	r4, r0, #4
  40559e:	4620      	mov	r0, r4
  4055a0:	4b0f      	ldr	r3, [pc, #60]	; (4055e0 <vTaskPriorityInherit+0x74>)
  4055a2:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4055a4:	4b0c      	ldr	r3, [pc, #48]	; (4055d8 <vTaskPriorityInherit+0x6c>)
  4055a6:	681b      	ldr	r3, [r3, #0]
  4055a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4055aa:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  4055ac:	4b0d      	ldr	r3, [pc, #52]	; (4055e4 <vTaskPriorityInherit+0x78>)
  4055ae:	681b      	ldr	r3, [r3, #0]
  4055b0:	4298      	cmp	r0, r3
  4055b2:	bf84      	itt	hi
  4055b4:	4b0b      	ldrhi	r3, [pc, #44]	; (4055e4 <vTaskPriorityInherit+0x78>)
  4055b6:	6018      	strhi	r0, [r3, #0]
  4055b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4055bc:	4621      	mov	r1, r4
  4055be:	4b07      	ldr	r3, [pc, #28]	; (4055dc <vTaskPriorityInherit+0x70>)
  4055c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4055c4:	4b08      	ldr	r3, [pc, #32]	; (4055e8 <vTaskPriorityInherit+0x7c>)
  4055c6:	4798      	blx	r3
  4055c8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4055ca:	4b03      	ldr	r3, [pc, #12]	; (4055d8 <vTaskPriorityInherit+0x6c>)
  4055cc:	681b      	ldr	r3, [r3, #0]
  4055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4055d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  4055d2:	bd38      	pop	{r3, r4, r5, pc}
  4055d4:	4770      	bx	lr
  4055d6:	bf00      	nop
  4055d8:	2000ac7c 	.word	0x2000ac7c
  4055dc:	2000ac14 	.word	0x2000ac14
  4055e0:	004044a5 	.word	0x004044a5
  4055e4:	2000ac10 	.word	0x2000ac10
  4055e8:	0040444d 	.word	0x0040444d

004055ec <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4055ec:	b1e8      	cbz	r0, 40562a <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4055ee:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4055f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4055f2:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4055f4:	4291      	cmp	r1, r2
  4055f6:	d017      	beq.n	405628 <vTaskPriorityDisinherit+0x3c>
  4055f8:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4055fa:	1d05      	adds	r5, r0, #4
  4055fc:	4628      	mov	r0, r5
  4055fe:	4b0b      	ldr	r3, [pc, #44]	; (40562c <vTaskPriorityDisinherit+0x40>)
  405600:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  405602:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  405604:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  405606:	f1c0 0305 	rsb	r3, r0, #5
  40560a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  40560c:	4b08      	ldr	r3, [pc, #32]	; (405630 <vTaskPriorityDisinherit+0x44>)
  40560e:	681b      	ldr	r3, [r3, #0]
  405610:	4298      	cmp	r0, r3
  405612:	bf84      	itt	hi
  405614:	4b06      	ldrhi	r3, [pc, #24]	; (405630 <vTaskPriorityDisinherit+0x44>)
  405616:	6018      	strhi	r0, [r3, #0]
  405618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40561c:	4629      	mov	r1, r5
  40561e:	4b05      	ldr	r3, [pc, #20]	; (405634 <vTaskPriorityDisinherit+0x48>)
  405620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405624:	4b04      	ldr	r3, [pc, #16]	; (405638 <vTaskPriorityDisinherit+0x4c>)
  405626:	4798      	blx	r3
  405628:	bd38      	pop	{r3, r4, r5, pc}
  40562a:	4770      	bx	lr
  40562c:	004044a5 	.word	0x004044a5
  405630:	2000ac10 	.word	0x2000ac10
  405634:	2000ac14 	.word	0x2000ac14
  405638:	0040444d 	.word	0x0040444d

0040563c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  40563c:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40563e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  405640:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  405642:	4291      	cmp	r1, r2
  405644:	d80a      	bhi.n	40565c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  405646:	1ad2      	subs	r2, r2, r3
  405648:	6983      	ldr	r3, [r0, #24]
  40564a:	429a      	cmp	r2, r3
  40564c:	d211      	bcs.n	405672 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40564e:	1d01      	adds	r1, r0, #4
  405650:	4b0a      	ldr	r3, [pc, #40]	; (40567c <prvInsertTimerInActiveList+0x40>)
  405652:	6818      	ldr	r0, [r3, #0]
  405654:	4b0a      	ldr	r3, [pc, #40]	; (405680 <prvInsertTimerInActiveList+0x44>)
  405656:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  405658:	2000      	movs	r0, #0
  40565a:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40565c:	429a      	cmp	r2, r3
  40565e:	d201      	bcs.n	405664 <prvInsertTimerInActiveList+0x28>
  405660:	4299      	cmp	r1, r3
  405662:	d208      	bcs.n	405676 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  405664:	1d01      	adds	r1, r0, #4
  405666:	4b07      	ldr	r3, [pc, #28]	; (405684 <prvInsertTimerInActiveList+0x48>)
  405668:	6818      	ldr	r0, [r3, #0]
  40566a:	4b05      	ldr	r3, [pc, #20]	; (405680 <prvInsertTimerInActiveList+0x44>)
  40566c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40566e:	2000      	movs	r0, #0
  405670:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  405672:	2001      	movs	r0, #1
  405674:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  405676:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  405678:	bd08      	pop	{r3, pc}
  40567a:	bf00      	nop
  40567c:	2000acf8 	.word	0x2000acf8
  405680:	00404469 	.word	0x00404469
  405684:	2000acc4 	.word	0x2000acc4

00405688 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  405688:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40568a:	4b0d      	ldr	r3, [pc, #52]	; (4056c0 <prvCheckForValidListAndQueue+0x38>)
  40568c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40568e:	4b0d      	ldr	r3, [pc, #52]	; (4056c4 <prvCheckForValidListAndQueue+0x3c>)
  405690:	681b      	ldr	r3, [r3, #0]
  405692:	b98b      	cbnz	r3, 4056b8 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  405694:	4d0c      	ldr	r5, [pc, #48]	; (4056c8 <prvCheckForValidListAndQueue+0x40>)
  405696:	4628      	mov	r0, r5
  405698:	4e0c      	ldr	r6, [pc, #48]	; (4056cc <prvCheckForValidListAndQueue+0x44>)
  40569a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40569c:	4c0c      	ldr	r4, [pc, #48]	; (4056d0 <prvCheckForValidListAndQueue+0x48>)
  40569e:	4620      	mov	r0, r4
  4056a0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4056a2:	4b0c      	ldr	r3, [pc, #48]	; (4056d4 <prvCheckForValidListAndQueue+0x4c>)
  4056a4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4056a6:	4b0c      	ldr	r3, [pc, #48]	; (4056d8 <prvCheckForValidListAndQueue+0x50>)
  4056a8:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4056aa:	2200      	movs	r2, #0
  4056ac:	210c      	movs	r1, #12
  4056ae:	2005      	movs	r0, #5
  4056b0:	4b0a      	ldr	r3, [pc, #40]	; (4056dc <prvCheckForValidListAndQueue+0x54>)
  4056b2:	4798      	blx	r3
  4056b4:	4b03      	ldr	r3, [pc, #12]	; (4056c4 <prvCheckForValidListAndQueue+0x3c>)
  4056b6:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4056b8:	4b09      	ldr	r3, [pc, #36]	; (4056e0 <prvCheckForValidListAndQueue+0x58>)
  4056ba:	4798      	blx	r3
  4056bc:	bd70      	pop	{r4, r5, r6, pc}
  4056be:	bf00      	nop
  4056c0:	0040453d 	.word	0x0040453d
  4056c4:	2000acf4 	.word	0x2000acf4
  4056c8:	2000acc8 	.word	0x2000acc8
  4056cc:	0040442d 	.word	0x0040442d
  4056d0:	2000acdc 	.word	0x2000acdc
  4056d4:	2000acc4 	.word	0x2000acc4
  4056d8:	2000acf8 	.word	0x2000acf8
  4056dc:	00404929 	.word	0x00404929
  4056e0:	0040455d 	.word	0x0040455d

004056e4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4056e4:	b510      	push	{r4, lr}
  4056e6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4056e8:	4b0b      	ldr	r3, [pc, #44]	; (405718 <xTimerCreateTimerTask+0x34>)
  4056ea:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4056ec:	4b0b      	ldr	r3, [pc, #44]	; (40571c <xTimerCreateTimerTask+0x38>)
  4056ee:	681b      	ldr	r3, [r3, #0]
  4056f0:	b163      	cbz	r3, 40570c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4056f2:	2300      	movs	r3, #0
  4056f4:	9303      	str	r3, [sp, #12]
  4056f6:	9302      	str	r3, [sp, #8]
  4056f8:	9301      	str	r3, [sp, #4]
  4056fa:	2204      	movs	r2, #4
  4056fc:	9200      	str	r2, [sp, #0]
  4056fe:	f44f 7282 	mov.w	r2, #260	; 0x104
  405702:	4907      	ldr	r1, [pc, #28]	; (405720 <xTimerCreateTimerTask+0x3c>)
  405704:	4807      	ldr	r0, [pc, #28]	; (405724 <xTimerCreateTimerTask+0x40>)
  405706:	4c08      	ldr	r4, [pc, #32]	; (405728 <xTimerCreateTimerTask+0x44>)
  405708:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  40570a:	b918      	cbnz	r0, 405714 <xTimerCreateTimerTask+0x30>
  40570c:	4b07      	ldr	r3, [pc, #28]	; (40572c <xTimerCreateTimerTask+0x48>)
  40570e:	4798      	blx	r3
  405710:	bf00      	nop
  405712:	e7fd      	b.n	405710 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  405714:	b004      	add	sp, #16
  405716:	bd10      	pop	{r4, pc}
  405718:	00405689 	.word	0x00405689
  40571c:	2000acf4 	.word	0x2000acf4
  405720:	0040fcc0 	.word	0x0040fcc0
  405724:	00405839 	.word	0x00405839
  405728:	00404d31 	.word	0x00404d31
  40572c:	0040452d 	.word	0x0040452d

00405730 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  405730:	b530      	push	{r4, r5, lr}
  405732:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  405734:	4c0f      	ldr	r4, [pc, #60]	; (405774 <xTimerGenericCommand+0x44>)
  405736:	6825      	ldr	r5, [r4, #0]
  405738:	b1cd      	cbz	r5, 40576e <xTimerGenericCommand+0x3e>
  40573a:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40573c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  40573e:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  405740:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  405742:	b96c      	cbnz	r4, 405760 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  405744:	4b0c      	ldr	r3, [pc, #48]	; (405778 <xTimerGenericCommand+0x48>)
  405746:	4798      	blx	r3
  405748:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40574a:	f04f 0300 	mov.w	r3, #0
  40574e:	bf0c      	ite	eq
  405750:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  405752:	461a      	movne	r2, r3
  405754:	a901      	add	r1, sp, #4
  405756:	4807      	ldr	r0, [pc, #28]	; (405774 <xTimerGenericCommand+0x44>)
  405758:	6800      	ldr	r0, [r0, #0]
  40575a:	4c08      	ldr	r4, [pc, #32]	; (40577c <xTimerGenericCommand+0x4c>)
  40575c:	47a0      	blx	r4
  40575e:	e007      	b.n	405770 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  405760:	2300      	movs	r3, #0
  405762:	4622      	mov	r2, r4
  405764:	a901      	add	r1, sp, #4
  405766:	4628      	mov	r0, r5
  405768:	4c05      	ldr	r4, [pc, #20]	; (405780 <xTimerGenericCommand+0x50>)
  40576a:	47a0      	blx	r4
  40576c:	e000      	b.n	405770 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  40576e:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  405770:	b005      	add	sp, #20
  405772:	bd30      	pop	{r4, r5, pc}
  405774:	2000acf4 	.word	0x2000acf4
  405778:	0040554d 	.word	0x0040554d
  40577c:	00404981 	.word	0x00404981
  405780:	00404aa1 	.word	0x00404aa1

00405784 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  405784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405788:	b082      	sub	sp, #8
  40578a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40578c:	4b22      	ldr	r3, [pc, #136]	; (405818 <prvSampleTimeNow+0x94>)
  40578e:	4798      	blx	r3
  405790:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  405792:	4b22      	ldr	r3, [pc, #136]	; (40581c <prvSampleTimeNow+0x98>)
  405794:	681b      	ldr	r3, [r3, #0]
  405796:	4298      	cmp	r0, r3
  405798:	d234      	bcs.n	405804 <prvSampleTimeNow+0x80>
  40579a:	e024      	b.n	4057e6 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40579c:	68da      	ldr	r2, [r3, #12]
  40579e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4057a2:	68db      	ldr	r3, [r3, #12]
  4057a4:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4057a6:	1d25      	adds	r5, r4, #4
  4057a8:	4628      	mov	r0, r5
  4057aa:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4057ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4057ae:	4620      	mov	r0, r4
  4057b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4057b2:	69e3      	ldr	r3, [r4, #28]
  4057b4:	2b01      	cmp	r3, #1
  4057b6:	d118      	bne.n	4057ea <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4057b8:	69a3      	ldr	r3, [r4, #24]
  4057ba:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4057bc:	459a      	cmp	sl, r3
  4057be:	d206      	bcs.n	4057ce <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4057c0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4057c2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4057c4:	4629      	mov	r1, r5
  4057c6:	6830      	ldr	r0, [r6, #0]
  4057c8:	4b15      	ldr	r3, [pc, #84]	; (405820 <prvSampleTimeNow+0x9c>)
  4057ca:	4798      	blx	r3
  4057cc:	e00d      	b.n	4057ea <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4057ce:	2100      	movs	r1, #0
  4057d0:	9100      	str	r1, [sp, #0]
  4057d2:	460b      	mov	r3, r1
  4057d4:	4652      	mov	r2, sl
  4057d6:	4620      	mov	r0, r4
  4057d8:	4c12      	ldr	r4, [pc, #72]	; (405824 <prvSampleTimeNow+0xa0>)
  4057da:	47a0      	blx	r4
				configASSERT( xResult );
  4057dc:	b928      	cbnz	r0, 4057ea <prvSampleTimeNow+0x66>
  4057de:	4b12      	ldr	r3, [pc, #72]	; (405828 <prvSampleTimeNow+0xa4>)
  4057e0:	4798      	blx	r3
  4057e2:	bf00      	nop
  4057e4:	e7fd      	b.n	4057e2 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4057e6:	4e11      	ldr	r6, [pc, #68]	; (40582c <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4057e8:	4f11      	ldr	r7, [pc, #68]	; (405830 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4057ea:	6833      	ldr	r3, [r6, #0]
  4057ec:	681a      	ldr	r2, [r3, #0]
  4057ee:	2a00      	cmp	r2, #0
  4057f0:	d1d4      	bne.n	40579c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  4057f2:	4a10      	ldr	r2, [pc, #64]	; (405834 <prvSampleTimeNow+0xb0>)
  4057f4:	6810      	ldr	r0, [r2, #0]
  4057f6:	490d      	ldr	r1, [pc, #52]	; (40582c <prvSampleTimeNow+0xa8>)
  4057f8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4057fa:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  4057fc:	2301      	movs	r3, #1
  4057fe:	f8c9 3000 	str.w	r3, [r9]
  405802:	e002      	b.n	40580a <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  405804:	2300      	movs	r3, #0
  405806:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  40580a:	4b04      	ldr	r3, [pc, #16]	; (40581c <prvSampleTimeNow+0x98>)
  40580c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  405810:	4640      	mov	r0, r8
  405812:	b002      	add	sp, #8
  405814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405818:	00404fad 	.word	0x00404fad
  40581c:	2000acf0 	.word	0x2000acf0
  405820:	00404469 	.word	0x00404469
  405824:	00405731 	.word	0x00405731
  405828:	0040452d 	.word	0x0040452d
  40582c:	2000acc4 	.word	0x2000acc4
  405830:	004044a5 	.word	0x004044a5
  405834:	2000acf8 	.word	0x2000acf8

00405838 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  405838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40583c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40583e:	4d4d      	ldr	r5, [pc, #308]	; (405974 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  405840:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4059a4 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  405844:	4b4c      	ldr	r3, [pc, #304]	; (405978 <prvTimerTask+0x140>)
  405846:	681b      	ldr	r3, [r3, #0]
  405848:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40584a:	2a00      	cmp	r2, #0
  40584c:	f000 8088 	beq.w	405960 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  405850:	68db      	ldr	r3, [r3, #12]
  405852:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  405854:	4b49      	ldr	r3, [pc, #292]	; (40597c <prvTimerTask+0x144>)
  405856:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405858:	a803      	add	r0, sp, #12
  40585a:	4b49      	ldr	r3, [pc, #292]	; (405980 <prvTimerTask+0x148>)
  40585c:	4798      	blx	r3
  40585e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  405860:	9b03      	ldr	r3, [sp, #12]
  405862:	2b00      	cmp	r3, #0
  405864:	d130      	bne.n	4058c8 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  405866:	4286      	cmp	r6, r0
  405868:	d824      	bhi.n	4058b4 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
  40586a:	4b46      	ldr	r3, [pc, #280]	; (405984 <prvTimerTask+0x14c>)
  40586c:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40586e:	4b42      	ldr	r3, [pc, #264]	; (405978 <prvTimerTask+0x140>)
  405870:	681b      	ldr	r3, [r3, #0]
  405872:	68db      	ldr	r3, [r3, #12]
  405874:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  405876:	1d20      	adds	r0, r4, #4
  405878:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40587a:	69e3      	ldr	r3, [r4, #28]
  40587c:	2b01      	cmp	r3, #1
  40587e:	d114      	bne.n	4058aa <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  405880:	69a1      	ldr	r1, [r4, #24]
  405882:	4633      	mov	r3, r6
  405884:	463a      	mov	r2, r7
  405886:	4431      	add	r1, r6
  405888:	4620      	mov	r0, r4
  40588a:	4f3f      	ldr	r7, [pc, #252]	; (405988 <prvTimerTask+0x150>)
  40588c:	47b8      	blx	r7
  40588e:	2801      	cmp	r0, #1
  405890:	d10b      	bne.n	4058aa <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  405892:	2100      	movs	r1, #0
  405894:	9100      	str	r1, [sp, #0]
  405896:	460b      	mov	r3, r1
  405898:	4632      	mov	r2, r6
  40589a:	4620      	mov	r0, r4
  40589c:	4e3b      	ldr	r6, [pc, #236]	; (40598c <prvTimerTask+0x154>)
  40589e:	47b0      	blx	r6
			configASSERT( xResult );
  4058a0:	b918      	cbnz	r0, 4058aa <prvTimerTask+0x72>
  4058a2:	4b3b      	ldr	r3, [pc, #236]	; (405990 <prvTimerTask+0x158>)
  4058a4:	4798      	blx	r3
  4058a6:	bf00      	nop
  4058a8:	e7fd      	b.n	4058a6 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4058aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4058ac:	4620      	mov	r0, r4
  4058ae:	4798      	blx	r3
  4058b0:	e00c      	b.n	4058cc <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  4058b2:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4058b4:	1bf1      	subs	r1, r6, r7
  4058b6:	6828      	ldr	r0, [r5, #0]
  4058b8:	4b36      	ldr	r3, [pc, #216]	; (405994 <prvTimerTask+0x15c>)
  4058ba:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4058bc:	4b31      	ldr	r3, [pc, #196]	; (405984 <prvTimerTask+0x14c>)
  4058be:	4798      	blx	r3
  4058c0:	b920      	cbnz	r0, 4058cc <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  4058c2:	4b35      	ldr	r3, [pc, #212]	; (405998 <prvTimerTask+0x160>)
  4058c4:	4798      	blx	r3
  4058c6:	e001      	b.n	4058cc <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  4058c8:	4b2e      	ldr	r3, [pc, #184]	; (405984 <prvTimerTask+0x14c>)
  4058ca:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4058cc:	a802      	add	r0, sp, #8
  4058ce:	4b2c      	ldr	r3, [pc, #176]	; (405980 <prvTimerTask+0x148>)
  4058d0:	4798      	blx	r3
  4058d2:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4058d4:	4e31      	ldr	r6, [pc, #196]	; (40599c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4058d6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 405988 <prvTimerTask+0x150>
  4058da:	e039      	b.n	405950 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  4058dc:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4058de:	b11c      	cbz	r4, 4058e8 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4058e0:	6963      	ldr	r3, [r4, #20]
  4058e2:	b10b      	cbz	r3, 4058e8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4058e4:	1d20      	adds	r0, r4, #4
  4058e6:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4058e8:	9b03      	ldr	r3, [sp, #12]
  4058ea:	2b02      	cmp	r3, #2
  4058ec:	d020      	beq.n	405930 <prvTimerTask+0xf8>
  4058ee:	2b03      	cmp	r3, #3
  4058f0:	d02b      	beq.n	40594a <prvTimerTask+0x112>
  4058f2:	2b00      	cmp	r3, #0
  4058f4:	d12c      	bne.n	405950 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  4058f6:	9904      	ldr	r1, [sp, #16]
  4058f8:	69a0      	ldr	r0, [r4, #24]
  4058fa:	460b      	mov	r3, r1
  4058fc:	463a      	mov	r2, r7
  4058fe:	4401      	add	r1, r0
  405900:	4620      	mov	r0, r4
  405902:	47c8      	blx	r9
  405904:	2801      	cmp	r0, #1
  405906:	d123      	bne.n	405950 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  405908:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40590a:	4620      	mov	r0, r4
  40590c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40590e:	69e3      	ldr	r3, [r4, #28]
  405910:	2b01      	cmp	r3, #1
  405912:	d11d      	bne.n	405950 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  405914:	69a2      	ldr	r2, [r4, #24]
  405916:	2100      	movs	r1, #0
  405918:	9100      	str	r1, [sp, #0]
  40591a:	460b      	mov	r3, r1
  40591c:	9804      	ldr	r0, [sp, #16]
  40591e:	4402      	add	r2, r0
  405920:	4620      	mov	r0, r4
  405922:	4c1a      	ldr	r4, [pc, #104]	; (40598c <prvTimerTask+0x154>)
  405924:	47a0      	blx	r4
						configASSERT( xResult );
  405926:	b998      	cbnz	r0, 405950 <prvTimerTask+0x118>
  405928:	4b19      	ldr	r3, [pc, #100]	; (405990 <prvTimerTask+0x158>)
  40592a:	4798      	blx	r3
  40592c:	bf00      	nop
  40592e:	e7fd      	b.n	40592c <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  405930:	9904      	ldr	r1, [sp, #16]
  405932:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  405934:	b919      	cbnz	r1, 40593e <prvTimerTask+0x106>
  405936:	4b16      	ldr	r3, [pc, #88]	; (405990 <prvTimerTask+0x158>)
  405938:	4798      	blx	r3
  40593a:	bf00      	nop
  40593c:	e7fd      	b.n	40593a <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40593e:	463b      	mov	r3, r7
  405940:	463a      	mov	r2, r7
  405942:	4439      	add	r1, r7
  405944:	4620      	mov	r0, r4
  405946:	47c8      	blx	r9
  405948:	e002      	b.n	405950 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40594a:	4620      	mov	r0, r4
  40594c:	4b14      	ldr	r3, [pc, #80]	; (4059a0 <prvTimerTask+0x168>)
  40594e:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  405950:	2300      	movs	r3, #0
  405952:	461a      	mov	r2, r3
  405954:	a903      	add	r1, sp, #12
  405956:	6828      	ldr	r0, [r5, #0]
  405958:	47b0      	blx	r6
  40595a:	2800      	cmp	r0, #0
  40595c:	d1be      	bne.n	4058dc <prvTimerTask+0xa4>
  40595e:	e771      	b.n	405844 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  405960:	4b06      	ldr	r3, [pc, #24]	; (40597c <prvTimerTask+0x144>)
  405962:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405964:	a803      	add	r0, sp, #12
  405966:	4b06      	ldr	r3, [pc, #24]	; (405980 <prvTimerTask+0x148>)
  405968:	4798      	blx	r3
  40596a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40596c:	9b03      	ldr	r3, [sp, #12]
  40596e:	2b00      	cmp	r3, #0
  405970:	d09f      	beq.n	4058b2 <prvTimerTask+0x7a>
  405972:	e7a9      	b.n	4058c8 <prvTimerTask+0x90>
  405974:	2000acf4 	.word	0x2000acf4
  405978:	2000acc4 	.word	0x2000acc4
  40597c:	00404f9d 	.word	0x00404f9d
  405980:	00405785 	.word	0x00405785
  405984:	004050ed 	.word	0x004050ed
  405988:	0040563d 	.word	0x0040563d
  40598c:	00405731 	.word	0x00405731
  405990:	0040452d 	.word	0x0040452d
  405994:	00404c8d 	.word	0x00404c8d
  405998:	0040451d 	.word	0x0040451d
  40599c:	00404b31 	.word	0x00404b31
  4059a0:	00404759 	.word	0x00404759
  4059a4:	004044a5 	.word	0x004044a5

004059a8 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  4059a8:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4059aa:	4c07      	ldr	r4, [pc, #28]	; (4059c8 <task_led+0x20>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  4059ac:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0);
		vTaskDelay(TASK_LED_DELAY);
  4059b0:	4d06      	ldr	r5, [pc, #24]	; (4059cc <task_led+0x24>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4059b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4059b4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4059b8:	bf14      	ite	ne
  4059ba:	6366      	strne	r6, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4059bc:	6326      	streq	r6, [r4, #48]	; 0x30
  4059be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4059c2:	47a8      	blx	r5
	}
  4059c4:	e7f5      	b.n	4059b2 <task_led+0xa>
  4059c6:	bf00      	nop
  4059c8:	400e1200 	.word	0x400e1200
  4059cc:	004051f1 	.word	0x004051f1

004059d0 <task_send_status>:
		m2m_wifi_handle_events(NULL);
	}
}

static void task_send_status(void *pvParameters)
{
  4059d0:	b570      	push	{r4, r5, r6, lr}
  4059d2:	b0c2      	sub	sp, #264	; 0x108
	UNUSED(pvParameters);
	int8_t iBattery = 0;
	char cName = "Test";
  4059d4:	4b17      	ldr	r3, [pc, #92]	; (405a34 <task_send_status+0x64>)
  4059d6:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
  4059da:	22ff      	movs	r2, #255	; 0xff
  4059dc:	2100      	movs	r1, #0
  4059de:	a802      	add	r0, sp, #8
  4059e0:	4b15      	ldr	r3, [pc, #84]	; (405a38 <task_send_status+0x68>)
  4059e2:	4798      	blx	r3
	vTaskDelay(10000);
  4059e4:	f242 7010 	movw	r0, #10000	; 0x2710
  4059e8:	4b14      	ldr	r3, [pc, #80]	; (405a3c <task_send_status+0x6c>)
  4059ea:	4798      	blx	r3
}

static void task_send_status(void *pvParameters)
{
	UNUSED(pvParameters);
	int8_t iBattery = 0;
  4059ec:	2400      	movs	r4, #0
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
	vTaskDelay(10000);
	for (;;) {
		if(network_generate_status_packet(status_packet, &cName, iBattery, 1, storage_space, remaining_space) == -1 ) {
  4059ee:	4d14      	ldr	r5, [pc, #80]	; (405a40 <task_send_status+0x70>)
			printf("Status message FAIL");
  4059f0:	4e14      	ldr	r6, [pc, #80]	; (405a44 <task_send_status+0x74>)
	uint16_t storage_space = 200;
	uint16_t remaining_space = 100;
	char status_packet[PACKET_SIZE] = {0};
	vTaskDelay(10000);
	for (;;) {
		if(network_generate_status_packet(status_packet, &cName, iBattery, 1, storage_space, remaining_space) == -1 ) {
  4059f2:	b2e4      	uxtb	r4, r4
  4059f4:	2364      	movs	r3, #100	; 0x64
  4059f6:	9301      	str	r3, [sp, #4]
  4059f8:	23c8      	movs	r3, #200	; 0xc8
  4059fa:	9300      	str	r3, [sp, #0]
  4059fc:	2301      	movs	r3, #1
  4059fe:	4622      	mov	r2, r4
  405a00:	f20d 1107 	addw	r1, sp, #263	; 0x107
  405a04:	a802      	add	r0, sp, #8
  405a06:	47a8      	blx	r5
  405a08:	f1b0 3fff 	cmp.w	r0, #4294967295
  405a0c:	d102      	bne.n	405a14 <task_send_status+0x44>
			printf("Status message FAIL");
  405a0e:	4630      	mov	r0, r6
  405a10:	4b0d      	ldr	r3, [pc, #52]	; (405a48 <task_send_status+0x78>)
  405a12:	4798      	blx	r3
		}
		network_send_status(status_packet, peer_address);
  405a14:	4b0d      	ldr	r3, [pc, #52]	; (405a4c <task_send_status+0x7c>)
  405a16:	6819      	ldr	r1, [r3, #0]
  405a18:	a802      	add	r0, sp, #8
  405a1a:	4b0d      	ldr	r3, [pc, #52]	; (405a50 <task_send_status+0x80>)
  405a1c:	4798      	blx	r3
		iBattery += 10;
  405a1e:	340a      	adds	r4, #10
  405a20:	b264      	sxtb	r4, r4
		if (iBattery >= 100)
		{
			iBattery = 0;
  405a22:	2c64      	cmp	r4, #100	; 0x64
  405a24:	bfa8      	it	ge
  405a26:	2400      	movge	r4, #0
		}
		
		vTaskDelay(TASK_SEND_STATUS_DELAY);
  405a28:	f640 30b8 	movw	r0, #3000	; 0xbb8
  405a2c:	4b03      	ldr	r3, [pc, #12]	; (405a3c <task_send_status+0x6c>)
  405a2e:	4798      	blx	r3
	}
  405a30:	e7df      	b.n	4059f2 <task_send_status+0x22>
  405a32:	bf00      	nop
  405a34:	0040fcc8 	.word	0x0040fcc8
  405a38:	00405f85 	.word	0x00405f85
  405a3c:	004051f1 	.word	0x004051f1
  405a40:	00400a95 	.word	0x00400a95
  405a44:	0040fcd0 	.word	0x0040fcd0
  405a48:	00405e29 	.word	0x00405e29
  405a4c:	2000ad34 	.word	0x2000ad34
  405a50:	00400295 	.word	0x00400295

00405a54 <task_control_loop>:
}

static void task_control_loop(void *pvParameters)
{
  405a54:	b530      	push	{r4, r5, lr}
  405a56:	b085      	sub	sp, #20
	UNUSED(pvParameters);
	//int8_t uiReceivedVal = 0;
	int8_t buffer[2] = {0, 0};
  405a58:	2300      	movs	r3, #0
  405a5a:	f88d 300c 	strb.w	r3, [sp, #12]
  405a5e:	f88d 300d 	strb.w	r3, [sp, #13]
	portBASE_TYPE xStatus = pdFAIL;
	volatile uiSuccesess = 0;
  405a62:	9302      	str	r3, [sp, #8]
	volatile uiFailures = 0;
  405a64:	9301      	str	r3, [sp, #4]
	for (;;)
	{
		//xStatus = xQueueReceive(xControl_Msg_Queue_handle, &uiReceivedVal, 1);
		xStatus = xQueueReceive(xControl_Msg_Queue_handle, buffer, 1);
  405a66:	4d08      	ldr	r5, [pc, #32]	; (405a88 <task_control_loop+0x34>)
  405a68:	4c08      	ldr	r4, [pc, #32]	; (405a8c <task_control_loop+0x38>)
  405a6a:	2300      	movs	r3, #0
  405a6c:	2201      	movs	r2, #1
  405a6e:	a903      	add	r1, sp, #12
  405a70:	6828      	ldr	r0, [r5, #0]
  405a72:	47a0      	blx	r4
		if(xStatus == pdPASS)
  405a74:	2801      	cmp	r0, #1
  405a76:	d103      	bne.n	405a80 <task_control_loop+0x2c>
		{
			uiSuccesess++;
  405a78:	9b02      	ldr	r3, [sp, #8]
  405a7a:	3301      	adds	r3, #1
  405a7c:	9302      	str	r3, [sp, #8]
  405a7e:	e7f4      	b.n	405a6a <task_control_loop+0x16>
			//printf("Receive task: %d \r\n", uiReceivedVal);
		}
		else
		{
			//printf("Receive task: Did not receive anything \r\n");
			uiFailures++;
  405a80:	9b01      	ldr	r3, [sp, #4]
  405a82:	3301      	adds	r3, #1
  405a84:	9301      	str	r3, [sp, #4]
  405a86:	e7f0      	b.n	405a6a <task_control_loop+0x16>
  405a88:	2000ad3c 	.word	0x2000ad3c
  405a8c:	00404b31 	.word	0x00404b31

00405a90 <task_winc>:
		vTaskDelay(TASK_LED_DELAY);
	}
}

static void task_winc(void *pvParameters)
{
  405a90:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for(;;) {
		xSemaphoreTake(xWINC_Semaphore_handle, portMAX_DELAY);
  405a92:	4e06      	ldr	r6, [pc, #24]	; (405aac <task_winc+0x1c>)
  405a94:	2400      	movs	r4, #0
  405a96:	4d06      	ldr	r5, [pc, #24]	; (405ab0 <task_winc+0x20>)
  405a98:	4623      	mov	r3, r4
  405a9a:	f04f 32ff 	mov.w	r2, #4294967295
  405a9e:	4621      	mov	r1, r4
  405aa0:	6830      	ldr	r0, [r6, #0]
  405aa2:	47a8      	blx	r5
		m2m_wifi_handle_events(NULL);
  405aa4:	4620      	mov	r0, r4
  405aa6:	4b03      	ldr	r3, [pc, #12]	; (405ab4 <task_winc+0x24>)
  405aa8:	4798      	blx	r3
  405aaa:	e7f5      	b.n	405a98 <task_winc+0x8>
  405aac:	2000ad38 	.word	0x2000ad38
  405ab0:	00404b31 	.word	0x00404b31
  405ab4:	00401bc5 	.word	0x00401bc5

00405ab8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  405aba:	b083      	sub	sp, #12
  405abc:	4605      	mov	r5, r0
  405abe:	460c      	mov	r4, r1
	uint32_t val = 0;
  405ac0:	2300      	movs	r3, #0
  405ac2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405ac4:	4b18      	ldr	r3, [pc, #96]	; (405b28 <usart_serial_getchar+0x70>)
  405ac6:	4298      	cmp	r0, r3
  405ac8:	d107      	bne.n	405ada <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  405aca:	461f      	mov	r7, r3
  405acc:	4e17      	ldr	r6, [pc, #92]	; (405b2c <usart_serial_getchar+0x74>)
  405ace:	4621      	mov	r1, r4
  405ad0:	4638      	mov	r0, r7
  405ad2:	47b0      	blx	r6
  405ad4:	2800      	cmp	r0, #0
  405ad6:	d1fa      	bne.n	405ace <usart_serial_getchar+0x16>
  405ad8:	e017      	b.n	405b0a <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405ada:	4b15      	ldr	r3, [pc, #84]	; (405b30 <usart_serial_getchar+0x78>)
  405adc:	4298      	cmp	r0, r3
  405ade:	d107      	bne.n	405af0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  405ae0:	461e      	mov	r6, r3
  405ae2:	4d12      	ldr	r5, [pc, #72]	; (405b2c <usart_serial_getchar+0x74>)
  405ae4:	4621      	mov	r1, r4
  405ae6:	4630      	mov	r0, r6
  405ae8:	47a8      	blx	r5
  405aea:	2800      	cmp	r0, #0
  405aec:	d1fa      	bne.n	405ae4 <usart_serial_getchar+0x2c>
  405aee:	e018      	b.n	405b22 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405af0:	4b10      	ldr	r3, [pc, #64]	; (405b34 <usart_serial_getchar+0x7c>)
  405af2:	4298      	cmp	r0, r3
  405af4:	d109      	bne.n	405b0a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  405af6:	461e      	mov	r6, r3
  405af8:	4d0f      	ldr	r5, [pc, #60]	; (405b38 <usart_serial_getchar+0x80>)
  405afa:	a901      	add	r1, sp, #4
  405afc:	4630      	mov	r0, r6
  405afe:	47a8      	blx	r5
  405b00:	2800      	cmp	r0, #0
  405b02:	d1fa      	bne.n	405afa <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  405b04:	9b01      	ldr	r3, [sp, #4]
  405b06:	7023      	strb	r3, [r4, #0]
  405b08:	e00b      	b.n	405b22 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405b0a:	4b0c      	ldr	r3, [pc, #48]	; (405b3c <usart_serial_getchar+0x84>)
  405b0c:	429d      	cmp	r5, r3
  405b0e:	d108      	bne.n	405b22 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  405b10:	461e      	mov	r6, r3
  405b12:	4d09      	ldr	r5, [pc, #36]	; (405b38 <usart_serial_getchar+0x80>)
  405b14:	a901      	add	r1, sp, #4
  405b16:	4630      	mov	r0, r6
  405b18:	47a8      	blx	r5
  405b1a:	2800      	cmp	r0, #0
  405b1c:	d1fa      	bne.n	405b14 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  405b1e:	9b01      	ldr	r3, [sp, #4]
  405b20:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405b22:	b003      	add	sp, #12
  405b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b26:	bf00      	nop
  405b28:	400e0600 	.word	0x400e0600
  405b2c:	00403971 	.word	0x00403971
  405b30:	400e0800 	.word	0x400e0800
  405b34:	40024000 	.word	0x40024000
  405b38:	004038c1 	.word	0x004038c1
  405b3c:	40028000 	.word	0x40028000

00405b40 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  405b40:	b570      	push	{r4, r5, r6, lr}
  405b42:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405b44:	4b18      	ldr	r3, [pc, #96]	; (405ba8 <usart_serial_putchar+0x68>)
  405b46:	4298      	cmp	r0, r3
  405b48:	d108      	bne.n	405b5c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  405b4a:	461e      	mov	r6, r3
  405b4c:	4d17      	ldr	r5, [pc, #92]	; (405bac <usart_serial_putchar+0x6c>)
  405b4e:	4621      	mov	r1, r4
  405b50:	4630      	mov	r0, r6
  405b52:	47a8      	blx	r5
  405b54:	2800      	cmp	r0, #0
  405b56:	d1fa      	bne.n	405b4e <usart_serial_putchar+0xe>
		return 1;
  405b58:	2001      	movs	r0, #1
  405b5a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405b5c:	4b14      	ldr	r3, [pc, #80]	; (405bb0 <usart_serial_putchar+0x70>)
  405b5e:	4298      	cmp	r0, r3
  405b60:	d108      	bne.n	405b74 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  405b62:	461e      	mov	r6, r3
  405b64:	4d11      	ldr	r5, [pc, #68]	; (405bac <usart_serial_putchar+0x6c>)
  405b66:	4621      	mov	r1, r4
  405b68:	4630      	mov	r0, r6
  405b6a:	47a8      	blx	r5
  405b6c:	2800      	cmp	r0, #0
  405b6e:	d1fa      	bne.n	405b66 <usart_serial_putchar+0x26>
		return 1;
  405b70:	2001      	movs	r0, #1
  405b72:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405b74:	4b0f      	ldr	r3, [pc, #60]	; (405bb4 <usart_serial_putchar+0x74>)
  405b76:	4298      	cmp	r0, r3
  405b78:	d108      	bne.n	405b8c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  405b7a:	461e      	mov	r6, r3
  405b7c:	4d0e      	ldr	r5, [pc, #56]	; (405bb8 <usart_serial_putchar+0x78>)
  405b7e:	4621      	mov	r1, r4
  405b80:	4630      	mov	r0, r6
  405b82:	47a8      	blx	r5
  405b84:	2800      	cmp	r0, #0
  405b86:	d1fa      	bne.n	405b7e <usart_serial_putchar+0x3e>
		return 1;
  405b88:	2001      	movs	r0, #1
  405b8a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405b8c:	4b0b      	ldr	r3, [pc, #44]	; (405bbc <usart_serial_putchar+0x7c>)
  405b8e:	4298      	cmp	r0, r3
  405b90:	d108      	bne.n	405ba4 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  405b92:	461e      	mov	r6, r3
  405b94:	4d08      	ldr	r5, [pc, #32]	; (405bb8 <usart_serial_putchar+0x78>)
  405b96:	4621      	mov	r1, r4
  405b98:	4630      	mov	r0, r6
  405b9a:	47a8      	blx	r5
  405b9c:	2800      	cmp	r0, #0
  405b9e:	d1fa      	bne.n	405b96 <usart_serial_putchar+0x56>
		return 1;
  405ba0:	2001      	movs	r0, #1
  405ba2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  405ba4:	2000      	movs	r0, #0
}
  405ba6:	bd70      	pop	{r4, r5, r6, pc}
  405ba8:	400e0600 	.word	0x400e0600
  405bac:	00403961 	.word	0x00403961
  405bb0:	400e0800 	.word	0x400e0800
  405bb4:	40024000 	.word	0x40024000
  405bb8:	004038ad 	.word	0x004038ad
  405bbc:	40028000 	.word	0x40028000

00405bc0 <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  405bc0:	b508      	push	{r3, lr}
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  405bc2:	4b02      	ldr	r3, [pc, #8]	; (405bcc <vApplicationMallocFailedHook+0xc>)
  405bc4:	4798      	blx	r3
  405bc6:	bf00      	nop
  405bc8:	e7fd      	b.n	405bc6 <vApplicationMallocFailedHook+0x6>
  405bca:	bf00      	nop
  405bcc:	0040452d 	.word	0x0040452d

00405bd0 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main (void)
{
  405bd0:	b500      	push	{lr}
  405bd2:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  405bd4:	4b45      	ldr	r3, [pc, #276]	; (405cec <main+0x11c>)
  405bd6:	4798      	blx	r3
	board_init();
  405bd8:	4b45      	ldr	r3, [pc, #276]	; (405cf0 <main+0x120>)
  405bda:	4798      	blx	r3
  405bdc:	2009      	movs	r0, #9
  405bde:	4d45      	ldr	r5, [pc, #276]	; (405cf4 <main+0x124>)
  405be0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405be2:	4c45      	ldr	r4, [pc, #276]	; (405cf8 <main+0x128>)
  405be4:	4b45      	ldr	r3, [pc, #276]	; (405cfc <main+0x12c>)
  405be6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405be8:	4a45      	ldr	r2, [pc, #276]	; (405d00 <main+0x130>)
  405bea:	4b46      	ldr	r3, [pc, #280]	; (405d04 <main+0x134>)
  405bec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405bee:	4a46      	ldr	r2, [pc, #280]	; (405d08 <main+0x138>)
  405bf0:	4b46      	ldr	r3, [pc, #280]	; (405d0c <main+0x13c>)
  405bf2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  405bf4:	4b46      	ldr	r3, [pc, #280]	; (405d10 <main+0x140>)
  405bf6:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  405bf8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  405bfc:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  405bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405c02:	9307      	str	r3, [sp, #28]
  405c04:	2009      	movs	r0, #9
  405c06:	47a8      	blx	r5
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  405c08:	a905      	add	r1, sp, #20
  405c0a:	4620      	mov	r0, r4
  405c0c:	4b41      	ldr	r3, [pc, #260]	; (405d14 <main+0x144>)
  405c0e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405c10:	4d41      	ldr	r5, [pc, #260]	; (405d18 <main+0x148>)
  405c12:	682b      	ldr	r3, [r5, #0]
  405c14:	2100      	movs	r1, #0
  405c16:	6898      	ldr	r0, [r3, #8]
  405c18:	4c40      	ldr	r4, [pc, #256]	; (405d1c <main+0x14c>)
  405c1a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  405c1c:	682b      	ldr	r3, [r5, #0]
  405c1e:	2100      	movs	r1, #0
  405c20:	6858      	ldr	r0, [r3, #4]
  405c22:	47a0      	blx	r4

	/* Insert application code here, after the board has been initialized. */

	
	configure_console();
	printf(STRING_HEADER);
  405c24:	483e      	ldr	r0, [pc, #248]	; (405d20 <main+0x150>)
  405c26:	4b3f      	ldr	r3, [pc, #252]	; (405d24 <main+0x154>)
  405c28:	4798      	blx	r3
	
	
#ifdef FREE_RTOS_LED_BLINKER_TASK
	/* Create LED task */
	if(xTaskCreate(task_led, "LED Task", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  405c2a:	2300      	movs	r3, #0
  405c2c:	9303      	str	r3, [sp, #12]
  405c2e:	9302      	str	r3, [sp, #8]
  405c30:	9301      	str	r3, [sp, #4]
  405c32:	9300      	str	r3, [sp, #0]
  405c34:	f44f 7280 	mov.w	r2, #256	; 0x100
  405c38:	493b      	ldr	r1, [pc, #236]	; (405d28 <main+0x158>)
  405c3a:	483c      	ldr	r0, [pc, #240]	; (405d2c <main+0x15c>)
  405c3c:	4c3c      	ldr	r4, [pc, #240]	; (405d30 <main+0x160>)
  405c3e:	47a0      	blx	r4
  405c40:	2801      	cmp	r0, #1
		printf("Failed to create LED Task"STRING_EOL);
  405c42:	bf14      	ite	ne
  405c44:	483b      	ldrne	r0, [pc, #236]	; (405d34 <main+0x164>)
	} else {
		printf("Created LED Task"STRING_EOL);
  405c46:	483c      	ldreq	r0, [pc, #240]	; (405d38 <main+0x168>)
  405c48:	4b36      	ldr	r3, [pc, #216]	; (405d24 <main+0x154>)
  405c4a:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_WINC_TASK
	/* Initialize the BSP. */
	nm_bsp_init();
  405c4c:	4b3b      	ldr	r3, [pc, #236]	; (405d3c <main+0x16c>)
  405c4e:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	wifi_init();
  405c50:	4b3b      	ldr	r3, [pc, #236]	; (405d40 <main+0x170>)
  405c52:	4798      	blx	r3
	
	/* Start Wi-Fi P2P mode */
	wifi_p2p_start();
  405c54:	4b3b      	ldr	r3, [pc, #236]	; (405d44 <main+0x174>)
  405c56:	4798      	blx	r3
	
	vSemaphoreCreateBinary(xWINC_Semaphore_handle);
  405c58:	2203      	movs	r2, #3
  405c5a:	2100      	movs	r1, #0
  405c5c:	2001      	movs	r0, #1
  405c5e:	4b3a      	ldr	r3, [pc, #232]	; (405d48 <main+0x178>)
  405c60:	4798      	blx	r3
  405c62:	4b3a      	ldr	r3, [pc, #232]	; (405d4c <main+0x17c>)
  405c64:	6018      	str	r0, [r3, #0]
  405c66:	b120      	cbz	r0, 405c72 <main+0xa2>
  405c68:	2300      	movs	r3, #0
  405c6a:	461a      	mov	r2, r3
  405c6c:	4619      	mov	r1, r3
  405c6e:	4c38      	ldr	r4, [pc, #224]	; (405d50 <main+0x180>)
  405c70:	47a0      	blx	r4
	xControl_Msg_Queue_handle = xQueueCreate(CONTROL_MSG_QUEUE_LENGTH, 2);
  405c72:	2200      	movs	r2, #0
  405c74:	2102      	movs	r1, #2
  405c76:	200a      	movs	r0, #10
  405c78:	4b33      	ldr	r3, [pc, #204]	; (405d48 <main+0x178>)
  405c7a:	4798      	blx	r3
  405c7c:	4b35      	ldr	r3, [pc, #212]	; (405d54 <main+0x184>)
  405c7e:	6018      	str	r0, [r3, #0]
	
	/* Create WINC task */
	if (xTaskCreate(task_winc, "WINC Task", TASK_WINC_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS )
  405c80:	2300      	movs	r3, #0
  405c82:	9303      	str	r3, [sp, #12]
  405c84:	9302      	str	r3, [sp, #8]
  405c86:	9301      	str	r3, [sp, #4]
  405c88:	9300      	str	r3, [sp, #0]
  405c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405c8e:	4932      	ldr	r1, [pc, #200]	; (405d58 <main+0x188>)
  405c90:	4832      	ldr	r0, [pc, #200]	; (405d5c <main+0x18c>)
  405c92:	4c27      	ldr	r4, [pc, #156]	; (405d30 <main+0x160>)
  405c94:	47a0      	blx	r4
  405c96:	2801      	cmp	r0, #1
	{
		printf("Failed to create WINC Task"STRING_EOL);
  405c98:	bf14      	ite	ne
  405c9a:	4831      	ldrne	r0, [pc, #196]	; (405d60 <main+0x190>)
	} 
	else
	{
		printf("Created WINC Task"STRING_EOL);
  405c9c:	4831      	ldreq	r0, [pc, #196]	; (405d64 <main+0x194>)
  405c9e:	4b21      	ldr	r3, [pc, #132]	; (405d24 <main+0x154>)
  405ca0:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_CONTROL_LOOP_TASK
	if (xTaskCreate(task_control_loop, "Control Loop Task", TASK_CONTROL_LOOP_STACK_SIZE, NULL, TASK_CONTROL_LOOP_PRIORITY, NULL) != pdPASS )
  405ca2:	2300      	movs	r3, #0
  405ca4:	9303      	str	r3, [sp, #12]
  405ca6:	9302      	str	r3, [sp, #8]
  405ca8:	9301      	str	r3, [sp, #4]
  405caa:	9300      	str	r3, [sp, #0]
  405cac:	f44f 7280 	mov.w	r2, #256	; 0x100
  405cb0:	492d      	ldr	r1, [pc, #180]	; (405d68 <main+0x198>)
  405cb2:	482e      	ldr	r0, [pc, #184]	; (405d6c <main+0x19c>)
  405cb4:	4c1e      	ldr	r4, [pc, #120]	; (405d30 <main+0x160>)
  405cb6:	47a0      	blx	r4
  405cb8:	2801      	cmp	r0, #1
	{
		printf("Failed to create Control Loop Task"STRING_EOL);
  405cba:	bf14      	ite	ne
  405cbc:	482c      	ldrne	r0, [pc, #176]	; (405d70 <main+0x1a0>)
	} 
	else
	{
		printf("Created Control Loop Task"STRING_EOL);
  405cbe:	482d      	ldreq	r0, [pc, #180]	; (405d74 <main+0x1a4>)
  405cc0:	4b18      	ldr	r3, [pc, #96]	; (405d24 <main+0x154>)
  405cc2:	4798      	blx	r3
		printf("Created Sender Task"STRING_EOL);
	}
#endif

#ifdef FREE_RTOS_SEND_STATUS_TASK
	if (xTaskCreate(task_send_status, "Send Status Task", TASK_SEND_STATUS_SIZE, NULL, TASK_SEND_STATUS_PRIORITY, NULL) != pdPASS )
  405cc4:	2300      	movs	r3, #0
  405cc6:	9303      	str	r3, [sp, #12]
  405cc8:	9302      	str	r3, [sp, #8]
  405cca:	9301      	str	r3, [sp, #4]
  405ccc:	9300      	str	r3, [sp, #0]
  405cce:	f44f 7280 	mov.w	r2, #256	; 0x100
  405cd2:	4929      	ldr	r1, [pc, #164]	; (405d78 <main+0x1a8>)
  405cd4:	4829      	ldr	r0, [pc, #164]	; (405d7c <main+0x1ac>)
  405cd6:	4c16      	ldr	r4, [pc, #88]	; (405d30 <main+0x160>)
  405cd8:	47a0      	blx	r4
  405cda:	2801      	cmp	r0, #1
	{
		printf("Failed to create Send Status Task"STRING_EOL);
  405cdc:	bf14      	ite	ne
  405cde:	4828      	ldrne	r0, [pc, #160]	; (405d80 <main+0x1b0>)
	}
	else
	{
		printf("Created Send Status Task"STRING_EOL);
  405ce0:	4828      	ldreq	r0, [pc, #160]	; (405d84 <main+0x1b4>)
  405ce2:	4b10      	ldr	r3, [pc, #64]	; (405d24 <main+0x154>)
  405ce4:	4798      	blx	r3
	}
#endif

#ifdef FREE_RTOS_SCHEDULER
	vTaskStartScheduler();	
  405ce6:	4b28      	ldr	r3, [pc, #160]	; (405d88 <main+0x1b8>)
  405ce8:	4798      	blx	r3
  405cea:	e7fe      	b.n	405cea <main+0x11a>
  405cec:	00403985 	.word	0x00403985
  405cf0:	004039e9 	.word	0x004039e9
  405cf4:	00404111 	.word	0x00404111
  405cf8:	400e0800 	.word	0x400e0800
  405cfc:	2000ae10 	.word	0x2000ae10
  405d00:	00405b41 	.word	0x00405b41
  405d04:	2000ae0c 	.word	0x2000ae0c
  405d08:	00405ab9 	.word	0x00405ab9
  405d0c:	2000ae08 	.word	0x2000ae08
  405d10:	07270e00 	.word	0x07270e00
  405d14:	00403929 	.word	0x00403929
  405d18:	20000458 	.word	0x20000458
  405d1c:	00406021 	.word	0x00406021
  405d20:	0040fcfc 	.word	0x0040fcfc
  405d24:	00405e29 	.word	0x00405e29
  405d28:	0040fd68 	.word	0x0040fd68
  405d2c:	004059a9 	.word	0x004059a9
  405d30:	00404d31 	.word	0x00404d31
  405d34:	0040fd74 	.word	0x0040fd74
  405d38:	0040fd90 	.word	0x0040fd90
  405d3c:	00400d45 	.word	0x00400d45
  405d40:	004007b9 	.word	0x004007b9
  405d44:	0040081d 	.word	0x0040081d
  405d48:	00404929 	.word	0x00404929
  405d4c:	2000ad38 	.word	0x2000ad38
  405d50:	00404981 	.word	0x00404981
  405d54:	2000ad3c 	.word	0x2000ad3c
  405d58:	0040fda4 	.word	0x0040fda4
  405d5c:	00405a91 	.word	0x00405a91
  405d60:	0040fdb0 	.word	0x0040fdb0
  405d64:	0040fdd0 	.word	0x0040fdd0
  405d68:	0040fde4 	.word	0x0040fde4
  405d6c:	00405a55 	.word	0x00405a55
  405d70:	0040fdf8 	.word	0x0040fdf8
  405d74:	0040fe20 	.word	0x0040fe20
  405d78:	0040fe3c 	.word	0x0040fe3c
  405d7c:	004059d1 	.word	0x004059d1
  405d80:	0040fe50 	.word	0x0040fe50
  405d84:	0040fe74 	.word	0x0040fe74
  405d88:	00404f35 	.word	0x00404f35

00405d8c <__aeabi_f2iz>:
  405d8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405d90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405d94:	d30f      	bcc.n	405db6 <__aeabi_f2iz+0x2a>
  405d96:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405d9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405d9e:	d90d      	bls.n	405dbc <__aeabi_f2iz+0x30>
  405da0:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405da8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405dac:	fa23 f002 	lsr.w	r0, r3, r2
  405db0:	bf18      	it	ne
  405db2:	4240      	negne	r0, r0
  405db4:	4770      	bx	lr
  405db6:	f04f 0000 	mov.w	r0, #0
  405dba:	4770      	bx	lr
  405dbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405dc0:	d101      	bne.n	405dc6 <__aeabi_f2iz+0x3a>
  405dc2:	0242      	lsls	r2, r0, #9
  405dc4:	d105      	bne.n	405dd2 <__aeabi_f2iz+0x46>
  405dc6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405dca:	bf08      	it	eq
  405dcc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405dd0:	4770      	bx	lr
  405dd2:	f04f 0000 	mov.w	r0, #0
  405dd6:	4770      	bx	lr

00405dd8 <__libc_init_array>:
  405dd8:	b570      	push	{r4, r5, r6, lr}
  405dda:	4e0f      	ldr	r6, [pc, #60]	; (405e18 <__libc_init_array+0x40>)
  405ddc:	4d0f      	ldr	r5, [pc, #60]	; (405e1c <__libc_init_array+0x44>)
  405dde:	1b76      	subs	r6, r6, r5
  405de0:	10b6      	asrs	r6, r6, #2
  405de2:	bf18      	it	ne
  405de4:	2400      	movne	r4, #0
  405de6:	d005      	beq.n	405df4 <__libc_init_array+0x1c>
  405de8:	3401      	adds	r4, #1
  405dea:	f855 3b04 	ldr.w	r3, [r5], #4
  405dee:	4798      	blx	r3
  405df0:	42a6      	cmp	r6, r4
  405df2:	d1f9      	bne.n	405de8 <__libc_init_array+0x10>
  405df4:	4e0a      	ldr	r6, [pc, #40]	; (405e20 <__libc_init_array+0x48>)
  405df6:	4d0b      	ldr	r5, [pc, #44]	; (405e24 <__libc_init_array+0x4c>)
  405df8:	1b76      	subs	r6, r6, r5
  405dfa:	f00a fa4f 	bl	41029c <_init>
  405dfe:	10b6      	asrs	r6, r6, #2
  405e00:	bf18      	it	ne
  405e02:	2400      	movne	r4, #0
  405e04:	d006      	beq.n	405e14 <__libc_init_array+0x3c>
  405e06:	3401      	adds	r4, #1
  405e08:	f855 3b04 	ldr.w	r3, [r5], #4
  405e0c:	4798      	blx	r3
  405e0e:	42a6      	cmp	r6, r4
  405e10:	d1f9      	bne.n	405e06 <__libc_init_array+0x2e>
  405e12:	bd70      	pop	{r4, r5, r6, pc}
  405e14:	bd70      	pop	{r4, r5, r6, pc}
  405e16:	bf00      	nop
  405e18:	004102a8 	.word	0x004102a8
  405e1c:	004102a8 	.word	0x004102a8
  405e20:	004102b0 	.word	0x004102b0
  405e24:	004102a8 	.word	0x004102a8

00405e28 <iprintf>:
  405e28:	b40f      	push	{r0, r1, r2, r3}
  405e2a:	b500      	push	{lr}
  405e2c:	4907      	ldr	r1, [pc, #28]	; (405e4c <iprintf+0x24>)
  405e2e:	b083      	sub	sp, #12
  405e30:	ab04      	add	r3, sp, #16
  405e32:	6808      	ldr	r0, [r1, #0]
  405e34:	f853 2b04 	ldr.w	r2, [r3], #4
  405e38:	6881      	ldr	r1, [r0, #8]
  405e3a:	9301      	str	r3, [sp, #4]
  405e3c:	f003 f9a4 	bl	409188 <_vfiprintf_r>
  405e40:	b003      	add	sp, #12
  405e42:	f85d eb04 	ldr.w	lr, [sp], #4
  405e46:	b004      	add	sp, #16
  405e48:	4770      	bx	lr
  405e4a:	bf00      	nop
  405e4c:	20000458 	.word	0x20000458

00405e50 <memcpy>:
  405e50:	4684      	mov	ip, r0
  405e52:	ea41 0300 	orr.w	r3, r1, r0
  405e56:	f013 0303 	ands.w	r3, r3, #3
  405e5a:	d16d      	bne.n	405f38 <memcpy+0xe8>
  405e5c:	3a40      	subs	r2, #64	; 0x40
  405e5e:	d341      	bcc.n	405ee4 <memcpy+0x94>
  405e60:	f851 3b04 	ldr.w	r3, [r1], #4
  405e64:	f840 3b04 	str.w	r3, [r0], #4
  405e68:	f851 3b04 	ldr.w	r3, [r1], #4
  405e6c:	f840 3b04 	str.w	r3, [r0], #4
  405e70:	f851 3b04 	ldr.w	r3, [r1], #4
  405e74:	f840 3b04 	str.w	r3, [r0], #4
  405e78:	f851 3b04 	ldr.w	r3, [r1], #4
  405e7c:	f840 3b04 	str.w	r3, [r0], #4
  405e80:	f851 3b04 	ldr.w	r3, [r1], #4
  405e84:	f840 3b04 	str.w	r3, [r0], #4
  405e88:	f851 3b04 	ldr.w	r3, [r1], #4
  405e8c:	f840 3b04 	str.w	r3, [r0], #4
  405e90:	f851 3b04 	ldr.w	r3, [r1], #4
  405e94:	f840 3b04 	str.w	r3, [r0], #4
  405e98:	f851 3b04 	ldr.w	r3, [r1], #4
  405e9c:	f840 3b04 	str.w	r3, [r0], #4
  405ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ea4:	f840 3b04 	str.w	r3, [r0], #4
  405ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  405eac:	f840 3b04 	str.w	r3, [r0], #4
  405eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  405eb4:	f840 3b04 	str.w	r3, [r0], #4
  405eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ebc:	f840 3b04 	str.w	r3, [r0], #4
  405ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ec4:	f840 3b04 	str.w	r3, [r0], #4
  405ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ecc:	f840 3b04 	str.w	r3, [r0], #4
  405ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ed4:	f840 3b04 	str.w	r3, [r0], #4
  405ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  405edc:	f840 3b04 	str.w	r3, [r0], #4
  405ee0:	3a40      	subs	r2, #64	; 0x40
  405ee2:	d2bd      	bcs.n	405e60 <memcpy+0x10>
  405ee4:	3230      	adds	r2, #48	; 0x30
  405ee6:	d311      	bcc.n	405f0c <memcpy+0xbc>
  405ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  405eec:	f840 3b04 	str.w	r3, [r0], #4
  405ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ef4:	f840 3b04 	str.w	r3, [r0], #4
  405ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  405efc:	f840 3b04 	str.w	r3, [r0], #4
  405f00:	f851 3b04 	ldr.w	r3, [r1], #4
  405f04:	f840 3b04 	str.w	r3, [r0], #4
  405f08:	3a10      	subs	r2, #16
  405f0a:	d2ed      	bcs.n	405ee8 <memcpy+0x98>
  405f0c:	320c      	adds	r2, #12
  405f0e:	d305      	bcc.n	405f1c <memcpy+0xcc>
  405f10:	f851 3b04 	ldr.w	r3, [r1], #4
  405f14:	f840 3b04 	str.w	r3, [r0], #4
  405f18:	3a04      	subs	r2, #4
  405f1a:	d2f9      	bcs.n	405f10 <memcpy+0xc0>
  405f1c:	3204      	adds	r2, #4
  405f1e:	d008      	beq.n	405f32 <memcpy+0xe2>
  405f20:	07d2      	lsls	r2, r2, #31
  405f22:	bf1c      	itt	ne
  405f24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f28:	f800 3b01 	strbne.w	r3, [r0], #1
  405f2c:	d301      	bcc.n	405f32 <memcpy+0xe2>
  405f2e:	880b      	ldrh	r3, [r1, #0]
  405f30:	8003      	strh	r3, [r0, #0]
  405f32:	4660      	mov	r0, ip
  405f34:	4770      	bx	lr
  405f36:	bf00      	nop
  405f38:	2a08      	cmp	r2, #8
  405f3a:	d313      	bcc.n	405f64 <memcpy+0x114>
  405f3c:	078b      	lsls	r3, r1, #30
  405f3e:	d08d      	beq.n	405e5c <memcpy+0xc>
  405f40:	f010 0303 	ands.w	r3, r0, #3
  405f44:	d08a      	beq.n	405e5c <memcpy+0xc>
  405f46:	f1c3 0304 	rsb	r3, r3, #4
  405f4a:	1ad2      	subs	r2, r2, r3
  405f4c:	07db      	lsls	r3, r3, #31
  405f4e:	bf1c      	itt	ne
  405f50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405f54:	f800 3b01 	strbne.w	r3, [r0], #1
  405f58:	d380      	bcc.n	405e5c <memcpy+0xc>
  405f5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405f5e:	f820 3b02 	strh.w	r3, [r0], #2
  405f62:	e77b      	b.n	405e5c <memcpy+0xc>
  405f64:	3a04      	subs	r2, #4
  405f66:	d3d9      	bcc.n	405f1c <memcpy+0xcc>
  405f68:	3a01      	subs	r2, #1
  405f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405f6e:	f800 3b01 	strb.w	r3, [r0], #1
  405f72:	d2f9      	bcs.n	405f68 <memcpy+0x118>
  405f74:	780b      	ldrb	r3, [r1, #0]
  405f76:	7003      	strb	r3, [r0, #0]
  405f78:	784b      	ldrb	r3, [r1, #1]
  405f7a:	7043      	strb	r3, [r0, #1]
  405f7c:	788b      	ldrb	r3, [r1, #2]
  405f7e:	7083      	strb	r3, [r0, #2]
  405f80:	4660      	mov	r0, ip
  405f82:	4770      	bx	lr

00405f84 <memset>:
  405f84:	b470      	push	{r4, r5, r6}
  405f86:	0784      	lsls	r4, r0, #30
  405f88:	d046      	beq.n	406018 <memset+0x94>
  405f8a:	1e54      	subs	r4, r2, #1
  405f8c:	2a00      	cmp	r2, #0
  405f8e:	d041      	beq.n	406014 <memset+0x90>
  405f90:	b2cd      	uxtb	r5, r1
  405f92:	4603      	mov	r3, r0
  405f94:	e002      	b.n	405f9c <memset+0x18>
  405f96:	1e62      	subs	r2, r4, #1
  405f98:	b3e4      	cbz	r4, 406014 <memset+0x90>
  405f9a:	4614      	mov	r4, r2
  405f9c:	f803 5b01 	strb.w	r5, [r3], #1
  405fa0:	079a      	lsls	r2, r3, #30
  405fa2:	d1f8      	bne.n	405f96 <memset+0x12>
  405fa4:	2c03      	cmp	r4, #3
  405fa6:	d92e      	bls.n	406006 <memset+0x82>
  405fa8:	b2cd      	uxtb	r5, r1
  405faa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405fae:	2c0f      	cmp	r4, #15
  405fb0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405fb4:	d919      	bls.n	405fea <memset+0x66>
  405fb6:	f103 0210 	add.w	r2, r3, #16
  405fba:	4626      	mov	r6, r4
  405fbc:	3e10      	subs	r6, #16
  405fbe:	2e0f      	cmp	r6, #15
  405fc0:	f842 5c10 	str.w	r5, [r2, #-16]
  405fc4:	f842 5c0c 	str.w	r5, [r2, #-12]
  405fc8:	f842 5c08 	str.w	r5, [r2, #-8]
  405fcc:	f842 5c04 	str.w	r5, [r2, #-4]
  405fd0:	f102 0210 	add.w	r2, r2, #16
  405fd4:	d8f2      	bhi.n	405fbc <memset+0x38>
  405fd6:	f1a4 0210 	sub.w	r2, r4, #16
  405fda:	f022 020f 	bic.w	r2, r2, #15
  405fde:	f004 040f 	and.w	r4, r4, #15
  405fe2:	3210      	adds	r2, #16
  405fe4:	2c03      	cmp	r4, #3
  405fe6:	4413      	add	r3, r2
  405fe8:	d90d      	bls.n	406006 <memset+0x82>
  405fea:	461e      	mov	r6, r3
  405fec:	4622      	mov	r2, r4
  405fee:	3a04      	subs	r2, #4
  405ff0:	2a03      	cmp	r2, #3
  405ff2:	f846 5b04 	str.w	r5, [r6], #4
  405ff6:	d8fa      	bhi.n	405fee <memset+0x6a>
  405ff8:	1f22      	subs	r2, r4, #4
  405ffa:	f022 0203 	bic.w	r2, r2, #3
  405ffe:	3204      	adds	r2, #4
  406000:	4413      	add	r3, r2
  406002:	f004 0403 	and.w	r4, r4, #3
  406006:	b12c      	cbz	r4, 406014 <memset+0x90>
  406008:	b2c9      	uxtb	r1, r1
  40600a:	441c      	add	r4, r3
  40600c:	f803 1b01 	strb.w	r1, [r3], #1
  406010:	42a3      	cmp	r3, r4
  406012:	d1fb      	bne.n	40600c <memset+0x88>
  406014:	bc70      	pop	{r4, r5, r6}
  406016:	4770      	bx	lr
  406018:	4614      	mov	r4, r2
  40601a:	4603      	mov	r3, r0
  40601c:	e7c2      	b.n	405fa4 <memset+0x20>
  40601e:	bf00      	nop

00406020 <setbuf>:
  406020:	2900      	cmp	r1, #0
  406022:	bf0c      	ite	eq
  406024:	2202      	moveq	r2, #2
  406026:	2200      	movne	r2, #0
  406028:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40602c:	f000 b800 	b.w	406030 <setvbuf>

00406030 <setvbuf>:
  406030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406034:	4c51      	ldr	r4, [pc, #324]	; (40617c <setvbuf+0x14c>)
  406036:	6825      	ldr	r5, [r4, #0]
  406038:	b083      	sub	sp, #12
  40603a:	4604      	mov	r4, r0
  40603c:	460f      	mov	r7, r1
  40603e:	4690      	mov	r8, r2
  406040:	461e      	mov	r6, r3
  406042:	b115      	cbz	r5, 40604a <setvbuf+0x1a>
  406044:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406046:	2b00      	cmp	r3, #0
  406048:	d079      	beq.n	40613e <setvbuf+0x10e>
  40604a:	f1b8 0f02 	cmp.w	r8, #2
  40604e:	d004      	beq.n	40605a <setvbuf+0x2a>
  406050:	f1b8 0f01 	cmp.w	r8, #1
  406054:	d87f      	bhi.n	406156 <setvbuf+0x126>
  406056:	2e00      	cmp	r6, #0
  406058:	db7d      	blt.n	406156 <setvbuf+0x126>
  40605a:	4621      	mov	r1, r4
  40605c:	4628      	mov	r0, r5
  40605e:	f005 f89f 	bl	40b1a0 <_fflush_r>
  406062:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406064:	b141      	cbz	r1, 406078 <setvbuf+0x48>
  406066:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40606a:	4299      	cmp	r1, r3
  40606c:	d002      	beq.n	406074 <setvbuf+0x44>
  40606e:	4628      	mov	r0, r5
  406070:	f005 f9f4 	bl	40b45c <_free_r>
  406074:	2300      	movs	r3, #0
  406076:	6323      	str	r3, [r4, #48]	; 0x30
  406078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40607c:	2200      	movs	r2, #0
  40607e:	61a2      	str	r2, [r4, #24]
  406080:	6062      	str	r2, [r4, #4]
  406082:	061a      	lsls	r2, r3, #24
  406084:	d454      	bmi.n	406130 <setvbuf+0x100>
  406086:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40608a:	f023 0303 	bic.w	r3, r3, #3
  40608e:	f1b8 0f02 	cmp.w	r8, #2
  406092:	81a3      	strh	r3, [r4, #12]
  406094:	d039      	beq.n	40610a <setvbuf+0xda>
  406096:	ab01      	add	r3, sp, #4
  406098:	466a      	mov	r2, sp
  40609a:	4621      	mov	r1, r4
  40609c:	4628      	mov	r0, r5
  40609e:	f006 f833 	bl	40c108 <__swhatbuf_r>
  4060a2:	89a3      	ldrh	r3, [r4, #12]
  4060a4:	4318      	orrs	r0, r3
  4060a6:	81a0      	strh	r0, [r4, #12]
  4060a8:	b326      	cbz	r6, 4060f4 <setvbuf+0xc4>
  4060aa:	b327      	cbz	r7, 4060f6 <setvbuf+0xc6>
  4060ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4060ae:	2b00      	cmp	r3, #0
  4060b0:	d04d      	beq.n	40614e <setvbuf+0x11e>
  4060b2:	9b00      	ldr	r3, [sp, #0]
  4060b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4060b8:	6027      	str	r7, [r4, #0]
  4060ba:	429e      	cmp	r6, r3
  4060bc:	bf1c      	itt	ne
  4060be:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4060c2:	81a0      	strhne	r0, [r4, #12]
  4060c4:	f1b8 0f01 	cmp.w	r8, #1
  4060c8:	bf08      	it	eq
  4060ca:	f040 0001 	orreq.w	r0, r0, #1
  4060ce:	b283      	uxth	r3, r0
  4060d0:	bf08      	it	eq
  4060d2:	81a0      	strheq	r0, [r4, #12]
  4060d4:	f003 0008 	and.w	r0, r3, #8
  4060d8:	b280      	uxth	r0, r0
  4060da:	6127      	str	r7, [r4, #16]
  4060dc:	6166      	str	r6, [r4, #20]
  4060de:	b318      	cbz	r0, 406128 <setvbuf+0xf8>
  4060e0:	f013 0001 	ands.w	r0, r3, #1
  4060e4:	d02f      	beq.n	406146 <setvbuf+0x116>
  4060e6:	2000      	movs	r0, #0
  4060e8:	4276      	negs	r6, r6
  4060ea:	61a6      	str	r6, [r4, #24]
  4060ec:	60a0      	str	r0, [r4, #8]
  4060ee:	b003      	add	sp, #12
  4060f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4060f4:	9e00      	ldr	r6, [sp, #0]
  4060f6:	4630      	mov	r0, r6
  4060f8:	f006 f87a 	bl	40c1f0 <malloc>
  4060fc:	4607      	mov	r7, r0
  4060fe:	b368      	cbz	r0, 40615c <setvbuf+0x12c>
  406100:	89a3      	ldrh	r3, [r4, #12]
  406102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406106:	81a3      	strh	r3, [r4, #12]
  406108:	e7d0      	b.n	4060ac <setvbuf+0x7c>
  40610a:	2000      	movs	r0, #0
  40610c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406110:	f043 0302 	orr.w	r3, r3, #2
  406114:	2500      	movs	r5, #0
  406116:	2101      	movs	r1, #1
  406118:	81a3      	strh	r3, [r4, #12]
  40611a:	60a5      	str	r5, [r4, #8]
  40611c:	6022      	str	r2, [r4, #0]
  40611e:	6122      	str	r2, [r4, #16]
  406120:	6161      	str	r1, [r4, #20]
  406122:	b003      	add	sp, #12
  406124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406128:	60a0      	str	r0, [r4, #8]
  40612a:	b003      	add	sp, #12
  40612c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406130:	6921      	ldr	r1, [r4, #16]
  406132:	4628      	mov	r0, r5
  406134:	f005 f992 	bl	40b45c <_free_r>
  406138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40613c:	e7a3      	b.n	406086 <setvbuf+0x56>
  40613e:	4628      	mov	r0, r5
  406140:	f005 f8c2 	bl	40b2c8 <__sinit>
  406144:	e781      	b.n	40604a <setvbuf+0x1a>
  406146:	60a6      	str	r6, [r4, #8]
  406148:	b003      	add	sp, #12
  40614a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40614e:	4628      	mov	r0, r5
  406150:	f005 f8ba 	bl	40b2c8 <__sinit>
  406154:	e7ad      	b.n	4060b2 <setvbuf+0x82>
  406156:	f04f 30ff 	mov.w	r0, #4294967295
  40615a:	e7e2      	b.n	406122 <setvbuf+0xf2>
  40615c:	f8dd 9000 	ldr.w	r9, [sp]
  406160:	45b1      	cmp	r9, r6
  406162:	d006      	beq.n	406172 <setvbuf+0x142>
  406164:	4648      	mov	r0, r9
  406166:	f006 f843 	bl	40c1f0 <malloc>
  40616a:	4607      	mov	r7, r0
  40616c:	b108      	cbz	r0, 406172 <setvbuf+0x142>
  40616e:	464e      	mov	r6, r9
  406170:	e7c6      	b.n	406100 <setvbuf+0xd0>
  406172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406176:	f04f 30ff 	mov.w	r0, #4294967295
  40617a:	e7c7      	b.n	40610c <setvbuf+0xdc>
  40617c:	20000458 	.word	0x20000458

00406180 <sprintf>:
  406180:	b40e      	push	{r1, r2, r3}
  406182:	b5f0      	push	{r4, r5, r6, r7, lr}
  406184:	b09c      	sub	sp, #112	; 0x70
  406186:	ab21      	add	r3, sp, #132	; 0x84
  406188:	490f      	ldr	r1, [pc, #60]	; (4061c8 <sprintf+0x48>)
  40618a:	f853 2b04 	ldr.w	r2, [r3], #4
  40618e:	9301      	str	r3, [sp, #4]
  406190:	4605      	mov	r5, r0
  406192:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406196:	6808      	ldr	r0, [r1, #0]
  406198:	9502      	str	r5, [sp, #8]
  40619a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40619e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4061a2:	a902      	add	r1, sp, #8
  4061a4:	9506      	str	r5, [sp, #24]
  4061a6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4061aa:	9404      	str	r4, [sp, #16]
  4061ac:	9407      	str	r4, [sp, #28]
  4061ae:	f8ad 6016 	strh.w	r6, [sp, #22]
  4061b2:	f001 fc5f 	bl	407a74 <_svfprintf_r>
  4061b6:	9b02      	ldr	r3, [sp, #8]
  4061b8:	2200      	movs	r2, #0
  4061ba:	701a      	strb	r2, [r3, #0]
  4061bc:	b01c      	add	sp, #112	; 0x70
  4061be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4061c2:	b003      	add	sp, #12
  4061c4:	4770      	bx	lr
  4061c6:	bf00      	nop
  4061c8:	20000458 	.word	0x20000458

004061cc <strchr>:
  4061cc:	b470      	push	{r4, r5, r6}
  4061ce:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  4061d2:	d034      	beq.n	40623e <strchr+0x72>
  4061d4:	0785      	lsls	r5, r0, #30
  4061d6:	d00f      	beq.n	4061f8 <strchr+0x2c>
  4061d8:	7803      	ldrb	r3, [r0, #0]
  4061da:	2b00      	cmp	r3, #0
  4061dc:	d05a      	beq.n	406294 <strchr+0xc8>
  4061de:	429c      	cmp	r4, r3
  4061e0:	d02b      	beq.n	40623a <strchr+0x6e>
  4061e2:	1c43      	adds	r3, r0, #1
  4061e4:	e005      	b.n	4061f2 <strchr+0x26>
  4061e6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4061ea:	2a00      	cmp	r2, #0
  4061ec:	d04f      	beq.n	40628e <strchr+0xc2>
  4061ee:	4294      	cmp	r4, r2
  4061f0:	d023      	beq.n	40623a <strchr+0x6e>
  4061f2:	079a      	lsls	r2, r3, #30
  4061f4:	4618      	mov	r0, r3
  4061f6:	d1f6      	bne.n	4061e6 <strchr+0x1a>
  4061f8:	020e      	lsls	r6, r1, #8
  4061fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  4061fe:	4326      	orrs	r6, r4
  406200:	6803      	ldr	r3, [r0, #0]
  406202:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  406206:	e001      	b.n	40620c <strchr+0x40>
  406208:	f850 3f04 	ldr.w	r3, [r0, #4]!
  40620c:	ea86 0503 	eor.w	r5, r6, r3
  406210:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406214:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  406218:	ea22 0205 	bic.w	r2, r2, r5
  40621c:	ea21 0303 	bic.w	r3, r1, r3
  406220:	4313      	orrs	r3, r2
  406222:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  406226:	d0ef      	beq.n	406208 <strchr+0x3c>
  406228:	7803      	ldrb	r3, [r0, #0]
  40622a:	b923      	cbnz	r3, 406236 <strchr+0x6a>
  40622c:	e032      	b.n	406294 <strchr+0xc8>
  40622e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406232:	2b00      	cmp	r3, #0
  406234:	d02e      	beq.n	406294 <strchr+0xc8>
  406236:	429c      	cmp	r4, r3
  406238:	d1f9      	bne.n	40622e <strchr+0x62>
  40623a:	bc70      	pop	{r4, r5, r6}
  40623c:	4770      	bx	lr
  40623e:	0784      	lsls	r4, r0, #30
  406240:	d00b      	beq.n	40625a <strchr+0x8e>
  406242:	7803      	ldrb	r3, [r0, #0]
  406244:	2b00      	cmp	r3, #0
  406246:	d0f8      	beq.n	40623a <strchr+0x6e>
  406248:	1c43      	adds	r3, r0, #1
  40624a:	e003      	b.n	406254 <strchr+0x88>
  40624c:	7802      	ldrb	r2, [r0, #0]
  40624e:	3301      	adds	r3, #1
  406250:	2a00      	cmp	r2, #0
  406252:	d0f2      	beq.n	40623a <strchr+0x6e>
  406254:	0799      	lsls	r1, r3, #30
  406256:	4618      	mov	r0, r3
  406258:	d1f8      	bne.n	40624c <strchr+0x80>
  40625a:	6802      	ldr	r2, [r0, #0]
  40625c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  406260:	ea23 0302 	bic.w	r3, r3, r2
  406264:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  406268:	d108      	bne.n	40627c <strchr+0xb0>
  40626a:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40626e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  406272:	ea23 0302 	bic.w	r3, r3, r2
  406276:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40627a:	d0f6      	beq.n	40626a <strchr+0x9e>
  40627c:	7803      	ldrb	r3, [r0, #0]
  40627e:	2b00      	cmp	r3, #0
  406280:	d0db      	beq.n	40623a <strchr+0x6e>
  406282:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406286:	2b00      	cmp	r3, #0
  406288:	d1fb      	bne.n	406282 <strchr+0xb6>
  40628a:	bc70      	pop	{r4, r5, r6}
  40628c:	4770      	bx	lr
  40628e:	4610      	mov	r0, r2
  406290:	bc70      	pop	{r4, r5, r6}
  406292:	4770      	bx	lr
  406294:	4618      	mov	r0, r3
  406296:	bc70      	pop	{r4, r5, r6}
  406298:	4770      	bx	lr
  40629a:	bf00      	nop
	...

004062c0 <strlen>:
  4062c0:	f890 f000 	pld	[r0]
  4062c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4062c8:	f020 0107 	bic.w	r1, r0, #7
  4062cc:	f06f 0c00 	mvn.w	ip, #0
  4062d0:	f010 0407 	ands.w	r4, r0, #7
  4062d4:	f891 f020 	pld	[r1, #32]
  4062d8:	f040 8049 	bne.w	40636e <strlen+0xae>
  4062dc:	f04f 0400 	mov.w	r4, #0
  4062e0:	f06f 0007 	mvn.w	r0, #7
  4062e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4062e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4062ec:	f100 0008 	add.w	r0, r0, #8
  4062f0:	fa82 f24c 	uadd8	r2, r2, ip
  4062f4:	faa4 f28c 	sel	r2, r4, ip
  4062f8:	fa83 f34c 	uadd8	r3, r3, ip
  4062fc:	faa2 f38c 	sel	r3, r2, ip
  406300:	bb4b      	cbnz	r3, 406356 <strlen+0x96>
  406302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406306:	fa82 f24c 	uadd8	r2, r2, ip
  40630a:	f100 0008 	add.w	r0, r0, #8
  40630e:	faa4 f28c 	sel	r2, r4, ip
  406312:	fa83 f34c 	uadd8	r3, r3, ip
  406316:	faa2 f38c 	sel	r3, r2, ip
  40631a:	b9e3      	cbnz	r3, 406356 <strlen+0x96>
  40631c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406320:	fa82 f24c 	uadd8	r2, r2, ip
  406324:	f100 0008 	add.w	r0, r0, #8
  406328:	faa4 f28c 	sel	r2, r4, ip
  40632c:	fa83 f34c 	uadd8	r3, r3, ip
  406330:	faa2 f38c 	sel	r3, r2, ip
  406334:	b97b      	cbnz	r3, 406356 <strlen+0x96>
  406336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40633a:	f101 0120 	add.w	r1, r1, #32
  40633e:	fa82 f24c 	uadd8	r2, r2, ip
  406342:	f100 0008 	add.w	r0, r0, #8
  406346:	faa4 f28c 	sel	r2, r4, ip
  40634a:	fa83 f34c 	uadd8	r3, r3, ip
  40634e:	faa2 f38c 	sel	r3, r2, ip
  406352:	2b00      	cmp	r3, #0
  406354:	d0c6      	beq.n	4062e4 <strlen+0x24>
  406356:	2a00      	cmp	r2, #0
  406358:	bf04      	itt	eq
  40635a:	3004      	addeq	r0, #4
  40635c:	461a      	moveq	r2, r3
  40635e:	ba12      	rev	r2, r2
  406360:	fab2 f282 	clz	r2, r2
  406364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40636c:	4770      	bx	lr
  40636e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406372:	f004 0503 	and.w	r5, r4, #3
  406376:	f1c4 0000 	rsb	r0, r4, #0
  40637a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40637e:	f014 0f04 	tst.w	r4, #4
  406382:	f891 f040 	pld	[r1, #64]	; 0x40
  406386:	fa0c f505 	lsl.w	r5, ip, r5
  40638a:	ea62 0205 	orn	r2, r2, r5
  40638e:	bf1c      	itt	ne
  406390:	ea63 0305 	ornne	r3, r3, r5
  406394:	4662      	movne	r2, ip
  406396:	f04f 0400 	mov.w	r4, #0
  40639a:	e7a9      	b.n	4062f0 <strlen+0x30>

0040639c <strncmp>:
  40639c:	2a00      	cmp	r2, #0
  40639e:	d041      	beq.n	406424 <strncmp+0x88>
  4063a0:	ea40 0301 	orr.w	r3, r0, r1
  4063a4:	f013 0303 	ands.w	r3, r3, #3
  4063a8:	b4f0      	push	{r4, r5, r6, r7}
  4063aa:	d125      	bne.n	4063f8 <strncmp+0x5c>
  4063ac:	2a03      	cmp	r2, #3
  4063ae:	d923      	bls.n	4063f8 <strncmp+0x5c>
  4063b0:	6804      	ldr	r4, [r0, #0]
  4063b2:	680d      	ldr	r5, [r1, #0]
  4063b4:	42ac      	cmp	r4, r5
  4063b6:	d11f      	bne.n	4063f8 <strncmp+0x5c>
  4063b8:	3a04      	subs	r2, #4
  4063ba:	d035      	beq.n	406428 <strncmp+0x8c>
  4063bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  4063c0:	ea25 0404 	bic.w	r4, r5, r4
  4063c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4063c8:	d131      	bne.n	40642e <strncmp+0x92>
  4063ca:	1d07      	adds	r7, r0, #4
  4063cc:	1d0d      	adds	r5, r1, #4
  4063ce:	e00d      	b.n	4063ec <strncmp+0x50>
  4063d0:	f857 3b04 	ldr.w	r3, [r7], #4
  4063d4:	680e      	ldr	r6, [r1, #0]
  4063d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  4063da:	42b3      	cmp	r3, r6
  4063dc:	ea24 0403 	bic.w	r4, r4, r3
  4063e0:	d10a      	bne.n	4063f8 <strncmp+0x5c>
  4063e2:	3a04      	subs	r2, #4
  4063e4:	d020      	beq.n	406428 <strncmp+0x8c>
  4063e6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4063ea:	d123      	bne.n	406434 <strncmp+0x98>
  4063ec:	2a03      	cmp	r2, #3
  4063ee:	4629      	mov	r1, r5
  4063f0:	4638      	mov	r0, r7
  4063f2:	f105 0504 	add.w	r5, r5, #4
  4063f6:	d8eb      	bhi.n	4063d0 <strncmp+0x34>
  4063f8:	7803      	ldrb	r3, [r0, #0]
  4063fa:	780c      	ldrb	r4, [r1, #0]
  4063fc:	429c      	cmp	r4, r3
  4063fe:	f102 32ff 	add.w	r2, r2, #4294967295
  406402:	d10c      	bne.n	40641e <strncmp+0x82>
  406404:	b182      	cbz	r2, 406428 <strncmp+0x8c>
  406406:	b914      	cbnz	r4, 40640e <strncmp+0x72>
  406408:	e016      	b.n	406438 <strncmp+0x9c>
  40640a:	b16a      	cbz	r2, 406428 <strncmp+0x8c>
  40640c:	b17b      	cbz	r3, 40642e <strncmp+0x92>
  40640e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406412:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406416:	42a3      	cmp	r3, r4
  406418:	f102 32ff 	add.w	r2, r2, #4294967295
  40641c:	d0f5      	beq.n	40640a <strncmp+0x6e>
  40641e:	1b18      	subs	r0, r3, r4
  406420:	bcf0      	pop	{r4, r5, r6, r7}
  406422:	4770      	bx	lr
  406424:	4610      	mov	r0, r2
  406426:	4770      	bx	lr
  406428:	4610      	mov	r0, r2
  40642a:	bcf0      	pop	{r4, r5, r6, r7}
  40642c:	4770      	bx	lr
  40642e:	4618      	mov	r0, r3
  406430:	bcf0      	pop	{r4, r5, r6, r7}
  406432:	4770      	bx	lr
  406434:	2000      	movs	r0, #0
  406436:	e7f3      	b.n	406420 <strncmp+0x84>
  406438:	4620      	mov	r0, r4
  40643a:	e7f1      	b.n	406420 <strncmp+0x84>

0040643c <strncpy>:
  40643c:	ea40 0301 	orr.w	r3, r0, r1
  406440:	079b      	lsls	r3, r3, #30
  406442:	b470      	push	{r4, r5, r6}
  406444:	d12b      	bne.n	40649e <strncpy+0x62>
  406446:	2a03      	cmp	r2, #3
  406448:	d929      	bls.n	40649e <strncpy+0x62>
  40644a:	460c      	mov	r4, r1
  40644c:	4603      	mov	r3, r0
  40644e:	4621      	mov	r1, r4
  406450:	f854 6b04 	ldr.w	r6, [r4], #4
  406454:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  406458:	ea25 0506 	bic.w	r5, r5, r6
  40645c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  406460:	d106      	bne.n	406470 <strncpy+0x34>
  406462:	3a04      	subs	r2, #4
  406464:	2a03      	cmp	r2, #3
  406466:	f843 6b04 	str.w	r6, [r3], #4
  40646a:	4621      	mov	r1, r4
  40646c:	d8ef      	bhi.n	40644e <strncpy+0x12>
  40646e:	b1a2      	cbz	r2, 40649a <strncpy+0x5e>
  406470:	780c      	ldrb	r4, [r1, #0]
  406472:	701c      	strb	r4, [r3, #0]
  406474:	3a01      	subs	r2, #1
  406476:	3301      	adds	r3, #1
  406478:	3101      	adds	r1, #1
  40647a:	b13c      	cbz	r4, 40648c <strncpy+0x50>
  40647c:	b16a      	cbz	r2, 40649a <strncpy+0x5e>
  40647e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406482:	f803 4b01 	strb.w	r4, [r3], #1
  406486:	3a01      	subs	r2, #1
  406488:	2c00      	cmp	r4, #0
  40648a:	d1f7      	bne.n	40647c <strncpy+0x40>
  40648c:	b12a      	cbz	r2, 40649a <strncpy+0x5e>
  40648e:	441a      	add	r2, r3
  406490:	2100      	movs	r1, #0
  406492:	f803 1b01 	strb.w	r1, [r3], #1
  406496:	429a      	cmp	r2, r3
  406498:	d1fb      	bne.n	406492 <strncpy+0x56>
  40649a:	bc70      	pop	{r4, r5, r6}
  40649c:	4770      	bx	lr
  40649e:	4603      	mov	r3, r0
  4064a0:	e7e5      	b.n	40646e <strncpy+0x32>
  4064a2:	bf00      	nop

004064a4 <critical_factorization>:
  4064a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4064a8:	f04f 0e01 	mov.w	lr, #1
  4064ac:	4674      	mov	r4, lr
  4064ae:	2500      	movs	r5, #0
  4064b0:	f04f 36ff 	mov.w	r6, #4294967295
  4064b4:	192b      	adds	r3, r5, r4
  4064b6:	428b      	cmp	r3, r1
  4064b8:	eb00 0706 	add.w	r7, r0, r6
  4064bc:	d20d      	bcs.n	4064da <critical_factorization+0x36>
  4064be:	5d3f      	ldrb	r7, [r7, r4]
  4064c0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4064c4:	45bc      	cmp	ip, r7
  4064c6:	d22d      	bcs.n	406524 <critical_factorization+0x80>
  4064c8:	461d      	mov	r5, r3
  4064ca:	2401      	movs	r4, #1
  4064cc:	ebc6 0e03 	rsb	lr, r6, r3
  4064d0:	192b      	adds	r3, r5, r4
  4064d2:	428b      	cmp	r3, r1
  4064d4:	eb00 0706 	add.w	r7, r0, r6
  4064d8:	d3f1      	bcc.n	4064be <critical_factorization+0x1a>
  4064da:	f04f 0801 	mov.w	r8, #1
  4064de:	f8c2 e000 	str.w	lr, [r2]
  4064e2:	4644      	mov	r4, r8
  4064e4:	2500      	movs	r5, #0
  4064e6:	f04f 37ff 	mov.w	r7, #4294967295
  4064ea:	192b      	adds	r3, r5, r4
  4064ec:	4299      	cmp	r1, r3
  4064ee:	eb00 0e07 	add.w	lr, r0, r7
  4064f2:	d90e      	bls.n	406512 <critical_factorization+0x6e>
  4064f4:	f81e e004 	ldrb.w	lr, [lr, r4]
  4064f8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4064fc:	45f4      	cmp	ip, lr
  4064fe:	d918      	bls.n	406532 <critical_factorization+0x8e>
  406500:	461d      	mov	r5, r3
  406502:	2401      	movs	r4, #1
  406504:	ebc7 0803 	rsb	r8, r7, r3
  406508:	192b      	adds	r3, r5, r4
  40650a:	4299      	cmp	r1, r3
  40650c:	eb00 0e07 	add.w	lr, r0, r7
  406510:	d8f0      	bhi.n	4064f4 <critical_factorization+0x50>
  406512:	3701      	adds	r7, #1
  406514:	1c70      	adds	r0, r6, #1
  406516:	4287      	cmp	r7, r0
  406518:	bf24      	itt	cs
  40651a:	f8c2 8000 	strcs.w	r8, [r2]
  40651e:	4638      	movcs	r0, r7
  406520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406524:	d00c      	beq.n	406540 <critical_factorization+0x9c>
  406526:	f04f 0e01 	mov.w	lr, #1
  40652a:	462e      	mov	r6, r5
  40652c:	4674      	mov	r4, lr
  40652e:	4475      	add	r5, lr
  406530:	e7c0      	b.n	4064b4 <critical_factorization+0x10>
  406532:	d00c      	beq.n	40654e <critical_factorization+0xaa>
  406534:	f04f 0801 	mov.w	r8, #1
  406538:	462f      	mov	r7, r5
  40653a:	4644      	mov	r4, r8
  40653c:	4445      	add	r5, r8
  40653e:	e7d4      	b.n	4064ea <critical_factorization+0x46>
  406540:	4574      	cmp	r4, lr
  406542:	bf09      	itett	eq
  406544:	46a6      	moveq	lr, r4
  406546:	3401      	addne	r4, #1
  406548:	461d      	moveq	r5, r3
  40654a:	2401      	moveq	r4, #1
  40654c:	e7b2      	b.n	4064b4 <critical_factorization+0x10>
  40654e:	4544      	cmp	r4, r8
  406550:	bf09      	itett	eq
  406552:	46a0      	moveq	r8, r4
  406554:	3401      	addne	r4, #1
  406556:	461d      	moveq	r5, r3
  406558:	2401      	moveq	r4, #1
  40655a:	e7c6      	b.n	4064ea <critical_factorization+0x46>

0040655c <two_way_long_needle>:
  40655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406560:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  406564:	4616      	mov	r6, r2
  406566:	4605      	mov	r5, r0
  406568:	468b      	mov	fp, r1
  40656a:	4610      	mov	r0, r2
  40656c:	4619      	mov	r1, r3
  40656e:	aa03      	add	r2, sp, #12
  406570:	461c      	mov	r4, r3
  406572:	f7ff ff97 	bl	4064a4 <critical_factorization>
  406576:	ab03      	add	r3, sp, #12
  406578:	4681      	mov	r9, r0
  40657a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40657e:	f843 4f04 	str.w	r4, [r3, #4]!
  406582:	4293      	cmp	r3, r2
  406584:	d1fb      	bne.n	40657e <two_way_long_needle+0x22>
  406586:	b14c      	cbz	r4, 40659c <two_way_long_needle+0x40>
  406588:	1e63      	subs	r3, r4, #1
  40658a:	4632      	mov	r2, r6
  40658c:	a804      	add	r0, sp, #16
  40658e:	f812 1b01 	ldrb.w	r1, [r2], #1
  406592:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  406596:	f113 33ff 	adds.w	r3, r3, #4294967295
  40659a:	d2f8      	bcs.n	40658e <two_way_long_needle+0x32>
  40659c:	9903      	ldr	r1, [sp, #12]
  40659e:	464a      	mov	r2, r9
  4065a0:	4431      	add	r1, r6
  4065a2:	4630      	mov	r0, r6
  4065a4:	f006 f934 	bl	40c810 <memcmp>
  4065a8:	2800      	cmp	r0, #0
  4065aa:	d171      	bne.n	406690 <two_way_long_needle+0x134>
  4065ac:	f109 33ff 	add.w	r3, r9, #4294967295
  4065b0:	9300      	str	r3, [sp, #0]
  4065b2:	18f3      	adds	r3, r6, r3
  4065b4:	4682      	mov	sl, r0
  4065b6:	9301      	str	r3, [sp, #4]
  4065b8:	4623      	mov	r3, r4
  4065ba:	4680      	mov	r8, r0
  4065bc:	4654      	mov	r4, sl
  4065be:	4658      	mov	r0, fp
  4065c0:	469a      	mov	sl, r3
  4065c2:	eb08 070a 	add.w	r7, r8, sl
  4065c6:	1a3a      	subs	r2, r7, r0
  4065c8:	2100      	movs	r1, #0
  4065ca:	4428      	add	r0, r5
  4065cc:	f006 f8d0 	bl	40c770 <memchr>
  4065d0:	2800      	cmp	r0, #0
  4065d2:	d158      	bne.n	406686 <two_way_long_needle+0x12a>
  4065d4:	2f00      	cmp	r7, #0
  4065d6:	d056      	beq.n	406686 <two_way_long_needle+0x12a>
  4065d8:	19eb      	adds	r3, r5, r7
  4065da:	aa04      	add	r2, sp, #16
  4065dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4065e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4065e4:	b14b      	cbz	r3, 4065fa <two_way_long_needle+0x9e>
  4065e6:	b124      	cbz	r4, 4065f2 <two_way_long_needle+0x96>
  4065e8:	9a03      	ldr	r2, [sp, #12]
  4065ea:	4293      	cmp	r3, r2
  4065ec:	d201      	bcs.n	4065f2 <two_way_long_needle+0x96>
  4065ee:	ebc2 030a 	rsb	r3, r2, sl
  4065f2:	4498      	add	r8, r3
  4065f4:	2400      	movs	r4, #0
  4065f6:	4638      	mov	r0, r7
  4065f8:	e7e3      	b.n	4065c2 <two_way_long_needle+0x66>
  4065fa:	454c      	cmp	r4, r9
  4065fc:	4623      	mov	r3, r4
  4065fe:	f10a 3eff 	add.w	lr, sl, #4294967295
  406602:	bf38      	it	cc
  406604:	464b      	movcc	r3, r9
  406606:	4573      	cmp	r3, lr
  406608:	d213      	bcs.n	406632 <two_way_long_needle+0xd6>
  40660a:	eb08 0203 	add.w	r2, r8, r3
  40660e:	f816 c003 	ldrb.w	ip, [r6, r3]
  406612:	5ca8      	ldrb	r0, [r5, r2]
  406614:	4584      	cmp	ip, r0
  406616:	442a      	add	r2, r5
  406618:	eb06 0103 	add.w	r1, r6, r3
  40661c:	d006      	beq.n	40662c <two_way_long_needle+0xd0>
  40661e:	e02e      	b.n	40667e <two_way_long_needle+0x122>
  406620:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  406624:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406628:	4584      	cmp	ip, r0
  40662a:	d128      	bne.n	40667e <two_way_long_needle+0x122>
  40662c:	3301      	adds	r3, #1
  40662e:	4573      	cmp	r3, lr
  406630:	d3f6      	bcc.n	406620 <two_way_long_needle+0xc4>
  406632:	454c      	cmp	r4, r9
  406634:	9900      	ldr	r1, [sp, #0]
  406636:	f080 808b 	bcs.w	406750 <two_way_long_needle+0x1f4>
  40663a:	9b00      	ldr	r3, [sp, #0]
  40663c:	9801      	ldr	r0, [sp, #4]
  40663e:	eb08 0203 	add.w	r2, r8, r3
  406642:	7803      	ldrb	r3, [r0, #0]
  406644:	5ca8      	ldrb	r0, [r5, r2]
  406646:	4283      	cmp	r3, r0
  406648:	442a      	add	r2, r5
  40664a:	f040 8081 	bne.w	406750 <two_way_long_needle+0x1f4>
  40664e:	9b01      	ldr	r3, [sp, #4]
  406650:	eb06 0b04 	add.w	fp, r6, r4
  406654:	e006      	b.n	406664 <two_way_long_needle+0x108>
  406656:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  40665a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  40665e:	4586      	cmp	lr, r0
  406660:	d104      	bne.n	40666c <two_way_long_needle+0x110>
  406662:	4661      	mov	r1, ip
  406664:	459b      	cmp	fp, r3
  406666:	f101 3cff 	add.w	ip, r1, #4294967295
  40666a:	d1f4      	bne.n	406656 <two_way_long_needle+0xfa>
  40666c:	3401      	adds	r4, #1
  40666e:	428c      	cmp	r4, r1
  406670:	d870      	bhi.n	406754 <two_way_long_needle+0x1f8>
  406672:	9c03      	ldr	r4, [sp, #12]
  406674:	4638      	mov	r0, r7
  406676:	44a0      	add	r8, r4
  406678:	ebc4 040a 	rsb	r4, r4, sl
  40667c:	e7a1      	b.n	4065c2 <two_way_long_needle+0x66>
  40667e:	f1c9 0201 	rsb	r2, r9, #1
  406682:	4490      	add	r8, r2
  406684:	e7b5      	b.n	4065f2 <two_way_long_needle+0x96>
  406686:	2000      	movs	r0, #0
  406688:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406690:	ebc9 0304 	rsb	r3, r9, r4
  406694:	454b      	cmp	r3, r9
  406696:	bf38      	it	cc
  406698:	464b      	movcc	r3, r9
  40669a:	3301      	adds	r3, #1
  40669c:	f109 38ff 	add.w	r8, r9, #4294967295
  4066a0:	9303      	str	r3, [sp, #12]
  4066a2:	eb06 0308 	add.w	r3, r6, r8
  4066a6:	4658      	mov	r0, fp
  4066a8:	f04f 0a00 	mov.w	sl, #0
  4066ac:	46cb      	mov	fp, r9
  4066ae:	4699      	mov	r9, r3
  4066b0:	eb0a 0704 	add.w	r7, sl, r4
  4066b4:	1a3a      	subs	r2, r7, r0
  4066b6:	2100      	movs	r1, #0
  4066b8:	4428      	add	r0, r5
  4066ba:	f006 f859 	bl	40c770 <memchr>
  4066be:	2800      	cmp	r0, #0
  4066c0:	d1e1      	bne.n	406686 <two_way_long_needle+0x12a>
  4066c2:	2f00      	cmp	r7, #0
  4066c4:	d0df      	beq.n	406686 <two_way_long_needle+0x12a>
  4066c6:	19eb      	adds	r3, r5, r7
  4066c8:	aa04      	add	r2, sp, #16
  4066ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4066ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4066d2:	bba3      	cbnz	r3, 40673e <two_way_long_needle+0x1e2>
  4066d4:	1e61      	subs	r1, r4, #1
  4066d6:	458b      	cmp	fp, r1
  4066d8:	d215      	bcs.n	406706 <two_way_long_needle+0x1aa>
  4066da:	eb0a 020b 	add.w	r2, sl, fp
  4066de:	f816 300b 	ldrb.w	r3, [r6, fp]
  4066e2:	f815 e002 	ldrb.w	lr, [r5, r2]
  4066e6:	459e      	cmp	lr, r3
  4066e8:	442a      	add	r2, r5
  4066ea:	eb06 000b 	add.w	r0, r6, fp
  4066ee:	465b      	mov	r3, fp
  4066f0:	d006      	beq.n	406700 <two_way_long_needle+0x1a4>
  4066f2:	e027      	b.n	406744 <two_way_long_needle+0x1e8>
  4066f4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4066f8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4066fc:	45f4      	cmp	ip, lr
  4066fe:	d121      	bne.n	406744 <two_way_long_needle+0x1e8>
  406700:	3301      	adds	r3, #1
  406702:	428b      	cmp	r3, r1
  406704:	d3f6      	bcc.n	4066f4 <two_way_long_needle+0x198>
  406706:	f1b8 3fff 	cmp.w	r8, #4294967295
  40670a:	d011      	beq.n	406730 <two_way_long_needle+0x1d4>
  40670c:	eb0a 0208 	add.w	r2, sl, r8
  406710:	f899 1000 	ldrb.w	r1, [r9]
  406714:	5cab      	ldrb	r3, [r5, r2]
  406716:	4299      	cmp	r1, r3
  406718:	442a      	add	r2, r5
  40671a:	d10f      	bne.n	40673c <two_way_long_needle+0x1e0>
  40671c:	464b      	mov	r3, r9
  40671e:	e005      	b.n	40672c <two_way_long_needle+0x1d0>
  406720:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406724:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406728:	4288      	cmp	r0, r1
  40672a:	d107      	bne.n	40673c <two_way_long_needle+0x1e0>
  40672c:	42b3      	cmp	r3, r6
  40672e:	d1f7      	bne.n	406720 <two_way_long_needle+0x1c4>
  406730:	eb05 000a 	add.w	r0, r5, sl
  406734:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  406738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40673c:	9b03      	ldr	r3, [sp, #12]
  40673e:	449a      	add	sl, r3
  406740:	4638      	mov	r0, r7
  406742:	e7b5      	b.n	4066b0 <two_way_long_needle+0x154>
  406744:	f1cb 0201 	rsb	r2, fp, #1
  406748:	4492      	add	sl, r2
  40674a:	449a      	add	sl, r3
  40674c:	4638      	mov	r0, r7
  40674e:	e7af      	b.n	4066b0 <two_way_long_needle+0x154>
  406750:	4649      	mov	r1, r9
  406752:	e78b      	b.n	40666c <two_way_long_needle+0x110>
  406754:	eb05 0008 	add.w	r0, r5, r8
  406758:	e796      	b.n	406688 <two_way_long_needle+0x12c>
  40675a:	bf00      	nop

0040675c <strstr>:
  40675c:	7803      	ldrb	r3, [r0, #0]
  40675e:	2b00      	cmp	r3, #0
  406760:	f000 8104 	beq.w	40696c <strstr+0x210>
  406764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406768:	f891 8000 	ldrb.w	r8, [r1]
  40676c:	b085      	sub	sp, #20
  40676e:	4644      	mov	r4, r8
  406770:	f1b8 0f00 	cmp.w	r8, #0
  406774:	d016      	beq.n	4067a4 <strstr+0x48>
  406776:	4686      	mov	lr, r0
  406778:	f101 0c01 	add.w	ip, r1, #1
  40677c:	2701      	movs	r7, #1
  40677e:	e003      	b.n	406788 <strstr+0x2c>
  406780:	f812 4b01 	ldrb.w	r4, [r2], #1
  406784:	b16c      	cbz	r4, 4067a2 <strstr+0x46>
  406786:	4694      	mov	ip, r2
  406788:	429c      	cmp	r4, r3
  40678a:	bf14      	ite	ne
  40678c:	2700      	movne	r7, #0
  40678e:	f007 0701 	andeq.w	r7, r7, #1
  406792:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  406796:	4662      	mov	r2, ip
  406798:	2b00      	cmp	r3, #0
  40679a:	d1f1      	bne.n	406780 <strstr+0x24>
  40679c:	f89c 3000 	ldrb.w	r3, [ip]
  4067a0:	bb0b      	cbnz	r3, 4067e6 <strstr+0x8a>
  4067a2:	b117      	cbz	r7, 4067aa <strstr+0x4e>
  4067a4:	b005      	add	sp, #20
  4067a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067aa:	460e      	mov	r6, r1
  4067ac:	4605      	mov	r5, r0
  4067ae:	4641      	mov	r1, r8
  4067b0:	3001      	adds	r0, #1
  4067b2:	ebc6 040c 	rsb	r4, r6, ip
  4067b6:	f7ff fd09 	bl	4061cc <strchr>
  4067ba:	4607      	mov	r7, r0
  4067bc:	b198      	cbz	r0, 4067e6 <strstr+0x8a>
  4067be:	2c01      	cmp	r4, #1
  4067c0:	d0f0      	beq.n	4067a4 <strstr+0x48>
  4067c2:	1928      	adds	r0, r5, r4
  4067c4:	4287      	cmp	r7, r0
  4067c6:	bf94      	ite	ls
  4067c8:	ebc7 0b00 	rsbls	fp, r7, r0
  4067cc:	f04f 0b01 	movhi.w	fp, #1
  4067d0:	2c1f      	cmp	r4, #31
  4067d2:	d90c      	bls.n	4067ee <strstr+0x92>
  4067d4:	4623      	mov	r3, r4
  4067d6:	4632      	mov	r2, r6
  4067d8:	4659      	mov	r1, fp
  4067da:	4638      	mov	r0, r7
  4067dc:	f7ff febe 	bl	40655c <two_way_long_needle>
  4067e0:	b005      	add	sp, #20
  4067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067e6:	2000      	movs	r0, #0
  4067e8:	b005      	add	sp, #20
  4067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067ee:	aa03      	add	r2, sp, #12
  4067f0:	4621      	mov	r1, r4
  4067f2:	4630      	mov	r0, r6
  4067f4:	f7ff fe56 	bl	4064a4 <critical_factorization>
  4067f8:	9903      	ldr	r1, [sp, #12]
  4067fa:	4680      	mov	r8, r0
  4067fc:	4602      	mov	r2, r0
  4067fe:	4431      	add	r1, r6
  406800:	4630      	mov	r0, r6
  406802:	f006 f805 	bl	40c810 <memcmp>
  406806:	2800      	cmp	r0, #0
  406808:	d158      	bne.n	4068bc <strstr+0x160>
  40680a:	f108 33ff 	add.w	r3, r8, #4294967295
  40680e:	9301      	str	r3, [sp, #4]
  406810:	18f3      	adds	r3, r6, r3
  406812:	4681      	mov	r9, r0
  406814:	4605      	mov	r5, r0
  406816:	9300      	str	r3, [sp, #0]
  406818:	4658      	mov	r0, fp
  40681a:	46b2      	mov	sl, r6
  40681c:	1966      	adds	r6, r4, r5
  40681e:	1a32      	subs	r2, r6, r0
  406820:	2100      	movs	r1, #0
  406822:	4438      	add	r0, r7
  406824:	f005 ffa4 	bl	40c770 <memchr>
  406828:	2800      	cmp	r0, #0
  40682a:	d1dc      	bne.n	4067e6 <strstr+0x8a>
  40682c:	2e00      	cmp	r6, #0
  40682e:	d0da      	beq.n	4067e6 <strstr+0x8a>
  406830:	45c8      	cmp	r8, r9
  406832:	4643      	mov	r3, r8
  406834:	bf38      	it	cc
  406836:	464b      	movcc	r3, r9
  406838:	429c      	cmp	r4, r3
  40683a:	d912      	bls.n	406862 <strstr+0x106>
  40683c:	195a      	adds	r2, r3, r5
  40683e:	f81a 1003 	ldrb.w	r1, [sl, r3]
  406842:	5cb8      	ldrb	r0, [r7, r2]
  406844:	4288      	cmp	r0, r1
  406846:	443a      	add	r2, r7
  406848:	eb0a 0e03 	add.w	lr, sl, r3
  40684c:	d006      	beq.n	40685c <strstr+0x100>
  40684e:	e02d      	b.n	4068ac <strstr+0x150>
  406850:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  406854:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406858:	4288      	cmp	r0, r1
  40685a:	d127      	bne.n	4068ac <strstr+0x150>
  40685c:	3301      	adds	r3, #1
  40685e:	429c      	cmp	r4, r3
  406860:	d8f6      	bhi.n	406850 <strstr+0xf4>
  406862:	9b01      	ldr	r3, [sp, #4]
  406864:	45c8      	cmp	r8, r9
  406866:	4619      	mov	r1, r3
  406868:	f240 8083 	bls.w	406972 <strstr+0x216>
  40686c:	18ea      	adds	r2, r5, r3
  40686e:	9800      	ldr	r0, [sp, #0]
  406870:	7803      	ldrb	r3, [r0, #0]
  406872:	5cb8      	ldrb	r0, [r7, r2]
  406874:	4283      	cmp	r3, r0
  406876:	443a      	add	r2, r7
  406878:	d17b      	bne.n	406972 <strstr+0x216>
  40687a:	9b00      	ldr	r3, [sp, #0]
  40687c:	eb0a 0b09 	add.w	fp, sl, r9
  406880:	e006      	b.n	406890 <strstr+0x134>
  406882:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  406886:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40688a:	45f4      	cmp	ip, lr
  40688c:	d104      	bne.n	406898 <strstr+0x13c>
  40688e:	4601      	mov	r1, r0
  406890:	455b      	cmp	r3, fp
  406892:	f101 30ff 	add.w	r0, r1, #4294967295
  406896:	d1f4      	bne.n	406882 <strstr+0x126>
  406898:	f109 0901 	add.w	r9, r9, #1
  40689c:	4589      	cmp	r9, r1
  40689e:	d857      	bhi.n	406950 <strstr+0x1f4>
  4068a0:	9b03      	ldr	r3, [sp, #12]
  4068a2:	4630      	mov	r0, r6
  4068a4:	441d      	add	r5, r3
  4068a6:	ebc3 0904 	rsb	r9, r3, r4
  4068aa:	e7b7      	b.n	40681c <strstr+0xc0>
  4068ac:	f1c8 0201 	rsb	r2, r8, #1
  4068b0:	4415      	add	r5, r2
  4068b2:	441d      	add	r5, r3
  4068b4:	f04f 0900 	mov.w	r9, #0
  4068b8:	4630      	mov	r0, r6
  4068ba:	e7af      	b.n	40681c <strstr+0xc0>
  4068bc:	ebc8 0304 	rsb	r3, r8, r4
  4068c0:	4543      	cmp	r3, r8
  4068c2:	bf38      	it	cc
  4068c4:	4643      	movcc	r3, r8
  4068c6:	3301      	adds	r3, #1
  4068c8:	f108 39ff 	add.w	r9, r8, #4294967295
  4068cc:	9303      	str	r3, [sp, #12]
  4068ce:	eb06 0309 	add.w	r3, r6, r9
  4068d2:	4658      	mov	r0, fp
  4068d4:	2500      	movs	r5, #0
  4068d6:	46bb      	mov	fp, r7
  4068d8:	469a      	mov	sl, r3
  4068da:	1967      	adds	r7, r4, r5
  4068dc:	1a3a      	subs	r2, r7, r0
  4068de:	2100      	movs	r1, #0
  4068e0:	4458      	add	r0, fp
  4068e2:	f005 ff45 	bl	40c770 <memchr>
  4068e6:	2800      	cmp	r0, #0
  4068e8:	f47f af7d 	bne.w	4067e6 <strstr+0x8a>
  4068ec:	2f00      	cmp	r7, #0
  4068ee:	f43f af7a 	beq.w	4067e6 <strstr+0x8a>
  4068f2:	4544      	cmp	r4, r8
  4068f4:	d915      	bls.n	406922 <strstr+0x1c6>
  4068f6:	eb08 0205 	add.w	r2, r8, r5
  4068fa:	f816 3008 	ldrb.w	r3, [r6, r8]
  4068fe:	f81b 0002 	ldrb.w	r0, [fp, r2]
  406902:	4298      	cmp	r0, r3
  406904:	445a      	add	r2, fp
  406906:	eb06 0108 	add.w	r1, r6, r8
  40690a:	4643      	mov	r3, r8
  40690c:	d006      	beq.n	40691c <strstr+0x1c0>
  40690e:	e023      	b.n	406958 <strstr+0x1fc>
  406910:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  406914:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406918:	4586      	cmp	lr, r0
  40691a:	d11d      	bne.n	406958 <strstr+0x1fc>
  40691c:	3301      	adds	r3, #1
  40691e:	429c      	cmp	r4, r3
  406920:	d8f6      	bhi.n	406910 <strstr+0x1b4>
  406922:	f1b9 3fff 	cmp.w	r9, #4294967295
  406926:	d012      	beq.n	40694e <strstr+0x1f2>
  406928:	eb05 0209 	add.w	r2, r5, r9
  40692c:	f89a 1000 	ldrb.w	r1, [sl]
  406930:	f81b 3002 	ldrb.w	r3, [fp, r2]
  406934:	4299      	cmp	r1, r3
  406936:	445a      	add	r2, fp
  406938:	d114      	bne.n	406964 <strstr+0x208>
  40693a:	4653      	mov	r3, sl
  40693c:	e005      	b.n	40694a <strstr+0x1ee>
  40693e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406942:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406946:	4288      	cmp	r0, r1
  406948:	d10c      	bne.n	406964 <strstr+0x208>
  40694a:	42b3      	cmp	r3, r6
  40694c:	d1f7      	bne.n	40693e <strstr+0x1e2>
  40694e:	465f      	mov	r7, fp
  406950:	1978      	adds	r0, r7, r5
  406952:	b005      	add	sp, #20
  406954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406958:	f1c8 0201 	rsb	r2, r8, #1
  40695c:	4415      	add	r5, r2
  40695e:	441d      	add	r5, r3
  406960:	4638      	mov	r0, r7
  406962:	e7ba      	b.n	4068da <strstr+0x17e>
  406964:	9b03      	ldr	r3, [sp, #12]
  406966:	4638      	mov	r0, r7
  406968:	441d      	add	r5, r3
  40696a:	e7b6      	b.n	4068da <strstr+0x17e>
  40696c:	780b      	ldrb	r3, [r1, #0]
  40696e:	b913      	cbnz	r3, 406976 <strstr+0x21a>
  406970:	4770      	bx	lr
  406972:	4641      	mov	r1, r8
  406974:	e790      	b.n	406898 <strstr+0x13c>
  406976:	2000      	movs	r0, #0
  406978:	4770      	bx	lr
  40697a:	bf00      	nop

0040697c <sulp>:
  40697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406980:	460f      	mov	r7, r1
  406982:	4690      	mov	r8, r2
  406984:	f006 fadc 	bl	40cf40 <__ulp>
  406988:	4604      	mov	r4, r0
  40698a:	460d      	mov	r5, r1
  40698c:	f1b8 0f00 	cmp.w	r8, #0
  406990:	d011      	beq.n	4069b6 <sulp+0x3a>
  406992:	f3c7 530a 	ubfx	r3, r7, #20, #11
  406996:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40699a:	2b00      	cmp	r3, #0
  40699c:	dd0b      	ble.n	4069b6 <sulp+0x3a>
  40699e:	051b      	lsls	r3, r3, #20
  4069a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  4069a4:	2400      	movs	r4, #0
  4069a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  4069aa:	4622      	mov	r2, r4
  4069ac:	462b      	mov	r3, r5
  4069ae:	f007 fa79 	bl	40dea4 <__aeabi_dmul>
  4069b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069b6:	4620      	mov	r0, r4
  4069b8:	4629      	mov	r1, r5
  4069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069be:	bf00      	nop

004069c0 <_strtod_r>:
  4069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069c4:	b09f      	sub	sp, #124	; 0x7c
  4069c6:	460e      	mov	r6, r1
  4069c8:	2100      	movs	r1, #0
  4069ca:	9205      	str	r2, [sp, #20]
  4069cc:	911a      	str	r1, [sp, #104]	; 0x68
  4069ce:	2200      	movs	r2, #0
  4069d0:	2100      	movs	r1, #0
  4069d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
  4069d6:	9619      	str	r6, [sp, #100]	; 0x64
  4069d8:	4683      	mov	fp, r0
  4069da:	4633      	mov	r3, r6
  4069dc:	461a      	mov	r2, r3
  4069de:	f813 7b01 	ldrb.w	r7, [r3], #1
  4069e2:	2f2d      	cmp	r7, #45	; 0x2d
  4069e4:	f200 80ee 	bhi.w	406bc4 <_strtod_r+0x204>
  4069e8:	e8df f017 	tbh	[pc, r7, lsl #1]
  4069ec:	00ec002e 	.word	0x00ec002e
  4069f0:	00ec00ec 	.word	0x00ec00ec
  4069f4:	00ec00ec 	.word	0x00ec00ec
  4069f8:	00ec00ec 	.word	0x00ec00ec
  4069fc:	00db00ec 	.word	0x00db00ec
  406a00:	00db00db 	.word	0x00db00db
  406a04:	00db00db 	.word	0x00db00db
  406a08:	00ec00ec 	.word	0x00ec00ec
  406a0c:	00ec00ec 	.word	0x00ec00ec
  406a10:	00ec00ec 	.word	0x00ec00ec
  406a14:	00ec00ec 	.word	0x00ec00ec
  406a18:	00ec00ec 	.word	0x00ec00ec
  406a1c:	00ec00ec 	.word	0x00ec00ec
  406a20:	00ec00ec 	.word	0x00ec00ec
  406a24:	00ec00ec 	.word	0x00ec00ec
  406a28:	00ec00ec 	.word	0x00ec00ec
  406a2c:	00ec00db 	.word	0x00ec00db
  406a30:	00ec00ec 	.word	0x00ec00ec
  406a34:	00ec00ec 	.word	0x00ec00ec
  406a38:	00ec00ec 	.word	0x00ec00ec
  406a3c:	00ec00ec 	.word	0x00ec00ec
  406a40:	004400ec 	.word	0x004400ec
  406a44:	00d800ec 	.word	0x00d800ec
  406a48:	9b05      	ldr	r3, [sp, #20]
  406a4a:	f04f 0900 	mov.w	r9, #0
  406a4e:	f04f 0a00 	mov.w	sl, #0
  406a52:	b153      	cbz	r3, 406a6a <_strtod_r+0xaa>
  406a54:	2300      	movs	r3, #0
  406a56:	9306      	str	r3, [sp, #24]
  406a58:	9b05      	ldr	r3, [sp, #20]
  406a5a:	601e      	str	r6, [r3, #0]
  406a5c:	9b06      	ldr	r3, [sp, #24]
  406a5e:	b123      	cbz	r3, 406a6a <_strtod_r+0xaa>
  406a60:	4649      	mov	r1, r9
  406a62:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
  406a66:	4689      	mov	r9, r1
  406a68:	469a      	mov	sl, r3
  406a6a:	4648      	mov	r0, r9
  406a6c:	4651      	mov	r1, sl
  406a6e:	b01f      	add	sp, #124	; 0x7c
  406a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a74:	2300      	movs	r3, #0
  406a76:	9306      	str	r3, [sp, #24]
  406a78:	1c54      	adds	r4, r2, #1
  406a7a:	9419      	str	r4, [sp, #100]	; 0x64
  406a7c:	7857      	ldrb	r7, [r2, #1]
  406a7e:	2f00      	cmp	r7, #0
  406a80:	d0e2      	beq.n	406a48 <_strtod_r+0x88>
  406a82:	2f30      	cmp	r7, #48	; 0x30
  406a84:	f000 80a4 	beq.w	406bd0 <_strtod_r+0x210>
  406a88:	9408      	str	r4, [sp, #32]
  406a8a:	f04f 0a00 	mov.w	sl, #0
  406a8e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  406a92:	f04f 0800 	mov.w	r8, #0
  406a96:	2b09      	cmp	r3, #9
  406a98:	4645      	mov	r5, r8
  406a9a:	4623      	mov	r3, r4
  406a9c:	4644      	mov	r4, r8
  406a9e:	d819      	bhi.n	406ad4 <_strtod_r+0x114>
  406aa0:	2c08      	cmp	r4, #8
  406aa2:	bfc8      	it	gt
  406aa4:	eb08 0888 	addgt.w	r8, r8, r8, lsl #2
  406aa8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  406aac:	f103 0301 	add.w	r3, r3, #1
  406ab0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  406ab4:	9319      	str	r3, [sp, #100]	; 0x64
  406ab6:	bfc4      	itt	gt
  406ab8:	eb07 0748 	addgt.w	r7, r7, r8, lsl #1
  406abc:	f1a7 0830 	subgt.w	r8, r7, #48	; 0x30
  406ac0:	781f      	ldrb	r7, [r3, #0]
  406ac2:	bfd8      	it	le
  406ac4:	f1a2 0530 	suble.w	r5, r2, #48	; 0x30
  406ac8:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
  406acc:	2a09      	cmp	r2, #9
  406ace:	f104 0401 	add.w	r4, r4, #1
  406ad2:	d9e5      	bls.n	406aa0 <_strtod_r+0xe0>
  406ad4:	4658      	mov	r0, fp
  406ad6:	9307      	str	r3, [sp, #28]
  406ad8:	f005 fb12 	bl	40c100 <_localeconv_r>
  406adc:	f8d0 9000 	ldr.w	r9, [r0]
  406ae0:	4658      	mov	r0, fp
  406ae2:	f005 fb0d 	bl	40c100 <_localeconv_r>
  406ae6:	6800      	ldr	r0, [r0, #0]
  406ae8:	f7ff fbea 	bl	4062c0 <strlen>
  406aec:	9b07      	ldr	r3, [sp, #28]
  406aee:	4602      	mov	r2, r0
  406af0:	4649      	mov	r1, r9
  406af2:	4618      	mov	r0, r3
  406af4:	f7ff fc52 	bl	40639c <strncmp>
  406af8:	4681      	mov	r9, r0
  406afa:	2800      	cmp	r0, #0
  406afc:	f000 80e2 	beq.w	406cc4 <_strtod_r+0x304>
  406b00:	2000      	movs	r0, #0
  406b02:	4684      	mov	ip, r0
  406b04:	4686      	mov	lr, r0
  406b06:	46a1      	mov	r9, r4
  406b08:	2f65      	cmp	r7, #101	; 0x65
  406b0a:	d073      	beq.n	406bf4 <_strtod_r+0x234>
  406b0c:	2f45      	cmp	r7, #69	; 0x45
  406b0e:	d071      	beq.n	406bf4 <_strtod_r+0x234>
  406b10:	2300      	movs	r3, #0
  406b12:	f1b9 0f00 	cmp.w	r9, #0
  406b16:	d046      	beq.n	406ba6 <_strtod_r+0x1e6>
  406b18:	f1b9 0f10 	cmp.w	r9, #16
  406b1c:	ebcc 0303 	rsb	r3, ip, r3
  406b20:	4628      	mov	r0, r5
  406b22:	46ca      	mov	sl, r9
  406b24:	930a      	str	r3, [sp, #40]	; 0x28
  406b26:	bfa8      	it	ge
  406b28:	f04f 0a10 	movge.w	sl, #16
  406b2c:	f007 f944 	bl	40ddb8 <__aeabi_ui2d>
  406b30:	2c00      	cmp	r4, #0
  406b32:	bf08      	it	eq
  406b34:	464c      	moveq	r4, r9
  406b36:	f1ba 0f09 	cmp.w	sl, #9
  406b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406b3e:	dd13      	ble.n	406b68 <_strtod_r+0x1a8>
  406b40:	4b73      	ldr	r3, [pc, #460]	; (406d10 <_strtod_r+0x350>)
  406b42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  406b46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  406b4a:	f007 f9ab 	bl	40dea4 <__aeabi_dmul>
  406b4e:	4606      	mov	r6, r0
  406b50:	4640      	mov	r0, r8
  406b52:	460f      	mov	r7, r1
  406b54:	f007 f930 	bl	40ddb8 <__aeabi_ui2d>
  406b58:	4602      	mov	r2, r0
  406b5a:	460b      	mov	r3, r1
  406b5c:	4630      	mov	r0, r6
  406b5e:	4639      	mov	r1, r7
  406b60:	f006 ffee 	bl	40db40 <__adddf3>
  406b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406b68:	f1b9 0f0f 	cmp.w	r9, #15
  406b6c:	f300 80d8 	bgt.w	406d20 <_strtod_r+0x360>
  406b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b72:	2b00      	cmp	r3, #0
  406b74:	f000 80a3 	beq.w	406cbe <_strtod_r+0x2fe>
  406b78:	f340 855a 	ble.w	407630 <_strtod_r+0xc70>
  406b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b7e:	2b16      	cmp	r3, #22
  406b80:	f300 8497 	bgt.w	4074b2 <_strtod_r+0xaf2>
  406b84:	4962      	ldr	r1, [pc, #392]	; (406d10 <_strtod_r+0x350>)
  406b86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
  406b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406b92:	f007 f987 	bl	40dea4 <__aeabi_dmul>
  406b96:	4681      	mov	r9, r0
  406b98:	468a      	mov	sl, r1
  406b9a:	e00d      	b.n	406bb8 <_strtod_r+0x1f8>
  406b9c:	2301      	movs	r3, #1
  406b9e:	9306      	str	r3, [sp, #24]
  406ba0:	e76a      	b.n	406a78 <_strtod_r+0xb8>
  406ba2:	9319      	str	r3, [sp, #100]	; 0x64
  406ba4:	e71a      	b.n	4069dc <_strtod_r+0x1c>
  406ba6:	b918      	cbnz	r0, 406bb0 <_strtod_r+0x1f0>
  406ba8:	f1ba 0f00 	cmp.w	sl, #0
  406bac:	f000 82a0 	beq.w	4070f0 <_strtod_r+0x730>
  406bb0:	f04f 0900 	mov.w	r9, #0
  406bb4:	f04f 0a00 	mov.w	sl, #0
  406bb8:	9b05      	ldr	r3, [sp, #20]
  406bba:	2b00      	cmp	r3, #0
  406bbc:	f43f af4e 	beq.w	406a5c <_strtod_r+0x9c>
  406bc0:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406bc2:	e749      	b.n	406a58 <_strtod_r+0x98>
  406bc4:	2300      	movs	r3, #0
  406bc6:	2f30      	cmp	r7, #48	; 0x30
  406bc8:	4614      	mov	r4, r2
  406bca:	9306      	str	r3, [sp, #24]
  406bcc:	f47f af5c 	bne.w	406a88 <_strtod_r+0xc8>
  406bd0:	7863      	ldrb	r3, [r4, #1]
  406bd2:	2b58      	cmp	r3, #88	; 0x58
  406bd4:	f000 8346 	beq.w	407264 <_strtod_r+0x8a4>
  406bd8:	2b78      	cmp	r3, #120	; 0x78
  406bda:	f000 8343 	beq.w	407264 <_strtod_r+0x8a4>
  406bde:	3401      	adds	r4, #1
  406be0:	9419      	str	r4, [sp, #100]	; 0x64
  406be2:	7827      	ldrb	r7, [r4, #0]
  406be4:	2f30      	cmp	r7, #48	; 0x30
  406be6:	d0fa      	beq.n	406bde <_strtod_r+0x21e>
  406be8:	2f00      	cmp	r7, #0
  406bea:	d0e1      	beq.n	406bb0 <_strtod_r+0x1f0>
  406bec:	9408      	str	r4, [sp, #32]
  406bee:	f04f 0a01 	mov.w	sl, #1
  406bf2:	e74c      	b.n	406a8e <_strtod_r+0xce>
  406bf4:	f1b9 0f00 	cmp.w	r9, #0
  406bf8:	f000 8216 	beq.w	407028 <_strtod_r+0x668>
  406bfc:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406bfe:	1c73      	adds	r3, r6, #1
  406c00:	9319      	str	r3, [sp, #100]	; 0x64
  406c02:	7877      	ldrb	r7, [r6, #1]
  406c04:	2f2b      	cmp	r7, #43	; 0x2b
  406c06:	f000 826a 	beq.w	4070de <_strtod_r+0x71e>
  406c0a:	2f2d      	cmp	r7, #45	; 0x2d
  406c0c:	f000 8261 	beq.w	4070d2 <_strtod_r+0x712>
  406c10:	2300      	movs	r3, #0
  406c12:	9307      	str	r3, [sp, #28]
  406c14:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  406c18:	2b09      	cmp	r3, #9
  406c1a:	f200 8219 	bhi.w	407050 <_strtod_r+0x690>
  406c1e:	2f30      	cmp	r7, #48	; 0x30
  406c20:	d105      	bne.n	406c2e <_strtod_r+0x26e>
  406c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406c24:	3301      	adds	r3, #1
  406c26:	9319      	str	r3, [sp, #100]	; 0x64
  406c28:	781f      	ldrb	r7, [r3, #0]
  406c2a:	2f30      	cmp	r7, #48	; 0x30
  406c2c:	d0fa      	beq.n	406c24 <_strtod_r+0x264>
  406c2e:	f1a7 0331 	sub.w	r3, r7, #49	; 0x31
  406c32:	2b08      	cmp	r3, #8
  406c34:	f63f af6c 	bhi.w	406b10 <_strtod_r+0x150>
  406c38:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406c3a:	930a      	str	r3, [sp, #40]	; 0x28
  406c3c:	4619      	mov	r1, r3
  406c3e:	1c5a      	adds	r2, r3, #1
  406c40:	9219      	str	r2, [sp, #100]	; 0x64
  406c42:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  406c46:	784f      	ldrb	r7, [r1, #1]
  406c48:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
  406c4c:	2909      	cmp	r1, #9
  406c4e:	d80c      	bhi.n	406c6a <_strtod_r+0x2aa>
  406c50:	3201      	adds	r2, #1
  406c52:	9219      	str	r2, [sp, #100]	; 0x64
  406c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  406c58:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  406c5c:	7817      	ldrb	r7, [r2, #0]
  406c5e:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
  406c62:	2909      	cmp	r1, #9
  406c64:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
  406c68:	d9f2      	bls.n	406c50 <_strtod_r+0x290>
  406c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c6c:	1a52      	subs	r2, r2, r1
  406c6e:	2a08      	cmp	r2, #8
  406c70:	f300 8416 	bgt.w	4074a0 <_strtod_r+0xae0>
  406c74:	f644 621f 	movw	r2, #19999	; 0x4e1f
  406c78:	4293      	cmp	r3, r2
  406c7a:	bfa8      	it	ge
  406c7c:	4613      	movge	r3, r2
  406c7e:	9a07      	ldr	r2, [sp, #28]
  406c80:	2a00      	cmp	r2, #0
  406c82:	f43f af46 	beq.w	406b12 <_strtod_r+0x152>
  406c86:	425b      	negs	r3, r3
  406c88:	f1b9 0f00 	cmp.w	r9, #0
  406c8c:	f47f af44 	bne.w	406b18 <_strtod_r+0x158>
  406c90:	e789      	b.n	406ba6 <_strtod_r+0x1e6>
  406c92:	a819      	add	r0, sp, #100	; 0x64
  406c94:	491f      	ldr	r1, [pc, #124]	; (406d14 <_strtod_r+0x354>)
  406c96:	f005 f951 	bl	40bf3c <__match>
  406c9a:	2800      	cmp	r0, #0
  406c9c:	f43f aed4 	beq.w	406a48 <_strtod_r+0x88>
  406ca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406ca2:	491d      	ldr	r1, [pc, #116]	; (406d18 <_strtod_r+0x358>)
  406ca4:	3b01      	subs	r3, #1
  406ca6:	a819      	add	r0, sp, #100	; 0x64
  406ca8:	9319      	str	r3, [sp, #100]	; 0x64
  406caa:	f005 f947 	bl	40bf3c <__match>
  406cae:	b910      	cbnz	r0, 406cb6 <_strtod_r+0x2f6>
  406cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406cb2:	3301      	adds	r3, #1
  406cb4:	9319      	str	r3, [sp, #100]	; 0x64
  406cb6:	4b19      	ldr	r3, [pc, #100]	; (406d1c <_strtod_r+0x35c>)
  406cb8:	9303      	str	r3, [sp, #12]
  406cba:	2300      	movs	r3, #0
  406cbc:	9302      	str	r3, [sp, #8]
  406cbe:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  406cc2:	e779      	b.n	406bb8 <_strtod_r+0x1f8>
  406cc4:	4658      	mov	r0, fp
  406cc6:	f005 fa1b 	bl	40c100 <_localeconv_r>
  406cca:	6800      	ldr	r0, [r0, #0]
  406ccc:	f7ff faf8 	bl	4062c0 <strlen>
  406cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406cd2:	1813      	adds	r3, r2, r0
  406cd4:	9319      	str	r3, [sp, #100]	; 0x64
  406cd6:	5c17      	ldrb	r7, [r2, r0]
  406cd8:	2c00      	cmp	r4, #0
  406cda:	f040 81e8 	bne.w	4070ae <_strtod_r+0x6ee>
  406cde:	2f30      	cmp	r7, #48	; 0x30
  406ce0:	4620      	mov	r0, r4
  406ce2:	d106      	bne.n	406cf2 <_strtod_r+0x332>
  406ce4:	3301      	adds	r3, #1
  406ce6:	9319      	str	r3, [sp, #100]	; 0x64
  406ce8:	781f      	ldrb	r7, [r3, #0]
  406cea:	2f30      	cmp	r7, #48	; 0x30
  406cec:	f100 0001 	add.w	r0, r0, #1
  406cf0:	d0f8      	beq.n	406ce4 <_strtod_r+0x324>
  406cf2:	f1a7 0331 	sub.w	r3, r7, #49	; 0x31
  406cf6:	2b08      	cmp	r3, #8
  406cf8:	f240 843b 	bls.w	407572 <_strtod_r+0xbb2>
  406cfc:	2f65      	cmp	r7, #101	; 0x65
  406cfe:	f000 818f 	beq.w	407020 <_strtod_r+0x660>
  406d02:	f04f 0900 	mov.w	r9, #0
  406d06:	46cc      	mov	ip, r9
  406d08:	f04f 0e01 	mov.w	lr, #1
  406d0c:	e6fe      	b.n	406b0c <_strtod_r+0x14c>
  406d0e:	bf00      	nop
  406d10:	004101a0 	.word	0x004101a0
  406d14:	0040feac 	.word	0x0040feac
  406d18:	0040feb0 	.word	0x0040feb0
  406d1c:	7ff00000 	.word	0x7ff00000
  406d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d22:	ebca 0a09 	rsb	sl, sl, r9
  406d26:	449a      	add	sl, r3
  406d28:	f1ba 0f00 	cmp.w	sl, #0
  406d2c:	f340 835f 	ble.w	4073ee <_strtod_r+0xa2e>
  406d30:	f01a 010f 	ands.w	r1, sl, #15
  406d34:	d00a      	beq.n	406d4c <_strtod_r+0x38c>
  406d36:	4bb4      	ldr	r3, [pc, #720]	; (407008 <_strtod_r+0x648>)
  406d38:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  406d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
  406d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406d44:	f007 f8ae 	bl	40dea4 <__aeabi_dmul>
  406d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406d4c:	f03a 060f 	bics.w	r6, sl, #15
  406d50:	f040 8226 	bne.w	4071a0 <_strtod_r+0x7e0>
  406d54:	2300      	movs	r3, #0
  406d56:	9307      	str	r3, [sp, #28]
  406d58:	9500      	str	r5, [sp, #0]
  406d5a:	464b      	mov	r3, r9
  406d5c:	4622      	mov	r2, r4
  406d5e:	9908      	ldr	r1, [sp, #32]
  406d60:	4658      	mov	r0, fp
  406d62:	f005 fe5f 	bl	40ca24 <__s2b>
  406d66:	900e      	str	r0, [sp, #56]	; 0x38
  406d68:	2800      	cmp	r0, #0
  406d6a:	f000 82c0 	beq.w	4072ee <_strtod_r+0x92e>
  406d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406d70:	2100      	movs	r1, #0
  406d72:	2a00      	cmp	r2, #0
  406d74:	f1c2 0300 	rsb	r3, r2, #0
  406d78:	bfa8      	it	ge
  406d7a:	460b      	movge	r3, r1
  406d7c:	930b      	str	r3, [sp, #44]	; 0x2c
  406d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406d82:	930a      	str	r3, [sp, #40]	; 0x28
  406d84:	460f      	mov	r7, r1
  406d86:	468a      	mov	sl, r1
  406d88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406d8a:	4658      	mov	r0, fp
  406d8c:	6861      	ldr	r1, [r4, #4]
  406d8e:	f005 fdd9 	bl	40c944 <_Balloc>
  406d92:	4680      	mov	r8, r0
  406d94:	2800      	cmp	r0, #0
  406d96:	f000 82d0 	beq.w	40733a <_strtod_r+0x97a>
  406d9a:	6922      	ldr	r2, [r4, #16]
  406d9c:	3202      	adds	r2, #2
  406d9e:	f104 010c 	add.w	r1, r4, #12
  406da2:	0092      	lsls	r2, r2, #2
  406da4:	300c      	adds	r0, #12
  406da6:	f7ff f853 	bl	405e50 <memcpy>
  406daa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  406dae:	a81c      	add	r0, sp, #112	; 0x70
  406db0:	a91b      	add	r1, sp, #108	; 0x6c
  406db2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  406db6:	461a      	mov	r2, r3
  406db8:	9001      	str	r0, [sp, #4]
  406dba:	4623      	mov	r3, r4
  406dbc:	9100      	str	r1, [sp, #0]
  406dbe:	4658      	mov	r0, fp
  406dc0:	f006 f94a 	bl	40d058 <__d2b>
  406dc4:	901a      	str	r0, [sp, #104]	; 0x68
  406dc6:	2800      	cmp	r0, #0
  406dc8:	f000 8444 	beq.w	407654 <_strtod_r+0xc94>
  406dcc:	2101      	movs	r1, #1
  406dce:	4658      	mov	r0, fp
  406dd0:	f005 fec2 	bl	40cb58 <__i2b>
  406dd4:	4607      	mov	r7, r0
  406dd6:	2800      	cmp	r0, #0
  406dd8:	f000 82af 	beq.w	40733a <_strtod_r+0x97a>
  406ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  406dde:	2b00      	cmp	r3, #0
  406de0:	f2c0 812a 	blt.w	407038 <_strtod_r+0x678>
  406de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406de6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406de8:	18d6      	adds	r6, r2, r3
  406dea:	9907      	ldr	r1, [sp, #28]
  406dec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  406dee:	4a87      	ldr	r2, [pc, #540]	; (40700c <_strtod_r+0x64c>)
  406df0:	1a5b      	subs	r3, r3, r1
  406df2:	4423      	add	r3, r4
  406df4:	3b01      	subs	r3, #1
  406df6:	4293      	cmp	r3, r2
  406df8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  406dfc:	f280 80e7 	bge.w	406fce <_strtod_r+0x60e>
  406e00:	1ad2      	subs	r2, r2, r3
  406e02:	2a1f      	cmp	r2, #31
  406e04:	eba4 0402 	sub.w	r4, r4, r2
  406e08:	f300 811a 	bgt.w	407040 <_strtod_r+0x680>
  406e0c:	2301      	movs	r3, #1
  406e0e:	4093      	lsls	r3, r2
  406e10:	930d      	str	r3, [sp, #52]	; 0x34
  406e12:	2300      	movs	r3, #0
  406e14:	930f      	str	r3, [sp, #60]	; 0x3c
  406e16:	4425      	add	r5, r4
  406e18:	9b07      	ldr	r3, [sp, #28]
  406e1a:	4434      	add	r4, r6
  406e1c:	42a6      	cmp	r6, r4
  406e1e:	441d      	add	r5, r3
  406e20:	4633      	mov	r3, r6
  406e22:	bfa8      	it	ge
  406e24:	4623      	movge	r3, r4
  406e26:	42ab      	cmp	r3, r5
  406e28:	bfa8      	it	ge
  406e2a:	462b      	movge	r3, r5
  406e2c:	2b00      	cmp	r3, #0
  406e2e:	dd02      	ble.n	406e36 <_strtod_r+0x476>
  406e30:	1ae4      	subs	r4, r4, r3
  406e32:	1aed      	subs	r5, r5, r3
  406e34:	1af6      	subs	r6, r6, r3
  406e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e38:	b1bb      	cbz	r3, 406e6a <_strtod_r+0x4aa>
  406e3a:	4639      	mov	r1, r7
  406e3c:	461a      	mov	r2, r3
  406e3e:	4658      	mov	r0, fp
  406e40:	f005 ff2c 	bl	40cc9c <__pow5mult>
  406e44:	4607      	mov	r7, r0
  406e46:	2800      	cmp	r0, #0
  406e48:	f000 8277 	beq.w	40733a <_strtod_r+0x97a>
  406e4c:	4601      	mov	r1, r0
  406e4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406e50:	4658      	mov	r0, fp
  406e52:	f005 fe8b 	bl	40cb6c <__multiply>
  406e56:	2800      	cmp	r0, #0
  406e58:	f000 826f 	beq.w	40733a <_strtod_r+0x97a>
  406e5c:	900c      	str	r0, [sp, #48]	; 0x30
  406e5e:	991a      	ldr	r1, [sp, #104]	; 0x68
  406e60:	4658      	mov	r0, fp
  406e62:	f005 fd95 	bl	40c990 <_Bfree>
  406e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e68:	931a      	str	r3, [sp, #104]	; 0x68
  406e6a:	2c00      	cmp	r4, #0
  406e6c:	dd08      	ble.n	406e80 <_strtod_r+0x4c0>
  406e6e:	4622      	mov	r2, r4
  406e70:	991a      	ldr	r1, [sp, #104]	; 0x68
  406e72:	4658      	mov	r0, fp
  406e74:	f005 ff62 	bl	40cd3c <__lshift>
  406e78:	901a      	str	r0, [sp, #104]	; 0x68
  406e7a:	2800      	cmp	r0, #0
  406e7c:	f000 83ea 	beq.w	407654 <_strtod_r+0xc94>
  406e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e82:	b143      	cbz	r3, 406e96 <_strtod_r+0x4d6>
  406e84:	4641      	mov	r1, r8
  406e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406e88:	4658      	mov	r0, fp
  406e8a:	f005 ff07 	bl	40cc9c <__pow5mult>
  406e8e:	4680      	mov	r8, r0
  406e90:	2800      	cmp	r0, #0
  406e92:	f000 8252 	beq.w	40733a <_strtod_r+0x97a>
  406e96:	2d00      	cmp	r5, #0
  406e98:	dd08      	ble.n	406eac <_strtod_r+0x4ec>
  406e9a:	4641      	mov	r1, r8
  406e9c:	462a      	mov	r2, r5
  406e9e:	4658      	mov	r0, fp
  406ea0:	f005 ff4c 	bl	40cd3c <__lshift>
  406ea4:	4680      	mov	r8, r0
  406ea6:	2800      	cmp	r0, #0
  406ea8:	f000 8247 	beq.w	40733a <_strtod_r+0x97a>
  406eac:	2e00      	cmp	r6, #0
  406eae:	dd08      	ble.n	406ec2 <_strtod_r+0x502>
  406eb0:	4639      	mov	r1, r7
  406eb2:	4632      	mov	r2, r6
  406eb4:	4658      	mov	r0, fp
  406eb6:	f005 ff41 	bl	40cd3c <__lshift>
  406eba:	4607      	mov	r7, r0
  406ebc:	2800      	cmp	r0, #0
  406ebe:	f000 823c 	beq.w	40733a <_strtod_r+0x97a>
  406ec2:	4642      	mov	r2, r8
  406ec4:	991a      	ldr	r1, [sp, #104]	; 0x68
  406ec6:	4658      	mov	r0, fp
  406ec8:	f005 ffb0 	bl	40ce2c <__mdiff>
  406ecc:	4682      	mov	sl, r0
  406ece:	2800      	cmp	r0, #0
  406ed0:	f000 8233 	beq.w	40733a <_strtod_r+0x97a>
  406ed4:	2600      	movs	r6, #0
  406ed6:	68c3      	ldr	r3, [r0, #12]
  406ed8:	60c6      	str	r6, [r0, #12]
  406eda:	4639      	mov	r1, r7
  406edc:	930c      	str	r3, [sp, #48]	; 0x30
  406ede:	f005 ff85 	bl	40cdec <__mcmp>
  406ee2:	42b0      	cmp	r0, r6
  406ee4:	f2c0 83b9 	blt.w	40765a <_strtod_r+0xc9a>
  406ee8:	f000 840a 	beq.w	407700 <_strtod_r+0xd40>
  406eec:	4639      	mov	r1, r7
  406eee:	4650      	mov	r0, sl
  406ef0:	f006 f90e 	bl	40d110 <__ratio>
  406ef4:	2200      	movs	r2, #0
  406ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406efa:	4604      	mov	r4, r0
  406efc:	460d      	mov	r5, r1
  406efe:	f007 fa4d 	bl	40e39c <__aeabi_dcmple>
  406f02:	2800      	cmp	r0, #0
  406f04:	d068      	beq.n	406fd8 <_strtod_r+0x618>
  406f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406f08:	2b00      	cmp	r3, #0
  406f0a:	f000 80ad 	beq.w	407068 <_strtod_r+0x6a8>
  406f0e:	9b03      	ldr	r3, [sp, #12]
  406f10:	4d3f      	ldr	r5, [pc, #252]	; (407010 <_strtod_r+0x650>)
  406f12:	960d      	str	r6, [sp, #52]	; 0x34
  406f14:	4699      	mov	r9, r3
  406f16:	4b3e      	ldr	r3, [pc, #248]	; (407010 <_strtod_r+0x650>)
  406f18:	930f      	str	r3, [sp, #60]	; 0x3c
  406f1a:	2400      	movs	r4, #0
  406f1c:	4e3d      	ldr	r6, [pc, #244]	; (407014 <_strtod_r+0x654>)
  406f1e:	4b3e      	ldr	r3, [pc, #248]	; (407018 <_strtod_r+0x658>)
  406f20:	464a      	mov	r2, r9
  406f22:	4016      	ands	r6, r2
  406f24:	429e      	cmp	r6, r3
  406f26:	f000 81b8 	beq.w	40729a <_strtod_r+0x8da>
  406f2a:	9b07      	ldr	r3, [sp, #28]
  406f2c:	b333      	cbz	r3, 406f7c <_strtod_r+0x5bc>
  406f2e:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
  406f32:	d823      	bhi.n	406f7c <_strtod_r+0x5bc>
  406f34:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  406f38:	980d      	ldr	r0, [sp, #52]	; 0x34
  406f3a:	4649      	mov	r1, r9
  406f3c:	a330      	add	r3, pc, #192	; (adr r3, 407000 <_strtod_r+0x640>)
  406f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f42:	f007 fa2b 	bl	40e39c <__aeabi_dcmple>
  406f46:	b1b0      	cbz	r0, 406f76 <_strtod_r+0x5b6>
  406f48:	980d      	ldr	r0, [sp, #52]	; 0x34
  406f4a:	4649      	mov	r1, r9
  406f4c:	f007 fa82 	bl	40e454 <__aeabi_d2uiz>
  406f50:	2800      	cmp	r0, #0
  406f52:	f000 82d0 	beq.w	4074f6 <_strtod_r+0xb36>
  406f56:	f006 ff2f 	bl	40ddb8 <__aeabi_ui2d>
  406f5a:	900d      	str	r0, [sp, #52]	; 0x34
  406f5c:	910f      	str	r1, [sp, #60]	; 0x3c
  406f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406f60:	2b00      	cmp	r3, #0
  406f62:	f040 82c3 	bne.w	4074ec <_strtod_r+0xb2c>
  406f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f68:	9312      	str	r3, [sp, #72]	; 0x48
  406f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406f6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406f70:	9313      	str	r3, [sp, #76]	; 0x4c
  406f72:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  406f76:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  406f7a:	1b9d      	subs	r5, r3, r6
  406f7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406f80:	f005 ffde 	bl	40cf40 <__ulp>
  406f84:	4602      	mov	r2, r0
  406f86:	460b      	mov	r3, r1
  406f88:	4620      	mov	r0, r4
  406f8a:	4629      	mov	r1, r5
  406f8c:	f006 ff8a 	bl	40dea4 <__aeabi_dmul>
  406f90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  406f94:	f006 fdd4 	bl	40db40 <__adddf3>
  406f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406f9c:	460c      	mov	r4, r1
  406f9e:	9b07      	ldr	r3, [sp, #28]
  406fa0:	b923      	cbnz	r3, 406fac <_strtod_r+0x5ec>
  406fa2:	4b1c      	ldr	r3, [pc, #112]	; (407014 <_strtod_r+0x654>)
  406fa4:	4023      	ands	r3, r4
  406fa6:	429e      	cmp	r6, r3
  406fa8:	f000 81e8 	beq.w	40737c <_strtod_r+0x9bc>
  406fac:	991a      	ldr	r1, [sp, #104]	; 0x68
  406fae:	4658      	mov	r0, fp
  406fb0:	f005 fcee 	bl	40c990 <_Bfree>
  406fb4:	4641      	mov	r1, r8
  406fb6:	4658      	mov	r0, fp
  406fb8:	f005 fcea 	bl	40c990 <_Bfree>
  406fbc:	4639      	mov	r1, r7
  406fbe:	4658      	mov	r0, fp
  406fc0:	f005 fce6 	bl	40c990 <_Bfree>
  406fc4:	4651      	mov	r1, sl
  406fc6:	4658      	mov	r0, fp
  406fc8:	f005 fce2 	bl	40c990 <_Bfree>
  406fcc:	e6dc      	b.n	406d88 <_strtod_r+0x3c8>
  406fce:	2300      	movs	r3, #0
  406fd0:	930f      	str	r3, [sp, #60]	; 0x3c
  406fd2:	2301      	movs	r3, #1
  406fd4:	930d      	str	r3, [sp, #52]	; 0x34
  406fd6:	e71e      	b.n	406e16 <_strtod_r+0x456>
  406fd8:	4b10      	ldr	r3, [pc, #64]	; (40701c <_strtod_r+0x65c>)
  406fda:	4620      	mov	r0, r4
  406fdc:	4629      	mov	r1, r5
  406fde:	2200      	movs	r2, #0
  406fe0:	f006 ff60 	bl	40dea4 <__aeabi_dmul>
  406fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406fe6:	900d      	str	r0, [sp, #52]	; 0x34
  406fe8:	910f      	str	r1, [sp, #60]	; 0x3c
  406fea:	2b00      	cmp	r3, #0
  406fec:	d137      	bne.n	40705e <_strtod_r+0x69e>
  406fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  406ff2:	9010      	str	r0, [sp, #64]	; 0x40
  406ff4:	9311      	str	r3, [sp, #68]	; 0x44
  406ff6:	9b03      	ldr	r3, [sp, #12]
  406ff8:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  406ffc:	4699      	mov	r9, r3
  406ffe:	e78d      	b.n	406f1c <_strtod_r+0x55c>
  407000:	ffc00000 	.word	0xffc00000
  407004:	41dfffff 	.word	0x41dfffff
  407008:	004101a0 	.word	0x004101a0
  40700c:	fffffc02 	.word	0xfffffc02
  407010:	3ff00000 	.word	0x3ff00000
  407014:	7ff00000 	.word	0x7ff00000
  407018:	7fe00000 	.word	0x7fe00000
  40701c:	3fe00000 	.word	0x3fe00000
  407020:	f04f 0c00 	mov.w	ip, #0
  407024:	f04f 0e01 	mov.w	lr, #1
  407028:	2800      	cmp	r0, #0
  40702a:	d15e      	bne.n	4070ea <_strtod_r+0x72a>
  40702c:	f1ba 0f00 	cmp.w	sl, #0
  407030:	f43f ad0a 	beq.w	406a48 <_strtod_r+0x88>
  407034:	4681      	mov	r9, r0
  407036:	e5e1      	b.n	406bfc <_strtod_r+0x23c>
  407038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40703a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40703c:	1ad5      	subs	r5, r2, r3
  40703e:	e6d4      	b.n	406dea <_strtod_r+0x42a>
  407040:	4ab0      	ldr	r2, [pc, #704]	; (407304 <_strtod_r+0x944>)
  407042:	1ad2      	subs	r2, r2, r3
  407044:	2301      	movs	r3, #1
  407046:	fa03 f202 	lsl.w	r2, r3, r2
  40704a:	920f      	str	r2, [sp, #60]	; 0x3c
  40704c:	930d      	str	r3, [sp, #52]	; 0x34
  40704e:	e6e2      	b.n	406e16 <_strtod_r+0x456>
  407050:	9619      	str	r6, [sp, #100]	; 0x64
  407052:	2300      	movs	r3, #0
  407054:	f1b9 0f00 	cmp.w	r9, #0
  407058:	f47f ad5e 	bne.w	406b18 <_strtod_r+0x158>
  40705c:	e5a3      	b.n	406ba6 <_strtod_r+0x1e6>
  40705e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407062:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  407066:	e7c6      	b.n	406ff6 <_strtod_r+0x636>
  407068:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40706c:	2900      	cmp	r1, #0
  40706e:	f040 80db 	bne.w	407228 <_strtod_r+0x868>
  407072:	f3c2 0313 	ubfx	r3, r2, #0, #20
  407076:	4691      	mov	r9, r2
  407078:	2b00      	cmp	r3, #0
  40707a:	f040 80db 	bne.w	407234 <_strtod_r+0x874>
  40707e:	2200      	movs	r2, #0
  407080:	4ba1      	ldr	r3, [pc, #644]	; (407308 <_strtod_r+0x948>)
  407082:	4620      	mov	r0, r4
  407084:	4629      	mov	r1, r5
  407086:	f007 f97f 	bl	40e388 <__aeabi_dcmplt>
  40708a:	2800      	cmp	r0, #0
  40708c:	f040 835f 	bne.w	40774e <_strtod_r+0xd8e>
  407090:	4b9e      	ldr	r3, [pc, #632]	; (40730c <_strtod_r+0x94c>)
  407092:	4620      	mov	r0, r4
  407094:	4629      	mov	r1, r5
  407096:	2200      	movs	r2, #0
  407098:	f006 ff04 	bl	40dea4 <__aeabi_dmul>
  40709c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4070a0:	900d      	str	r0, [sp, #52]	; 0x34
  4070a2:	9016      	str	r0, [sp, #88]	; 0x58
  4070a4:	910f      	str	r1, [sp, #60]	; 0x3c
  4070a6:	9317      	str	r3, [sp, #92]	; 0x5c
  4070a8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4070ac:	e736      	b.n	406f1c <_strtod_r+0x55c>
  4070ae:	4648      	mov	r0, r9
  4070b0:	46cc      	mov	ip, r9
  4070b2:	46a1      	mov	r9, r4
  4070b4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
  4070b8:	2b09      	cmp	r3, #9
  4070ba:	d813      	bhi.n	4070e4 <_strtod_r+0x724>
  4070bc:	1c42      	adds	r2, r0, #1
  4070be:	461f      	mov	r7, r3
  4070c0:	2b00      	cmp	r3, #0
  4070c2:	f040 822d 	bne.w	407520 <_strtod_r+0xb60>
  4070c6:	4610      	mov	r0, r2
  4070c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4070ca:	1c53      	adds	r3, r2, #1
  4070cc:	9319      	str	r3, [sp, #100]	; 0x64
  4070ce:	7857      	ldrb	r7, [r2, #1]
  4070d0:	e7f0      	b.n	4070b4 <_strtod_r+0x6f4>
  4070d2:	2301      	movs	r3, #1
  4070d4:	9307      	str	r3, [sp, #28]
  4070d6:	1cb3      	adds	r3, r6, #2
  4070d8:	9319      	str	r3, [sp, #100]	; 0x64
  4070da:	78b7      	ldrb	r7, [r6, #2]
  4070dc:	e59a      	b.n	406c14 <_strtod_r+0x254>
  4070de:	2300      	movs	r3, #0
  4070e0:	9307      	str	r3, [sp, #28]
  4070e2:	e7f8      	b.n	4070d6 <_strtod_r+0x716>
  4070e4:	f04f 0e01 	mov.w	lr, #1
  4070e8:	e50e      	b.n	406b08 <_strtod_r+0x148>
  4070ea:	f04f 0900 	mov.w	r9, #0
  4070ee:	e585      	b.n	406bfc <_strtod_r+0x23c>
  4070f0:	f1be 0f00 	cmp.w	lr, #0
  4070f4:	f47f aca8 	bne.w	406a48 <_strtod_r+0x88>
  4070f8:	3f49      	subs	r7, #73	; 0x49
  4070fa:	2f25      	cmp	r7, #37	; 0x25
  4070fc:	f63f aca4 	bhi.w	406a48 <_strtod_r+0x88>
  407100:	a301      	add	r3, pc, #4	; (adr r3, 407108 <_strtod_r+0x748>)
  407102:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
  407106:	bf00      	nop
  407108:	00406c93 	.word	0x00406c93
  40710c:	00406a49 	.word	0x00406a49
  407110:	00406a49 	.word	0x00406a49
  407114:	00406a49 	.word	0x00406a49
  407118:	00406a49 	.word	0x00406a49
  40711c:	00407243 	.word	0x00407243
  407120:	00406a49 	.word	0x00406a49
  407124:	00406a49 	.word	0x00406a49
  407128:	00406a49 	.word	0x00406a49
  40712c:	00406a49 	.word	0x00406a49
  407130:	00406a49 	.word	0x00406a49
  407134:	00406a49 	.word	0x00406a49
  407138:	00406a49 	.word	0x00406a49
  40713c:	00406a49 	.word	0x00406a49
  407140:	00406a49 	.word	0x00406a49
  407144:	00406a49 	.word	0x00406a49
  407148:	00406a49 	.word	0x00406a49
  40714c:	00406a49 	.word	0x00406a49
  407150:	00406a49 	.word	0x00406a49
  407154:	00406a49 	.word	0x00406a49
  407158:	00406a49 	.word	0x00406a49
  40715c:	00406a49 	.word	0x00406a49
  407160:	00406a49 	.word	0x00406a49
  407164:	00406a49 	.word	0x00406a49
  407168:	00406a49 	.word	0x00406a49
  40716c:	00406a49 	.word	0x00406a49
  407170:	00406a49 	.word	0x00406a49
  407174:	00406a49 	.word	0x00406a49
  407178:	00406a49 	.word	0x00406a49
  40717c:	00406a49 	.word	0x00406a49
  407180:	00406a49 	.word	0x00406a49
  407184:	00406a49 	.word	0x00406a49
  407188:	00406c93 	.word	0x00406c93
  40718c:	00406a49 	.word	0x00406a49
  407190:	00406a49 	.word	0x00406a49
  407194:	00406a49 	.word	0x00406a49
  407198:	00406a49 	.word	0x00406a49
  40719c:	00407243 	.word	0x00407243
  4071a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  4071a4:	f300 80a3 	bgt.w	4072ee <_strtod_r+0x92e>
  4071a8:	1136      	asrs	r6, r6, #4
  4071aa:	2e01      	cmp	r6, #1
  4071ac:	f8df a180 	ldr.w	sl, [pc, #384]	; 407330 <_strtod_r+0x970>
  4071b0:	f340 82e5 	ble.w	40777e <_strtod_r+0xdbe>
  4071b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4071b8:	2300      	movs	r3, #0
  4071ba:	4657      	mov	r7, sl
  4071bc:	4698      	mov	r8, r3
  4071be:	f016 0f01 	tst.w	r6, #1
  4071c2:	f108 0801 	add.w	r8, r8, #1
  4071c6:	ea4f 0666 	mov.w	r6, r6, asr #1
  4071ca:	d004      	beq.n	4071d6 <_strtod_r+0x816>
  4071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
  4071d0:	f006 fe68 	bl	40dea4 <__aeabi_dmul>
  4071d4:	2301      	movs	r3, #1
  4071d6:	2e01      	cmp	r6, #1
  4071d8:	f107 0708 	add.w	r7, r7, #8
  4071dc:	d1ef      	bne.n	4071be <_strtod_r+0x7fe>
  4071de:	2b00      	cmp	r3, #0
  4071e0:	f040 8340 	bne.w	407864 <_strtod_r+0xea4>
  4071e4:	9b03      	ldr	r3, [sp, #12]
  4071e6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  4071ea:	9303      	str	r3, [sp, #12]
  4071ec:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
  4071f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4071f4:	e9d8 0100 	ldrd	r0, r1, [r8]
  4071f8:	f006 fe54 	bl	40dea4 <__aeabi_dmul>
  4071fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407200:	0d1b      	lsrs	r3, r3, #20
  407202:	4a43      	ldr	r2, [pc, #268]	; (407310 <_strtod_r+0x950>)
  407204:	051b      	lsls	r3, r3, #20
  407206:	4293      	cmp	r3, r2
  407208:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40720c:	d86f      	bhi.n	4072ee <_strtod_r+0x92e>
  40720e:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  407212:	4293      	cmp	r3, r2
  407214:	f240 8296 	bls.w	407744 <_strtod_r+0xd84>
  407218:	4b3e      	ldr	r3, [pc, #248]	; (407314 <_strtod_r+0x954>)
  40721a:	9303      	str	r3, [sp, #12]
  40721c:	2300      	movs	r3, #0
  40721e:	9307      	str	r3, [sp, #28]
  407220:	f04f 33ff 	mov.w	r3, #4294967295
  407224:	9302      	str	r3, [sp, #8]
  407226:	e597      	b.n	406d58 <_strtod_r+0x398>
  407228:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  40722c:	2901      	cmp	r1, #1
  40722e:	f000 8166 	beq.w	4074fe <_strtod_r+0xb3e>
  407232:	4691      	mov	r9, r2
  407234:	2300      	movs	r3, #0
  407236:	930d      	str	r3, [sp, #52]	; 0x34
  407238:	4b33      	ldr	r3, [pc, #204]	; (407308 <_strtod_r+0x948>)
  40723a:	4d37      	ldr	r5, [pc, #220]	; (407318 <_strtod_r+0x958>)
  40723c:	930f      	str	r3, [sp, #60]	; 0x3c
  40723e:	2400      	movs	r4, #0
  407240:	e66c      	b.n	406f1c <_strtod_r+0x55c>
  407242:	a819      	add	r0, sp, #100	; 0x64
  407244:	4935      	ldr	r1, [pc, #212]	; (40731c <_strtod_r+0x95c>)
  407246:	f004 fe79 	bl	40bf3c <__match>
  40724a:	2800      	cmp	r0, #0
  40724c:	f43f abfc 	beq.w	406a48 <_strtod_r+0x88>
  407250:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407252:	781b      	ldrb	r3, [r3, #0]
  407254:	2b28      	cmp	r3, #40	; 0x28
  407256:	f000 82d5 	beq.w	407804 <_strtod_r+0xe44>
  40725a:	4b31      	ldr	r3, [pc, #196]	; (407320 <_strtod_r+0x960>)
  40725c:	9303      	str	r3, [sp, #12]
  40725e:	2300      	movs	r3, #0
  407260:	9302      	str	r3, [sp, #8]
  407262:	e52c      	b.n	406cbe <_strtod_r+0x2fe>
  407264:	9a06      	ldr	r2, [sp, #24]
  407266:	9201      	str	r2, [sp, #4]
  407268:	ab1a      	add	r3, sp, #104	; 0x68
  40726a:	9300      	str	r3, [sp, #0]
  40726c:	4a2d      	ldr	r2, [pc, #180]	; (407324 <_strtod_r+0x964>)
  40726e:	ab1b      	add	r3, sp, #108	; 0x6c
  407270:	a919      	add	r1, sp, #100	; 0x64
  407272:	4658      	mov	r0, fp
  407274:	f004 fbda 	bl	40ba2c <__gethex>
  407278:	f010 0607 	ands.w	r6, r0, #7
  40727c:	4605      	mov	r5, r0
  40727e:	f43f ac97 	beq.w	406bb0 <_strtod_r+0x1f0>
  407282:	2e06      	cmp	r6, #6
  407284:	f040 8183 	bne.w	40758e <_strtod_r+0xbce>
  407288:	1c63      	adds	r3, r4, #1
  40728a:	9319      	str	r3, [sp, #100]	; 0x64
  40728c:	2300      	movs	r3, #0
  40728e:	f04f 0900 	mov.w	r9, #0
  407292:	f04f 0a00 	mov.w	sl, #0
  407296:	9306      	str	r3, [sp, #24]
  407298:	e48e      	b.n	406bb8 <_strtod_r+0x1f8>
  40729a:	f1a9 7354 	sub.w	r3, r9, #55574528	; 0x3500000
  40729e:	9303      	str	r3, [sp, #12]
  4072a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4072a4:	4610      	mov	r0, r2
  4072a6:	4619      	mov	r1, r3
  4072a8:	f005 fe4a 	bl	40cf40 <__ulp>
  4072ac:	4602      	mov	r2, r0
  4072ae:	460b      	mov	r3, r1
  4072b0:	4620      	mov	r0, r4
  4072b2:	4629      	mov	r1, r5
  4072b4:	f006 fdf6 	bl	40dea4 <__aeabi_dmul>
  4072b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4072bc:	f006 fc40 	bl	40db40 <__adddf3>
  4072c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4072c8:	0d1b      	lsrs	r3, r3, #20
  4072ca:	4a17      	ldr	r2, [pc, #92]	; (407328 <_strtod_r+0x968>)
  4072cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4072d0:	051b      	lsls	r3, r3, #20
  4072d2:	4293      	cmp	r3, r2
  4072d4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4072d8:	f240 80e6 	bls.w	4074a8 <_strtod_r+0xae8>
  4072dc:	4b0d      	ldr	r3, [pc, #52]	; (407314 <_strtod_r+0x954>)
  4072de:	4299      	cmp	r1, r3
  4072e0:	d028      	beq.n	407334 <_strtod_r+0x974>
  4072e2:	4b0c      	ldr	r3, [pc, #48]	; (407314 <_strtod_r+0x954>)
  4072e4:	9303      	str	r3, [sp, #12]
  4072e6:	f04f 33ff 	mov.w	r3, #4294967295
  4072ea:	9302      	str	r3, [sp, #8]
  4072ec:	e65e      	b.n	406fac <_strtod_r+0x5ec>
  4072ee:	4b0f      	ldr	r3, [pc, #60]	; (40732c <_strtod_r+0x96c>)
  4072f0:	9303      	str	r3, [sp, #12]
  4072f2:	2200      	movs	r2, #0
  4072f4:	2322      	movs	r3, #34	; 0x22
  4072f6:	9202      	str	r2, [sp, #8]
  4072f8:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  4072fc:	f8cb 3000 	str.w	r3, [fp]
  407300:	e45a      	b.n	406bb8 <_strtod_r+0x1f8>
  407302:	bf00      	nop
  407304:	fffffbe2 	.word	0xfffffbe2
  407308:	3ff00000 	.word	0x3ff00000
  40730c:	3fe00000 	.word	0x3fe00000
  407310:	7ca00000 	.word	0x7ca00000
  407314:	7fefffff 	.word	0x7fefffff
  407318:	bff00000 	.word	0xbff00000
  40731c:	0040feb8 	.word	0x0040feb8
  407320:	fff80000 	.word	0xfff80000
  407324:	0040fee8 	.word	0x0040fee8
  407328:	7c9fffff 	.word	0x7c9fffff
  40732c:	7ff00000 	.word	0x7ff00000
  407330:	00410268 	.word	0x00410268
  407334:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407336:	3301      	adds	r3, #1
  407338:	d1d3      	bne.n	4072e2 <_strtod_r+0x922>
  40733a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40733e:	981a      	ldr	r0, [sp, #104]	; 0x68
  407340:	4bb1      	ldr	r3, [pc, #708]	; (407608 <_strtod_r+0xc48>)
  407342:	9303      	str	r3, [sp, #12]
  407344:	2200      	movs	r2, #0
  407346:	9202      	str	r2, [sp, #8]
  407348:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  40734c:	2322      	movs	r3, #34	; 0x22
  40734e:	f8cb 3000 	str.w	r3, [fp]
  407352:	4601      	mov	r1, r0
  407354:	4658      	mov	r0, fp
  407356:	f005 fb1b 	bl	40c990 <_Bfree>
  40735a:	4641      	mov	r1, r8
  40735c:	4658      	mov	r0, fp
  40735e:	f005 fb17 	bl	40c990 <_Bfree>
  407362:	4639      	mov	r1, r7
  407364:	4658      	mov	r0, fp
  407366:	f005 fb13 	bl	40c990 <_Bfree>
  40736a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40736c:	4658      	mov	r0, fp
  40736e:	f005 fb0f 	bl	40c990 <_Bfree>
  407372:	990a      	ldr	r1, [sp, #40]	; 0x28
  407374:	4658      	mov	r0, fp
  407376:	f005 fb0b 	bl	40c990 <_Bfree>
  40737a:	e41d      	b.n	406bb8 <_strtod_r+0x1f8>
  40737c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40737e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407380:	4630      	mov	r0, r6
  407382:	4629      	mov	r1, r5
  407384:	f007 f83e 	bl	40e404 <__aeabi_d2iz>
  407388:	f006 fd26 	bl	40ddd8 <__aeabi_i2d>
  40738c:	460b      	mov	r3, r1
  40738e:	4602      	mov	r2, r0
  407390:	4629      	mov	r1, r5
  407392:	4630      	mov	r0, r6
  407394:	f006 fbd2 	bl	40db3c <__aeabi_dsub>
  407398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40739a:	4605      	mov	r5, r0
  40739c:	460e      	mov	r6, r1
  40739e:	b993      	cbnz	r3, 4073c6 <_strtod_r+0xa06>
  4073a0:	9b02      	ldr	r3, [sp, #8]
  4073a2:	b983      	cbnz	r3, 4073c6 <_strtod_r+0xa06>
  4073a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4073a8:	b96c      	cbnz	r4, 4073c6 <_strtod_r+0xa06>
  4073aa:	a391      	add	r3, pc, #580	; (adr r3, 4075f0 <_strtod_r+0xc30>)
  4073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073b0:	f006 ffea 	bl	40e388 <__aeabi_dcmplt>
  4073b4:	2800      	cmp	r0, #0
  4073b6:	f43f adf9 	beq.w	406fac <_strtod_r+0x5ec>
  4073ba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4073be:	981a      	ldr	r0, [sp, #104]	; 0x68
  4073c0:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  4073c4:	e7c5      	b.n	407352 <_strtod_r+0x992>
  4073c6:	a38c      	add	r3, pc, #560	; (adr r3, 4075f8 <_strtod_r+0xc38>)
  4073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073cc:	4628      	mov	r0, r5
  4073ce:	4631      	mov	r1, r6
  4073d0:	f006 ffda 	bl	40e388 <__aeabi_dcmplt>
  4073d4:	2800      	cmp	r0, #0
  4073d6:	d1f0      	bne.n	4073ba <_strtod_r+0x9fa>
  4073d8:	4628      	mov	r0, r5
  4073da:	4631      	mov	r1, r6
  4073dc:	a388      	add	r3, pc, #544	; (adr r3, 407600 <_strtod_r+0xc40>)
  4073de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073e2:	f006 ffef 	bl	40e3c4 <__aeabi_dcmpgt>
  4073e6:	2800      	cmp	r0, #0
  4073e8:	f43f ade0 	beq.w	406fac <_strtod_r+0x5ec>
  4073ec:	e7e5      	b.n	4073ba <_strtod_r+0x9fa>
  4073ee:	f43f acb1 	beq.w	406d54 <_strtod_r+0x394>
  4073f2:	f1ca 0600 	rsb	r6, sl, #0
  4073f6:	f016 020f 	ands.w	r2, r6, #15
  4073fa:	d00a      	beq.n	407412 <_strtod_r+0xa52>
  4073fc:	4b83      	ldr	r3, [pc, #524]	; (40760c <_strtod_r+0xc4c>)
  4073fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407406:	e9d3 2300 	ldrd	r2, r3, [r3]
  40740a:	f006 fe75 	bl	40e0f8 <__aeabi_ddiv>
  40740e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407412:	1136      	asrs	r6, r6, #4
  407414:	f43f ac9e 	beq.w	406d54 <_strtod_r+0x394>
  407418:	2e1f      	cmp	r6, #31
  40741a:	dc38      	bgt.n	40748e <_strtod_r+0xace>
  40741c:	f016 0310 	ands.w	r3, r6, #16
  407420:	f000 81e0 	beq.w	4077e4 <_strtod_r+0xe24>
  407424:	236a      	movs	r3, #106	; 0x6a
  407426:	2e00      	cmp	r6, #0
  407428:	9307      	str	r3, [sp, #28]
  40742a:	dd13      	ble.n	407454 <_strtod_r+0xa94>
  40742c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407430:	4f77      	ldr	r7, [pc, #476]	; (407610 <_strtod_r+0xc50>)
  407432:	2300      	movs	r3, #0
  407434:	07f2      	lsls	r2, r6, #31
  407436:	d504      	bpl.n	407442 <_strtod_r+0xa82>
  407438:	e9d7 2300 	ldrd	r2, r3, [r7]
  40743c:	f006 fd32 	bl	40dea4 <__aeabi_dmul>
  407440:	2301      	movs	r3, #1
  407442:	1076      	asrs	r6, r6, #1
  407444:	f107 0708 	add.w	r7, r7, #8
  407448:	d1f4      	bne.n	407434 <_strtod_r+0xa74>
  40744a:	2b00      	cmp	r3, #0
  40744c:	f040 81fc 	bne.w	407848 <_strtod_r+0xe88>
  407450:	9b07      	ldr	r3, [sp, #28]
  407452:	b19b      	cbz	r3, 40747c <_strtod_r+0xabc>
  407454:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  407458:	f3c2 530a 	ubfx	r3, r2, #20, #11
  40745c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  407460:	2b00      	cmp	r3, #0
  407462:	4611      	mov	r1, r2
  407464:	dd0a      	ble.n	40747c <_strtod_r+0xabc>
  407466:	2b1f      	cmp	r3, #31
  407468:	f340 81c4 	ble.w	4077f4 <_strtod_r+0xe34>
  40746c:	2200      	movs	r2, #0
  40746e:	2b34      	cmp	r3, #52	; 0x34
  407470:	9202      	str	r2, [sp, #8]
  407472:	f340 81ef 	ble.w	407854 <_strtod_r+0xe94>
  407476:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40747a:	9303      	str	r3, [sp, #12]
  40747c:	2200      	movs	r2, #0
  40747e:	2300      	movs	r3, #0
  407480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407484:	f006 ff76 	bl	40e374 <__aeabi_dcmpeq>
  407488:	2800      	cmp	r0, #0
  40748a:	f43f ac65 	beq.w	406d58 <_strtod_r+0x398>
  40748e:	2322      	movs	r3, #34	; 0x22
  407490:	f8cb 3000 	str.w	r3, [fp]
  407494:	f04f 0900 	mov.w	r9, #0
  407498:	f04f 0a00 	mov.w	sl, #0
  40749c:	f7ff bb8c 	b.w	406bb8 <_strtod_r+0x1f8>
  4074a0:	f644 631f 	movw	r3, #19999	; 0x4e1f
  4074a4:	f7ff bbeb 	b.w	406c7e <_strtod_r+0x2be>
  4074a8:	9b03      	ldr	r3, [sp, #12]
  4074aa:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
  4074ae:	9403      	str	r4, [sp, #12]
  4074b0:	e575      	b.n	406f9e <_strtod_r+0x5de>
  4074b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4074b4:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
  4074b8:	429e      	cmp	r6, r3
  4074ba:	f73f ac31 	bgt.w	406d20 <_strtod_r+0x360>
  4074be:	4c53      	ldr	r4, [pc, #332]	; (40760c <_strtod_r+0xc4c>)
  4074c0:	f1c9 090f 	rsb	r9, r9, #15
  4074c4:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
  4074c8:	ebc9 0906 	rsb	r9, r9, r6
  4074cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4074d0:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
  4074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4074d8:	f006 fce4 	bl	40dea4 <__aeabi_dmul>
  4074dc:	e9d4 2300 	ldrd	r2, r3, [r4]
  4074e0:	f006 fce0 	bl	40dea4 <__aeabi_dmul>
  4074e4:	4681      	mov	r9, r0
  4074e6:	468a      	mov	sl, r1
  4074e8:	f7ff bb66 	b.w	406bb8 <_strtod_r+0x1f8>
  4074ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4074ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4074f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4074f4:	e53d      	b.n	406f72 <_strtod_r+0x5b2>
  4074f6:	4a47      	ldr	r2, [pc, #284]	; (407614 <_strtod_r+0xc54>)
  4074f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4074fa:	900d      	str	r0, [sp, #52]	; 0x34
  4074fc:	e52f      	b.n	406f5e <_strtod_r+0x59e>
  4074fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  407502:	4691      	mov	r9, r2
  407504:	2a00      	cmp	r2, #0
  407506:	f47f ae95 	bne.w	407234 <_strtod_r+0x874>
  40750a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40750e:	2322      	movs	r3, #34	; 0x22
  407510:	f8cb 3000 	str.w	r3, [fp]
  407514:	981a      	ldr	r0, [sp, #104]	; 0x68
  407516:	f04f 0900 	mov.w	r9, #0
  40751a:	f04f 0a00 	mov.w	sl, #0
  40751e:	e718      	b.n	407352 <_strtod_r+0x992>
  407520:	2a01      	cmp	r2, #1
  407522:	4494      	add	ip, r2
  407524:	bf18      	it	ne
  407526:	4448      	addne	r0, r9
  407528:	d103      	bne.n	407532 <_strtod_r+0xb72>
  40752a:	e188      	b.n	40783e <_strtod_r+0xe7e>
  40752c:	0055      	lsls	r5, r2, #1
  40752e:	4581      	cmp	r9, r0
  407530:	d00f      	beq.n	407552 <_strtod_r+0xb92>
  407532:	f109 0901 	add.w	r9, r9, #1
  407536:	f109 32ff 	add.w	r2, r9, #4294967295
  40753a:	2a08      	cmp	r2, #8
  40753c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  407540:	ddf4      	ble.n	40752c <_strtod_r+0xb6c>
  407542:	f1b9 0f10 	cmp.w	r9, #16
  407546:	bfdc      	itt	le
  407548:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  40754c:	ea4f 0848 	movle.w	r8, r8, lsl #1
  407550:	e7ed      	b.n	40752e <_strtod_r+0xb6e>
  407552:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407554:	f109 0901 	add.w	r9, r9, #1
  407558:	2808      	cmp	r0, #8
  40755a:	dd12      	ble.n	407582 <_strtod_r+0xbc2>
  40755c:	f1b9 0f10 	cmp.w	r9, #16
  407560:	bfd8      	it	le
  407562:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
  407566:	f04f 0000 	mov.w	r0, #0
  40756a:	bfd8      	it	le
  40756c:	eb03 0848 	addle.w	r8, r3, r8, lsl #1
  407570:	e5ab      	b.n	4070ca <_strtod_r+0x70a>
  407572:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407574:	9308      	str	r3, [sp, #32]
  407576:	3f30      	subs	r7, #48	; 0x30
  407578:	f100 0c01 	add.w	ip, r0, #1
  40757c:	461a      	mov	r2, r3
  40757e:	f04f 0901 	mov.w	r9, #1
  407582:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  407586:	eb07 0545 	add.w	r5, r7, r5, lsl #1
  40758a:	2000      	movs	r0, #0
  40758c:	e59d      	b.n	4070ca <_strtod_r+0x70a>
  40758e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407590:	b13a      	cbz	r2, 4075a2 <_strtod_r+0xbe2>
  407592:	2135      	movs	r1, #53	; 0x35
  407594:	a81c      	add	r0, sp, #112	; 0x70
  407596:	f005 fde5 	bl	40d164 <__copybits>
  40759a:	4658      	mov	r0, fp
  40759c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40759e:	f005 f9f7 	bl	40c990 <_Bfree>
  4075a2:	2e06      	cmp	r6, #6
  4075a4:	d80b      	bhi.n	4075be <_strtod_r+0xbfe>
  4075a6:	e8df f006 	tbb	[pc, r6]
  4075aa:	371d      	.short	0x371d
  4075ac:	37041318 	.word	0x37041318
  4075b0:	1d          	.byte	0x1d
  4075b1:	00          	.byte	0x00
  4075b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4075b6:	9303      	str	r3, [sp, #12]
  4075b8:	f04f 33ff 	mov.w	r3, #4294967295
  4075bc:	9302      	str	r3, [sp, #8]
  4075be:	0729      	lsls	r1, r5, #28
  4075c0:	f57f ab7d 	bpl.w	406cbe <_strtod_r+0x2fe>
  4075c4:	9b03      	ldr	r3, [sp, #12]
  4075c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4075ca:	9303      	str	r3, [sp, #12]
  4075cc:	f7ff bb77 	b.w	406cbe <_strtod_r+0x2fe>
  4075d0:	4b0d      	ldr	r3, [pc, #52]	; (407608 <_strtod_r+0xc48>)
  4075d2:	9303      	str	r3, [sp, #12]
  4075d4:	2300      	movs	r3, #0
  4075d6:	9302      	str	r3, [sp, #8]
  4075d8:	e7f1      	b.n	4075be <_strtod_r+0xbfe>
  4075da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4075dc:	9302      	str	r3, [sp, #8]
  4075de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4075e0:	9303      	str	r3, [sp, #12]
  4075e2:	e7ec      	b.n	4075be <_strtod_r+0xbfe>
  4075e4:	2300      	movs	r3, #0
  4075e6:	9303      	str	r3, [sp, #12]
  4075e8:	9302      	str	r3, [sp, #8]
  4075ea:	e7e8      	b.n	4075be <_strtod_r+0xbfe>
  4075ec:	f3af 8000 	nop.w
  4075f0:	94a03595 	.word	0x94a03595
  4075f4:	3fcfffff 	.word	0x3fcfffff
  4075f8:	94a03595 	.word	0x94a03595
  4075fc:	3fdfffff 	.word	0x3fdfffff
  407600:	35afe535 	.word	0x35afe535
  407604:	3fe00000 	.word	0x3fe00000
  407608:	7ff00000 	.word	0x7ff00000
  40760c:	004101a0 	.word	0x004101a0
  407610:	0040fec0 	.word	0x0040fec0
  407614:	3ff00000 	.word	0x3ff00000
  407618:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40761a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40761c:	991c      	ldr	r1, [sp, #112]	; 0x70
  40761e:	9102      	str	r1, [sp, #8]
  407620:	f202 4233 	addw	r2, r2, #1075	; 0x433
  407624:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  407628:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  40762c:	9303      	str	r3, [sp, #12]
  40762e:	e7c6      	b.n	4075be <_strtod_r+0xbfe>
  407630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407632:	f112 0316 	adds.w	r3, r2, #22
  407636:	f6ff ab73 	blt.w	406d20 <_strtod_r+0x360>
  40763a:	4b8c      	ldr	r3, [pc, #560]	; (40786c <_strtod_r+0xeac>)
  40763c:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
  407640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407644:	e9d3 2300 	ldrd	r2, r3, [r3]
  407648:	f006 fd56 	bl	40e0f8 <__aeabi_ddiv>
  40764c:	4681      	mov	r9, r0
  40764e:	468a      	mov	sl, r1
  407650:	f7ff bab2 	b.w	406bb8 <_strtod_r+0x1f8>
  407654:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  407658:	e672      	b.n	407340 <_strtod_r+0x980>
  40765a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40765c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  407660:	4655      	mov	r5, sl
  407662:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
  407666:	bb7e      	cbnz	r6, 4076c8 <_strtod_r+0xd08>
  407668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40766c:	bb60      	cbnz	r0, 4076c8 <_strtod_r+0xd08>
  40766e:	f3c1 0313 	ubfx	r3, r1, #0, #20
  407672:	460c      	mov	r4, r1
  407674:	bb43      	cbnz	r3, 4076c8 <_strtod_r+0xd08>
  407676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40767a:	0d1b      	lsrs	r3, r3, #20
  40767c:	051b      	lsls	r3, r3, #20
  40767e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  407682:	d921      	bls.n	4076c8 <_strtod_r+0xd08>
  407684:	696b      	ldr	r3, [r5, #20]
  407686:	b913      	cbnz	r3, 40768e <_strtod_r+0xcce>
  407688:	692b      	ldr	r3, [r5, #16]
  40768a:	2b01      	cmp	r3, #1
  40768c:	dd1c      	ble.n	4076c8 <_strtod_r+0xd08>
  40768e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407690:	2201      	movs	r2, #1
  407692:	4658      	mov	r0, fp
  407694:	f005 fb52 	bl	40cd3c <__lshift>
  407698:	4639      	mov	r1, r7
  40769a:	900a      	str	r0, [sp, #40]	; 0x28
  40769c:	f005 fba6 	bl	40cdec <__mcmp>
  4076a0:	2800      	cmp	r0, #0
  4076a2:	dd11      	ble.n	4076c8 <_strtod_r+0xd08>
  4076a4:	9b07      	ldr	r3, [sp, #28]
  4076a6:	2b00      	cmp	r3, #0
  4076a8:	f040 80be 	bne.w	407828 <_strtod_r+0xe68>
  4076ac:	4b70      	ldr	r3, [pc, #448]	; (407870 <_strtod_r+0xeb0>)
  4076ae:	4023      	ands	r3, r4
  4076b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4076b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  4076b8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  4076bc:	9303      	str	r3, [sp, #12]
  4076be:	f04f 33ff 	mov.w	r3, #4294967295
  4076c2:	9302      	str	r3, [sp, #8]
  4076c4:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  4076c8:	9b07      	ldr	r3, [sp, #28]
  4076ca:	b1bb      	cbz	r3, 4076fc <_strtod_r+0xd3c>
  4076cc:	4b69      	ldr	r3, [pc, #420]	; (407874 <_strtod_r+0xeb4>)
  4076ce:	9315      	str	r3, [sp, #84]	; 0x54
  4076d0:	2300      	movs	r3, #0
  4076d2:	9314      	str	r3, [sp, #80]	; 0x50
  4076d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  4076d8:	4648      	mov	r0, r9
  4076da:	4651      	mov	r1, sl
  4076dc:	f006 fbe2 	bl	40dea4 <__aeabi_dmul>
  4076e0:	4603      	mov	r3, r0
  4076e2:	460c      	mov	r4, r1
  4076e4:	4681      	mov	r9, r0
  4076e6:	468a      	mov	sl, r1
  4076e8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4076ec:	b931      	cbnz	r1, 4076fc <_strtod_r+0xd3c>
  4076ee:	9b02      	ldr	r3, [sp, #8]
  4076f0:	b923      	cbnz	r3, 4076fc <_strtod_r+0xd3c>
  4076f2:	2322      	movs	r3, #34	; 0x22
  4076f4:	981a      	ldr	r0, [sp, #104]	; 0x68
  4076f6:	f8cb 3000 	str.w	r3, [fp]
  4076fa:	e62a      	b.n	407352 <_strtod_r+0x992>
  4076fc:	981a      	ldr	r0, [sp, #104]	; 0x68
  4076fe:	e628      	b.n	407352 <_strtod_r+0x992>
  407700:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  407702:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  407706:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
  40770a:	b34e      	cbz	r6, 407760 <_strtod_r+0xda0>
  40770c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  407710:	4b59      	ldr	r3, [pc, #356]	; (407878 <_strtod_r+0xeb8>)
  407712:	f3c5 0113 	ubfx	r1, r5, #0, #20
  407716:	4299      	cmp	r1, r3
  407718:	462a      	mov	r2, r5
  40771a:	d045      	beq.n	4077a8 <_strtod_r+0xde8>
  40771c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40771e:	b34b      	cbz	r3, 407774 <_strtod_r+0xdb4>
  407720:	9a03      	ldr	r2, [sp, #12]
  407722:	4213      	tst	r3, r2
  407724:	d0d0      	beq.n	4076c8 <_strtod_r+0xd08>
  407726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40772a:	9a07      	ldr	r2, [sp, #28]
  40772c:	b356      	cbz	r6, 407784 <_strtod_r+0xdc4>
  40772e:	f7ff f925 	bl	40697c <sulp>
  407732:	4602      	mov	r2, r0
  407734:	460b      	mov	r3, r1
  407736:	4648      	mov	r0, r9
  407738:	4651      	mov	r1, sl
  40773a:	f006 fa01 	bl	40db40 <__adddf3>
  40773e:	4681      	mov	r9, r0
  407740:	468a      	mov	sl, r1
  407742:	e7c1      	b.n	4076c8 <_strtod_r+0xd08>
  407744:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  407748:	9303      	str	r3, [sp, #12]
  40774a:	f7ff bb03 	b.w	406d54 <_strtod_r+0x394>
  40774e:	4b4b      	ldr	r3, [pc, #300]	; (40787c <_strtod_r+0xebc>)
  407750:	4c4b      	ldr	r4, [pc, #300]	; (407880 <_strtod_r+0xec0>)
  407752:	930f      	str	r3, [sp, #60]	; 0x3c
  407754:	2300      	movs	r3, #0
  407756:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  40775a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40775c:	930d      	str	r3, [sp, #52]	; 0x34
  40775e:	e4a3      	b.n	4070a8 <_strtod_r+0x6e8>
  407760:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  407764:	f3c2 0313 	ubfx	r3, r2, #0, #20
  407768:	4614      	mov	r4, r2
  40776a:	2b00      	cmp	r3, #0
  40776c:	d1d6      	bne.n	40771c <_strtod_r+0xd5c>
  40776e:	2900      	cmp	r1, #0
  407770:	d1d4      	bne.n	40771c <_strtod_r+0xd5c>
  407772:	e797      	b.n	4076a4 <_strtod_r+0xce4>
  407774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407776:	9a02      	ldr	r2, [sp, #8]
  407778:	4213      	tst	r3, r2
  40777a:	d0a5      	beq.n	4076c8 <_strtod_r+0xd08>
  40777c:	e7d3      	b.n	407726 <_strtod_r+0xd66>
  40777e:	f04f 0800 	mov.w	r8, #0
  407782:	e52f      	b.n	4071e4 <_strtod_r+0x824>
  407784:	f7ff f8fa 	bl	40697c <sulp>
  407788:	4602      	mov	r2, r0
  40778a:	460b      	mov	r3, r1
  40778c:	4648      	mov	r0, r9
  40778e:	4651      	mov	r1, sl
  407790:	f006 f9d4 	bl	40db3c <__aeabi_dsub>
  407794:	2200      	movs	r2, #0
  407796:	2300      	movs	r3, #0
  407798:	4681      	mov	r9, r0
  40779a:	468a      	mov	sl, r1
  40779c:	f006 fdea 	bl	40e374 <__aeabi_dcmpeq>
  4077a0:	2800      	cmp	r0, #0
  4077a2:	f47f aeb4 	bne.w	40750e <_strtod_r+0xb4e>
  4077a6:	e78f      	b.n	4076c8 <_strtod_r+0xd08>
  4077a8:	9b07      	ldr	r3, [sp, #28]
  4077aa:	9902      	ldr	r1, [sp, #8]
  4077ac:	b1fb      	cbz	r3, 4077ee <_strtod_r+0xe2e>
  4077ae:	4b30      	ldr	r3, [pc, #192]	; (407870 <_strtod_r+0xeb0>)
  4077b0:	402b      	ands	r3, r5
  4077b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  4077b6:	d81a      	bhi.n	4077ee <_strtod_r+0xe2e>
  4077b8:	0d1b      	lsrs	r3, r3, #20
  4077ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4077be:	f04f 30ff 	mov.w	r0, #4294967295
  4077c2:	fa00 f303 	lsl.w	r3, r0, r3
  4077c6:	428b      	cmp	r3, r1
  4077c8:	d1a8      	bne.n	40771c <_strtod_r+0xd5c>
  4077ca:	492e      	ldr	r1, [pc, #184]	; (407884 <_strtod_r+0xec4>)
  4077cc:	428a      	cmp	r2, r1
  4077ce:	d03e      	beq.n	40784e <_strtod_r+0xe8e>
  4077d0:	4b27      	ldr	r3, [pc, #156]	; (407870 <_strtod_r+0xeb0>)
  4077d2:	4013      	ands	r3, r2
  4077d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  4077d8:	9303      	str	r3, [sp, #12]
  4077da:	2300      	movs	r3, #0
  4077dc:	9302      	str	r3, [sp, #8]
  4077de:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
  4077e2:	e771      	b.n	4076c8 <_strtod_r+0xd08>
  4077e4:	2e00      	cmp	r6, #0
  4077e6:	9307      	str	r3, [sp, #28]
  4077e8:	f73f ae20 	bgt.w	40742c <_strtod_r+0xa6c>
  4077ec:	e646      	b.n	40747c <_strtod_r+0xabc>
  4077ee:	f04f 33ff 	mov.w	r3, #4294967295
  4077f2:	e7e8      	b.n	4077c6 <_strtod_r+0xe06>
  4077f4:	f04f 32ff 	mov.w	r2, #4294967295
  4077f8:	fa02 f303 	lsl.w	r3, r2, r3
  4077fc:	9a02      	ldr	r2, [sp, #8]
  4077fe:	401a      	ands	r2, r3
  407800:	9202      	str	r2, [sp, #8]
  407802:	e63b      	b.n	40747c <_strtod_r+0xabc>
  407804:	a819      	add	r0, sp, #100	; 0x64
  407806:	aa1c      	add	r2, sp, #112	; 0x70
  407808:	491f      	ldr	r1, [pc, #124]	; (407888 <_strtod_r+0xec8>)
  40780a:	f004 fbaf 	bl	40bf6c <__hexnan>
  40780e:	2805      	cmp	r0, #5
  407810:	f47f ad23 	bne.w	40725a <_strtod_r+0x89a>
  407814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407816:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40781a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40781e:	9303      	str	r3, [sp, #12]
  407820:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  407822:	9302      	str	r3, [sp, #8]
  407824:	f7ff ba4b 	b.w	406cbe <_strtod_r+0x2fe>
  407828:	4b11      	ldr	r3, [pc, #68]	; (407870 <_strtod_r+0xeb0>)
  40782a:	4023      	ands	r3, r4
  40782c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  407830:	f73f af3e 	bgt.w	4076b0 <_strtod_r+0xcf0>
  407834:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  407838:	f73f af48 	bgt.w	4076cc <_strtod_r+0xd0c>
  40783c:	e667      	b.n	40750e <_strtod_r+0xb4e>
  40783e:	4648      	mov	r0, r9
  407840:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407842:	f109 0901 	add.w	r9, r9, #1
  407846:	e687      	b.n	407558 <_strtod_r+0xb98>
  407848:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40784c:	e600      	b.n	407450 <_strtod_r+0xa90>
  40784e:	3301      	adds	r3, #1
  407850:	d1be      	bne.n	4077d0 <_strtod_r+0xe10>
  407852:	e574      	b.n	40733e <_strtod_r+0x97e>
  407854:	3b20      	subs	r3, #32
  407856:	f04f 32ff 	mov.w	r2, #4294967295
  40785a:	fa02 f303 	lsl.w	r3, r2, r3
  40785e:	400b      	ands	r3, r1
  407860:	9303      	str	r3, [sp, #12]
  407862:	e60b      	b.n	40747c <_strtod_r+0xabc>
  407864:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407868:	e4bc      	b.n	4071e4 <_strtod_r+0x824>
  40786a:	bf00      	nop
  40786c:	004101a0 	.word	0x004101a0
  407870:	7ff00000 	.word	0x7ff00000
  407874:	39500000 	.word	0x39500000
  407878:	000fffff 	.word	0x000fffff
  40787c:	3fe00000 	.word	0x3fe00000
  407880:	bfe00000 	.word	0xbfe00000
  407884:	7fefffff 	.word	0x7fefffff
  407888:	0040fe98 	.word	0x0040fe98

0040788c <strtof>:
  40788c:	b538      	push	{r3, r4, r5, lr}
  40788e:	4b0b      	ldr	r3, [pc, #44]	; (4078bc <strtof+0x30>)
  407890:	460a      	mov	r2, r1
  407892:	4601      	mov	r1, r0
  407894:	6818      	ldr	r0, [r3, #0]
  407896:	f7ff f893 	bl	4069c0 <_strtod_r>
  40789a:	4602      	mov	r2, r0
  40789c:	460b      	mov	r3, r1
  40789e:	4604      	mov	r4, r0
  4078a0:	460d      	mov	r5, r1
  4078a2:	f006 fd99 	bl	40e3d8 <__aeabi_dcmpun>
  4078a6:	b920      	cbnz	r0, 4078b2 <strtof+0x26>
  4078a8:	4620      	mov	r0, r4
  4078aa:	4629      	mov	r1, r5
  4078ac:	f006 fdf2 	bl	40e494 <__aeabi_d2f>
  4078b0:	bd38      	pop	{r3, r4, r5, pc}
  4078b2:	2000      	movs	r0, #0
  4078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4078b8:	f005 bea8 	b.w	40d60c <nanf>
  4078bc:	20000458 	.word	0x20000458

004078c0 <strtok>:
  4078c0:	4b02      	ldr	r3, [pc, #8]	; (4078cc <strtok+0xc>)
  4078c2:	681a      	ldr	r2, [r3, #0]
  4078c4:	2301      	movs	r3, #1
  4078c6:	325c      	adds	r2, #92	; 0x5c
  4078c8:	f000 b802 	b.w	4078d0 <__strtok_r>
  4078cc:	20000458 	.word	0x20000458

004078d0 <__strtok_r>:
  4078d0:	b4f0      	push	{r4, r5, r6, r7}
  4078d2:	b320      	cbz	r0, 40791e <__strtok_r+0x4e>
  4078d4:	4607      	mov	r7, r0
  4078d6:	460d      	mov	r5, r1
  4078d8:	f817 6b01 	ldrb.w	r6, [r7], #1
  4078dc:	e001      	b.n	4078e2 <__strtok_r+0x12>
  4078de:	42a6      	cmp	r6, r4
  4078e0:	d016      	beq.n	407910 <__strtok_r+0x40>
  4078e2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4078e6:	2c00      	cmp	r4, #0
  4078e8:	d1f9      	bne.n	4078de <__strtok_r+0xe>
  4078ea:	b1ee      	cbz	r6, 407928 <__strtok_r+0x58>
  4078ec:	463e      	mov	r6, r7
  4078ee:	460c      	mov	r4, r1
  4078f0:	f816 5b01 	ldrb.w	r5, [r6], #1
  4078f4:	e000      	b.n	4078f8 <__strtok_r+0x28>
  4078f6:	b173      	cbz	r3, 407916 <__strtok_r+0x46>
  4078f8:	f814 3b01 	ldrb.w	r3, [r4], #1
  4078fc:	429d      	cmp	r5, r3
  4078fe:	d1fa      	bne.n	4078f6 <__strtok_r+0x26>
  407900:	b15d      	cbz	r5, 40791a <__strtok_r+0x4a>
  407902:	2300      	movs	r3, #0
  407904:	703b      	strb	r3, [r7, #0]
  407906:	6016      	str	r6, [r2, #0]
  407908:	4606      	mov	r6, r0
  40790a:	4630      	mov	r0, r6
  40790c:	bcf0      	pop	{r4, r5, r6, r7}
  40790e:	4770      	bx	lr
  407910:	b163      	cbz	r3, 40792c <__strtok_r+0x5c>
  407912:	4638      	mov	r0, r7
  407914:	e7de      	b.n	4078d4 <__strtok_r+0x4>
  407916:	4637      	mov	r7, r6
  407918:	e7e8      	b.n	4078ec <__strtok_r+0x1c>
  40791a:	462e      	mov	r6, r5
  40791c:	e7f3      	b.n	407906 <__strtok_r+0x36>
  40791e:	6810      	ldr	r0, [r2, #0]
  407920:	2800      	cmp	r0, #0
  407922:	d1d7      	bne.n	4078d4 <__strtok_r+0x4>
  407924:	4606      	mov	r6, r0
  407926:	e7f0      	b.n	40790a <__strtok_r+0x3a>
  407928:	6016      	str	r6, [r2, #0]
  40792a:	e7ee      	b.n	40790a <__strtok_r+0x3a>
  40792c:	6017      	str	r7, [r2, #0]
  40792e:	4606      	mov	r6, r0
  407930:	7003      	strb	r3, [r0, #0]
  407932:	e7ea      	b.n	40790a <__strtok_r+0x3a>

00407934 <_strtol_r>:
  407934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407938:	4c47      	ldr	r4, [pc, #284]	; (407a58 <_strtol_r+0x124>)
  40793a:	4683      	mov	fp, r0
  40793c:	460e      	mov	r6, r1
  40793e:	f8d4 e000 	ldr.w	lr, [r4]
  407942:	e000      	b.n	407946 <_strtol_r+0x12>
  407944:	4626      	mov	r6, r4
  407946:	4634      	mov	r4, r6
  407948:	f814 5b01 	ldrb.w	r5, [r4], #1
  40794c:	eb0e 0005 	add.w	r0, lr, r5
  407950:	7840      	ldrb	r0, [r0, #1]
  407952:	f000 0008 	and.w	r0, r0, #8
  407956:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  40795a:	2800      	cmp	r0, #0
  40795c:	d1f2      	bne.n	407944 <_strtol_r+0x10>
  40795e:	2d2d      	cmp	r5, #45	; 0x2d
  407960:	d05c      	beq.n	407a1c <_strtol_r+0xe8>
  407962:	2d2b      	cmp	r5, #43	; 0x2b
  407964:	bf04      	itt	eq
  407966:	7875      	ldrbeq	r5, [r6, #1]
  407968:	1cb4      	addeq	r4, r6, #2
  40796a:	2b00      	cmp	r3, #0
  40796c:	d03e      	beq.n	4079ec <_strtol_r+0xb8>
  40796e:	2b10      	cmp	r3, #16
  407970:	d060      	beq.n	407a34 <_strtol_r+0x100>
  407972:	469a      	mov	sl, r3
  407974:	f1b8 0f00 	cmp.w	r8, #0
  407978:	bf0c      	ite	eq
  40797a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40797e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  407982:	2700      	movs	r7, #0
  407984:	fbb0 f9fa 	udiv	r9, r0, sl
  407988:	46bc      	mov	ip, r7
  40798a:	fb0a 0019 	mls	r0, sl, r9, r0
  40798e:	e00c      	b.n	4079aa <_strtol_r+0x76>
  407990:	3d30      	subs	r5, #48	; 0x30
  407992:	42ab      	cmp	r3, r5
  407994:	dd19      	ble.n	4079ca <_strtol_r+0x96>
  407996:	1c7e      	adds	r6, r7, #1
  407998:	d005      	beq.n	4079a6 <_strtol_r+0x72>
  40799a:	45cc      	cmp	ip, r9
  40799c:	d823      	bhi.n	4079e6 <_strtol_r+0xb2>
  40799e:	d020      	beq.n	4079e2 <_strtol_r+0xae>
  4079a0:	fb0a 5c0c 	mla	ip, sl, ip, r5
  4079a4:	2701      	movs	r7, #1
  4079a6:	f814 5b01 	ldrb.w	r5, [r4], #1
  4079aa:	eb0e 0605 	add.w	r6, lr, r5
  4079ae:	7876      	ldrb	r6, [r6, #1]
  4079b0:	f016 0f04 	tst.w	r6, #4
  4079b4:	d1ec      	bne.n	407990 <_strtol_r+0x5c>
  4079b6:	f016 0603 	ands.w	r6, r6, #3
  4079ba:	d006      	beq.n	4079ca <_strtol_r+0x96>
  4079bc:	2e01      	cmp	r6, #1
  4079be:	bf14      	ite	ne
  4079c0:	2657      	movne	r6, #87	; 0x57
  4079c2:	2637      	moveq	r6, #55	; 0x37
  4079c4:	1bad      	subs	r5, r5, r6
  4079c6:	42ab      	cmp	r3, r5
  4079c8:	dce5      	bgt.n	407996 <_strtol_r+0x62>
  4079ca:	1c7b      	adds	r3, r7, #1
  4079cc:	d016      	beq.n	4079fc <_strtol_r+0xc8>
  4079ce:	f1b8 0f00 	cmp.w	r8, #0
  4079d2:	d110      	bne.n	4079f6 <_strtol_r+0xc2>
  4079d4:	4660      	mov	r0, ip
  4079d6:	2a00      	cmp	r2, #0
  4079d8:	d039      	beq.n	407a4e <_strtol_r+0x11a>
  4079da:	b9df      	cbnz	r7, 407a14 <_strtol_r+0xe0>
  4079dc:	6011      	str	r1, [r2, #0]
  4079de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079e2:	4285      	cmp	r5, r0
  4079e4:	dddc      	ble.n	4079a0 <_strtol_r+0x6c>
  4079e6:	f04f 37ff 	mov.w	r7, #4294967295
  4079ea:	e7dc      	b.n	4079a6 <_strtol_r+0x72>
  4079ec:	2d30      	cmp	r5, #48	; 0x30
  4079ee:	d01a      	beq.n	407a26 <_strtol_r+0xf2>
  4079f0:	230a      	movs	r3, #10
  4079f2:	469a      	mov	sl, r3
  4079f4:	e7be      	b.n	407974 <_strtol_r+0x40>
  4079f6:	f1cc 0c00 	rsb	ip, ip, #0
  4079fa:	e7eb      	b.n	4079d4 <_strtol_r+0xa0>
  4079fc:	f1b8 0f00 	cmp.w	r8, #0
  407a00:	f04f 0322 	mov.w	r3, #34	; 0x22
  407a04:	bf0c      	ite	eq
  407a06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a0a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  407a0e:	f8cb 3000 	str.w	r3, [fp]
  407a12:	b1f2      	cbz	r2, 407a52 <_strtol_r+0x11e>
  407a14:	1e61      	subs	r1, r4, #1
  407a16:	6011      	str	r1, [r2, #0]
  407a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a1c:	1cb4      	adds	r4, r6, #2
  407a1e:	7875      	ldrb	r5, [r6, #1]
  407a20:	f04f 0801 	mov.w	r8, #1
  407a24:	e7a1      	b.n	40796a <_strtol_r+0x36>
  407a26:	7823      	ldrb	r3, [r4, #0]
  407a28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  407a2c:	2b58      	cmp	r3, #88	; 0x58
  407a2e:	d008      	beq.n	407a42 <_strtol_r+0x10e>
  407a30:	2308      	movs	r3, #8
  407a32:	e79e      	b.n	407972 <_strtol_r+0x3e>
  407a34:	2d30      	cmp	r5, #48	; 0x30
  407a36:	d19c      	bne.n	407972 <_strtol_r+0x3e>
  407a38:	7820      	ldrb	r0, [r4, #0]
  407a3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  407a3e:	2858      	cmp	r0, #88	; 0x58
  407a40:	d197      	bne.n	407972 <_strtol_r+0x3e>
  407a42:	f04f 0a10 	mov.w	sl, #16
  407a46:	7865      	ldrb	r5, [r4, #1]
  407a48:	4653      	mov	r3, sl
  407a4a:	3402      	adds	r4, #2
  407a4c:	e792      	b.n	407974 <_strtol_r+0x40>
  407a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a56:	bf00      	nop
  407a58:	2000045c 	.word	0x2000045c

00407a5c <strtol>:
  407a5c:	b410      	push	{r4}
  407a5e:	4c04      	ldr	r4, [pc, #16]	; (407a70 <strtol+0x14>)
  407a60:	4613      	mov	r3, r2
  407a62:	460a      	mov	r2, r1
  407a64:	4601      	mov	r1, r0
  407a66:	6820      	ldr	r0, [r4, #0]
  407a68:	bc10      	pop	{r4}
  407a6a:	f7ff bf63 	b.w	407934 <_strtol_r>
  407a6e:	bf00      	nop
  407a70:	20000458 	.word	0x20000458

00407a74 <_svfprintf_r>:
  407a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a78:	b0c1      	sub	sp, #260	; 0x104
  407a7a:	460c      	mov	r4, r1
  407a7c:	9109      	str	r1, [sp, #36]	; 0x24
  407a7e:	4615      	mov	r5, r2
  407a80:	930e      	str	r3, [sp, #56]	; 0x38
  407a82:	900a      	str	r0, [sp, #40]	; 0x28
  407a84:	f004 fb3c 	bl	40c100 <_localeconv_r>
  407a88:	6803      	ldr	r3, [r0, #0]
  407a8a:	9317      	str	r3, [sp, #92]	; 0x5c
  407a8c:	4618      	mov	r0, r3
  407a8e:	f7fe fc17 	bl	4062c0 <strlen>
  407a92:	89a3      	ldrh	r3, [r4, #12]
  407a94:	9016      	str	r0, [sp, #88]	; 0x58
  407a96:	061e      	lsls	r6, r3, #24
  407a98:	d503      	bpl.n	407aa2 <_svfprintf_r+0x2e>
  407a9a:	6923      	ldr	r3, [r4, #16]
  407a9c:	2b00      	cmp	r3, #0
  407a9e:	f001 8119 	beq.w	408cd4 <_svfprintf_r+0x1260>
  407aa2:	2300      	movs	r3, #0
  407aa4:	461a      	mov	r2, r3
  407aa6:	9312      	str	r3, [sp, #72]	; 0x48
  407aa8:	9325      	str	r3, [sp, #148]	; 0x94
  407aaa:	9324      	str	r3, [sp, #144]	; 0x90
  407aac:	9319      	str	r3, [sp, #100]	; 0x64
  407aae:	930b      	str	r3, [sp, #44]	; 0x2c
  407ab0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 407f18 <_svfprintf_r+0x4a4>
  407ab4:	9214      	str	r2, [sp, #80]	; 0x50
  407ab6:	ab30      	add	r3, sp, #192	; 0xc0
  407ab8:	9323      	str	r3, [sp, #140]	; 0x8c
  407aba:	4699      	mov	r9, r3
  407abc:	9215      	str	r2, [sp, #84]	; 0x54
  407abe:	46a8      	mov	r8, r5
  407ac0:	f898 3000 	ldrb.w	r3, [r8]
  407ac4:	4644      	mov	r4, r8
  407ac6:	b1eb      	cbz	r3, 407b04 <_svfprintf_r+0x90>
  407ac8:	2b25      	cmp	r3, #37	; 0x25
  407aca:	d102      	bne.n	407ad2 <_svfprintf_r+0x5e>
  407acc:	e01a      	b.n	407b04 <_svfprintf_r+0x90>
  407ace:	2b25      	cmp	r3, #37	; 0x25
  407ad0:	d003      	beq.n	407ada <_svfprintf_r+0x66>
  407ad2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407ad6:	2b00      	cmp	r3, #0
  407ad8:	d1f9      	bne.n	407ace <_svfprintf_r+0x5a>
  407ada:	ebc8 0504 	rsb	r5, r8, r4
  407ade:	b18d      	cbz	r5, 407b04 <_svfprintf_r+0x90>
  407ae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ae2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407ae4:	f8c9 8000 	str.w	r8, [r9]
  407ae8:	3301      	adds	r3, #1
  407aea:	442a      	add	r2, r5
  407aec:	2b07      	cmp	r3, #7
  407aee:	f8c9 5004 	str.w	r5, [r9, #4]
  407af2:	9225      	str	r2, [sp, #148]	; 0x94
  407af4:	9324      	str	r3, [sp, #144]	; 0x90
  407af6:	f300 80a6 	bgt.w	407c46 <_svfprintf_r+0x1d2>
  407afa:	f109 0908 	add.w	r9, r9, #8
  407afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407b00:	442b      	add	r3, r5
  407b02:	930b      	str	r3, [sp, #44]	; 0x2c
  407b04:	7823      	ldrb	r3, [r4, #0]
  407b06:	2b00      	cmp	r3, #0
  407b08:	f000 80a6 	beq.w	407c58 <_svfprintf_r+0x1e4>
  407b0c:	2300      	movs	r3, #0
  407b0e:	461a      	mov	r2, r3
  407b10:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407b14:	4619      	mov	r1, r3
  407b16:	930c      	str	r3, [sp, #48]	; 0x30
  407b18:	9307      	str	r3, [sp, #28]
  407b1a:	f04f 3bff 	mov.w	fp, #4294967295
  407b1e:	7863      	ldrb	r3, [r4, #1]
  407b20:	f104 0801 	add.w	r8, r4, #1
  407b24:	465d      	mov	r5, fp
  407b26:	f108 0801 	add.w	r8, r8, #1
  407b2a:	f1a3 0020 	sub.w	r0, r3, #32
  407b2e:	2858      	cmp	r0, #88	; 0x58
  407b30:	f200 8425 	bhi.w	40837e <_svfprintf_r+0x90a>
  407b34:	e8df f010 	tbh	[pc, r0, lsl #1]
  407b38:	04230388 	.word	0x04230388
  407b3c:	03900423 	.word	0x03900423
  407b40:	04230423 	.word	0x04230423
  407b44:	04230423 	.word	0x04230423
  407b48:	04230423 	.word	0x04230423
  407b4c:	03a50397 	.word	0x03a50397
  407b50:	005d0423 	.word	0x005d0423
  407b54:	042300e2 	.word	0x042300e2
  407b58:	010500fe 	.word	0x010500fe
  407b5c:	01050105 	.word	0x01050105
  407b60:	01050105 	.word	0x01050105
  407b64:	01050105 	.word	0x01050105
  407b68:	01050105 	.word	0x01050105
  407b6c:	04230423 	.word	0x04230423
  407b70:	04230423 	.word	0x04230423
  407b74:	04230423 	.word	0x04230423
  407b78:	04230423 	.word	0x04230423
  407b7c:	04230423 	.word	0x04230423
  407b80:	02810115 	.word	0x02810115
  407b84:	02810423 	.word	0x02810423
  407b88:	04230423 	.word	0x04230423
  407b8c:	04230423 	.word	0x04230423
  407b90:	042302c6 	.word	0x042302c6
  407b94:	02cd0423 	.word	0x02cd0423
  407b98:	04230423 	.word	0x04230423
  407b9c:	04230423 	.word	0x04230423
  407ba0:	02f70423 	.word	0x02f70423
  407ba4:	04230423 	.word	0x04230423
  407ba8:	04230325 	.word	0x04230325
  407bac:	04230423 	.word	0x04230423
  407bb0:	04230423 	.word	0x04230423
  407bb4:	04230423 	.word	0x04230423
  407bb8:	04230423 	.word	0x04230423
  407bbc:	03660423 	.word	0x03660423
  407bc0:	02810379 	.word	0x02810379
  407bc4:	02810281 	.word	0x02810281
  407bc8:	03790381 	.word	0x03790381
  407bcc:	04230423 	.word	0x04230423
  407bd0:	042303d1 	.word	0x042303d1
  407bd4:	00a303db 	.word	0x00a303db
  407bd8:	03ee0064 	.word	0x03ee0064
  407bdc:	03f50423 	.word	0x03f50423
  407be0:	03aa0423 	.word	0x03aa0423
  407be4:	04230423 	.word	0x04230423
  407be8:	03bc      	.short	0x03bc
  407bea:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bec:	930e      	str	r3, [sp, #56]	; 0x38
  407bee:	4240      	negs	r0, r0
  407bf0:	900c      	str	r0, [sp, #48]	; 0x30
  407bf2:	9b07      	ldr	r3, [sp, #28]
  407bf4:	f043 0304 	orr.w	r3, r3, #4
  407bf8:	9307      	str	r3, [sp, #28]
  407bfa:	f898 3000 	ldrb.w	r3, [r8]
  407bfe:	e792      	b.n	407b26 <_svfprintf_r+0xb2>
  407c00:	980e      	ldr	r0, [sp, #56]	; 0x38
  407c02:	46ab      	mov	fp, r5
  407c04:	2100      	movs	r1, #0
  407c06:	6804      	ldr	r4, [r0, #0]
  407c08:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407c0c:	1d07      	adds	r7, r0, #4
  407c0e:	9807      	ldr	r0, [sp, #28]
  407c10:	2330      	movs	r3, #48	; 0x30
  407c12:	2278      	movs	r2, #120	; 0x78
  407c14:	458b      	cmp	fp, r1
  407c16:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  407c1a:	f04f 0500 	mov.w	r5, #0
  407c1e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  407c22:	f040 0302 	orr.w	r3, r0, #2
  407c26:	f2c0 83c7 	blt.w	4083b8 <_svfprintf_r+0x944>
  407c2a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  407c2e:	f043 0302 	orr.w	r3, r3, #2
  407c32:	9307      	str	r3, [sp, #28]
  407c34:	ea54 0305 	orrs.w	r3, r4, r5
  407c38:	970e      	str	r7, [sp, #56]	; 0x38
  407c3a:	f000 8393 	beq.w	408364 <_svfprintf_r+0x8f0>
  407c3e:	460f      	mov	r7, r1
  407c40:	9211      	str	r2, [sp, #68]	; 0x44
  407c42:	48b3      	ldr	r0, [pc, #716]	; (407f10 <_svfprintf_r+0x49c>)
  407c44:	e2ce      	b.n	4081e4 <_svfprintf_r+0x770>
  407c46:	aa23      	add	r2, sp, #140	; 0x8c
  407c48:	9909      	ldr	r1, [sp, #36]	; 0x24
  407c4a:	980a      	ldr	r0, [sp, #40]	; 0x28
  407c4c:	f005 fd26 	bl	40d69c <__ssprint_r>
  407c50:	b948      	cbnz	r0, 407c66 <_svfprintf_r+0x1f2>
  407c52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  407c56:	e752      	b.n	407afe <_svfprintf_r+0x8a>
  407c58:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c5a:	b123      	cbz	r3, 407c66 <_svfprintf_r+0x1f2>
  407c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
  407c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
  407c60:	aa23      	add	r2, sp, #140	; 0x8c
  407c62:	f005 fd1b 	bl	40d69c <__ssprint_r>
  407c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c68:	899b      	ldrh	r3, [r3, #12]
  407c6a:	f013 0f40 	tst.w	r3, #64	; 0x40
  407c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407c70:	bf18      	it	ne
  407c72:	f04f 33ff 	movne.w	r3, #4294967295
  407c76:	4618      	mov	r0, r3
  407c78:	b041      	add	sp, #260	; 0x104
  407c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c7e:	9311      	str	r3, [sp, #68]	; 0x44
  407c80:	46ab      	mov	fp, r5
  407c82:	2a00      	cmp	r2, #0
  407c84:	f041 8223 	bne.w	4090ce <_svfprintf_r+0x165a>
  407c88:	9a07      	ldr	r2, [sp, #28]
  407c8a:	f012 0320 	ands.w	r3, r2, #32
  407c8e:	f000 822e 	beq.w	4080ee <_svfprintf_r+0x67a>
  407c92:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  407c94:	3707      	adds	r7, #7
  407c96:	f027 0307 	bic.w	r3, r7, #7
  407c9a:	2700      	movs	r7, #0
  407c9c:	f103 0108 	add.w	r1, r3, #8
  407ca0:	45bb      	cmp	fp, r7
  407ca2:	910e      	str	r1, [sp, #56]	; 0x38
  407ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
  407ca8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407cac:	f2c0 8752 	blt.w	408b54 <_svfprintf_r+0x10e0>
  407cb0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  407cb4:	9307      	str	r3, [sp, #28]
  407cb6:	ea54 0305 	orrs.w	r3, r4, r5
  407cba:	f000 8375 	beq.w	4083a8 <_svfprintf_r+0x934>
  407cbe:	ae30      	add	r6, sp, #192	; 0xc0
  407cc0:	08e2      	lsrs	r2, r4, #3
  407cc2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407cc6:	08e9      	lsrs	r1, r5, #3
  407cc8:	f004 0307 	and.w	r3, r4, #7
  407ccc:	460d      	mov	r5, r1
  407cce:	4614      	mov	r4, r2
  407cd0:	3330      	adds	r3, #48	; 0x30
  407cd2:	ea54 0205 	orrs.w	r2, r4, r5
  407cd6:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407cda:	d1f1      	bne.n	407cc0 <_svfprintf_r+0x24c>
  407cdc:	9a07      	ldr	r2, [sp, #28]
  407cde:	07d1      	lsls	r1, r2, #31
  407ce0:	f140 8084 	bpl.w	407dec <_svfprintf_r+0x378>
  407ce4:	2b30      	cmp	r3, #48	; 0x30
  407ce6:	f000 8081 	beq.w	407dec <_svfprintf_r+0x378>
  407cea:	2230      	movs	r2, #48	; 0x30
  407cec:	1e73      	subs	r3, r6, #1
  407cee:	f806 2c01 	strb.w	r2, [r6, #-1]
  407cf2:	aa30      	add	r2, sp, #192	; 0xc0
  407cf4:	1ad2      	subs	r2, r2, r3
  407cf6:	920d      	str	r2, [sp, #52]	; 0x34
  407cf8:	461e      	mov	r6, r3
  407cfa:	e07a      	b.n	407df2 <_svfprintf_r+0x37e>
  407cfc:	f898 3000 	ldrb.w	r3, [r8]
  407d00:	2b2a      	cmp	r3, #42	; 0x2a
  407d02:	f108 0401 	add.w	r4, r8, #1
  407d06:	f001 81b1 	beq.w	40906c <_svfprintf_r+0x15f8>
  407d0a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407d0e:	2809      	cmp	r0, #9
  407d10:	bf98      	it	ls
  407d12:	2500      	movls	r5, #0
  407d14:	f201 8164 	bhi.w	408fe0 <_svfprintf_r+0x156c>
  407d18:	f814 3b01 	ldrb.w	r3, [r4], #1
  407d1c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  407d20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  407d24:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407d28:	2809      	cmp	r0, #9
  407d2a:	d9f5      	bls.n	407d18 <_svfprintf_r+0x2a4>
  407d2c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  407d30:	46a0      	mov	r8, r4
  407d32:	e6fa      	b.n	407b2a <_svfprintf_r+0xb6>
  407d34:	9b07      	ldr	r3, [sp, #28]
  407d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407d3a:	9307      	str	r3, [sp, #28]
  407d3c:	f898 3000 	ldrb.w	r3, [r8]
  407d40:	e6f1      	b.n	407b26 <_svfprintf_r+0xb2>
  407d42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407d46:	2300      	movs	r3, #0
  407d48:	461c      	mov	r4, r3
  407d4a:	f818 3b01 	ldrb.w	r3, [r8], #1
  407d4e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407d52:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407d56:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407d5a:	2809      	cmp	r0, #9
  407d5c:	d9f5      	bls.n	407d4a <_svfprintf_r+0x2d6>
  407d5e:	940c      	str	r4, [sp, #48]	; 0x30
  407d60:	e6e3      	b.n	407b2a <_svfprintf_r+0xb6>
  407d62:	9311      	str	r3, [sp, #68]	; 0x44
  407d64:	46ab      	mov	fp, r5
  407d66:	2a00      	cmp	r2, #0
  407d68:	f041 81c9 	bne.w	4090fe <_svfprintf_r+0x168a>
  407d6c:	9b07      	ldr	r3, [sp, #28]
  407d6e:	f043 0310 	orr.w	r3, r3, #16
  407d72:	9307      	str	r3, [sp, #28]
  407d74:	9b07      	ldr	r3, [sp, #28]
  407d76:	0698      	lsls	r0, r3, #26
  407d78:	f140 8530 	bpl.w	4087dc <_svfprintf_r+0xd68>
  407d7c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  407d7e:	3707      	adds	r7, #7
  407d80:	f027 0707 	bic.w	r7, r7, #7
  407d84:	e9d7 2300 	ldrd	r2, r3, [r7]
  407d88:	f107 0108 	add.w	r1, r7, #8
  407d8c:	910e      	str	r1, [sp, #56]	; 0x38
  407d8e:	4614      	mov	r4, r2
  407d90:	461d      	mov	r5, r3
  407d92:	2a00      	cmp	r2, #0
  407d94:	f173 0300 	sbcs.w	r3, r3, #0
  407d98:	f2c0 855b 	blt.w	408852 <_svfprintf_r+0xdde>
  407d9c:	f1bb 0f00 	cmp.w	fp, #0
  407da0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407da4:	f2c0 8538 	blt.w	408818 <_svfprintf_r+0xda4>
  407da8:	9b07      	ldr	r3, [sp, #28]
  407daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407dae:	9307      	str	r3, [sp, #28]
  407db0:	ea54 0305 	orrs.w	r3, r4, r5
  407db4:	f000 81db 	beq.w	40816e <_svfprintf_r+0x6fa>
  407db8:	2d00      	cmp	r5, #0
  407dba:	bf08      	it	eq
  407dbc:	2c0a      	cmpeq	r4, #10
  407dbe:	f0c0 81db 	bcc.w	408178 <_svfprintf_r+0x704>
  407dc2:	ae30      	add	r6, sp, #192	; 0xc0
  407dc4:	4620      	mov	r0, r4
  407dc6:	4629      	mov	r1, r5
  407dc8:	220a      	movs	r2, #10
  407dca:	2300      	movs	r3, #0
  407dcc:	f006 fbb2 	bl	40e534 <__aeabi_uldivmod>
  407dd0:	3230      	adds	r2, #48	; 0x30
  407dd2:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407dd6:	4620      	mov	r0, r4
  407dd8:	4629      	mov	r1, r5
  407dda:	2300      	movs	r3, #0
  407ddc:	220a      	movs	r2, #10
  407dde:	f006 fba9 	bl	40e534 <__aeabi_uldivmod>
  407de2:	4604      	mov	r4, r0
  407de4:	460d      	mov	r5, r1
  407de6:	ea54 0305 	orrs.w	r3, r4, r5
  407dea:	d1eb      	bne.n	407dc4 <_svfprintf_r+0x350>
  407dec:	ab30      	add	r3, sp, #192	; 0xc0
  407dee:	1b9b      	subs	r3, r3, r6
  407df0:	930d      	str	r3, [sp, #52]	; 0x34
  407df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407df4:	455b      	cmp	r3, fp
  407df6:	bfb8      	it	lt
  407df8:	465b      	movlt	r3, fp
  407dfa:	9308      	str	r3, [sp, #32]
  407dfc:	2300      	movs	r3, #0
  407dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  407e00:	b117      	cbz	r7, 407e08 <_svfprintf_r+0x394>
  407e02:	9b08      	ldr	r3, [sp, #32]
  407e04:	3301      	adds	r3, #1
  407e06:	9308      	str	r3, [sp, #32]
  407e08:	9b07      	ldr	r3, [sp, #28]
  407e0a:	f013 0302 	ands.w	r3, r3, #2
  407e0e:	930f      	str	r3, [sp, #60]	; 0x3c
  407e10:	d002      	beq.n	407e18 <_svfprintf_r+0x3a4>
  407e12:	9b08      	ldr	r3, [sp, #32]
  407e14:	3302      	adds	r3, #2
  407e16:	9308      	str	r3, [sp, #32]
  407e18:	9b07      	ldr	r3, [sp, #28]
  407e1a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407e1e:	9310      	str	r3, [sp, #64]	; 0x40
  407e20:	f040 82d7 	bne.w	4083d2 <_svfprintf_r+0x95e>
  407e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407e26:	9a08      	ldr	r2, [sp, #32]
  407e28:	1a9d      	subs	r5, r3, r2
  407e2a:	2d00      	cmp	r5, #0
  407e2c:	f340 82d1 	ble.w	4083d2 <_svfprintf_r+0x95e>
  407e30:	2d10      	cmp	r5, #16
  407e32:	9925      	ldr	r1, [sp, #148]	; 0x94
  407e34:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e36:	4f37      	ldr	r7, [pc, #220]	; (407f14 <_svfprintf_r+0x4a0>)
  407e38:	dd27      	ble.n	407e8a <_svfprintf_r+0x416>
  407e3a:	9618      	str	r6, [sp, #96]	; 0x60
  407e3c:	4648      	mov	r0, r9
  407e3e:	2410      	movs	r4, #16
  407e40:	46b9      	mov	r9, r7
  407e42:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407e44:	462f      	mov	r7, r5
  407e46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407e48:	e004      	b.n	407e54 <_svfprintf_r+0x3e0>
  407e4a:	3f10      	subs	r7, #16
  407e4c:	2f10      	cmp	r7, #16
  407e4e:	f100 0008 	add.w	r0, r0, #8
  407e52:	dd16      	ble.n	407e82 <_svfprintf_r+0x40e>
  407e54:	3201      	adds	r2, #1
  407e56:	4b2f      	ldr	r3, [pc, #188]	; (407f14 <_svfprintf_r+0x4a0>)
  407e58:	9224      	str	r2, [sp, #144]	; 0x90
  407e5a:	3110      	adds	r1, #16
  407e5c:	2a07      	cmp	r2, #7
  407e5e:	9125      	str	r1, [sp, #148]	; 0x94
  407e60:	e880 0018 	stmia.w	r0, {r3, r4}
  407e64:	ddf1      	ble.n	407e4a <_svfprintf_r+0x3d6>
  407e66:	aa23      	add	r2, sp, #140	; 0x8c
  407e68:	4631      	mov	r1, r6
  407e6a:	4628      	mov	r0, r5
  407e6c:	f005 fc16 	bl	40d69c <__ssprint_r>
  407e70:	2800      	cmp	r0, #0
  407e72:	f47f aef8 	bne.w	407c66 <_svfprintf_r+0x1f2>
  407e76:	3f10      	subs	r7, #16
  407e78:	2f10      	cmp	r7, #16
  407e7a:	9925      	ldr	r1, [sp, #148]	; 0x94
  407e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e7e:	a830      	add	r0, sp, #192	; 0xc0
  407e80:	dce8      	bgt.n	407e54 <_svfprintf_r+0x3e0>
  407e82:	9e18      	ldr	r6, [sp, #96]	; 0x60
  407e84:	463d      	mov	r5, r7
  407e86:	464f      	mov	r7, r9
  407e88:	4681      	mov	r9, r0
  407e8a:	3201      	adds	r2, #1
  407e8c:	186c      	adds	r4, r5, r1
  407e8e:	2a07      	cmp	r2, #7
  407e90:	9425      	str	r4, [sp, #148]	; 0x94
  407e92:	9224      	str	r2, [sp, #144]	; 0x90
  407e94:	f8c9 7000 	str.w	r7, [r9]
  407e98:	f8c9 5004 	str.w	r5, [r9, #4]
  407e9c:	f300 8428 	bgt.w	4086f0 <_svfprintf_r+0xc7c>
  407ea0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407ea4:	f109 0908 	add.w	r9, r9, #8
  407ea8:	b177      	cbz	r7, 407ec8 <_svfprintf_r+0x454>
  407eaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407eac:	3301      	adds	r3, #1
  407eae:	3401      	adds	r4, #1
  407eb0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407eb4:	2201      	movs	r2, #1
  407eb6:	2b07      	cmp	r3, #7
  407eb8:	9425      	str	r4, [sp, #148]	; 0x94
  407eba:	9324      	str	r3, [sp, #144]	; 0x90
  407ebc:	e889 0006 	stmia.w	r9, {r1, r2}
  407ec0:	f300 83a0 	bgt.w	408604 <_svfprintf_r+0xb90>
  407ec4:	f109 0908 	add.w	r9, r9, #8
  407ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407eca:	b16b      	cbz	r3, 407ee8 <_svfprintf_r+0x474>
  407ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ece:	3301      	adds	r3, #1
  407ed0:	3402      	adds	r4, #2
  407ed2:	a91c      	add	r1, sp, #112	; 0x70
  407ed4:	2202      	movs	r2, #2
  407ed6:	2b07      	cmp	r3, #7
  407ed8:	9425      	str	r4, [sp, #148]	; 0x94
  407eda:	9324      	str	r3, [sp, #144]	; 0x90
  407edc:	e889 0006 	stmia.w	r9, {r1, r2}
  407ee0:	f300 839c 	bgt.w	40861c <_svfprintf_r+0xba8>
  407ee4:	f109 0908 	add.w	r9, r9, #8
  407ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407eea:	2b80      	cmp	r3, #128	; 0x80
  407eec:	f000 82d5 	beq.w	40849a <_svfprintf_r+0xa26>
  407ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407ef2:	ebc3 070b 	rsb	r7, r3, fp
  407ef6:	2f00      	cmp	r7, #0
  407ef8:	dd39      	ble.n	407f6e <_svfprintf_r+0x4fa>
  407efa:	4a07      	ldr	r2, [pc, #28]	; (407f18 <_svfprintf_r+0x4a4>)
  407efc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407efe:	920f      	str	r2, [sp, #60]	; 0x3c
  407f00:	2f10      	cmp	r7, #16
  407f02:	dd28      	ble.n	407f56 <_svfprintf_r+0x4e2>
  407f04:	4622      	mov	r2, r4
  407f06:	f04f 0b10 	mov.w	fp, #16
  407f0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407f0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407f0e:	e00a      	b.n	407f26 <_svfprintf_r+0x4b2>
  407f10:	0040ff30 	.word	0x0040ff30
  407f14:	0040ff50 	.word	0x0040ff50
  407f18:	0040fefc 	.word	0x0040fefc
  407f1c:	3f10      	subs	r7, #16
  407f1e:	2f10      	cmp	r7, #16
  407f20:	f109 0908 	add.w	r9, r9, #8
  407f24:	dd16      	ble.n	407f54 <_svfprintf_r+0x4e0>
  407f26:	3301      	adds	r3, #1
  407f28:	3210      	adds	r2, #16
  407f2a:	2b07      	cmp	r3, #7
  407f2c:	9225      	str	r2, [sp, #148]	; 0x94
  407f2e:	9324      	str	r3, [sp, #144]	; 0x90
  407f30:	e889 0c00 	stmia.w	r9, {sl, fp}
  407f34:	ddf2      	ble.n	407f1c <_svfprintf_r+0x4a8>
  407f36:	aa23      	add	r2, sp, #140	; 0x8c
  407f38:	4621      	mov	r1, r4
  407f3a:	4628      	mov	r0, r5
  407f3c:	f005 fbae 	bl	40d69c <__ssprint_r>
  407f40:	2800      	cmp	r0, #0
  407f42:	f47f ae90 	bne.w	407c66 <_svfprintf_r+0x1f2>
  407f46:	3f10      	subs	r7, #16
  407f48:	2f10      	cmp	r7, #16
  407f4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407f4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f4e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  407f52:	dce8      	bgt.n	407f26 <_svfprintf_r+0x4b2>
  407f54:	4614      	mov	r4, r2
  407f56:	3301      	adds	r3, #1
  407f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407f5a:	9324      	str	r3, [sp, #144]	; 0x90
  407f5c:	443c      	add	r4, r7
  407f5e:	2b07      	cmp	r3, #7
  407f60:	9425      	str	r4, [sp, #148]	; 0x94
  407f62:	e889 0084 	stmia.w	r9, {r2, r7}
  407f66:	f300 8341 	bgt.w	4085ec <_svfprintf_r+0xb78>
  407f6a:	f109 0908 	add.w	r9, r9, #8
  407f6e:	9b07      	ldr	r3, [sp, #28]
  407f70:	05da      	lsls	r2, r3, #23
  407f72:	f100 8230 	bmi.w	4083d6 <_svfprintf_r+0x962>
  407f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f78:	990d      	ldr	r1, [sp, #52]	; 0x34
  407f7a:	f8c9 6000 	str.w	r6, [r9]
  407f7e:	3301      	adds	r3, #1
  407f80:	440c      	add	r4, r1
  407f82:	2b07      	cmp	r3, #7
  407f84:	9425      	str	r4, [sp, #148]	; 0x94
  407f86:	f8c9 1004 	str.w	r1, [r9, #4]
  407f8a:	9324      	str	r3, [sp, #144]	; 0x90
  407f8c:	f300 8318 	bgt.w	4085c0 <_svfprintf_r+0xb4c>
  407f90:	f109 0908 	add.w	r9, r9, #8
  407f94:	9b07      	ldr	r3, [sp, #28]
  407f96:	0759      	lsls	r1, r3, #29
  407f98:	d53f      	bpl.n	40801a <_svfprintf_r+0x5a6>
  407f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407f9c:	9a08      	ldr	r2, [sp, #32]
  407f9e:	1a9d      	subs	r5, r3, r2
  407fa0:	2d00      	cmp	r5, #0
  407fa2:	dd3a      	ble.n	40801a <_svfprintf_r+0x5a6>
  407fa4:	2d10      	cmp	r5, #16
  407fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fa8:	4fbc      	ldr	r7, [pc, #752]	; (40829c <_svfprintf_r+0x828>)
  407faa:	dd23      	ble.n	407ff4 <_svfprintf_r+0x580>
  407fac:	4622      	mov	r2, r4
  407fae:	2610      	movs	r6, #16
  407fb0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407fb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407fb6:	e004      	b.n	407fc2 <_svfprintf_r+0x54e>
  407fb8:	3d10      	subs	r5, #16
  407fba:	2d10      	cmp	r5, #16
  407fbc:	f109 0908 	add.w	r9, r9, #8
  407fc0:	dd17      	ble.n	407ff2 <_svfprintf_r+0x57e>
  407fc2:	3301      	adds	r3, #1
  407fc4:	49b5      	ldr	r1, [pc, #724]	; (40829c <_svfprintf_r+0x828>)
  407fc6:	9324      	str	r3, [sp, #144]	; 0x90
  407fc8:	3210      	adds	r2, #16
  407fca:	2b07      	cmp	r3, #7
  407fcc:	9225      	str	r2, [sp, #148]	; 0x94
  407fce:	e889 0042 	stmia.w	r9, {r1, r6}
  407fd2:	ddf1      	ble.n	407fb8 <_svfprintf_r+0x544>
  407fd4:	aa23      	add	r2, sp, #140	; 0x8c
  407fd6:	4621      	mov	r1, r4
  407fd8:	4658      	mov	r0, fp
  407fda:	f005 fb5f 	bl	40d69c <__ssprint_r>
  407fde:	2800      	cmp	r0, #0
  407fe0:	f47f ae41 	bne.w	407c66 <_svfprintf_r+0x1f2>
  407fe4:	3d10      	subs	r5, #16
  407fe6:	2d10      	cmp	r5, #16
  407fe8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407fea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fec:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  407ff0:	dce7      	bgt.n	407fc2 <_svfprintf_r+0x54e>
  407ff2:	4614      	mov	r4, r2
  407ff4:	3301      	adds	r3, #1
  407ff6:	442c      	add	r4, r5
  407ff8:	2b07      	cmp	r3, #7
  407ffa:	9425      	str	r4, [sp, #148]	; 0x94
  407ffc:	9324      	str	r3, [sp, #144]	; 0x90
  407ffe:	f8c9 7000 	str.w	r7, [r9]
  408002:	f8c9 5004 	str.w	r5, [r9, #4]
  408006:	dd08      	ble.n	40801a <_svfprintf_r+0x5a6>
  408008:	aa23      	add	r2, sp, #140	; 0x8c
  40800a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40800c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40800e:	f005 fb45 	bl	40d69c <__ssprint_r>
  408012:	2800      	cmp	r0, #0
  408014:	f47f ae27 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408018:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40801c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40801e:	9908      	ldr	r1, [sp, #32]
  408020:	428a      	cmp	r2, r1
  408022:	bfac      	ite	ge
  408024:	189b      	addge	r3, r3, r2
  408026:	185b      	addlt	r3, r3, r1
  408028:	930b      	str	r3, [sp, #44]	; 0x2c
  40802a:	2c00      	cmp	r4, #0
  40802c:	f040 82d4 	bne.w	4085d8 <_svfprintf_r+0xb64>
  408030:	2300      	movs	r3, #0
  408032:	9324      	str	r3, [sp, #144]	; 0x90
  408034:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408038:	e542      	b.n	407ac0 <_svfprintf_r+0x4c>
  40803a:	9311      	str	r3, [sp, #68]	; 0x44
  40803c:	46ab      	mov	fp, r5
  40803e:	2a00      	cmp	r2, #0
  408040:	f041 8059 	bne.w	4090f6 <_svfprintf_r+0x1682>
  408044:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408046:	3707      	adds	r7, #7
  408048:	f027 0307 	bic.w	r3, r7, #7
  40804c:	f103 0208 	add.w	r2, r3, #8
  408050:	920e      	str	r2, [sp, #56]	; 0x38
  408052:	681a      	ldr	r2, [r3, #0]
  408054:	9214      	str	r2, [sp, #80]	; 0x50
  408056:	685b      	ldr	r3, [r3, #4]
  408058:	9315      	str	r3, [sp, #84]	; 0x54
  40805a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40805c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40805e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408062:	4628      	mov	r0, r5
  408064:	4621      	mov	r1, r4
  408066:	f04f 32ff 	mov.w	r2, #4294967295
  40806a:	4b8d      	ldr	r3, [pc, #564]	; (4082a0 <_svfprintf_r+0x82c>)
  40806c:	f006 f9b4 	bl	40e3d8 <__aeabi_dcmpun>
  408070:	2800      	cmp	r0, #0
  408072:	f040 84c1 	bne.w	4089f8 <_svfprintf_r+0xf84>
  408076:	4628      	mov	r0, r5
  408078:	4621      	mov	r1, r4
  40807a:	f04f 32ff 	mov.w	r2, #4294967295
  40807e:	4b88      	ldr	r3, [pc, #544]	; (4082a0 <_svfprintf_r+0x82c>)
  408080:	f006 f98c 	bl	40e39c <__aeabi_dcmple>
  408084:	2800      	cmp	r0, #0
  408086:	f040 84b7 	bne.w	4089f8 <_svfprintf_r+0xf84>
  40808a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40808c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40808e:	2200      	movs	r2, #0
  408090:	2300      	movs	r3, #0
  408092:	f006 f979 	bl	40e388 <__aeabi_dcmplt>
  408096:	2800      	cmp	r0, #0
  408098:	f040 874b 	bne.w	408f32 <_svfprintf_r+0x14be>
  40809c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4080a0:	4e80      	ldr	r6, [pc, #512]	; (4082a4 <_svfprintf_r+0x830>)
  4080a2:	4b81      	ldr	r3, [pc, #516]	; (4082a8 <_svfprintf_r+0x834>)
  4080a4:	9907      	ldr	r1, [sp, #28]
  4080a6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  4080aa:	9107      	str	r1, [sp, #28]
  4080ac:	9911      	ldr	r1, [sp, #68]	; 0x44
  4080ae:	2203      	movs	r2, #3
  4080b0:	f04f 0b00 	mov.w	fp, #0
  4080b4:	9208      	str	r2, [sp, #32]
  4080b6:	2947      	cmp	r1, #71	; 0x47
  4080b8:	bfd8      	it	le
  4080ba:	461e      	movle	r6, r3
  4080bc:	920d      	str	r2, [sp, #52]	; 0x34
  4080be:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4080c2:	e69d      	b.n	407e00 <_svfprintf_r+0x38c>
  4080c4:	9b07      	ldr	r3, [sp, #28]
  4080c6:	f043 0308 	orr.w	r3, r3, #8
  4080ca:	9307      	str	r3, [sp, #28]
  4080cc:	f898 3000 	ldrb.w	r3, [r8]
  4080d0:	e529      	b.n	407b26 <_svfprintf_r+0xb2>
  4080d2:	9311      	str	r3, [sp, #68]	; 0x44
  4080d4:	46ab      	mov	fp, r5
  4080d6:	2a00      	cmp	r2, #0
  4080d8:	f041 8009 	bne.w	4090ee <_svfprintf_r+0x167a>
  4080dc:	9b07      	ldr	r3, [sp, #28]
  4080de:	f043 0310 	orr.w	r3, r3, #16
  4080e2:	9307      	str	r3, [sp, #28]
  4080e4:	9a07      	ldr	r2, [sp, #28]
  4080e6:	f012 0320 	ands.w	r3, r2, #32
  4080ea:	f47f add2 	bne.w	407c92 <_svfprintf_r+0x21e>
  4080ee:	9907      	ldr	r1, [sp, #28]
  4080f0:	f011 0210 	ands.w	r2, r1, #16
  4080f4:	f000 8507 	beq.w	408b06 <_svfprintf_r+0x1092>
  4080f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4080fa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4080fe:	f1bb 0f00 	cmp.w	fp, #0
  408102:	6804      	ldr	r4, [r0, #0]
  408104:	f100 0704 	add.w	r7, r0, #4
  408108:	f04f 0500 	mov.w	r5, #0
  40810c:	f2c0 8521 	blt.w	408b52 <_svfprintf_r+0x10de>
  408110:	460a      	mov	r2, r1
  408112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  408116:	9207      	str	r2, [sp, #28]
  408118:	ea54 0205 	orrs.w	r2, r4, r5
  40811c:	970e      	str	r7, [sp, #56]	; 0x38
  40811e:	f000 8143 	beq.w	4083a8 <_svfprintf_r+0x934>
  408122:	461f      	mov	r7, r3
  408124:	e5cb      	b.n	407cbe <_svfprintf_r+0x24a>
  408126:	9311      	str	r3, [sp, #68]	; 0x44
  408128:	46ab      	mov	fp, r5
  40812a:	2a00      	cmp	r2, #0
  40812c:	f040 87d7 	bne.w	4090de <_svfprintf_r+0x166a>
  408130:	9b07      	ldr	r3, [sp, #28]
  408132:	f043 0310 	orr.w	r3, r3, #16
  408136:	9307      	str	r3, [sp, #28]
  408138:	9a07      	ldr	r2, [sp, #28]
  40813a:	f012 0320 	ands.w	r3, r2, #32
  40813e:	f000 8332 	beq.w	4087a6 <_svfprintf_r+0xd32>
  408142:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408144:	3707      	adds	r7, #7
  408146:	f027 0307 	bic.w	r3, r7, #7
  40814a:	2700      	movs	r7, #0
  40814c:	f103 0108 	add.w	r1, r3, #8
  408150:	45bb      	cmp	fp, r7
  408152:	910e      	str	r1, [sp, #56]	; 0x38
  408154:	e9d3 4500 	ldrd	r4, r5, [r3]
  408158:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40815c:	f2c0 835c 	blt.w	408818 <_svfprintf_r+0xda4>
  408160:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408164:	9307      	str	r3, [sp, #28]
  408166:	ea54 0305 	orrs.w	r3, r4, r5
  40816a:	f47f ae25 	bne.w	407db8 <_svfprintf_r+0x344>
  40816e:	f1bb 0f00 	cmp.w	fp, #0
  408172:	f000 80fe 	beq.w	408372 <_svfprintf_r+0x8fe>
  408176:	2400      	movs	r4, #0
  408178:	ae40      	add	r6, sp, #256	; 0x100
  40817a:	3430      	adds	r4, #48	; 0x30
  40817c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408180:	e634      	b.n	407dec <_svfprintf_r+0x378>
  408182:	9311      	str	r3, [sp, #68]	; 0x44
  408184:	46ab      	mov	fp, r5
  408186:	2a00      	cmp	r2, #0
  408188:	f040 87a5 	bne.w	4090d6 <_svfprintf_r+0x1662>
  40818c:	9b07      	ldr	r3, [sp, #28]
  40818e:	4847      	ldr	r0, [pc, #284]	; (4082ac <_svfprintf_r+0x838>)
  408190:	069d      	lsls	r5, r3, #26
  408192:	f140 8097 	bpl.w	4082c4 <_svfprintf_r+0x850>
  408196:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408198:	3707      	adds	r7, #7
  40819a:	f027 0307 	bic.w	r3, r7, #7
  40819e:	e9d3 4500 	ldrd	r4, r5, [r3]
  4081a2:	f103 0208 	add.w	r2, r3, #8
  4081a6:	920e      	str	r2, [sp, #56]	; 0x38
  4081a8:	9a07      	ldr	r2, [sp, #28]
  4081aa:	f012 0701 	ands.w	r7, r2, #1
  4081ae:	f000 8241 	beq.w	408634 <_svfprintf_r+0xbc0>
  4081b2:	ea54 0305 	orrs.w	r3, r4, r5
  4081b6:	f000 84f5 	beq.w	408ba4 <_svfprintf_r+0x1130>
  4081ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4081be:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4081c2:	2700      	movs	r7, #0
  4081c4:	9a07      	ldr	r2, [sp, #28]
  4081c6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4081ca:	2330      	movs	r3, #48	; 0x30
  4081cc:	45bb      	cmp	fp, r7
  4081ce:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4081d2:	f042 0302 	orr.w	r3, r2, #2
  4081d6:	f2c0 86a9 	blt.w	408f2c <_svfprintf_r+0x14b8>
  4081da:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4081de:	f043 0302 	orr.w	r3, r3, #2
  4081e2:	9307      	str	r3, [sp, #28]
  4081e4:	ae30      	add	r6, sp, #192	; 0xc0
  4081e6:	0923      	lsrs	r3, r4, #4
  4081e8:	f004 010f 	and.w	r1, r4, #15
  4081ec:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4081f0:	092a      	lsrs	r2, r5, #4
  4081f2:	461c      	mov	r4, r3
  4081f4:	4615      	mov	r5, r2
  4081f6:	5c43      	ldrb	r3, [r0, r1]
  4081f8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4081fc:	ea54 0305 	orrs.w	r3, r4, r5
  408200:	d1f1      	bne.n	4081e6 <_svfprintf_r+0x772>
  408202:	e5f3      	b.n	407dec <_svfprintf_r+0x378>
  408204:	990e      	ldr	r1, [sp, #56]	; 0x38
  408206:	9311      	str	r3, [sp, #68]	; 0x44
  408208:	680a      	ldr	r2, [r1, #0]
  40820a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40820e:	2300      	movs	r3, #0
  408210:	460a      	mov	r2, r1
  408212:	461f      	mov	r7, r3
  408214:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408218:	3204      	adds	r2, #4
  40821a:	2301      	movs	r3, #1
  40821c:	9308      	str	r3, [sp, #32]
  40821e:	46bb      	mov	fp, r7
  408220:	9713      	str	r7, [sp, #76]	; 0x4c
  408222:	920e      	str	r2, [sp, #56]	; 0x38
  408224:	930d      	str	r3, [sp, #52]	; 0x34
  408226:	ae26      	add	r6, sp, #152	; 0x98
  408228:	e5ee      	b.n	407e08 <_svfprintf_r+0x394>
  40822a:	9311      	str	r3, [sp, #68]	; 0x44
  40822c:	46ab      	mov	fp, r5
  40822e:	2a00      	cmp	r2, #0
  408230:	f43f ada0 	beq.w	407d74 <_svfprintf_r+0x300>
  408234:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408238:	e59c      	b.n	407d74 <_svfprintf_r+0x300>
  40823a:	9b07      	ldr	r3, [sp, #28]
  40823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408240:	9307      	str	r3, [sp, #28]
  408242:	f898 3000 	ldrb.w	r3, [r8]
  408246:	e46e      	b.n	407b26 <_svfprintf_r+0xb2>
  408248:	f898 3000 	ldrb.w	r3, [r8]
  40824c:	2900      	cmp	r1, #0
  40824e:	f47f ac6a 	bne.w	407b26 <_svfprintf_r+0xb2>
  408252:	2201      	movs	r2, #1
  408254:	2120      	movs	r1, #32
  408256:	e466      	b.n	407b26 <_svfprintf_r+0xb2>
  408258:	9b07      	ldr	r3, [sp, #28]
  40825a:	f043 0301 	orr.w	r3, r3, #1
  40825e:	9307      	str	r3, [sp, #28]
  408260:	f898 3000 	ldrb.w	r3, [r8]
  408264:	e45f      	b.n	407b26 <_svfprintf_r+0xb2>
  408266:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408268:	6823      	ldr	r3, [r4, #0]
  40826a:	930c      	str	r3, [sp, #48]	; 0x30
  40826c:	4618      	mov	r0, r3
  40826e:	2800      	cmp	r0, #0
  408270:	4623      	mov	r3, r4
  408272:	f103 0304 	add.w	r3, r3, #4
  408276:	f6ff acb8 	blt.w	407bea <_svfprintf_r+0x176>
  40827a:	930e      	str	r3, [sp, #56]	; 0x38
  40827c:	f898 3000 	ldrb.w	r3, [r8]
  408280:	e451      	b.n	407b26 <_svfprintf_r+0xb2>
  408282:	f898 3000 	ldrb.w	r3, [r8]
  408286:	2201      	movs	r2, #1
  408288:	212b      	movs	r1, #43	; 0x2b
  40828a:	e44c      	b.n	407b26 <_svfprintf_r+0xb2>
  40828c:	9311      	str	r3, [sp, #68]	; 0x44
  40828e:	46ab      	mov	fp, r5
  408290:	2a00      	cmp	r2, #0
  408292:	f43f af51 	beq.w	408138 <_svfprintf_r+0x6c4>
  408296:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40829a:	e74d      	b.n	408138 <_svfprintf_r+0x6c4>
  40829c:	0040ff50 	.word	0x0040ff50
  4082a0:	7fefffff 	.word	0x7fefffff
  4082a4:	0040ff10 	.word	0x0040ff10
  4082a8:	0040ff0c 	.word	0x0040ff0c
  4082ac:	0040ff1c 	.word	0x0040ff1c
  4082b0:	9311      	str	r3, [sp, #68]	; 0x44
  4082b2:	46ab      	mov	fp, r5
  4082b4:	2a00      	cmp	r2, #0
  4082b6:	f040 8703 	bne.w	4090c0 <_svfprintf_r+0x164c>
  4082ba:	9b07      	ldr	r3, [sp, #28]
  4082bc:	4899      	ldr	r0, [pc, #612]	; (408524 <_svfprintf_r+0xab0>)
  4082be:	069d      	lsls	r5, r3, #26
  4082c0:	f53f af69 	bmi.w	408196 <_svfprintf_r+0x722>
  4082c4:	9b07      	ldr	r3, [sp, #28]
  4082c6:	06dc      	lsls	r4, r3, #27
  4082c8:	f140 845e 	bpl.w	408b88 <_svfprintf_r+0x1114>
  4082cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4082ce:	4613      	mov	r3, r2
  4082d0:	3304      	adds	r3, #4
  4082d2:	6814      	ldr	r4, [r2, #0]
  4082d4:	930e      	str	r3, [sp, #56]	; 0x38
  4082d6:	2500      	movs	r5, #0
  4082d8:	e766      	b.n	4081a8 <_svfprintf_r+0x734>
  4082da:	f898 3000 	ldrb.w	r3, [r8]
  4082de:	2b6c      	cmp	r3, #108	; 0x6c
  4082e0:	f000 84e1 	beq.w	408ca6 <_svfprintf_r+0x1232>
  4082e4:	9807      	ldr	r0, [sp, #28]
  4082e6:	f040 0010 	orr.w	r0, r0, #16
  4082ea:	9007      	str	r0, [sp, #28]
  4082ec:	e41b      	b.n	407b26 <_svfprintf_r+0xb2>
  4082ee:	2a00      	cmp	r2, #0
  4082f0:	f040 86db 	bne.w	4090aa <_svfprintf_r+0x1636>
  4082f4:	9b07      	ldr	r3, [sp, #28]
  4082f6:	069b      	lsls	r3, r3, #26
  4082f8:	f140 842f 	bpl.w	408b5a <_svfprintf_r+0x10e6>
  4082fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4082fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408300:	6813      	ldr	r3, [r2, #0]
  408302:	17cd      	asrs	r5, r1, #31
  408304:	4608      	mov	r0, r1
  408306:	3204      	adds	r2, #4
  408308:	4629      	mov	r1, r5
  40830a:	920e      	str	r2, [sp, #56]	; 0x38
  40830c:	e9c3 0100 	strd	r0, r1, [r3]
  408310:	f7ff bbd6 	b.w	407ac0 <_svfprintf_r+0x4c>
  408314:	9b07      	ldr	r3, [sp, #28]
  408316:	f043 0320 	orr.w	r3, r3, #32
  40831a:	9307      	str	r3, [sp, #28]
  40831c:	f898 3000 	ldrb.w	r3, [r8]
  408320:	e401      	b.n	407b26 <_svfprintf_r+0xb2>
  408322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408324:	9311      	str	r3, [sp, #68]	; 0x44
  408326:	6816      	ldr	r6, [r2, #0]
  408328:	2400      	movs	r4, #0
  40832a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40832e:	1d17      	adds	r7, r2, #4
  408330:	2e00      	cmp	r6, #0
  408332:	f000 85bd 	beq.w	408eb0 <_svfprintf_r+0x143c>
  408336:	2d00      	cmp	r5, #0
  408338:	f2c0 850f 	blt.w	408d5a <_svfprintf_r+0x12e6>
  40833c:	462a      	mov	r2, r5
  40833e:	4621      	mov	r1, r4
  408340:	4630      	mov	r0, r6
  408342:	f004 fa15 	bl	40c770 <memchr>
  408346:	2800      	cmp	r0, #0
  408348:	f000 8604 	beq.w	408f54 <_svfprintf_r+0x14e0>
  40834c:	1b83      	subs	r3, r0, r6
  40834e:	930d      	str	r3, [sp, #52]	; 0x34
  408350:	46a3      	mov	fp, r4
  408352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408356:	970e      	str	r7, [sp, #56]	; 0x38
  408358:	9308      	str	r3, [sp, #32]
  40835a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40835e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408362:	e54d      	b.n	407e00 <_svfprintf_r+0x38c>
  408364:	486f      	ldr	r0, [pc, #444]	; (408524 <_svfprintf_r+0xab0>)
  408366:	9211      	str	r2, [sp, #68]	; 0x44
  408368:	f1bb 0f00 	cmp.w	fp, #0
  40836c:	f040 8173 	bne.w	408656 <_svfprintf_r+0xbe2>
  408370:	465f      	mov	r7, fp
  408372:	f04f 0b00 	mov.w	fp, #0
  408376:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40837a:	ae30      	add	r6, sp, #192	; 0xc0
  40837c:	e539      	b.n	407df2 <_svfprintf_r+0x37e>
  40837e:	9311      	str	r3, [sp, #68]	; 0x44
  408380:	2a00      	cmp	r2, #0
  408382:	f040 86b0 	bne.w	4090e6 <_svfprintf_r+0x1672>
  408386:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408388:	2a00      	cmp	r2, #0
  40838a:	f43f ac65 	beq.w	407c58 <_svfprintf_r+0x1e4>
  40838e:	2300      	movs	r3, #0
  408390:	2101      	movs	r1, #1
  408392:	461f      	mov	r7, r3
  408394:	9108      	str	r1, [sp, #32]
  408396:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40839a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40839e:	469b      	mov	fp, r3
  4083a0:	9313      	str	r3, [sp, #76]	; 0x4c
  4083a2:	910d      	str	r1, [sp, #52]	; 0x34
  4083a4:	ae26      	add	r6, sp, #152	; 0x98
  4083a6:	e52f      	b.n	407e08 <_svfprintf_r+0x394>
  4083a8:	f1bb 0f00 	cmp.w	fp, #0
  4083ac:	f000 85dd 	beq.w	408f6a <_svfprintf_r+0x14f6>
  4083b0:	2700      	movs	r7, #0
  4083b2:	2400      	movs	r4, #0
  4083b4:	2500      	movs	r5, #0
  4083b6:	e482      	b.n	407cbe <_svfprintf_r+0x24a>
  4083b8:	485a      	ldr	r0, [pc, #360]	; (408524 <_svfprintf_r+0xab0>)
  4083ba:	9307      	str	r3, [sp, #28]
  4083bc:	9211      	str	r2, [sp, #68]	; 0x44
  4083be:	ea54 0305 	orrs.w	r3, r4, r5
  4083c2:	970e      	str	r7, [sp, #56]	; 0x38
  4083c4:	f04f 0700 	mov.w	r7, #0
  4083c8:	f47f af0c 	bne.w	4081e4 <_svfprintf_r+0x770>
  4083cc:	2400      	movs	r4, #0
  4083ce:	2500      	movs	r5, #0
  4083d0:	e708      	b.n	4081e4 <_svfprintf_r+0x770>
  4083d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4083d4:	e568      	b.n	407ea8 <_svfprintf_r+0x434>
  4083d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4083d8:	2b65      	cmp	r3, #101	; 0x65
  4083da:	f340 80a9 	ble.w	408530 <_svfprintf_r+0xabc>
  4083de:	9814      	ldr	r0, [sp, #80]	; 0x50
  4083e0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4083e2:	2200      	movs	r2, #0
  4083e4:	2300      	movs	r3, #0
  4083e6:	f005 ffc5 	bl	40e374 <__aeabi_dcmpeq>
  4083ea:	2800      	cmp	r0, #0
  4083ec:	f000 8135 	beq.w	40865a <_svfprintf_r+0xbe6>
  4083f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083f2:	4a4d      	ldr	r2, [pc, #308]	; (408528 <_svfprintf_r+0xab4>)
  4083f4:	f8c9 2000 	str.w	r2, [r9]
  4083f8:	3301      	adds	r3, #1
  4083fa:	3401      	adds	r4, #1
  4083fc:	2201      	movs	r2, #1
  4083fe:	2b07      	cmp	r3, #7
  408400:	9425      	str	r4, [sp, #148]	; 0x94
  408402:	9324      	str	r3, [sp, #144]	; 0x90
  408404:	f8c9 2004 	str.w	r2, [r9, #4]
  408408:	f300 83e6 	bgt.w	408bd8 <_svfprintf_r+0x1164>
  40840c:	f109 0908 	add.w	r9, r9, #8
  408410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408412:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408414:	4293      	cmp	r3, r2
  408416:	db03      	blt.n	408420 <_svfprintf_r+0x9ac>
  408418:	9b07      	ldr	r3, [sp, #28]
  40841a:	07db      	lsls	r3, r3, #31
  40841c:	f57f adba 	bpl.w	407f94 <_svfprintf_r+0x520>
  408420:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408422:	9916      	ldr	r1, [sp, #88]	; 0x58
  408424:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408426:	f8c9 2000 	str.w	r2, [r9]
  40842a:	3301      	adds	r3, #1
  40842c:	440c      	add	r4, r1
  40842e:	2b07      	cmp	r3, #7
  408430:	9425      	str	r4, [sp, #148]	; 0x94
  408432:	f8c9 1004 	str.w	r1, [r9, #4]
  408436:	9324      	str	r3, [sp, #144]	; 0x90
  408438:	f300 843f 	bgt.w	408cba <_svfprintf_r+0x1246>
  40843c:	f109 0908 	add.w	r9, r9, #8
  408440:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408442:	1e5d      	subs	r5, r3, #1
  408444:	2d00      	cmp	r5, #0
  408446:	f77f ada5 	ble.w	407f94 <_svfprintf_r+0x520>
  40844a:	4a38      	ldr	r2, [pc, #224]	; (40852c <_svfprintf_r+0xab8>)
  40844c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40844e:	920f      	str	r2, [sp, #60]	; 0x3c
  408450:	2d10      	cmp	r5, #16
  408452:	f340 81e6 	ble.w	408822 <_svfprintf_r+0xdae>
  408456:	2610      	movs	r6, #16
  408458:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40845a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40845e:	e005      	b.n	40846c <_svfprintf_r+0x9f8>
  408460:	f109 0908 	add.w	r9, r9, #8
  408464:	3d10      	subs	r5, #16
  408466:	2d10      	cmp	r5, #16
  408468:	f340 81db 	ble.w	408822 <_svfprintf_r+0xdae>
  40846c:	3301      	adds	r3, #1
  40846e:	3410      	adds	r4, #16
  408470:	2b07      	cmp	r3, #7
  408472:	9425      	str	r4, [sp, #148]	; 0x94
  408474:	9324      	str	r3, [sp, #144]	; 0x90
  408476:	f8c9 a000 	str.w	sl, [r9]
  40847a:	f8c9 6004 	str.w	r6, [r9, #4]
  40847e:	ddef      	ble.n	408460 <_svfprintf_r+0x9ec>
  408480:	aa23      	add	r2, sp, #140	; 0x8c
  408482:	4659      	mov	r1, fp
  408484:	4638      	mov	r0, r7
  408486:	f005 f909 	bl	40d69c <__ssprint_r>
  40848a:	2800      	cmp	r0, #0
  40848c:	f47f abeb 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408490:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408492:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408494:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408498:	e7e4      	b.n	408464 <_svfprintf_r+0x9f0>
  40849a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40849c:	9a08      	ldr	r2, [sp, #32]
  40849e:	1a9f      	subs	r7, r3, r2
  4084a0:	2f00      	cmp	r7, #0
  4084a2:	f77f ad25 	ble.w	407ef0 <_svfprintf_r+0x47c>
  4084a6:	4a21      	ldr	r2, [pc, #132]	; (40852c <_svfprintf_r+0xab8>)
  4084a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4084ac:	2f10      	cmp	r7, #16
  4084ae:	dd2b      	ble.n	408508 <_svfprintf_r+0xa94>
  4084b0:	464a      	mov	r2, r9
  4084b2:	4621      	mov	r1, r4
  4084b4:	46b9      	mov	r9, r7
  4084b6:	2510      	movs	r5, #16
  4084b8:	4637      	mov	r7, r6
  4084ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4084bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4084be:	e006      	b.n	4084ce <_svfprintf_r+0xa5a>
  4084c0:	f1a9 0910 	sub.w	r9, r9, #16
  4084c4:	f1b9 0f10 	cmp.w	r9, #16
  4084c8:	f102 0208 	add.w	r2, r2, #8
  4084cc:	dd18      	ble.n	408500 <_svfprintf_r+0xa8c>
  4084ce:	3301      	adds	r3, #1
  4084d0:	3110      	adds	r1, #16
  4084d2:	2b07      	cmp	r3, #7
  4084d4:	9125      	str	r1, [sp, #148]	; 0x94
  4084d6:	9324      	str	r3, [sp, #144]	; 0x90
  4084d8:	f8c2 a000 	str.w	sl, [r2]
  4084dc:	6055      	str	r5, [r2, #4]
  4084de:	ddef      	ble.n	4084c0 <_svfprintf_r+0xa4c>
  4084e0:	aa23      	add	r2, sp, #140	; 0x8c
  4084e2:	4631      	mov	r1, r6
  4084e4:	4620      	mov	r0, r4
  4084e6:	f005 f8d9 	bl	40d69c <__ssprint_r>
  4084ea:	2800      	cmp	r0, #0
  4084ec:	f47f abbb 	bne.w	407c66 <_svfprintf_r+0x1f2>
  4084f0:	f1a9 0910 	sub.w	r9, r9, #16
  4084f4:	f1b9 0f10 	cmp.w	r9, #16
  4084f8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4084fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084fc:	aa30      	add	r2, sp, #192	; 0xc0
  4084fe:	dce6      	bgt.n	4084ce <_svfprintf_r+0xa5a>
  408500:	463e      	mov	r6, r7
  408502:	460c      	mov	r4, r1
  408504:	464f      	mov	r7, r9
  408506:	4691      	mov	r9, r2
  408508:	3301      	adds	r3, #1
  40850a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40850c:	9324      	str	r3, [sp, #144]	; 0x90
  40850e:	443c      	add	r4, r7
  408510:	2b07      	cmp	r3, #7
  408512:	9425      	str	r4, [sp, #148]	; 0x94
  408514:	e889 0084 	stmia.w	r9, {r2, r7}
  408518:	f300 8245 	bgt.w	4089a6 <_svfprintf_r+0xf32>
  40851c:	f109 0908 	add.w	r9, r9, #8
  408520:	e4e6      	b.n	407ef0 <_svfprintf_r+0x47c>
  408522:	bf00      	nop
  408524:	0040ff30 	.word	0x0040ff30
  408528:	0040ff4c 	.word	0x0040ff4c
  40852c:	0040fefc 	.word	0x0040fefc
  408530:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408532:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408534:	2b01      	cmp	r3, #1
  408536:	f340 8208 	ble.w	40894a <_svfprintf_r+0xed6>
  40853a:	3501      	adds	r5, #1
  40853c:	3401      	adds	r4, #1
  40853e:	2301      	movs	r3, #1
  408540:	2d07      	cmp	r5, #7
  408542:	9425      	str	r4, [sp, #148]	; 0x94
  408544:	9524      	str	r5, [sp, #144]	; 0x90
  408546:	f8c9 6000 	str.w	r6, [r9]
  40854a:	f8c9 3004 	str.w	r3, [r9, #4]
  40854e:	f300 820d 	bgt.w	40896c <_svfprintf_r+0xef8>
  408552:	f109 0908 	add.w	r9, r9, #8
  408556:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40855a:	f8c9 3000 	str.w	r3, [r9]
  40855e:	3501      	adds	r5, #1
  408560:	4414      	add	r4, r2
  408562:	2d07      	cmp	r5, #7
  408564:	9425      	str	r4, [sp, #148]	; 0x94
  408566:	9524      	str	r5, [sp, #144]	; 0x90
  408568:	f8c9 2004 	str.w	r2, [r9, #4]
  40856c:	f300 820e 	bgt.w	40898c <_svfprintf_r+0xf18>
  408570:	f109 0908 	add.w	r9, r9, #8
  408574:	2300      	movs	r3, #0
  408576:	9814      	ldr	r0, [sp, #80]	; 0x50
  408578:	9915      	ldr	r1, [sp, #84]	; 0x54
  40857a:	2200      	movs	r2, #0
  40857c:	f005 fefa 	bl	40e374 <__aeabi_dcmpeq>
  408580:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408582:	2800      	cmp	r0, #0
  408584:	f040 80c3 	bne.w	40870e <_svfprintf_r+0xc9a>
  408588:	3b01      	subs	r3, #1
  40858a:	3501      	adds	r5, #1
  40858c:	3601      	adds	r6, #1
  40858e:	441c      	add	r4, r3
  408590:	2d07      	cmp	r5, #7
  408592:	9524      	str	r5, [sp, #144]	; 0x90
  408594:	9425      	str	r4, [sp, #148]	; 0x94
  408596:	f8c9 6000 	str.w	r6, [r9]
  40859a:	f8c9 3004 	str.w	r3, [r9, #4]
  40859e:	f300 80f5 	bgt.w	40878c <_svfprintf_r+0xd18>
  4085a2:	f109 0908 	add.w	r9, r9, #8
  4085a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4085a8:	f8c9 2004 	str.w	r2, [r9, #4]
  4085ac:	3501      	adds	r5, #1
  4085ae:	4414      	add	r4, r2
  4085b0:	ab1f      	add	r3, sp, #124	; 0x7c
  4085b2:	2d07      	cmp	r5, #7
  4085b4:	9425      	str	r4, [sp, #148]	; 0x94
  4085b6:	9524      	str	r5, [sp, #144]	; 0x90
  4085b8:	f8c9 3000 	str.w	r3, [r9]
  4085bc:	f77f ace8 	ble.w	407f90 <_svfprintf_r+0x51c>
  4085c0:	aa23      	add	r2, sp, #140	; 0x8c
  4085c2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4085c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4085c6:	f005 f869 	bl	40d69c <__ssprint_r>
  4085ca:	2800      	cmp	r0, #0
  4085cc:	f47f ab4b 	bne.w	407c66 <_svfprintf_r+0x1f2>
  4085d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085d2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4085d6:	e4dd      	b.n	407f94 <_svfprintf_r+0x520>
  4085d8:	aa23      	add	r2, sp, #140	; 0x8c
  4085da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4085dc:	980a      	ldr	r0, [sp, #40]	; 0x28
  4085de:	f005 f85d 	bl	40d69c <__ssprint_r>
  4085e2:	2800      	cmp	r0, #0
  4085e4:	f43f ad24 	beq.w	408030 <_svfprintf_r+0x5bc>
  4085e8:	f7ff bb3d 	b.w	407c66 <_svfprintf_r+0x1f2>
  4085ec:	aa23      	add	r2, sp, #140	; 0x8c
  4085ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  4085f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4085f2:	f005 f853 	bl	40d69c <__ssprint_r>
  4085f6:	2800      	cmp	r0, #0
  4085f8:	f47f ab35 	bne.w	407c66 <_svfprintf_r+0x1f2>
  4085fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4085fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408602:	e4b4      	b.n	407f6e <_svfprintf_r+0x4fa>
  408604:	aa23      	add	r2, sp, #140	; 0x8c
  408606:	9909      	ldr	r1, [sp, #36]	; 0x24
  408608:	980a      	ldr	r0, [sp, #40]	; 0x28
  40860a:	f005 f847 	bl	40d69c <__ssprint_r>
  40860e:	2800      	cmp	r0, #0
  408610:	f47f ab29 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408614:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408616:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40861a:	e455      	b.n	407ec8 <_svfprintf_r+0x454>
  40861c:	aa23      	add	r2, sp, #140	; 0x8c
  40861e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408620:	980a      	ldr	r0, [sp, #40]	; 0x28
  408622:	f005 f83b 	bl	40d69c <__ssprint_r>
  408626:	2800      	cmp	r0, #0
  408628:	f47f ab1d 	bne.w	407c66 <_svfprintf_r+0x1f2>
  40862c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40862e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408632:	e459      	b.n	407ee8 <_svfprintf_r+0x474>
  408634:	f1bb 0f00 	cmp.w	fp, #0
  408638:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40863c:	f2c0 82d8 	blt.w	408bf0 <_svfprintf_r+0x117c>
  408640:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408644:	9307      	str	r3, [sp, #28]
  408646:	ea54 0305 	orrs.w	r3, r4, r5
  40864a:	f47f adcb 	bne.w	4081e4 <_svfprintf_r+0x770>
  40864e:	f1bb 0f00 	cmp.w	fp, #0
  408652:	f43f ae8d 	beq.w	408370 <_svfprintf_r+0x8fc>
  408656:	2700      	movs	r7, #0
  408658:	e6b8      	b.n	4083cc <_svfprintf_r+0x958>
  40865a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40865c:	2d00      	cmp	r5, #0
  40865e:	f340 82ca 	ble.w	408bf6 <_svfprintf_r+0x1182>
  408662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408664:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408666:	4293      	cmp	r3, r2
  408668:	bfa8      	it	ge
  40866a:	4613      	movge	r3, r2
  40866c:	2b00      	cmp	r3, #0
  40866e:	461d      	mov	r5, r3
  408670:	dd0d      	ble.n	40868e <_svfprintf_r+0xc1a>
  408672:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408674:	f8c9 6000 	str.w	r6, [r9]
  408678:	3301      	adds	r3, #1
  40867a:	442c      	add	r4, r5
  40867c:	2b07      	cmp	r3, #7
  40867e:	9425      	str	r4, [sp, #148]	; 0x94
  408680:	f8c9 5004 	str.w	r5, [r9, #4]
  408684:	9324      	str	r3, [sp, #144]	; 0x90
  408686:	f300 839c 	bgt.w	408dc2 <_svfprintf_r+0x134e>
  40868a:	f109 0908 	add.w	r9, r9, #8
  40868e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408690:	2d00      	cmp	r5, #0
  408692:	bfa8      	it	ge
  408694:	1b5b      	subge	r3, r3, r5
  408696:	2b00      	cmp	r3, #0
  408698:	461d      	mov	r5, r3
  40869a:	f340 80f6 	ble.w	40888a <_svfprintf_r+0xe16>
  40869e:	4aba      	ldr	r2, [pc, #744]	; (408988 <_svfprintf_r+0xf14>)
  4086a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4086a4:	2d10      	cmp	r5, #16
  4086a6:	f340 828a 	ble.w	408bbe <_svfprintf_r+0x114a>
  4086aa:	4622      	mov	r2, r4
  4086ac:	2710      	movs	r7, #16
  4086ae:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4086b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4086b4:	e005      	b.n	4086c2 <_svfprintf_r+0xc4e>
  4086b6:	f109 0908 	add.w	r9, r9, #8
  4086ba:	3d10      	subs	r5, #16
  4086bc:	2d10      	cmp	r5, #16
  4086be:	f340 827d 	ble.w	408bbc <_svfprintf_r+0x1148>
  4086c2:	3301      	adds	r3, #1
  4086c4:	3210      	adds	r2, #16
  4086c6:	2b07      	cmp	r3, #7
  4086c8:	9225      	str	r2, [sp, #148]	; 0x94
  4086ca:	9324      	str	r3, [sp, #144]	; 0x90
  4086cc:	f8c9 a000 	str.w	sl, [r9]
  4086d0:	f8c9 7004 	str.w	r7, [r9, #4]
  4086d4:	ddef      	ble.n	4086b6 <_svfprintf_r+0xc42>
  4086d6:	aa23      	add	r2, sp, #140	; 0x8c
  4086d8:	4621      	mov	r1, r4
  4086da:	4658      	mov	r0, fp
  4086dc:	f004 ffde 	bl	40d69c <__ssprint_r>
  4086e0:	2800      	cmp	r0, #0
  4086e2:	f47f aac0 	bne.w	407c66 <_svfprintf_r+0x1f2>
  4086e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4086e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4086ee:	e7e4      	b.n	4086ba <_svfprintf_r+0xc46>
  4086f0:	aa23      	add	r2, sp, #140	; 0x8c
  4086f2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4086f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4086f6:	f004 ffd1 	bl	40d69c <__ssprint_r>
  4086fa:	2800      	cmp	r0, #0
  4086fc:	f47f aab3 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408700:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408704:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408706:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40870a:	f7ff bbcd 	b.w	407ea8 <_svfprintf_r+0x434>
  40870e:	1e5e      	subs	r6, r3, #1
  408710:	2e00      	cmp	r6, #0
  408712:	f77f af48 	ble.w	4085a6 <_svfprintf_r+0xb32>
  408716:	4b9c      	ldr	r3, [pc, #624]	; (408988 <_svfprintf_r+0xf14>)
  408718:	930f      	str	r3, [sp, #60]	; 0x3c
  40871a:	2e10      	cmp	r6, #16
  40871c:	dd2c      	ble.n	408778 <_svfprintf_r+0xd04>
  40871e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  408722:	2710      	movs	r7, #16
  408724:	46b0      	mov	r8, r6
  408726:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40872a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40872c:	e006      	b.n	40873c <_svfprintf_r+0xcc8>
  40872e:	f1a8 0810 	sub.w	r8, r8, #16
  408732:	f1b8 0f10 	cmp.w	r8, #16
  408736:	f109 0908 	add.w	r9, r9, #8
  40873a:	dd1a      	ble.n	408772 <_svfprintf_r+0xcfe>
  40873c:	3501      	adds	r5, #1
  40873e:	3410      	adds	r4, #16
  408740:	2d07      	cmp	r5, #7
  408742:	9425      	str	r4, [sp, #148]	; 0x94
  408744:	9524      	str	r5, [sp, #144]	; 0x90
  408746:	f8c9 a000 	str.w	sl, [r9]
  40874a:	f8c9 7004 	str.w	r7, [r9, #4]
  40874e:	ddee      	ble.n	40872e <_svfprintf_r+0xcba>
  408750:	aa23      	add	r2, sp, #140	; 0x8c
  408752:	4631      	mov	r1, r6
  408754:	4658      	mov	r0, fp
  408756:	f004 ffa1 	bl	40d69c <__ssprint_r>
  40875a:	2800      	cmp	r0, #0
  40875c:	f47f aa83 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408760:	f1a8 0810 	sub.w	r8, r8, #16
  408764:	f1b8 0f10 	cmp.w	r8, #16
  408768:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40876a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40876c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408770:	dce4      	bgt.n	40873c <_svfprintf_r+0xcc8>
  408772:	4646      	mov	r6, r8
  408774:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40877a:	3501      	adds	r5, #1
  40877c:	4434      	add	r4, r6
  40877e:	2d07      	cmp	r5, #7
  408780:	9425      	str	r4, [sp, #148]	; 0x94
  408782:	9524      	str	r5, [sp, #144]	; 0x90
  408784:	e889 0048 	stmia.w	r9, {r3, r6}
  408788:	f77f af0b 	ble.w	4085a2 <_svfprintf_r+0xb2e>
  40878c:	aa23      	add	r2, sp, #140	; 0x8c
  40878e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408790:	980a      	ldr	r0, [sp, #40]	; 0x28
  408792:	f004 ff83 	bl	40d69c <__ssprint_r>
  408796:	2800      	cmp	r0, #0
  408798:	f47f aa65 	bne.w	407c66 <_svfprintf_r+0x1f2>
  40879c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40879e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4087a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4087a4:	e6ff      	b.n	4085a6 <_svfprintf_r+0xb32>
  4087a6:	9907      	ldr	r1, [sp, #28]
  4087a8:	f011 0210 	ands.w	r2, r1, #16
  4087ac:	f000 8108 	beq.w	4089c0 <_svfprintf_r+0xf4c>
  4087b0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4087b2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4087b6:	f1bb 0f00 	cmp.w	fp, #0
  4087ba:	6804      	ldr	r4, [r0, #0]
  4087bc:	f100 0704 	add.w	r7, r0, #4
  4087c0:	f04f 0500 	mov.w	r5, #0
  4087c4:	db26      	blt.n	408814 <_svfprintf_r+0xda0>
  4087c6:	460a      	mov	r2, r1
  4087c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4087cc:	9207      	str	r2, [sp, #28]
  4087ce:	ea54 0205 	orrs.w	r2, r4, r5
  4087d2:	970e      	str	r7, [sp, #56]	; 0x38
  4087d4:	461f      	mov	r7, r3
  4087d6:	f47f aaef 	bne.w	407db8 <_svfprintf_r+0x344>
  4087da:	e4c8      	b.n	40816e <_svfprintf_r+0x6fa>
  4087dc:	9b07      	ldr	r3, [sp, #28]
  4087de:	06d9      	lsls	r1, r3, #27
  4087e0:	d42a      	bmi.n	408838 <_svfprintf_r+0xdc4>
  4087e2:	9b07      	ldr	r3, [sp, #28]
  4087e4:	065a      	lsls	r2, r3, #25
  4087e6:	d527      	bpl.n	408838 <_svfprintf_r+0xdc4>
  4087e8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4087ea:	f9b1 4000 	ldrsh.w	r4, [r1]
  4087ee:	3104      	adds	r1, #4
  4087f0:	17e5      	asrs	r5, r4, #31
  4087f2:	4622      	mov	r2, r4
  4087f4:	462b      	mov	r3, r5
  4087f6:	910e      	str	r1, [sp, #56]	; 0x38
  4087f8:	f7ff bacb 	b.w	407d92 <_svfprintf_r+0x31e>
  4087fc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4087fe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408802:	f1bb 0f00 	cmp.w	fp, #0
  408806:	680c      	ldr	r4, [r1, #0]
  408808:	f101 0704 	add.w	r7, r1, #4
  40880c:	f04f 0500 	mov.w	r5, #0
  408810:	f280 8247 	bge.w	408ca2 <_svfprintf_r+0x122e>
  408814:	970e      	str	r7, [sp, #56]	; 0x38
  408816:	461f      	mov	r7, r3
  408818:	ea54 0305 	orrs.w	r3, r4, r5
  40881c:	f47f aacc 	bne.w	407db8 <_svfprintf_r+0x344>
  408820:	e4aa      	b.n	408178 <_svfprintf_r+0x704>
  408822:	3301      	adds	r3, #1
  408824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408826:	9324      	str	r3, [sp, #144]	; 0x90
  408828:	442c      	add	r4, r5
  40882a:	2b07      	cmp	r3, #7
  40882c:	9425      	str	r4, [sp, #148]	; 0x94
  40882e:	e889 0024 	stmia.w	r9, {r2, r5}
  408832:	f77f abad 	ble.w	407f90 <_svfprintf_r+0x51c>
  408836:	e6c3      	b.n	4085c0 <_svfprintf_r+0xb4c>
  408838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40883a:	6814      	ldr	r4, [r2, #0]
  40883c:	4613      	mov	r3, r2
  40883e:	3304      	adds	r3, #4
  408840:	17e5      	asrs	r5, r4, #31
  408842:	4622      	mov	r2, r4
  408844:	930e      	str	r3, [sp, #56]	; 0x38
  408846:	2a00      	cmp	r2, #0
  408848:	462b      	mov	r3, r5
  40884a:	f173 0300 	sbcs.w	r3, r3, #0
  40884e:	f6bf aaa5 	bge.w	407d9c <_svfprintf_r+0x328>
  408852:	4264      	negs	r4, r4
  408854:	f04f 072d 	mov.w	r7, #45	; 0x2d
  408858:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40885c:	f1bb 0f00 	cmp.w	fp, #0
  408860:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408864:	f6ff aaa8 	blt.w	407db8 <_svfprintf_r+0x344>
  408868:	9b07      	ldr	r3, [sp, #28]
  40886a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40886e:	9307      	str	r3, [sp, #28]
  408870:	f7ff baa2 	b.w	407db8 <_svfprintf_r+0x344>
  408874:	aa23      	add	r2, sp, #140	; 0x8c
  408876:	9909      	ldr	r1, [sp, #36]	; 0x24
  408878:	980a      	ldr	r0, [sp, #40]	; 0x28
  40887a:	f004 ff0f 	bl	40d69c <__ssprint_r>
  40887e:	2800      	cmp	r0, #0
  408880:	f47f a9f1 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408884:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408886:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40888a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40888c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40888e:	4432      	add	r2, r6
  408890:	4617      	mov	r7, r2
  408892:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408894:	4293      	cmp	r3, r2
  408896:	db47      	blt.n	408928 <_svfprintf_r+0xeb4>
  408898:	9a07      	ldr	r2, [sp, #28]
  40889a:	07d5      	lsls	r5, r2, #31
  40889c:	d444      	bmi.n	408928 <_svfprintf_r+0xeb4>
  40889e:	9912      	ldr	r1, [sp, #72]	; 0x48
  4088a0:	440e      	add	r6, r1
  4088a2:	1bf5      	subs	r5, r6, r7
  4088a4:	1acb      	subs	r3, r1, r3
  4088a6:	429d      	cmp	r5, r3
  4088a8:	bfa8      	it	ge
  4088aa:	461d      	movge	r5, r3
  4088ac:	2d00      	cmp	r5, #0
  4088ae:	462e      	mov	r6, r5
  4088b0:	dd0d      	ble.n	4088ce <_svfprintf_r+0xe5a>
  4088b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4088b4:	f8c9 7000 	str.w	r7, [r9]
  4088b8:	3201      	adds	r2, #1
  4088ba:	442c      	add	r4, r5
  4088bc:	2a07      	cmp	r2, #7
  4088be:	9425      	str	r4, [sp, #148]	; 0x94
  4088c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4088c4:	9224      	str	r2, [sp, #144]	; 0x90
  4088c6:	f300 830b 	bgt.w	408ee0 <_svfprintf_r+0x146c>
  4088ca:	f109 0908 	add.w	r9, r9, #8
  4088ce:	2e00      	cmp	r6, #0
  4088d0:	bfac      	ite	ge
  4088d2:	1b9d      	subge	r5, r3, r6
  4088d4:	461d      	movlt	r5, r3
  4088d6:	2d00      	cmp	r5, #0
  4088d8:	f77f ab5c 	ble.w	407f94 <_svfprintf_r+0x520>
  4088dc:	4a2a      	ldr	r2, [pc, #168]	; (408988 <_svfprintf_r+0xf14>)
  4088de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4088e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4088e2:	2d10      	cmp	r5, #16
  4088e4:	dd9d      	ble.n	408822 <_svfprintf_r+0xdae>
  4088e6:	2610      	movs	r6, #16
  4088e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4088ea:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4088ee:	e004      	b.n	4088fa <_svfprintf_r+0xe86>
  4088f0:	f109 0908 	add.w	r9, r9, #8
  4088f4:	3d10      	subs	r5, #16
  4088f6:	2d10      	cmp	r5, #16
  4088f8:	dd93      	ble.n	408822 <_svfprintf_r+0xdae>
  4088fa:	3301      	adds	r3, #1
  4088fc:	3410      	adds	r4, #16
  4088fe:	2b07      	cmp	r3, #7
  408900:	9425      	str	r4, [sp, #148]	; 0x94
  408902:	9324      	str	r3, [sp, #144]	; 0x90
  408904:	f8c9 a000 	str.w	sl, [r9]
  408908:	f8c9 6004 	str.w	r6, [r9, #4]
  40890c:	ddf0      	ble.n	4088f0 <_svfprintf_r+0xe7c>
  40890e:	aa23      	add	r2, sp, #140	; 0x8c
  408910:	4659      	mov	r1, fp
  408912:	4638      	mov	r0, r7
  408914:	f004 fec2 	bl	40d69c <__ssprint_r>
  408918:	2800      	cmp	r0, #0
  40891a:	f47f a9a4 	bne.w	407c66 <_svfprintf_r+0x1f2>
  40891e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408920:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408922:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408926:	e7e5      	b.n	4088f4 <_svfprintf_r+0xe80>
  408928:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40892a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40892c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40892e:	f8c9 1000 	str.w	r1, [r9]
  408932:	3201      	adds	r2, #1
  408934:	4404      	add	r4, r0
  408936:	2a07      	cmp	r2, #7
  408938:	9425      	str	r4, [sp, #148]	; 0x94
  40893a:	f8c9 0004 	str.w	r0, [r9, #4]
  40893e:	9224      	str	r2, [sp, #144]	; 0x90
  408940:	f300 82a9 	bgt.w	408e96 <_svfprintf_r+0x1422>
  408944:	f109 0908 	add.w	r9, r9, #8
  408948:	e7a9      	b.n	40889e <_svfprintf_r+0xe2a>
  40894a:	9b07      	ldr	r3, [sp, #28]
  40894c:	07d8      	lsls	r0, r3, #31
  40894e:	f53f adf4 	bmi.w	40853a <_svfprintf_r+0xac6>
  408952:	3501      	adds	r5, #1
  408954:	3401      	adds	r4, #1
  408956:	2301      	movs	r3, #1
  408958:	2d07      	cmp	r5, #7
  40895a:	9425      	str	r4, [sp, #148]	; 0x94
  40895c:	9524      	str	r5, [sp, #144]	; 0x90
  40895e:	f8c9 6000 	str.w	r6, [r9]
  408962:	f8c9 3004 	str.w	r3, [r9, #4]
  408966:	f77f ae1c 	ble.w	4085a2 <_svfprintf_r+0xb2e>
  40896a:	e70f      	b.n	40878c <_svfprintf_r+0xd18>
  40896c:	aa23      	add	r2, sp, #140	; 0x8c
  40896e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408970:	980a      	ldr	r0, [sp, #40]	; 0x28
  408972:	f004 fe93 	bl	40d69c <__ssprint_r>
  408976:	2800      	cmp	r0, #0
  408978:	f47f a975 	bne.w	407c66 <_svfprintf_r+0x1f2>
  40897c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40897e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408980:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408984:	e5e7      	b.n	408556 <_svfprintf_r+0xae2>
  408986:	bf00      	nop
  408988:	0040fefc 	.word	0x0040fefc
  40898c:	aa23      	add	r2, sp, #140	; 0x8c
  40898e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408990:	980a      	ldr	r0, [sp, #40]	; 0x28
  408992:	f004 fe83 	bl	40d69c <__ssprint_r>
  408996:	2800      	cmp	r0, #0
  408998:	f47f a965 	bne.w	407c66 <_svfprintf_r+0x1f2>
  40899c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40899e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4089a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4089a4:	e5e6      	b.n	408574 <_svfprintf_r+0xb00>
  4089a6:	aa23      	add	r2, sp, #140	; 0x8c
  4089a8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4089aa:	980a      	ldr	r0, [sp, #40]	; 0x28
  4089ac:	f004 fe76 	bl	40d69c <__ssprint_r>
  4089b0:	2800      	cmp	r0, #0
  4089b2:	f47f a958 	bne.w	407c66 <_svfprintf_r+0x1f2>
  4089b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4089b8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4089bc:	f7ff ba98 	b.w	407ef0 <_svfprintf_r+0x47c>
  4089c0:	9907      	ldr	r1, [sp, #28]
  4089c2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4089c6:	f43f af19 	beq.w	4087fc <_svfprintf_r+0xd88>
  4089ca:	980e      	ldr	r0, [sp, #56]	; 0x38
  4089cc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4089d0:	f1bb 0f00 	cmp.w	fp, #0
  4089d4:	8804      	ldrh	r4, [r0, #0]
  4089d6:	f100 0704 	add.w	r7, r0, #4
  4089da:	f04f 0500 	mov.w	r5, #0
  4089de:	f2c0 81b9 	blt.w	408d54 <_svfprintf_r+0x12e0>
  4089e2:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4089e6:	9307      	str	r3, [sp, #28]
  4089e8:	ea54 0305 	orrs.w	r3, r4, r5
  4089ec:	970e      	str	r7, [sp, #56]	; 0x38
  4089ee:	4617      	mov	r7, r2
  4089f0:	f47f a9e2 	bne.w	407db8 <_svfprintf_r+0x344>
  4089f4:	f7ff bbbb 	b.w	40816e <_svfprintf_r+0x6fa>
  4089f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4089fa:	4622      	mov	r2, r4
  4089fc:	4620      	mov	r0, r4
  4089fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408a00:	4623      	mov	r3, r4
  408a02:	4621      	mov	r1, r4
  408a04:	f005 fce8 	bl	40e3d8 <__aeabi_dcmpun>
  408a08:	2800      	cmp	r0, #0
  408a0a:	f040 8317 	bne.w	40903c <_svfprintf_r+0x15c8>
  408a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408a10:	f1bb 3fff 	cmp.w	fp, #4294967295
  408a14:	f023 0320 	bic.w	r3, r3, #32
  408a18:	930d      	str	r3, [sp, #52]	; 0x34
  408a1a:	f000 8270 	beq.w	408efe <_svfprintf_r+0x148a>
  408a1e:	2b47      	cmp	r3, #71	; 0x47
  408a20:	f000 8192 	beq.w	408d48 <_svfprintf_r+0x12d4>
  408a24:	9b07      	ldr	r3, [sp, #28]
  408a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408a2a:	9310      	str	r3, [sp, #64]	; 0x40
  408a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408a2e:	1e1f      	subs	r7, r3, #0
  408a30:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408a32:	9308      	str	r3, [sp, #32]
  408a34:	bfbb      	ittet	lt
  408a36:	463b      	movlt	r3, r7
  408a38:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  408a3c:	2300      	movge	r3, #0
  408a3e:	232d      	movlt	r3, #45	; 0x2d
  408a40:	930f      	str	r3, [sp, #60]	; 0x3c
  408a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408a44:	2b66      	cmp	r3, #102	; 0x66
  408a46:	f000 825d 	beq.w	408f04 <_svfprintf_r+0x1490>
  408a4a:	2b46      	cmp	r3, #70	; 0x46
  408a4c:	f000 8151 	beq.w	408cf2 <_svfprintf_r+0x127e>
  408a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408a52:	9a08      	ldr	r2, [sp, #32]
  408a54:	2b45      	cmp	r3, #69	; 0x45
  408a56:	a821      	add	r0, sp, #132	; 0x84
  408a58:	a91e      	add	r1, sp, #120	; 0x78
  408a5a:	bf0c      	ite	eq
  408a5c:	f10b 0501 	addeq.w	r5, fp, #1
  408a60:	465d      	movne	r5, fp
  408a62:	9004      	str	r0, [sp, #16]
  408a64:	9103      	str	r1, [sp, #12]
  408a66:	a81d      	add	r0, sp, #116	; 0x74
  408a68:	2102      	movs	r1, #2
  408a6a:	463b      	mov	r3, r7
  408a6c:	9002      	str	r0, [sp, #8]
  408a6e:	9501      	str	r5, [sp, #4]
  408a70:	9100      	str	r1, [sp, #0]
  408a72:	980a      	ldr	r0, [sp, #40]	; 0x28
  408a74:	f001 fbc4 	bl	40a200 <_dtoa_r>
  408a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408a7a:	2b67      	cmp	r3, #103	; 0x67
  408a7c:	4606      	mov	r6, r0
  408a7e:	f040 8290 	bne.w	408fa2 <_svfprintf_r+0x152e>
  408a82:	9b07      	ldr	r3, [sp, #28]
  408a84:	07da      	lsls	r2, r3, #31
  408a86:	f140 82af 	bpl.w	408fe8 <_svfprintf_r+0x1574>
  408a8a:	1974      	adds	r4, r6, r5
  408a8c:	9808      	ldr	r0, [sp, #32]
  408a8e:	4639      	mov	r1, r7
  408a90:	2200      	movs	r2, #0
  408a92:	2300      	movs	r3, #0
  408a94:	f005 fc6e 	bl	40e374 <__aeabi_dcmpeq>
  408a98:	2800      	cmp	r0, #0
  408a9a:	f040 8190 	bne.w	408dbe <_svfprintf_r+0x134a>
  408a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408aa0:	429c      	cmp	r4, r3
  408aa2:	d906      	bls.n	408ab2 <_svfprintf_r+0x103e>
  408aa4:	2130      	movs	r1, #48	; 0x30
  408aa6:	1c5a      	adds	r2, r3, #1
  408aa8:	9221      	str	r2, [sp, #132]	; 0x84
  408aaa:	7019      	strb	r1, [r3, #0]
  408aac:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408aae:	429c      	cmp	r4, r3
  408ab0:	d8f9      	bhi.n	408aa6 <_svfprintf_r+0x1032>
  408ab2:	1b9b      	subs	r3, r3, r6
  408ab4:	9312      	str	r3, [sp, #72]	; 0x48
  408ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ab8:	2b47      	cmp	r3, #71	; 0x47
  408aba:	f000 8179 	beq.w	408db0 <_svfprintf_r+0x133c>
  408abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ac0:	2b65      	cmp	r3, #101	; 0x65
  408ac2:	f340 827d 	ble.w	408fc0 <_svfprintf_r+0x154c>
  408ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ac8:	2b66      	cmp	r3, #102	; 0x66
  408aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408acc:	9313      	str	r3, [sp, #76]	; 0x4c
  408ace:	f000 825b 	beq.w	408f88 <_svfprintf_r+0x1514>
  408ad2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408ad4:	9912      	ldr	r1, [sp, #72]	; 0x48
  408ad6:	428a      	cmp	r2, r1
  408ad8:	f2c0 8230 	blt.w	408f3c <_svfprintf_r+0x14c8>
  408adc:	9b07      	ldr	r3, [sp, #28]
  408ade:	07d9      	lsls	r1, r3, #31
  408ae0:	f100 8284 	bmi.w	408fec <_svfprintf_r+0x1578>
  408ae4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408ae8:	920d      	str	r2, [sp, #52]	; 0x34
  408aea:	2267      	movs	r2, #103	; 0x67
  408aec:	9211      	str	r2, [sp, #68]	; 0x44
  408aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408af0:	2a00      	cmp	r2, #0
  408af2:	f040 8153 	bne.w	408d9c <_svfprintf_r+0x1328>
  408af6:	9308      	str	r3, [sp, #32]
  408af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408afa:	9307      	str	r3, [sp, #28]
  408afc:	4693      	mov	fp, r2
  408afe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408b02:	f7ff b97d 	b.w	407e00 <_svfprintf_r+0x38c>
  408b06:	9907      	ldr	r1, [sp, #28]
  408b08:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  408b0c:	d015      	beq.n	408b3a <_svfprintf_r+0x10c6>
  408b0e:	980e      	ldr	r0, [sp, #56]	; 0x38
  408b10:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408b14:	f1bb 0f00 	cmp.w	fp, #0
  408b18:	8804      	ldrh	r4, [r0, #0]
  408b1a:	f100 0704 	add.w	r7, r0, #4
  408b1e:	f04f 0500 	mov.w	r5, #0
  408b22:	db16      	blt.n	408b52 <_svfprintf_r+0x10de>
  408b24:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  408b28:	9307      	str	r3, [sp, #28]
  408b2a:	ea54 0305 	orrs.w	r3, r4, r5
  408b2e:	970e      	str	r7, [sp, #56]	; 0x38
  408b30:	f43f ac3a 	beq.w	4083a8 <_svfprintf_r+0x934>
  408b34:	4617      	mov	r7, r2
  408b36:	f7ff b8c2 	b.w	407cbe <_svfprintf_r+0x24a>
  408b3a:	990e      	ldr	r1, [sp, #56]	; 0x38
  408b3c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408b40:	f1bb 0f00 	cmp.w	fp, #0
  408b44:	680c      	ldr	r4, [r1, #0]
  408b46:	f101 0704 	add.w	r7, r1, #4
  408b4a:	f04f 0500 	mov.w	r5, #0
  408b4e:	f280 80a5 	bge.w	408c9c <_svfprintf_r+0x1228>
  408b52:	970e      	str	r7, [sp, #56]	; 0x38
  408b54:	2700      	movs	r7, #0
  408b56:	f7ff b8b2 	b.w	407cbe <_svfprintf_r+0x24a>
  408b5a:	9b07      	ldr	r3, [sp, #28]
  408b5c:	06df      	lsls	r7, r3, #27
  408b5e:	d40b      	bmi.n	408b78 <_svfprintf_r+0x1104>
  408b60:	9b07      	ldr	r3, [sp, #28]
  408b62:	065e      	lsls	r6, r3, #25
  408b64:	d508      	bpl.n	408b78 <_svfprintf_r+0x1104>
  408b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408b68:	6813      	ldr	r3, [r2, #0]
  408b6a:	3204      	adds	r2, #4
  408b6c:	920e      	str	r2, [sp, #56]	; 0x38
  408b6e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  408b72:	801a      	strh	r2, [r3, #0]
  408b74:	f7fe bfa4 	b.w	407ac0 <_svfprintf_r+0x4c>
  408b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408b7a:	6813      	ldr	r3, [r2, #0]
  408b7c:	3204      	adds	r2, #4
  408b7e:	920e      	str	r2, [sp, #56]	; 0x38
  408b80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408b82:	601a      	str	r2, [r3, #0]
  408b84:	f7fe bf9c 	b.w	407ac0 <_svfprintf_r+0x4c>
  408b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408b8a:	9b07      	ldr	r3, [sp, #28]
  408b8c:	f013 0f40 	tst.w	r3, #64	; 0x40
  408b90:	4613      	mov	r3, r2
  408b92:	f103 0304 	add.w	r3, r3, #4
  408b96:	bf0c      	ite	eq
  408b98:	6814      	ldreq	r4, [r2, #0]
  408b9a:	8814      	ldrhne	r4, [r2, #0]
  408b9c:	930e      	str	r3, [sp, #56]	; 0x38
  408b9e:	2500      	movs	r5, #0
  408ba0:	f7ff bb02 	b.w	4081a8 <_svfprintf_r+0x734>
  408ba4:	2700      	movs	r7, #0
  408ba6:	45bb      	cmp	fp, r7
  408ba8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408bac:	f6ff ac0e 	blt.w	4083cc <_svfprintf_r+0x958>
  408bb0:	9b07      	ldr	r3, [sp, #28]
  408bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408bb6:	9307      	str	r3, [sp, #28]
  408bb8:	f7ff bbd6 	b.w	408368 <_svfprintf_r+0x8f4>
  408bbc:	4614      	mov	r4, r2
  408bbe:	3301      	adds	r3, #1
  408bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408bc2:	9324      	str	r3, [sp, #144]	; 0x90
  408bc4:	442c      	add	r4, r5
  408bc6:	2b07      	cmp	r3, #7
  408bc8:	9425      	str	r4, [sp, #148]	; 0x94
  408bca:	e889 0024 	stmia.w	r9, {r2, r5}
  408bce:	f73f ae51 	bgt.w	408874 <_svfprintf_r+0xe00>
  408bd2:	f109 0908 	add.w	r9, r9, #8
  408bd6:	e658      	b.n	40888a <_svfprintf_r+0xe16>
  408bd8:	aa23      	add	r2, sp, #140	; 0x8c
  408bda:	9909      	ldr	r1, [sp, #36]	; 0x24
  408bdc:	980a      	ldr	r0, [sp, #40]	; 0x28
  408bde:	f004 fd5d 	bl	40d69c <__ssprint_r>
  408be2:	2800      	cmp	r0, #0
  408be4:	f47f a83f 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408be8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408bea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408bee:	e40f      	b.n	408410 <_svfprintf_r+0x99c>
  408bf0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408bf2:	f7ff bbe4 	b.w	4083be <_svfprintf_r+0x94a>
  408bf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bf8:	4ab5      	ldr	r2, [pc, #724]	; (408ed0 <_svfprintf_r+0x145c>)
  408bfa:	f8c9 2000 	str.w	r2, [r9]
  408bfe:	3301      	adds	r3, #1
  408c00:	3401      	adds	r4, #1
  408c02:	2201      	movs	r2, #1
  408c04:	2b07      	cmp	r3, #7
  408c06:	9425      	str	r4, [sp, #148]	; 0x94
  408c08:	9324      	str	r3, [sp, #144]	; 0x90
  408c0a:	f8c9 2004 	str.w	r2, [r9, #4]
  408c0e:	f300 808e 	bgt.w	408d2e <_svfprintf_r+0x12ba>
  408c12:	f109 0908 	add.w	r9, r9, #8
  408c16:	b92d      	cbnz	r5, 408c24 <_svfprintf_r+0x11b0>
  408c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c1a:	b91b      	cbnz	r3, 408c24 <_svfprintf_r+0x11b0>
  408c1c:	9b07      	ldr	r3, [sp, #28]
  408c1e:	07df      	lsls	r7, r3, #31
  408c20:	f57f a9b8 	bpl.w	407f94 <_svfprintf_r+0x520>
  408c24:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c26:	9916      	ldr	r1, [sp, #88]	; 0x58
  408c28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408c2a:	f8c9 2000 	str.w	r2, [r9]
  408c2e:	3301      	adds	r3, #1
  408c30:	440c      	add	r4, r1
  408c32:	2b07      	cmp	r3, #7
  408c34:	9425      	str	r4, [sp, #148]	; 0x94
  408c36:	f8c9 1004 	str.w	r1, [r9, #4]
  408c3a:	9324      	str	r3, [sp, #144]	; 0x90
  408c3c:	f300 81c2 	bgt.w	408fc4 <_svfprintf_r+0x1550>
  408c40:	f109 0908 	add.w	r9, r9, #8
  408c44:	426d      	negs	r5, r5
  408c46:	2d00      	cmp	r5, #0
  408c48:	f340 809b 	ble.w	408d82 <_svfprintf_r+0x130e>
  408c4c:	4aa1      	ldr	r2, [pc, #644]	; (408ed4 <_svfprintf_r+0x1460>)
  408c4e:	920f      	str	r2, [sp, #60]	; 0x3c
  408c50:	2d10      	cmp	r5, #16
  408c52:	f340 80c3 	ble.w	408ddc <_svfprintf_r+0x1368>
  408c56:	4622      	mov	r2, r4
  408c58:	2710      	movs	r7, #16
  408c5a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408c5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408c60:	e005      	b.n	408c6e <_svfprintf_r+0x11fa>
  408c62:	f109 0908 	add.w	r9, r9, #8
  408c66:	3d10      	subs	r5, #16
  408c68:	2d10      	cmp	r5, #16
  408c6a:	f340 80b6 	ble.w	408dda <_svfprintf_r+0x1366>
  408c6e:	3301      	adds	r3, #1
  408c70:	3210      	adds	r2, #16
  408c72:	2b07      	cmp	r3, #7
  408c74:	9225      	str	r2, [sp, #148]	; 0x94
  408c76:	9324      	str	r3, [sp, #144]	; 0x90
  408c78:	f8c9 a000 	str.w	sl, [r9]
  408c7c:	f8c9 7004 	str.w	r7, [r9, #4]
  408c80:	ddef      	ble.n	408c62 <_svfprintf_r+0x11ee>
  408c82:	aa23      	add	r2, sp, #140	; 0x8c
  408c84:	4621      	mov	r1, r4
  408c86:	4658      	mov	r0, fp
  408c88:	f004 fd08 	bl	40d69c <__ssprint_r>
  408c8c:	2800      	cmp	r0, #0
  408c8e:	f47e afea 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408c92:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c96:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408c9a:	e7e4      	b.n	408c66 <_svfprintf_r+0x11f2>
  408c9c:	9a07      	ldr	r2, [sp, #28]
  408c9e:	f7ff ba38 	b.w	408112 <_svfprintf_r+0x69e>
  408ca2:	9a07      	ldr	r2, [sp, #28]
  408ca4:	e590      	b.n	4087c8 <_svfprintf_r+0xd54>
  408ca6:	9b07      	ldr	r3, [sp, #28]
  408ca8:	f043 0320 	orr.w	r3, r3, #32
  408cac:	9307      	str	r3, [sp, #28]
  408cae:	f108 0801 	add.w	r8, r8, #1
  408cb2:	f898 3000 	ldrb.w	r3, [r8]
  408cb6:	f7fe bf36 	b.w	407b26 <_svfprintf_r+0xb2>
  408cba:	aa23      	add	r2, sp, #140	; 0x8c
  408cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
  408cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
  408cc0:	f004 fcec 	bl	40d69c <__ssprint_r>
  408cc4:	2800      	cmp	r0, #0
  408cc6:	f47e afce 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408cca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ccc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408cd0:	f7ff bbb6 	b.w	408440 <_svfprintf_r+0x9cc>
  408cd4:	2140      	movs	r1, #64	; 0x40
  408cd6:	980a      	ldr	r0, [sp, #40]	; 0x28
  408cd8:	f003 fa92 	bl	40c200 <_malloc_r>
  408cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408cde:	6010      	str	r0, [r2, #0]
  408ce0:	6110      	str	r0, [r2, #16]
  408ce2:	2800      	cmp	r0, #0
  408ce4:	f000 81e5 	beq.w	4090b2 <_svfprintf_r+0x163e>
  408ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408cea:	2340      	movs	r3, #64	; 0x40
  408cec:	6153      	str	r3, [r2, #20]
  408cee:	f7fe bed8 	b.w	407aa2 <_svfprintf_r+0x2e>
  408cf2:	a821      	add	r0, sp, #132	; 0x84
  408cf4:	a91e      	add	r1, sp, #120	; 0x78
  408cf6:	9004      	str	r0, [sp, #16]
  408cf8:	9103      	str	r1, [sp, #12]
  408cfa:	a81d      	add	r0, sp, #116	; 0x74
  408cfc:	2103      	movs	r1, #3
  408cfe:	9002      	str	r0, [sp, #8]
  408d00:	9a08      	ldr	r2, [sp, #32]
  408d02:	f8cd b004 	str.w	fp, [sp, #4]
  408d06:	463b      	mov	r3, r7
  408d08:	9100      	str	r1, [sp, #0]
  408d0a:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d0c:	f001 fa78 	bl	40a200 <_dtoa_r>
  408d10:	465d      	mov	r5, fp
  408d12:	4606      	mov	r6, r0
  408d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408d16:	2b46      	cmp	r3, #70	; 0x46
  408d18:	eb06 0405 	add.w	r4, r6, r5
  408d1c:	f47f aeb6 	bne.w	408a8c <_svfprintf_r+0x1018>
  408d20:	7833      	ldrb	r3, [r6, #0]
  408d22:	2b30      	cmp	r3, #48	; 0x30
  408d24:	f000 817c 	beq.w	409020 <_svfprintf_r+0x15ac>
  408d28:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408d2a:	442c      	add	r4, r5
  408d2c:	e6ae      	b.n	408a8c <_svfprintf_r+0x1018>
  408d2e:	aa23      	add	r2, sp, #140	; 0x8c
  408d30:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d32:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d34:	f004 fcb2 	bl	40d69c <__ssprint_r>
  408d38:	2800      	cmp	r0, #0
  408d3a:	f47e af94 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408d3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408d40:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d42:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d46:	e766      	b.n	408c16 <_svfprintf_r+0x11a2>
  408d48:	f1bb 0f00 	cmp.w	fp, #0
  408d4c:	bf08      	it	eq
  408d4e:	f04f 0b01 	moveq.w	fp, #1
  408d52:	e667      	b.n	408a24 <_svfprintf_r+0xfb0>
  408d54:	970e      	str	r7, [sp, #56]	; 0x38
  408d56:	4617      	mov	r7, r2
  408d58:	e55e      	b.n	408818 <_svfprintf_r+0xda4>
  408d5a:	4630      	mov	r0, r6
  408d5c:	f7fd fab0 	bl	4062c0 <strlen>
  408d60:	46a3      	mov	fp, r4
  408d62:	4603      	mov	r3, r0
  408d64:	900d      	str	r0, [sp, #52]	; 0x34
  408d66:	f7ff baf4 	b.w	408352 <_svfprintf_r+0x8de>
  408d6a:	aa23      	add	r2, sp, #140	; 0x8c
  408d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d70:	f004 fc94 	bl	40d69c <__ssprint_r>
  408d74:	2800      	cmp	r0, #0
  408d76:	f47e af76 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408d7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408d7e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d82:	9912      	ldr	r1, [sp, #72]	; 0x48
  408d84:	f8c9 6000 	str.w	r6, [r9]
  408d88:	3301      	adds	r3, #1
  408d8a:	440c      	add	r4, r1
  408d8c:	2b07      	cmp	r3, #7
  408d8e:	9425      	str	r4, [sp, #148]	; 0x94
  408d90:	9324      	str	r3, [sp, #144]	; 0x90
  408d92:	f8c9 1004 	str.w	r1, [r9, #4]
  408d96:	f77f a8fb 	ble.w	407f90 <_svfprintf_r+0x51c>
  408d9a:	e411      	b.n	4085c0 <_svfprintf_r+0xb4c>
  408d9c:	272d      	movs	r7, #45	; 0x2d
  408d9e:	9308      	str	r3, [sp, #32]
  408da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408da2:	9307      	str	r3, [sp, #28]
  408da4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408da8:	f04f 0b00 	mov.w	fp, #0
  408dac:	f7ff b829 	b.w	407e02 <_svfprintf_r+0x38e>
  408db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408db2:	1cdd      	adds	r5, r3, #3
  408db4:	db1e      	blt.n	408df4 <_svfprintf_r+0x1380>
  408db6:	459b      	cmp	fp, r3
  408db8:	db1c      	blt.n	408df4 <_svfprintf_r+0x1380>
  408dba:	9313      	str	r3, [sp, #76]	; 0x4c
  408dbc:	e689      	b.n	408ad2 <_svfprintf_r+0x105e>
  408dbe:	4623      	mov	r3, r4
  408dc0:	e677      	b.n	408ab2 <_svfprintf_r+0x103e>
  408dc2:	aa23      	add	r2, sp, #140	; 0x8c
  408dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
  408dc6:	980a      	ldr	r0, [sp, #40]	; 0x28
  408dc8:	f004 fc68 	bl	40d69c <__ssprint_r>
  408dcc:	2800      	cmp	r0, #0
  408dce:	f47e af4a 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408dd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408dd4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408dd8:	e459      	b.n	40868e <_svfprintf_r+0xc1a>
  408dda:	4614      	mov	r4, r2
  408ddc:	3301      	adds	r3, #1
  408dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408de0:	9324      	str	r3, [sp, #144]	; 0x90
  408de2:	442c      	add	r4, r5
  408de4:	2b07      	cmp	r3, #7
  408de6:	9425      	str	r4, [sp, #148]	; 0x94
  408de8:	e889 0024 	stmia.w	r9, {r2, r5}
  408dec:	dcbd      	bgt.n	408d6a <_svfprintf_r+0x12f6>
  408dee:	f109 0908 	add.w	r9, r9, #8
  408df2:	e7c6      	b.n	408d82 <_svfprintf_r+0x130e>
  408df4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408df6:	3a02      	subs	r2, #2
  408df8:	9211      	str	r2, [sp, #68]	; 0x44
  408dfa:	3b01      	subs	r3, #1
  408dfc:	2b00      	cmp	r3, #0
  408dfe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  408e02:	931d      	str	r3, [sp, #116]	; 0x74
  408e04:	bfb8      	it	lt
  408e06:	425b      	neglt	r3, r3
  408e08:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  408e0c:	bfb4      	ite	lt
  408e0e:	222d      	movlt	r2, #45	; 0x2d
  408e10:	222b      	movge	r2, #43	; 0x2b
  408e12:	2b09      	cmp	r3, #9
  408e14:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408e18:	f340 80f1 	ble.w	408ffe <_svfprintf_r+0x158a>
  408e1c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  408e20:	4604      	mov	r4, r0
  408e22:	4a2d      	ldr	r2, [pc, #180]	; (408ed8 <_svfprintf_r+0x1464>)
  408e24:	fb82 2103 	smull	r2, r1, r2, r3
  408e28:	17da      	asrs	r2, r3, #31
  408e2a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  408e2e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  408e32:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  408e36:	f103 0130 	add.w	r1, r3, #48	; 0x30
  408e3a:	2a09      	cmp	r2, #9
  408e3c:	4613      	mov	r3, r2
  408e3e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  408e42:	dcee      	bgt.n	408e22 <_svfprintf_r+0x13ae>
  408e44:	4621      	mov	r1, r4
  408e46:	3330      	adds	r3, #48	; 0x30
  408e48:	b2da      	uxtb	r2, r3
  408e4a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  408e4e:	4288      	cmp	r0, r1
  408e50:	f240 813a 	bls.w	4090c8 <_svfprintf_r+0x1654>
  408e54:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  408e58:	4623      	mov	r3, r4
  408e5a:	e001      	b.n	408e60 <_svfprintf_r+0x13ec>
  408e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
  408e60:	f801 2b01 	strb.w	r2, [r1], #1
  408e64:	4298      	cmp	r0, r3
  408e66:	d1f9      	bne.n	408e5c <_svfprintf_r+0x13e8>
  408e68:	1c43      	adds	r3, r0, #1
  408e6a:	1b1b      	subs	r3, r3, r4
  408e6c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408e70:	4413      	add	r3, r2
  408e72:	aa1f      	add	r2, sp, #124	; 0x7c
  408e74:	1a9b      	subs	r3, r3, r2
  408e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408e78:	9319      	str	r3, [sp, #100]	; 0x64
  408e7a:	2a01      	cmp	r2, #1
  408e7c:	4413      	add	r3, r2
  408e7e:	930d      	str	r3, [sp, #52]	; 0x34
  408e80:	f340 80ea 	ble.w	409058 <_svfprintf_r+0x15e4>
  408e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e86:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408e88:	4413      	add	r3, r2
  408e8a:	2200      	movs	r2, #0
  408e8c:	930d      	str	r3, [sp, #52]	; 0x34
  408e8e:	9213      	str	r2, [sp, #76]	; 0x4c
  408e90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408e94:	e62b      	b.n	408aee <_svfprintf_r+0x107a>
  408e96:	aa23      	add	r2, sp, #140	; 0x8c
  408e98:	9909      	ldr	r1, [sp, #36]	; 0x24
  408e9a:	980a      	ldr	r0, [sp, #40]	; 0x28
  408e9c:	f004 fbfe 	bl	40d69c <__ssprint_r>
  408ea0:	2800      	cmp	r0, #0
  408ea2:	f47e aee0 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408ea6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408ea8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408eaa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408eae:	e4f6      	b.n	40889e <_svfprintf_r+0xe2a>
  408eb0:	2d06      	cmp	r5, #6
  408eb2:	462b      	mov	r3, r5
  408eb4:	bf28      	it	cs
  408eb6:	2306      	movcs	r3, #6
  408eb8:	930d      	str	r3, [sp, #52]	; 0x34
  408eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408ebe:	46b3      	mov	fp, r6
  408ec0:	970e      	str	r7, [sp, #56]	; 0x38
  408ec2:	9613      	str	r6, [sp, #76]	; 0x4c
  408ec4:	4637      	mov	r7, r6
  408ec6:	9308      	str	r3, [sp, #32]
  408ec8:	4e04      	ldr	r6, [pc, #16]	; (408edc <_svfprintf_r+0x1468>)
  408eca:	f7fe bf99 	b.w	407e00 <_svfprintf_r+0x38c>
  408ece:	bf00      	nop
  408ed0:	0040ff4c 	.word	0x0040ff4c
  408ed4:	0040fefc 	.word	0x0040fefc
  408ed8:	66666667 	.word	0x66666667
  408edc:	0040ff44 	.word	0x0040ff44
  408ee0:	aa23      	add	r2, sp, #140	; 0x8c
  408ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
  408ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
  408ee6:	f004 fbd9 	bl	40d69c <__ssprint_r>
  408eea:	2800      	cmp	r0, #0
  408eec:	f47e aebb 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408ef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408ef4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ef6:	1ad3      	subs	r3, r2, r3
  408ef8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408efc:	e4e7      	b.n	4088ce <_svfprintf_r+0xe5a>
  408efe:	f04f 0b06 	mov.w	fp, #6
  408f02:	e58f      	b.n	408a24 <_svfprintf_r+0xfb0>
  408f04:	a821      	add	r0, sp, #132	; 0x84
  408f06:	a91e      	add	r1, sp, #120	; 0x78
  408f08:	9004      	str	r0, [sp, #16]
  408f0a:	9103      	str	r1, [sp, #12]
  408f0c:	a81d      	add	r0, sp, #116	; 0x74
  408f0e:	2103      	movs	r1, #3
  408f10:	9002      	str	r0, [sp, #8]
  408f12:	9a08      	ldr	r2, [sp, #32]
  408f14:	f8cd b004 	str.w	fp, [sp, #4]
  408f18:	463b      	mov	r3, r7
  408f1a:	9100      	str	r1, [sp, #0]
  408f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
  408f1e:	f001 f96f 	bl	40a200 <_dtoa_r>
  408f22:	465d      	mov	r5, fp
  408f24:	4606      	mov	r6, r0
  408f26:	eb00 040b 	add.w	r4, r0, fp
  408f2a:	e6f9      	b.n	408d20 <_svfprintf_r+0x12ac>
  408f2c:	9307      	str	r3, [sp, #28]
  408f2e:	f7ff b959 	b.w	4081e4 <_svfprintf_r+0x770>
  408f32:	272d      	movs	r7, #45	; 0x2d
  408f34:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408f38:	f7ff b8b2 	b.w	4080a0 <_svfprintf_r+0x62c>
  408f3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408f3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408f40:	4413      	add	r3, r2
  408f42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408f44:	930d      	str	r3, [sp, #52]	; 0x34
  408f46:	2a00      	cmp	r2, #0
  408f48:	dd7e      	ble.n	409048 <_svfprintf_r+0x15d4>
  408f4a:	2267      	movs	r2, #103	; 0x67
  408f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408f50:	9211      	str	r2, [sp, #68]	; 0x44
  408f52:	e5cc      	b.n	408aee <_svfprintf_r+0x107a>
  408f54:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  408f58:	970e      	str	r7, [sp, #56]	; 0x38
  408f5a:	9308      	str	r3, [sp, #32]
  408f5c:	950d      	str	r5, [sp, #52]	; 0x34
  408f5e:	4683      	mov	fp, r0
  408f60:	9013      	str	r0, [sp, #76]	; 0x4c
  408f62:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408f66:	f7fe bf4b 	b.w	407e00 <_svfprintf_r+0x38c>
  408f6a:	9b07      	ldr	r3, [sp, #28]
  408f6c:	07db      	lsls	r3, r3, #31
  408f6e:	465f      	mov	r7, fp
  408f70:	d505      	bpl.n	408f7e <_svfprintf_r+0x150a>
  408f72:	ae40      	add	r6, sp, #256	; 0x100
  408f74:	2330      	movs	r3, #48	; 0x30
  408f76:	f806 3d41 	strb.w	r3, [r6, #-65]!
  408f7a:	f7fe bf37 	b.w	407dec <_svfprintf_r+0x378>
  408f7e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  408f82:	ae30      	add	r6, sp, #192	; 0xc0
  408f84:	f7fe bf35 	b.w	407df2 <_svfprintf_r+0x37e>
  408f88:	2b00      	cmp	r3, #0
  408f8a:	dd7d      	ble.n	409088 <_svfprintf_r+0x1614>
  408f8c:	f1bb 0f00 	cmp.w	fp, #0
  408f90:	d13d      	bne.n	40900e <_svfprintf_r+0x159a>
  408f92:	9a07      	ldr	r2, [sp, #28]
  408f94:	07d4      	lsls	r4, r2, #31
  408f96:	d43a      	bmi.n	40900e <_svfprintf_r+0x159a>
  408f98:	461a      	mov	r2, r3
  408f9a:	920d      	str	r2, [sp, #52]	; 0x34
  408f9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408fa0:	e5a5      	b.n	408aee <_svfprintf_r+0x107a>
  408fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408fa4:	2b47      	cmp	r3, #71	; 0x47
  408fa6:	f47f ad70 	bne.w	408a8a <_svfprintf_r+0x1016>
  408faa:	9b07      	ldr	r3, [sp, #28]
  408fac:	07db      	lsls	r3, r3, #31
  408fae:	f53f aeb1 	bmi.w	408d14 <_svfprintf_r+0x12a0>
  408fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408fb4:	1b9b      	subs	r3, r3, r6
  408fb6:	9312      	str	r3, [sp, #72]	; 0x48
  408fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408fba:	2b47      	cmp	r3, #71	; 0x47
  408fbc:	f43f aef8 	beq.w	408db0 <_svfprintf_r+0x133c>
  408fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408fc2:	e71a      	b.n	408dfa <_svfprintf_r+0x1386>
  408fc4:	aa23      	add	r2, sp, #140	; 0x8c
  408fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
  408fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
  408fca:	f004 fb67 	bl	40d69c <__ssprint_r>
  408fce:	2800      	cmp	r0, #0
  408fd0:	f47e ae49 	bne.w	407c66 <_svfprintf_r+0x1f2>
  408fd4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408fd6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fda:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408fde:	e631      	b.n	408c44 <_svfprintf_r+0x11d0>
  408fe0:	46a0      	mov	r8, r4
  408fe2:	2500      	movs	r5, #0
  408fe4:	f7fe bda1 	b.w	407b2a <_svfprintf_r+0xb6>
  408fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408fea:	e562      	b.n	408ab2 <_svfprintf_r+0x103e>
  408fec:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408fee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408ff0:	4413      	add	r3, r2
  408ff2:	2267      	movs	r2, #103	; 0x67
  408ff4:	930d      	str	r3, [sp, #52]	; 0x34
  408ff6:	9211      	str	r2, [sp, #68]	; 0x44
  408ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408ffc:	e577      	b.n	408aee <_svfprintf_r+0x107a>
  408ffe:	3330      	adds	r3, #48	; 0x30
  409000:	2230      	movs	r2, #48	; 0x30
  409002:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  409006:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40900a:	ab20      	add	r3, sp, #128	; 0x80
  40900c:	e731      	b.n	408e72 <_svfprintf_r+0x13fe>
  40900e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409010:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409012:	189d      	adds	r5, r3, r2
  409014:	eb05 030b 	add.w	r3, r5, fp
  409018:	930d      	str	r3, [sp, #52]	; 0x34
  40901a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40901e:	e566      	b.n	408aee <_svfprintf_r+0x107a>
  409020:	9808      	ldr	r0, [sp, #32]
  409022:	4639      	mov	r1, r7
  409024:	2200      	movs	r2, #0
  409026:	2300      	movs	r3, #0
  409028:	f005 f9a4 	bl	40e374 <__aeabi_dcmpeq>
  40902c:	2800      	cmp	r0, #0
  40902e:	f47f ae7b 	bne.w	408d28 <_svfprintf_r+0x12b4>
  409032:	f1c5 0501 	rsb	r5, r5, #1
  409036:	951d      	str	r5, [sp, #116]	; 0x74
  409038:	442c      	add	r4, r5
  40903a:	e527      	b.n	408a8c <_svfprintf_r+0x1018>
  40903c:	4e32      	ldr	r6, [pc, #200]	; (409108 <_svfprintf_r+0x1694>)
  40903e:	4b33      	ldr	r3, [pc, #204]	; (40910c <_svfprintf_r+0x1698>)
  409040:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409044:	f7ff b82e 	b.w	4080a4 <_svfprintf_r+0x630>
  409048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40904a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40904c:	f1c3 0301 	rsb	r3, r3, #1
  409050:	441a      	add	r2, r3
  409052:	4613      	mov	r3, r2
  409054:	920d      	str	r2, [sp, #52]	; 0x34
  409056:	e778      	b.n	408f4a <_svfprintf_r+0x14d6>
  409058:	9b07      	ldr	r3, [sp, #28]
  40905a:	f013 0301 	ands.w	r3, r3, #1
  40905e:	f47f af11 	bne.w	408e84 <_svfprintf_r+0x1410>
  409062:	9313      	str	r3, [sp, #76]	; 0x4c
  409064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40906a:	e540      	b.n	408aee <_svfprintf_r+0x107a>
  40906c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40906e:	f898 3001 	ldrb.w	r3, [r8, #1]
  409072:	6805      	ldr	r5, [r0, #0]
  409074:	3004      	adds	r0, #4
  409076:	2d00      	cmp	r5, #0
  409078:	900e      	str	r0, [sp, #56]	; 0x38
  40907a:	46a0      	mov	r8, r4
  40907c:	f6be ad53 	bge.w	407b26 <_svfprintf_r+0xb2>
  409080:	f04f 35ff 	mov.w	r5, #4294967295
  409084:	f7fe bd4f 	b.w	407b26 <_svfprintf_r+0xb2>
  409088:	f1bb 0f00 	cmp.w	fp, #0
  40908c:	d102      	bne.n	409094 <_svfprintf_r+0x1620>
  40908e:	9b07      	ldr	r3, [sp, #28]
  409090:	07d8      	lsls	r0, r3, #31
  409092:	d507      	bpl.n	4090a4 <_svfprintf_r+0x1630>
  409094:	9b16      	ldr	r3, [sp, #88]	; 0x58
  409096:	1c5d      	adds	r5, r3, #1
  409098:	eb05 030b 	add.w	r3, r5, fp
  40909c:	930d      	str	r3, [sp, #52]	; 0x34
  40909e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4090a2:	e524      	b.n	408aee <_svfprintf_r+0x107a>
  4090a4:	2301      	movs	r3, #1
  4090a6:	930d      	str	r3, [sp, #52]	; 0x34
  4090a8:	e521      	b.n	408aee <_svfprintf_r+0x107a>
  4090aa:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090ae:	f7ff b921 	b.w	4082f4 <_svfprintf_r+0x880>
  4090b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4090b4:	230c      	movs	r3, #12
  4090b6:	6013      	str	r3, [r2, #0]
  4090b8:	f04f 30ff 	mov.w	r0, #4294967295
  4090bc:	f7fe bddc 	b.w	407c78 <_svfprintf_r+0x204>
  4090c0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090c4:	f7ff b8f9 	b.w	4082ba <_svfprintf_r+0x846>
  4090c8:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4090cc:	e6d1      	b.n	408e72 <_svfprintf_r+0x13fe>
  4090ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090d2:	f7fe bdd9 	b.w	407c88 <_svfprintf_r+0x214>
  4090d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090da:	f7ff b857 	b.w	40818c <_svfprintf_r+0x718>
  4090de:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090e2:	f7ff b825 	b.w	408130 <_svfprintf_r+0x6bc>
  4090e6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090ea:	f7ff b94c 	b.w	408386 <_svfprintf_r+0x912>
  4090ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090f2:	f7fe bff3 	b.w	4080dc <_svfprintf_r+0x668>
  4090f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4090fa:	f7fe bfa3 	b.w	408044 <_svfprintf_r+0x5d0>
  4090fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409102:	f7fe be33 	b.w	407d6c <_svfprintf_r+0x2f8>
  409106:	bf00      	nop
  409108:	0040ff18 	.word	0x0040ff18
  40910c:	0040ff14 	.word	0x0040ff14

00409110 <__sprint_r.part.0>:
  409110:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409116:	049c      	lsls	r4, r3, #18
  409118:	4692      	mov	sl, r2
  40911a:	d52c      	bpl.n	409176 <__sprint_r.part.0+0x66>
  40911c:	6893      	ldr	r3, [r2, #8]
  40911e:	6812      	ldr	r2, [r2, #0]
  409120:	b33b      	cbz	r3, 409172 <__sprint_r.part.0+0x62>
  409122:	460f      	mov	r7, r1
  409124:	4680      	mov	r8, r0
  409126:	f102 0908 	add.w	r9, r2, #8
  40912a:	e919 0060 	ldmdb	r9, {r5, r6}
  40912e:	08b6      	lsrs	r6, r6, #2
  409130:	d017      	beq.n	409162 <__sprint_r.part.0+0x52>
  409132:	3d04      	subs	r5, #4
  409134:	2400      	movs	r4, #0
  409136:	e001      	b.n	40913c <__sprint_r.part.0+0x2c>
  409138:	42a6      	cmp	r6, r4
  40913a:	d010      	beq.n	40915e <__sprint_r.part.0+0x4e>
  40913c:	463a      	mov	r2, r7
  40913e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409142:	4640      	mov	r0, r8
  409144:	f002 f92a 	bl	40b39c <_fputwc_r>
  409148:	1c43      	adds	r3, r0, #1
  40914a:	f104 0401 	add.w	r4, r4, #1
  40914e:	d1f3      	bne.n	409138 <__sprint_r.part.0+0x28>
  409150:	2300      	movs	r3, #0
  409152:	f8ca 3008 	str.w	r3, [sl, #8]
  409156:	f8ca 3004 	str.w	r3, [sl, #4]
  40915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40915e:	f8da 3008 	ldr.w	r3, [sl, #8]
  409162:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  409166:	f8ca 3008 	str.w	r3, [sl, #8]
  40916a:	f109 0908 	add.w	r9, r9, #8
  40916e:	2b00      	cmp	r3, #0
  409170:	d1db      	bne.n	40912a <__sprint_r.part.0+0x1a>
  409172:	2000      	movs	r0, #0
  409174:	e7ec      	b.n	409150 <__sprint_r.part.0+0x40>
  409176:	f002 fa59 	bl	40b62c <__sfvwrite_r>
  40917a:	2300      	movs	r3, #0
  40917c:	f8ca 3008 	str.w	r3, [sl, #8]
  409180:	f8ca 3004 	str.w	r3, [sl, #4]
  409184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00409188 <_vfiprintf_r>:
  409188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40918c:	b0ab      	sub	sp, #172	; 0xac
  40918e:	461c      	mov	r4, r3
  409190:	9100      	str	r1, [sp, #0]
  409192:	4690      	mov	r8, r2
  409194:	9304      	str	r3, [sp, #16]
  409196:	9005      	str	r0, [sp, #20]
  409198:	b118      	cbz	r0, 4091a2 <_vfiprintf_r+0x1a>
  40919a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40919c:	2b00      	cmp	r3, #0
  40919e:	f000 80de 	beq.w	40935e <_vfiprintf_r+0x1d6>
  4091a2:	9800      	ldr	r0, [sp, #0]
  4091a4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4091a8:	b28a      	uxth	r2, r1
  4091aa:	0495      	lsls	r5, r2, #18
  4091ac:	d407      	bmi.n	4091be <_vfiprintf_r+0x36>
  4091ae:	6e43      	ldr	r3, [r0, #100]	; 0x64
  4091b0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4091b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4091b8:	8182      	strh	r2, [r0, #12]
  4091ba:	6643      	str	r3, [r0, #100]	; 0x64
  4091bc:	b292      	uxth	r2, r2
  4091be:	0711      	lsls	r1, r2, #28
  4091c0:	f140 80b1 	bpl.w	409326 <_vfiprintf_r+0x19e>
  4091c4:	9b00      	ldr	r3, [sp, #0]
  4091c6:	691b      	ldr	r3, [r3, #16]
  4091c8:	2b00      	cmp	r3, #0
  4091ca:	f000 80ac 	beq.w	409326 <_vfiprintf_r+0x19e>
  4091ce:	f002 021a 	and.w	r2, r2, #26
  4091d2:	2a0a      	cmp	r2, #10
  4091d4:	f000 80b5 	beq.w	409342 <_vfiprintf_r+0x1ba>
  4091d8:	2300      	movs	r3, #0
  4091da:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  4091de:	9302      	str	r3, [sp, #8]
  4091e0:	930f      	str	r3, [sp, #60]	; 0x3c
  4091e2:	930e      	str	r3, [sp, #56]	; 0x38
  4091e4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4091e8:	46da      	mov	sl, fp
  4091ea:	f898 3000 	ldrb.w	r3, [r8]
  4091ee:	4644      	mov	r4, r8
  4091f0:	b1fb      	cbz	r3, 409232 <_vfiprintf_r+0xaa>
  4091f2:	2b25      	cmp	r3, #37	; 0x25
  4091f4:	d102      	bne.n	4091fc <_vfiprintf_r+0x74>
  4091f6:	e01c      	b.n	409232 <_vfiprintf_r+0xaa>
  4091f8:	2b25      	cmp	r3, #37	; 0x25
  4091fa:	d003      	beq.n	409204 <_vfiprintf_r+0x7c>
  4091fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  409200:	2b00      	cmp	r3, #0
  409202:	d1f9      	bne.n	4091f8 <_vfiprintf_r+0x70>
  409204:	ebc8 0504 	rsb	r5, r8, r4
  409208:	b19d      	cbz	r5, 409232 <_vfiprintf_r+0xaa>
  40920a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40920c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40920e:	f8ca 8000 	str.w	r8, [sl]
  409212:	3301      	adds	r3, #1
  409214:	442a      	add	r2, r5
  409216:	2b07      	cmp	r3, #7
  409218:	f8ca 5004 	str.w	r5, [sl, #4]
  40921c:	920f      	str	r2, [sp, #60]	; 0x3c
  40921e:	930e      	str	r3, [sp, #56]	; 0x38
  409220:	dd7b      	ble.n	40931a <_vfiprintf_r+0x192>
  409222:	2a00      	cmp	r2, #0
  409224:	f040 8528 	bne.w	409c78 <_vfiprintf_r+0xaf0>
  409228:	9b02      	ldr	r3, [sp, #8]
  40922a:	920e      	str	r2, [sp, #56]	; 0x38
  40922c:	442b      	add	r3, r5
  40922e:	46da      	mov	sl, fp
  409230:	9302      	str	r3, [sp, #8]
  409232:	7823      	ldrb	r3, [r4, #0]
  409234:	2b00      	cmp	r3, #0
  409236:	f000 843e 	beq.w	409ab6 <_vfiprintf_r+0x92e>
  40923a:	2100      	movs	r1, #0
  40923c:	f04f 0300 	mov.w	r3, #0
  409240:	f04f 32ff 	mov.w	r2, #4294967295
  409244:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409248:	f104 0801 	add.w	r8, r4, #1
  40924c:	7863      	ldrb	r3, [r4, #1]
  40924e:	9201      	str	r2, [sp, #4]
  409250:	4608      	mov	r0, r1
  409252:	460e      	mov	r6, r1
  409254:	460c      	mov	r4, r1
  409256:	f108 0801 	add.w	r8, r8, #1
  40925a:	f1a3 0220 	sub.w	r2, r3, #32
  40925e:	2a58      	cmp	r2, #88	; 0x58
  409260:	f200 8393 	bhi.w	40998a <_vfiprintf_r+0x802>
  409264:	e8df f012 	tbh	[pc, r2, lsl #1]
  409268:	03910346 	.word	0x03910346
  40926c:	034e0391 	.word	0x034e0391
  409270:	03910391 	.word	0x03910391
  409274:	03910391 	.word	0x03910391
  409278:	03910391 	.word	0x03910391
  40927c:	02670289 	.word	0x02670289
  409280:	00800391 	.word	0x00800391
  409284:	0391026c 	.word	0x0391026c
  409288:	025901c6 	.word	0x025901c6
  40928c:	02590259 	.word	0x02590259
  409290:	02590259 	.word	0x02590259
  409294:	02590259 	.word	0x02590259
  409298:	02590259 	.word	0x02590259
  40929c:	03910391 	.word	0x03910391
  4092a0:	03910391 	.word	0x03910391
  4092a4:	03910391 	.word	0x03910391
  4092a8:	03910391 	.word	0x03910391
  4092ac:	03910391 	.word	0x03910391
  4092b0:	039101cb 	.word	0x039101cb
  4092b4:	03910391 	.word	0x03910391
  4092b8:	03910391 	.word	0x03910391
  4092bc:	03910391 	.word	0x03910391
  4092c0:	03910391 	.word	0x03910391
  4092c4:	02140391 	.word	0x02140391
  4092c8:	03910391 	.word	0x03910391
  4092cc:	03910391 	.word	0x03910391
  4092d0:	02ee0391 	.word	0x02ee0391
  4092d4:	03910391 	.word	0x03910391
  4092d8:	03910311 	.word	0x03910311
  4092dc:	03910391 	.word	0x03910391
  4092e0:	03910391 	.word	0x03910391
  4092e4:	03910391 	.word	0x03910391
  4092e8:	03910391 	.word	0x03910391
  4092ec:	03340391 	.word	0x03340391
  4092f0:	0391038a 	.word	0x0391038a
  4092f4:	03910391 	.word	0x03910391
  4092f8:	038a0367 	.word	0x038a0367
  4092fc:	03910391 	.word	0x03910391
  409300:	0391036c 	.word	0x0391036c
  409304:	02950379 	.word	0x02950379
  409308:	02e90085 	.word	0x02e90085
  40930c:	029b0391 	.word	0x029b0391
  409310:	02ba0391 	.word	0x02ba0391
  409314:	03910391 	.word	0x03910391
  409318:	0353      	.short	0x0353
  40931a:	f10a 0a08 	add.w	sl, sl, #8
  40931e:	9b02      	ldr	r3, [sp, #8]
  409320:	442b      	add	r3, r5
  409322:	9302      	str	r3, [sp, #8]
  409324:	e785      	b.n	409232 <_vfiprintf_r+0xaa>
  409326:	9900      	ldr	r1, [sp, #0]
  409328:	9805      	ldr	r0, [sp, #20]
  40932a:	f000 fe61 	bl	409ff0 <__swsetup_r>
  40932e:	2800      	cmp	r0, #0
  409330:	f040 8558 	bne.w	409de4 <_vfiprintf_r+0xc5c>
  409334:	9b00      	ldr	r3, [sp, #0]
  409336:	899a      	ldrh	r2, [r3, #12]
  409338:	f002 021a 	and.w	r2, r2, #26
  40933c:	2a0a      	cmp	r2, #10
  40933e:	f47f af4b 	bne.w	4091d8 <_vfiprintf_r+0x50>
  409342:	9900      	ldr	r1, [sp, #0]
  409344:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  409348:	2b00      	cmp	r3, #0
  40934a:	f6ff af45 	blt.w	4091d8 <_vfiprintf_r+0x50>
  40934e:	4623      	mov	r3, r4
  409350:	4642      	mov	r2, r8
  409352:	9805      	ldr	r0, [sp, #20]
  409354:	f000 fe16 	bl	409f84 <__sbprintf>
  409358:	b02b      	add	sp, #172	; 0xac
  40935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40935e:	f001 ffb3 	bl	40b2c8 <__sinit>
  409362:	e71e      	b.n	4091a2 <_vfiprintf_r+0x1a>
  409364:	4264      	negs	r4, r4
  409366:	9304      	str	r3, [sp, #16]
  409368:	f046 0604 	orr.w	r6, r6, #4
  40936c:	f898 3000 	ldrb.w	r3, [r8]
  409370:	e771      	b.n	409256 <_vfiprintf_r+0xce>
  409372:	2130      	movs	r1, #48	; 0x30
  409374:	9804      	ldr	r0, [sp, #16]
  409376:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40937a:	9901      	ldr	r1, [sp, #4]
  40937c:	9406      	str	r4, [sp, #24]
  40937e:	f04f 0300 	mov.w	r3, #0
  409382:	2278      	movs	r2, #120	; 0x78
  409384:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409388:	2900      	cmp	r1, #0
  40938a:	4603      	mov	r3, r0
  40938c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  409390:	6804      	ldr	r4, [r0, #0]
  409392:	f103 0304 	add.w	r3, r3, #4
  409396:	f04f 0500 	mov.w	r5, #0
  40939a:	f046 0202 	orr.w	r2, r6, #2
  40939e:	f2c0 8525 	blt.w	409dec <_vfiprintf_r+0xc64>
  4093a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4093a6:	ea54 0205 	orrs.w	r2, r4, r5
  4093aa:	f046 0602 	orr.w	r6, r6, #2
  4093ae:	9304      	str	r3, [sp, #16]
  4093b0:	f040 84bf 	bne.w	409d32 <_vfiprintf_r+0xbaa>
  4093b4:	48b3      	ldr	r0, [pc, #716]	; (409684 <_vfiprintf_r+0x4fc>)
  4093b6:	9b01      	ldr	r3, [sp, #4]
  4093b8:	2b00      	cmp	r3, #0
  4093ba:	f040 841c 	bne.w	409bf6 <_vfiprintf_r+0xa6e>
  4093be:	4699      	mov	r9, r3
  4093c0:	2300      	movs	r3, #0
  4093c2:	9301      	str	r3, [sp, #4]
  4093c4:	9303      	str	r3, [sp, #12]
  4093c6:	465f      	mov	r7, fp
  4093c8:	9b01      	ldr	r3, [sp, #4]
  4093ca:	9a03      	ldr	r2, [sp, #12]
  4093cc:	4293      	cmp	r3, r2
  4093ce:	bfb8      	it	lt
  4093d0:	4613      	movlt	r3, r2
  4093d2:	461d      	mov	r5, r3
  4093d4:	f1b9 0f00 	cmp.w	r9, #0
  4093d8:	d000      	beq.n	4093dc <_vfiprintf_r+0x254>
  4093da:	3501      	adds	r5, #1
  4093dc:	f016 0302 	ands.w	r3, r6, #2
  4093e0:	9307      	str	r3, [sp, #28]
  4093e2:	bf18      	it	ne
  4093e4:	3502      	addne	r5, #2
  4093e6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  4093ea:	9308      	str	r3, [sp, #32]
  4093ec:	f040 82f1 	bne.w	4099d2 <_vfiprintf_r+0x84a>
  4093f0:	9b06      	ldr	r3, [sp, #24]
  4093f2:	1b5c      	subs	r4, r3, r5
  4093f4:	2c00      	cmp	r4, #0
  4093f6:	f340 82ec 	ble.w	4099d2 <_vfiprintf_r+0x84a>
  4093fa:	2c10      	cmp	r4, #16
  4093fc:	f340 8556 	ble.w	409eac <_vfiprintf_r+0xd24>
  409400:	f8df 9284 	ldr.w	r9, [pc, #644]	; 409688 <_vfiprintf_r+0x500>
  409404:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  409408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40940a:	46d4      	mov	ip, sl
  40940c:	2310      	movs	r3, #16
  40940e:	46c2      	mov	sl, r8
  409410:	4670      	mov	r0, lr
  409412:	46a8      	mov	r8, r5
  409414:	464d      	mov	r5, r9
  409416:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40941a:	e007      	b.n	40942c <_vfiprintf_r+0x2a4>
  40941c:	f100 0e02 	add.w	lr, r0, #2
  409420:	f10c 0c08 	add.w	ip, ip, #8
  409424:	4608      	mov	r0, r1
  409426:	3c10      	subs	r4, #16
  409428:	2c10      	cmp	r4, #16
  40942a:	dd13      	ble.n	409454 <_vfiprintf_r+0x2cc>
  40942c:	1c41      	adds	r1, r0, #1
  40942e:	3210      	adds	r2, #16
  409430:	2907      	cmp	r1, #7
  409432:	920f      	str	r2, [sp, #60]	; 0x3c
  409434:	f8cc 5000 	str.w	r5, [ip]
  409438:	f8cc 3004 	str.w	r3, [ip, #4]
  40943c:	910e      	str	r1, [sp, #56]	; 0x38
  40943e:	dded      	ble.n	40941c <_vfiprintf_r+0x294>
  409440:	2a00      	cmp	r2, #0
  409442:	f040 82b7 	bne.w	4099b4 <_vfiprintf_r+0x82c>
  409446:	3c10      	subs	r4, #16
  409448:	2c10      	cmp	r4, #16
  40944a:	4610      	mov	r0, r2
  40944c:	f04f 0e01 	mov.w	lr, #1
  409450:	46dc      	mov	ip, fp
  409452:	dceb      	bgt.n	40942c <_vfiprintf_r+0x2a4>
  409454:	46a9      	mov	r9, r5
  409456:	4670      	mov	r0, lr
  409458:	4645      	mov	r5, r8
  40945a:	46d0      	mov	r8, sl
  40945c:	46e2      	mov	sl, ip
  40945e:	4422      	add	r2, r4
  409460:	2807      	cmp	r0, #7
  409462:	920f      	str	r2, [sp, #60]	; 0x3c
  409464:	f8ca 9000 	str.w	r9, [sl]
  409468:	f8ca 4004 	str.w	r4, [sl, #4]
  40946c:	900e      	str	r0, [sp, #56]	; 0x38
  40946e:	f300 8375 	bgt.w	409b5c <_vfiprintf_r+0x9d4>
  409472:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409476:	f10a 0a08 	add.w	sl, sl, #8
  40947a:	f100 0e01 	add.w	lr, r0, #1
  40947e:	2b00      	cmp	r3, #0
  409480:	f040 82b0 	bne.w	4099e4 <_vfiprintf_r+0x85c>
  409484:	9b07      	ldr	r3, [sp, #28]
  409486:	2b00      	cmp	r3, #0
  409488:	f000 82c3 	beq.w	409a12 <_vfiprintf_r+0x88a>
  40948c:	3202      	adds	r2, #2
  40948e:	a90c      	add	r1, sp, #48	; 0x30
  409490:	2302      	movs	r3, #2
  409492:	f1be 0f07 	cmp.w	lr, #7
  409496:	920f      	str	r2, [sp, #60]	; 0x3c
  409498:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40949c:	e88a 000a 	stmia.w	sl, {r1, r3}
  4094a0:	f340 8378 	ble.w	409b94 <_vfiprintf_r+0xa0c>
  4094a4:	2a00      	cmp	r2, #0
  4094a6:	f040 840a 	bne.w	409cbe <_vfiprintf_r+0xb36>
  4094aa:	9b08      	ldr	r3, [sp, #32]
  4094ac:	2b80      	cmp	r3, #128	; 0x80
  4094ae:	f04f 0e01 	mov.w	lr, #1
  4094b2:	4610      	mov	r0, r2
  4094b4:	46da      	mov	sl, fp
  4094b6:	f040 82b0 	bne.w	409a1a <_vfiprintf_r+0x892>
  4094ba:	9b06      	ldr	r3, [sp, #24]
  4094bc:	1b5c      	subs	r4, r3, r5
  4094be:	2c00      	cmp	r4, #0
  4094c0:	f340 82ab 	ble.w	409a1a <_vfiprintf_r+0x892>
  4094c4:	2c10      	cmp	r4, #16
  4094c6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 40968c <_vfiprintf_r+0x504>
  4094ca:	f340 850b 	ble.w	409ee4 <_vfiprintf_r+0xd5c>
  4094ce:	46d6      	mov	lr, sl
  4094d0:	2310      	movs	r3, #16
  4094d2:	46c2      	mov	sl, r8
  4094d4:	46a8      	mov	r8, r5
  4094d6:	464d      	mov	r5, r9
  4094d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4094dc:	e007      	b.n	4094ee <_vfiprintf_r+0x366>
  4094de:	f100 0c02 	add.w	ip, r0, #2
  4094e2:	f10e 0e08 	add.w	lr, lr, #8
  4094e6:	4608      	mov	r0, r1
  4094e8:	3c10      	subs	r4, #16
  4094ea:	2c10      	cmp	r4, #16
  4094ec:	dd13      	ble.n	409516 <_vfiprintf_r+0x38e>
  4094ee:	1c41      	adds	r1, r0, #1
  4094f0:	3210      	adds	r2, #16
  4094f2:	2907      	cmp	r1, #7
  4094f4:	920f      	str	r2, [sp, #60]	; 0x3c
  4094f6:	f8ce 5000 	str.w	r5, [lr]
  4094fa:	f8ce 3004 	str.w	r3, [lr, #4]
  4094fe:	910e      	str	r1, [sp, #56]	; 0x38
  409500:	dded      	ble.n	4094de <_vfiprintf_r+0x356>
  409502:	2a00      	cmp	r2, #0
  409504:	f040 8315 	bne.w	409b32 <_vfiprintf_r+0x9aa>
  409508:	3c10      	subs	r4, #16
  40950a:	2c10      	cmp	r4, #16
  40950c:	f04f 0c01 	mov.w	ip, #1
  409510:	4610      	mov	r0, r2
  409512:	46de      	mov	lr, fp
  409514:	dceb      	bgt.n	4094ee <_vfiprintf_r+0x366>
  409516:	46a9      	mov	r9, r5
  409518:	4645      	mov	r5, r8
  40951a:	46d0      	mov	r8, sl
  40951c:	46f2      	mov	sl, lr
  40951e:	4422      	add	r2, r4
  409520:	f1bc 0f07 	cmp.w	ip, #7
  409524:	920f      	str	r2, [sp, #60]	; 0x3c
  409526:	f8ca 9000 	str.w	r9, [sl]
  40952a:	f8ca 4004 	str.w	r4, [sl, #4]
  40952e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  409532:	f300 83d2 	bgt.w	409cda <_vfiprintf_r+0xb52>
  409536:	9b01      	ldr	r3, [sp, #4]
  409538:	9903      	ldr	r1, [sp, #12]
  40953a:	1a5c      	subs	r4, r3, r1
  40953c:	2c00      	cmp	r4, #0
  40953e:	f10a 0a08 	add.w	sl, sl, #8
  409542:	f10c 0e01 	add.w	lr, ip, #1
  409546:	4660      	mov	r0, ip
  409548:	f300 826d 	bgt.w	409a26 <_vfiprintf_r+0x89e>
  40954c:	9903      	ldr	r1, [sp, #12]
  40954e:	f8ca 7000 	str.w	r7, [sl]
  409552:	440a      	add	r2, r1
  409554:	f1be 0f07 	cmp.w	lr, #7
  409558:	920f      	str	r2, [sp, #60]	; 0x3c
  40955a:	f8ca 1004 	str.w	r1, [sl, #4]
  40955e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409562:	f340 82ce 	ble.w	409b02 <_vfiprintf_r+0x97a>
  409566:	2a00      	cmp	r2, #0
  409568:	f040 833a 	bne.w	409be0 <_vfiprintf_r+0xa58>
  40956c:	0770      	lsls	r0, r6, #29
  40956e:	920e      	str	r2, [sp, #56]	; 0x38
  409570:	d538      	bpl.n	4095e4 <_vfiprintf_r+0x45c>
  409572:	9b06      	ldr	r3, [sp, #24]
  409574:	1b5c      	subs	r4, r3, r5
  409576:	2c00      	cmp	r4, #0
  409578:	dd34      	ble.n	4095e4 <_vfiprintf_r+0x45c>
  40957a:	46da      	mov	sl, fp
  40957c:	2c10      	cmp	r4, #16
  40957e:	f340 84ab 	ble.w	409ed8 <_vfiprintf_r+0xd50>
  409582:	f8df 9104 	ldr.w	r9, [pc, #260]	; 409688 <_vfiprintf_r+0x500>
  409586:	990e      	ldr	r1, [sp, #56]	; 0x38
  409588:	464f      	mov	r7, r9
  40958a:	2610      	movs	r6, #16
  40958c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409590:	e006      	b.n	4095a0 <_vfiprintf_r+0x418>
  409592:	1c88      	adds	r0, r1, #2
  409594:	f10a 0a08 	add.w	sl, sl, #8
  409598:	4619      	mov	r1, r3
  40959a:	3c10      	subs	r4, #16
  40959c:	2c10      	cmp	r4, #16
  40959e:	dd13      	ble.n	4095c8 <_vfiprintf_r+0x440>
  4095a0:	1c4b      	adds	r3, r1, #1
  4095a2:	3210      	adds	r2, #16
  4095a4:	2b07      	cmp	r3, #7
  4095a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4095a8:	f8ca 7000 	str.w	r7, [sl]
  4095ac:	f8ca 6004 	str.w	r6, [sl, #4]
  4095b0:	930e      	str	r3, [sp, #56]	; 0x38
  4095b2:	ddee      	ble.n	409592 <_vfiprintf_r+0x40a>
  4095b4:	2a00      	cmp	r2, #0
  4095b6:	f040 828e 	bne.w	409ad6 <_vfiprintf_r+0x94e>
  4095ba:	3c10      	subs	r4, #16
  4095bc:	2c10      	cmp	r4, #16
  4095be:	f04f 0001 	mov.w	r0, #1
  4095c2:	4611      	mov	r1, r2
  4095c4:	46da      	mov	sl, fp
  4095c6:	dceb      	bgt.n	4095a0 <_vfiprintf_r+0x418>
  4095c8:	46b9      	mov	r9, r7
  4095ca:	4422      	add	r2, r4
  4095cc:	2807      	cmp	r0, #7
  4095ce:	920f      	str	r2, [sp, #60]	; 0x3c
  4095d0:	f8ca 9000 	str.w	r9, [sl]
  4095d4:	f8ca 4004 	str.w	r4, [sl, #4]
  4095d8:	900e      	str	r0, [sp, #56]	; 0x38
  4095da:	f340 829b 	ble.w	409b14 <_vfiprintf_r+0x98c>
  4095de:	2a00      	cmp	r2, #0
  4095e0:	f040 8425 	bne.w	409e2e <_vfiprintf_r+0xca6>
  4095e4:	9b02      	ldr	r3, [sp, #8]
  4095e6:	9a06      	ldr	r2, [sp, #24]
  4095e8:	42aa      	cmp	r2, r5
  4095ea:	bfac      	ite	ge
  4095ec:	189b      	addge	r3, r3, r2
  4095ee:	195b      	addlt	r3, r3, r5
  4095f0:	9302      	str	r3, [sp, #8]
  4095f2:	e299      	b.n	409b28 <_vfiprintf_r+0x9a0>
  4095f4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4095f8:	f898 3000 	ldrb.w	r3, [r8]
  4095fc:	e62b      	b.n	409256 <_vfiprintf_r+0xce>
  4095fe:	9406      	str	r4, [sp, #24]
  409600:	2900      	cmp	r1, #0
  409602:	f040 84af 	bne.w	409f64 <_vfiprintf_r+0xddc>
  409606:	f046 0610 	orr.w	r6, r6, #16
  40960a:	06b3      	lsls	r3, r6, #26
  40960c:	f140 8312 	bpl.w	409c34 <_vfiprintf_r+0xaac>
  409610:	9904      	ldr	r1, [sp, #16]
  409612:	3107      	adds	r1, #7
  409614:	f021 0107 	bic.w	r1, r1, #7
  409618:	e9d1 2300 	ldrd	r2, r3, [r1]
  40961c:	3108      	adds	r1, #8
  40961e:	9104      	str	r1, [sp, #16]
  409620:	4614      	mov	r4, r2
  409622:	461d      	mov	r5, r3
  409624:	2a00      	cmp	r2, #0
  409626:	f173 0300 	sbcs.w	r3, r3, #0
  40962a:	f2c0 8386 	blt.w	409d3a <_vfiprintf_r+0xbb2>
  40962e:	9b01      	ldr	r3, [sp, #4]
  409630:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409634:	2b00      	cmp	r3, #0
  409636:	f2c0 831a 	blt.w	409c6e <_vfiprintf_r+0xae6>
  40963a:	ea54 0305 	orrs.w	r3, r4, r5
  40963e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409642:	f000 80ed 	beq.w	409820 <_vfiprintf_r+0x698>
  409646:	2d00      	cmp	r5, #0
  409648:	bf08      	it	eq
  40964a:	2c0a      	cmpeq	r4, #10
  40964c:	f0c0 80ed 	bcc.w	40982a <_vfiprintf_r+0x6a2>
  409650:	465f      	mov	r7, fp
  409652:	4620      	mov	r0, r4
  409654:	4629      	mov	r1, r5
  409656:	220a      	movs	r2, #10
  409658:	2300      	movs	r3, #0
  40965a:	f004 ff6b 	bl	40e534 <__aeabi_uldivmod>
  40965e:	3230      	adds	r2, #48	; 0x30
  409660:	f807 2d01 	strb.w	r2, [r7, #-1]!
  409664:	4620      	mov	r0, r4
  409666:	4629      	mov	r1, r5
  409668:	2300      	movs	r3, #0
  40966a:	220a      	movs	r2, #10
  40966c:	f004 ff62 	bl	40e534 <__aeabi_uldivmod>
  409670:	4604      	mov	r4, r0
  409672:	460d      	mov	r5, r1
  409674:	ea54 0305 	orrs.w	r3, r4, r5
  409678:	d1eb      	bne.n	409652 <_vfiprintf_r+0x4ca>
  40967a:	ebc7 030b 	rsb	r3, r7, fp
  40967e:	9303      	str	r3, [sp, #12]
  409680:	e6a2      	b.n	4093c8 <_vfiprintf_r+0x240>
  409682:	bf00      	nop
  409684:	0040ff30 	.word	0x0040ff30
  409688:	0040ff70 	.word	0x0040ff70
  40968c:	0040ff60 	.word	0x0040ff60
  409690:	9406      	str	r4, [sp, #24]
  409692:	2900      	cmp	r1, #0
  409694:	f040 8462 	bne.w	409f5c <_vfiprintf_r+0xdd4>
  409698:	f046 0610 	orr.w	r6, r6, #16
  40969c:	f016 0320 	ands.w	r3, r6, #32
  4096a0:	f000 82ae 	beq.w	409c00 <_vfiprintf_r+0xa78>
  4096a4:	9b04      	ldr	r3, [sp, #16]
  4096a6:	3307      	adds	r3, #7
  4096a8:	f023 0307 	bic.w	r3, r3, #7
  4096ac:	f04f 0200 	mov.w	r2, #0
  4096b0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4096b4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4096b8:	f103 0208 	add.w	r2, r3, #8
  4096bc:	9b01      	ldr	r3, [sp, #4]
  4096be:	9204      	str	r2, [sp, #16]
  4096c0:	2b00      	cmp	r3, #0
  4096c2:	f2c0 8174 	blt.w	4099ae <_vfiprintf_r+0x826>
  4096c6:	ea54 0305 	orrs.w	r3, r4, r5
  4096ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4096ce:	f040 816e 	bne.w	4099ae <_vfiprintf_r+0x826>
  4096d2:	9b01      	ldr	r3, [sp, #4]
  4096d4:	2b00      	cmp	r3, #0
  4096d6:	f000 8430 	beq.w	409f3a <_vfiprintf_r+0xdb2>
  4096da:	f04f 0900 	mov.w	r9, #0
  4096de:	2400      	movs	r4, #0
  4096e0:	2500      	movs	r5, #0
  4096e2:	465f      	mov	r7, fp
  4096e4:	08e2      	lsrs	r2, r4, #3
  4096e6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4096ea:	08e9      	lsrs	r1, r5, #3
  4096ec:	f004 0307 	and.w	r3, r4, #7
  4096f0:	460d      	mov	r5, r1
  4096f2:	4614      	mov	r4, r2
  4096f4:	3330      	adds	r3, #48	; 0x30
  4096f6:	ea54 0205 	orrs.w	r2, r4, r5
  4096fa:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4096fe:	d1f1      	bne.n	4096e4 <_vfiprintf_r+0x55c>
  409700:	07f4      	lsls	r4, r6, #31
  409702:	d5ba      	bpl.n	40967a <_vfiprintf_r+0x4f2>
  409704:	2b30      	cmp	r3, #48	; 0x30
  409706:	d0b8      	beq.n	40967a <_vfiprintf_r+0x4f2>
  409708:	2230      	movs	r2, #48	; 0x30
  40970a:	1e7b      	subs	r3, r7, #1
  40970c:	f807 2c01 	strb.w	r2, [r7, #-1]
  409710:	ebc3 020b 	rsb	r2, r3, fp
  409714:	9203      	str	r2, [sp, #12]
  409716:	461f      	mov	r7, r3
  409718:	e656      	b.n	4093c8 <_vfiprintf_r+0x240>
  40971a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40971e:	2400      	movs	r4, #0
  409720:	f818 3b01 	ldrb.w	r3, [r8], #1
  409724:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409728:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  40972c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409730:	2a09      	cmp	r2, #9
  409732:	d9f5      	bls.n	409720 <_vfiprintf_r+0x598>
  409734:	e591      	b.n	40925a <_vfiprintf_r+0xd2>
  409736:	f898 3000 	ldrb.w	r3, [r8]
  40973a:	2101      	movs	r1, #1
  40973c:	202b      	movs	r0, #43	; 0x2b
  40973e:	e58a      	b.n	409256 <_vfiprintf_r+0xce>
  409740:	f898 3000 	ldrb.w	r3, [r8]
  409744:	2b2a      	cmp	r3, #42	; 0x2a
  409746:	f108 0501 	add.w	r5, r8, #1
  40974a:	f000 83dd 	beq.w	409f08 <_vfiprintf_r+0xd80>
  40974e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409752:	2a09      	cmp	r2, #9
  409754:	46a8      	mov	r8, r5
  409756:	bf98      	it	ls
  409758:	2500      	movls	r5, #0
  40975a:	f200 83ce 	bhi.w	409efa <_vfiprintf_r+0xd72>
  40975e:	f818 3b01 	ldrb.w	r3, [r8], #1
  409762:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  409766:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40976a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40976e:	2a09      	cmp	r2, #9
  409770:	d9f5      	bls.n	40975e <_vfiprintf_r+0x5d6>
  409772:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  409776:	9201      	str	r2, [sp, #4]
  409778:	e56f      	b.n	40925a <_vfiprintf_r+0xd2>
  40977a:	9a04      	ldr	r2, [sp, #16]
  40977c:	6814      	ldr	r4, [r2, #0]
  40977e:	4613      	mov	r3, r2
  409780:	2c00      	cmp	r4, #0
  409782:	f103 0304 	add.w	r3, r3, #4
  409786:	f6ff aded 	blt.w	409364 <_vfiprintf_r+0x1dc>
  40978a:	9304      	str	r3, [sp, #16]
  40978c:	f898 3000 	ldrb.w	r3, [r8]
  409790:	e561      	b.n	409256 <_vfiprintf_r+0xce>
  409792:	9406      	str	r4, [sp, #24]
  409794:	2900      	cmp	r1, #0
  409796:	d081      	beq.n	40969c <_vfiprintf_r+0x514>
  409798:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40979c:	e77e      	b.n	40969c <_vfiprintf_r+0x514>
  40979e:	9a04      	ldr	r2, [sp, #16]
  4097a0:	9406      	str	r4, [sp, #24]
  4097a2:	6817      	ldr	r7, [r2, #0]
  4097a4:	f04f 0300 	mov.w	r3, #0
  4097a8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4097ac:	1d14      	adds	r4, r2, #4
  4097ae:	9b01      	ldr	r3, [sp, #4]
  4097b0:	2f00      	cmp	r7, #0
  4097b2:	f000 8386 	beq.w	409ec2 <_vfiprintf_r+0xd3a>
  4097b6:	2b00      	cmp	r3, #0
  4097b8:	f2c0 835f 	blt.w	409e7a <_vfiprintf_r+0xcf2>
  4097bc:	461a      	mov	r2, r3
  4097be:	2100      	movs	r1, #0
  4097c0:	4638      	mov	r0, r7
  4097c2:	f002 ffd5 	bl	40c770 <memchr>
  4097c6:	2800      	cmp	r0, #0
  4097c8:	f000 838f 	beq.w	409eea <_vfiprintf_r+0xd62>
  4097cc:	1bc3      	subs	r3, r0, r7
  4097ce:	9303      	str	r3, [sp, #12]
  4097d0:	2300      	movs	r3, #0
  4097d2:	9404      	str	r4, [sp, #16]
  4097d4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4097d8:	9301      	str	r3, [sp, #4]
  4097da:	e5f5      	b.n	4093c8 <_vfiprintf_r+0x240>
  4097dc:	9406      	str	r4, [sp, #24]
  4097de:	2900      	cmp	r1, #0
  4097e0:	f040 83b9 	bne.w	409f56 <_vfiprintf_r+0xdce>
  4097e4:	f016 0920 	ands.w	r9, r6, #32
  4097e8:	d135      	bne.n	409856 <_vfiprintf_r+0x6ce>
  4097ea:	f016 0310 	ands.w	r3, r6, #16
  4097ee:	d103      	bne.n	4097f8 <_vfiprintf_r+0x670>
  4097f0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4097f4:	f040 832a 	bne.w	409e4c <_vfiprintf_r+0xcc4>
  4097f8:	9a04      	ldr	r2, [sp, #16]
  4097fa:	4613      	mov	r3, r2
  4097fc:	6814      	ldr	r4, [r2, #0]
  4097fe:	9a01      	ldr	r2, [sp, #4]
  409800:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409804:	2a00      	cmp	r2, #0
  409806:	f103 0304 	add.w	r3, r3, #4
  40980a:	f04f 0500 	mov.w	r5, #0
  40980e:	f2c0 8332 	blt.w	409e76 <_vfiprintf_r+0xcee>
  409812:	ea54 0205 	orrs.w	r2, r4, r5
  409816:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40981a:	9304      	str	r3, [sp, #16]
  40981c:	f47f af13 	bne.w	409646 <_vfiprintf_r+0x4be>
  409820:	9b01      	ldr	r3, [sp, #4]
  409822:	2b00      	cmp	r3, #0
  409824:	f43f adcc 	beq.w	4093c0 <_vfiprintf_r+0x238>
  409828:	2400      	movs	r4, #0
  40982a:	af2a      	add	r7, sp, #168	; 0xa8
  40982c:	3430      	adds	r4, #48	; 0x30
  40982e:	f807 4d41 	strb.w	r4, [r7, #-65]!
  409832:	ebc7 030b 	rsb	r3, r7, fp
  409836:	9303      	str	r3, [sp, #12]
  409838:	e5c6      	b.n	4093c8 <_vfiprintf_r+0x240>
  40983a:	f046 0620 	orr.w	r6, r6, #32
  40983e:	f898 3000 	ldrb.w	r3, [r8]
  409842:	e508      	b.n	409256 <_vfiprintf_r+0xce>
  409844:	9406      	str	r4, [sp, #24]
  409846:	2900      	cmp	r1, #0
  409848:	f040 836e 	bne.w	409f28 <_vfiprintf_r+0xda0>
  40984c:	f046 0610 	orr.w	r6, r6, #16
  409850:	f016 0920 	ands.w	r9, r6, #32
  409854:	d0c9      	beq.n	4097ea <_vfiprintf_r+0x662>
  409856:	9b04      	ldr	r3, [sp, #16]
  409858:	3307      	adds	r3, #7
  40985a:	f023 0307 	bic.w	r3, r3, #7
  40985e:	f04f 0200 	mov.w	r2, #0
  409862:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409866:	e9d3 4500 	ldrd	r4, r5, [r3]
  40986a:	f103 0208 	add.w	r2, r3, #8
  40986e:	9b01      	ldr	r3, [sp, #4]
  409870:	9204      	str	r2, [sp, #16]
  409872:	2b00      	cmp	r3, #0
  409874:	f2c0 81f9 	blt.w	409c6a <_vfiprintf_r+0xae2>
  409878:	ea54 0305 	orrs.w	r3, r4, r5
  40987c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409880:	f04f 0900 	mov.w	r9, #0
  409884:	f47f aedf 	bne.w	409646 <_vfiprintf_r+0x4be>
  409888:	e7ca      	b.n	409820 <_vfiprintf_r+0x698>
  40988a:	9406      	str	r4, [sp, #24]
  40988c:	2900      	cmp	r1, #0
  40988e:	f040 8351 	bne.w	409f34 <_vfiprintf_r+0xdac>
  409892:	06b2      	lsls	r2, r6, #26
  409894:	48ae      	ldr	r0, [pc, #696]	; (409b50 <_vfiprintf_r+0x9c8>)
  409896:	d541      	bpl.n	40991c <_vfiprintf_r+0x794>
  409898:	9a04      	ldr	r2, [sp, #16]
  40989a:	3207      	adds	r2, #7
  40989c:	f022 0207 	bic.w	r2, r2, #7
  4098a0:	e9d2 4500 	ldrd	r4, r5, [r2]
  4098a4:	f102 0108 	add.w	r1, r2, #8
  4098a8:	9104      	str	r1, [sp, #16]
  4098aa:	f016 0901 	ands.w	r9, r6, #1
  4098ae:	f000 8177 	beq.w	409ba0 <_vfiprintf_r+0xa18>
  4098b2:	ea54 0205 	orrs.w	r2, r4, r5
  4098b6:	f040 8226 	bne.w	409d06 <_vfiprintf_r+0xb7e>
  4098ba:	f04f 0300 	mov.w	r3, #0
  4098be:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4098c2:	9b01      	ldr	r3, [sp, #4]
  4098c4:	2b00      	cmp	r3, #0
  4098c6:	f2c0 8196 	blt.w	409bf6 <_vfiprintf_r+0xa6e>
  4098ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4098ce:	e572      	b.n	4093b6 <_vfiprintf_r+0x22e>
  4098d0:	9a04      	ldr	r2, [sp, #16]
  4098d2:	9406      	str	r4, [sp, #24]
  4098d4:	6813      	ldr	r3, [r2, #0]
  4098d6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4098da:	4613      	mov	r3, r2
  4098dc:	f04f 0100 	mov.w	r1, #0
  4098e0:	2501      	movs	r5, #1
  4098e2:	3304      	adds	r3, #4
  4098e4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4098e8:	9304      	str	r3, [sp, #16]
  4098ea:	9503      	str	r5, [sp, #12]
  4098ec:	af10      	add	r7, sp, #64	; 0x40
  4098ee:	2300      	movs	r3, #0
  4098f0:	9301      	str	r3, [sp, #4]
  4098f2:	e573      	b.n	4093dc <_vfiprintf_r+0x254>
  4098f4:	f898 3000 	ldrb.w	r3, [r8]
  4098f8:	2800      	cmp	r0, #0
  4098fa:	f47f acac 	bne.w	409256 <_vfiprintf_r+0xce>
  4098fe:	2101      	movs	r1, #1
  409900:	2020      	movs	r0, #32
  409902:	e4a8      	b.n	409256 <_vfiprintf_r+0xce>
  409904:	f046 0601 	orr.w	r6, r6, #1
  409908:	f898 3000 	ldrb.w	r3, [r8]
  40990c:	e4a3      	b.n	409256 <_vfiprintf_r+0xce>
  40990e:	9406      	str	r4, [sp, #24]
  409910:	2900      	cmp	r1, #0
  409912:	f040 830c 	bne.w	409f2e <_vfiprintf_r+0xda6>
  409916:	06b2      	lsls	r2, r6, #26
  409918:	488e      	ldr	r0, [pc, #568]	; (409b54 <_vfiprintf_r+0x9cc>)
  40991a:	d4bd      	bmi.n	409898 <_vfiprintf_r+0x710>
  40991c:	9904      	ldr	r1, [sp, #16]
  40991e:	06f7      	lsls	r7, r6, #27
  409920:	460a      	mov	r2, r1
  409922:	f100 819d 	bmi.w	409c60 <_vfiprintf_r+0xad8>
  409926:	0675      	lsls	r5, r6, #25
  409928:	f140 819a 	bpl.w	409c60 <_vfiprintf_r+0xad8>
  40992c:	3204      	adds	r2, #4
  40992e:	880c      	ldrh	r4, [r1, #0]
  409930:	9204      	str	r2, [sp, #16]
  409932:	2500      	movs	r5, #0
  409934:	e7b9      	b.n	4098aa <_vfiprintf_r+0x722>
  409936:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40993a:	f898 3000 	ldrb.w	r3, [r8]
  40993e:	e48a      	b.n	409256 <_vfiprintf_r+0xce>
  409940:	f898 3000 	ldrb.w	r3, [r8]
  409944:	2b6c      	cmp	r3, #108	; 0x6c
  409946:	bf03      	ittte	eq
  409948:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40994c:	f046 0620 	orreq.w	r6, r6, #32
  409950:	f108 0801 	addeq.w	r8, r8, #1
  409954:	f046 0610 	orrne.w	r6, r6, #16
  409958:	e47d      	b.n	409256 <_vfiprintf_r+0xce>
  40995a:	2900      	cmp	r1, #0
  40995c:	f040 8309 	bne.w	409f72 <_vfiprintf_r+0xdea>
  409960:	06b4      	lsls	r4, r6, #26
  409962:	f140 821c 	bpl.w	409d9e <_vfiprintf_r+0xc16>
  409966:	9a04      	ldr	r2, [sp, #16]
  409968:	9902      	ldr	r1, [sp, #8]
  40996a:	6813      	ldr	r3, [r2, #0]
  40996c:	17cd      	asrs	r5, r1, #31
  40996e:	4608      	mov	r0, r1
  409970:	3204      	adds	r2, #4
  409972:	4629      	mov	r1, r5
  409974:	9204      	str	r2, [sp, #16]
  409976:	e9c3 0100 	strd	r0, r1, [r3]
  40997a:	e436      	b.n	4091ea <_vfiprintf_r+0x62>
  40997c:	9406      	str	r4, [sp, #24]
  40997e:	2900      	cmp	r1, #0
  409980:	f43f ae43 	beq.w	40960a <_vfiprintf_r+0x482>
  409984:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409988:	e63f      	b.n	40960a <_vfiprintf_r+0x482>
  40998a:	9406      	str	r4, [sp, #24]
  40998c:	2900      	cmp	r1, #0
  40998e:	f040 82ed 	bne.w	409f6c <_vfiprintf_r+0xde4>
  409992:	2b00      	cmp	r3, #0
  409994:	f000 808f 	beq.w	409ab6 <_vfiprintf_r+0x92e>
  409998:	2501      	movs	r5, #1
  40999a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40999e:	f04f 0300 	mov.w	r3, #0
  4099a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4099a6:	9503      	str	r5, [sp, #12]
  4099a8:	af10      	add	r7, sp, #64	; 0x40
  4099aa:	e7a0      	b.n	4098ee <_vfiprintf_r+0x766>
  4099ac:	9304      	str	r3, [sp, #16]
  4099ae:	f04f 0900 	mov.w	r9, #0
  4099b2:	e696      	b.n	4096e2 <_vfiprintf_r+0x55a>
  4099b4:	aa0d      	add	r2, sp, #52	; 0x34
  4099b6:	9900      	ldr	r1, [sp, #0]
  4099b8:	9309      	str	r3, [sp, #36]	; 0x24
  4099ba:	4648      	mov	r0, r9
  4099bc:	f7ff fba8 	bl	409110 <__sprint_r.part.0>
  4099c0:	2800      	cmp	r0, #0
  4099c2:	d17f      	bne.n	409ac4 <_vfiprintf_r+0x93c>
  4099c4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4099c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4099c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4099ca:	f100 0e01 	add.w	lr, r0, #1
  4099ce:	46dc      	mov	ip, fp
  4099d0:	e529      	b.n	409426 <_vfiprintf_r+0x29e>
  4099d2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4099d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4099d6:	f100 0e01 	add.w	lr, r0, #1
  4099da:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4099de:	2b00      	cmp	r3, #0
  4099e0:	f43f ad50 	beq.w	409484 <_vfiprintf_r+0x2fc>
  4099e4:	3201      	adds	r2, #1
  4099e6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4099ea:	2301      	movs	r3, #1
  4099ec:	f1be 0f07 	cmp.w	lr, #7
  4099f0:	920f      	str	r2, [sp, #60]	; 0x3c
  4099f2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4099f6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4099fa:	f340 80bf 	ble.w	409b7c <_vfiprintf_r+0x9f4>
  4099fe:	2a00      	cmp	r2, #0
  409a00:	f040 814e 	bne.w	409ca0 <_vfiprintf_r+0xb18>
  409a04:	9907      	ldr	r1, [sp, #28]
  409a06:	2900      	cmp	r1, #0
  409a08:	f040 80be 	bne.w	409b88 <_vfiprintf_r+0xa00>
  409a0c:	469e      	mov	lr, r3
  409a0e:	4610      	mov	r0, r2
  409a10:	46da      	mov	sl, fp
  409a12:	9b08      	ldr	r3, [sp, #32]
  409a14:	2b80      	cmp	r3, #128	; 0x80
  409a16:	f43f ad50 	beq.w	4094ba <_vfiprintf_r+0x332>
  409a1a:	9b01      	ldr	r3, [sp, #4]
  409a1c:	9903      	ldr	r1, [sp, #12]
  409a1e:	1a5c      	subs	r4, r3, r1
  409a20:	2c00      	cmp	r4, #0
  409a22:	f77f ad93 	ble.w	40954c <_vfiprintf_r+0x3c4>
  409a26:	2c10      	cmp	r4, #16
  409a28:	f8df 912c 	ldr.w	r9, [pc, #300]	; 409b58 <_vfiprintf_r+0x9d0>
  409a2c:	dd25      	ble.n	409a7a <_vfiprintf_r+0x8f2>
  409a2e:	46d4      	mov	ip, sl
  409a30:	2310      	movs	r3, #16
  409a32:	46c2      	mov	sl, r8
  409a34:	46a8      	mov	r8, r5
  409a36:	464d      	mov	r5, r9
  409a38:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409a3c:	e007      	b.n	409a4e <_vfiprintf_r+0x8c6>
  409a3e:	f100 0e02 	add.w	lr, r0, #2
  409a42:	f10c 0c08 	add.w	ip, ip, #8
  409a46:	4608      	mov	r0, r1
  409a48:	3c10      	subs	r4, #16
  409a4a:	2c10      	cmp	r4, #16
  409a4c:	dd11      	ble.n	409a72 <_vfiprintf_r+0x8ea>
  409a4e:	1c41      	adds	r1, r0, #1
  409a50:	3210      	adds	r2, #16
  409a52:	2907      	cmp	r1, #7
  409a54:	920f      	str	r2, [sp, #60]	; 0x3c
  409a56:	f8cc 5000 	str.w	r5, [ip]
  409a5a:	f8cc 3004 	str.w	r3, [ip, #4]
  409a5e:	910e      	str	r1, [sp, #56]	; 0x38
  409a60:	dded      	ble.n	409a3e <_vfiprintf_r+0x8b6>
  409a62:	b9d2      	cbnz	r2, 409a9a <_vfiprintf_r+0x912>
  409a64:	3c10      	subs	r4, #16
  409a66:	2c10      	cmp	r4, #16
  409a68:	f04f 0e01 	mov.w	lr, #1
  409a6c:	4610      	mov	r0, r2
  409a6e:	46dc      	mov	ip, fp
  409a70:	dced      	bgt.n	409a4e <_vfiprintf_r+0x8c6>
  409a72:	46a9      	mov	r9, r5
  409a74:	4645      	mov	r5, r8
  409a76:	46d0      	mov	r8, sl
  409a78:	46e2      	mov	sl, ip
  409a7a:	4422      	add	r2, r4
  409a7c:	f1be 0f07 	cmp.w	lr, #7
  409a80:	920f      	str	r2, [sp, #60]	; 0x3c
  409a82:	f8ca 9000 	str.w	r9, [sl]
  409a86:	f8ca 4004 	str.w	r4, [sl, #4]
  409a8a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409a8e:	dc2e      	bgt.n	409aee <_vfiprintf_r+0x966>
  409a90:	f10a 0a08 	add.w	sl, sl, #8
  409a94:	f10e 0e01 	add.w	lr, lr, #1
  409a98:	e558      	b.n	40954c <_vfiprintf_r+0x3c4>
  409a9a:	aa0d      	add	r2, sp, #52	; 0x34
  409a9c:	9900      	ldr	r1, [sp, #0]
  409a9e:	9301      	str	r3, [sp, #4]
  409aa0:	4648      	mov	r0, r9
  409aa2:	f7ff fb35 	bl	409110 <__sprint_r.part.0>
  409aa6:	b968      	cbnz	r0, 409ac4 <_vfiprintf_r+0x93c>
  409aa8:	980e      	ldr	r0, [sp, #56]	; 0x38
  409aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409aac:	9b01      	ldr	r3, [sp, #4]
  409aae:	f100 0e01 	add.w	lr, r0, #1
  409ab2:	46dc      	mov	ip, fp
  409ab4:	e7c8      	b.n	409a48 <_vfiprintf_r+0x8c0>
  409ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409ab8:	b123      	cbz	r3, 409ac4 <_vfiprintf_r+0x93c>
  409aba:	9805      	ldr	r0, [sp, #20]
  409abc:	9900      	ldr	r1, [sp, #0]
  409abe:	aa0d      	add	r2, sp, #52	; 0x34
  409ac0:	f7ff fb26 	bl	409110 <__sprint_r.part.0>
  409ac4:	9b00      	ldr	r3, [sp, #0]
  409ac6:	899b      	ldrh	r3, [r3, #12]
  409ac8:	065a      	lsls	r2, r3, #25
  409aca:	f100 818b 	bmi.w	409de4 <_vfiprintf_r+0xc5c>
  409ace:	9802      	ldr	r0, [sp, #8]
  409ad0:	b02b      	add	sp, #172	; 0xac
  409ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ad6:	aa0d      	add	r2, sp, #52	; 0x34
  409ad8:	9900      	ldr	r1, [sp, #0]
  409ada:	4648      	mov	r0, r9
  409adc:	f7ff fb18 	bl	409110 <__sprint_r.part.0>
  409ae0:	2800      	cmp	r0, #0
  409ae2:	d1ef      	bne.n	409ac4 <_vfiprintf_r+0x93c>
  409ae4:	990e      	ldr	r1, [sp, #56]	; 0x38
  409ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ae8:	1c48      	adds	r0, r1, #1
  409aea:	46da      	mov	sl, fp
  409aec:	e555      	b.n	40959a <_vfiprintf_r+0x412>
  409aee:	2a00      	cmp	r2, #0
  409af0:	f040 80fb 	bne.w	409cea <_vfiprintf_r+0xb62>
  409af4:	9a03      	ldr	r2, [sp, #12]
  409af6:	921b      	str	r2, [sp, #108]	; 0x6c
  409af8:	2301      	movs	r3, #1
  409afa:	920f      	str	r2, [sp, #60]	; 0x3c
  409afc:	971a      	str	r7, [sp, #104]	; 0x68
  409afe:	930e      	str	r3, [sp, #56]	; 0x38
  409b00:	46da      	mov	sl, fp
  409b02:	f10a 0a08 	add.w	sl, sl, #8
  409b06:	0771      	lsls	r1, r6, #29
  409b08:	d504      	bpl.n	409b14 <_vfiprintf_r+0x98c>
  409b0a:	9b06      	ldr	r3, [sp, #24]
  409b0c:	1b5c      	subs	r4, r3, r5
  409b0e:	2c00      	cmp	r4, #0
  409b10:	f73f ad34 	bgt.w	40957c <_vfiprintf_r+0x3f4>
  409b14:	9b02      	ldr	r3, [sp, #8]
  409b16:	9906      	ldr	r1, [sp, #24]
  409b18:	42a9      	cmp	r1, r5
  409b1a:	bfac      	ite	ge
  409b1c:	185b      	addge	r3, r3, r1
  409b1e:	195b      	addlt	r3, r3, r5
  409b20:	9302      	str	r3, [sp, #8]
  409b22:	2a00      	cmp	r2, #0
  409b24:	f040 80b3 	bne.w	409c8e <_vfiprintf_r+0xb06>
  409b28:	2300      	movs	r3, #0
  409b2a:	930e      	str	r3, [sp, #56]	; 0x38
  409b2c:	46da      	mov	sl, fp
  409b2e:	f7ff bb5c 	b.w	4091ea <_vfiprintf_r+0x62>
  409b32:	aa0d      	add	r2, sp, #52	; 0x34
  409b34:	9900      	ldr	r1, [sp, #0]
  409b36:	9307      	str	r3, [sp, #28]
  409b38:	4648      	mov	r0, r9
  409b3a:	f7ff fae9 	bl	409110 <__sprint_r.part.0>
  409b3e:	2800      	cmp	r0, #0
  409b40:	d1c0      	bne.n	409ac4 <_vfiprintf_r+0x93c>
  409b42:	980e      	ldr	r0, [sp, #56]	; 0x38
  409b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409b46:	9b07      	ldr	r3, [sp, #28]
  409b48:	f100 0c01 	add.w	ip, r0, #1
  409b4c:	46de      	mov	lr, fp
  409b4e:	e4cb      	b.n	4094e8 <_vfiprintf_r+0x360>
  409b50:	0040ff1c 	.word	0x0040ff1c
  409b54:	0040ff30 	.word	0x0040ff30
  409b58:	0040ff60 	.word	0x0040ff60
  409b5c:	2a00      	cmp	r2, #0
  409b5e:	f040 8133 	bne.w	409dc8 <_vfiprintf_r+0xc40>
  409b62:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409b66:	2b00      	cmp	r3, #0
  409b68:	f000 80f5 	beq.w	409d56 <_vfiprintf_r+0xbce>
  409b6c:	2301      	movs	r3, #1
  409b6e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409b72:	461a      	mov	r2, r3
  409b74:	931b      	str	r3, [sp, #108]	; 0x6c
  409b76:	469e      	mov	lr, r3
  409b78:	911a      	str	r1, [sp, #104]	; 0x68
  409b7a:	46da      	mov	sl, fp
  409b7c:	4670      	mov	r0, lr
  409b7e:	f10a 0a08 	add.w	sl, sl, #8
  409b82:	f10e 0e01 	add.w	lr, lr, #1
  409b86:	e47d      	b.n	409484 <_vfiprintf_r+0x2fc>
  409b88:	a90c      	add	r1, sp, #48	; 0x30
  409b8a:	2202      	movs	r2, #2
  409b8c:	469e      	mov	lr, r3
  409b8e:	911a      	str	r1, [sp, #104]	; 0x68
  409b90:	921b      	str	r2, [sp, #108]	; 0x6c
  409b92:	46da      	mov	sl, fp
  409b94:	4670      	mov	r0, lr
  409b96:	f10a 0a08 	add.w	sl, sl, #8
  409b9a:	f10e 0e01 	add.w	lr, lr, #1
  409b9e:	e738      	b.n	409a12 <_vfiprintf_r+0x88a>
  409ba0:	9b01      	ldr	r3, [sp, #4]
  409ba2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409ba6:	2b00      	cmp	r3, #0
  409ba8:	f2c0 812a 	blt.w	409e00 <_vfiprintf_r+0xc78>
  409bac:	ea54 0305 	orrs.w	r3, r4, r5
  409bb0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409bb4:	f43f abff 	beq.w	4093b6 <_vfiprintf_r+0x22e>
  409bb8:	465f      	mov	r7, fp
  409bba:	0923      	lsrs	r3, r4, #4
  409bbc:	f004 010f 	and.w	r1, r4, #15
  409bc0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409bc4:	092a      	lsrs	r2, r5, #4
  409bc6:	461c      	mov	r4, r3
  409bc8:	4615      	mov	r5, r2
  409bca:	5c43      	ldrb	r3, [r0, r1]
  409bcc:	f807 3d01 	strb.w	r3, [r7, #-1]!
  409bd0:	ea54 0305 	orrs.w	r3, r4, r5
  409bd4:	d1f1      	bne.n	409bba <_vfiprintf_r+0xa32>
  409bd6:	ebc7 030b 	rsb	r3, r7, fp
  409bda:	9303      	str	r3, [sp, #12]
  409bdc:	f7ff bbf4 	b.w	4093c8 <_vfiprintf_r+0x240>
  409be0:	aa0d      	add	r2, sp, #52	; 0x34
  409be2:	9900      	ldr	r1, [sp, #0]
  409be4:	9805      	ldr	r0, [sp, #20]
  409be6:	f7ff fa93 	bl	409110 <__sprint_r.part.0>
  409bea:	2800      	cmp	r0, #0
  409bec:	f47f af6a 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409bf2:	46da      	mov	sl, fp
  409bf4:	e787      	b.n	409b06 <_vfiprintf_r+0x97e>
  409bf6:	f04f 0900 	mov.w	r9, #0
  409bfa:	2400      	movs	r4, #0
  409bfc:	2500      	movs	r5, #0
  409bfe:	e7db      	b.n	409bb8 <_vfiprintf_r+0xa30>
  409c00:	f016 0210 	ands.w	r2, r6, #16
  409c04:	f000 80b2 	beq.w	409d6c <_vfiprintf_r+0xbe4>
  409c08:	9904      	ldr	r1, [sp, #16]
  409c0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409c0e:	460a      	mov	r2, r1
  409c10:	680c      	ldr	r4, [r1, #0]
  409c12:	9901      	ldr	r1, [sp, #4]
  409c14:	2900      	cmp	r1, #0
  409c16:	f102 0204 	add.w	r2, r2, #4
  409c1a:	f04f 0500 	mov.w	r5, #0
  409c1e:	f2c0 8159 	blt.w	409ed4 <_vfiprintf_r+0xd4c>
  409c22:	ea54 0105 	orrs.w	r1, r4, r5
  409c26:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409c2a:	9204      	str	r2, [sp, #16]
  409c2c:	f43f ad51 	beq.w	4096d2 <_vfiprintf_r+0x54a>
  409c30:	4699      	mov	r9, r3
  409c32:	e556      	b.n	4096e2 <_vfiprintf_r+0x55a>
  409c34:	06f7      	lsls	r7, r6, #27
  409c36:	d40a      	bmi.n	409c4e <_vfiprintf_r+0xac6>
  409c38:	0675      	lsls	r5, r6, #25
  409c3a:	d508      	bpl.n	409c4e <_vfiprintf_r+0xac6>
  409c3c:	9904      	ldr	r1, [sp, #16]
  409c3e:	f9b1 4000 	ldrsh.w	r4, [r1]
  409c42:	3104      	adds	r1, #4
  409c44:	17e5      	asrs	r5, r4, #31
  409c46:	4622      	mov	r2, r4
  409c48:	462b      	mov	r3, r5
  409c4a:	9104      	str	r1, [sp, #16]
  409c4c:	e4ea      	b.n	409624 <_vfiprintf_r+0x49c>
  409c4e:	9a04      	ldr	r2, [sp, #16]
  409c50:	6814      	ldr	r4, [r2, #0]
  409c52:	4613      	mov	r3, r2
  409c54:	3304      	adds	r3, #4
  409c56:	17e5      	asrs	r5, r4, #31
  409c58:	9304      	str	r3, [sp, #16]
  409c5a:	4622      	mov	r2, r4
  409c5c:	462b      	mov	r3, r5
  409c5e:	e4e1      	b.n	409624 <_vfiprintf_r+0x49c>
  409c60:	6814      	ldr	r4, [r2, #0]
  409c62:	3204      	adds	r2, #4
  409c64:	9204      	str	r2, [sp, #16]
  409c66:	2500      	movs	r5, #0
  409c68:	e61f      	b.n	4098aa <_vfiprintf_r+0x722>
  409c6a:	f04f 0900 	mov.w	r9, #0
  409c6e:	ea54 0305 	orrs.w	r3, r4, r5
  409c72:	f47f ace8 	bne.w	409646 <_vfiprintf_r+0x4be>
  409c76:	e5d8      	b.n	40982a <_vfiprintf_r+0x6a2>
  409c78:	aa0d      	add	r2, sp, #52	; 0x34
  409c7a:	9900      	ldr	r1, [sp, #0]
  409c7c:	9805      	ldr	r0, [sp, #20]
  409c7e:	f7ff fa47 	bl	409110 <__sprint_r.part.0>
  409c82:	2800      	cmp	r0, #0
  409c84:	f47f af1e 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409c88:	46da      	mov	sl, fp
  409c8a:	f7ff bb48 	b.w	40931e <_vfiprintf_r+0x196>
  409c8e:	aa0d      	add	r2, sp, #52	; 0x34
  409c90:	9900      	ldr	r1, [sp, #0]
  409c92:	9805      	ldr	r0, [sp, #20]
  409c94:	f7ff fa3c 	bl	409110 <__sprint_r.part.0>
  409c98:	2800      	cmp	r0, #0
  409c9a:	f43f af45 	beq.w	409b28 <_vfiprintf_r+0x9a0>
  409c9e:	e711      	b.n	409ac4 <_vfiprintf_r+0x93c>
  409ca0:	aa0d      	add	r2, sp, #52	; 0x34
  409ca2:	9900      	ldr	r1, [sp, #0]
  409ca4:	9805      	ldr	r0, [sp, #20]
  409ca6:	f7ff fa33 	bl	409110 <__sprint_r.part.0>
  409caa:	2800      	cmp	r0, #0
  409cac:	f47f af0a 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409cb0:	980e      	ldr	r0, [sp, #56]	; 0x38
  409cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cb4:	f100 0e01 	add.w	lr, r0, #1
  409cb8:	46da      	mov	sl, fp
  409cba:	f7ff bbe3 	b.w	409484 <_vfiprintf_r+0x2fc>
  409cbe:	aa0d      	add	r2, sp, #52	; 0x34
  409cc0:	9900      	ldr	r1, [sp, #0]
  409cc2:	9805      	ldr	r0, [sp, #20]
  409cc4:	f7ff fa24 	bl	409110 <__sprint_r.part.0>
  409cc8:	2800      	cmp	r0, #0
  409cca:	f47f aefb 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409cce:	980e      	ldr	r0, [sp, #56]	; 0x38
  409cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cd2:	f100 0e01 	add.w	lr, r0, #1
  409cd6:	46da      	mov	sl, fp
  409cd8:	e69b      	b.n	409a12 <_vfiprintf_r+0x88a>
  409cda:	2a00      	cmp	r2, #0
  409cdc:	f040 80d8 	bne.w	409e90 <_vfiprintf_r+0xd08>
  409ce0:	f04f 0e01 	mov.w	lr, #1
  409ce4:	4610      	mov	r0, r2
  409ce6:	46da      	mov	sl, fp
  409ce8:	e697      	b.n	409a1a <_vfiprintf_r+0x892>
  409cea:	aa0d      	add	r2, sp, #52	; 0x34
  409cec:	9900      	ldr	r1, [sp, #0]
  409cee:	9805      	ldr	r0, [sp, #20]
  409cf0:	f7ff fa0e 	bl	409110 <__sprint_r.part.0>
  409cf4:	2800      	cmp	r0, #0
  409cf6:	f47f aee5 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cfe:	f103 0e01 	add.w	lr, r3, #1
  409d02:	46da      	mov	sl, fp
  409d04:	e422      	b.n	40954c <_vfiprintf_r+0x3c4>
  409d06:	2230      	movs	r2, #48	; 0x30
  409d08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  409d0c:	9a01      	ldr	r2, [sp, #4]
  409d0e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  409d12:	2a00      	cmp	r2, #0
  409d14:	f04f 0300 	mov.w	r3, #0
  409d18:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409d1c:	f046 0302 	orr.w	r3, r6, #2
  409d20:	f2c0 80cb 	blt.w	409eba <_vfiprintf_r+0xd32>
  409d24:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409d28:	f046 0602 	orr.w	r6, r6, #2
  409d2c:	f04f 0900 	mov.w	r9, #0
  409d30:	e742      	b.n	409bb8 <_vfiprintf_r+0xa30>
  409d32:	f04f 0900 	mov.w	r9, #0
  409d36:	4890      	ldr	r0, [pc, #576]	; (409f78 <_vfiprintf_r+0xdf0>)
  409d38:	e73e      	b.n	409bb8 <_vfiprintf_r+0xa30>
  409d3a:	9b01      	ldr	r3, [sp, #4]
  409d3c:	4264      	negs	r4, r4
  409d3e:	f04f 092d 	mov.w	r9, #45	; 0x2d
  409d42:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409d46:	2b00      	cmp	r3, #0
  409d48:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409d4c:	f6ff ac7b 	blt.w	409646 <_vfiprintf_r+0x4be>
  409d50:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409d54:	e477      	b.n	409646 <_vfiprintf_r+0x4be>
  409d56:	9b07      	ldr	r3, [sp, #28]
  409d58:	2b00      	cmp	r3, #0
  409d5a:	d072      	beq.n	409e42 <_vfiprintf_r+0xcba>
  409d5c:	ab0c      	add	r3, sp, #48	; 0x30
  409d5e:	2202      	movs	r2, #2
  409d60:	931a      	str	r3, [sp, #104]	; 0x68
  409d62:	921b      	str	r2, [sp, #108]	; 0x6c
  409d64:	f04f 0e01 	mov.w	lr, #1
  409d68:	46da      	mov	sl, fp
  409d6a:	e713      	b.n	409b94 <_vfiprintf_r+0xa0c>
  409d6c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  409d70:	d048      	beq.n	409e04 <_vfiprintf_r+0xc7c>
  409d72:	9904      	ldr	r1, [sp, #16]
  409d74:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409d78:	460b      	mov	r3, r1
  409d7a:	880c      	ldrh	r4, [r1, #0]
  409d7c:	9901      	ldr	r1, [sp, #4]
  409d7e:	2900      	cmp	r1, #0
  409d80:	f103 0304 	add.w	r3, r3, #4
  409d84:	f04f 0500 	mov.w	r5, #0
  409d88:	f6ff ae10 	blt.w	4099ac <_vfiprintf_r+0x824>
  409d8c:	ea54 0105 	orrs.w	r1, r4, r5
  409d90:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409d94:	9304      	str	r3, [sp, #16]
  409d96:	f43f ac9c 	beq.w	4096d2 <_vfiprintf_r+0x54a>
  409d9a:	4691      	mov	r9, r2
  409d9c:	e4a1      	b.n	4096e2 <_vfiprintf_r+0x55a>
  409d9e:	06f0      	lsls	r0, r6, #27
  409da0:	d40a      	bmi.n	409db8 <_vfiprintf_r+0xc30>
  409da2:	0671      	lsls	r1, r6, #25
  409da4:	d508      	bpl.n	409db8 <_vfiprintf_r+0xc30>
  409da6:	9a04      	ldr	r2, [sp, #16]
  409da8:	6813      	ldr	r3, [r2, #0]
  409daa:	3204      	adds	r2, #4
  409dac:	9204      	str	r2, [sp, #16]
  409dae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409db2:	801a      	strh	r2, [r3, #0]
  409db4:	f7ff ba19 	b.w	4091ea <_vfiprintf_r+0x62>
  409db8:	9a04      	ldr	r2, [sp, #16]
  409dba:	6813      	ldr	r3, [r2, #0]
  409dbc:	3204      	adds	r2, #4
  409dbe:	9204      	str	r2, [sp, #16]
  409dc0:	9a02      	ldr	r2, [sp, #8]
  409dc2:	601a      	str	r2, [r3, #0]
  409dc4:	f7ff ba11 	b.w	4091ea <_vfiprintf_r+0x62>
  409dc8:	aa0d      	add	r2, sp, #52	; 0x34
  409dca:	9900      	ldr	r1, [sp, #0]
  409dcc:	9805      	ldr	r0, [sp, #20]
  409dce:	f7ff f99f 	bl	409110 <__sprint_r.part.0>
  409dd2:	2800      	cmp	r0, #0
  409dd4:	f47f ae76 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409dd8:	980e      	ldr	r0, [sp, #56]	; 0x38
  409dda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ddc:	f100 0e01 	add.w	lr, r0, #1
  409de0:	46da      	mov	sl, fp
  409de2:	e5fa      	b.n	4099da <_vfiprintf_r+0x852>
  409de4:	f04f 30ff 	mov.w	r0, #4294967295
  409de8:	f7ff bab6 	b.w	409358 <_vfiprintf_r+0x1d0>
  409dec:	4862      	ldr	r0, [pc, #392]	; (409f78 <_vfiprintf_r+0xdf0>)
  409dee:	4616      	mov	r6, r2
  409df0:	ea54 0205 	orrs.w	r2, r4, r5
  409df4:	9304      	str	r3, [sp, #16]
  409df6:	f04f 0900 	mov.w	r9, #0
  409dfa:	f47f aedd 	bne.w	409bb8 <_vfiprintf_r+0xa30>
  409dfe:	e6fc      	b.n	409bfa <_vfiprintf_r+0xa72>
  409e00:	9b04      	ldr	r3, [sp, #16]
  409e02:	e7f5      	b.n	409df0 <_vfiprintf_r+0xc68>
  409e04:	9a04      	ldr	r2, [sp, #16]
  409e06:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409e0a:	4613      	mov	r3, r2
  409e0c:	6814      	ldr	r4, [r2, #0]
  409e0e:	9a01      	ldr	r2, [sp, #4]
  409e10:	2a00      	cmp	r2, #0
  409e12:	f103 0304 	add.w	r3, r3, #4
  409e16:	f04f 0500 	mov.w	r5, #0
  409e1a:	f6ff adc7 	blt.w	4099ac <_vfiprintf_r+0x824>
  409e1e:	ea54 0205 	orrs.w	r2, r4, r5
  409e22:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409e26:	9304      	str	r3, [sp, #16]
  409e28:	f47f ac5b 	bne.w	4096e2 <_vfiprintf_r+0x55a>
  409e2c:	e451      	b.n	4096d2 <_vfiprintf_r+0x54a>
  409e2e:	aa0d      	add	r2, sp, #52	; 0x34
  409e30:	9900      	ldr	r1, [sp, #0]
  409e32:	9805      	ldr	r0, [sp, #20]
  409e34:	f7ff f96c 	bl	409110 <__sprint_r.part.0>
  409e38:	2800      	cmp	r0, #0
  409e3a:	f47f ae43 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409e40:	e668      	b.n	409b14 <_vfiprintf_r+0x98c>
  409e42:	4610      	mov	r0, r2
  409e44:	f04f 0e01 	mov.w	lr, #1
  409e48:	46da      	mov	sl, fp
  409e4a:	e5e6      	b.n	409a1a <_vfiprintf_r+0x892>
  409e4c:	9904      	ldr	r1, [sp, #16]
  409e4e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409e52:	460a      	mov	r2, r1
  409e54:	880c      	ldrh	r4, [r1, #0]
  409e56:	9901      	ldr	r1, [sp, #4]
  409e58:	2900      	cmp	r1, #0
  409e5a:	f102 0204 	add.w	r2, r2, #4
  409e5e:	f04f 0500 	mov.w	r5, #0
  409e62:	db4e      	blt.n	409f02 <_vfiprintf_r+0xd7a>
  409e64:	ea54 0105 	orrs.w	r1, r4, r5
  409e68:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409e6c:	9204      	str	r2, [sp, #16]
  409e6e:	4699      	mov	r9, r3
  409e70:	f47f abe9 	bne.w	409646 <_vfiprintf_r+0x4be>
  409e74:	e4d4      	b.n	409820 <_vfiprintf_r+0x698>
  409e76:	9304      	str	r3, [sp, #16]
  409e78:	e6f9      	b.n	409c6e <_vfiprintf_r+0xae6>
  409e7a:	4638      	mov	r0, r7
  409e7c:	9404      	str	r4, [sp, #16]
  409e7e:	f7fc fa1f 	bl	4062c0 <strlen>
  409e82:	2300      	movs	r3, #0
  409e84:	9003      	str	r0, [sp, #12]
  409e86:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409e8a:	9301      	str	r3, [sp, #4]
  409e8c:	f7ff ba9c 	b.w	4093c8 <_vfiprintf_r+0x240>
  409e90:	aa0d      	add	r2, sp, #52	; 0x34
  409e92:	9900      	ldr	r1, [sp, #0]
  409e94:	9805      	ldr	r0, [sp, #20]
  409e96:	f7ff f93b 	bl	409110 <__sprint_r.part.0>
  409e9a:	2800      	cmp	r0, #0
  409e9c:	f47f ae12 	bne.w	409ac4 <_vfiprintf_r+0x93c>
  409ea0:	980e      	ldr	r0, [sp, #56]	; 0x38
  409ea2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ea4:	f100 0e01 	add.w	lr, r0, #1
  409ea8:	46da      	mov	sl, fp
  409eaa:	e5b6      	b.n	409a1a <_vfiprintf_r+0x892>
  409eac:	980e      	ldr	r0, [sp, #56]	; 0x38
  409eae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409eb0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 409f80 <_vfiprintf_r+0xdf8>
  409eb4:	3001      	adds	r0, #1
  409eb6:	f7ff bad2 	b.w	40945e <_vfiprintf_r+0x2d6>
  409eba:	461e      	mov	r6, r3
  409ebc:	f04f 0900 	mov.w	r9, #0
  409ec0:	e67a      	b.n	409bb8 <_vfiprintf_r+0xa30>
  409ec2:	2b06      	cmp	r3, #6
  409ec4:	bf28      	it	cs
  409ec6:	2306      	movcs	r3, #6
  409ec8:	9303      	str	r3, [sp, #12]
  409eca:	9404      	str	r4, [sp, #16]
  409ecc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  409ed0:	4f2a      	ldr	r7, [pc, #168]	; (409f7c <_vfiprintf_r+0xdf4>)
  409ed2:	e50c      	b.n	4098ee <_vfiprintf_r+0x766>
  409ed4:	9204      	str	r2, [sp, #16]
  409ed6:	e56a      	b.n	4099ae <_vfiprintf_r+0x826>
  409ed8:	980e      	ldr	r0, [sp, #56]	; 0x38
  409eda:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 409f80 <_vfiprintf_r+0xdf8>
  409ede:	3001      	adds	r0, #1
  409ee0:	f7ff bb73 	b.w	4095ca <_vfiprintf_r+0x442>
  409ee4:	46f4      	mov	ip, lr
  409ee6:	f7ff bb1a 	b.w	40951e <_vfiprintf_r+0x396>
  409eea:	9b01      	ldr	r3, [sp, #4]
  409eec:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409ef0:	9303      	str	r3, [sp, #12]
  409ef2:	9404      	str	r4, [sp, #16]
  409ef4:	9001      	str	r0, [sp, #4]
  409ef6:	f7ff ba67 	b.w	4093c8 <_vfiprintf_r+0x240>
  409efa:	2200      	movs	r2, #0
  409efc:	9201      	str	r2, [sp, #4]
  409efe:	f7ff b9ac 	b.w	40925a <_vfiprintf_r+0xd2>
  409f02:	9204      	str	r2, [sp, #16]
  409f04:	4699      	mov	r9, r3
  409f06:	e6b2      	b.n	409c6e <_vfiprintf_r+0xae6>
  409f08:	9a04      	ldr	r2, [sp, #16]
  409f0a:	6813      	ldr	r3, [r2, #0]
  409f0c:	9301      	str	r3, [sp, #4]
  409f0e:	3204      	adds	r2, #4
  409f10:	2b00      	cmp	r3, #0
  409f12:	9204      	str	r2, [sp, #16]
  409f14:	f898 3001 	ldrb.w	r3, [r8, #1]
  409f18:	46a8      	mov	r8, r5
  409f1a:	f6bf a99c 	bge.w	409256 <_vfiprintf_r+0xce>
  409f1e:	f04f 32ff 	mov.w	r2, #4294967295
  409f22:	9201      	str	r2, [sp, #4]
  409f24:	f7ff b997 	b.w	409256 <_vfiprintf_r+0xce>
  409f28:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f2c:	e48e      	b.n	40984c <_vfiprintf_r+0x6c4>
  409f2e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f32:	e4f0      	b.n	409916 <_vfiprintf_r+0x78e>
  409f34:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f38:	e4ab      	b.n	409892 <_vfiprintf_r+0x70a>
  409f3a:	4699      	mov	r9, r3
  409f3c:	07f3      	lsls	r3, r6, #31
  409f3e:	d505      	bpl.n	409f4c <_vfiprintf_r+0xdc4>
  409f40:	af2a      	add	r7, sp, #168	; 0xa8
  409f42:	2330      	movs	r3, #48	; 0x30
  409f44:	f807 3d41 	strb.w	r3, [r7, #-65]!
  409f48:	f7ff bb97 	b.w	40967a <_vfiprintf_r+0x4f2>
  409f4c:	9b01      	ldr	r3, [sp, #4]
  409f4e:	9303      	str	r3, [sp, #12]
  409f50:	465f      	mov	r7, fp
  409f52:	f7ff ba39 	b.w	4093c8 <_vfiprintf_r+0x240>
  409f56:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f5a:	e443      	b.n	4097e4 <_vfiprintf_r+0x65c>
  409f5c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f60:	f7ff bb9a 	b.w	409698 <_vfiprintf_r+0x510>
  409f64:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f68:	f7ff bb4d 	b.w	409606 <_vfiprintf_r+0x47e>
  409f6c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f70:	e50f      	b.n	409992 <_vfiprintf_r+0x80a>
  409f72:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409f76:	e4f3      	b.n	409960 <_vfiprintf_r+0x7d8>
  409f78:	0040ff30 	.word	0x0040ff30
  409f7c:	0040ff44 	.word	0x0040ff44
  409f80:	0040ff70 	.word	0x0040ff70

00409f84 <__sbprintf>:
  409f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  409f86:	460c      	mov	r4, r1
  409f88:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  409f8c:	8989      	ldrh	r1, [r1, #12]
  409f8e:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409f90:	89e5      	ldrh	r5, [r4, #14]
  409f92:	9619      	str	r6, [sp, #100]	; 0x64
  409f94:	f021 0102 	bic.w	r1, r1, #2
  409f98:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409f9a:	f8ad 500e 	strh.w	r5, [sp, #14]
  409f9e:	2500      	movs	r5, #0
  409fa0:	69e7      	ldr	r7, [r4, #28]
  409fa2:	f8ad 100c 	strh.w	r1, [sp, #12]
  409fa6:	9609      	str	r6, [sp, #36]	; 0x24
  409fa8:	9506      	str	r5, [sp, #24]
  409faa:	ae1a      	add	r6, sp, #104	; 0x68
  409fac:	f44f 6580 	mov.w	r5, #1024	; 0x400
  409fb0:	4669      	mov	r1, sp
  409fb2:	9600      	str	r6, [sp, #0]
  409fb4:	9604      	str	r6, [sp, #16]
  409fb6:	9502      	str	r5, [sp, #8]
  409fb8:	9505      	str	r5, [sp, #20]
  409fba:	9707      	str	r7, [sp, #28]
  409fbc:	4606      	mov	r6, r0
  409fbe:	f7ff f8e3 	bl	409188 <_vfiprintf_r>
  409fc2:	1e05      	subs	r5, r0, #0
  409fc4:	db07      	blt.n	409fd6 <__sbprintf+0x52>
  409fc6:	4630      	mov	r0, r6
  409fc8:	4669      	mov	r1, sp
  409fca:	f001 f8e9 	bl	40b1a0 <_fflush_r>
  409fce:	2800      	cmp	r0, #0
  409fd0:	bf18      	it	ne
  409fd2:	f04f 35ff 	movne.w	r5, #4294967295
  409fd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409fda:	065b      	lsls	r3, r3, #25
  409fdc:	d503      	bpl.n	409fe6 <__sbprintf+0x62>
  409fde:	89a3      	ldrh	r3, [r4, #12]
  409fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fe4:	81a3      	strh	r3, [r4, #12]
  409fe6:	4628      	mov	r0, r5
  409fe8:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  409fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409fee:	bf00      	nop

00409ff0 <__swsetup_r>:
  409ff0:	b538      	push	{r3, r4, r5, lr}
  409ff2:	4b30      	ldr	r3, [pc, #192]	; (40a0b4 <__swsetup_r+0xc4>)
  409ff4:	681b      	ldr	r3, [r3, #0]
  409ff6:	4605      	mov	r5, r0
  409ff8:	460c      	mov	r4, r1
  409ffa:	b113      	cbz	r3, 40a002 <__swsetup_r+0x12>
  409ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  409ffe:	2a00      	cmp	r2, #0
  40a000:	d038      	beq.n	40a074 <__swsetup_r+0x84>
  40a002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a006:	b293      	uxth	r3, r2
  40a008:	0718      	lsls	r0, r3, #28
  40a00a:	d50c      	bpl.n	40a026 <__swsetup_r+0x36>
  40a00c:	6920      	ldr	r0, [r4, #16]
  40a00e:	b1a8      	cbz	r0, 40a03c <__swsetup_r+0x4c>
  40a010:	f013 0201 	ands.w	r2, r3, #1
  40a014:	d01e      	beq.n	40a054 <__swsetup_r+0x64>
  40a016:	6963      	ldr	r3, [r4, #20]
  40a018:	2200      	movs	r2, #0
  40a01a:	425b      	negs	r3, r3
  40a01c:	61a3      	str	r3, [r4, #24]
  40a01e:	60a2      	str	r2, [r4, #8]
  40a020:	b1f0      	cbz	r0, 40a060 <__swsetup_r+0x70>
  40a022:	2000      	movs	r0, #0
  40a024:	bd38      	pop	{r3, r4, r5, pc}
  40a026:	06d9      	lsls	r1, r3, #27
  40a028:	d53c      	bpl.n	40a0a4 <__swsetup_r+0xb4>
  40a02a:	0758      	lsls	r0, r3, #29
  40a02c:	d426      	bmi.n	40a07c <__swsetup_r+0x8c>
  40a02e:	6920      	ldr	r0, [r4, #16]
  40a030:	f042 0308 	orr.w	r3, r2, #8
  40a034:	81a3      	strh	r3, [r4, #12]
  40a036:	b29b      	uxth	r3, r3
  40a038:	2800      	cmp	r0, #0
  40a03a:	d1e9      	bne.n	40a010 <__swsetup_r+0x20>
  40a03c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a040:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a044:	d0e4      	beq.n	40a010 <__swsetup_r+0x20>
  40a046:	4628      	mov	r0, r5
  40a048:	4621      	mov	r1, r4
  40a04a:	f002 f88d 	bl	40c168 <__smakebuf_r>
  40a04e:	89a3      	ldrh	r3, [r4, #12]
  40a050:	6920      	ldr	r0, [r4, #16]
  40a052:	e7dd      	b.n	40a010 <__swsetup_r+0x20>
  40a054:	0799      	lsls	r1, r3, #30
  40a056:	bf58      	it	pl
  40a058:	6962      	ldrpl	r2, [r4, #20]
  40a05a:	60a2      	str	r2, [r4, #8]
  40a05c:	2800      	cmp	r0, #0
  40a05e:	d1e0      	bne.n	40a022 <__swsetup_r+0x32>
  40a060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a064:	061a      	lsls	r2, r3, #24
  40a066:	d5dd      	bpl.n	40a024 <__swsetup_r+0x34>
  40a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a06c:	81a3      	strh	r3, [r4, #12]
  40a06e:	f04f 30ff 	mov.w	r0, #4294967295
  40a072:	bd38      	pop	{r3, r4, r5, pc}
  40a074:	4618      	mov	r0, r3
  40a076:	f001 f927 	bl	40b2c8 <__sinit>
  40a07a:	e7c2      	b.n	40a002 <__swsetup_r+0x12>
  40a07c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a07e:	b151      	cbz	r1, 40a096 <__swsetup_r+0xa6>
  40a080:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a084:	4299      	cmp	r1, r3
  40a086:	d004      	beq.n	40a092 <__swsetup_r+0xa2>
  40a088:	4628      	mov	r0, r5
  40a08a:	f001 f9e7 	bl	40b45c <_free_r>
  40a08e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a092:	2300      	movs	r3, #0
  40a094:	6323      	str	r3, [r4, #48]	; 0x30
  40a096:	2300      	movs	r3, #0
  40a098:	6920      	ldr	r0, [r4, #16]
  40a09a:	6063      	str	r3, [r4, #4]
  40a09c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a0a0:	6020      	str	r0, [r4, #0]
  40a0a2:	e7c5      	b.n	40a030 <__swsetup_r+0x40>
  40a0a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a0a8:	2309      	movs	r3, #9
  40a0aa:	602b      	str	r3, [r5, #0]
  40a0ac:	f04f 30ff 	mov.w	r0, #4294967295
  40a0b0:	81a2      	strh	r2, [r4, #12]
  40a0b2:	bd38      	pop	{r3, r4, r5, pc}
  40a0b4:	20000458 	.word	0x20000458

0040a0b8 <register_fini>:
  40a0b8:	4b02      	ldr	r3, [pc, #8]	; (40a0c4 <register_fini+0xc>)
  40a0ba:	b113      	cbz	r3, 40a0c2 <register_fini+0xa>
  40a0bc:	4802      	ldr	r0, [pc, #8]	; (40a0c8 <register_fini+0x10>)
  40a0be:	f000 b805 	b.w	40a0cc <atexit>
  40a0c2:	4770      	bx	lr
  40a0c4:	00000000 	.word	0x00000000
  40a0c8:	0040b2dd 	.word	0x0040b2dd

0040a0cc <atexit>:
  40a0cc:	2300      	movs	r3, #0
  40a0ce:	4601      	mov	r1, r0
  40a0d0:	461a      	mov	r2, r3
  40a0d2:	4618      	mov	r0, r3
  40a0d4:	f003 bc06 	b.w	40d8e4 <__register_exitproc>

0040a0d8 <quorem>:
  40a0d8:	6902      	ldr	r2, [r0, #16]
  40a0da:	690b      	ldr	r3, [r1, #16]
  40a0dc:	4293      	cmp	r3, r2
  40a0de:	f300 808d 	bgt.w	40a1fc <quorem+0x124>
  40a0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a0e6:	f103 38ff 	add.w	r8, r3, #4294967295
  40a0ea:	f101 0714 	add.w	r7, r1, #20
  40a0ee:	f100 0b14 	add.w	fp, r0, #20
  40a0f2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40a0f6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40a0fa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40a0fe:	b083      	sub	sp, #12
  40a100:	3201      	adds	r2, #1
  40a102:	fbb3 f9f2 	udiv	r9, r3, r2
  40a106:	eb0b 0304 	add.w	r3, fp, r4
  40a10a:	9400      	str	r4, [sp, #0]
  40a10c:	eb07 0a04 	add.w	sl, r7, r4
  40a110:	9301      	str	r3, [sp, #4]
  40a112:	f1b9 0f00 	cmp.w	r9, #0
  40a116:	d039      	beq.n	40a18c <quorem+0xb4>
  40a118:	2500      	movs	r5, #0
  40a11a:	46bc      	mov	ip, r7
  40a11c:	46de      	mov	lr, fp
  40a11e:	462b      	mov	r3, r5
  40a120:	f85c 6b04 	ldr.w	r6, [ip], #4
  40a124:	f8de 2000 	ldr.w	r2, [lr]
  40a128:	b2b4      	uxth	r4, r6
  40a12a:	fb09 5504 	mla	r5, r9, r4, r5
  40a12e:	0c36      	lsrs	r6, r6, #16
  40a130:	0c2c      	lsrs	r4, r5, #16
  40a132:	fb09 4406 	mla	r4, r9, r6, r4
  40a136:	b2ad      	uxth	r5, r5
  40a138:	1b5b      	subs	r3, r3, r5
  40a13a:	b2a6      	uxth	r6, r4
  40a13c:	fa13 f382 	uxtah	r3, r3, r2
  40a140:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40a144:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40a148:	b29b      	uxth	r3, r3
  40a14a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40a14e:	45e2      	cmp	sl, ip
  40a150:	f84e 3b04 	str.w	r3, [lr], #4
  40a154:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40a158:	ea4f 4326 	mov.w	r3, r6, asr #16
  40a15c:	d2e0      	bcs.n	40a120 <quorem+0x48>
  40a15e:	9b00      	ldr	r3, [sp, #0]
  40a160:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a164:	b993      	cbnz	r3, 40a18c <quorem+0xb4>
  40a166:	9c01      	ldr	r4, [sp, #4]
  40a168:	1f23      	subs	r3, r4, #4
  40a16a:	459b      	cmp	fp, r3
  40a16c:	d20c      	bcs.n	40a188 <quorem+0xb0>
  40a16e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a172:	b94b      	cbnz	r3, 40a188 <quorem+0xb0>
  40a174:	f1a4 0308 	sub.w	r3, r4, #8
  40a178:	e002      	b.n	40a180 <quorem+0xa8>
  40a17a:	681a      	ldr	r2, [r3, #0]
  40a17c:	3b04      	subs	r3, #4
  40a17e:	b91a      	cbnz	r2, 40a188 <quorem+0xb0>
  40a180:	459b      	cmp	fp, r3
  40a182:	f108 38ff 	add.w	r8, r8, #4294967295
  40a186:	d3f8      	bcc.n	40a17a <quorem+0xa2>
  40a188:	f8c0 8010 	str.w	r8, [r0, #16]
  40a18c:	4604      	mov	r4, r0
  40a18e:	f002 fe2d 	bl	40cdec <__mcmp>
  40a192:	2800      	cmp	r0, #0
  40a194:	db2e      	blt.n	40a1f4 <quorem+0x11c>
  40a196:	f109 0901 	add.w	r9, r9, #1
  40a19a:	465d      	mov	r5, fp
  40a19c:	2300      	movs	r3, #0
  40a19e:	f857 1b04 	ldr.w	r1, [r7], #4
  40a1a2:	6828      	ldr	r0, [r5, #0]
  40a1a4:	b28a      	uxth	r2, r1
  40a1a6:	1a9a      	subs	r2, r3, r2
  40a1a8:	0c09      	lsrs	r1, r1, #16
  40a1aa:	fa12 f280 	uxtah	r2, r2, r0
  40a1ae:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40a1b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a1b6:	b291      	uxth	r1, r2
  40a1b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a1bc:	45ba      	cmp	sl, r7
  40a1be:	f845 1b04 	str.w	r1, [r5], #4
  40a1c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a1c6:	d2ea      	bcs.n	40a19e <quorem+0xc6>
  40a1c8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a1cc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a1d0:	b982      	cbnz	r2, 40a1f4 <quorem+0x11c>
  40a1d2:	1f1a      	subs	r2, r3, #4
  40a1d4:	4593      	cmp	fp, r2
  40a1d6:	d20b      	bcs.n	40a1f0 <quorem+0x118>
  40a1d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a1dc:	b942      	cbnz	r2, 40a1f0 <quorem+0x118>
  40a1de:	3b08      	subs	r3, #8
  40a1e0:	e002      	b.n	40a1e8 <quorem+0x110>
  40a1e2:	681a      	ldr	r2, [r3, #0]
  40a1e4:	3b04      	subs	r3, #4
  40a1e6:	b91a      	cbnz	r2, 40a1f0 <quorem+0x118>
  40a1e8:	459b      	cmp	fp, r3
  40a1ea:	f108 38ff 	add.w	r8, r8, #4294967295
  40a1ee:	d3f8      	bcc.n	40a1e2 <quorem+0x10a>
  40a1f0:	f8c4 8010 	str.w	r8, [r4, #16]
  40a1f4:	4648      	mov	r0, r9
  40a1f6:	b003      	add	sp, #12
  40a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1fc:	2000      	movs	r0, #0
  40a1fe:	4770      	bx	lr

0040a200 <_dtoa_r>:
  40a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a204:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a206:	b097      	sub	sp, #92	; 0x5c
  40a208:	4681      	mov	r9, r0
  40a20a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40a20c:	4692      	mov	sl, r2
  40a20e:	469b      	mov	fp, r3
  40a210:	b149      	cbz	r1, 40a226 <_dtoa_r+0x26>
  40a212:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a214:	604a      	str	r2, [r1, #4]
  40a216:	2301      	movs	r3, #1
  40a218:	4093      	lsls	r3, r2
  40a21a:	608b      	str	r3, [r1, #8]
  40a21c:	f002 fbb8 	bl	40c990 <_Bfree>
  40a220:	2300      	movs	r3, #0
  40a222:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40a226:	f1bb 0f00 	cmp.w	fp, #0
  40a22a:	46d8      	mov	r8, fp
  40a22c:	db33      	blt.n	40a296 <_dtoa_r+0x96>
  40a22e:	2300      	movs	r3, #0
  40a230:	6023      	str	r3, [r4, #0]
  40a232:	4ba5      	ldr	r3, [pc, #660]	; (40a4c8 <_dtoa_r+0x2c8>)
  40a234:	461a      	mov	r2, r3
  40a236:	ea08 0303 	and.w	r3, r8, r3
  40a23a:	4293      	cmp	r3, r2
  40a23c:	d014      	beq.n	40a268 <_dtoa_r+0x68>
  40a23e:	4650      	mov	r0, sl
  40a240:	4659      	mov	r1, fp
  40a242:	2200      	movs	r2, #0
  40a244:	2300      	movs	r3, #0
  40a246:	f004 f895 	bl	40e374 <__aeabi_dcmpeq>
  40a24a:	4605      	mov	r5, r0
  40a24c:	b348      	cbz	r0, 40a2a2 <_dtoa_r+0xa2>
  40a24e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a250:	2301      	movs	r3, #1
  40a252:	6013      	str	r3, [r2, #0]
  40a254:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a256:	2b00      	cmp	r3, #0
  40a258:	f000 80c5 	beq.w	40a3e6 <_dtoa_r+0x1e6>
  40a25c:	489b      	ldr	r0, [pc, #620]	; (40a4cc <_dtoa_r+0x2cc>)
  40a25e:	6018      	str	r0, [r3, #0]
  40a260:	3801      	subs	r0, #1
  40a262:	b017      	add	sp, #92	; 0x5c
  40a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a268:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a26a:	f242 730f 	movw	r3, #9999	; 0x270f
  40a26e:	6013      	str	r3, [r2, #0]
  40a270:	f1ba 0f00 	cmp.w	sl, #0
  40a274:	f000 80a2 	beq.w	40a3bc <_dtoa_r+0x1bc>
  40a278:	4895      	ldr	r0, [pc, #596]	; (40a4d0 <_dtoa_r+0x2d0>)
  40a27a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a27c:	2b00      	cmp	r3, #0
  40a27e:	d0f0      	beq.n	40a262 <_dtoa_r+0x62>
  40a280:	78c3      	ldrb	r3, [r0, #3]
  40a282:	2b00      	cmp	r3, #0
  40a284:	f000 80b1 	beq.w	40a3ea <_dtoa_r+0x1ea>
  40a288:	f100 0308 	add.w	r3, r0, #8
  40a28c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a28e:	6013      	str	r3, [r2, #0]
  40a290:	b017      	add	sp, #92	; 0x5c
  40a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a296:	2301      	movs	r3, #1
  40a298:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40a29c:	6023      	str	r3, [r4, #0]
  40a29e:	46c3      	mov	fp, r8
  40a2a0:	e7c7      	b.n	40a232 <_dtoa_r+0x32>
  40a2a2:	aa14      	add	r2, sp, #80	; 0x50
  40a2a4:	ab15      	add	r3, sp, #84	; 0x54
  40a2a6:	9201      	str	r2, [sp, #4]
  40a2a8:	9300      	str	r3, [sp, #0]
  40a2aa:	4652      	mov	r2, sl
  40a2ac:	465b      	mov	r3, fp
  40a2ae:	4648      	mov	r0, r9
  40a2b0:	f002 fed2 	bl	40d058 <__d2b>
  40a2b4:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40a2b8:	9008      	str	r0, [sp, #32]
  40a2ba:	f040 8088 	bne.w	40a3ce <_dtoa_r+0x1ce>
  40a2be:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a2c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40a2c2:	442c      	add	r4, r5
  40a2c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40a2c8:	2b20      	cmp	r3, #32
  40a2ca:	f340 8291 	ble.w	40a7f0 <_dtoa_r+0x5f0>
  40a2ce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a2d2:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40a2d6:	fa08 f803 	lsl.w	r8, r8, r3
  40a2da:	fa2a f000 	lsr.w	r0, sl, r0
  40a2de:	ea40 0008 	orr.w	r0, r0, r8
  40a2e2:	f003 fd69 	bl	40ddb8 <__aeabi_ui2d>
  40a2e6:	2301      	movs	r3, #1
  40a2e8:	3c01      	subs	r4, #1
  40a2ea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40a2ee:	9310      	str	r3, [sp, #64]	; 0x40
  40a2f0:	2200      	movs	r2, #0
  40a2f2:	4b78      	ldr	r3, [pc, #480]	; (40a4d4 <_dtoa_r+0x2d4>)
  40a2f4:	f003 fc22 	bl	40db3c <__aeabi_dsub>
  40a2f8:	a36d      	add	r3, pc, #436	; (adr r3, 40a4b0 <_dtoa_r+0x2b0>)
  40a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2fe:	f003 fdd1 	bl	40dea4 <__aeabi_dmul>
  40a302:	a36d      	add	r3, pc, #436	; (adr r3, 40a4b8 <_dtoa_r+0x2b8>)
  40a304:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a308:	f003 fc1a 	bl	40db40 <__adddf3>
  40a30c:	4606      	mov	r6, r0
  40a30e:	4620      	mov	r0, r4
  40a310:	460f      	mov	r7, r1
  40a312:	f003 fd61 	bl	40ddd8 <__aeabi_i2d>
  40a316:	a36a      	add	r3, pc, #424	; (adr r3, 40a4c0 <_dtoa_r+0x2c0>)
  40a318:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a31c:	f003 fdc2 	bl	40dea4 <__aeabi_dmul>
  40a320:	4602      	mov	r2, r0
  40a322:	460b      	mov	r3, r1
  40a324:	4630      	mov	r0, r6
  40a326:	4639      	mov	r1, r7
  40a328:	f003 fc0a 	bl	40db40 <__adddf3>
  40a32c:	4606      	mov	r6, r0
  40a32e:	460f      	mov	r7, r1
  40a330:	f004 f868 	bl	40e404 <__aeabi_d2iz>
  40a334:	2200      	movs	r2, #0
  40a336:	9004      	str	r0, [sp, #16]
  40a338:	2300      	movs	r3, #0
  40a33a:	4630      	mov	r0, r6
  40a33c:	4639      	mov	r1, r7
  40a33e:	f004 f823 	bl	40e388 <__aeabi_dcmplt>
  40a342:	2800      	cmp	r0, #0
  40a344:	f040 8230 	bne.w	40a7a8 <_dtoa_r+0x5a8>
  40a348:	9e04      	ldr	r6, [sp, #16]
  40a34a:	2e16      	cmp	r6, #22
  40a34c:	f200 8229 	bhi.w	40a7a2 <_dtoa_r+0x5a2>
  40a350:	4b61      	ldr	r3, [pc, #388]	; (40a4d8 <_dtoa_r+0x2d8>)
  40a352:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a356:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a35a:	4652      	mov	r2, sl
  40a35c:	465b      	mov	r3, fp
  40a35e:	f004 f831 	bl	40e3c4 <__aeabi_dcmpgt>
  40a362:	2800      	cmp	r0, #0
  40a364:	f000 8249 	beq.w	40a7fa <_dtoa_r+0x5fa>
  40a368:	1e73      	subs	r3, r6, #1
  40a36a:	9304      	str	r3, [sp, #16]
  40a36c:	2300      	movs	r3, #0
  40a36e:	930c      	str	r3, [sp, #48]	; 0x30
  40a370:	1b2c      	subs	r4, r5, r4
  40a372:	1e63      	subs	r3, r4, #1
  40a374:	9302      	str	r3, [sp, #8]
  40a376:	f100 8232 	bmi.w	40a7de <_dtoa_r+0x5de>
  40a37a:	2300      	movs	r3, #0
  40a37c:	9305      	str	r3, [sp, #20]
  40a37e:	9b04      	ldr	r3, [sp, #16]
  40a380:	2b00      	cmp	r3, #0
  40a382:	f2c0 8223 	blt.w	40a7cc <_dtoa_r+0x5cc>
  40a386:	9a02      	ldr	r2, [sp, #8]
  40a388:	930b      	str	r3, [sp, #44]	; 0x2c
  40a38a:	4611      	mov	r1, r2
  40a38c:	4419      	add	r1, r3
  40a38e:	2300      	movs	r3, #0
  40a390:	9102      	str	r1, [sp, #8]
  40a392:	930a      	str	r3, [sp, #40]	; 0x28
  40a394:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a396:	2b09      	cmp	r3, #9
  40a398:	d829      	bhi.n	40a3ee <_dtoa_r+0x1ee>
  40a39a:	2b05      	cmp	r3, #5
  40a39c:	f340 8658 	ble.w	40b050 <_dtoa_r+0xe50>
  40a3a0:	3b04      	subs	r3, #4
  40a3a2:	9320      	str	r3, [sp, #128]	; 0x80
  40a3a4:	2500      	movs	r5, #0
  40a3a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a3a8:	3b02      	subs	r3, #2
  40a3aa:	2b03      	cmp	r3, #3
  40a3ac:	f200 8635 	bhi.w	40b01a <_dtoa_r+0xe1a>
  40a3b0:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a3b4:	0228032c 	.word	0x0228032c
  40a3b8:	04590337 	.word	0x04590337
  40a3bc:	4b44      	ldr	r3, [pc, #272]	; (40a4d0 <_dtoa_r+0x2d0>)
  40a3be:	4a47      	ldr	r2, [pc, #284]	; (40a4dc <_dtoa_r+0x2dc>)
  40a3c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40a3c4:	2800      	cmp	r0, #0
  40a3c6:	bf14      	ite	ne
  40a3c8:	4618      	movne	r0, r3
  40a3ca:	4610      	moveq	r0, r2
  40a3cc:	e755      	b.n	40a27a <_dtoa_r+0x7a>
  40a3ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a3d2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40a3d6:	9510      	str	r5, [sp, #64]	; 0x40
  40a3d8:	4650      	mov	r0, sl
  40a3da:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40a3de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a3e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a3e4:	e784      	b.n	40a2f0 <_dtoa_r+0xf0>
  40a3e6:	483e      	ldr	r0, [pc, #248]	; (40a4e0 <_dtoa_r+0x2e0>)
  40a3e8:	e73b      	b.n	40a262 <_dtoa_r+0x62>
  40a3ea:	1cc3      	adds	r3, r0, #3
  40a3ec:	e74e      	b.n	40a28c <_dtoa_r+0x8c>
  40a3ee:	2100      	movs	r1, #0
  40a3f0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a3f4:	4648      	mov	r0, r9
  40a3f6:	9120      	str	r1, [sp, #128]	; 0x80
  40a3f8:	f002 faa4 	bl	40c944 <_Balloc>
  40a3fc:	f04f 33ff 	mov.w	r3, #4294967295
  40a400:	9306      	str	r3, [sp, #24]
  40a402:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a404:	930d      	str	r3, [sp, #52]	; 0x34
  40a406:	2301      	movs	r3, #1
  40a408:	9007      	str	r0, [sp, #28]
  40a40a:	9221      	str	r2, [sp, #132]	; 0x84
  40a40c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40a410:	9309      	str	r3, [sp, #36]	; 0x24
  40a412:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a414:	2b00      	cmp	r3, #0
  40a416:	f2c0 80d1 	blt.w	40a5bc <_dtoa_r+0x3bc>
  40a41a:	9a04      	ldr	r2, [sp, #16]
  40a41c:	2a0e      	cmp	r2, #14
  40a41e:	f300 80cd 	bgt.w	40a5bc <_dtoa_r+0x3bc>
  40a422:	4b2d      	ldr	r3, [pc, #180]	; (40a4d8 <_dtoa_r+0x2d8>)
  40a424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a428:	e9d3 3400 	ldrd	r3, r4, [r3]
  40a42c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40a430:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a432:	2b00      	cmp	r3, #0
  40a434:	f2c0 8300 	blt.w	40aa38 <_dtoa_r+0x838>
  40a438:	4656      	mov	r6, sl
  40a43a:	465f      	mov	r7, fp
  40a43c:	4650      	mov	r0, sl
  40a43e:	4659      	mov	r1, fp
  40a440:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40a444:	4652      	mov	r2, sl
  40a446:	465b      	mov	r3, fp
  40a448:	f003 fe56 	bl	40e0f8 <__aeabi_ddiv>
  40a44c:	f003 ffda 	bl	40e404 <__aeabi_d2iz>
  40a450:	4604      	mov	r4, r0
  40a452:	f003 fcc1 	bl	40ddd8 <__aeabi_i2d>
  40a456:	4652      	mov	r2, sl
  40a458:	465b      	mov	r3, fp
  40a45a:	f003 fd23 	bl	40dea4 <__aeabi_dmul>
  40a45e:	460b      	mov	r3, r1
  40a460:	4602      	mov	r2, r0
  40a462:	4639      	mov	r1, r7
  40a464:	4630      	mov	r0, r6
  40a466:	f003 fb69 	bl	40db3c <__aeabi_dsub>
  40a46a:	9d07      	ldr	r5, [sp, #28]
  40a46c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40a470:	702b      	strb	r3, [r5, #0]
  40a472:	9b06      	ldr	r3, [sp, #24]
  40a474:	2b01      	cmp	r3, #1
  40a476:	4606      	mov	r6, r0
  40a478:	460f      	mov	r7, r1
  40a47a:	f105 0501 	add.w	r5, r5, #1
  40a47e:	d062      	beq.n	40a546 <_dtoa_r+0x346>
  40a480:	2200      	movs	r2, #0
  40a482:	4b18      	ldr	r3, [pc, #96]	; (40a4e4 <_dtoa_r+0x2e4>)
  40a484:	f003 fd0e 	bl	40dea4 <__aeabi_dmul>
  40a488:	2200      	movs	r2, #0
  40a48a:	2300      	movs	r3, #0
  40a48c:	4606      	mov	r6, r0
  40a48e:	460f      	mov	r7, r1
  40a490:	f003 ff70 	bl	40e374 <__aeabi_dcmpeq>
  40a494:	2800      	cmp	r0, #0
  40a496:	d17e      	bne.n	40a596 <_dtoa_r+0x396>
  40a498:	f8cd 9014 	str.w	r9, [sp, #20]
  40a49c:	f8dd a018 	ldr.w	sl, [sp, #24]
  40a4a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a4a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40a4a8:	e029      	b.n	40a4fe <_dtoa_r+0x2fe>
  40a4aa:	bf00      	nop
  40a4ac:	f3af 8000 	nop.w
  40a4b0:	636f4361 	.word	0x636f4361
  40a4b4:	3fd287a7 	.word	0x3fd287a7
  40a4b8:	8b60c8b3 	.word	0x8b60c8b3
  40a4bc:	3fc68a28 	.word	0x3fc68a28
  40a4c0:	509f79fb 	.word	0x509f79fb
  40a4c4:	3fd34413 	.word	0x3fd34413
  40a4c8:	7ff00000 	.word	0x7ff00000
  40a4cc:	0040ff4d 	.word	0x0040ff4d
  40a4d0:	00410090 	.word	0x00410090
  40a4d4:	3ff80000 	.word	0x3ff80000
  40a4d8:	004101a0 	.word	0x004101a0
  40a4dc:	00410084 	.word	0x00410084
  40a4e0:	0040ff4c 	.word	0x0040ff4c
  40a4e4:	40240000 	.word	0x40240000
  40a4e8:	f003 fcdc 	bl	40dea4 <__aeabi_dmul>
  40a4ec:	2200      	movs	r2, #0
  40a4ee:	2300      	movs	r3, #0
  40a4f0:	4606      	mov	r6, r0
  40a4f2:	460f      	mov	r7, r1
  40a4f4:	f003 ff3e 	bl	40e374 <__aeabi_dcmpeq>
  40a4f8:	2800      	cmp	r0, #0
  40a4fa:	f040 83b7 	bne.w	40ac6c <_dtoa_r+0xa6c>
  40a4fe:	4642      	mov	r2, r8
  40a500:	464b      	mov	r3, r9
  40a502:	4630      	mov	r0, r6
  40a504:	4639      	mov	r1, r7
  40a506:	f003 fdf7 	bl	40e0f8 <__aeabi_ddiv>
  40a50a:	f003 ff7b 	bl	40e404 <__aeabi_d2iz>
  40a50e:	4604      	mov	r4, r0
  40a510:	f003 fc62 	bl	40ddd8 <__aeabi_i2d>
  40a514:	4642      	mov	r2, r8
  40a516:	464b      	mov	r3, r9
  40a518:	f003 fcc4 	bl	40dea4 <__aeabi_dmul>
  40a51c:	4602      	mov	r2, r0
  40a51e:	460b      	mov	r3, r1
  40a520:	4630      	mov	r0, r6
  40a522:	4639      	mov	r1, r7
  40a524:	f003 fb0a 	bl	40db3c <__aeabi_dsub>
  40a528:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40a52c:	f805 eb01 	strb.w	lr, [r5], #1
  40a530:	ebcb 0e05 	rsb	lr, fp, r5
  40a534:	45d6      	cmp	lr, sl
  40a536:	4606      	mov	r6, r0
  40a538:	460f      	mov	r7, r1
  40a53a:	f04f 0200 	mov.w	r2, #0
  40a53e:	4bb0      	ldr	r3, [pc, #704]	; (40a800 <_dtoa_r+0x600>)
  40a540:	d1d2      	bne.n	40a4e8 <_dtoa_r+0x2e8>
  40a542:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a546:	4632      	mov	r2, r6
  40a548:	463b      	mov	r3, r7
  40a54a:	4630      	mov	r0, r6
  40a54c:	4639      	mov	r1, r7
  40a54e:	f003 faf7 	bl	40db40 <__adddf3>
  40a552:	4606      	mov	r6, r0
  40a554:	460f      	mov	r7, r1
  40a556:	4602      	mov	r2, r0
  40a558:	460b      	mov	r3, r1
  40a55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a55e:	f003 ff13 	bl	40e388 <__aeabi_dcmplt>
  40a562:	b940      	cbnz	r0, 40a576 <_dtoa_r+0x376>
  40a564:	4632      	mov	r2, r6
  40a566:	463b      	mov	r3, r7
  40a568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40a56c:	f003 ff02 	bl	40e374 <__aeabi_dcmpeq>
  40a570:	b188      	cbz	r0, 40a596 <_dtoa_r+0x396>
  40a572:	07e3      	lsls	r3, r4, #31
  40a574:	d50f      	bpl.n	40a596 <_dtoa_r+0x396>
  40a576:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40a57a:	9a07      	ldr	r2, [sp, #28]
  40a57c:	1e6b      	subs	r3, r5, #1
  40a57e:	e004      	b.n	40a58a <_dtoa_r+0x38a>
  40a580:	429a      	cmp	r2, r3
  40a582:	f000 842c 	beq.w	40adde <_dtoa_r+0xbde>
  40a586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a58a:	2c39      	cmp	r4, #57	; 0x39
  40a58c:	f103 0501 	add.w	r5, r3, #1
  40a590:	d0f6      	beq.n	40a580 <_dtoa_r+0x380>
  40a592:	3401      	adds	r4, #1
  40a594:	701c      	strb	r4, [r3, #0]
  40a596:	9908      	ldr	r1, [sp, #32]
  40a598:	4648      	mov	r0, r9
  40a59a:	f002 f9f9 	bl	40c990 <_Bfree>
  40a59e:	2200      	movs	r2, #0
  40a5a0:	9b04      	ldr	r3, [sp, #16]
  40a5a2:	702a      	strb	r2, [r5, #0]
  40a5a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a5a6:	3301      	adds	r3, #1
  40a5a8:	6013      	str	r3, [r2, #0]
  40a5aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a5ac:	2b00      	cmp	r3, #0
  40a5ae:	f000 83a7 	beq.w	40ad00 <_dtoa_r+0xb00>
  40a5b2:	9807      	ldr	r0, [sp, #28]
  40a5b4:	601d      	str	r5, [r3, #0]
  40a5b6:	b017      	add	sp, #92	; 0x5c
  40a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a5be:	2a00      	cmp	r2, #0
  40a5c0:	f000 8112 	beq.w	40a7e8 <_dtoa_r+0x5e8>
  40a5c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a5c6:	2a01      	cmp	r2, #1
  40a5c8:	f340 8258 	ble.w	40aa7c <_dtoa_r+0x87c>
  40a5cc:	9b06      	ldr	r3, [sp, #24]
  40a5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a5d0:	1e5f      	subs	r7, r3, #1
  40a5d2:	42ba      	cmp	r2, r7
  40a5d4:	f2c0 8397 	blt.w	40ad06 <_dtoa_r+0xb06>
  40a5d8:	1bd7      	subs	r7, r2, r7
  40a5da:	9b06      	ldr	r3, [sp, #24]
  40a5dc:	2b00      	cmp	r3, #0
  40a5de:	f2c0 848a 	blt.w	40aef6 <_dtoa_r+0xcf6>
  40a5e2:	9d05      	ldr	r5, [sp, #20]
  40a5e4:	9b06      	ldr	r3, [sp, #24]
  40a5e6:	9a05      	ldr	r2, [sp, #20]
  40a5e8:	441a      	add	r2, r3
  40a5ea:	9205      	str	r2, [sp, #20]
  40a5ec:	9a02      	ldr	r2, [sp, #8]
  40a5ee:	2101      	movs	r1, #1
  40a5f0:	441a      	add	r2, r3
  40a5f2:	4648      	mov	r0, r9
  40a5f4:	9202      	str	r2, [sp, #8]
  40a5f6:	f002 faaf 	bl	40cb58 <__i2b>
  40a5fa:	4606      	mov	r6, r0
  40a5fc:	b165      	cbz	r5, 40a618 <_dtoa_r+0x418>
  40a5fe:	9902      	ldr	r1, [sp, #8]
  40a600:	2900      	cmp	r1, #0
  40a602:	460b      	mov	r3, r1
  40a604:	dd08      	ble.n	40a618 <_dtoa_r+0x418>
  40a606:	42a9      	cmp	r1, r5
  40a608:	9a05      	ldr	r2, [sp, #20]
  40a60a:	bfa8      	it	ge
  40a60c:	462b      	movge	r3, r5
  40a60e:	1ad2      	subs	r2, r2, r3
  40a610:	1aed      	subs	r5, r5, r3
  40a612:	1acb      	subs	r3, r1, r3
  40a614:	9205      	str	r2, [sp, #20]
  40a616:	9302      	str	r3, [sp, #8]
  40a618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a61a:	2b00      	cmp	r3, #0
  40a61c:	f340 82fc 	ble.w	40ac18 <_dtoa_r+0xa18>
  40a620:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a622:	2a00      	cmp	r2, #0
  40a624:	f000 8201 	beq.w	40aa2a <_dtoa_r+0x82a>
  40a628:	2f00      	cmp	r7, #0
  40a62a:	f000 81fe 	beq.w	40aa2a <_dtoa_r+0x82a>
  40a62e:	4631      	mov	r1, r6
  40a630:	463a      	mov	r2, r7
  40a632:	4648      	mov	r0, r9
  40a634:	f002 fb32 	bl	40cc9c <__pow5mult>
  40a638:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40a63c:	4601      	mov	r1, r0
  40a63e:	4642      	mov	r2, r8
  40a640:	4606      	mov	r6, r0
  40a642:	4648      	mov	r0, r9
  40a644:	f002 fa92 	bl	40cb6c <__multiply>
  40a648:	4641      	mov	r1, r8
  40a64a:	4604      	mov	r4, r0
  40a64c:	4648      	mov	r0, r9
  40a64e:	f002 f99f 	bl	40c990 <_Bfree>
  40a652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a654:	1bdb      	subs	r3, r3, r7
  40a656:	930a      	str	r3, [sp, #40]	; 0x28
  40a658:	f040 81e6 	bne.w	40aa28 <_dtoa_r+0x828>
  40a65c:	2101      	movs	r1, #1
  40a65e:	4648      	mov	r0, r9
  40a660:	f002 fa7a 	bl	40cb58 <__i2b>
  40a664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a666:	4680      	mov	r8, r0
  40a668:	2b00      	cmp	r3, #0
  40a66a:	f000 8219 	beq.w	40aaa0 <_dtoa_r+0x8a0>
  40a66e:	4601      	mov	r1, r0
  40a670:	461a      	mov	r2, r3
  40a672:	4648      	mov	r0, r9
  40a674:	f002 fb12 	bl	40cc9c <__pow5mult>
  40a678:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40a67a:	2b01      	cmp	r3, #1
  40a67c:	4680      	mov	r8, r0
  40a67e:	f340 82f8 	ble.w	40ac72 <_dtoa_r+0xa72>
  40a682:	2700      	movs	r7, #0
  40a684:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a688:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a68c:	6918      	ldr	r0, [r3, #16]
  40a68e:	f002 fa15 	bl	40cabc <__hi0bits>
  40a692:	f1c0 0020 	rsb	r0, r0, #32
  40a696:	9a02      	ldr	r2, [sp, #8]
  40a698:	4410      	add	r0, r2
  40a69a:	f010 001f 	ands.w	r0, r0, #31
  40a69e:	f000 81f6 	beq.w	40aa8e <_dtoa_r+0x88e>
  40a6a2:	f1c0 0320 	rsb	r3, r0, #32
  40a6a6:	2b04      	cmp	r3, #4
  40a6a8:	f340 84ca 	ble.w	40b040 <_dtoa_r+0xe40>
  40a6ac:	9b05      	ldr	r3, [sp, #20]
  40a6ae:	f1c0 001c 	rsb	r0, r0, #28
  40a6b2:	4403      	add	r3, r0
  40a6b4:	9305      	str	r3, [sp, #20]
  40a6b6:	4613      	mov	r3, r2
  40a6b8:	4403      	add	r3, r0
  40a6ba:	4405      	add	r5, r0
  40a6bc:	9302      	str	r3, [sp, #8]
  40a6be:	9b05      	ldr	r3, [sp, #20]
  40a6c0:	2b00      	cmp	r3, #0
  40a6c2:	dd05      	ble.n	40a6d0 <_dtoa_r+0x4d0>
  40a6c4:	4621      	mov	r1, r4
  40a6c6:	461a      	mov	r2, r3
  40a6c8:	4648      	mov	r0, r9
  40a6ca:	f002 fb37 	bl	40cd3c <__lshift>
  40a6ce:	4604      	mov	r4, r0
  40a6d0:	9b02      	ldr	r3, [sp, #8]
  40a6d2:	2b00      	cmp	r3, #0
  40a6d4:	dd05      	ble.n	40a6e2 <_dtoa_r+0x4e2>
  40a6d6:	4641      	mov	r1, r8
  40a6d8:	461a      	mov	r2, r3
  40a6da:	4648      	mov	r0, r9
  40a6dc:	f002 fb2e 	bl	40cd3c <__lshift>
  40a6e0:	4680      	mov	r8, r0
  40a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a6e4:	2b00      	cmp	r3, #0
  40a6e6:	f040 827c 	bne.w	40abe2 <_dtoa_r+0x9e2>
  40a6ea:	9b06      	ldr	r3, [sp, #24]
  40a6ec:	2b00      	cmp	r3, #0
  40a6ee:	f340 8295 	ble.w	40ac1c <_dtoa_r+0xa1c>
  40a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a6f4:	2b00      	cmp	r3, #0
  40a6f6:	f040 81f5 	bne.w	40aae4 <_dtoa_r+0x8e4>
  40a6fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a6fe:	9f06      	ldr	r7, [sp, #24]
  40a700:	465d      	mov	r5, fp
  40a702:	e002      	b.n	40a70a <_dtoa_r+0x50a>
  40a704:	f002 f94e 	bl	40c9a4 <__multadd>
  40a708:	4604      	mov	r4, r0
  40a70a:	4641      	mov	r1, r8
  40a70c:	4620      	mov	r0, r4
  40a70e:	f7ff fce3 	bl	40a0d8 <quorem>
  40a712:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a716:	f805 ab01 	strb.w	sl, [r5], #1
  40a71a:	ebcb 0305 	rsb	r3, fp, r5
  40a71e:	42bb      	cmp	r3, r7
  40a720:	f04f 020a 	mov.w	r2, #10
  40a724:	f04f 0300 	mov.w	r3, #0
  40a728:	4621      	mov	r1, r4
  40a72a:	4648      	mov	r0, r9
  40a72c:	dbea      	blt.n	40a704 <_dtoa_r+0x504>
  40a72e:	9b07      	ldr	r3, [sp, #28]
  40a730:	9a06      	ldr	r2, [sp, #24]
  40a732:	2a01      	cmp	r2, #1
  40a734:	bfac      	ite	ge
  40a736:	189b      	addge	r3, r3, r2
  40a738:	3301      	addlt	r3, #1
  40a73a:	461d      	mov	r5, r3
  40a73c:	f04f 0b00 	mov.w	fp, #0
  40a740:	4621      	mov	r1, r4
  40a742:	2201      	movs	r2, #1
  40a744:	4648      	mov	r0, r9
  40a746:	f002 faf9 	bl	40cd3c <__lshift>
  40a74a:	4641      	mov	r1, r8
  40a74c:	9008      	str	r0, [sp, #32]
  40a74e:	f002 fb4d 	bl	40cdec <__mcmp>
  40a752:	2800      	cmp	r0, #0
  40a754:	f340 830d 	ble.w	40ad72 <_dtoa_r+0xb72>
  40a758:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40a75c:	9907      	ldr	r1, [sp, #28]
  40a75e:	1e6b      	subs	r3, r5, #1
  40a760:	e004      	b.n	40a76c <_dtoa_r+0x56c>
  40a762:	428b      	cmp	r3, r1
  40a764:	f000 8278 	beq.w	40ac58 <_dtoa_r+0xa58>
  40a768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40a76c:	2a39      	cmp	r2, #57	; 0x39
  40a76e:	f103 0501 	add.w	r5, r3, #1
  40a772:	d0f6      	beq.n	40a762 <_dtoa_r+0x562>
  40a774:	3201      	adds	r2, #1
  40a776:	701a      	strb	r2, [r3, #0]
  40a778:	4641      	mov	r1, r8
  40a77a:	4648      	mov	r0, r9
  40a77c:	f002 f908 	bl	40c990 <_Bfree>
  40a780:	2e00      	cmp	r6, #0
  40a782:	f43f af08 	beq.w	40a596 <_dtoa_r+0x396>
  40a786:	f1bb 0f00 	cmp.w	fp, #0
  40a78a:	d005      	beq.n	40a798 <_dtoa_r+0x598>
  40a78c:	45b3      	cmp	fp, r6
  40a78e:	d003      	beq.n	40a798 <_dtoa_r+0x598>
  40a790:	4659      	mov	r1, fp
  40a792:	4648      	mov	r0, r9
  40a794:	f002 f8fc 	bl	40c990 <_Bfree>
  40a798:	4631      	mov	r1, r6
  40a79a:	4648      	mov	r0, r9
  40a79c:	f002 f8f8 	bl	40c990 <_Bfree>
  40a7a0:	e6f9      	b.n	40a596 <_dtoa_r+0x396>
  40a7a2:	2301      	movs	r3, #1
  40a7a4:	930c      	str	r3, [sp, #48]	; 0x30
  40a7a6:	e5e3      	b.n	40a370 <_dtoa_r+0x170>
  40a7a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40a7ac:	4640      	mov	r0, r8
  40a7ae:	f003 fb13 	bl	40ddd8 <__aeabi_i2d>
  40a7b2:	4602      	mov	r2, r0
  40a7b4:	460b      	mov	r3, r1
  40a7b6:	4630      	mov	r0, r6
  40a7b8:	4639      	mov	r1, r7
  40a7ba:	f003 fddb 	bl	40e374 <__aeabi_dcmpeq>
  40a7be:	2800      	cmp	r0, #0
  40a7c0:	f47f adc2 	bne.w	40a348 <_dtoa_r+0x148>
  40a7c4:	f108 33ff 	add.w	r3, r8, #4294967295
  40a7c8:	9304      	str	r3, [sp, #16]
  40a7ca:	e5bd      	b.n	40a348 <_dtoa_r+0x148>
  40a7cc:	9a05      	ldr	r2, [sp, #20]
  40a7ce:	9b04      	ldr	r3, [sp, #16]
  40a7d0:	1ad2      	subs	r2, r2, r3
  40a7d2:	425b      	negs	r3, r3
  40a7d4:	930a      	str	r3, [sp, #40]	; 0x28
  40a7d6:	2300      	movs	r3, #0
  40a7d8:	9205      	str	r2, [sp, #20]
  40a7da:	930b      	str	r3, [sp, #44]	; 0x2c
  40a7dc:	e5da      	b.n	40a394 <_dtoa_r+0x194>
  40a7de:	425b      	negs	r3, r3
  40a7e0:	9305      	str	r3, [sp, #20]
  40a7e2:	2300      	movs	r3, #0
  40a7e4:	9302      	str	r3, [sp, #8]
  40a7e6:	e5ca      	b.n	40a37e <_dtoa_r+0x17e>
  40a7e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a7ea:	9d05      	ldr	r5, [sp, #20]
  40a7ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40a7ee:	e705      	b.n	40a5fc <_dtoa_r+0x3fc>
  40a7f0:	f1c3 0820 	rsb	r8, r3, #32
  40a7f4:	fa0a f008 	lsl.w	r0, sl, r8
  40a7f8:	e573      	b.n	40a2e2 <_dtoa_r+0xe2>
  40a7fa:	900c      	str	r0, [sp, #48]	; 0x30
  40a7fc:	e5b8      	b.n	40a370 <_dtoa_r+0x170>
  40a7fe:	bf00      	nop
  40a800:	40240000 	.word	0x40240000
  40a804:	2300      	movs	r3, #0
  40a806:	9309      	str	r3, [sp, #36]	; 0x24
  40a808:	9b04      	ldr	r3, [sp, #16]
  40a80a:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40a80c:	4413      	add	r3, r2
  40a80e:	930d      	str	r3, [sp, #52]	; 0x34
  40a810:	3301      	adds	r3, #1
  40a812:	2b00      	cmp	r3, #0
  40a814:	9306      	str	r3, [sp, #24]
  40a816:	f340 8283 	ble.w	40ad20 <_dtoa_r+0xb20>
  40a81a:	9c06      	ldr	r4, [sp, #24]
  40a81c:	4626      	mov	r6, r4
  40a81e:	2100      	movs	r1, #0
  40a820:	2e17      	cmp	r6, #23
  40a822:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a826:	d90b      	bls.n	40a840 <_dtoa_r+0x640>
  40a828:	2201      	movs	r2, #1
  40a82a:	2304      	movs	r3, #4
  40a82c:	005b      	lsls	r3, r3, #1
  40a82e:	f103 0014 	add.w	r0, r3, #20
  40a832:	42b0      	cmp	r0, r6
  40a834:	4611      	mov	r1, r2
  40a836:	f102 0201 	add.w	r2, r2, #1
  40a83a:	d9f7      	bls.n	40a82c <_dtoa_r+0x62c>
  40a83c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40a840:	4648      	mov	r0, r9
  40a842:	f002 f87f 	bl	40c944 <_Balloc>
  40a846:	2c0e      	cmp	r4, #14
  40a848:	9007      	str	r0, [sp, #28]
  40a84a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40a84e:	f63f ade0 	bhi.w	40a412 <_dtoa_r+0x212>
  40a852:	2d00      	cmp	r5, #0
  40a854:	f43f addd 	beq.w	40a412 <_dtoa_r+0x212>
  40a858:	9904      	ldr	r1, [sp, #16]
  40a85a:	4657      	mov	r7, sl
  40a85c:	46d8      	mov	r8, fp
  40a85e:	2900      	cmp	r1, #0
  40a860:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40a864:	f340 8292 	ble.w	40ad8c <_dtoa_r+0xb8c>
  40a868:	4b91      	ldr	r3, [pc, #580]	; (40aab0 <_dtoa_r+0x8b0>)
  40a86a:	f001 020f 	and.w	r2, r1, #15
  40a86e:	110e      	asrs	r6, r1, #4
  40a870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a874:	06f0      	lsls	r0, r6, #27
  40a876:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a87a:	f140 824c 	bpl.w	40ad16 <_dtoa_r+0xb16>
  40a87e:	4b8d      	ldr	r3, [pc, #564]	; (40aab4 <_dtoa_r+0x8b4>)
  40a880:	4650      	mov	r0, sl
  40a882:	4659      	mov	r1, fp
  40a884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40a888:	f003 fc36 	bl	40e0f8 <__aeabi_ddiv>
  40a88c:	f006 060f 	and.w	r6, r6, #15
  40a890:	4682      	mov	sl, r0
  40a892:	468b      	mov	fp, r1
  40a894:	f04f 0803 	mov.w	r8, #3
  40a898:	b186      	cbz	r6, 40a8bc <_dtoa_r+0x6bc>
  40a89a:	4f86      	ldr	r7, [pc, #536]	; (40aab4 <_dtoa_r+0x8b4>)
  40a89c:	07f1      	lsls	r1, r6, #31
  40a89e:	d509      	bpl.n	40a8b4 <_dtoa_r+0x6b4>
  40a8a0:	4620      	mov	r0, r4
  40a8a2:	4629      	mov	r1, r5
  40a8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
  40a8a8:	f003 fafc 	bl	40dea4 <__aeabi_dmul>
  40a8ac:	f108 0801 	add.w	r8, r8, #1
  40a8b0:	4604      	mov	r4, r0
  40a8b2:	460d      	mov	r5, r1
  40a8b4:	1076      	asrs	r6, r6, #1
  40a8b6:	f107 0708 	add.w	r7, r7, #8
  40a8ba:	d1ef      	bne.n	40a89c <_dtoa_r+0x69c>
  40a8bc:	4622      	mov	r2, r4
  40a8be:	462b      	mov	r3, r5
  40a8c0:	4650      	mov	r0, sl
  40a8c2:	4659      	mov	r1, fp
  40a8c4:	f003 fc18 	bl	40e0f8 <__aeabi_ddiv>
  40a8c8:	4606      	mov	r6, r0
  40a8ca:	460f      	mov	r7, r1
  40a8cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a8ce:	b143      	cbz	r3, 40a8e2 <_dtoa_r+0x6e2>
  40a8d0:	2200      	movs	r2, #0
  40a8d2:	4b79      	ldr	r3, [pc, #484]	; (40aab8 <_dtoa_r+0x8b8>)
  40a8d4:	4630      	mov	r0, r6
  40a8d6:	4639      	mov	r1, r7
  40a8d8:	f003 fd56 	bl	40e388 <__aeabi_dcmplt>
  40a8dc:	2800      	cmp	r0, #0
  40a8de:	f040 8320 	bne.w	40af22 <_dtoa_r+0xd22>
  40a8e2:	4640      	mov	r0, r8
  40a8e4:	f003 fa78 	bl	40ddd8 <__aeabi_i2d>
  40a8e8:	4632      	mov	r2, r6
  40a8ea:	463b      	mov	r3, r7
  40a8ec:	f003 fada 	bl	40dea4 <__aeabi_dmul>
  40a8f0:	4b72      	ldr	r3, [pc, #456]	; (40aabc <_dtoa_r+0x8bc>)
  40a8f2:	2200      	movs	r2, #0
  40a8f4:	f003 f924 	bl	40db40 <__adddf3>
  40a8f8:	9b06      	ldr	r3, [sp, #24]
  40a8fa:	4604      	mov	r4, r0
  40a8fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40a900:	2b00      	cmp	r3, #0
  40a902:	f000 81df 	beq.w	40acc4 <_dtoa_r+0xac4>
  40a906:	9b04      	ldr	r3, [sp, #16]
  40a908:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40a90c:	9311      	str	r3, [sp, #68]	; 0x44
  40a90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a910:	2b00      	cmp	r3, #0
  40a912:	f000 8297 	beq.w	40ae44 <_dtoa_r+0xc44>
  40a916:	4b66      	ldr	r3, [pc, #408]	; (40aab0 <_dtoa_r+0x8b0>)
  40a918:	4969      	ldr	r1, [pc, #420]	; (40aac0 <_dtoa_r+0x8c0>)
  40a91a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40a91e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40a922:	2000      	movs	r0, #0
  40a924:	f003 fbe8 	bl	40e0f8 <__aeabi_ddiv>
  40a928:	4622      	mov	r2, r4
  40a92a:	462b      	mov	r3, r5
  40a92c:	f003 f906 	bl	40db3c <__aeabi_dsub>
  40a930:	4682      	mov	sl, r0
  40a932:	468b      	mov	fp, r1
  40a934:	4630      	mov	r0, r6
  40a936:	4639      	mov	r1, r7
  40a938:	f003 fd64 	bl	40e404 <__aeabi_d2iz>
  40a93c:	4604      	mov	r4, r0
  40a93e:	f003 fa4b 	bl	40ddd8 <__aeabi_i2d>
  40a942:	4602      	mov	r2, r0
  40a944:	460b      	mov	r3, r1
  40a946:	4630      	mov	r0, r6
  40a948:	4639      	mov	r1, r7
  40a94a:	f003 f8f7 	bl	40db3c <__aeabi_dsub>
  40a94e:	3430      	adds	r4, #48	; 0x30
  40a950:	9d07      	ldr	r5, [sp, #28]
  40a952:	b2e4      	uxtb	r4, r4
  40a954:	4606      	mov	r6, r0
  40a956:	460f      	mov	r7, r1
  40a958:	702c      	strb	r4, [r5, #0]
  40a95a:	4602      	mov	r2, r0
  40a95c:	460b      	mov	r3, r1
  40a95e:	4650      	mov	r0, sl
  40a960:	4659      	mov	r1, fp
  40a962:	3501      	adds	r5, #1
  40a964:	f003 fd2e 	bl	40e3c4 <__aeabi_dcmpgt>
  40a968:	2800      	cmp	r0, #0
  40a96a:	d14c      	bne.n	40aa06 <_dtoa_r+0x806>
  40a96c:	4632      	mov	r2, r6
  40a96e:	463b      	mov	r3, r7
  40a970:	2000      	movs	r0, #0
  40a972:	4951      	ldr	r1, [pc, #324]	; (40aab8 <_dtoa_r+0x8b8>)
  40a974:	f003 f8e2 	bl	40db3c <__aeabi_dsub>
  40a978:	4602      	mov	r2, r0
  40a97a:	460b      	mov	r3, r1
  40a97c:	4650      	mov	r0, sl
  40a97e:	4659      	mov	r1, fp
  40a980:	f003 fd20 	bl	40e3c4 <__aeabi_dcmpgt>
  40a984:	2800      	cmp	r0, #0
  40a986:	f040 830d 	bne.w	40afa4 <_dtoa_r+0xda4>
  40a98a:	f1b8 0f01 	cmp.w	r8, #1
  40a98e:	f340 81b3 	ble.w	40acf8 <_dtoa_r+0xaf8>
  40a992:	9b07      	ldr	r3, [sp, #28]
  40a994:	4498      	add	r8, r3
  40a996:	e00d      	b.n	40a9b4 <_dtoa_r+0x7b4>
  40a998:	2000      	movs	r0, #0
  40a99a:	4947      	ldr	r1, [pc, #284]	; (40aab8 <_dtoa_r+0x8b8>)
  40a99c:	f003 f8ce 	bl	40db3c <__aeabi_dsub>
  40a9a0:	4652      	mov	r2, sl
  40a9a2:	465b      	mov	r3, fp
  40a9a4:	f003 fcf0 	bl	40e388 <__aeabi_dcmplt>
  40a9a8:	2800      	cmp	r0, #0
  40a9aa:	f040 82fb 	bne.w	40afa4 <_dtoa_r+0xda4>
  40a9ae:	4545      	cmp	r5, r8
  40a9b0:	f000 81a2 	beq.w	40acf8 <_dtoa_r+0xaf8>
  40a9b4:	4650      	mov	r0, sl
  40a9b6:	4659      	mov	r1, fp
  40a9b8:	2200      	movs	r2, #0
  40a9ba:	4b42      	ldr	r3, [pc, #264]	; (40aac4 <_dtoa_r+0x8c4>)
  40a9bc:	f003 fa72 	bl	40dea4 <__aeabi_dmul>
  40a9c0:	2200      	movs	r2, #0
  40a9c2:	4b40      	ldr	r3, [pc, #256]	; (40aac4 <_dtoa_r+0x8c4>)
  40a9c4:	4682      	mov	sl, r0
  40a9c6:	468b      	mov	fp, r1
  40a9c8:	4630      	mov	r0, r6
  40a9ca:	4639      	mov	r1, r7
  40a9cc:	f003 fa6a 	bl	40dea4 <__aeabi_dmul>
  40a9d0:	460f      	mov	r7, r1
  40a9d2:	4606      	mov	r6, r0
  40a9d4:	f003 fd16 	bl	40e404 <__aeabi_d2iz>
  40a9d8:	4604      	mov	r4, r0
  40a9da:	f003 f9fd 	bl	40ddd8 <__aeabi_i2d>
  40a9de:	4602      	mov	r2, r0
  40a9e0:	460b      	mov	r3, r1
  40a9e2:	4630      	mov	r0, r6
  40a9e4:	4639      	mov	r1, r7
  40a9e6:	f003 f8a9 	bl	40db3c <__aeabi_dsub>
  40a9ea:	3430      	adds	r4, #48	; 0x30
  40a9ec:	b2e4      	uxtb	r4, r4
  40a9ee:	4652      	mov	r2, sl
  40a9f0:	465b      	mov	r3, fp
  40a9f2:	f805 4b01 	strb.w	r4, [r5], #1
  40a9f6:	4606      	mov	r6, r0
  40a9f8:	460f      	mov	r7, r1
  40a9fa:	f003 fcc5 	bl	40e388 <__aeabi_dcmplt>
  40a9fe:	4632      	mov	r2, r6
  40aa00:	463b      	mov	r3, r7
  40aa02:	2800      	cmp	r0, #0
  40aa04:	d0c8      	beq.n	40a998 <_dtoa_r+0x798>
  40aa06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40aa08:	9304      	str	r3, [sp, #16]
  40aa0a:	e5c4      	b.n	40a596 <_dtoa_r+0x396>
  40aa0c:	2300      	movs	r3, #0
  40aa0e:	9309      	str	r3, [sp, #36]	; 0x24
  40aa10:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aa12:	2b00      	cmp	r3, #0
  40aa14:	f340 8189 	ble.w	40ad2a <_dtoa_r+0xb2a>
  40aa18:	461e      	mov	r6, r3
  40aa1a:	461c      	mov	r4, r3
  40aa1c:	930d      	str	r3, [sp, #52]	; 0x34
  40aa1e:	9306      	str	r3, [sp, #24]
  40aa20:	e6fd      	b.n	40a81e <_dtoa_r+0x61e>
  40aa22:	2301      	movs	r3, #1
  40aa24:	9309      	str	r3, [sp, #36]	; 0x24
  40aa26:	e7f3      	b.n	40aa10 <_dtoa_r+0x810>
  40aa28:	9408      	str	r4, [sp, #32]
  40aa2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40aa2c:	9908      	ldr	r1, [sp, #32]
  40aa2e:	4648      	mov	r0, r9
  40aa30:	f002 f934 	bl	40cc9c <__pow5mult>
  40aa34:	4604      	mov	r4, r0
  40aa36:	e611      	b.n	40a65c <_dtoa_r+0x45c>
  40aa38:	9b06      	ldr	r3, [sp, #24]
  40aa3a:	2b00      	cmp	r3, #0
  40aa3c:	f73f acfc 	bgt.w	40a438 <_dtoa_r+0x238>
  40aa40:	f040 82da 	bne.w	40aff8 <_dtoa_r+0xdf8>
  40aa44:	2200      	movs	r2, #0
  40aa46:	4b20      	ldr	r3, [pc, #128]	; (40aac8 <_dtoa_r+0x8c8>)
  40aa48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40aa4c:	f003 fa2a 	bl	40dea4 <__aeabi_dmul>
  40aa50:	4652      	mov	r2, sl
  40aa52:	465b      	mov	r3, fp
  40aa54:	f003 fcac 	bl	40e3b0 <__aeabi_dcmpge>
  40aa58:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40aa5c:	4646      	mov	r6, r8
  40aa5e:	2800      	cmp	r0, #0
  40aa60:	f000 80f2 	beq.w	40ac48 <_dtoa_r+0xa48>
  40aa64:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aa66:	9d07      	ldr	r5, [sp, #28]
  40aa68:	43db      	mvns	r3, r3
  40aa6a:	9304      	str	r3, [sp, #16]
  40aa6c:	4641      	mov	r1, r8
  40aa6e:	4648      	mov	r0, r9
  40aa70:	f001 ff8e 	bl	40c990 <_Bfree>
  40aa74:	2e00      	cmp	r6, #0
  40aa76:	f43f ad8e 	beq.w	40a596 <_dtoa_r+0x396>
  40aa7a:	e68d      	b.n	40a798 <_dtoa_r+0x598>
  40aa7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40aa7e:	2a00      	cmp	r2, #0
  40aa80:	f000 8241 	beq.w	40af06 <_dtoa_r+0xd06>
  40aa84:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40aa88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40aa8a:	9d05      	ldr	r5, [sp, #20]
  40aa8c:	e5ab      	b.n	40a5e6 <_dtoa_r+0x3e6>
  40aa8e:	201c      	movs	r0, #28
  40aa90:	9b05      	ldr	r3, [sp, #20]
  40aa92:	4403      	add	r3, r0
  40aa94:	9305      	str	r3, [sp, #20]
  40aa96:	9b02      	ldr	r3, [sp, #8]
  40aa98:	4403      	add	r3, r0
  40aa9a:	4405      	add	r5, r0
  40aa9c:	9302      	str	r3, [sp, #8]
  40aa9e:	e60e      	b.n	40a6be <_dtoa_r+0x4be>
  40aaa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40aaa2:	2b01      	cmp	r3, #1
  40aaa4:	f340 8282 	ble.w	40afac <_dtoa_r+0xdac>
  40aaa8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40aaaa:	2001      	movs	r0, #1
  40aaac:	e5f3      	b.n	40a696 <_dtoa_r+0x496>
  40aaae:	bf00      	nop
  40aab0:	004101a0 	.word	0x004101a0
  40aab4:	00410268 	.word	0x00410268
  40aab8:	3ff00000 	.word	0x3ff00000
  40aabc:	401c0000 	.word	0x401c0000
  40aac0:	3fe00000 	.word	0x3fe00000
  40aac4:	40240000 	.word	0x40240000
  40aac8:	40140000 	.word	0x40140000
  40aacc:	4631      	mov	r1, r6
  40aace:	2300      	movs	r3, #0
  40aad0:	220a      	movs	r2, #10
  40aad2:	4648      	mov	r0, r9
  40aad4:	f001 ff66 	bl	40c9a4 <__multadd>
  40aad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aada:	2b00      	cmp	r3, #0
  40aadc:	4606      	mov	r6, r0
  40aade:	f340 8297 	ble.w	40b010 <_dtoa_r+0xe10>
  40aae2:	9306      	str	r3, [sp, #24]
  40aae4:	2d00      	cmp	r5, #0
  40aae6:	dd05      	ble.n	40aaf4 <_dtoa_r+0x8f4>
  40aae8:	4631      	mov	r1, r6
  40aaea:	462a      	mov	r2, r5
  40aaec:	4648      	mov	r0, r9
  40aaee:	f002 f925 	bl	40cd3c <__lshift>
  40aaf2:	4606      	mov	r6, r0
  40aaf4:	2f00      	cmp	r7, #0
  40aaf6:	f040 817c 	bne.w	40adf2 <_dtoa_r+0xbf2>
  40aafa:	9605      	str	r6, [sp, #20]
  40aafc:	9b06      	ldr	r3, [sp, #24]
  40aafe:	9a07      	ldr	r2, [sp, #28]
  40ab00:	f8dd b014 	ldr.w	fp, [sp, #20]
  40ab04:	3b01      	subs	r3, #1
  40ab06:	18d3      	adds	r3, r2, r3
  40ab08:	9308      	str	r3, [sp, #32]
  40ab0a:	f00a 0301 	and.w	r3, sl, #1
  40ab0e:	9309      	str	r3, [sp, #36]	; 0x24
  40ab10:	4617      	mov	r7, r2
  40ab12:	46c2      	mov	sl, r8
  40ab14:	4651      	mov	r1, sl
  40ab16:	4620      	mov	r0, r4
  40ab18:	f7ff fade 	bl	40a0d8 <quorem>
  40ab1c:	4631      	mov	r1, r6
  40ab1e:	4605      	mov	r5, r0
  40ab20:	4620      	mov	r0, r4
  40ab22:	f002 f963 	bl	40cdec <__mcmp>
  40ab26:	465a      	mov	r2, fp
  40ab28:	9002      	str	r0, [sp, #8]
  40ab2a:	4651      	mov	r1, sl
  40ab2c:	4648      	mov	r0, r9
  40ab2e:	f002 f97d 	bl	40ce2c <__mdiff>
  40ab32:	68c2      	ldr	r2, [r0, #12]
  40ab34:	4680      	mov	r8, r0
  40ab36:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40ab3a:	2a00      	cmp	r2, #0
  40ab3c:	d149      	bne.n	40abd2 <_dtoa_r+0x9d2>
  40ab3e:	4601      	mov	r1, r0
  40ab40:	4620      	mov	r0, r4
  40ab42:	9306      	str	r3, [sp, #24]
  40ab44:	f002 f952 	bl	40cdec <__mcmp>
  40ab48:	4641      	mov	r1, r8
  40ab4a:	9005      	str	r0, [sp, #20]
  40ab4c:	4648      	mov	r0, r9
  40ab4e:	f001 ff1f 	bl	40c990 <_Bfree>
  40ab52:	9a05      	ldr	r2, [sp, #20]
  40ab54:	9b06      	ldr	r3, [sp, #24]
  40ab56:	b92a      	cbnz	r2, 40ab64 <_dtoa_r+0x964>
  40ab58:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ab5a:	b919      	cbnz	r1, 40ab64 <_dtoa_r+0x964>
  40ab5c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ab5e:	2900      	cmp	r1, #0
  40ab60:	f000 8236 	beq.w	40afd0 <_dtoa_r+0xdd0>
  40ab64:	9902      	ldr	r1, [sp, #8]
  40ab66:	2900      	cmp	r1, #0
  40ab68:	f2c0 80e4 	blt.w	40ad34 <_dtoa_r+0xb34>
  40ab6c:	d105      	bne.n	40ab7a <_dtoa_r+0x97a>
  40ab6e:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ab70:	b919      	cbnz	r1, 40ab7a <_dtoa_r+0x97a>
  40ab72:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ab74:	2900      	cmp	r1, #0
  40ab76:	f000 80dd 	beq.w	40ad34 <_dtoa_r+0xb34>
  40ab7a:	2a00      	cmp	r2, #0
  40ab7c:	f300 814d 	bgt.w	40ae1a <_dtoa_r+0xc1a>
  40ab80:	9a08      	ldr	r2, [sp, #32]
  40ab82:	703b      	strb	r3, [r7, #0]
  40ab84:	f107 0801 	add.w	r8, r7, #1
  40ab88:	4297      	cmp	r7, r2
  40ab8a:	4645      	mov	r5, r8
  40ab8c:	f000 8154 	beq.w	40ae38 <_dtoa_r+0xc38>
  40ab90:	4621      	mov	r1, r4
  40ab92:	2300      	movs	r3, #0
  40ab94:	220a      	movs	r2, #10
  40ab96:	4648      	mov	r0, r9
  40ab98:	f001 ff04 	bl	40c9a4 <__multadd>
  40ab9c:	455e      	cmp	r6, fp
  40ab9e:	4604      	mov	r4, r0
  40aba0:	4631      	mov	r1, r6
  40aba2:	f04f 0300 	mov.w	r3, #0
  40aba6:	f04f 020a 	mov.w	r2, #10
  40abaa:	4648      	mov	r0, r9
  40abac:	d00b      	beq.n	40abc6 <_dtoa_r+0x9c6>
  40abae:	f001 fef9 	bl	40c9a4 <__multadd>
  40abb2:	4659      	mov	r1, fp
  40abb4:	4606      	mov	r6, r0
  40abb6:	2300      	movs	r3, #0
  40abb8:	220a      	movs	r2, #10
  40abba:	4648      	mov	r0, r9
  40abbc:	f001 fef2 	bl	40c9a4 <__multadd>
  40abc0:	4647      	mov	r7, r8
  40abc2:	4683      	mov	fp, r0
  40abc4:	e7a6      	b.n	40ab14 <_dtoa_r+0x914>
  40abc6:	f001 feed 	bl	40c9a4 <__multadd>
  40abca:	4647      	mov	r7, r8
  40abcc:	4606      	mov	r6, r0
  40abce:	4683      	mov	fp, r0
  40abd0:	e7a0      	b.n	40ab14 <_dtoa_r+0x914>
  40abd2:	4601      	mov	r1, r0
  40abd4:	4648      	mov	r0, r9
  40abd6:	9305      	str	r3, [sp, #20]
  40abd8:	f001 feda 	bl	40c990 <_Bfree>
  40abdc:	2201      	movs	r2, #1
  40abde:	9b05      	ldr	r3, [sp, #20]
  40abe0:	e7c0      	b.n	40ab64 <_dtoa_r+0x964>
  40abe2:	4641      	mov	r1, r8
  40abe4:	4620      	mov	r0, r4
  40abe6:	f002 f901 	bl	40cdec <__mcmp>
  40abea:	2800      	cmp	r0, #0
  40abec:	f6bf ad7d 	bge.w	40a6ea <_dtoa_r+0x4ea>
  40abf0:	4621      	mov	r1, r4
  40abf2:	9c04      	ldr	r4, [sp, #16]
  40abf4:	2300      	movs	r3, #0
  40abf6:	3c01      	subs	r4, #1
  40abf8:	220a      	movs	r2, #10
  40abfa:	4648      	mov	r0, r9
  40abfc:	9404      	str	r4, [sp, #16]
  40abfe:	f001 fed1 	bl	40c9a4 <__multadd>
  40ac02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ac04:	4604      	mov	r4, r0
  40ac06:	2b00      	cmp	r3, #0
  40ac08:	f47f af60 	bne.w	40aacc <_dtoa_r+0x8cc>
  40ac0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ac0e:	2b00      	cmp	r3, #0
  40ac10:	f340 81f6 	ble.w	40b000 <_dtoa_r+0xe00>
  40ac14:	9306      	str	r3, [sp, #24]
  40ac16:	e570      	b.n	40a6fa <_dtoa_r+0x4fa>
  40ac18:	9c08      	ldr	r4, [sp, #32]
  40ac1a:	e51f      	b.n	40a65c <_dtoa_r+0x45c>
  40ac1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ac1e:	2b02      	cmp	r3, #2
  40ac20:	f77f ad67 	ble.w	40a6f2 <_dtoa_r+0x4f2>
  40ac24:	9b06      	ldr	r3, [sp, #24]
  40ac26:	2b00      	cmp	r3, #0
  40ac28:	f040 8179 	bne.w	40af1e <_dtoa_r+0xd1e>
  40ac2c:	4641      	mov	r1, r8
  40ac2e:	2205      	movs	r2, #5
  40ac30:	4648      	mov	r0, r9
  40ac32:	f001 feb7 	bl	40c9a4 <__multadd>
  40ac36:	4601      	mov	r1, r0
  40ac38:	4680      	mov	r8, r0
  40ac3a:	4620      	mov	r0, r4
  40ac3c:	f002 f8d6 	bl	40cdec <__mcmp>
  40ac40:	2800      	cmp	r0, #0
  40ac42:	9408      	str	r4, [sp, #32]
  40ac44:	f77f af0e 	ble.w	40aa64 <_dtoa_r+0x864>
  40ac48:	9a04      	ldr	r2, [sp, #16]
  40ac4a:	9907      	ldr	r1, [sp, #28]
  40ac4c:	2331      	movs	r3, #49	; 0x31
  40ac4e:	3201      	adds	r2, #1
  40ac50:	9204      	str	r2, [sp, #16]
  40ac52:	700b      	strb	r3, [r1, #0]
  40ac54:	1c4d      	adds	r5, r1, #1
  40ac56:	e709      	b.n	40aa6c <_dtoa_r+0x86c>
  40ac58:	9a04      	ldr	r2, [sp, #16]
  40ac5a:	3201      	adds	r2, #1
  40ac5c:	9204      	str	r2, [sp, #16]
  40ac5e:	9a07      	ldr	r2, [sp, #28]
  40ac60:	2331      	movs	r3, #49	; 0x31
  40ac62:	7013      	strb	r3, [r2, #0]
  40ac64:	e588      	b.n	40a778 <_dtoa_r+0x578>
  40ac66:	2301      	movs	r3, #1
  40ac68:	9309      	str	r3, [sp, #36]	; 0x24
  40ac6a:	e5cd      	b.n	40a808 <_dtoa_r+0x608>
  40ac6c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ac70:	e491      	b.n	40a596 <_dtoa_r+0x396>
  40ac72:	f1ba 0f00 	cmp.w	sl, #0
  40ac76:	f47f ad04 	bne.w	40a682 <_dtoa_r+0x482>
  40ac7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40ac7e:	2b00      	cmp	r3, #0
  40ac80:	f040 813f 	bne.w	40af02 <_dtoa_r+0xd02>
  40ac84:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40ac88:	0d3f      	lsrs	r7, r7, #20
  40ac8a:	053f      	lsls	r7, r7, #20
  40ac8c:	b137      	cbz	r7, 40ac9c <_dtoa_r+0xa9c>
  40ac8e:	9b05      	ldr	r3, [sp, #20]
  40ac90:	3301      	adds	r3, #1
  40ac92:	9305      	str	r3, [sp, #20]
  40ac94:	9b02      	ldr	r3, [sp, #8]
  40ac96:	3301      	adds	r3, #1
  40ac98:	9302      	str	r3, [sp, #8]
  40ac9a:	2701      	movs	r7, #1
  40ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ac9e:	2001      	movs	r0, #1
  40aca0:	2b00      	cmp	r3, #0
  40aca2:	f43f acf8 	beq.w	40a696 <_dtoa_r+0x496>
  40aca6:	e4ed      	b.n	40a684 <_dtoa_r+0x484>
  40aca8:	4640      	mov	r0, r8
  40acaa:	f003 f895 	bl	40ddd8 <__aeabi_i2d>
  40acae:	4632      	mov	r2, r6
  40acb0:	463b      	mov	r3, r7
  40acb2:	f003 f8f7 	bl	40dea4 <__aeabi_dmul>
  40acb6:	2200      	movs	r2, #0
  40acb8:	4bbf      	ldr	r3, [pc, #764]	; (40afb8 <_dtoa_r+0xdb8>)
  40acba:	f002 ff41 	bl	40db40 <__adddf3>
  40acbe:	4604      	mov	r4, r0
  40acc0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40acc4:	4630      	mov	r0, r6
  40acc6:	4639      	mov	r1, r7
  40acc8:	2200      	movs	r2, #0
  40acca:	4bbc      	ldr	r3, [pc, #752]	; (40afbc <_dtoa_r+0xdbc>)
  40accc:	f002 ff36 	bl	40db3c <__aeabi_dsub>
  40acd0:	4622      	mov	r2, r4
  40acd2:	462b      	mov	r3, r5
  40acd4:	4606      	mov	r6, r0
  40acd6:	460f      	mov	r7, r1
  40acd8:	f003 fb74 	bl	40e3c4 <__aeabi_dcmpgt>
  40acdc:	4680      	mov	r8, r0
  40acde:	2800      	cmp	r0, #0
  40ace0:	f040 8105 	bne.w	40aeee <_dtoa_r+0xcee>
  40ace4:	4622      	mov	r2, r4
  40ace6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40acea:	4630      	mov	r0, r6
  40acec:	4639      	mov	r1, r7
  40acee:	f003 fb4b 	bl	40e388 <__aeabi_dcmplt>
  40acf2:	b108      	cbz	r0, 40acf8 <_dtoa_r+0xaf8>
  40acf4:	4646      	mov	r6, r8
  40acf6:	e6b5      	b.n	40aa64 <_dtoa_r+0x864>
  40acf8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40acfc:	f7ff bb89 	b.w	40a412 <_dtoa_r+0x212>
  40ad00:	9807      	ldr	r0, [sp, #28]
  40ad02:	f7ff baae 	b.w	40a262 <_dtoa_r+0x62>
  40ad06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ad08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ad0a:	970a      	str	r7, [sp, #40]	; 0x28
  40ad0c:	1afb      	subs	r3, r7, r3
  40ad0e:	441a      	add	r2, r3
  40ad10:	920b      	str	r2, [sp, #44]	; 0x2c
  40ad12:	2700      	movs	r7, #0
  40ad14:	e461      	b.n	40a5da <_dtoa_r+0x3da>
  40ad16:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40ad1a:	f04f 0802 	mov.w	r8, #2
  40ad1e:	e5bb      	b.n	40a898 <_dtoa_r+0x698>
  40ad20:	461c      	mov	r4, r3
  40ad22:	2100      	movs	r1, #0
  40ad24:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40ad28:	e58a      	b.n	40a840 <_dtoa_r+0x640>
  40ad2a:	2401      	movs	r4, #1
  40ad2c:	9421      	str	r4, [sp, #132]	; 0x84
  40ad2e:	940d      	str	r4, [sp, #52]	; 0x34
  40ad30:	9406      	str	r4, [sp, #24]
  40ad32:	e7f6      	b.n	40ad22 <_dtoa_r+0xb22>
  40ad34:	2a00      	cmp	r2, #0
  40ad36:	46d0      	mov	r8, sl
  40ad38:	f8cd b014 	str.w	fp, [sp, #20]
  40ad3c:	469a      	mov	sl, r3
  40ad3e:	dd11      	ble.n	40ad64 <_dtoa_r+0xb64>
  40ad40:	4621      	mov	r1, r4
  40ad42:	2201      	movs	r2, #1
  40ad44:	4648      	mov	r0, r9
  40ad46:	f001 fff9 	bl	40cd3c <__lshift>
  40ad4a:	4641      	mov	r1, r8
  40ad4c:	4604      	mov	r4, r0
  40ad4e:	f002 f84d 	bl	40cdec <__mcmp>
  40ad52:	2800      	cmp	r0, #0
  40ad54:	f340 8149 	ble.w	40afea <_dtoa_r+0xdea>
  40ad58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40ad5c:	f000 8106 	beq.w	40af6c <_dtoa_r+0xd6c>
  40ad60:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40ad64:	46b3      	mov	fp, r6
  40ad66:	f887 a000 	strb.w	sl, [r7]
  40ad6a:	1c7d      	adds	r5, r7, #1
  40ad6c:	9e05      	ldr	r6, [sp, #20]
  40ad6e:	9408      	str	r4, [sp, #32]
  40ad70:	e502      	b.n	40a778 <_dtoa_r+0x578>
  40ad72:	d104      	bne.n	40ad7e <_dtoa_r+0xb7e>
  40ad74:	f01a 0f01 	tst.w	sl, #1
  40ad78:	d001      	beq.n	40ad7e <_dtoa_r+0xb7e>
  40ad7a:	e4ed      	b.n	40a758 <_dtoa_r+0x558>
  40ad7c:	4615      	mov	r5, r2
  40ad7e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ad82:	2b30      	cmp	r3, #48	; 0x30
  40ad84:	f105 32ff 	add.w	r2, r5, #4294967295
  40ad88:	d0f8      	beq.n	40ad7c <_dtoa_r+0xb7c>
  40ad8a:	e4f5      	b.n	40a778 <_dtoa_r+0x578>
  40ad8c:	9b04      	ldr	r3, [sp, #16]
  40ad8e:	425c      	negs	r4, r3
  40ad90:	2c00      	cmp	r4, #0
  40ad92:	f000 80bf 	beq.w	40af14 <_dtoa_r+0xd14>
  40ad96:	4b8a      	ldr	r3, [pc, #552]	; (40afc0 <_dtoa_r+0xdc0>)
  40ad98:	f004 020f 	and.w	r2, r4, #15
  40ad9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ada4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40ada8:	f003 f87c 	bl	40dea4 <__aeabi_dmul>
  40adac:	1124      	asrs	r4, r4, #4
  40adae:	4606      	mov	r6, r0
  40adb0:	460f      	mov	r7, r1
  40adb2:	f000 812a 	beq.w	40b00a <_dtoa_r+0xe0a>
  40adb6:	4d83      	ldr	r5, [pc, #524]	; (40afc4 <_dtoa_r+0xdc4>)
  40adb8:	f04f 0802 	mov.w	r8, #2
  40adbc:	07e2      	lsls	r2, r4, #31
  40adbe:	d509      	bpl.n	40add4 <_dtoa_r+0xbd4>
  40adc0:	4630      	mov	r0, r6
  40adc2:	4639      	mov	r1, r7
  40adc4:	e9d5 2300 	ldrd	r2, r3, [r5]
  40adc8:	f003 f86c 	bl	40dea4 <__aeabi_dmul>
  40adcc:	f108 0801 	add.w	r8, r8, #1
  40add0:	4606      	mov	r6, r0
  40add2:	460f      	mov	r7, r1
  40add4:	1064      	asrs	r4, r4, #1
  40add6:	f105 0508 	add.w	r5, r5, #8
  40adda:	d1ef      	bne.n	40adbc <_dtoa_r+0xbbc>
  40addc:	e576      	b.n	40a8cc <_dtoa_r+0x6cc>
  40adde:	9907      	ldr	r1, [sp, #28]
  40ade0:	2230      	movs	r2, #48	; 0x30
  40ade2:	700a      	strb	r2, [r1, #0]
  40ade4:	9a04      	ldr	r2, [sp, #16]
  40ade6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40adea:	3201      	adds	r2, #1
  40adec:	9204      	str	r2, [sp, #16]
  40adee:	f7ff bbd0 	b.w	40a592 <_dtoa_r+0x392>
  40adf2:	6871      	ldr	r1, [r6, #4]
  40adf4:	4648      	mov	r0, r9
  40adf6:	f001 fda5 	bl	40c944 <_Balloc>
  40adfa:	6933      	ldr	r3, [r6, #16]
  40adfc:	1c9a      	adds	r2, r3, #2
  40adfe:	4605      	mov	r5, r0
  40ae00:	0092      	lsls	r2, r2, #2
  40ae02:	f106 010c 	add.w	r1, r6, #12
  40ae06:	300c      	adds	r0, #12
  40ae08:	f7fb f822 	bl	405e50 <memcpy>
  40ae0c:	4629      	mov	r1, r5
  40ae0e:	2201      	movs	r2, #1
  40ae10:	4648      	mov	r0, r9
  40ae12:	f001 ff93 	bl	40cd3c <__lshift>
  40ae16:	9005      	str	r0, [sp, #20]
  40ae18:	e670      	b.n	40aafc <_dtoa_r+0x8fc>
  40ae1a:	2b39      	cmp	r3, #57	; 0x39
  40ae1c:	f8cd b014 	str.w	fp, [sp, #20]
  40ae20:	46d0      	mov	r8, sl
  40ae22:	f000 80a3 	beq.w	40af6c <_dtoa_r+0xd6c>
  40ae26:	f103 0a01 	add.w	sl, r3, #1
  40ae2a:	46b3      	mov	fp, r6
  40ae2c:	f887 a000 	strb.w	sl, [r7]
  40ae30:	1c7d      	adds	r5, r7, #1
  40ae32:	9e05      	ldr	r6, [sp, #20]
  40ae34:	9408      	str	r4, [sp, #32]
  40ae36:	e49f      	b.n	40a778 <_dtoa_r+0x578>
  40ae38:	465a      	mov	r2, fp
  40ae3a:	46d0      	mov	r8, sl
  40ae3c:	46b3      	mov	fp, r6
  40ae3e:	469a      	mov	sl, r3
  40ae40:	4616      	mov	r6, r2
  40ae42:	e47d      	b.n	40a740 <_dtoa_r+0x540>
  40ae44:	495e      	ldr	r1, [pc, #376]	; (40afc0 <_dtoa_r+0xdc0>)
  40ae46:	f108 3aff 	add.w	sl, r8, #4294967295
  40ae4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40ae4e:	4622      	mov	r2, r4
  40ae50:	462b      	mov	r3, r5
  40ae52:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ae56:	f003 f825 	bl	40dea4 <__aeabi_dmul>
  40ae5a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40ae5e:	4639      	mov	r1, r7
  40ae60:	4630      	mov	r0, r6
  40ae62:	f003 facf 	bl	40e404 <__aeabi_d2iz>
  40ae66:	4604      	mov	r4, r0
  40ae68:	f002 ffb6 	bl	40ddd8 <__aeabi_i2d>
  40ae6c:	4602      	mov	r2, r0
  40ae6e:	460b      	mov	r3, r1
  40ae70:	4630      	mov	r0, r6
  40ae72:	4639      	mov	r1, r7
  40ae74:	f002 fe62 	bl	40db3c <__aeabi_dsub>
  40ae78:	9a07      	ldr	r2, [sp, #28]
  40ae7a:	3430      	adds	r4, #48	; 0x30
  40ae7c:	f1b8 0f01 	cmp.w	r8, #1
  40ae80:	4606      	mov	r6, r0
  40ae82:	460f      	mov	r7, r1
  40ae84:	7014      	strb	r4, [r2, #0]
  40ae86:	f102 0501 	add.w	r5, r2, #1
  40ae8a:	d01e      	beq.n	40aeca <_dtoa_r+0xcca>
  40ae8c:	9b07      	ldr	r3, [sp, #28]
  40ae8e:	eb03 0b08 	add.w	fp, r3, r8
  40ae92:	46a8      	mov	r8, r5
  40ae94:	2200      	movs	r2, #0
  40ae96:	4b4c      	ldr	r3, [pc, #304]	; (40afc8 <_dtoa_r+0xdc8>)
  40ae98:	4630      	mov	r0, r6
  40ae9a:	4639      	mov	r1, r7
  40ae9c:	f003 f802 	bl	40dea4 <__aeabi_dmul>
  40aea0:	460f      	mov	r7, r1
  40aea2:	4606      	mov	r6, r0
  40aea4:	f003 faae 	bl	40e404 <__aeabi_d2iz>
  40aea8:	4604      	mov	r4, r0
  40aeaa:	f002 ff95 	bl	40ddd8 <__aeabi_i2d>
  40aeae:	3430      	adds	r4, #48	; 0x30
  40aeb0:	4602      	mov	r2, r0
  40aeb2:	460b      	mov	r3, r1
  40aeb4:	4630      	mov	r0, r6
  40aeb6:	4639      	mov	r1, r7
  40aeb8:	f002 fe40 	bl	40db3c <__aeabi_dsub>
  40aebc:	f808 4b01 	strb.w	r4, [r8], #1
  40aec0:	45c3      	cmp	fp, r8
  40aec2:	4606      	mov	r6, r0
  40aec4:	460f      	mov	r7, r1
  40aec6:	d1e5      	bne.n	40ae94 <_dtoa_r+0xc94>
  40aec8:	4455      	add	r5, sl
  40aeca:	2200      	movs	r2, #0
  40aecc:	4b3f      	ldr	r3, [pc, #252]	; (40afcc <_dtoa_r+0xdcc>)
  40aece:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40aed2:	f002 fe35 	bl	40db40 <__adddf3>
  40aed6:	4632      	mov	r2, r6
  40aed8:	463b      	mov	r3, r7
  40aeda:	f003 fa55 	bl	40e388 <__aeabi_dcmplt>
  40aede:	2800      	cmp	r0, #0
  40aee0:	d04c      	beq.n	40af7c <_dtoa_r+0xd7c>
  40aee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40aee4:	9304      	str	r3, [sp, #16]
  40aee6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40aeea:	f7ff bb46 	b.w	40a57a <_dtoa_r+0x37a>
  40aeee:	f04f 0800 	mov.w	r8, #0
  40aef2:	4646      	mov	r6, r8
  40aef4:	e6a8      	b.n	40ac48 <_dtoa_r+0xa48>
  40aef6:	9b05      	ldr	r3, [sp, #20]
  40aef8:	9a06      	ldr	r2, [sp, #24]
  40aefa:	1a9d      	subs	r5, r3, r2
  40aefc:	2300      	movs	r3, #0
  40aefe:	f7ff bb72 	b.w	40a5e6 <_dtoa_r+0x3e6>
  40af02:	2700      	movs	r7, #0
  40af04:	e6ca      	b.n	40ac9c <_dtoa_r+0xa9c>
  40af06:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40af08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40af0a:	9d05      	ldr	r5, [sp, #20]
  40af0c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40af10:	f7ff bb69 	b.w	40a5e6 <_dtoa_r+0x3e6>
  40af14:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40af18:	f04f 0802 	mov.w	r8, #2
  40af1c:	e4d6      	b.n	40a8cc <_dtoa_r+0x6cc>
  40af1e:	9408      	str	r4, [sp, #32]
  40af20:	e5a0      	b.n	40aa64 <_dtoa_r+0x864>
  40af22:	9b06      	ldr	r3, [sp, #24]
  40af24:	2b00      	cmp	r3, #0
  40af26:	f43f aebf 	beq.w	40aca8 <_dtoa_r+0xaa8>
  40af2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40af2c:	2b00      	cmp	r3, #0
  40af2e:	f77f aee3 	ble.w	40acf8 <_dtoa_r+0xaf8>
  40af32:	2200      	movs	r2, #0
  40af34:	4b24      	ldr	r3, [pc, #144]	; (40afc8 <_dtoa_r+0xdc8>)
  40af36:	4630      	mov	r0, r6
  40af38:	4639      	mov	r1, r7
  40af3a:	f002 ffb3 	bl	40dea4 <__aeabi_dmul>
  40af3e:	4606      	mov	r6, r0
  40af40:	460f      	mov	r7, r1
  40af42:	f108 0001 	add.w	r0, r8, #1
  40af46:	f002 ff47 	bl	40ddd8 <__aeabi_i2d>
  40af4a:	4632      	mov	r2, r6
  40af4c:	463b      	mov	r3, r7
  40af4e:	f002 ffa9 	bl	40dea4 <__aeabi_dmul>
  40af52:	2200      	movs	r2, #0
  40af54:	4b18      	ldr	r3, [pc, #96]	; (40afb8 <_dtoa_r+0xdb8>)
  40af56:	f002 fdf3 	bl	40db40 <__adddf3>
  40af5a:	9a04      	ldr	r2, [sp, #16]
  40af5c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40af60:	3a01      	subs	r2, #1
  40af62:	4604      	mov	r4, r0
  40af64:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40af68:	9211      	str	r2, [sp, #68]	; 0x44
  40af6a:	e4d0      	b.n	40a90e <_dtoa_r+0x70e>
  40af6c:	2239      	movs	r2, #57	; 0x39
  40af6e:	46b3      	mov	fp, r6
  40af70:	9408      	str	r4, [sp, #32]
  40af72:	9e05      	ldr	r6, [sp, #20]
  40af74:	703a      	strb	r2, [r7, #0]
  40af76:	1c7d      	adds	r5, r7, #1
  40af78:	f7ff bbf0 	b.w	40a75c <_dtoa_r+0x55c>
  40af7c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40af80:	2000      	movs	r0, #0
  40af82:	4912      	ldr	r1, [pc, #72]	; (40afcc <_dtoa_r+0xdcc>)
  40af84:	f002 fdda 	bl	40db3c <__aeabi_dsub>
  40af88:	4632      	mov	r2, r6
  40af8a:	463b      	mov	r3, r7
  40af8c:	f003 fa1a 	bl	40e3c4 <__aeabi_dcmpgt>
  40af90:	b908      	cbnz	r0, 40af96 <_dtoa_r+0xd96>
  40af92:	e6b1      	b.n	40acf8 <_dtoa_r+0xaf8>
  40af94:	4615      	mov	r5, r2
  40af96:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40af9a:	2b30      	cmp	r3, #48	; 0x30
  40af9c:	f105 32ff 	add.w	r2, r5, #4294967295
  40afa0:	d0f8      	beq.n	40af94 <_dtoa_r+0xd94>
  40afa2:	e530      	b.n	40aa06 <_dtoa_r+0x806>
  40afa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40afa6:	9304      	str	r3, [sp, #16]
  40afa8:	f7ff bae7 	b.w	40a57a <_dtoa_r+0x37a>
  40afac:	f1ba 0f00 	cmp.w	sl, #0
  40afb0:	f47f ad7a 	bne.w	40aaa8 <_dtoa_r+0x8a8>
  40afb4:	e661      	b.n	40ac7a <_dtoa_r+0xa7a>
  40afb6:	bf00      	nop
  40afb8:	401c0000 	.word	0x401c0000
  40afbc:	40140000 	.word	0x40140000
  40afc0:	004101a0 	.word	0x004101a0
  40afc4:	00410268 	.word	0x00410268
  40afc8:	40240000 	.word	0x40240000
  40afcc:	3fe00000 	.word	0x3fe00000
  40afd0:	2b39      	cmp	r3, #57	; 0x39
  40afd2:	f8cd b014 	str.w	fp, [sp, #20]
  40afd6:	46d0      	mov	r8, sl
  40afd8:	f8dd b008 	ldr.w	fp, [sp, #8]
  40afdc:	469a      	mov	sl, r3
  40afde:	d0c5      	beq.n	40af6c <_dtoa_r+0xd6c>
  40afe0:	f1bb 0f00 	cmp.w	fp, #0
  40afe4:	f73f aebc 	bgt.w	40ad60 <_dtoa_r+0xb60>
  40afe8:	e6bc      	b.n	40ad64 <_dtoa_r+0xb64>
  40afea:	f47f aebb 	bne.w	40ad64 <_dtoa_r+0xb64>
  40afee:	f01a 0f01 	tst.w	sl, #1
  40aff2:	f43f aeb7 	beq.w	40ad64 <_dtoa_r+0xb64>
  40aff6:	e6af      	b.n	40ad58 <_dtoa_r+0xb58>
  40aff8:	f04f 0800 	mov.w	r8, #0
  40affc:	4646      	mov	r6, r8
  40affe:	e531      	b.n	40aa64 <_dtoa_r+0x864>
  40b000:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b002:	2b02      	cmp	r3, #2
  40b004:	dc21      	bgt.n	40b04a <_dtoa_r+0xe4a>
  40b006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b008:	e604      	b.n	40ac14 <_dtoa_r+0xa14>
  40b00a:	f04f 0802 	mov.w	r8, #2
  40b00e:	e45d      	b.n	40a8cc <_dtoa_r+0x6cc>
  40b010:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b012:	2b02      	cmp	r3, #2
  40b014:	dc19      	bgt.n	40b04a <_dtoa_r+0xe4a>
  40b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b018:	e563      	b.n	40aae2 <_dtoa_r+0x8e2>
  40b01a:	2400      	movs	r4, #0
  40b01c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40b020:	4621      	mov	r1, r4
  40b022:	4648      	mov	r0, r9
  40b024:	f001 fc8e 	bl	40c944 <_Balloc>
  40b028:	f04f 33ff 	mov.w	r3, #4294967295
  40b02c:	9306      	str	r3, [sp, #24]
  40b02e:	930d      	str	r3, [sp, #52]	; 0x34
  40b030:	2301      	movs	r3, #1
  40b032:	9007      	str	r0, [sp, #28]
  40b034:	9421      	str	r4, [sp, #132]	; 0x84
  40b036:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40b03a:	9309      	str	r3, [sp, #36]	; 0x24
  40b03c:	f7ff b9e9 	b.w	40a412 <_dtoa_r+0x212>
  40b040:	f43f ab3d 	beq.w	40a6be <_dtoa_r+0x4be>
  40b044:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b048:	e522      	b.n	40aa90 <_dtoa_r+0x890>
  40b04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b04c:	9306      	str	r3, [sp, #24]
  40b04e:	e5e9      	b.n	40ac24 <_dtoa_r+0xa24>
  40b050:	2501      	movs	r5, #1
  40b052:	f7ff b9a8 	b.w	40a3a6 <_dtoa_r+0x1a6>
  40b056:	bf00      	nop

0040b058 <__sflush_r>:
  40b058:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40b05c:	b29a      	uxth	r2, r3
  40b05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b062:	460d      	mov	r5, r1
  40b064:	0711      	lsls	r1, r2, #28
  40b066:	4680      	mov	r8, r0
  40b068:	d43c      	bmi.n	40b0e4 <__sflush_r+0x8c>
  40b06a:	686a      	ldr	r2, [r5, #4]
  40b06c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b070:	2a00      	cmp	r2, #0
  40b072:	81ab      	strh	r3, [r5, #12]
  40b074:	dd73      	ble.n	40b15e <__sflush_r+0x106>
  40b076:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b078:	2c00      	cmp	r4, #0
  40b07a:	d04b      	beq.n	40b114 <__sflush_r+0xbc>
  40b07c:	b29b      	uxth	r3, r3
  40b07e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b082:	2100      	movs	r1, #0
  40b084:	b292      	uxth	r2, r2
  40b086:	f8d8 6000 	ldr.w	r6, [r8]
  40b08a:	f8c8 1000 	str.w	r1, [r8]
  40b08e:	2a00      	cmp	r2, #0
  40b090:	d069      	beq.n	40b166 <__sflush_r+0x10e>
  40b092:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b094:	075f      	lsls	r7, r3, #29
  40b096:	d505      	bpl.n	40b0a4 <__sflush_r+0x4c>
  40b098:	6869      	ldr	r1, [r5, #4]
  40b09a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b09c:	1a52      	subs	r2, r2, r1
  40b09e:	b10b      	cbz	r3, 40b0a4 <__sflush_r+0x4c>
  40b0a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b0a2:	1ad2      	subs	r2, r2, r3
  40b0a4:	2300      	movs	r3, #0
  40b0a6:	69e9      	ldr	r1, [r5, #28]
  40b0a8:	4640      	mov	r0, r8
  40b0aa:	47a0      	blx	r4
  40b0ac:	1c44      	adds	r4, r0, #1
  40b0ae:	d03c      	beq.n	40b12a <__sflush_r+0xd2>
  40b0b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b0b4:	692a      	ldr	r2, [r5, #16]
  40b0b6:	602a      	str	r2, [r5, #0]
  40b0b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b0bc:	2200      	movs	r2, #0
  40b0be:	81ab      	strh	r3, [r5, #12]
  40b0c0:	04db      	lsls	r3, r3, #19
  40b0c2:	606a      	str	r2, [r5, #4]
  40b0c4:	d449      	bmi.n	40b15a <__sflush_r+0x102>
  40b0c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b0c8:	f8c8 6000 	str.w	r6, [r8]
  40b0cc:	b311      	cbz	r1, 40b114 <__sflush_r+0xbc>
  40b0ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b0d2:	4299      	cmp	r1, r3
  40b0d4:	d002      	beq.n	40b0dc <__sflush_r+0x84>
  40b0d6:	4640      	mov	r0, r8
  40b0d8:	f000 f9c0 	bl	40b45c <_free_r>
  40b0dc:	2000      	movs	r0, #0
  40b0de:	6328      	str	r0, [r5, #48]	; 0x30
  40b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b0e4:	692e      	ldr	r6, [r5, #16]
  40b0e6:	b1ae      	cbz	r6, 40b114 <__sflush_r+0xbc>
  40b0e8:	682c      	ldr	r4, [r5, #0]
  40b0ea:	602e      	str	r6, [r5, #0]
  40b0ec:	0790      	lsls	r0, r2, #30
  40b0ee:	bf0c      	ite	eq
  40b0f0:	696b      	ldreq	r3, [r5, #20]
  40b0f2:	2300      	movne	r3, #0
  40b0f4:	1ba4      	subs	r4, r4, r6
  40b0f6:	60ab      	str	r3, [r5, #8]
  40b0f8:	e00a      	b.n	40b110 <__sflush_r+0xb8>
  40b0fa:	4623      	mov	r3, r4
  40b0fc:	4632      	mov	r2, r6
  40b0fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b100:	69e9      	ldr	r1, [r5, #28]
  40b102:	4640      	mov	r0, r8
  40b104:	47b8      	blx	r7
  40b106:	2800      	cmp	r0, #0
  40b108:	eba4 0400 	sub.w	r4, r4, r0
  40b10c:	4406      	add	r6, r0
  40b10e:	dd04      	ble.n	40b11a <__sflush_r+0xc2>
  40b110:	2c00      	cmp	r4, #0
  40b112:	dcf2      	bgt.n	40b0fa <__sflush_r+0xa2>
  40b114:	2000      	movs	r0, #0
  40b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b11a:	89ab      	ldrh	r3, [r5, #12]
  40b11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b120:	81ab      	strh	r3, [r5, #12]
  40b122:	f04f 30ff 	mov.w	r0, #4294967295
  40b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b12a:	f8d8 2000 	ldr.w	r2, [r8]
  40b12e:	2a1d      	cmp	r2, #29
  40b130:	d8f3      	bhi.n	40b11a <__sflush_r+0xc2>
  40b132:	4b1a      	ldr	r3, [pc, #104]	; (40b19c <__sflush_r+0x144>)
  40b134:	40d3      	lsrs	r3, r2
  40b136:	f003 0301 	and.w	r3, r3, #1
  40b13a:	f083 0401 	eor.w	r4, r3, #1
  40b13e:	2b00      	cmp	r3, #0
  40b140:	d0eb      	beq.n	40b11a <__sflush_r+0xc2>
  40b142:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b146:	6929      	ldr	r1, [r5, #16]
  40b148:	6029      	str	r1, [r5, #0]
  40b14a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b14e:	04d9      	lsls	r1, r3, #19
  40b150:	606c      	str	r4, [r5, #4]
  40b152:	81ab      	strh	r3, [r5, #12]
  40b154:	d5b7      	bpl.n	40b0c6 <__sflush_r+0x6e>
  40b156:	2a00      	cmp	r2, #0
  40b158:	d1b5      	bne.n	40b0c6 <__sflush_r+0x6e>
  40b15a:	6528      	str	r0, [r5, #80]	; 0x50
  40b15c:	e7b3      	b.n	40b0c6 <__sflush_r+0x6e>
  40b15e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40b160:	2a00      	cmp	r2, #0
  40b162:	dc88      	bgt.n	40b076 <__sflush_r+0x1e>
  40b164:	e7d6      	b.n	40b114 <__sflush_r+0xbc>
  40b166:	2301      	movs	r3, #1
  40b168:	69e9      	ldr	r1, [r5, #28]
  40b16a:	4640      	mov	r0, r8
  40b16c:	47a0      	blx	r4
  40b16e:	1c43      	adds	r3, r0, #1
  40b170:	4602      	mov	r2, r0
  40b172:	d002      	beq.n	40b17a <__sflush_r+0x122>
  40b174:	89ab      	ldrh	r3, [r5, #12]
  40b176:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b178:	e78c      	b.n	40b094 <__sflush_r+0x3c>
  40b17a:	f8d8 3000 	ldr.w	r3, [r8]
  40b17e:	2b00      	cmp	r3, #0
  40b180:	d0f8      	beq.n	40b174 <__sflush_r+0x11c>
  40b182:	2b1d      	cmp	r3, #29
  40b184:	d001      	beq.n	40b18a <__sflush_r+0x132>
  40b186:	2b16      	cmp	r3, #22
  40b188:	d102      	bne.n	40b190 <__sflush_r+0x138>
  40b18a:	f8c8 6000 	str.w	r6, [r8]
  40b18e:	e7c1      	b.n	40b114 <__sflush_r+0xbc>
  40b190:	89ab      	ldrh	r3, [r5, #12]
  40b192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b196:	81ab      	strh	r3, [r5, #12]
  40b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b19c:	20400001 	.word	0x20400001

0040b1a0 <_fflush_r>:
  40b1a0:	b510      	push	{r4, lr}
  40b1a2:	4604      	mov	r4, r0
  40b1a4:	b082      	sub	sp, #8
  40b1a6:	b108      	cbz	r0, 40b1ac <_fflush_r+0xc>
  40b1a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b1aa:	b153      	cbz	r3, 40b1c2 <_fflush_r+0x22>
  40b1ac:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40b1b0:	b908      	cbnz	r0, 40b1b6 <_fflush_r+0x16>
  40b1b2:	b002      	add	sp, #8
  40b1b4:	bd10      	pop	{r4, pc}
  40b1b6:	4620      	mov	r0, r4
  40b1b8:	b002      	add	sp, #8
  40b1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b1be:	f7ff bf4b 	b.w	40b058 <__sflush_r>
  40b1c2:	9101      	str	r1, [sp, #4]
  40b1c4:	f000 f880 	bl	40b2c8 <__sinit>
  40b1c8:	9901      	ldr	r1, [sp, #4]
  40b1ca:	e7ef      	b.n	40b1ac <_fflush_r+0xc>

0040b1cc <_cleanup_r>:
  40b1cc:	4901      	ldr	r1, [pc, #4]	; (40b1d4 <_cleanup_r+0x8>)
  40b1ce:	f000 bbaf 	b.w	40b930 <_fwalk_reent>
  40b1d2:	bf00      	nop
  40b1d4:	0040da0d 	.word	0x0040da0d

0040b1d8 <__sinit.part.1>:
  40b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b1dc:	4b35      	ldr	r3, [pc, #212]	; (40b2b4 <__sinit.part.1+0xdc>)
  40b1de:	6845      	ldr	r5, [r0, #4]
  40b1e0:	63c3      	str	r3, [r0, #60]	; 0x3c
  40b1e2:	2400      	movs	r4, #0
  40b1e4:	4607      	mov	r7, r0
  40b1e6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40b1ea:	2304      	movs	r3, #4
  40b1ec:	2103      	movs	r1, #3
  40b1ee:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40b1f2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40b1f6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40b1fa:	b083      	sub	sp, #12
  40b1fc:	602c      	str	r4, [r5, #0]
  40b1fe:	606c      	str	r4, [r5, #4]
  40b200:	60ac      	str	r4, [r5, #8]
  40b202:	666c      	str	r4, [r5, #100]	; 0x64
  40b204:	81ec      	strh	r4, [r5, #14]
  40b206:	612c      	str	r4, [r5, #16]
  40b208:	616c      	str	r4, [r5, #20]
  40b20a:	61ac      	str	r4, [r5, #24]
  40b20c:	81ab      	strh	r3, [r5, #12]
  40b20e:	4621      	mov	r1, r4
  40b210:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b214:	2208      	movs	r2, #8
  40b216:	f7fa feb5 	bl	405f84 <memset>
  40b21a:	68be      	ldr	r6, [r7, #8]
  40b21c:	f8df b098 	ldr.w	fp, [pc, #152]	; 40b2b8 <__sinit.part.1+0xe0>
  40b220:	f8df a098 	ldr.w	sl, [pc, #152]	; 40b2bc <__sinit.part.1+0xe4>
  40b224:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40b2c0 <__sinit.part.1+0xe8>
  40b228:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40b2c4 <__sinit.part.1+0xec>
  40b22c:	f8c5 b020 	str.w	fp, [r5, #32]
  40b230:	2301      	movs	r3, #1
  40b232:	2209      	movs	r2, #9
  40b234:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b238:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b23c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b240:	61ed      	str	r5, [r5, #28]
  40b242:	4621      	mov	r1, r4
  40b244:	81f3      	strh	r3, [r6, #14]
  40b246:	81b2      	strh	r2, [r6, #12]
  40b248:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40b24c:	6034      	str	r4, [r6, #0]
  40b24e:	6074      	str	r4, [r6, #4]
  40b250:	60b4      	str	r4, [r6, #8]
  40b252:	6674      	str	r4, [r6, #100]	; 0x64
  40b254:	6134      	str	r4, [r6, #16]
  40b256:	6174      	str	r4, [r6, #20]
  40b258:	61b4      	str	r4, [r6, #24]
  40b25a:	2208      	movs	r2, #8
  40b25c:	9301      	str	r3, [sp, #4]
  40b25e:	f7fa fe91 	bl	405f84 <memset>
  40b262:	68fd      	ldr	r5, [r7, #12]
  40b264:	61f6      	str	r6, [r6, #28]
  40b266:	2012      	movs	r0, #18
  40b268:	2202      	movs	r2, #2
  40b26a:	f8c6 b020 	str.w	fp, [r6, #32]
  40b26e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40b272:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40b276:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40b27a:	4621      	mov	r1, r4
  40b27c:	81a8      	strh	r0, [r5, #12]
  40b27e:	81ea      	strh	r2, [r5, #14]
  40b280:	602c      	str	r4, [r5, #0]
  40b282:	606c      	str	r4, [r5, #4]
  40b284:	60ac      	str	r4, [r5, #8]
  40b286:	666c      	str	r4, [r5, #100]	; 0x64
  40b288:	612c      	str	r4, [r5, #16]
  40b28a:	616c      	str	r4, [r5, #20]
  40b28c:	61ac      	str	r4, [r5, #24]
  40b28e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b292:	2208      	movs	r2, #8
  40b294:	f7fa fe76 	bl	405f84 <memset>
  40b298:	9b01      	ldr	r3, [sp, #4]
  40b29a:	61ed      	str	r5, [r5, #28]
  40b29c:	f8c5 b020 	str.w	fp, [r5, #32]
  40b2a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b2a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b2a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b2ac:	63bb      	str	r3, [r7, #56]	; 0x38
  40b2ae:	b003      	add	sp, #12
  40b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2b4:	0040b1cd 	.word	0x0040b1cd
  40b2b8:	0040d615 	.word	0x0040d615
  40b2bc:	0040d639 	.word	0x0040d639
  40b2c0:	0040d675 	.word	0x0040d675
  40b2c4:	0040d695 	.word	0x0040d695

0040b2c8 <__sinit>:
  40b2c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b2ca:	b103      	cbz	r3, 40b2ce <__sinit+0x6>
  40b2cc:	4770      	bx	lr
  40b2ce:	f7ff bf83 	b.w	40b1d8 <__sinit.part.1>
  40b2d2:	bf00      	nop

0040b2d4 <__sfp_lock_acquire>:
  40b2d4:	4770      	bx	lr
  40b2d6:	bf00      	nop

0040b2d8 <__sfp_lock_release>:
  40b2d8:	4770      	bx	lr
  40b2da:	bf00      	nop

0040b2dc <__libc_fini_array>:
  40b2dc:	b538      	push	{r3, r4, r5, lr}
  40b2de:	4d07      	ldr	r5, [pc, #28]	; (40b2fc <__libc_fini_array+0x20>)
  40b2e0:	4c07      	ldr	r4, [pc, #28]	; (40b300 <__libc_fini_array+0x24>)
  40b2e2:	1b2c      	subs	r4, r5, r4
  40b2e4:	10a4      	asrs	r4, r4, #2
  40b2e6:	d005      	beq.n	40b2f4 <__libc_fini_array+0x18>
  40b2e8:	3c01      	subs	r4, #1
  40b2ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40b2ee:	4798      	blx	r3
  40b2f0:	2c00      	cmp	r4, #0
  40b2f2:	d1f9      	bne.n	40b2e8 <__libc_fini_array+0xc>
  40b2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b2f8:	f004 bfda 	b.w	4102b0 <_fini>
  40b2fc:	004102c0 	.word	0x004102c0
  40b300:	004102bc 	.word	0x004102bc

0040b304 <__fputwc>:
  40b304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b308:	b082      	sub	sp, #8
  40b30a:	4680      	mov	r8, r0
  40b30c:	4689      	mov	r9, r1
  40b30e:	4614      	mov	r4, r2
  40b310:	f000 fef0 	bl	40c0f4 <__locale_mb_cur_max>
  40b314:	2801      	cmp	r0, #1
  40b316:	d033      	beq.n	40b380 <__fputwc+0x7c>
  40b318:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40b31c:	464a      	mov	r2, r9
  40b31e:	a901      	add	r1, sp, #4
  40b320:	4640      	mov	r0, r8
  40b322:	f002 fa91 	bl	40d848 <_wcrtomb_r>
  40b326:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b32a:	4682      	mov	sl, r0
  40b32c:	d021      	beq.n	40b372 <__fputwc+0x6e>
  40b32e:	b388      	cbz	r0, 40b394 <__fputwc+0x90>
  40b330:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40b334:	2500      	movs	r5, #0
  40b336:	e008      	b.n	40b34a <__fputwc+0x46>
  40b338:	6823      	ldr	r3, [r4, #0]
  40b33a:	1c5a      	adds	r2, r3, #1
  40b33c:	6022      	str	r2, [r4, #0]
  40b33e:	701e      	strb	r6, [r3, #0]
  40b340:	3501      	adds	r5, #1
  40b342:	4555      	cmp	r5, sl
  40b344:	d226      	bcs.n	40b394 <__fputwc+0x90>
  40b346:	ab01      	add	r3, sp, #4
  40b348:	5d5e      	ldrb	r6, [r3, r5]
  40b34a:	68a3      	ldr	r3, [r4, #8]
  40b34c:	3b01      	subs	r3, #1
  40b34e:	2b00      	cmp	r3, #0
  40b350:	60a3      	str	r3, [r4, #8]
  40b352:	daf1      	bge.n	40b338 <__fputwc+0x34>
  40b354:	69a7      	ldr	r7, [r4, #24]
  40b356:	42bb      	cmp	r3, r7
  40b358:	4631      	mov	r1, r6
  40b35a:	4622      	mov	r2, r4
  40b35c:	4640      	mov	r0, r8
  40b35e:	db01      	blt.n	40b364 <__fputwc+0x60>
  40b360:	2e0a      	cmp	r6, #10
  40b362:	d1e9      	bne.n	40b338 <__fputwc+0x34>
  40b364:	f002 fa1a 	bl	40d79c <__swbuf_r>
  40b368:	1c43      	adds	r3, r0, #1
  40b36a:	d1e9      	bne.n	40b340 <__fputwc+0x3c>
  40b36c:	b002      	add	sp, #8
  40b36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b372:	89a3      	ldrh	r3, [r4, #12]
  40b374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b378:	81a3      	strh	r3, [r4, #12]
  40b37a:	b002      	add	sp, #8
  40b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b380:	f109 33ff 	add.w	r3, r9, #4294967295
  40b384:	2bfe      	cmp	r3, #254	; 0xfe
  40b386:	d8c7      	bhi.n	40b318 <__fputwc+0x14>
  40b388:	fa5f f689 	uxtb.w	r6, r9
  40b38c:	4682      	mov	sl, r0
  40b38e:	f88d 6004 	strb.w	r6, [sp, #4]
  40b392:	e7cf      	b.n	40b334 <__fputwc+0x30>
  40b394:	4648      	mov	r0, r9
  40b396:	b002      	add	sp, #8
  40b398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040b39c <_fputwc_r>:
  40b39c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40b3a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40b3a4:	d10a      	bne.n	40b3bc <_fputwc_r+0x20>
  40b3a6:	b410      	push	{r4}
  40b3a8:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40b3aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40b3ae:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40b3b2:	6654      	str	r4, [r2, #100]	; 0x64
  40b3b4:	8193      	strh	r3, [r2, #12]
  40b3b6:	bc10      	pop	{r4}
  40b3b8:	f7ff bfa4 	b.w	40b304 <__fputwc>
  40b3bc:	f7ff bfa2 	b.w	40b304 <__fputwc>

0040b3c0 <_malloc_trim_r>:
  40b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b3c2:	4f23      	ldr	r7, [pc, #140]	; (40b450 <_malloc_trim_r+0x90>)
  40b3c4:	460c      	mov	r4, r1
  40b3c6:	4606      	mov	r6, r0
  40b3c8:	f001 fab8 	bl	40c93c <__malloc_lock>
  40b3cc:	68bb      	ldr	r3, [r7, #8]
  40b3ce:	685d      	ldr	r5, [r3, #4]
  40b3d0:	f025 0503 	bic.w	r5, r5, #3
  40b3d4:	1b29      	subs	r1, r5, r4
  40b3d6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40b3da:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40b3de:	f021 010f 	bic.w	r1, r1, #15
  40b3e2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40b3e6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40b3ea:	db07      	blt.n	40b3fc <_malloc_trim_r+0x3c>
  40b3ec:	2100      	movs	r1, #0
  40b3ee:	4630      	mov	r0, r6
  40b3f0:	f002 f8fa 	bl	40d5e8 <_sbrk_r>
  40b3f4:	68bb      	ldr	r3, [r7, #8]
  40b3f6:	442b      	add	r3, r5
  40b3f8:	4298      	cmp	r0, r3
  40b3fa:	d004      	beq.n	40b406 <_malloc_trim_r+0x46>
  40b3fc:	4630      	mov	r0, r6
  40b3fe:	f001 fa9f 	bl	40c940 <__malloc_unlock>
  40b402:	2000      	movs	r0, #0
  40b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b406:	4261      	negs	r1, r4
  40b408:	4630      	mov	r0, r6
  40b40a:	f002 f8ed 	bl	40d5e8 <_sbrk_r>
  40b40e:	3001      	adds	r0, #1
  40b410:	d00d      	beq.n	40b42e <_malloc_trim_r+0x6e>
  40b412:	4b10      	ldr	r3, [pc, #64]	; (40b454 <_malloc_trim_r+0x94>)
  40b414:	68ba      	ldr	r2, [r7, #8]
  40b416:	6819      	ldr	r1, [r3, #0]
  40b418:	1b2d      	subs	r5, r5, r4
  40b41a:	f045 0501 	orr.w	r5, r5, #1
  40b41e:	4630      	mov	r0, r6
  40b420:	1b09      	subs	r1, r1, r4
  40b422:	6055      	str	r5, [r2, #4]
  40b424:	6019      	str	r1, [r3, #0]
  40b426:	f001 fa8b 	bl	40c940 <__malloc_unlock>
  40b42a:	2001      	movs	r0, #1
  40b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b42e:	2100      	movs	r1, #0
  40b430:	4630      	mov	r0, r6
  40b432:	f002 f8d9 	bl	40d5e8 <_sbrk_r>
  40b436:	68ba      	ldr	r2, [r7, #8]
  40b438:	1a83      	subs	r3, r0, r2
  40b43a:	2b0f      	cmp	r3, #15
  40b43c:	ddde      	ble.n	40b3fc <_malloc_trim_r+0x3c>
  40b43e:	4c06      	ldr	r4, [pc, #24]	; (40b458 <_malloc_trim_r+0x98>)
  40b440:	4904      	ldr	r1, [pc, #16]	; (40b454 <_malloc_trim_r+0x94>)
  40b442:	6824      	ldr	r4, [r4, #0]
  40b444:	f043 0301 	orr.w	r3, r3, #1
  40b448:	1b00      	subs	r0, r0, r4
  40b44a:	6053      	str	r3, [r2, #4]
  40b44c:	6008      	str	r0, [r1, #0]
  40b44e:	e7d5      	b.n	40b3fc <_malloc_trim_r+0x3c>
  40b450:	200004bc 	.word	0x200004bc
  40b454:	2000ad08 	.word	0x2000ad08
  40b458:	200008c8 	.word	0x200008c8

0040b45c <_free_r>:
  40b45c:	2900      	cmp	r1, #0
  40b45e:	d045      	beq.n	40b4ec <_free_r+0x90>
  40b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b464:	460d      	mov	r5, r1
  40b466:	4680      	mov	r8, r0
  40b468:	f001 fa68 	bl	40c93c <__malloc_lock>
  40b46c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40b470:	496a      	ldr	r1, [pc, #424]	; (40b61c <_free_r+0x1c0>)
  40b472:	f027 0301 	bic.w	r3, r7, #1
  40b476:	f1a5 0408 	sub.w	r4, r5, #8
  40b47a:	18e2      	adds	r2, r4, r3
  40b47c:	688e      	ldr	r6, [r1, #8]
  40b47e:	6850      	ldr	r0, [r2, #4]
  40b480:	42b2      	cmp	r2, r6
  40b482:	f020 0003 	bic.w	r0, r0, #3
  40b486:	d062      	beq.n	40b54e <_free_r+0xf2>
  40b488:	07fe      	lsls	r6, r7, #31
  40b48a:	6050      	str	r0, [r2, #4]
  40b48c:	d40b      	bmi.n	40b4a6 <_free_r+0x4a>
  40b48e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40b492:	1be4      	subs	r4, r4, r7
  40b494:	f101 0e08 	add.w	lr, r1, #8
  40b498:	68a5      	ldr	r5, [r4, #8]
  40b49a:	4575      	cmp	r5, lr
  40b49c:	443b      	add	r3, r7
  40b49e:	d06f      	beq.n	40b580 <_free_r+0x124>
  40b4a0:	68e7      	ldr	r7, [r4, #12]
  40b4a2:	60ef      	str	r7, [r5, #12]
  40b4a4:	60bd      	str	r5, [r7, #8]
  40b4a6:	1815      	adds	r5, r2, r0
  40b4a8:	686d      	ldr	r5, [r5, #4]
  40b4aa:	07ed      	lsls	r5, r5, #31
  40b4ac:	d542      	bpl.n	40b534 <_free_r+0xd8>
  40b4ae:	f043 0201 	orr.w	r2, r3, #1
  40b4b2:	6062      	str	r2, [r4, #4]
  40b4b4:	50e3      	str	r3, [r4, r3]
  40b4b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b4ba:	d218      	bcs.n	40b4ee <_free_r+0x92>
  40b4bc:	08db      	lsrs	r3, r3, #3
  40b4be:	1c5a      	adds	r2, r3, #1
  40b4c0:	684d      	ldr	r5, [r1, #4]
  40b4c2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40b4c6:	60a7      	str	r7, [r4, #8]
  40b4c8:	2001      	movs	r0, #1
  40b4ca:	109b      	asrs	r3, r3, #2
  40b4cc:	fa00 f303 	lsl.w	r3, r0, r3
  40b4d0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40b4d4:	431d      	orrs	r5, r3
  40b4d6:	3808      	subs	r0, #8
  40b4d8:	60e0      	str	r0, [r4, #12]
  40b4da:	604d      	str	r5, [r1, #4]
  40b4dc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40b4e0:	60fc      	str	r4, [r7, #12]
  40b4e2:	4640      	mov	r0, r8
  40b4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b4e8:	f001 ba2a 	b.w	40c940 <__malloc_unlock>
  40b4ec:	4770      	bx	lr
  40b4ee:	0a5a      	lsrs	r2, r3, #9
  40b4f0:	2a04      	cmp	r2, #4
  40b4f2:	d853      	bhi.n	40b59c <_free_r+0x140>
  40b4f4:	099a      	lsrs	r2, r3, #6
  40b4f6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40b4fa:	007f      	lsls	r7, r7, #1
  40b4fc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40b500:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40b504:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40b508:	4944      	ldr	r1, [pc, #272]	; (40b61c <_free_r+0x1c0>)
  40b50a:	3808      	subs	r0, #8
  40b50c:	4290      	cmp	r0, r2
  40b50e:	d04d      	beq.n	40b5ac <_free_r+0x150>
  40b510:	6851      	ldr	r1, [r2, #4]
  40b512:	f021 0103 	bic.w	r1, r1, #3
  40b516:	428b      	cmp	r3, r1
  40b518:	d202      	bcs.n	40b520 <_free_r+0xc4>
  40b51a:	6892      	ldr	r2, [r2, #8]
  40b51c:	4290      	cmp	r0, r2
  40b51e:	d1f7      	bne.n	40b510 <_free_r+0xb4>
  40b520:	68d0      	ldr	r0, [r2, #12]
  40b522:	60e0      	str	r0, [r4, #12]
  40b524:	60a2      	str	r2, [r4, #8]
  40b526:	6084      	str	r4, [r0, #8]
  40b528:	60d4      	str	r4, [r2, #12]
  40b52a:	4640      	mov	r0, r8
  40b52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b530:	f001 ba06 	b.w	40c940 <__malloc_unlock>
  40b534:	6895      	ldr	r5, [r2, #8]
  40b536:	4f3a      	ldr	r7, [pc, #232]	; (40b620 <_free_r+0x1c4>)
  40b538:	42bd      	cmp	r5, r7
  40b53a:	4403      	add	r3, r0
  40b53c:	d03f      	beq.n	40b5be <_free_r+0x162>
  40b53e:	68d0      	ldr	r0, [r2, #12]
  40b540:	60e8      	str	r0, [r5, #12]
  40b542:	f043 0201 	orr.w	r2, r3, #1
  40b546:	6085      	str	r5, [r0, #8]
  40b548:	6062      	str	r2, [r4, #4]
  40b54a:	50e3      	str	r3, [r4, r3]
  40b54c:	e7b3      	b.n	40b4b6 <_free_r+0x5a>
  40b54e:	07ff      	lsls	r7, r7, #31
  40b550:	4403      	add	r3, r0
  40b552:	d407      	bmi.n	40b564 <_free_r+0x108>
  40b554:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b558:	1aa4      	subs	r4, r4, r2
  40b55a:	4413      	add	r3, r2
  40b55c:	68a0      	ldr	r0, [r4, #8]
  40b55e:	68e2      	ldr	r2, [r4, #12]
  40b560:	60c2      	str	r2, [r0, #12]
  40b562:	6090      	str	r0, [r2, #8]
  40b564:	4a2f      	ldr	r2, [pc, #188]	; (40b624 <_free_r+0x1c8>)
  40b566:	6812      	ldr	r2, [r2, #0]
  40b568:	f043 0001 	orr.w	r0, r3, #1
  40b56c:	4293      	cmp	r3, r2
  40b56e:	6060      	str	r0, [r4, #4]
  40b570:	608c      	str	r4, [r1, #8]
  40b572:	d3b6      	bcc.n	40b4e2 <_free_r+0x86>
  40b574:	4b2c      	ldr	r3, [pc, #176]	; (40b628 <_free_r+0x1cc>)
  40b576:	4640      	mov	r0, r8
  40b578:	6819      	ldr	r1, [r3, #0]
  40b57a:	f7ff ff21 	bl	40b3c0 <_malloc_trim_r>
  40b57e:	e7b0      	b.n	40b4e2 <_free_r+0x86>
  40b580:	1811      	adds	r1, r2, r0
  40b582:	6849      	ldr	r1, [r1, #4]
  40b584:	07c9      	lsls	r1, r1, #31
  40b586:	d444      	bmi.n	40b612 <_free_r+0x1b6>
  40b588:	6891      	ldr	r1, [r2, #8]
  40b58a:	68d2      	ldr	r2, [r2, #12]
  40b58c:	60ca      	str	r2, [r1, #12]
  40b58e:	4403      	add	r3, r0
  40b590:	f043 0001 	orr.w	r0, r3, #1
  40b594:	6091      	str	r1, [r2, #8]
  40b596:	6060      	str	r0, [r4, #4]
  40b598:	50e3      	str	r3, [r4, r3]
  40b59a:	e7a2      	b.n	40b4e2 <_free_r+0x86>
  40b59c:	2a14      	cmp	r2, #20
  40b59e:	d817      	bhi.n	40b5d0 <_free_r+0x174>
  40b5a0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b5a4:	007f      	lsls	r7, r7, #1
  40b5a6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b5aa:	e7a9      	b.n	40b500 <_free_r+0xa4>
  40b5ac:	10aa      	asrs	r2, r5, #2
  40b5ae:	684b      	ldr	r3, [r1, #4]
  40b5b0:	2501      	movs	r5, #1
  40b5b2:	fa05 f202 	lsl.w	r2, r5, r2
  40b5b6:	4313      	orrs	r3, r2
  40b5b8:	604b      	str	r3, [r1, #4]
  40b5ba:	4602      	mov	r2, r0
  40b5bc:	e7b1      	b.n	40b522 <_free_r+0xc6>
  40b5be:	f043 0201 	orr.w	r2, r3, #1
  40b5c2:	614c      	str	r4, [r1, #20]
  40b5c4:	610c      	str	r4, [r1, #16]
  40b5c6:	60e5      	str	r5, [r4, #12]
  40b5c8:	60a5      	str	r5, [r4, #8]
  40b5ca:	6062      	str	r2, [r4, #4]
  40b5cc:	50e3      	str	r3, [r4, r3]
  40b5ce:	e788      	b.n	40b4e2 <_free_r+0x86>
  40b5d0:	2a54      	cmp	r2, #84	; 0x54
  40b5d2:	d806      	bhi.n	40b5e2 <_free_r+0x186>
  40b5d4:	0b1a      	lsrs	r2, r3, #12
  40b5d6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b5da:	007f      	lsls	r7, r7, #1
  40b5dc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b5e0:	e78e      	b.n	40b500 <_free_r+0xa4>
  40b5e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b5e6:	d806      	bhi.n	40b5f6 <_free_r+0x19a>
  40b5e8:	0bda      	lsrs	r2, r3, #15
  40b5ea:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b5ee:	007f      	lsls	r7, r7, #1
  40b5f0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b5f4:	e784      	b.n	40b500 <_free_r+0xa4>
  40b5f6:	f240 5054 	movw	r0, #1364	; 0x554
  40b5fa:	4282      	cmp	r2, r0
  40b5fc:	d806      	bhi.n	40b60c <_free_r+0x1b0>
  40b5fe:	0c9a      	lsrs	r2, r3, #18
  40b600:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b604:	007f      	lsls	r7, r7, #1
  40b606:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b60a:	e779      	b.n	40b500 <_free_r+0xa4>
  40b60c:	27fe      	movs	r7, #254	; 0xfe
  40b60e:	257e      	movs	r5, #126	; 0x7e
  40b610:	e776      	b.n	40b500 <_free_r+0xa4>
  40b612:	f043 0201 	orr.w	r2, r3, #1
  40b616:	6062      	str	r2, [r4, #4]
  40b618:	50e3      	str	r3, [r4, r3]
  40b61a:	e762      	b.n	40b4e2 <_free_r+0x86>
  40b61c:	200004bc 	.word	0x200004bc
  40b620:	200004c4 	.word	0x200004c4
  40b624:	200008c4 	.word	0x200008c4
  40b628:	2000ad04 	.word	0x2000ad04

0040b62c <__sfvwrite_r>:
  40b62c:	6893      	ldr	r3, [r2, #8]
  40b62e:	2b00      	cmp	r3, #0
  40b630:	d076      	beq.n	40b720 <__sfvwrite_r+0xf4>
  40b632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b636:	898b      	ldrh	r3, [r1, #12]
  40b638:	b085      	sub	sp, #20
  40b63a:	460c      	mov	r4, r1
  40b63c:	0719      	lsls	r1, r3, #28
  40b63e:	9001      	str	r0, [sp, #4]
  40b640:	4616      	mov	r6, r2
  40b642:	d529      	bpl.n	40b698 <__sfvwrite_r+0x6c>
  40b644:	6922      	ldr	r2, [r4, #16]
  40b646:	b33a      	cbz	r2, 40b698 <__sfvwrite_r+0x6c>
  40b648:	f003 0802 	and.w	r8, r3, #2
  40b64c:	fa1f f088 	uxth.w	r0, r8
  40b650:	6835      	ldr	r5, [r6, #0]
  40b652:	2800      	cmp	r0, #0
  40b654:	d02f      	beq.n	40b6b6 <__sfvwrite_r+0x8a>
  40b656:	f04f 0900 	mov.w	r9, #0
  40b65a:	4fb4      	ldr	r7, [pc, #720]	; (40b92c <__sfvwrite_r+0x300>)
  40b65c:	46c8      	mov	r8, r9
  40b65e:	46b2      	mov	sl, r6
  40b660:	45b8      	cmp	r8, r7
  40b662:	4643      	mov	r3, r8
  40b664:	464a      	mov	r2, r9
  40b666:	bf28      	it	cs
  40b668:	463b      	movcs	r3, r7
  40b66a:	9801      	ldr	r0, [sp, #4]
  40b66c:	f1b8 0f00 	cmp.w	r8, #0
  40b670:	d050      	beq.n	40b714 <__sfvwrite_r+0xe8>
  40b672:	69e1      	ldr	r1, [r4, #28]
  40b674:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b676:	47b0      	blx	r6
  40b678:	2800      	cmp	r0, #0
  40b67a:	dd71      	ble.n	40b760 <__sfvwrite_r+0x134>
  40b67c:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b680:	1a1b      	subs	r3, r3, r0
  40b682:	4481      	add	r9, r0
  40b684:	ebc0 0808 	rsb	r8, r0, r8
  40b688:	f8ca 3008 	str.w	r3, [sl, #8]
  40b68c:	2b00      	cmp	r3, #0
  40b68e:	d1e7      	bne.n	40b660 <__sfvwrite_r+0x34>
  40b690:	2000      	movs	r0, #0
  40b692:	b005      	add	sp, #20
  40b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b698:	4621      	mov	r1, r4
  40b69a:	9801      	ldr	r0, [sp, #4]
  40b69c:	f7fe fca8 	bl	409ff0 <__swsetup_r>
  40b6a0:	2800      	cmp	r0, #0
  40b6a2:	f040 813a 	bne.w	40b91a <__sfvwrite_r+0x2ee>
  40b6a6:	89a3      	ldrh	r3, [r4, #12]
  40b6a8:	6835      	ldr	r5, [r6, #0]
  40b6aa:	f003 0802 	and.w	r8, r3, #2
  40b6ae:	fa1f f088 	uxth.w	r0, r8
  40b6b2:	2800      	cmp	r0, #0
  40b6b4:	d1cf      	bne.n	40b656 <__sfvwrite_r+0x2a>
  40b6b6:	f013 0901 	ands.w	r9, r3, #1
  40b6ba:	d15b      	bne.n	40b774 <__sfvwrite_r+0x148>
  40b6bc:	464f      	mov	r7, r9
  40b6be:	9602      	str	r6, [sp, #8]
  40b6c0:	b31f      	cbz	r7, 40b70a <__sfvwrite_r+0xde>
  40b6c2:	059a      	lsls	r2, r3, #22
  40b6c4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40b6c8:	d52c      	bpl.n	40b724 <__sfvwrite_r+0xf8>
  40b6ca:	4547      	cmp	r7, r8
  40b6cc:	46c2      	mov	sl, r8
  40b6ce:	f0c0 80a4 	bcc.w	40b81a <__sfvwrite_r+0x1ee>
  40b6d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b6d6:	f040 80b1 	bne.w	40b83c <__sfvwrite_r+0x210>
  40b6da:	6820      	ldr	r0, [r4, #0]
  40b6dc:	4652      	mov	r2, sl
  40b6de:	4649      	mov	r1, r9
  40b6e0:	f001 f8c8 	bl	40c874 <memmove>
  40b6e4:	68a0      	ldr	r0, [r4, #8]
  40b6e6:	6823      	ldr	r3, [r4, #0]
  40b6e8:	ebc8 0000 	rsb	r0, r8, r0
  40b6ec:	4453      	add	r3, sl
  40b6ee:	60a0      	str	r0, [r4, #8]
  40b6f0:	6023      	str	r3, [r4, #0]
  40b6f2:	4638      	mov	r0, r7
  40b6f4:	9a02      	ldr	r2, [sp, #8]
  40b6f6:	6893      	ldr	r3, [r2, #8]
  40b6f8:	1a1b      	subs	r3, r3, r0
  40b6fa:	4481      	add	r9, r0
  40b6fc:	1a3f      	subs	r7, r7, r0
  40b6fe:	6093      	str	r3, [r2, #8]
  40b700:	2b00      	cmp	r3, #0
  40b702:	d0c5      	beq.n	40b690 <__sfvwrite_r+0x64>
  40b704:	89a3      	ldrh	r3, [r4, #12]
  40b706:	2f00      	cmp	r7, #0
  40b708:	d1db      	bne.n	40b6c2 <__sfvwrite_r+0x96>
  40b70a:	f8d5 9000 	ldr.w	r9, [r5]
  40b70e:	686f      	ldr	r7, [r5, #4]
  40b710:	3508      	adds	r5, #8
  40b712:	e7d5      	b.n	40b6c0 <__sfvwrite_r+0x94>
  40b714:	f8d5 9000 	ldr.w	r9, [r5]
  40b718:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40b71c:	3508      	adds	r5, #8
  40b71e:	e79f      	b.n	40b660 <__sfvwrite_r+0x34>
  40b720:	2000      	movs	r0, #0
  40b722:	4770      	bx	lr
  40b724:	6820      	ldr	r0, [r4, #0]
  40b726:	6923      	ldr	r3, [r4, #16]
  40b728:	4298      	cmp	r0, r3
  40b72a:	d803      	bhi.n	40b734 <__sfvwrite_r+0x108>
  40b72c:	6961      	ldr	r1, [r4, #20]
  40b72e:	428f      	cmp	r7, r1
  40b730:	f080 80b7 	bcs.w	40b8a2 <__sfvwrite_r+0x276>
  40b734:	45b8      	cmp	r8, r7
  40b736:	bf28      	it	cs
  40b738:	46b8      	movcs	r8, r7
  40b73a:	4642      	mov	r2, r8
  40b73c:	4649      	mov	r1, r9
  40b73e:	f001 f899 	bl	40c874 <memmove>
  40b742:	68a3      	ldr	r3, [r4, #8]
  40b744:	6822      	ldr	r2, [r4, #0]
  40b746:	ebc8 0303 	rsb	r3, r8, r3
  40b74a:	4442      	add	r2, r8
  40b74c:	60a3      	str	r3, [r4, #8]
  40b74e:	6022      	str	r2, [r4, #0]
  40b750:	2b00      	cmp	r3, #0
  40b752:	d149      	bne.n	40b7e8 <__sfvwrite_r+0x1bc>
  40b754:	4621      	mov	r1, r4
  40b756:	9801      	ldr	r0, [sp, #4]
  40b758:	f7ff fd22 	bl	40b1a0 <_fflush_r>
  40b75c:	2800      	cmp	r0, #0
  40b75e:	d043      	beq.n	40b7e8 <__sfvwrite_r+0x1bc>
  40b760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b768:	f04f 30ff 	mov.w	r0, #4294967295
  40b76c:	81a3      	strh	r3, [r4, #12]
  40b76e:	b005      	add	sp, #20
  40b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b774:	4680      	mov	r8, r0
  40b776:	9002      	str	r0, [sp, #8]
  40b778:	4682      	mov	sl, r0
  40b77a:	4681      	mov	r9, r0
  40b77c:	f1b9 0f00 	cmp.w	r9, #0
  40b780:	d02a      	beq.n	40b7d8 <__sfvwrite_r+0x1ac>
  40b782:	9b02      	ldr	r3, [sp, #8]
  40b784:	2b00      	cmp	r3, #0
  40b786:	d04c      	beq.n	40b822 <__sfvwrite_r+0x1f6>
  40b788:	6820      	ldr	r0, [r4, #0]
  40b78a:	6923      	ldr	r3, [r4, #16]
  40b78c:	6962      	ldr	r2, [r4, #20]
  40b78e:	45c8      	cmp	r8, r9
  40b790:	46c3      	mov	fp, r8
  40b792:	bf28      	it	cs
  40b794:	46cb      	movcs	fp, r9
  40b796:	4298      	cmp	r0, r3
  40b798:	465f      	mov	r7, fp
  40b79a:	d904      	bls.n	40b7a6 <__sfvwrite_r+0x17a>
  40b79c:	68a3      	ldr	r3, [r4, #8]
  40b79e:	4413      	add	r3, r2
  40b7a0:	459b      	cmp	fp, r3
  40b7a2:	f300 8090 	bgt.w	40b8c6 <__sfvwrite_r+0x29a>
  40b7a6:	4593      	cmp	fp, r2
  40b7a8:	db20      	blt.n	40b7ec <__sfvwrite_r+0x1c0>
  40b7aa:	4613      	mov	r3, r2
  40b7ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b7ae:	69e1      	ldr	r1, [r4, #28]
  40b7b0:	9801      	ldr	r0, [sp, #4]
  40b7b2:	4652      	mov	r2, sl
  40b7b4:	47b8      	blx	r7
  40b7b6:	1e07      	subs	r7, r0, #0
  40b7b8:	ddd2      	ble.n	40b760 <__sfvwrite_r+0x134>
  40b7ba:	ebb8 0807 	subs.w	r8, r8, r7
  40b7be:	d023      	beq.n	40b808 <__sfvwrite_r+0x1dc>
  40b7c0:	68b3      	ldr	r3, [r6, #8]
  40b7c2:	1bdb      	subs	r3, r3, r7
  40b7c4:	44ba      	add	sl, r7
  40b7c6:	ebc7 0909 	rsb	r9, r7, r9
  40b7ca:	60b3      	str	r3, [r6, #8]
  40b7cc:	2b00      	cmp	r3, #0
  40b7ce:	f43f af5f 	beq.w	40b690 <__sfvwrite_r+0x64>
  40b7d2:	f1b9 0f00 	cmp.w	r9, #0
  40b7d6:	d1d4      	bne.n	40b782 <__sfvwrite_r+0x156>
  40b7d8:	2300      	movs	r3, #0
  40b7da:	f8d5 a000 	ldr.w	sl, [r5]
  40b7de:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40b7e2:	9302      	str	r3, [sp, #8]
  40b7e4:	3508      	adds	r5, #8
  40b7e6:	e7c9      	b.n	40b77c <__sfvwrite_r+0x150>
  40b7e8:	4640      	mov	r0, r8
  40b7ea:	e783      	b.n	40b6f4 <__sfvwrite_r+0xc8>
  40b7ec:	465a      	mov	r2, fp
  40b7ee:	4651      	mov	r1, sl
  40b7f0:	f001 f840 	bl	40c874 <memmove>
  40b7f4:	68a2      	ldr	r2, [r4, #8]
  40b7f6:	6823      	ldr	r3, [r4, #0]
  40b7f8:	ebcb 0202 	rsb	r2, fp, r2
  40b7fc:	445b      	add	r3, fp
  40b7fe:	ebb8 0807 	subs.w	r8, r8, r7
  40b802:	60a2      	str	r2, [r4, #8]
  40b804:	6023      	str	r3, [r4, #0]
  40b806:	d1db      	bne.n	40b7c0 <__sfvwrite_r+0x194>
  40b808:	4621      	mov	r1, r4
  40b80a:	9801      	ldr	r0, [sp, #4]
  40b80c:	f7ff fcc8 	bl	40b1a0 <_fflush_r>
  40b810:	2800      	cmp	r0, #0
  40b812:	d1a5      	bne.n	40b760 <__sfvwrite_r+0x134>
  40b814:	f8cd 8008 	str.w	r8, [sp, #8]
  40b818:	e7d2      	b.n	40b7c0 <__sfvwrite_r+0x194>
  40b81a:	6820      	ldr	r0, [r4, #0]
  40b81c:	46b8      	mov	r8, r7
  40b81e:	46ba      	mov	sl, r7
  40b820:	e75c      	b.n	40b6dc <__sfvwrite_r+0xb0>
  40b822:	464a      	mov	r2, r9
  40b824:	210a      	movs	r1, #10
  40b826:	4650      	mov	r0, sl
  40b828:	f000 ffa2 	bl	40c770 <memchr>
  40b82c:	2800      	cmp	r0, #0
  40b82e:	d06f      	beq.n	40b910 <__sfvwrite_r+0x2e4>
  40b830:	3001      	adds	r0, #1
  40b832:	2301      	movs	r3, #1
  40b834:	ebca 0800 	rsb	r8, sl, r0
  40b838:	9302      	str	r3, [sp, #8]
  40b83a:	e7a5      	b.n	40b788 <__sfvwrite_r+0x15c>
  40b83c:	6962      	ldr	r2, [r4, #20]
  40b83e:	6820      	ldr	r0, [r4, #0]
  40b840:	6921      	ldr	r1, [r4, #16]
  40b842:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40b846:	ebc1 0a00 	rsb	sl, r1, r0
  40b84a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40b84e:	f10a 0001 	add.w	r0, sl, #1
  40b852:	ea4f 0868 	mov.w	r8, r8, asr #1
  40b856:	4438      	add	r0, r7
  40b858:	4540      	cmp	r0, r8
  40b85a:	4642      	mov	r2, r8
  40b85c:	bf84      	itt	hi
  40b85e:	4680      	movhi	r8, r0
  40b860:	4642      	movhi	r2, r8
  40b862:	055b      	lsls	r3, r3, #21
  40b864:	d542      	bpl.n	40b8ec <__sfvwrite_r+0x2c0>
  40b866:	4611      	mov	r1, r2
  40b868:	9801      	ldr	r0, [sp, #4]
  40b86a:	f000 fcc9 	bl	40c200 <_malloc_r>
  40b86e:	4683      	mov	fp, r0
  40b870:	2800      	cmp	r0, #0
  40b872:	d055      	beq.n	40b920 <__sfvwrite_r+0x2f4>
  40b874:	4652      	mov	r2, sl
  40b876:	6921      	ldr	r1, [r4, #16]
  40b878:	f7fa faea 	bl	405e50 <memcpy>
  40b87c:	89a3      	ldrh	r3, [r4, #12]
  40b87e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40b882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b886:	81a3      	strh	r3, [r4, #12]
  40b888:	ebca 0308 	rsb	r3, sl, r8
  40b88c:	eb0b 000a 	add.w	r0, fp, sl
  40b890:	f8c4 8014 	str.w	r8, [r4, #20]
  40b894:	f8c4 b010 	str.w	fp, [r4, #16]
  40b898:	6020      	str	r0, [r4, #0]
  40b89a:	60a3      	str	r3, [r4, #8]
  40b89c:	46b8      	mov	r8, r7
  40b89e:	46ba      	mov	sl, r7
  40b8a0:	e71c      	b.n	40b6dc <__sfvwrite_r+0xb0>
  40b8a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40b8a6:	42bb      	cmp	r3, r7
  40b8a8:	bf28      	it	cs
  40b8aa:	463b      	movcs	r3, r7
  40b8ac:	464a      	mov	r2, r9
  40b8ae:	fb93 f3f1 	sdiv	r3, r3, r1
  40b8b2:	9801      	ldr	r0, [sp, #4]
  40b8b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b8b6:	fb01 f303 	mul.w	r3, r1, r3
  40b8ba:	69e1      	ldr	r1, [r4, #28]
  40b8bc:	47b0      	blx	r6
  40b8be:	2800      	cmp	r0, #0
  40b8c0:	f73f af18 	bgt.w	40b6f4 <__sfvwrite_r+0xc8>
  40b8c4:	e74c      	b.n	40b760 <__sfvwrite_r+0x134>
  40b8c6:	461a      	mov	r2, r3
  40b8c8:	4651      	mov	r1, sl
  40b8ca:	9303      	str	r3, [sp, #12]
  40b8cc:	f000 ffd2 	bl	40c874 <memmove>
  40b8d0:	6822      	ldr	r2, [r4, #0]
  40b8d2:	9b03      	ldr	r3, [sp, #12]
  40b8d4:	9801      	ldr	r0, [sp, #4]
  40b8d6:	441a      	add	r2, r3
  40b8d8:	6022      	str	r2, [r4, #0]
  40b8da:	4621      	mov	r1, r4
  40b8dc:	f7ff fc60 	bl	40b1a0 <_fflush_r>
  40b8e0:	9b03      	ldr	r3, [sp, #12]
  40b8e2:	2800      	cmp	r0, #0
  40b8e4:	f47f af3c 	bne.w	40b760 <__sfvwrite_r+0x134>
  40b8e8:	461f      	mov	r7, r3
  40b8ea:	e766      	b.n	40b7ba <__sfvwrite_r+0x18e>
  40b8ec:	9801      	ldr	r0, [sp, #4]
  40b8ee:	f001 fc8b 	bl	40d208 <_realloc_r>
  40b8f2:	4683      	mov	fp, r0
  40b8f4:	2800      	cmp	r0, #0
  40b8f6:	d1c7      	bne.n	40b888 <__sfvwrite_r+0x25c>
  40b8f8:	9d01      	ldr	r5, [sp, #4]
  40b8fa:	6921      	ldr	r1, [r4, #16]
  40b8fc:	4628      	mov	r0, r5
  40b8fe:	f7ff fdad 	bl	40b45c <_free_r>
  40b902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b906:	220c      	movs	r2, #12
  40b908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40b90c:	602a      	str	r2, [r5, #0]
  40b90e:	e729      	b.n	40b764 <__sfvwrite_r+0x138>
  40b910:	2301      	movs	r3, #1
  40b912:	f109 0801 	add.w	r8, r9, #1
  40b916:	9302      	str	r3, [sp, #8]
  40b918:	e736      	b.n	40b788 <__sfvwrite_r+0x15c>
  40b91a:	f04f 30ff 	mov.w	r0, #4294967295
  40b91e:	e6b8      	b.n	40b692 <__sfvwrite_r+0x66>
  40b920:	9a01      	ldr	r2, [sp, #4]
  40b922:	230c      	movs	r3, #12
  40b924:	6013      	str	r3, [r2, #0]
  40b926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b92a:	e71b      	b.n	40b764 <__sfvwrite_r+0x138>
  40b92c:	7ffffc00 	.word	0x7ffffc00

0040b930 <_fwalk_reent>:
  40b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b934:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40b938:	d01f      	beq.n	40b97a <_fwalk_reent+0x4a>
  40b93a:	4688      	mov	r8, r1
  40b93c:	4606      	mov	r6, r0
  40b93e:	f04f 0900 	mov.w	r9, #0
  40b942:	687d      	ldr	r5, [r7, #4]
  40b944:	68bc      	ldr	r4, [r7, #8]
  40b946:	3d01      	subs	r5, #1
  40b948:	d411      	bmi.n	40b96e <_fwalk_reent+0x3e>
  40b94a:	89a3      	ldrh	r3, [r4, #12]
  40b94c:	2b01      	cmp	r3, #1
  40b94e:	f105 35ff 	add.w	r5, r5, #4294967295
  40b952:	d908      	bls.n	40b966 <_fwalk_reent+0x36>
  40b954:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40b958:	3301      	adds	r3, #1
  40b95a:	4621      	mov	r1, r4
  40b95c:	4630      	mov	r0, r6
  40b95e:	d002      	beq.n	40b966 <_fwalk_reent+0x36>
  40b960:	47c0      	blx	r8
  40b962:	ea49 0900 	orr.w	r9, r9, r0
  40b966:	1c6b      	adds	r3, r5, #1
  40b968:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40b96c:	d1ed      	bne.n	40b94a <_fwalk_reent+0x1a>
  40b96e:	683f      	ldr	r7, [r7, #0]
  40b970:	2f00      	cmp	r7, #0
  40b972:	d1e6      	bne.n	40b942 <_fwalk_reent+0x12>
  40b974:	4648      	mov	r0, r9
  40b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b97a:	46b9      	mov	r9, r7
  40b97c:	4648      	mov	r0, r9
  40b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b982:	bf00      	nop

0040b984 <rshift>:
  40b984:	6902      	ldr	r2, [r0, #16]
  40b986:	114b      	asrs	r3, r1, #5
  40b988:	4293      	cmp	r3, r2
  40b98a:	da2e      	bge.n	40b9ea <rshift+0x66>
  40b98c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b98e:	f011 011f 	ands.w	r1, r1, #31
  40b992:	f100 0614 	add.w	r6, r0, #20
  40b996:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  40b99a:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
  40b99e:	d029      	beq.n	40b9f4 <rshift+0x70>
  40b9a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40b9a4:	f10e 0504 	add.w	r5, lr, #4
  40b9a8:	42aa      	cmp	r2, r5
  40b9aa:	fa23 f401 	lsr.w	r4, r3, r1
  40b9ae:	f1c1 0c20 	rsb	ip, r1, #32
  40b9b2:	d939      	bls.n	40ba28 <rshift+0xa4>
  40b9b4:	f100 0710 	add.w	r7, r0, #16
  40b9b8:	682b      	ldr	r3, [r5, #0]
  40b9ba:	fa03 f30c 	lsl.w	r3, r3, ip
  40b9be:	4323      	orrs	r3, r4
  40b9c0:	f847 3f04 	str.w	r3, [r7, #4]!
  40b9c4:	f855 3b04 	ldr.w	r3, [r5], #4
  40b9c8:	42aa      	cmp	r2, r5
  40b9ca:	fa23 f401 	lsr.w	r4, r3, r1
  40b9ce:	d8f3      	bhi.n	40b9b8 <rshift+0x34>
  40b9d0:	ebce 0202 	rsb	r2, lr, r2
  40b9d4:	3a05      	subs	r2, #5
  40b9d6:	f022 0203 	bic.w	r2, r2, #3
  40b9da:	3204      	adds	r2, #4
  40b9dc:	4432      	add	r2, r6
  40b9de:	6014      	str	r4, [r2, #0]
  40b9e0:	b104      	cbz	r4, 40b9e4 <rshift+0x60>
  40b9e2:	3204      	adds	r2, #4
  40b9e4:	1b93      	subs	r3, r2, r6
  40b9e6:	109b      	asrs	r3, r3, #2
  40b9e8:	e016      	b.n	40ba18 <rshift+0x94>
  40b9ea:	2300      	movs	r3, #0
  40b9ec:	6103      	str	r3, [r0, #16]
  40b9ee:	2300      	movs	r3, #0
  40b9f0:	6143      	str	r3, [r0, #20]
  40b9f2:	4770      	bx	lr
  40b9f4:	4572      	cmp	r2, lr
  40b9f6:	d912      	bls.n	40ba1e <rshift+0x9a>
  40b9f8:	f100 0410 	add.w	r4, r0, #16
  40b9fc:	4671      	mov	r1, lr
  40b9fe:	f851 5b04 	ldr.w	r5, [r1], #4
  40ba02:	f844 5f04 	str.w	r5, [r4, #4]!
  40ba06:	428a      	cmp	r2, r1
  40ba08:	d8f9      	bhi.n	40b9fe <rshift+0x7a>
  40ba0a:	ea6f 030e 	mvn.w	r3, lr
  40ba0e:	4413      	add	r3, r2
  40ba10:	f023 0303 	bic.w	r3, r3, #3
  40ba14:	3304      	adds	r3, #4
  40ba16:	109b      	asrs	r3, r3, #2
  40ba18:	6103      	str	r3, [r0, #16]
  40ba1a:	b113      	cbz	r3, 40ba22 <rshift+0x9e>
  40ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba1e:	2300      	movs	r3, #0
  40ba20:	6103      	str	r3, [r0, #16]
  40ba22:	2300      	movs	r3, #0
  40ba24:	6143      	str	r3, [r0, #20]
  40ba26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba28:	4632      	mov	r2, r6
  40ba2a:	e7d8      	b.n	40b9de <rshift+0x5a>

0040ba2c <__gethex>:
  40ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba30:	b08b      	sub	sp, #44	; 0x2c
  40ba32:	4689      	mov	r9, r1
  40ba34:	9203      	str	r2, [sp, #12]
  40ba36:	9308      	str	r3, [sp, #32]
  40ba38:	9005      	str	r0, [sp, #20]
  40ba3a:	f000 fb61 	bl	40c100 <_localeconv_r>
  40ba3e:	6803      	ldr	r3, [r0, #0]
  40ba40:	9302      	str	r3, [sp, #8]
  40ba42:	4618      	mov	r0, r3
  40ba44:	461c      	mov	r4, r3
  40ba46:	f7fa fc3b 	bl	4062c0 <strlen>
  40ba4a:	f8d9 3000 	ldr.w	r3, [r9]
  40ba4e:	9000      	str	r0, [sp, #0]
  40ba50:	789a      	ldrb	r2, [r3, #2]
  40ba52:	1821      	adds	r1, r4, r0
  40ba54:	2a30      	cmp	r2, #48	; 0x30
  40ba56:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  40ba5a:	f040 81aa 	bne.w	40bdb2 <__gethex+0x386>
  40ba5e:	3303      	adds	r3, #3
  40ba60:	f04f 0800 	mov.w	r8, #0
  40ba64:	461c      	mov	r4, r3
  40ba66:	f813 2b01 	ldrb.w	r2, [r3], #1
  40ba6a:	2a30      	cmp	r2, #48	; 0x30
  40ba6c:	f108 0801 	add.w	r8, r8, #1
  40ba70:	d0f8      	beq.n	40ba64 <__gethex+0x38>
  40ba72:	4eb3      	ldr	r6, [pc, #716]	; (40bd40 <__gethex+0x314>)
  40ba74:	5cb3      	ldrb	r3, [r6, r2]
  40ba76:	2b00      	cmp	r3, #0
  40ba78:	f000 80f0 	beq.w	40bc5c <__gethex+0x230>
  40ba7c:	7823      	ldrb	r3, [r4, #0]
  40ba7e:	f04f 0a00 	mov.w	sl, #0
  40ba82:	5cf3      	ldrb	r3, [r6, r3]
  40ba84:	4655      	mov	r5, sl
  40ba86:	4627      	mov	r7, r4
  40ba88:	b123      	cbz	r3, 40ba94 <__gethex+0x68>
  40ba8a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  40ba8e:	5cf3      	ldrb	r3, [r6, r3]
  40ba90:	2b00      	cmp	r3, #0
  40ba92:	d1fa      	bne.n	40ba8a <__gethex+0x5e>
  40ba94:	9a00      	ldr	r2, [sp, #0]
  40ba96:	9902      	ldr	r1, [sp, #8]
  40ba98:	4638      	mov	r0, r7
  40ba9a:	f7fa fc7f 	bl	40639c <strncmp>
  40ba9e:	2800      	cmp	r0, #0
  40baa0:	f000 8092 	beq.w	40bbc8 <__gethex+0x19c>
  40baa4:	783b      	ldrb	r3, [r7, #0]
  40baa6:	2d00      	cmp	r5, #0
  40baa8:	f000 8172 	beq.w	40bd90 <__gethex+0x364>
  40baac:	1bed      	subs	r5, r5, r7
  40baae:	00aa      	lsls	r2, r5, #2
  40bab0:	9201      	str	r2, [sp, #4]
  40bab2:	2b50      	cmp	r3, #80	; 0x50
  40bab4:	f000 8091 	beq.w	40bbda <__gethex+0x1ae>
  40bab8:	2b70      	cmp	r3, #112	; 0x70
  40baba:	f000 808e 	beq.w	40bbda <__gethex+0x1ae>
  40babe:	463d      	mov	r5, r7
  40bac0:	f8c9 7000 	str.w	r7, [r9]
  40bac4:	f1ba 0f00 	cmp.w	sl, #0
  40bac8:	f040 80b7 	bne.w	40bc3a <__gethex+0x20e>
  40bacc:	1b2b      	subs	r3, r5, r4
  40bace:	3b01      	subs	r3, #1
  40bad0:	2b07      	cmp	r3, #7
  40bad2:	4651      	mov	r1, sl
  40bad4:	dd04      	ble.n	40bae0 <__gethex+0xb4>
  40bad6:	105b      	asrs	r3, r3, #1
  40bad8:	2b07      	cmp	r3, #7
  40bada:	f101 0101 	add.w	r1, r1, #1
  40bade:	dcfa      	bgt.n	40bad6 <__gethex+0xaa>
  40bae0:	9805      	ldr	r0, [sp, #20]
  40bae2:	f000 ff2f 	bl	40c944 <_Balloc>
  40bae6:	4603      	mov	r3, r0
  40bae8:	3314      	adds	r3, #20
  40baea:	42a5      	cmp	r5, r4
  40baec:	9004      	str	r0, [sp, #16]
  40baee:	9307      	str	r3, [sp, #28]
  40baf0:	f240 81d4 	bls.w	40be9c <__gethex+0x470>
  40baf4:	4699      	mov	r9, r3
  40baf6:	9b00      	ldr	r3, [sp, #0]
  40baf8:	f04f 0800 	mov.w	r8, #0
  40bafc:	f1c3 0301 	rsb	r3, r3, #1
  40bb00:	4647      	mov	r7, r8
  40bb02:	9306      	str	r3, [sp, #24]
  40bb04:	e00f      	b.n	40bb26 <__gethex+0xfa>
  40bb06:	2f20      	cmp	r7, #32
  40bb08:	f000 809f 	beq.w	40bc4a <__gethex+0x21e>
  40bb0c:	463a      	mov	r2, r7
  40bb0e:	3704      	adds	r7, #4
  40bb10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40bb14:	5cf3      	ldrb	r3, [r6, r3]
  40bb16:	4655      	mov	r5, sl
  40bb18:	f003 030f 	and.w	r3, r3, #15
  40bb1c:	4093      	lsls	r3, r2
  40bb1e:	42a5      	cmp	r5, r4
  40bb20:	ea48 0803 	orr.w	r8, r8, r3
  40bb24:	d915      	bls.n	40bb52 <__gethex+0x126>
  40bb26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40bb2a:	455b      	cmp	r3, fp
  40bb2c:	f105 3aff 	add.w	sl, r5, #4294967295
  40bb30:	d1e9      	bne.n	40bb06 <__gethex+0xda>
  40bb32:	9b06      	ldr	r3, [sp, #24]
  40bb34:	4453      	add	r3, sl
  40bb36:	42a3      	cmp	r3, r4
  40bb38:	d3e5      	bcc.n	40bb06 <__gethex+0xda>
  40bb3a:	4618      	mov	r0, r3
  40bb3c:	9a00      	ldr	r2, [sp, #0]
  40bb3e:	9902      	ldr	r1, [sp, #8]
  40bb40:	9309      	str	r3, [sp, #36]	; 0x24
  40bb42:	f7fa fc2b 	bl	40639c <strncmp>
  40bb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb48:	2800      	cmp	r0, #0
  40bb4a:	d1dc      	bne.n	40bb06 <__gethex+0xda>
  40bb4c:	461d      	mov	r5, r3
  40bb4e:	42a5      	cmp	r5, r4
  40bb50:	d8e9      	bhi.n	40bb26 <__gethex+0xfa>
  40bb52:	f849 8b04 	str.w	r8, [r9], #4
  40bb56:	9b07      	ldr	r3, [sp, #28]
  40bb58:	9a04      	ldr	r2, [sp, #16]
  40bb5a:	ebc3 0909 	rsb	r9, r3, r9
  40bb5e:	ea4f 03a9 	mov.w	r3, r9, asr #2
  40bb62:	6113      	str	r3, [r2, #16]
  40bb64:	4640      	mov	r0, r8
  40bb66:	ea4f 1943 	mov.w	r9, r3, lsl #5
  40bb6a:	f000 ffa7 	bl	40cabc <__hi0bits>
  40bb6e:	9b03      	ldr	r3, [sp, #12]
  40bb70:	681e      	ldr	r6, [r3, #0]
  40bb72:	ebc0 0009 	rsb	r0, r0, r9
  40bb76:	42b0      	cmp	r0, r6
  40bb78:	f300 80e4 	bgt.w	40bd44 <__gethex+0x318>
  40bb7c:	f2c0 810a 	blt.w	40bd94 <__gethex+0x368>
  40bb80:	2700      	movs	r7, #0
  40bb82:	9b03      	ldr	r3, [sp, #12]
  40bb84:	9a01      	ldr	r2, [sp, #4]
  40bb86:	689b      	ldr	r3, [r3, #8]
  40bb88:	429a      	cmp	r2, r3
  40bb8a:	f300 8097 	bgt.w	40bcbc <__gethex+0x290>
  40bb8e:	9803      	ldr	r0, [sp, #12]
  40bb90:	9901      	ldr	r1, [sp, #4]
  40bb92:	6843      	ldr	r3, [r0, #4]
  40bb94:	4299      	cmp	r1, r3
  40bb96:	f280 80b5 	bge.w	40bd04 <__gethex+0x2d8>
  40bb9a:	1a5d      	subs	r5, r3, r1
  40bb9c:	42ae      	cmp	r6, r5
  40bb9e:	f300 8110 	bgt.w	40bdc2 <__gethex+0x396>
  40bba2:	68c2      	ldr	r2, [r0, #12]
  40bba4:	2a02      	cmp	r2, #2
  40bba6:	f000 8180 	beq.w	40beaa <__gethex+0x47e>
  40bbaa:	2a03      	cmp	r2, #3
  40bbac:	f000 815d 	beq.w	40be6a <__gethex+0x43e>
  40bbb0:	2a01      	cmp	r2, #1
  40bbb2:	f000 817e 	beq.w	40beb2 <__gethex+0x486>
  40bbb6:	9805      	ldr	r0, [sp, #20]
  40bbb8:	9904      	ldr	r1, [sp, #16]
  40bbba:	f000 fee9 	bl	40c990 <_Bfree>
  40bbbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40bbc0:	2300      	movs	r3, #0
  40bbc2:	6013      	str	r3, [r2, #0]
  40bbc4:	2050      	movs	r0, #80	; 0x50
  40bbc6:	e03d      	b.n	40bc44 <__gethex+0x218>
  40bbc8:	2d00      	cmp	r5, #0
  40bbca:	f000 811a 	beq.w	40be02 <__gethex+0x3d6>
  40bbce:	783b      	ldrb	r3, [r7, #0]
  40bbd0:	e76c      	b.n	40baac <__gethex+0x80>
  40bbd2:	2300      	movs	r3, #0
  40bbd4:	9301      	str	r3, [sp, #4]
  40bbd6:	f04f 0a01 	mov.w	sl, #1
  40bbda:	787b      	ldrb	r3, [r7, #1]
  40bbdc:	2b2b      	cmp	r3, #43	; 0x2b
  40bbde:	f000 80ac 	beq.w	40bd3a <__gethex+0x30e>
  40bbe2:	2b2d      	cmp	r3, #45	; 0x2d
  40bbe4:	d075      	beq.n	40bcd2 <__gethex+0x2a6>
  40bbe6:	1c79      	adds	r1, r7, #1
  40bbe8:	2500      	movs	r5, #0
  40bbea:	5cf3      	ldrb	r3, [r6, r3]
  40bbec:	4854      	ldr	r0, [pc, #336]	; (40bd40 <__gethex+0x314>)
  40bbee:	1e5a      	subs	r2, r3, #1
  40bbf0:	2a18      	cmp	r2, #24
  40bbf2:	f63f af64 	bhi.w	40babe <__gethex+0x92>
  40bbf6:	784a      	ldrb	r2, [r1, #1]
  40bbf8:	5c82      	ldrb	r2, [r0, r2]
  40bbfa:	1e50      	subs	r0, r2, #1
  40bbfc:	2818      	cmp	r0, #24
  40bbfe:	f1a3 0310 	sub.w	r3, r3, #16
  40bc02:	f101 0101 	add.w	r1, r1, #1
  40bc06:	d80b      	bhi.n	40bc20 <__gethex+0x1f4>
  40bc08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40bc0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40bc10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  40bc14:	5c32      	ldrb	r2, [r6, r0]
  40bc16:	1e50      	subs	r0, r2, #1
  40bc18:	2818      	cmp	r0, #24
  40bc1a:	f1a3 0310 	sub.w	r3, r3, #16
  40bc1e:	d9f3      	bls.n	40bc08 <__gethex+0x1dc>
  40bc20:	b105      	cbz	r5, 40bc24 <__gethex+0x1f8>
  40bc22:	425b      	negs	r3, r3
  40bc24:	9a01      	ldr	r2, [sp, #4]
  40bc26:	463d      	mov	r5, r7
  40bc28:	441a      	add	r2, r3
  40bc2a:	460f      	mov	r7, r1
  40bc2c:	9201      	str	r2, [sp, #4]
  40bc2e:	f8c9 7000 	str.w	r7, [r9]
  40bc32:	f1ba 0f00 	cmp.w	sl, #0
  40bc36:	f43f af49 	beq.w	40bacc <__gethex+0xa0>
  40bc3a:	f1b8 0f00 	cmp.w	r8, #0
  40bc3e:	bf0c      	ite	eq
  40bc40:	2006      	moveq	r0, #6
  40bc42:	2000      	movne	r0, #0
  40bc44:	b00b      	add	sp, #44	; 0x2c
  40bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc4a:	f8c9 8000 	str.w	r8, [r9]
  40bc4e:	f04f 0800 	mov.w	r8, #0
  40bc52:	f109 0904 	add.w	r9, r9, #4
  40bc56:	4642      	mov	r2, r8
  40bc58:	2704      	movs	r7, #4
  40bc5a:	e759      	b.n	40bb10 <__gethex+0xe4>
  40bc5c:	9d00      	ldr	r5, [sp, #0]
  40bc5e:	9902      	ldr	r1, [sp, #8]
  40bc60:	462a      	mov	r2, r5
  40bc62:	4620      	mov	r0, r4
  40bc64:	f7fa fb9a 	bl	40639c <strncmp>
  40bc68:	2800      	cmp	r0, #0
  40bc6a:	d036      	beq.n	40bcda <__gethex+0x2ae>
  40bc6c:	7823      	ldrb	r3, [r4, #0]
  40bc6e:	4627      	mov	r7, r4
  40bc70:	2b50      	cmp	r3, #80	; 0x50
  40bc72:	d0ae      	beq.n	40bbd2 <__gethex+0x1a6>
  40bc74:	2b70      	cmp	r3, #112	; 0x70
  40bc76:	d0ac      	beq.n	40bbd2 <__gethex+0x1a6>
  40bc78:	f8c9 7000 	str.w	r7, [r9]
  40bc7c:	e7dd      	b.n	40bc3a <__gethex+0x20e>
  40bc7e:	9b04      	ldr	r3, [sp, #16]
  40bc80:	689b      	ldr	r3, [r3, #8]
  40bc82:	429f      	cmp	r7, r3
  40bc84:	f280 8135 	bge.w	40bef2 <__gethex+0x4c6>
  40bc88:	463b      	mov	r3, r7
  40bc8a:	9804      	ldr	r0, [sp, #16]
  40bc8c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  40bc90:	2101      	movs	r1, #1
  40bc92:	3301      	adds	r3, #1
  40bc94:	2c02      	cmp	r4, #2
  40bc96:	6103      	str	r3, [r0, #16]
  40bc98:	6151      	str	r1, [r2, #20]
  40bc9a:	f000 8119 	beq.w	40bed0 <__gethex+0x4a4>
  40bc9e:	429f      	cmp	r7, r3
  40bca0:	f280 80dc 	bge.w	40be5c <__gethex+0x430>
  40bca4:	2101      	movs	r1, #1
  40bca6:	9804      	ldr	r0, [sp, #16]
  40bca8:	f7ff fe6c 	bl	40b984 <rshift>
  40bcac:	9b03      	ldr	r3, [sp, #12]
  40bcae:	9a01      	ldr	r2, [sp, #4]
  40bcb0:	689b      	ldr	r3, [r3, #8]
  40bcb2:	3201      	adds	r2, #1
  40bcb4:	429a      	cmp	r2, r3
  40bcb6:	9201      	str	r2, [sp, #4]
  40bcb8:	f340 80d3 	ble.w	40be62 <__gethex+0x436>
  40bcbc:	9805      	ldr	r0, [sp, #20]
  40bcbe:	9904      	ldr	r1, [sp, #16]
  40bcc0:	f000 fe66 	bl	40c990 <_Bfree>
  40bcc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40bcc6:	2300      	movs	r3, #0
  40bcc8:	20a3      	movs	r0, #163	; 0xa3
  40bcca:	6013      	str	r3, [r2, #0]
  40bccc:	b00b      	add	sp, #44	; 0x2c
  40bcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bcd2:	2501      	movs	r5, #1
  40bcd4:	78bb      	ldrb	r3, [r7, #2]
  40bcd6:	1cb9      	adds	r1, r7, #2
  40bcd8:	e787      	b.n	40bbea <__gethex+0x1be>
  40bcda:	5d62      	ldrb	r2, [r4, r5]
  40bcdc:	5cb3      	ldrb	r3, [r6, r2]
  40bcde:	1967      	adds	r7, r4, r5
  40bce0:	2b00      	cmp	r3, #0
  40bce2:	d06a      	beq.n	40bdba <__gethex+0x38e>
  40bce4:	2a30      	cmp	r2, #48	; 0x30
  40bce6:	463c      	mov	r4, r7
  40bce8:	d104      	bne.n	40bcf4 <__gethex+0x2c8>
  40bcea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40bcee:	2b30      	cmp	r3, #48	; 0x30
  40bcf0:	d0fb      	beq.n	40bcea <__gethex+0x2be>
  40bcf2:	5cf3      	ldrb	r3, [r6, r3]
  40bcf4:	fab3 fa83 	clz	sl, r3
  40bcf8:	463d      	mov	r5, r7
  40bcfa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  40bcfe:	f04f 0801 	mov.w	r8, #1
  40bd02:	e6c0      	b.n	40ba86 <__gethex+0x5a>
  40bd04:	2401      	movs	r4, #1
  40bd06:	b167      	cbz	r7, 40bd22 <__gethex+0x2f6>
  40bd08:	9b03      	ldr	r3, [sp, #12]
  40bd0a:	68db      	ldr	r3, [r3, #12]
  40bd0c:	2b02      	cmp	r3, #2
  40bd0e:	f000 8086 	beq.w	40be1e <__gethex+0x3f2>
  40bd12:	2b03      	cmp	r3, #3
  40bd14:	f000 8087 	beq.w	40be26 <__gethex+0x3fa>
  40bd18:	2b01      	cmp	r3, #1
  40bd1a:	f000 80b6 	beq.w	40be8a <__gethex+0x45e>
  40bd1e:	f044 0410 	orr.w	r4, r4, #16
  40bd22:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40bd24:	461a      	mov	r2, r3
  40bd26:	9b04      	ldr	r3, [sp, #16]
  40bd28:	6013      	str	r3, [r2, #0]
  40bd2a:	9b08      	ldr	r3, [sp, #32]
  40bd2c:	461a      	mov	r2, r3
  40bd2e:	9b01      	ldr	r3, [sp, #4]
  40bd30:	6013      	str	r3, [r2, #0]
  40bd32:	4620      	mov	r0, r4
  40bd34:	b00b      	add	sp, #44	; 0x2c
  40bd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bd3a:	2500      	movs	r5, #0
  40bd3c:	e7ca      	b.n	40bcd4 <__gethex+0x2a8>
  40bd3e:	bf00      	nop
  40bd40:	00410094 	.word	0x00410094
  40bd44:	1b84      	subs	r4, r0, r6
  40bd46:	4621      	mov	r1, r4
  40bd48:	9804      	ldr	r0, [sp, #16]
  40bd4a:	f001 fa2f 	bl	40d1ac <__any_on>
  40bd4e:	2800      	cmp	r0, #0
  40bd50:	d035      	beq.n	40bdbe <__gethex+0x392>
  40bd52:	1e62      	subs	r2, r4, #1
  40bd54:	1151      	asrs	r1, r2, #5
  40bd56:	9807      	ldr	r0, [sp, #28]
  40bd58:	f002 031f 	and.w	r3, r2, #31
  40bd5c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  40bd60:	2701      	movs	r7, #1
  40bd62:	fa07 f303 	lsl.w	r3, r7, r3
  40bd66:	420b      	tst	r3, r1
  40bd68:	d00a      	beq.n	40bd80 <__gethex+0x354>
  40bd6a:	42ba      	cmp	r2, r7
  40bd6c:	f340 809b 	ble.w	40bea6 <__gethex+0x47a>
  40bd70:	1ea1      	subs	r1, r4, #2
  40bd72:	9804      	ldr	r0, [sp, #16]
  40bd74:	f001 fa1a 	bl	40d1ac <__any_on>
  40bd78:	2800      	cmp	r0, #0
  40bd7a:	f000 8094 	beq.w	40bea6 <__gethex+0x47a>
  40bd7e:	2703      	movs	r7, #3
  40bd80:	9b01      	ldr	r3, [sp, #4]
  40bd82:	9804      	ldr	r0, [sp, #16]
  40bd84:	4423      	add	r3, r4
  40bd86:	4621      	mov	r1, r4
  40bd88:	9301      	str	r3, [sp, #4]
  40bd8a:	f7ff fdfb 	bl	40b984 <rshift>
  40bd8e:	e6f8      	b.n	40bb82 <__gethex+0x156>
  40bd90:	9501      	str	r5, [sp, #4]
  40bd92:	e68e      	b.n	40bab2 <__gethex+0x86>
  40bd94:	1a34      	subs	r4, r6, r0
  40bd96:	9904      	ldr	r1, [sp, #16]
  40bd98:	9805      	ldr	r0, [sp, #20]
  40bd9a:	4622      	mov	r2, r4
  40bd9c:	f000 ffce 	bl	40cd3c <__lshift>
  40bda0:	9b01      	ldr	r3, [sp, #4]
  40bda2:	9004      	str	r0, [sp, #16]
  40bda4:	1b1b      	subs	r3, r3, r4
  40bda6:	9301      	str	r3, [sp, #4]
  40bda8:	4603      	mov	r3, r0
  40bdaa:	3314      	adds	r3, #20
  40bdac:	9307      	str	r3, [sp, #28]
  40bdae:	2700      	movs	r7, #0
  40bdb0:	e6e7      	b.n	40bb82 <__gethex+0x156>
  40bdb2:	1c9c      	adds	r4, r3, #2
  40bdb4:	f04f 0800 	mov.w	r8, #0
  40bdb8:	e65b      	b.n	40ba72 <__gethex+0x46>
  40bdba:	4613      	mov	r3, r2
  40bdbc:	e758      	b.n	40bc70 <__gethex+0x244>
  40bdbe:	4607      	mov	r7, r0
  40bdc0:	e7de      	b.n	40bd80 <__gethex+0x354>
  40bdc2:	1e6c      	subs	r4, r5, #1
  40bdc4:	2f00      	cmp	r7, #0
  40bdc6:	d14e      	bne.n	40be66 <__gethex+0x43a>
  40bdc8:	b124      	cbz	r4, 40bdd4 <__gethex+0x3a8>
  40bdca:	4621      	mov	r1, r4
  40bdcc:	9804      	ldr	r0, [sp, #16]
  40bdce:	f001 f9ed 	bl	40d1ac <__any_on>
  40bdd2:	4607      	mov	r7, r0
  40bdd4:	1163      	asrs	r3, r4, #5
  40bdd6:	9a07      	ldr	r2, [sp, #28]
  40bdd8:	9804      	ldr	r0, [sp, #16]
  40bdda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40bdde:	f004 041f 	and.w	r4, r4, #31
  40bde2:	2301      	movs	r3, #1
  40bde4:	fa03 f404 	lsl.w	r4, r3, r4
  40bde8:	4214      	tst	r4, r2
  40bdea:	4629      	mov	r1, r5
  40bdec:	bf18      	it	ne
  40bdee:	f047 0702 	orrne.w	r7, r7, #2
  40bdf2:	f7ff fdc7 	bl	40b984 <rshift>
  40bdf6:	9b03      	ldr	r3, [sp, #12]
  40bdf8:	685b      	ldr	r3, [r3, #4]
  40bdfa:	9301      	str	r3, [sp, #4]
  40bdfc:	1b76      	subs	r6, r6, r5
  40bdfe:	2402      	movs	r4, #2
  40be00:	e781      	b.n	40bd06 <__gethex+0x2da>
  40be02:	9900      	ldr	r1, [sp, #0]
  40be04:	5c7b      	ldrb	r3, [r7, r1]
  40be06:	5cf2      	ldrb	r2, [r6, r3]
  40be08:	187d      	adds	r5, r7, r1
  40be0a:	462f      	mov	r7, r5
  40be0c:	2a00      	cmp	r2, #0
  40be0e:	f43f ae4d 	beq.w	40baac <__gethex+0x80>
  40be12:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  40be16:	5cf2      	ldrb	r2, [r6, r3]
  40be18:	2a00      	cmp	r2, #0
  40be1a:	d1fa      	bne.n	40be12 <__gethex+0x3e6>
  40be1c:	e646      	b.n	40baac <__gethex+0x80>
  40be1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40be20:	f1c3 0301 	rsb	r3, r3, #1
  40be24:	9315      	str	r3, [sp, #84]	; 0x54
  40be26:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40be28:	2b00      	cmp	r3, #0
  40be2a:	f43f af78 	beq.w	40bd1e <__gethex+0x2f2>
  40be2e:	9b04      	ldr	r3, [sp, #16]
  40be30:	9d07      	ldr	r5, [sp, #28]
  40be32:	691f      	ldr	r7, [r3, #16]
  40be34:	ea4f 0887 	mov.w	r8, r7, lsl #2
  40be38:	eb05 0008 	add.w	r0, r5, r8
  40be3c:	462b      	mov	r3, r5
  40be3e:	2100      	movs	r1, #0
  40be40:	e004      	b.n	40be4c <__gethex+0x420>
  40be42:	f843 1b04 	str.w	r1, [r3], #4
  40be46:	4298      	cmp	r0, r3
  40be48:	f67f af19 	bls.w	40bc7e <__gethex+0x252>
  40be4c:	681a      	ldr	r2, [r3, #0]
  40be4e:	f1b2 3fff 	cmp.w	r2, #4294967295
  40be52:	d0f6      	beq.n	40be42 <__gethex+0x416>
  40be54:	3201      	adds	r2, #1
  40be56:	2c02      	cmp	r4, #2
  40be58:	601a      	str	r2, [r3, #0]
  40be5a:	d039      	beq.n	40bed0 <__gethex+0x4a4>
  40be5c:	f016 061f 	ands.w	r6, r6, #31
  40be60:	d13d      	bne.n	40bede <__gethex+0x4b2>
  40be62:	2421      	movs	r4, #33	; 0x21
  40be64:	e75d      	b.n	40bd22 <__gethex+0x2f6>
  40be66:	2701      	movs	r7, #1
  40be68:	e7b4      	b.n	40bdd4 <__gethex+0x3a8>
  40be6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40be6c:	2a00      	cmp	r2, #0
  40be6e:	f43f aea2 	beq.w	40bbb6 <__gethex+0x18a>
  40be72:	9908      	ldr	r1, [sp, #32]
  40be74:	600b      	str	r3, [r1, #0]
  40be76:	9b07      	ldr	r3, [sp, #28]
  40be78:	9904      	ldr	r1, [sp, #16]
  40be7a:	2201      	movs	r2, #1
  40be7c:	610a      	str	r2, [r1, #16]
  40be7e:	601a      	str	r2, [r3, #0]
  40be80:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40be82:	461a      	mov	r2, r3
  40be84:	2062      	movs	r0, #98	; 0x62
  40be86:	6011      	str	r1, [r2, #0]
  40be88:	e6dc      	b.n	40bc44 <__gethex+0x218>
  40be8a:	07ba      	lsls	r2, r7, #30
  40be8c:	f57f af47 	bpl.w	40bd1e <__gethex+0x2f2>
  40be90:	9b07      	ldr	r3, [sp, #28]
  40be92:	681b      	ldr	r3, [r3, #0]
  40be94:	433b      	orrs	r3, r7
  40be96:	07db      	lsls	r3, r3, #31
  40be98:	d4c9      	bmi.n	40be2e <__gethex+0x402>
  40be9a:	e740      	b.n	40bd1e <__gethex+0x2f2>
  40be9c:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40bea0:	f04f 0800 	mov.w	r8, #0
  40bea4:	e655      	b.n	40bb52 <__gethex+0x126>
  40bea6:	2702      	movs	r7, #2
  40bea8:	e76a      	b.n	40bd80 <__gethex+0x354>
  40beaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40beac:	2a00      	cmp	r2, #0
  40beae:	d0e0      	beq.n	40be72 <__gethex+0x446>
  40beb0:	e681      	b.n	40bbb6 <__gethex+0x18a>
  40beb2:	42ae      	cmp	r6, r5
  40beb4:	f47f ae7f 	bne.w	40bbb6 <__gethex+0x18a>
  40beb8:	2e01      	cmp	r6, #1
  40beba:	ddda      	ble.n	40be72 <__gethex+0x446>
  40bebc:	1e71      	subs	r1, r6, #1
  40bebe:	9804      	ldr	r0, [sp, #16]
  40bec0:	f001 f974 	bl	40d1ac <__any_on>
  40bec4:	2800      	cmp	r0, #0
  40bec6:	f43f ae76 	beq.w	40bbb6 <__gethex+0x18a>
  40beca:	9b03      	ldr	r3, [sp, #12]
  40becc:	685b      	ldr	r3, [r3, #4]
  40bece:	e7d0      	b.n	40be72 <__gethex+0x446>
  40bed0:	9b03      	ldr	r3, [sp, #12]
  40bed2:	681b      	ldr	r3, [r3, #0]
  40bed4:	3b01      	subs	r3, #1
  40bed6:	429e      	cmp	r6, r3
  40bed8:	d024      	beq.n	40bf24 <__gethex+0x4f8>
  40beda:	2422      	movs	r4, #34	; 0x22
  40bedc:	e721      	b.n	40bd22 <__gethex+0x2f6>
  40bede:	4445      	add	r5, r8
  40bee0:	f1c6 0620 	rsb	r6, r6, #32
  40bee4:	f855 0c04 	ldr.w	r0, [r5, #-4]
  40bee8:	f000 fde8 	bl	40cabc <__hi0bits>
  40beec:	42b0      	cmp	r0, r6
  40beee:	dab8      	bge.n	40be62 <__gethex+0x436>
  40bef0:	e6d8      	b.n	40bca4 <__gethex+0x278>
  40bef2:	9b04      	ldr	r3, [sp, #16]
  40bef4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40bef8:	6859      	ldr	r1, [r3, #4]
  40befa:	4648      	mov	r0, r9
  40befc:	3101      	adds	r1, #1
  40befe:	f000 fd21 	bl	40c944 <_Balloc>
  40bf02:	9904      	ldr	r1, [sp, #16]
  40bf04:	690b      	ldr	r3, [r1, #16]
  40bf06:	1c9a      	adds	r2, r3, #2
  40bf08:	4605      	mov	r5, r0
  40bf0a:	0092      	lsls	r2, r2, #2
  40bf0c:	310c      	adds	r1, #12
  40bf0e:	300c      	adds	r0, #12
  40bf10:	f7f9 ff9e 	bl	405e50 <memcpy>
  40bf14:	9904      	ldr	r1, [sp, #16]
  40bf16:	4648      	mov	r0, r9
  40bf18:	f000 fd3a 	bl	40c990 <_Bfree>
  40bf1c:	9504      	str	r5, [sp, #16]
  40bf1e:	692b      	ldr	r3, [r5, #16]
  40bf20:	3514      	adds	r5, #20
  40bf22:	e6b2      	b.n	40bc8a <__gethex+0x25e>
  40bf24:	1173      	asrs	r3, r6, #5
  40bf26:	f006 061f 	and.w	r6, r6, #31
  40bf2a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  40bf2e:	2301      	movs	r3, #1
  40bf30:	40b3      	lsls	r3, r6
  40bf32:	4213      	tst	r3, r2
  40bf34:	bf14      	ite	ne
  40bf36:	2421      	movne	r4, #33	; 0x21
  40bf38:	2422      	moveq	r4, #34	; 0x22
  40bf3a:	e6f2      	b.n	40bd22 <__gethex+0x2f6>

0040bf3c <__match>:
  40bf3c:	b430      	push	{r4, r5}
  40bf3e:	6804      	ldr	r4, [r0, #0]
  40bf40:	e008      	b.n	40bf54 <__match+0x18>
  40bf42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40bf46:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  40bf4a:	2d19      	cmp	r5, #25
  40bf4c:	bf98      	it	ls
  40bf4e:	3320      	addls	r3, #32
  40bf50:	4293      	cmp	r3, r2
  40bf52:	d108      	bne.n	40bf66 <__match+0x2a>
  40bf54:	f811 2b01 	ldrb.w	r2, [r1], #1
  40bf58:	2a00      	cmp	r2, #0
  40bf5a:	d1f2      	bne.n	40bf42 <__match+0x6>
  40bf5c:	3401      	adds	r4, #1
  40bf5e:	6004      	str	r4, [r0, #0]
  40bf60:	2001      	movs	r0, #1
  40bf62:	bc30      	pop	{r4, r5}
  40bf64:	4770      	bx	lr
  40bf66:	2000      	movs	r0, #0
  40bf68:	bc30      	pop	{r4, r5}
  40bf6a:	4770      	bx	lr

0040bf6c <__hexnan>:
  40bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bf70:	680b      	ldr	r3, [r1, #0]
  40bf72:	f8df 9174 	ldr.w	r9, [pc, #372]	; 40c0e8 <__hexnan+0x17c>
  40bf76:	b085      	sub	sp, #20
  40bf78:	1159      	asrs	r1, r3, #5
  40bf7a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  40bf7e:	f013 031f 	ands.w	r3, r3, #31
  40bf82:	9101      	str	r1, [sp, #4]
  40bf84:	bf1c      	itt	ne
  40bf86:	3104      	addne	r1, #4
  40bf88:	9101      	strne	r1, [sp, #4]
  40bf8a:	9c01      	ldr	r4, [sp, #4]
  40bf8c:	9002      	str	r0, [sp, #8]
  40bf8e:	9303      	str	r3, [sp, #12]
  40bf90:	2300      	movs	r3, #0
  40bf92:	4619      	mov	r1, r3
  40bf94:	f844 3c04 	str.w	r3, [r4, #-4]
  40bf98:	469a      	mov	sl, r3
  40bf9a:	469e      	mov	lr, r3
  40bf9c:	9b02      	ldr	r3, [sp, #8]
  40bf9e:	f1a4 0c04 	sub.w	ip, r4, #4
  40bfa2:	681d      	ldr	r5, [r3, #0]
  40bfa4:	46e0      	mov	r8, ip
  40bfa6:	4660      	mov	r0, ip
  40bfa8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40bfac:	b323      	cbz	r3, 40bff8 <__hexnan+0x8c>
  40bfae:	f819 4003 	ldrb.w	r4, [r9, r3]
  40bfb2:	2c00      	cmp	r4, #0
  40bfb4:	d143      	bne.n	40c03e <__hexnan+0xd2>
  40bfb6:	2b20      	cmp	r3, #32
  40bfb8:	d85d      	bhi.n	40c076 <__hexnan+0x10a>
  40bfba:	45d6      	cmp	lr, sl
  40bfbc:	ddf4      	ble.n	40bfa8 <__hexnan+0x3c>
  40bfbe:	4540      	cmp	r0, r8
  40bfc0:	d213      	bcs.n	40bfea <__hexnan+0x7e>
  40bfc2:	2907      	cmp	r1, #7
  40bfc4:	dc11      	bgt.n	40bfea <__hexnan+0x7e>
  40bfc6:	f1c1 0108 	rsb	r1, r1, #8
  40bfca:	0089      	lsls	r1, r1, #2
  40bfcc:	6806      	ldr	r6, [r0, #0]
  40bfce:	f1c1 0b20 	rsb	fp, r1, #32
  40bfd2:	4603      	mov	r3, r0
  40bfd4:	685f      	ldr	r7, [r3, #4]
  40bfd6:	fa07 f40b 	lsl.w	r4, r7, fp
  40bfda:	4334      	orrs	r4, r6
  40bfdc:	fa27 f601 	lsr.w	r6, r7, r1
  40bfe0:	601c      	str	r4, [r3, #0]
  40bfe2:	f843 6f04 	str.w	r6, [r3, #4]!
  40bfe6:	4598      	cmp	r8, r3
  40bfe8:	d8f4      	bhi.n	40bfd4 <__hexnan+0x68>
  40bfea:	4290      	cmp	r0, r2
  40bfec:	d83a      	bhi.n	40c064 <__hexnan+0xf8>
  40bfee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40bff2:	2108      	movs	r1, #8
  40bff4:	2b00      	cmp	r3, #0
  40bff6:	d1da      	bne.n	40bfae <__hexnan+0x42>
  40bff8:	f1be 0f00 	cmp.w	lr, #0
  40bffc:	d03d      	beq.n	40c07a <__hexnan+0x10e>
  40bffe:	4540      	cmp	r0, r8
  40c000:	d201      	bcs.n	40c006 <__hexnan+0x9a>
  40c002:	2907      	cmp	r1, #7
  40c004:	dd5c      	ble.n	40c0c0 <__hexnan+0x154>
  40c006:	4290      	cmp	r0, r2
  40c008:	d93b      	bls.n	40c082 <__hexnan+0x116>
  40c00a:	4613      	mov	r3, r2
  40c00c:	f850 1b04 	ldr.w	r1, [r0], #4
  40c010:	f843 1b04 	str.w	r1, [r3], #4
  40c014:	4584      	cmp	ip, r0
  40c016:	d2f9      	bcs.n	40c00c <__hexnan+0xa0>
  40c018:	2100      	movs	r1, #0
  40c01a:	f843 1b04 	str.w	r1, [r3], #4
  40c01e:	459c      	cmp	ip, r3
  40c020:	d2fb      	bcs.n	40c01a <__hexnan+0xae>
  40c022:	9b01      	ldr	r3, [sp, #4]
  40c024:	f853 3c04 	ldr.w	r3, [r3, #-4]
  40c028:	b92b      	cbnz	r3, 40c036 <__hexnan+0xca>
  40c02a:	4562      	cmp	r2, ip
  40c02c:	d03a      	beq.n	40c0a4 <__hexnan+0x138>
  40c02e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  40c032:	2b00      	cmp	r3, #0
  40c034:	d0f9      	beq.n	40c02a <__hexnan+0xbe>
  40c036:	2005      	movs	r0, #5
  40c038:	b005      	add	sp, #20
  40c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c03e:	3101      	adds	r1, #1
  40c040:	2908      	cmp	r1, #8
  40c042:	f10e 0e01 	add.w	lr, lr, #1
  40c046:	dd06      	ble.n	40c056 <__hexnan+0xea>
  40c048:	4290      	cmp	r0, r2
  40c04a:	d9ad      	bls.n	40bfa8 <__hexnan+0x3c>
  40c04c:	2300      	movs	r3, #0
  40c04e:	f840 3c04 	str.w	r3, [r0, #-4]
  40c052:	2101      	movs	r1, #1
  40c054:	3804      	subs	r0, #4
  40c056:	6803      	ldr	r3, [r0, #0]
  40c058:	f004 040f 	and.w	r4, r4, #15
  40c05c:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  40c060:	6004      	str	r4, [r0, #0]
  40c062:	e7a1      	b.n	40bfa8 <__hexnan+0x3c>
  40c064:	2300      	movs	r3, #0
  40c066:	f1a0 0804 	sub.w	r8, r0, #4
  40c06a:	f840 3c04 	str.w	r3, [r0, #-4]
  40c06e:	46f2      	mov	sl, lr
  40c070:	4640      	mov	r0, r8
  40c072:	4619      	mov	r1, r3
  40c074:	e798      	b.n	40bfa8 <__hexnan+0x3c>
  40c076:	2b29      	cmp	r3, #41	; 0x29
  40c078:	d01b      	beq.n	40c0b2 <__hexnan+0x146>
  40c07a:	2004      	movs	r0, #4
  40c07c:	b005      	add	sp, #20
  40c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c082:	9b03      	ldr	r3, [sp, #12]
  40c084:	2b00      	cmp	r3, #0
  40c086:	d0cc      	beq.n	40c022 <__hexnan+0xb6>
  40c088:	9c01      	ldr	r4, [sp, #4]
  40c08a:	9b03      	ldr	r3, [sp, #12]
  40c08c:	f854 1c04 	ldr.w	r1, [r4, #-4]
  40c090:	f1c3 0320 	rsb	r3, r3, #32
  40c094:	f04f 30ff 	mov.w	r0, #4294967295
  40c098:	fa20 f303 	lsr.w	r3, r0, r3
  40c09c:	400b      	ands	r3, r1
  40c09e:	f844 3c04 	str.w	r3, [r4, #-4]
  40c0a2:	e7c1      	b.n	40c028 <__hexnan+0xbc>
  40c0a4:	2301      	movs	r3, #1
  40c0a6:	2005      	movs	r0, #5
  40c0a8:	f8cc 3000 	str.w	r3, [ip]
  40c0ac:	b005      	add	sp, #20
  40c0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c0b2:	9b02      	ldr	r3, [sp, #8]
  40c0b4:	3501      	adds	r5, #1
  40c0b6:	601d      	str	r5, [r3, #0]
  40c0b8:	f1be 0f00 	cmp.w	lr, #0
  40c0bc:	d19f      	bne.n	40bffe <__hexnan+0x92>
  40c0be:	e7dc      	b.n	40c07a <__hexnan+0x10e>
  40c0c0:	f1c1 0308 	rsb	r3, r1, #8
  40c0c4:	009b      	lsls	r3, r3, #2
  40c0c6:	6805      	ldr	r5, [r0, #0]
  40c0c8:	f1c3 0720 	rsb	r7, r3, #32
  40c0cc:	4601      	mov	r1, r0
  40c0ce:	684e      	ldr	r6, [r1, #4]
  40c0d0:	fa06 f407 	lsl.w	r4, r6, r7
  40c0d4:	432c      	orrs	r4, r5
  40c0d6:	fa26 f503 	lsr.w	r5, r6, r3
  40c0da:	600c      	str	r4, [r1, #0]
  40c0dc:	f841 5f04 	str.w	r5, [r1, #4]!
  40c0e0:	4588      	cmp	r8, r1
  40c0e2:	d8f4      	bhi.n	40c0ce <__hexnan+0x162>
  40c0e4:	e78f      	b.n	40c006 <__hexnan+0x9a>
  40c0e6:	bf00      	nop
  40c0e8:	00410094 	.word	0x00410094

0040c0ec <__locale_charset>:
  40c0ec:	4800      	ldr	r0, [pc, #0]	; (40c0f0 <__locale_charset+0x4>)
  40c0ee:	4770      	bx	lr
  40c0f0:	20000498 	.word	0x20000498

0040c0f4 <__locale_mb_cur_max>:
  40c0f4:	4b01      	ldr	r3, [pc, #4]	; (40c0fc <__locale_mb_cur_max+0x8>)
  40c0f6:	6818      	ldr	r0, [r3, #0]
  40c0f8:	4770      	bx	lr
  40c0fa:	bf00      	nop
  40c0fc:	200004b8 	.word	0x200004b8

0040c100 <_localeconv_r>:
  40c100:	4800      	ldr	r0, [pc, #0]	; (40c104 <_localeconv_r+0x4>)
  40c102:	4770      	bx	lr
  40c104:	20000460 	.word	0x20000460

0040c108 <__swhatbuf_r>:
  40c108:	b570      	push	{r4, r5, r6, lr}
  40c10a:	460d      	mov	r5, r1
  40c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c110:	2900      	cmp	r1, #0
  40c112:	b090      	sub	sp, #64	; 0x40
  40c114:	4614      	mov	r4, r2
  40c116:	461e      	mov	r6, r3
  40c118:	db14      	blt.n	40c144 <__swhatbuf_r+0x3c>
  40c11a:	aa01      	add	r2, sp, #4
  40c11c:	f001 fcb8 	bl	40da90 <_fstat_r>
  40c120:	2800      	cmp	r0, #0
  40c122:	db0f      	blt.n	40c144 <__swhatbuf_r+0x3c>
  40c124:	9a02      	ldr	r2, [sp, #8]
  40c126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40c12a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40c12e:	fab2 f282 	clz	r2, r2
  40c132:	0952      	lsrs	r2, r2, #5
  40c134:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c138:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40c13c:	6032      	str	r2, [r6, #0]
  40c13e:	6023      	str	r3, [r4, #0]
  40c140:	b010      	add	sp, #64	; 0x40
  40c142:	bd70      	pop	{r4, r5, r6, pc}
  40c144:	89a8      	ldrh	r0, [r5, #12]
  40c146:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40c14a:	b282      	uxth	r2, r0
  40c14c:	2000      	movs	r0, #0
  40c14e:	6030      	str	r0, [r6, #0]
  40c150:	b11a      	cbz	r2, 40c15a <__swhatbuf_r+0x52>
  40c152:	2340      	movs	r3, #64	; 0x40
  40c154:	6023      	str	r3, [r4, #0]
  40c156:	b010      	add	sp, #64	; 0x40
  40c158:	bd70      	pop	{r4, r5, r6, pc}
  40c15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c15e:	4610      	mov	r0, r2
  40c160:	6023      	str	r3, [r4, #0]
  40c162:	b010      	add	sp, #64	; 0x40
  40c164:	bd70      	pop	{r4, r5, r6, pc}
  40c166:	bf00      	nop

0040c168 <__smakebuf_r>:
  40c168:	898a      	ldrh	r2, [r1, #12]
  40c16a:	0792      	lsls	r2, r2, #30
  40c16c:	460b      	mov	r3, r1
  40c16e:	d506      	bpl.n	40c17e <__smakebuf_r+0x16>
  40c170:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40c174:	2101      	movs	r1, #1
  40c176:	601a      	str	r2, [r3, #0]
  40c178:	611a      	str	r2, [r3, #16]
  40c17a:	6159      	str	r1, [r3, #20]
  40c17c:	4770      	bx	lr
  40c17e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c180:	b083      	sub	sp, #12
  40c182:	ab01      	add	r3, sp, #4
  40c184:	466a      	mov	r2, sp
  40c186:	460c      	mov	r4, r1
  40c188:	4605      	mov	r5, r0
  40c18a:	f7ff ffbd 	bl	40c108 <__swhatbuf_r>
  40c18e:	9900      	ldr	r1, [sp, #0]
  40c190:	4606      	mov	r6, r0
  40c192:	4628      	mov	r0, r5
  40c194:	f000 f834 	bl	40c200 <_malloc_r>
  40c198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c19c:	b1d0      	cbz	r0, 40c1d4 <__smakebuf_r+0x6c>
  40c19e:	9a01      	ldr	r2, [sp, #4]
  40c1a0:	4f12      	ldr	r7, [pc, #72]	; (40c1ec <__smakebuf_r+0x84>)
  40c1a2:	9900      	ldr	r1, [sp, #0]
  40c1a4:	63ef      	str	r7, [r5, #60]	; 0x3c
  40c1a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c1aa:	81a3      	strh	r3, [r4, #12]
  40c1ac:	6020      	str	r0, [r4, #0]
  40c1ae:	6120      	str	r0, [r4, #16]
  40c1b0:	6161      	str	r1, [r4, #20]
  40c1b2:	b91a      	cbnz	r2, 40c1bc <__smakebuf_r+0x54>
  40c1b4:	4333      	orrs	r3, r6
  40c1b6:	81a3      	strh	r3, [r4, #12]
  40c1b8:	b003      	add	sp, #12
  40c1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c1bc:	4628      	mov	r0, r5
  40c1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c1c2:	f001 fc79 	bl	40dab8 <_isatty_r>
  40c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c1ca:	2800      	cmp	r0, #0
  40c1cc:	d0f2      	beq.n	40c1b4 <__smakebuf_r+0x4c>
  40c1ce:	f043 0301 	orr.w	r3, r3, #1
  40c1d2:	e7ef      	b.n	40c1b4 <__smakebuf_r+0x4c>
  40c1d4:	059a      	lsls	r2, r3, #22
  40c1d6:	d4ef      	bmi.n	40c1b8 <__smakebuf_r+0x50>
  40c1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c1dc:	f043 0302 	orr.w	r3, r3, #2
  40c1e0:	2101      	movs	r1, #1
  40c1e2:	81a3      	strh	r3, [r4, #12]
  40c1e4:	6022      	str	r2, [r4, #0]
  40c1e6:	6122      	str	r2, [r4, #16]
  40c1e8:	6161      	str	r1, [r4, #20]
  40c1ea:	e7e5      	b.n	40c1b8 <__smakebuf_r+0x50>
  40c1ec:	0040b1cd 	.word	0x0040b1cd

0040c1f0 <malloc>:
  40c1f0:	4b02      	ldr	r3, [pc, #8]	; (40c1fc <malloc+0xc>)
  40c1f2:	4601      	mov	r1, r0
  40c1f4:	6818      	ldr	r0, [r3, #0]
  40c1f6:	f000 b803 	b.w	40c200 <_malloc_r>
  40c1fa:	bf00      	nop
  40c1fc:	20000458 	.word	0x20000458

0040c200 <_malloc_r>:
  40c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c204:	f101 050b 	add.w	r5, r1, #11
  40c208:	2d16      	cmp	r5, #22
  40c20a:	b083      	sub	sp, #12
  40c20c:	4606      	mov	r6, r0
  40c20e:	f240 809f 	bls.w	40c350 <_malloc_r+0x150>
  40c212:	f035 0507 	bics.w	r5, r5, #7
  40c216:	f100 80bf 	bmi.w	40c398 <_malloc_r+0x198>
  40c21a:	42a9      	cmp	r1, r5
  40c21c:	f200 80bc 	bhi.w	40c398 <_malloc_r+0x198>
  40c220:	f000 fb8c 	bl	40c93c <__malloc_lock>
  40c224:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40c228:	f0c0 829c 	bcc.w	40c764 <_malloc_r+0x564>
  40c22c:	0a6b      	lsrs	r3, r5, #9
  40c22e:	f000 80ba 	beq.w	40c3a6 <_malloc_r+0x1a6>
  40c232:	2b04      	cmp	r3, #4
  40c234:	f200 8183 	bhi.w	40c53e <_malloc_r+0x33e>
  40c238:	09a8      	lsrs	r0, r5, #6
  40c23a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40c23e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c242:	3038      	adds	r0, #56	; 0x38
  40c244:	4fc4      	ldr	r7, [pc, #784]	; (40c558 <_malloc_r+0x358>)
  40c246:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40c24a:	f1a3 0108 	sub.w	r1, r3, #8
  40c24e:	685c      	ldr	r4, [r3, #4]
  40c250:	42a1      	cmp	r1, r4
  40c252:	d107      	bne.n	40c264 <_malloc_r+0x64>
  40c254:	e0ac      	b.n	40c3b0 <_malloc_r+0x1b0>
  40c256:	2a00      	cmp	r2, #0
  40c258:	f280 80ac 	bge.w	40c3b4 <_malloc_r+0x1b4>
  40c25c:	68e4      	ldr	r4, [r4, #12]
  40c25e:	42a1      	cmp	r1, r4
  40c260:	f000 80a6 	beq.w	40c3b0 <_malloc_r+0x1b0>
  40c264:	6863      	ldr	r3, [r4, #4]
  40c266:	f023 0303 	bic.w	r3, r3, #3
  40c26a:	1b5a      	subs	r2, r3, r5
  40c26c:	2a0f      	cmp	r2, #15
  40c26e:	ddf2      	ble.n	40c256 <_malloc_r+0x56>
  40c270:	49b9      	ldr	r1, [pc, #740]	; (40c558 <_malloc_r+0x358>)
  40c272:	693c      	ldr	r4, [r7, #16]
  40c274:	f101 0e08 	add.w	lr, r1, #8
  40c278:	4574      	cmp	r4, lr
  40c27a:	f000 81b3 	beq.w	40c5e4 <_malloc_r+0x3e4>
  40c27e:	6863      	ldr	r3, [r4, #4]
  40c280:	f023 0303 	bic.w	r3, r3, #3
  40c284:	1b5a      	subs	r2, r3, r5
  40c286:	2a0f      	cmp	r2, #15
  40c288:	f300 8199 	bgt.w	40c5be <_malloc_r+0x3be>
  40c28c:	2a00      	cmp	r2, #0
  40c28e:	f8c1 e014 	str.w	lr, [r1, #20]
  40c292:	f8c1 e010 	str.w	lr, [r1, #16]
  40c296:	f280 809e 	bge.w	40c3d6 <_malloc_r+0x1d6>
  40c29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40c29e:	f080 8167 	bcs.w	40c570 <_malloc_r+0x370>
  40c2a2:	08db      	lsrs	r3, r3, #3
  40c2a4:	f103 0c01 	add.w	ip, r3, #1
  40c2a8:	2201      	movs	r2, #1
  40c2aa:	109b      	asrs	r3, r3, #2
  40c2ac:	fa02 f303 	lsl.w	r3, r2, r3
  40c2b0:	684a      	ldr	r2, [r1, #4]
  40c2b2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40c2b6:	f8c4 8008 	str.w	r8, [r4, #8]
  40c2ba:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40c2be:	431a      	orrs	r2, r3
  40c2c0:	f1a9 0308 	sub.w	r3, r9, #8
  40c2c4:	60e3      	str	r3, [r4, #12]
  40c2c6:	604a      	str	r2, [r1, #4]
  40c2c8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40c2cc:	f8c8 400c 	str.w	r4, [r8, #12]
  40c2d0:	1083      	asrs	r3, r0, #2
  40c2d2:	2401      	movs	r4, #1
  40c2d4:	409c      	lsls	r4, r3
  40c2d6:	4294      	cmp	r4, r2
  40c2d8:	f200 808a 	bhi.w	40c3f0 <_malloc_r+0x1f0>
  40c2dc:	4214      	tst	r4, r2
  40c2de:	d106      	bne.n	40c2ee <_malloc_r+0xee>
  40c2e0:	f020 0003 	bic.w	r0, r0, #3
  40c2e4:	0064      	lsls	r4, r4, #1
  40c2e6:	4214      	tst	r4, r2
  40c2e8:	f100 0004 	add.w	r0, r0, #4
  40c2ec:	d0fa      	beq.n	40c2e4 <_malloc_r+0xe4>
  40c2ee:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40c2f2:	46cc      	mov	ip, r9
  40c2f4:	4680      	mov	r8, r0
  40c2f6:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40c2fa:	458c      	cmp	ip, r1
  40c2fc:	d107      	bne.n	40c30e <_malloc_r+0x10e>
  40c2fe:	e173      	b.n	40c5e8 <_malloc_r+0x3e8>
  40c300:	2a00      	cmp	r2, #0
  40c302:	f280 8181 	bge.w	40c608 <_malloc_r+0x408>
  40c306:	68c9      	ldr	r1, [r1, #12]
  40c308:	458c      	cmp	ip, r1
  40c30a:	f000 816d 	beq.w	40c5e8 <_malloc_r+0x3e8>
  40c30e:	684b      	ldr	r3, [r1, #4]
  40c310:	f023 0303 	bic.w	r3, r3, #3
  40c314:	1b5a      	subs	r2, r3, r5
  40c316:	2a0f      	cmp	r2, #15
  40c318:	ddf2      	ble.n	40c300 <_malloc_r+0x100>
  40c31a:	460c      	mov	r4, r1
  40c31c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40c320:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40c324:	194b      	adds	r3, r1, r5
  40c326:	f045 0501 	orr.w	r5, r5, #1
  40c32a:	604d      	str	r5, [r1, #4]
  40c32c:	f042 0101 	orr.w	r1, r2, #1
  40c330:	f8c8 c00c 	str.w	ip, [r8, #12]
  40c334:	4630      	mov	r0, r6
  40c336:	f8cc 8008 	str.w	r8, [ip, #8]
  40c33a:	617b      	str	r3, [r7, #20]
  40c33c:	613b      	str	r3, [r7, #16]
  40c33e:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c342:	f8c3 e008 	str.w	lr, [r3, #8]
  40c346:	6059      	str	r1, [r3, #4]
  40c348:	509a      	str	r2, [r3, r2]
  40c34a:	f000 faf9 	bl	40c940 <__malloc_unlock>
  40c34e:	e01f      	b.n	40c390 <_malloc_r+0x190>
  40c350:	2910      	cmp	r1, #16
  40c352:	d821      	bhi.n	40c398 <_malloc_r+0x198>
  40c354:	f000 faf2 	bl	40c93c <__malloc_lock>
  40c358:	2510      	movs	r5, #16
  40c35a:	2306      	movs	r3, #6
  40c35c:	2002      	movs	r0, #2
  40c35e:	4f7e      	ldr	r7, [pc, #504]	; (40c558 <_malloc_r+0x358>)
  40c360:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40c364:	f1a3 0208 	sub.w	r2, r3, #8
  40c368:	685c      	ldr	r4, [r3, #4]
  40c36a:	4294      	cmp	r4, r2
  40c36c:	f000 8145 	beq.w	40c5fa <_malloc_r+0x3fa>
  40c370:	6863      	ldr	r3, [r4, #4]
  40c372:	68e1      	ldr	r1, [r4, #12]
  40c374:	68a5      	ldr	r5, [r4, #8]
  40c376:	f023 0303 	bic.w	r3, r3, #3
  40c37a:	4423      	add	r3, r4
  40c37c:	4630      	mov	r0, r6
  40c37e:	685a      	ldr	r2, [r3, #4]
  40c380:	60e9      	str	r1, [r5, #12]
  40c382:	f042 0201 	orr.w	r2, r2, #1
  40c386:	608d      	str	r5, [r1, #8]
  40c388:	605a      	str	r2, [r3, #4]
  40c38a:	f000 fad9 	bl	40c940 <__malloc_unlock>
  40c38e:	3408      	adds	r4, #8
  40c390:	4620      	mov	r0, r4
  40c392:	b003      	add	sp, #12
  40c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c398:	2400      	movs	r4, #0
  40c39a:	230c      	movs	r3, #12
  40c39c:	4620      	mov	r0, r4
  40c39e:	6033      	str	r3, [r6, #0]
  40c3a0:	b003      	add	sp, #12
  40c3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3a6:	2380      	movs	r3, #128	; 0x80
  40c3a8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40c3ac:	203f      	movs	r0, #63	; 0x3f
  40c3ae:	e749      	b.n	40c244 <_malloc_r+0x44>
  40c3b0:	4670      	mov	r0, lr
  40c3b2:	e75d      	b.n	40c270 <_malloc_r+0x70>
  40c3b4:	4423      	add	r3, r4
  40c3b6:	68e1      	ldr	r1, [r4, #12]
  40c3b8:	685a      	ldr	r2, [r3, #4]
  40c3ba:	68a5      	ldr	r5, [r4, #8]
  40c3bc:	f042 0201 	orr.w	r2, r2, #1
  40c3c0:	60e9      	str	r1, [r5, #12]
  40c3c2:	4630      	mov	r0, r6
  40c3c4:	608d      	str	r5, [r1, #8]
  40c3c6:	605a      	str	r2, [r3, #4]
  40c3c8:	f000 faba 	bl	40c940 <__malloc_unlock>
  40c3cc:	3408      	adds	r4, #8
  40c3ce:	4620      	mov	r0, r4
  40c3d0:	b003      	add	sp, #12
  40c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3d6:	4423      	add	r3, r4
  40c3d8:	4630      	mov	r0, r6
  40c3da:	685a      	ldr	r2, [r3, #4]
  40c3dc:	f042 0201 	orr.w	r2, r2, #1
  40c3e0:	605a      	str	r2, [r3, #4]
  40c3e2:	f000 faad 	bl	40c940 <__malloc_unlock>
  40c3e6:	3408      	adds	r4, #8
  40c3e8:	4620      	mov	r0, r4
  40c3ea:	b003      	add	sp, #12
  40c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3f0:	68bc      	ldr	r4, [r7, #8]
  40c3f2:	6863      	ldr	r3, [r4, #4]
  40c3f4:	f023 0803 	bic.w	r8, r3, #3
  40c3f8:	45a8      	cmp	r8, r5
  40c3fa:	d304      	bcc.n	40c406 <_malloc_r+0x206>
  40c3fc:	ebc5 0308 	rsb	r3, r5, r8
  40c400:	2b0f      	cmp	r3, #15
  40c402:	f300 808c 	bgt.w	40c51e <_malloc_r+0x31e>
  40c406:	4b55      	ldr	r3, [pc, #340]	; (40c55c <_malloc_r+0x35c>)
  40c408:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40c56c <_malloc_r+0x36c>
  40c40c:	681a      	ldr	r2, [r3, #0]
  40c40e:	f8d9 3000 	ldr.w	r3, [r9]
  40c412:	3301      	adds	r3, #1
  40c414:	442a      	add	r2, r5
  40c416:	eb04 0a08 	add.w	sl, r4, r8
  40c41a:	f000 8160 	beq.w	40c6de <_malloc_r+0x4de>
  40c41e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40c422:	320f      	adds	r2, #15
  40c424:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40c428:	f022 020f 	bic.w	r2, r2, #15
  40c42c:	4611      	mov	r1, r2
  40c42e:	4630      	mov	r0, r6
  40c430:	9201      	str	r2, [sp, #4]
  40c432:	f001 f8d9 	bl	40d5e8 <_sbrk_r>
  40c436:	f1b0 3fff 	cmp.w	r0, #4294967295
  40c43a:	4683      	mov	fp, r0
  40c43c:	9a01      	ldr	r2, [sp, #4]
  40c43e:	f000 8158 	beq.w	40c6f2 <_malloc_r+0x4f2>
  40c442:	4582      	cmp	sl, r0
  40c444:	f200 80fc 	bhi.w	40c640 <_malloc_r+0x440>
  40c448:	4b45      	ldr	r3, [pc, #276]	; (40c560 <_malloc_r+0x360>)
  40c44a:	6819      	ldr	r1, [r3, #0]
  40c44c:	45da      	cmp	sl, fp
  40c44e:	4411      	add	r1, r2
  40c450:	6019      	str	r1, [r3, #0]
  40c452:	f000 8153 	beq.w	40c6fc <_malloc_r+0x4fc>
  40c456:	f8d9 0000 	ldr.w	r0, [r9]
  40c45a:	f8df e110 	ldr.w	lr, [pc, #272]	; 40c56c <_malloc_r+0x36c>
  40c45e:	3001      	adds	r0, #1
  40c460:	bf1b      	ittet	ne
  40c462:	ebca 0a0b 	rsbne	sl, sl, fp
  40c466:	4451      	addne	r1, sl
  40c468:	f8ce b000 	streq.w	fp, [lr]
  40c46c:	6019      	strne	r1, [r3, #0]
  40c46e:	f01b 0107 	ands.w	r1, fp, #7
  40c472:	f000 8117 	beq.w	40c6a4 <_malloc_r+0x4a4>
  40c476:	f1c1 0008 	rsb	r0, r1, #8
  40c47a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40c47e:	4483      	add	fp, r0
  40c480:	3108      	adds	r1, #8
  40c482:	445a      	add	r2, fp
  40c484:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40c488:	ebc2 0901 	rsb	r9, r2, r1
  40c48c:	4649      	mov	r1, r9
  40c48e:	4630      	mov	r0, r6
  40c490:	9301      	str	r3, [sp, #4]
  40c492:	f001 f8a9 	bl	40d5e8 <_sbrk_r>
  40c496:	1c43      	adds	r3, r0, #1
  40c498:	9b01      	ldr	r3, [sp, #4]
  40c49a:	f000 813f 	beq.w	40c71c <_malloc_r+0x51c>
  40c49e:	ebcb 0200 	rsb	r2, fp, r0
  40c4a2:	444a      	add	r2, r9
  40c4a4:	f042 0201 	orr.w	r2, r2, #1
  40c4a8:	6819      	ldr	r1, [r3, #0]
  40c4aa:	f8c7 b008 	str.w	fp, [r7, #8]
  40c4ae:	4449      	add	r1, r9
  40c4b0:	42bc      	cmp	r4, r7
  40c4b2:	f8cb 2004 	str.w	r2, [fp, #4]
  40c4b6:	6019      	str	r1, [r3, #0]
  40c4b8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40c560 <_malloc_r+0x360>
  40c4bc:	d016      	beq.n	40c4ec <_malloc_r+0x2ec>
  40c4be:	f1b8 0f0f 	cmp.w	r8, #15
  40c4c2:	f240 80fd 	bls.w	40c6c0 <_malloc_r+0x4c0>
  40c4c6:	6862      	ldr	r2, [r4, #4]
  40c4c8:	f1a8 030c 	sub.w	r3, r8, #12
  40c4cc:	f023 0307 	bic.w	r3, r3, #7
  40c4d0:	18e0      	adds	r0, r4, r3
  40c4d2:	f002 0201 	and.w	r2, r2, #1
  40c4d6:	f04f 0e05 	mov.w	lr, #5
  40c4da:	431a      	orrs	r2, r3
  40c4dc:	2b0f      	cmp	r3, #15
  40c4de:	6062      	str	r2, [r4, #4]
  40c4e0:	f8c0 e004 	str.w	lr, [r0, #4]
  40c4e4:	f8c0 e008 	str.w	lr, [r0, #8]
  40c4e8:	f200 811c 	bhi.w	40c724 <_malloc_r+0x524>
  40c4ec:	4b1d      	ldr	r3, [pc, #116]	; (40c564 <_malloc_r+0x364>)
  40c4ee:	68bc      	ldr	r4, [r7, #8]
  40c4f0:	681a      	ldr	r2, [r3, #0]
  40c4f2:	4291      	cmp	r1, r2
  40c4f4:	bf88      	it	hi
  40c4f6:	6019      	strhi	r1, [r3, #0]
  40c4f8:	4b1b      	ldr	r3, [pc, #108]	; (40c568 <_malloc_r+0x368>)
  40c4fa:	681a      	ldr	r2, [r3, #0]
  40c4fc:	4291      	cmp	r1, r2
  40c4fe:	6862      	ldr	r2, [r4, #4]
  40c500:	bf88      	it	hi
  40c502:	6019      	strhi	r1, [r3, #0]
  40c504:	f022 0203 	bic.w	r2, r2, #3
  40c508:	4295      	cmp	r5, r2
  40c50a:	eba2 0305 	sub.w	r3, r2, r5
  40c50e:	d801      	bhi.n	40c514 <_malloc_r+0x314>
  40c510:	2b0f      	cmp	r3, #15
  40c512:	dc04      	bgt.n	40c51e <_malloc_r+0x31e>
  40c514:	4630      	mov	r0, r6
  40c516:	f000 fa13 	bl	40c940 <__malloc_unlock>
  40c51a:	2400      	movs	r4, #0
  40c51c:	e738      	b.n	40c390 <_malloc_r+0x190>
  40c51e:	1962      	adds	r2, r4, r5
  40c520:	f043 0301 	orr.w	r3, r3, #1
  40c524:	f045 0501 	orr.w	r5, r5, #1
  40c528:	6065      	str	r5, [r4, #4]
  40c52a:	4630      	mov	r0, r6
  40c52c:	60ba      	str	r2, [r7, #8]
  40c52e:	6053      	str	r3, [r2, #4]
  40c530:	f000 fa06 	bl	40c940 <__malloc_unlock>
  40c534:	3408      	adds	r4, #8
  40c536:	4620      	mov	r0, r4
  40c538:	b003      	add	sp, #12
  40c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c53e:	2b14      	cmp	r3, #20
  40c540:	d971      	bls.n	40c626 <_malloc_r+0x426>
  40c542:	2b54      	cmp	r3, #84	; 0x54
  40c544:	f200 80a4 	bhi.w	40c690 <_malloc_r+0x490>
  40c548:	0b28      	lsrs	r0, r5, #12
  40c54a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40c54e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c552:	306e      	adds	r0, #110	; 0x6e
  40c554:	e676      	b.n	40c244 <_malloc_r+0x44>
  40c556:	bf00      	nop
  40c558:	200004bc 	.word	0x200004bc
  40c55c:	2000ad04 	.word	0x2000ad04
  40c560:	2000ad08 	.word	0x2000ad08
  40c564:	2000ad00 	.word	0x2000ad00
  40c568:	2000acfc 	.word	0x2000acfc
  40c56c:	200008c8 	.word	0x200008c8
  40c570:	0a5a      	lsrs	r2, r3, #9
  40c572:	2a04      	cmp	r2, #4
  40c574:	d95e      	bls.n	40c634 <_malloc_r+0x434>
  40c576:	2a14      	cmp	r2, #20
  40c578:	f200 80b3 	bhi.w	40c6e2 <_malloc_r+0x4e2>
  40c57c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40c580:	0049      	lsls	r1, r1, #1
  40c582:	325b      	adds	r2, #91	; 0x5b
  40c584:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40c588:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40c58c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40c76c <_malloc_r+0x56c>
  40c590:	f1ac 0c08 	sub.w	ip, ip, #8
  40c594:	458c      	cmp	ip, r1
  40c596:	f000 8088 	beq.w	40c6aa <_malloc_r+0x4aa>
  40c59a:	684a      	ldr	r2, [r1, #4]
  40c59c:	f022 0203 	bic.w	r2, r2, #3
  40c5a0:	4293      	cmp	r3, r2
  40c5a2:	d202      	bcs.n	40c5aa <_malloc_r+0x3aa>
  40c5a4:	6889      	ldr	r1, [r1, #8]
  40c5a6:	458c      	cmp	ip, r1
  40c5a8:	d1f7      	bne.n	40c59a <_malloc_r+0x39a>
  40c5aa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40c5ae:	687a      	ldr	r2, [r7, #4]
  40c5b0:	f8c4 c00c 	str.w	ip, [r4, #12]
  40c5b4:	60a1      	str	r1, [r4, #8]
  40c5b6:	f8cc 4008 	str.w	r4, [ip, #8]
  40c5ba:	60cc      	str	r4, [r1, #12]
  40c5bc:	e688      	b.n	40c2d0 <_malloc_r+0xd0>
  40c5be:	1963      	adds	r3, r4, r5
  40c5c0:	f042 0701 	orr.w	r7, r2, #1
  40c5c4:	f045 0501 	orr.w	r5, r5, #1
  40c5c8:	6065      	str	r5, [r4, #4]
  40c5ca:	4630      	mov	r0, r6
  40c5cc:	614b      	str	r3, [r1, #20]
  40c5ce:	610b      	str	r3, [r1, #16]
  40c5d0:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c5d4:	f8c3 e008 	str.w	lr, [r3, #8]
  40c5d8:	605f      	str	r7, [r3, #4]
  40c5da:	509a      	str	r2, [r3, r2]
  40c5dc:	3408      	adds	r4, #8
  40c5de:	f000 f9af 	bl	40c940 <__malloc_unlock>
  40c5e2:	e6d5      	b.n	40c390 <_malloc_r+0x190>
  40c5e4:	684a      	ldr	r2, [r1, #4]
  40c5e6:	e673      	b.n	40c2d0 <_malloc_r+0xd0>
  40c5e8:	f108 0801 	add.w	r8, r8, #1
  40c5ec:	f018 0f03 	tst.w	r8, #3
  40c5f0:	f10c 0c08 	add.w	ip, ip, #8
  40c5f4:	f47f ae7f 	bne.w	40c2f6 <_malloc_r+0xf6>
  40c5f8:	e030      	b.n	40c65c <_malloc_r+0x45c>
  40c5fa:	68dc      	ldr	r4, [r3, #12]
  40c5fc:	42a3      	cmp	r3, r4
  40c5fe:	bf08      	it	eq
  40c600:	3002      	addeq	r0, #2
  40c602:	f43f ae35 	beq.w	40c270 <_malloc_r+0x70>
  40c606:	e6b3      	b.n	40c370 <_malloc_r+0x170>
  40c608:	440b      	add	r3, r1
  40c60a:	460c      	mov	r4, r1
  40c60c:	685a      	ldr	r2, [r3, #4]
  40c60e:	68c9      	ldr	r1, [r1, #12]
  40c610:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40c614:	f042 0201 	orr.w	r2, r2, #1
  40c618:	605a      	str	r2, [r3, #4]
  40c61a:	4630      	mov	r0, r6
  40c61c:	60e9      	str	r1, [r5, #12]
  40c61e:	608d      	str	r5, [r1, #8]
  40c620:	f000 f98e 	bl	40c940 <__malloc_unlock>
  40c624:	e6b4      	b.n	40c390 <_malloc_r+0x190>
  40c626:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40c62a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40c62e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c632:	e607      	b.n	40c244 <_malloc_r+0x44>
  40c634:	099a      	lsrs	r2, r3, #6
  40c636:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40c63a:	0049      	lsls	r1, r1, #1
  40c63c:	3238      	adds	r2, #56	; 0x38
  40c63e:	e7a1      	b.n	40c584 <_malloc_r+0x384>
  40c640:	42bc      	cmp	r4, r7
  40c642:	4b4a      	ldr	r3, [pc, #296]	; (40c76c <_malloc_r+0x56c>)
  40c644:	f43f af00 	beq.w	40c448 <_malloc_r+0x248>
  40c648:	689c      	ldr	r4, [r3, #8]
  40c64a:	6862      	ldr	r2, [r4, #4]
  40c64c:	f022 0203 	bic.w	r2, r2, #3
  40c650:	e75a      	b.n	40c508 <_malloc_r+0x308>
  40c652:	f859 3908 	ldr.w	r3, [r9], #-8
  40c656:	4599      	cmp	r9, r3
  40c658:	f040 8082 	bne.w	40c760 <_malloc_r+0x560>
  40c65c:	f010 0f03 	tst.w	r0, #3
  40c660:	f100 30ff 	add.w	r0, r0, #4294967295
  40c664:	d1f5      	bne.n	40c652 <_malloc_r+0x452>
  40c666:	687b      	ldr	r3, [r7, #4]
  40c668:	ea23 0304 	bic.w	r3, r3, r4
  40c66c:	607b      	str	r3, [r7, #4]
  40c66e:	0064      	lsls	r4, r4, #1
  40c670:	429c      	cmp	r4, r3
  40c672:	f63f aebd 	bhi.w	40c3f0 <_malloc_r+0x1f0>
  40c676:	2c00      	cmp	r4, #0
  40c678:	f43f aeba 	beq.w	40c3f0 <_malloc_r+0x1f0>
  40c67c:	421c      	tst	r4, r3
  40c67e:	4640      	mov	r0, r8
  40c680:	f47f ae35 	bne.w	40c2ee <_malloc_r+0xee>
  40c684:	0064      	lsls	r4, r4, #1
  40c686:	421c      	tst	r4, r3
  40c688:	f100 0004 	add.w	r0, r0, #4
  40c68c:	d0fa      	beq.n	40c684 <_malloc_r+0x484>
  40c68e:	e62e      	b.n	40c2ee <_malloc_r+0xee>
  40c690:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40c694:	d818      	bhi.n	40c6c8 <_malloc_r+0x4c8>
  40c696:	0be8      	lsrs	r0, r5, #15
  40c698:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40c69c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c6a0:	3077      	adds	r0, #119	; 0x77
  40c6a2:	e5cf      	b.n	40c244 <_malloc_r+0x44>
  40c6a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40c6a8:	e6eb      	b.n	40c482 <_malloc_r+0x282>
  40c6aa:	2101      	movs	r1, #1
  40c6ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40c6b0:	1092      	asrs	r2, r2, #2
  40c6b2:	fa01 f202 	lsl.w	r2, r1, r2
  40c6b6:	431a      	orrs	r2, r3
  40c6b8:	f8c8 2004 	str.w	r2, [r8, #4]
  40c6bc:	4661      	mov	r1, ip
  40c6be:	e777      	b.n	40c5b0 <_malloc_r+0x3b0>
  40c6c0:	2301      	movs	r3, #1
  40c6c2:	f8cb 3004 	str.w	r3, [fp, #4]
  40c6c6:	e725      	b.n	40c514 <_malloc_r+0x314>
  40c6c8:	f240 5254 	movw	r2, #1364	; 0x554
  40c6cc:	4293      	cmp	r3, r2
  40c6ce:	d820      	bhi.n	40c712 <_malloc_r+0x512>
  40c6d0:	0ca8      	lsrs	r0, r5, #18
  40c6d2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40c6d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c6da:	307c      	adds	r0, #124	; 0x7c
  40c6dc:	e5b2      	b.n	40c244 <_malloc_r+0x44>
  40c6de:	3210      	adds	r2, #16
  40c6e0:	e6a4      	b.n	40c42c <_malloc_r+0x22c>
  40c6e2:	2a54      	cmp	r2, #84	; 0x54
  40c6e4:	d826      	bhi.n	40c734 <_malloc_r+0x534>
  40c6e6:	0b1a      	lsrs	r2, r3, #12
  40c6e8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40c6ec:	0049      	lsls	r1, r1, #1
  40c6ee:	326e      	adds	r2, #110	; 0x6e
  40c6f0:	e748      	b.n	40c584 <_malloc_r+0x384>
  40c6f2:	68bc      	ldr	r4, [r7, #8]
  40c6f4:	6862      	ldr	r2, [r4, #4]
  40c6f6:	f022 0203 	bic.w	r2, r2, #3
  40c6fa:	e705      	b.n	40c508 <_malloc_r+0x308>
  40c6fc:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40c700:	2800      	cmp	r0, #0
  40c702:	f47f aea8 	bne.w	40c456 <_malloc_r+0x256>
  40c706:	4442      	add	r2, r8
  40c708:	68bb      	ldr	r3, [r7, #8]
  40c70a:	f042 0201 	orr.w	r2, r2, #1
  40c70e:	605a      	str	r2, [r3, #4]
  40c710:	e6ec      	b.n	40c4ec <_malloc_r+0x2ec>
  40c712:	23fe      	movs	r3, #254	; 0xfe
  40c714:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40c718:	207e      	movs	r0, #126	; 0x7e
  40c71a:	e593      	b.n	40c244 <_malloc_r+0x44>
  40c71c:	2201      	movs	r2, #1
  40c71e:	f04f 0900 	mov.w	r9, #0
  40c722:	e6c1      	b.n	40c4a8 <_malloc_r+0x2a8>
  40c724:	f104 0108 	add.w	r1, r4, #8
  40c728:	4630      	mov	r0, r6
  40c72a:	f7fe fe97 	bl	40b45c <_free_r>
  40c72e:	f8d9 1000 	ldr.w	r1, [r9]
  40c732:	e6db      	b.n	40c4ec <_malloc_r+0x2ec>
  40c734:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c738:	d805      	bhi.n	40c746 <_malloc_r+0x546>
  40c73a:	0bda      	lsrs	r2, r3, #15
  40c73c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40c740:	0049      	lsls	r1, r1, #1
  40c742:	3277      	adds	r2, #119	; 0x77
  40c744:	e71e      	b.n	40c584 <_malloc_r+0x384>
  40c746:	f240 5154 	movw	r1, #1364	; 0x554
  40c74a:	428a      	cmp	r2, r1
  40c74c:	d805      	bhi.n	40c75a <_malloc_r+0x55a>
  40c74e:	0c9a      	lsrs	r2, r3, #18
  40c750:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40c754:	0049      	lsls	r1, r1, #1
  40c756:	327c      	adds	r2, #124	; 0x7c
  40c758:	e714      	b.n	40c584 <_malloc_r+0x384>
  40c75a:	21fe      	movs	r1, #254	; 0xfe
  40c75c:	227e      	movs	r2, #126	; 0x7e
  40c75e:	e711      	b.n	40c584 <_malloc_r+0x384>
  40c760:	687b      	ldr	r3, [r7, #4]
  40c762:	e784      	b.n	40c66e <_malloc_r+0x46e>
  40c764:	08e8      	lsrs	r0, r5, #3
  40c766:	1c43      	adds	r3, r0, #1
  40c768:	005b      	lsls	r3, r3, #1
  40c76a:	e5f8      	b.n	40c35e <_malloc_r+0x15e>
  40c76c:	200004bc 	.word	0x200004bc

0040c770 <memchr>:
  40c770:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c774:	2a10      	cmp	r2, #16
  40c776:	db2b      	blt.n	40c7d0 <memchr+0x60>
  40c778:	f010 0f07 	tst.w	r0, #7
  40c77c:	d008      	beq.n	40c790 <memchr+0x20>
  40c77e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c782:	3a01      	subs	r2, #1
  40c784:	428b      	cmp	r3, r1
  40c786:	d02d      	beq.n	40c7e4 <memchr+0x74>
  40c788:	f010 0f07 	tst.w	r0, #7
  40c78c:	b342      	cbz	r2, 40c7e0 <memchr+0x70>
  40c78e:	d1f6      	bne.n	40c77e <memchr+0xe>
  40c790:	b4f0      	push	{r4, r5, r6, r7}
  40c792:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40c796:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40c79a:	f022 0407 	bic.w	r4, r2, #7
  40c79e:	f07f 0700 	mvns.w	r7, #0
  40c7a2:	2300      	movs	r3, #0
  40c7a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40c7a8:	3c08      	subs	r4, #8
  40c7aa:	ea85 0501 	eor.w	r5, r5, r1
  40c7ae:	ea86 0601 	eor.w	r6, r6, r1
  40c7b2:	fa85 f547 	uadd8	r5, r5, r7
  40c7b6:	faa3 f587 	sel	r5, r3, r7
  40c7ba:	fa86 f647 	uadd8	r6, r6, r7
  40c7be:	faa5 f687 	sel	r6, r5, r7
  40c7c2:	b98e      	cbnz	r6, 40c7e8 <memchr+0x78>
  40c7c4:	d1ee      	bne.n	40c7a4 <memchr+0x34>
  40c7c6:	bcf0      	pop	{r4, r5, r6, r7}
  40c7c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c7cc:	f002 0207 	and.w	r2, r2, #7
  40c7d0:	b132      	cbz	r2, 40c7e0 <memchr+0x70>
  40c7d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c7d6:	3a01      	subs	r2, #1
  40c7d8:	ea83 0301 	eor.w	r3, r3, r1
  40c7dc:	b113      	cbz	r3, 40c7e4 <memchr+0x74>
  40c7de:	d1f8      	bne.n	40c7d2 <memchr+0x62>
  40c7e0:	2000      	movs	r0, #0
  40c7e2:	4770      	bx	lr
  40c7e4:	3801      	subs	r0, #1
  40c7e6:	4770      	bx	lr
  40c7e8:	2d00      	cmp	r5, #0
  40c7ea:	bf06      	itte	eq
  40c7ec:	4635      	moveq	r5, r6
  40c7ee:	3803      	subeq	r0, #3
  40c7f0:	3807      	subne	r0, #7
  40c7f2:	f015 0f01 	tst.w	r5, #1
  40c7f6:	d107      	bne.n	40c808 <memchr+0x98>
  40c7f8:	3001      	adds	r0, #1
  40c7fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40c7fe:	bf02      	ittt	eq
  40c800:	3001      	addeq	r0, #1
  40c802:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40c806:	3001      	addeq	r0, #1
  40c808:	bcf0      	pop	{r4, r5, r6, r7}
  40c80a:	3801      	subs	r0, #1
  40c80c:	4770      	bx	lr
  40c80e:	bf00      	nop

0040c810 <memcmp>:
  40c810:	2a03      	cmp	r2, #3
  40c812:	b470      	push	{r4, r5, r6}
  40c814:	d926      	bls.n	40c864 <memcmp+0x54>
  40c816:	ea40 0301 	orr.w	r3, r0, r1
  40c81a:	079b      	lsls	r3, r3, #30
  40c81c:	d011      	beq.n	40c842 <memcmp+0x32>
  40c81e:	7804      	ldrb	r4, [r0, #0]
  40c820:	780d      	ldrb	r5, [r1, #0]
  40c822:	42ac      	cmp	r4, r5
  40c824:	d122      	bne.n	40c86c <memcmp+0x5c>
  40c826:	4402      	add	r2, r0
  40c828:	1c43      	adds	r3, r0, #1
  40c82a:	e005      	b.n	40c838 <memcmp+0x28>
  40c82c:	f813 4b01 	ldrb.w	r4, [r3], #1
  40c830:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40c834:	42ac      	cmp	r4, r5
  40c836:	d119      	bne.n	40c86c <memcmp+0x5c>
  40c838:	4293      	cmp	r3, r2
  40c83a:	d1f7      	bne.n	40c82c <memcmp+0x1c>
  40c83c:	2000      	movs	r0, #0
  40c83e:	bc70      	pop	{r4, r5, r6}
  40c840:	4770      	bx	lr
  40c842:	460c      	mov	r4, r1
  40c844:	4603      	mov	r3, r0
  40c846:	681e      	ldr	r6, [r3, #0]
  40c848:	6825      	ldr	r5, [r4, #0]
  40c84a:	42ae      	cmp	r6, r5
  40c84c:	4618      	mov	r0, r3
  40c84e:	4621      	mov	r1, r4
  40c850:	f103 0304 	add.w	r3, r3, #4
  40c854:	f104 0404 	add.w	r4, r4, #4
  40c858:	d1e1      	bne.n	40c81e <memcmp+0xe>
  40c85a:	3a04      	subs	r2, #4
  40c85c:	2a03      	cmp	r2, #3
  40c85e:	4618      	mov	r0, r3
  40c860:	4621      	mov	r1, r4
  40c862:	d8f0      	bhi.n	40c846 <memcmp+0x36>
  40c864:	2a00      	cmp	r2, #0
  40c866:	d1da      	bne.n	40c81e <memcmp+0xe>
  40c868:	4610      	mov	r0, r2
  40c86a:	e7e8      	b.n	40c83e <memcmp+0x2e>
  40c86c:	1b60      	subs	r0, r4, r5
  40c86e:	bc70      	pop	{r4, r5, r6}
  40c870:	4770      	bx	lr
  40c872:	bf00      	nop

0040c874 <memmove>:
  40c874:	4288      	cmp	r0, r1
  40c876:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c878:	d90d      	bls.n	40c896 <memmove+0x22>
  40c87a:	188b      	adds	r3, r1, r2
  40c87c:	4298      	cmp	r0, r3
  40c87e:	d20a      	bcs.n	40c896 <memmove+0x22>
  40c880:	1881      	adds	r1, r0, r2
  40c882:	2a00      	cmp	r2, #0
  40c884:	d051      	beq.n	40c92a <memmove+0xb6>
  40c886:	1a9a      	subs	r2, r3, r2
  40c888:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c88c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c890:	4293      	cmp	r3, r2
  40c892:	d1f9      	bne.n	40c888 <memmove+0x14>
  40c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c896:	2a0f      	cmp	r2, #15
  40c898:	d948      	bls.n	40c92c <memmove+0xb8>
  40c89a:	ea41 0300 	orr.w	r3, r1, r0
  40c89e:	079b      	lsls	r3, r3, #30
  40c8a0:	d146      	bne.n	40c930 <memmove+0xbc>
  40c8a2:	f100 0410 	add.w	r4, r0, #16
  40c8a6:	f101 0310 	add.w	r3, r1, #16
  40c8aa:	4615      	mov	r5, r2
  40c8ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c8b0:	f844 6c10 	str.w	r6, [r4, #-16]
  40c8b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c8b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c8bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c8c0:	f844 6c08 	str.w	r6, [r4, #-8]
  40c8c4:	3d10      	subs	r5, #16
  40c8c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c8ca:	f844 6c04 	str.w	r6, [r4, #-4]
  40c8ce:	2d0f      	cmp	r5, #15
  40c8d0:	f103 0310 	add.w	r3, r3, #16
  40c8d4:	f104 0410 	add.w	r4, r4, #16
  40c8d8:	d8e8      	bhi.n	40c8ac <memmove+0x38>
  40c8da:	f1a2 0310 	sub.w	r3, r2, #16
  40c8de:	f023 030f 	bic.w	r3, r3, #15
  40c8e2:	f002 0e0f 	and.w	lr, r2, #15
  40c8e6:	3310      	adds	r3, #16
  40c8e8:	f1be 0f03 	cmp.w	lr, #3
  40c8ec:	4419      	add	r1, r3
  40c8ee:	4403      	add	r3, r0
  40c8f0:	d921      	bls.n	40c936 <memmove+0xc2>
  40c8f2:	1f1e      	subs	r6, r3, #4
  40c8f4:	460d      	mov	r5, r1
  40c8f6:	4674      	mov	r4, lr
  40c8f8:	3c04      	subs	r4, #4
  40c8fa:	f855 7b04 	ldr.w	r7, [r5], #4
  40c8fe:	f846 7f04 	str.w	r7, [r6, #4]!
  40c902:	2c03      	cmp	r4, #3
  40c904:	d8f8      	bhi.n	40c8f8 <memmove+0x84>
  40c906:	f1ae 0404 	sub.w	r4, lr, #4
  40c90a:	f024 0403 	bic.w	r4, r4, #3
  40c90e:	3404      	adds	r4, #4
  40c910:	4423      	add	r3, r4
  40c912:	4421      	add	r1, r4
  40c914:	f002 0203 	and.w	r2, r2, #3
  40c918:	b162      	cbz	r2, 40c934 <memmove+0xc0>
  40c91a:	3b01      	subs	r3, #1
  40c91c:	440a      	add	r2, r1
  40c91e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c922:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c926:	428a      	cmp	r2, r1
  40c928:	d1f9      	bne.n	40c91e <memmove+0xaa>
  40c92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c92c:	4603      	mov	r3, r0
  40c92e:	e7f3      	b.n	40c918 <memmove+0xa4>
  40c930:	4603      	mov	r3, r0
  40c932:	e7f2      	b.n	40c91a <memmove+0xa6>
  40c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c936:	4672      	mov	r2, lr
  40c938:	e7ee      	b.n	40c918 <memmove+0xa4>
  40c93a:	bf00      	nop

0040c93c <__malloc_lock>:
  40c93c:	4770      	bx	lr
  40c93e:	bf00      	nop

0040c940 <__malloc_unlock>:
  40c940:	4770      	bx	lr
  40c942:	bf00      	nop

0040c944 <_Balloc>:
  40c944:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c946:	b570      	push	{r4, r5, r6, lr}
  40c948:	4605      	mov	r5, r0
  40c94a:	460c      	mov	r4, r1
  40c94c:	b14b      	cbz	r3, 40c962 <_Balloc+0x1e>
  40c94e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c952:	b180      	cbz	r0, 40c976 <_Balloc+0x32>
  40c954:	6802      	ldr	r2, [r0, #0]
  40c956:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c95a:	2300      	movs	r3, #0
  40c95c:	6103      	str	r3, [r0, #16]
  40c95e:	60c3      	str	r3, [r0, #12]
  40c960:	bd70      	pop	{r4, r5, r6, pc}
  40c962:	2221      	movs	r2, #33	; 0x21
  40c964:	2104      	movs	r1, #4
  40c966:	f001 f80f 	bl	40d988 <_calloc_r>
  40c96a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c96c:	4603      	mov	r3, r0
  40c96e:	2800      	cmp	r0, #0
  40c970:	d1ed      	bne.n	40c94e <_Balloc+0xa>
  40c972:	2000      	movs	r0, #0
  40c974:	bd70      	pop	{r4, r5, r6, pc}
  40c976:	2101      	movs	r1, #1
  40c978:	fa01 f604 	lsl.w	r6, r1, r4
  40c97c:	1d72      	adds	r2, r6, #5
  40c97e:	4628      	mov	r0, r5
  40c980:	0092      	lsls	r2, r2, #2
  40c982:	f001 f801 	bl	40d988 <_calloc_r>
  40c986:	2800      	cmp	r0, #0
  40c988:	d0f3      	beq.n	40c972 <_Balloc+0x2e>
  40c98a:	6044      	str	r4, [r0, #4]
  40c98c:	6086      	str	r6, [r0, #8]
  40c98e:	e7e4      	b.n	40c95a <_Balloc+0x16>

0040c990 <_Bfree>:
  40c990:	b131      	cbz	r1, 40c9a0 <_Bfree+0x10>
  40c992:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c994:	684a      	ldr	r2, [r1, #4]
  40c996:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c99a:	6008      	str	r0, [r1, #0]
  40c99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c9a0:	4770      	bx	lr
  40c9a2:	bf00      	nop

0040c9a4 <__multadd>:
  40c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c9a6:	690c      	ldr	r4, [r1, #16]
  40c9a8:	b083      	sub	sp, #12
  40c9aa:	460d      	mov	r5, r1
  40c9ac:	4606      	mov	r6, r0
  40c9ae:	f101 0e14 	add.w	lr, r1, #20
  40c9b2:	2700      	movs	r7, #0
  40c9b4:	f8de 0000 	ldr.w	r0, [lr]
  40c9b8:	b281      	uxth	r1, r0
  40c9ba:	fb02 3101 	mla	r1, r2, r1, r3
  40c9be:	0c0b      	lsrs	r3, r1, #16
  40c9c0:	0c00      	lsrs	r0, r0, #16
  40c9c2:	fb02 3300 	mla	r3, r2, r0, r3
  40c9c6:	b289      	uxth	r1, r1
  40c9c8:	3701      	adds	r7, #1
  40c9ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40c9ce:	42bc      	cmp	r4, r7
  40c9d0:	f84e 1b04 	str.w	r1, [lr], #4
  40c9d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c9d8:	dcec      	bgt.n	40c9b4 <__multadd+0x10>
  40c9da:	b13b      	cbz	r3, 40c9ec <__multadd+0x48>
  40c9dc:	68aa      	ldr	r2, [r5, #8]
  40c9de:	4294      	cmp	r4, r2
  40c9e0:	da07      	bge.n	40c9f2 <__multadd+0x4e>
  40c9e2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c9e6:	3401      	adds	r4, #1
  40c9e8:	6153      	str	r3, [r2, #20]
  40c9ea:	612c      	str	r4, [r5, #16]
  40c9ec:	4628      	mov	r0, r5
  40c9ee:	b003      	add	sp, #12
  40c9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c9f2:	6869      	ldr	r1, [r5, #4]
  40c9f4:	9301      	str	r3, [sp, #4]
  40c9f6:	3101      	adds	r1, #1
  40c9f8:	4630      	mov	r0, r6
  40c9fa:	f7ff ffa3 	bl	40c944 <_Balloc>
  40c9fe:	692a      	ldr	r2, [r5, #16]
  40ca00:	3202      	adds	r2, #2
  40ca02:	f105 010c 	add.w	r1, r5, #12
  40ca06:	4607      	mov	r7, r0
  40ca08:	0092      	lsls	r2, r2, #2
  40ca0a:	300c      	adds	r0, #12
  40ca0c:	f7f9 fa20 	bl	405e50 <memcpy>
  40ca10:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40ca12:	6869      	ldr	r1, [r5, #4]
  40ca14:	9b01      	ldr	r3, [sp, #4]
  40ca16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40ca1a:	6028      	str	r0, [r5, #0]
  40ca1c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40ca20:	463d      	mov	r5, r7
  40ca22:	e7de      	b.n	40c9e2 <__multadd+0x3e>

0040ca24 <__s2b>:
  40ca24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ca28:	4c23      	ldr	r4, [pc, #140]	; (40cab8 <__s2b+0x94>)
  40ca2a:	9d08      	ldr	r5, [sp, #32]
  40ca2c:	461f      	mov	r7, r3
  40ca2e:	3308      	adds	r3, #8
  40ca30:	fb84 4e03 	smull	r4, lr, r4, r3
  40ca34:	17db      	asrs	r3, r3, #31
  40ca36:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
  40ca3a:	f1be 0f01 	cmp.w	lr, #1
  40ca3e:	4606      	mov	r6, r0
  40ca40:	460c      	mov	r4, r1
  40ca42:	4690      	mov	r8, r2
  40ca44:	dd35      	ble.n	40cab2 <__s2b+0x8e>
  40ca46:	2301      	movs	r3, #1
  40ca48:	2100      	movs	r1, #0
  40ca4a:	005b      	lsls	r3, r3, #1
  40ca4c:	459e      	cmp	lr, r3
  40ca4e:	f101 0101 	add.w	r1, r1, #1
  40ca52:	dcfa      	bgt.n	40ca4a <__s2b+0x26>
  40ca54:	4630      	mov	r0, r6
  40ca56:	f7ff ff75 	bl	40c944 <_Balloc>
  40ca5a:	2301      	movs	r3, #1
  40ca5c:	f1b8 0f09 	cmp.w	r8, #9
  40ca60:	6145      	str	r5, [r0, #20]
  40ca62:	6103      	str	r3, [r0, #16]
  40ca64:	dd21      	ble.n	40caaa <__s2b+0x86>
  40ca66:	f104 0909 	add.w	r9, r4, #9
  40ca6a:	464d      	mov	r5, r9
  40ca6c:	4444      	add	r4, r8
  40ca6e:	f815 3b01 	ldrb.w	r3, [r5], #1
  40ca72:	4601      	mov	r1, r0
  40ca74:	3b30      	subs	r3, #48	; 0x30
  40ca76:	220a      	movs	r2, #10
  40ca78:	4630      	mov	r0, r6
  40ca7a:	f7ff ff93 	bl	40c9a4 <__multadd>
  40ca7e:	42a5      	cmp	r5, r4
  40ca80:	d1f5      	bne.n	40ca6e <__s2b+0x4a>
  40ca82:	eb09 0408 	add.w	r4, r9, r8
  40ca86:	3c08      	subs	r4, #8
  40ca88:	4547      	cmp	r7, r8
  40ca8a:	dd0c      	ble.n	40caa6 <__s2b+0x82>
  40ca8c:	ebc8 0707 	rsb	r7, r8, r7
  40ca90:	4427      	add	r7, r4
  40ca92:	f814 3b01 	ldrb.w	r3, [r4], #1
  40ca96:	4601      	mov	r1, r0
  40ca98:	3b30      	subs	r3, #48	; 0x30
  40ca9a:	220a      	movs	r2, #10
  40ca9c:	4630      	mov	r0, r6
  40ca9e:	f7ff ff81 	bl	40c9a4 <__multadd>
  40caa2:	42a7      	cmp	r7, r4
  40caa4:	d1f5      	bne.n	40ca92 <__s2b+0x6e>
  40caa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40caaa:	340a      	adds	r4, #10
  40caac:	f04f 0809 	mov.w	r8, #9
  40cab0:	e7ea      	b.n	40ca88 <__s2b+0x64>
  40cab2:	2100      	movs	r1, #0
  40cab4:	e7ce      	b.n	40ca54 <__s2b+0x30>
  40cab6:	bf00      	nop
  40cab8:	38e38e39 	.word	0x38e38e39

0040cabc <__hi0bits>:
  40cabc:	0c03      	lsrs	r3, r0, #16
  40cabe:	041b      	lsls	r3, r3, #16
  40cac0:	b9b3      	cbnz	r3, 40caf0 <__hi0bits+0x34>
  40cac2:	0400      	lsls	r0, r0, #16
  40cac4:	2310      	movs	r3, #16
  40cac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40caca:	bf04      	itt	eq
  40cacc:	0200      	lsleq	r0, r0, #8
  40cace:	3308      	addeq	r3, #8
  40cad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40cad4:	bf04      	itt	eq
  40cad6:	0100      	lsleq	r0, r0, #4
  40cad8:	3304      	addeq	r3, #4
  40cada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40cade:	bf04      	itt	eq
  40cae0:	0080      	lsleq	r0, r0, #2
  40cae2:	3302      	addeq	r3, #2
  40cae4:	2800      	cmp	r0, #0
  40cae6:	db07      	blt.n	40caf8 <__hi0bits+0x3c>
  40cae8:	0042      	lsls	r2, r0, #1
  40caea:	d403      	bmi.n	40caf4 <__hi0bits+0x38>
  40caec:	2020      	movs	r0, #32
  40caee:	4770      	bx	lr
  40caf0:	2300      	movs	r3, #0
  40caf2:	e7e8      	b.n	40cac6 <__hi0bits+0xa>
  40caf4:	1c58      	adds	r0, r3, #1
  40caf6:	4770      	bx	lr
  40caf8:	4618      	mov	r0, r3
  40cafa:	4770      	bx	lr

0040cafc <__lo0bits>:
  40cafc:	6803      	ldr	r3, [r0, #0]
  40cafe:	f013 0207 	ands.w	r2, r3, #7
  40cb02:	d007      	beq.n	40cb14 <__lo0bits+0x18>
  40cb04:	07d9      	lsls	r1, r3, #31
  40cb06:	d420      	bmi.n	40cb4a <__lo0bits+0x4e>
  40cb08:	079a      	lsls	r2, r3, #30
  40cb0a:	d420      	bmi.n	40cb4e <__lo0bits+0x52>
  40cb0c:	089b      	lsrs	r3, r3, #2
  40cb0e:	6003      	str	r3, [r0, #0]
  40cb10:	2002      	movs	r0, #2
  40cb12:	4770      	bx	lr
  40cb14:	b299      	uxth	r1, r3
  40cb16:	b909      	cbnz	r1, 40cb1c <__lo0bits+0x20>
  40cb18:	0c1b      	lsrs	r3, r3, #16
  40cb1a:	2210      	movs	r2, #16
  40cb1c:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cb20:	bf04      	itt	eq
  40cb22:	0a1b      	lsreq	r3, r3, #8
  40cb24:	3208      	addeq	r2, #8
  40cb26:	0719      	lsls	r1, r3, #28
  40cb28:	bf04      	itt	eq
  40cb2a:	091b      	lsreq	r3, r3, #4
  40cb2c:	3204      	addeq	r2, #4
  40cb2e:	0799      	lsls	r1, r3, #30
  40cb30:	bf04      	itt	eq
  40cb32:	089b      	lsreq	r3, r3, #2
  40cb34:	3202      	addeq	r2, #2
  40cb36:	07d9      	lsls	r1, r3, #31
  40cb38:	d404      	bmi.n	40cb44 <__lo0bits+0x48>
  40cb3a:	085b      	lsrs	r3, r3, #1
  40cb3c:	d101      	bne.n	40cb42 <__lo0bits+0x46>
  40cb3e:	2020      	movs	r0, #32
  40cb40:	4770      	bx	lr
  40cb42:	3201      	adds	r2, #1
  40cb44:	6003      	str	r3, [r0, #0]
  40cb46:	4610      	mov	r0, r2
  40cb48:	4770      	bx	lr
  40cb4a:	2000      	movs	r0, #0
  40cb4c:	4770      	bx	lr
  40cb4e:	085b      	lsrs	r3, r3, #1
  40cb50:	6003      	str	r3, [r0, #0]
  40cb52:	2001      	movs	r0, #1
  40cb54:	4770      	bx	lr
  40cb56:	bf00      	nop

0040cb58 <__i2b>:
  40cb58:	b510      	push	{r4, lr}
  40cb5a:	460c      	mov	r4, r1
  40cb5c:	2101      	movs	r1, #1
  40cb5e:	f7ff fef1 	bl	40c944 <_Balloc>
  40cb62:	2201      	movs	r2, #1
  40cb64:	6144      	str	r4, [r0, #20]
  40cb66:	6102      	str	r2, [r0, #16]
  40cb68:	bd10      	pop	{r4, pc}
  40cb6a:	bf00      	nop

0040cb6c <__multiply>:
  40cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cb70:	690d      	ldr	r5, [r1, #16]
  40cb72:	6917      	ldr	r7, [r2, #16]
  40cb74:	42bd      	cmp	r5, r7
  40cb76:	b083      	sub	sp, #12
  40cb78:	460c      	mov	r4, r1
  40cb7a:	4616      	mov	r6, r2
  40cb7c:	da04      	bge.n	40cb88 <__multiply+0x1c>
  40cb7e:	462a      	mov	r2, r5
  40cb80:	4634      	mov	r4, r6
  40cb82:	463d      	mov	r5, r7
  40cb84:	460e      	mov	r6, r1
  40cb86:	4617      	mov	r7, r2
  40cb88:	68a3      	ldr	r3, [r4, #8]
  40cb8a:	6861      	ldr	r1, [r4, #4]
  40cb8c:	eb05 0807 	add.w	r8, r5, r7
  40cb90:	4598      	cmp	r8, r3
  40cb92:	bfc8      	it	gt
  40cb94:	3101      	addgt	r1, #1
  40cb96:	f7ff fed5 	bl	40c944 <_Balloc>
  40cb9a:	f100 0c14 	add.w	ip, r0, #20
  40cb9e:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40cba2:	45cc      	cmp	ip, r9
  40cba4:	9000      	str	r0, [sp, #0]
  40cba6:	d205      	bcs.n	40cbb4 <__multiply+0x48>
  40cba8:	4663      	mov	r3, ip
  40cbaa:	2100      	movs	r1, #0
  40cbac:	f843 1b04 	str.w	r1, [r3], #4
  40cbb0:	4599      	cmp	r9, r3
  40cbb2:	d8fb      	bhi.n	40cbac <__multiply+0x40>
  40cbb4:	f106 0214 	add.w	r2, r6, #20
  40cbb8:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40cbbc:	f104 0314 	add.w	r3, r4, #20
  40cbc0:	4552      	cmp	r2, sl
  40cbc2:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40cbc6:	d254      	bcs.n	40cc72 <__multiply+0x106>
  40cbc8:	f8cd 9004 	str.w	r9, [sp, #4]
  40cbcc:	4699      	mov	r9, r3
  40cbce:	f852 3b04 	ldr.w	r3, [r2], #4
  40cbd2:	fa1f fb83 	uxth.w	fp, r3
  40cbd6:	f1bb 0f00 	cmp.w	fp, #0
  40cbda:	d020      	beq.n	40cc1e <__multiply+0xb2>
  40cbdc:	2000      	movs	r0, #0
  40cbde:	464f      	mov	r7, r9
  40cbe0:	4666      	mov	r6, ip
  40cbe2:	4605      	mov	r5, r0
  40cbe4:	e000      	b.n	40cbe8 <__multiply+0x7c>
  40cbe6:	461e      	mov	r6, r3
  40cbe8:	f857 4b04 	ldr.w	r4, [r7], #4
  40cbec:	6830      	ldr	r0, [r6, #0]
  40cbee:	b2a1      	uxth	r1, r4
  40cbf0:	b283      	uxth	r3, r0
  40cbf2:	fb0b 3101 	mla	r1, fp, r1, r3
  40cbf6:	0c24      	lsrs	r4, r4, #16
  40cbf8:	0c00      	lsrs	r0, r0, #16
  40cbfa:	194b      	adds	r3, r1, r5
  40cbfc:	fb0b 0004 	mla	r0, fp, r4, r0
  40cc00:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40cc04:	b299      	uxth	r1, r3
  40cc06:	4633      	mov	r3, r6
  40cc08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40cc0c:	45be      	cmp	lr, r7
  40cc0e:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40cc12:	f843 1b04 	str.w	r1, [r3], #4
  40cc16:	d8e6      	bhi.n	40cbe6 <__multiply+0x7a>
  40cc18:	6075      	str	r5, [r6, #4]
  40cc1a:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40cc1e:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40cc22:	d020      	beq.n	40cc66 <__multiply+0xfa>
  40cc24:	f8dc 3000 	ldr.w	r3, [ip]
  40cc28:	4667      	mov	r7, ip
  40cc2a:	4618      	mov	r0, r3
  40cc2c:	464d      	mov	r5, r9
  40cc2e:	2100      	movs	r1, #0
  40cc30:	e000      	b.n	40cc34 <__multiply+0xc8>
  40cc32:	4637      	mov	r7, r6
  40cc34:	882c      	ldrh	r4, [r5, #0]
  40cc36:	0c00      	lsrs	r0, r0, #16
  40cc38:	fb0b 0004 	mla	r0, fp, r4, r0
  40cc3c:	4401      	add	r1, r0
  40cc3e:	b29c      	uxth	r4, r3
  40cc40:	463e      	mov	r6, r7
  40cc42:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40cc46:	f846 3b04 	str.w	r3, [r6], #4
  40cc4a:	6878      	ldr	r0, [r7, #4]
  40cc4c:	f855 4b04 	ldr.w	r4, [r5], #4
  40cc50:	b283      	uxth	r3, r0
  40cc52:	0c24      	lsrs	r4, r4, #16
  40cc54:	fb0b 3404 	mla	r4, fp, r4, r3
  40cc58:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40cc5c:	45ae      	cmp	lr, r5
  40cc5e:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40cc62:	d8e6      	bhi.n	40cc32 <__multiply+0xc6>
  40cc64:	607b      	str	r3, [r7, #4]
  40cc66:	4592      	cmp	sl, r2
  40cc68:	f10c 0c04 	add.w	ip, ip, #4
  40cc6c:	d8af      	bhi.n	40cbce <__multiply+0x62>
  40cc6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40cc72:	f1b8 0f00 	cmp.w	r8, #0
  40cc76:	dd0b      	ble.n	40cc90 <__multiply+0x124>
  40cc78:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40cc7c:	f1a9 0904 	sub.w	r9, r9, #4
  40cc80:	b11b      	cbz	r3, 40cc8a <__multiply+0x11e>
  40cc82:	e005      	b.n	40cc90 <__multiply+0x124>
  40cc84:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40cc88:	b913      	cbnz	r3, 40cc90 <__multiply+0x124>
  40cc8a:	f1b8 0801 	subs.w	r8, r8, #1
  40cc8e:	d1f9      	bne.n	40cc84 <__multiply+0x118>
  40cc90:	9800      	ldr	r0, [sp, #0]
  40cc92:	f8c0 8010 	str.w	r8, [r0, #16]
  40cc96:	b003      	add	sp, #12
  40cc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cc9c <__pow5mult>:
  40cc9c:	f012 0303 	ands.w	r3, r2, #3
  40cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cca4:	4614      	mov	r4, r2
  40cca6:	4607      	mov	r7, r0
  40cca8:	d12e      	bne.n	40cd08 <__pow5mult+0x6c>
  40ccaa:	460e      	mov	r6, r1
  40ccac:	10a4      	asrs	r4, r4, #2
  40ccae:	d01c      	beq.n	40ccea <__pow5mult+0x4e>
  40ccb0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40ccb2:	b395      	cbz	r5, 40cd1a <__pow5mult+0x7e>
  40ccb4:	07e3      	lsls	r3, r4, #31
  40ccb6:	f04f 0800 	mov.w	r8, #0
  40ccba:	d406      	bmi.n	40ccca <__pow5mult+0x2e>
  40ccbc:	1064      	asrs	r4, r4, #1
  40ccbe:	d014      	beq.n	40ccea <__pow5mult+0x4e>
  40ccc0:	6828      	ldr	r0, [r5, #0]
  40ccc2:	b1a8      	cbz	r0, 40ccf0 <__pow5mult+0x54>
  40ccc4:	4605      	mov	r5, r0
  40ccc6:	07e3      	lsls	r3, r4, #31
  40ccc8:	d5f8      	bpl.n	40ccbc <__pow5mult+0x20>
  40ccca:	462a      	mov	r2, r5
  40cccc:	4631      	mov	r1, r6
  40ccce:	4638      	mov	r0, r7
  40ccd0:	f7ff ff4c 	bl	40cb6c <__multiply>
  40ccd4:	b1b6      	cbz	r6, 40cd04 <__pow5mult+0x68>
  40ccd6:	6872      	ldr	r2, [r6, #4]
  40ccd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ccda:	1064      	asrs	r4, r4, #1
  40ccdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40cce0:	6031      	str	r1, [r6, #0]
  40cce2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40cce6:	4606      	mov	r6, r0
  40cce8:	d1ea      	bne.n	40ccc0 <__pow5mult+0x24>
  40ccea:	4630      	mov	r0, r6
  40ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ccf0:	462a      	mov	r2, r5
  40ccf2:	4629      	mov	r1, r5
  40ccf4:	4638      	mov	r0, r7
  40ccf6:	f7ff ff39 	bl	40cb6c <__multiply>
  40ccfa:	6028      	str	r0, [r5, #0]
  40ccfc:	f8c0 8000 	str.w	r8, [r0]
  40cd00:	4605      	mov	r5, r0
  40cd02:	e7e0      	b.n	40ccc6 <__pow5mult+0x2a>
  40cd04:	4606      	mov	r6, r0
  40cd06:	e7d9      	b.n	40ccbc <__pow5mult+0x20>
  40cd08:	1e5a      	subs	r2, r3, #1
  40cd0a:	4d0b      	ldr	r5, [pc, #44]	; (40cd38 <__pow5mult+0x9c>)
  40cd0c:	2300      	movs	r3, #0
  40cd0e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40cd12:	f7ff fe47 	bl	40c9a4 <__multadd>
  40cd16:	4606      	mov	r6, r0
  40cd18:	e7c8      	b.n	40ccac <__pow5mult+0x10>
  40cd1a:	2101      	movs	r1, #1
  40cd1c:	4638      	mov	r0, r7
  40cd1e:	f7ff fe11 	bl	40c944 <_Balloc>
  40cd22:	f240 2171 	movw	r1, #625	; 0x271
  40cd26:	2201      	movs	r2, #1
  40cd28:	2300      	movs	r3, #0
  40cd2a:	6141      	str	r1, [r0, #20]
  40cd2c:	6102      	str	r2, [r0, #16]
  40cd2e:	4605      	mov	r5, r0
  40cd30:	64b8      	str	r0, [r7, #72]	; 0x48
  40cd32:	6003      	str	r3, [r0, #0]
  40cd34:	e7be      	b.n	40ccb4 <__pow5mult+0x18>
  40cd36:	bf00      	nop
  40cd38:	00410290 	.word	0x00410290

0040cd3c <__lshift>:
  40cd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cd40:	4691      	mov	r9, r2
  40cd42:	690a      	ldr	r2, [r1, #16]
  40cd44:	688b      	ldr	r3, [r1, #8]
  40cd46:	ea4f 1469 	mov.w	r4, r9, asr #5
  40cd4a:	eb04 0802 	add.w	r8, r4, r2
  40cd4e:	f108 0501 	add.w	r5, r8, #1
  40cd52:	429d      	cmp	r5, r3
  40cd54:	460e      	mov	r6, r1
  40cd56:	4682      	mov	sl, r0
  40cd58:	6849      	ldr	r1, [r1, #4]
  40cd5a:	dd04      	ble.n	40cd66 <__lshift+0x2a>
  40cd5c:	005b      	lsls	r3, r3, #1
  40cd5e:	429d      	cmp	r5, r3
  40cd60:	f101 0101 	add.w	r1, r1, #1
  40cd64:	dcfa      	bgt.n	40cd5c <__lshift+0x20>
  40cd66:	4650      	mov	r0, sl
  40cd68:	f7ff fdec 	bl	40c944 <_Balloc>
  40cd6c:	2c00      	cmp	r4, #0
  40cd6e:	f100 0214 	add.w	r2, r0, #20
  40cd72:	dd38      	ble.n	40cde6 <__lshift+0xaa>
  40cd74:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40cd78:	2100      	movs	r1, #0
  40cd7a:	f842 1b04 	str.w	r1, [r2], #4
  40cd7e:	4293      	cmp	r3, r2
  40cd80:	d1fb      	bne.n	40cd7a <__lshift+0x3e>
  40cd82:	6934      	ldr	r4, [r6, #16]
  40cd84:	f106 0114 	add.w	r1, r6, #20
  40cd88:	f019 091f 	ands.w	r9, r9, #31
  40cd8c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40cd90:	d021      	beq.n	40cdd6 <__lshift+0x9a>
  40cd92:	f1c9 0220 	rsb	r2, r9, #32
  40cd96:	2400      	movs	r4, #0
  40cd98:	680f      	ldr	r7, [r1, #0]
  40cd9a:	fa07 fc09 	lsl.w	ip, r7, r9
  40cd9e:	ea4c 0404 	orr.w	r4, ip, r4
  40cda2:	469c      	mov	ip, r3
  40cda4:	f843 4b04 	str.w	r4, [r3], #4
  40cda8:	f851 4b04 	ldr.w	r4, [r1], #4
  40cdac:	458e      	cmp	lr, r1
  40cdae:	fa24 f402 	lsr.w	r4, r4, r2
  40cdb2:	d8f1      	bhi.n	40cd98 <__lshift+0x5c>
  40cdb4:	f8cc 4004 	str.w	r4, [ip, #4]
  40cdb8:	b10c      	cbz	r4, 40cdbe <__lshift+0x82>
  40cdba:	f108 0502 	add.w	r5, r8, #2
  40cdbe:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40cdc2:	6872      	ldr	r2, [r6, #4]
  40cdc4:	3d01      	subs	r5, #1
  40cdc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40cdca:	6105      	str	r5, [r0, #16]
  40cdcc:	6031      	str	r1, [r6, #0]
  40cdce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40cdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cdd6:	3b04      	subs	r3, #4
  40cdd8:	f851 2b04 	ldr.w	r2, [r1], #4
  40cddc:	f843 2f04 	str.w	r2, [r3, #4]!
  40cde0:	458e      	cmp	lr, r1
  40cde2:	d8f9      	bhi.n	40cdd8 <__lshift+0x9c>
  40cde4:	e7eb      	b.n	40cdbe <__lshift+0x82>
  40cde6:	4613      	mov	r3, r2
  40cde8:	e7cb      	b.n	40cd82 <__lshift+0x46>
  40cdea:	bf00      	nop

0040cdec <__mcmp>:
  40cdec:	6902      	ldr	r2, [r0, #16]
  40cdee:	690b      	ldr	r3, [r1, #16]
  40cdf0:	1ad2      	subs	r2, r2, r3
  40cdf2:	d112      	bne.n	40ce1a <__mcmp+0x2e>
  40cdf4:	009b      	lsls	r3, r3, #2
  40cdf6:	3014      	adds	r0, #20
  40cdf8:	3114      	adds	r1, #20
  40cdfa:	4419      	add	r1, r3
  40cdfc:	b410      	push	{r4}
  40cdfe:	4403      	add	r3, r0
  40ce00:	e001      	b.n	40ce06 <__mcmp+0x1a>
  40ce02:	4298      	cmp	r0, r3
  40ce04:	d20b      	bcs.n	40ce1e <__mcmp+0x32>
  40ce06:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40ce0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ce0e:	4294      	cmp	r4, r2
  40ce10:	d0f7      	beq.n	40ce02 <__mcmp+0x16>
  40ce12:	d307      	bcc.n	40ce24 <__mcmp+0x38>
  40ce14:	2001      	movs	r0, #1
  40ce16:	bc10      	pop	{r4}
  40ce18:	4770      	bx	lr
  40ce1a:	4610      	mov	r0, r2
  40ce1c:	4770      	bx	lr
  40ce1e:	2000      	movs	r0, #0
  40ce20:	bc10      	pop	{r4}
  40ce22:	4770      	bx	lr
  40ce24:	f04f 30ff 	mov.w	r0, #4294967295
  40ce28:	e7f5      	b.n	40ce16 <__mcmp+0x2a>
  40ce2a:	bf00      	nop

0040ce2c <__mdiff>:
  40ce2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ce30:	690b      	ldr	r3, [r1, #16]
  40ce32:	460f      	mov	r7, r1
  40ce34:	6911      	ldr	r1, [r2, #16]
  40ce36:	1a5b      	subs	r3, r3, r1
  40ce38:	2b00      	cmp	r3, #0
  40ce3a:	4690      	mov	r8, r2
  40ce3c:	d117      	bne.n	40ce6e <__mdiff+0x42>
  40ce3e:	0089      	lsls	r1, r1, #2
  40ce40:	f107 0214 	add.w	r2, r7, #20
  40ce44:	f108 0514 	add.w	r5, r8, #20
  40ce48:	1853      	adds	r3, r2, r1
  40ce4a:	4429      	add	r1, r5
  40ce4c:	e001      	b.n	40ce52 <__mdiff+0x26>
  40ce4e:	429a      	cmp	r2, r3
  40ce50:	d25e      	bcs.n	40cf10 <__mdiff+0xe4>
  40ce52:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40ce56:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ce5a:	42a6      	cmp	r6, r4
  40ce5c:	d0f7      	beq.n	40ce4e <__mdiff+0x22>
  40ce5e:	d260      	bcs.n	40cf22 <__mdiff+0xf6>
  40ce60:	463b      	mov	r3, r7
  40ce62:	4614      	mov	r4, r2
  40ce64:	4647      	mov	r7, r8
  40ce66:	f04f 0901 	mov.w	r9, #1
  40ce6a:	4698      	mov	r8, r3
  40ce6c:	e006      	b.n	40ce7c <__mdiff+0x50>
  40ce6e:	db5d      	blt.n	40cf2c <__mdiff+0x100>
  40ce70:	f107 0514 	add.w	r5, r7, #20
  40ce74:	f102 0414 	add.w	r4, r2, #20
  40ce78:	f04f 0900 	mov.w	r9, #0
  40ce7c:	6879      	ldr	r1, [r7, #4]
  40ce7e:	f7ff fd61 	bl	40c944 <_Balloc>
  40ce82:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ce86:	693e      	ldr	r6, [r7, #16]
  40ce88:	f8c0 900c 	str.w	r9, [r0, #12]
  40ce8c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ce90:	46a6      	mov	lr, r4
  40ce92:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40ce96:	f100 0414 	add.w	r4, r0, #20
  40ce9a:	2300      	movs	r3, #0
  40ce9c:	f85e 1b04 	ldr.w	r1, [lr], #4
  40cea0:	f855 8b04 	ldr.w	r8, [r5], #4
  40cea4:	b28a      	uxth	r2, r1
  40cea6:	fa13 f388 	uxtah	r3, r3, r8
  40ceaa:	0c09      	lsrs	r1, r1, #16
  40ceac:	1a9a      	subs	r2, r3, r2
  40ceae:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ceb2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ceb6:	b292      	uxth	r2, r2
  40ceb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40cebc:	45f4      	cmp	ip, lr
  40cebe:	f844 2b04 	str.w	r2, [r4], #4
  40cec2:	ea4f 4323 	mov.w	r3, r3, asr #16
  40cec6:	d8e9      	bhi.n	40ce9c <__mdiff+0x70>
  40cec8:	42af      	cmp	r7, r5
  40ceca:	d917      	bls.n	40cefc <__mdiff+0xd0>
  40cecc:	46a4      	mov	ip, r4
  40cece:	4629      	mov	r1, r5
  40ced0:	f851 eb04 	ldr.w	lr, [r1], #4
  40ced4:	fa13 f28e 	uxtah	r2, r3, lr
  40ced8:	1413      	asrs	r3, r2, #16
  40ceda:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40cede:	b292      	uxth	r2, r2
  40cee0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40cee4:	428f      	cmp	r7, r1
  40cee6:	f84c 2b04 	str.w	r2, [ip], #4
  40ceea:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ceee:	d8ef      	bhi.n	40ced0 <__mdiff+0xa4>
  40cef0:	43ed      	mvns	r5, r5
  40cef2:	443d      	add	r5, r7
  40cef4:	f025 0503 	bic.w	r5, r5, #3
  40cef8:	3504      	adds	r5, #4
  40cefa:	442c      	add	r4, r5
  40cefc:	3c04      	subs	r4, #4
  40cefe:	b922      	cbnz	r2, 40cf0a <__mdiff+0xde>
  40cf00:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40cf04:	3e01      	subs	r6, #1
  40cf06:	2b00      	cmp	r3, #0
  40cf08:	d0fa      	beq.n	40cf00 <__mdiff+0xd4>
  40cf0a:	6106      	str	r6, [r0, #16]
  40cf0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cf10:	2100      	movs	r1, #0
  40cf12:	f7ff fd17 	bl	40c944 <_Balloc>
  40cf16:	2201      	movs	r2, #1
  40cf18:	2300      	movs	r3, #0
  40cf1a:	6102      	str	r2, [r0, #16]
  40cf1c:	6143      	str	r3, [r0, #20]
  40cf1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cf22:	462c      	mov	r4, r5
  40cf24:	f04f 0900 	mov.w	r9, #0
  40cf28:	4615      	mov	r5, r2
  40cf2a:	e7a7      	b.n	40ce7c <__mdiff+0x50>
  40cf2c:	463b      	mov	r3, r7
  40cf2e:	f107 0414 	add.w	r4, r7, #20
  40cf32:	f108 0514 	add.w	r5, r8, #20
  40cf36:	4647      	mov	r7, r8
  40cf38:	f04f 0901 	mov.w	r9, #1
  40cf3c:	4698      	mov	r8, r3
  40cf3e:	e79d      	b.n	40ce7c <__mdiff+0x50>

0040cf40 <__ulp>:
  40cf40:	4b0f      	ldr	r3, [pc, #60]	; (40cf80 <__ulp+0x40>)
  40cf42:	400b      	ands	r3, r1
  40cf44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  40cf48:	2b00      	cmp	r3, #0
  40cf4a:	dd02      	ble.n	40cf52 <__ulp+0x12>
  40cf4c:	2000      	movs	r0, #0
  40cf4e:	4619      	mov	r1, r3
  40cf50:	4770      	bx	lr
  40cf52:	425b      	negs	r3, r3
  40cf54:	151b      	asrs	r3, r3, #20
  40cf56:	2b13      	cmp	r3, #19
  40cf58:	dd0b      	ble.n	40cf72 <__ulp+0x32>
  40cf5a:	3b14      	subs	r3, #20
  40cf5c:	2b1e      	cmp	r3, #30
  40cf5e:	bfdd      	ittte	le
  40cf60:	f1c3 031f 	rsble	r3, r3, #31
  40cf64:	2201      	movle	r2, #1
  40cf66:	fa02 f303 	lslle.w	r3, r2, r3
  40cf6a:	2301      	movgt	r3, #1
  40cf6c:	2100      	movs	r1, #0
  40cf6e:	4618      	mov	r0, r3
  40cf70:	4770      	bx	lr
  40cf72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40cf76:	2000      	movs	r0, #0
  40cf78:	fa42 f103 	asr.w	r1, r2, r3
  40cf7c:	4770      	bx	lr
  40cf7e:	bf00      	nop
  40cf80:	7ff00000 	.word	0x7ff00000

0040cf84 <__b2d>:
  40cf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cf88:	6906      	ldr	r6, [r0, #16]
  40cf8a:	f100 0814 	add.w	r8, r0, #20
  40cf8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
  40cf92:	f856 7c04 	ldr.w	r7, [r6, #-4]
  40cf96:	4638      	mov	r0, r7
  40cf98:	f7ff fd90 	bl	40cabc <__hi0bits>
  40cf9c:	f1c0 0320 	rsb	r3, r0, #32
  40cfa0:	280a      	cmp	r0, #10
  40cfa2:	600b      	str	r3, [r1, #0]
  40cfa4:	f1a6 0304 	sub.w	r3, r6, #4
  40cfa8:	dc1a      	bgt.n	40cfe0 <__b2d+0x5c>
  40cfaa:	4598      	cmp	r8, r3
  40cfac:	bf38      	it	cc
  40cfae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
  40cfb2:	f1c0 020b 	rsb	r2, r0, #11
  40cfb6:	fa27 f102 	lsr.w	r1, r7, r2
  40cfba:	bf38      	it	cc
  40cfbc:	fa23 f202 	lsrcc.w	r2, r3, r2
  40cfc0:	f100 0315 	add.w	r3, r0, #21
  40cfc4:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
  40cfc8:	bf28      	it	cs
  40cfca:	2200      	movcs	r2, #0
  40cfcc:	fa07 f303 	lsl.w	r3, r7, r3
  40cfd0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40cfd4:	ea43 0402 	orr.w	r4, r3, r2
  40cfd8:	4620      	mov	r0, r4
  40cfda:	4629      	mov	r1, r5
  40cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cfe0:	4598      	cmp	r8, r3
  40cfe2:	d220      	bcs.n	40d026 <__b2d+0xa2>
  40cfe4:	f1b0 020b 	subs.w	r2, r0, #11
  40cfe8:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40cfec:	d01e      	beq.n	40d02c <__b2d+0xa8>
  40cfee:	fa07 f002 	lsl.w	r0, r7, r2
  40cff2:	f040 507f 	orr.w	r0, r0, #1069547520	; 0x3fc00000
  40cff6:	f1c2 0720 	rsb	r7, r2, #32
  40cffa:	f1a6 0308 	sub.w	r3, r6, #8
  40cffe:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
  40d002:	fa21 fe07 	lsr.w	lr, r1, r7
  40d006:	4598      	cmp	r8, r3
  40d008:	ea40 050e 	orr.w	r5, r0, lr
  40d00c:	d220      	bcs.n	40d050 <__b2d+0xcc>
  40d00e:	f856 3c0c 	ldr.w	r3, [r6, #-12]
  40d012:	fa01 f002 	lsl.w	r0, r1, r2
  40d016:	fa23 f207 	lsr.w	r2, r3, r7
  40d01a:	4302      	orrs	r2, r0
  40d01c:	4614      	mov	r4, r2
  40d01e:	4620      	mov	r0, r4
  40d020:	4629      	mov	r1, r5
  40d022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d026:	380b      	subs	r0, #11
  40d028:	d109      	bne.n	40d03e <__b2d+0xba>
  40d02a:	4601      	mov	r1, r0
  40d02c:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
  40d030:	460c      	mov	r4, r1
  40d032:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40d036:	4620      	mov	r0, r4
  40d038:	4629      	mov	r1, r5
  40d03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d03e:	fa07 f000 	lsl.w	r0, r7, r0
  40d042:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
  40d046:	2200      	movs	r2, #0
  40d048:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40d04c:	4614      	mov	r4, r2
  40d04e:	e7e6      	b.n	40d01e <__b2d+0x9a>
  40d050:	fa01 f202 	lsl.w	r2, r1, r2
  40d054:	4614      	mov	r4, r2
  40d056:	e7e2      	b.n	40d01e <__b2d+0x9a>

0040d058 <__d2b>:
  40d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d05c:	b082      	sub	sp, #8
  40d05e:	2101      	movs	r1, #1
  40d060:	461c      	mov	r4, r3
  40d062:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40d066:	4615      	mov	r5, r2
  40d068:	9e08      	ldr	r6, [sp, #32]
  40d06a:	f7ff fc6b 	bl	40c944 <_Balloc>
  40d06e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40d072:	4680      	mov	r8, r0
  40d074:	b10f      	cbz	r7, 40d07a <__d2b+0x22>
  40d076:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40d07a:	9401      	str	r4, [sp, #4]
  40d07c:	b31d      	cbz	r5, 40d0c6 <__d2b+0x6e>
  40d07e:	a802      	add	r0, sp, #8
  40d080:	f840 5d08 	str.w	r5, [r0, #-8]!
  40d084:	f7ff fd3a 	bl	40cafc <__lo0bits>
  40d088:	2800      	cmp	r0, #0
  40d08a:	d134      	bne.n	40d0f6 <__d2b+0x9e>
  40d08c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d090:	f8c8 2014 	str.w	r2, [r8, #20]
  40d094:	2b00      	cmp	r3, #0
  40d096:	bf0c      	ite	eq
  40d098:	2101      	moveq	r1, #1
  40d09a:	2102      	movne	r1, #2
  40d09c:	f8c8 3018 	str.w	r3, [r8, #24]
  40d0a0:	f8c8 1010 	str.w	r1, [r8, #16]
  40d0a4:	b9df      	cbnz	r7, 40d0de <__d2b+0x86>
  40d0a6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40d0aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40d0ae:	6030      	str	r0, [r6, #0]
  40d0b0:	6918      	ldr	r0, [r3, #16]
  40d0b2:	f7ff fd03 	bl	40cabc <__hi0bits>
  40d0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d0b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40d0bc:	6018      	str	r0, [r3, #0]
  40d0be:	4640      	mov	r0, r8
  40d0c0:	b002      	add	sp, #8
  40d0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d0c6:	a801      	add	r0, sp, #4
  40d0c8:	f7ff fd18 	bl	40cafc <__lo0bits>
  40d0cc:	9b01      	ldr	r3, [sp, #4]
  40d0ce:	f8c8 3014 	str.w	r3, [r8, #20]
  40d0d2:	2101      	movs	r1, #1
  40d0d4:	3020      	adds	r0, #32
  40d0d6:	f8c8 1010 	str.w	r1, [r8, #16]
  40d0da:	2f00      	cmp	r7, #0
  40d0dc:	d0e3      	beq.n	40d0a6 <__d2b+0x4e>
  40d0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d0e0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40d0e4:	4407      	add	r7, r0
  40d0e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40d0ea:	6037      	str	r7, [r6, #0]
  40d0ec:	6018      	str	r0, [r3, #0]
  40d0ee:	4640      	mov	r0, r8
  40d0f0:	b002      	add	sp, #8
  40d0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d0f6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d0fa:	f1c0 0120 	rsb	r1, r0, #32
  40d0fe:	fa03 f101 	lsl.w	r1, r3, r1
  40d102:	430a      	orrs	r2, r1
  40d104:	40c3      	lsrs	r3, r0
  40d106:	9301      	str	r3, [sp, #4]
  40d108:	f8c8 2014 	str.w	r2, [r8, #20]
  40d10c:	e7c2      	b.n	40d094 <__d2b+0x3c>
  40d10e:	bf00      	nop

0040d110 <__ratio>:
  40d110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d114:	b083      	sub	sp, #12
  40d116:	460e      	mov	r6, r1
  40d118:	4669      	mov	r1, sp
  40d11a:	4607      	mov	r7, r0
  40d11c:	f7ff ff32 	bl	40cf84 <__b2d>
  40d120:	4604      	mov	r4, r0
  40d122:	460d      	mov	r5, r1
  40d124:	4630      	mov	r0, r6
  40d126:	a901      	add	r1, sp, #4
  40d128:	f7ff ff2c 	bl	40cf84 <__b2d>
  40d12c:	4689      	mov	r9, r1
  40d12e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40d132:	693a      	ldr	r2, [r7, #16]
  40d134:	6936      	ldr	r6, [r6, #16]
  40d136:	1ac9      	subs	r1, r1, r3
  40d138:	1b96      	subs	r6, r2, r6
  40d13a:	eb01 1346 	add.w	r3, r1, r6, lsl #5
  40d13e:	2b00      	cmp	r3, #0
  40d140:	4680      	mov	r8, r0
  40d142:	dd0b      	ble.n	40d15c <__ratio+0x4c>
  40d144:	eb05 5103 	add.w	r1, r5, r3, lsl #20
  40d148:	460d      	mov	r5, r1
  40d14a:	4642      	mov	r2, r8
  40d14c:	464b      	mov	r3, r9
  40d14e:	4620      	mov	r0, r4
  40d150:	4629      	mov	r1, r5
  40d152:	f000 ffd1 	bl	40e0f8 <__aeabi_ddiv>
  40d156:	b003      	add	sp, #12
  40d158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d15c:	eba9 5703 	sub.w	r7, r9, r3, lsl #20
  40d160:	46b9      	mov	r9, r7
  40d162:	e7f2      	b.n	40d14a <__ratio+0x3a>

0040d164 <__copybits>:
  40d164:	b470      	push	{r4, r5, r6}
  40d166:	6914      	ldr	r4, [r2, #16]
  40d168:	f102 0314 	add.w	r3, r2, #20
  40d16c:	3901      	subs	r1, #1
  40d16e:	114e      	asrs	r6, r1, #5
  40d170:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  40d174:	3601      	adds	r6, #1
  40d176:	42a3      	cmp	r3, r4
  40d178:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  40d17c:	d20c      	bcs.n	40d198 <__copybits+0x34>
  40d17e:	1f01      	subs	r1, r0, #4
  40d180:	f853 5b04 	ldr.w	r5, [r3], #4
  40d184:	f841 5f04 	str.w	r5, [r1, #4]!
  40d188:	429c      	cmp	r4, r3
  40d18a:	d8f9      	bhi.n	40d180 <__copybits+0x1c>
  40d18c:	1aa3      	subs	r3, r4, r2
  40d18e:	3b15      	subs	r3, #21
  40d190:	f023 0303 	bic.w	r3, r3, #3
  40d194:	3304      	adds	r3, #4
  40d196:	4418      	add	r0, r3
  40d198:	4286      	cmp	r6, r0
  40d19a:	d904      	bls.n	40d1a6 <__copybits+0x42>
  40d19c:	2300      	movs	r3, #0
  40d19e:	f840 3b04 	str.w	r3, [r0], #4
  40d1a2:	4286      	cmp	r6, r0
  40d1a4:	d8fb      	bhi.n	40d19e <__copybits+0x3a>
  40d1a6:	bc70      	pop	{r4, r5, r6}
  40d1a8:	4770      	bx	lr
  40d1aa:	bf00      	nop

0040d1ac <__any_on>:
  40d1ac:	6903      	ldr	r3, [r0, #16]
  40d1ae:	114a      	asrs	r2, r1, #5
  40d1b0:	4293      	cmp	r3, r2
  40d1b2:	b410      	push	{r4}
  40d1b4:	f100 0414 	add.w	r4, r0, #20
  40d1b8:	da0f      	bge.n	40d1da <__any_on+0x2e>
  40d1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40d1be:	429c      	cmp	r4, r3
  40d1c0:	d21f      	bcs.n	40d202 <__any_on+0x56>
  40d1c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
  40d1c6:	3b04      	subs	r3, #4
  40d1c8:	b118      	cbz	r0, 40d1d2 <__any_on+0x26>
  40d1ca:	e014      	b.n	40d1f6 <__any_on+0x4a>
  40d1cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40d1d0:	b98a      	cbnz	r2, 40d1f6 <__any_on+0x4a>
  40d1d2:	429c      	cmp	r4, r3
  40d1d4:	d3fa      	bcc.n	40d1cc <__any_on+0x20>
  40d1d6:	bc10      	pop	{r4}
  40d1d8:	4770      	bx	lr
  40d1da:	dd0f      	ble.n	40d1fc <__any_on+0x50>
  40d1dc:	f011 011f 	ands.w	r1, r1, #31
  40d1e0:	d00c      	beq.n	40d1fc <__any_on+0x50>
  40d1e2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  40d1e6:	fa20 f301 	lsr.w	r3, r0, r1
  40d1ea:	fa03 f101 	lsl.w	r1, r3, r1
  40d1ee:	4288      	cmp	r0, r1
  40d1f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  40d1f4:	d0e3      	beq.n	40d1be <__any_on+0x12>
  40d1f6:	2001      	movs	r0, #1
  40d1f8:	bc10      	pop	{r4}
  40d1fa:	4770      	bx	lr
  40d1fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  40d200:	e7dd      	b.n	40d1be <__any_on+0x12>
  40d202:	2000      	movs	r0, #0
  40d204:	e7e7      	b.n	40d1d6 <__any_on+0x2a>
  40d206:	bf00      	nop

0040d208 <_realloc_r>:
  40d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d20c:	4617      	mov	r7, r2
  40d20e:	b083      	sub	sp, #12
  40d210:	2900      	cmp	r1, #0
  40d212:	f000 80c1 	beq.w	40d398 <_realloc_r+0x190>
  40d216:	460e      	mov	r6, r1
  40d218:	4681      	mov	r9, r0
  40d21a:	f107 050b 	add.w	r5, r7, #11
  40d21e:	f7ff fb8d 	bl	40c93c <__malloc_lock>
  40d222:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40d226:	2d16      	cmp	r5, #22
  40d228:	f02e 0403 	bic.w	r4, lr, #3
  40d22c:	f1a6 0808 	sub.w	r8, r6, #8
  40d230:	d840      	bhi.n	40d2b4 <_realloc_r+0xac>
  40d232:	2210      	movs	r2, #16
  40d234:	4615      	mov	r5, r2
  40d236:	42af      	cmp	r7, r5
  40d238:	d841      	bhi.n	40d2be <_realloc_r+0xb6>
  40d23a:	4294      	cmp	r4, r2
  40d23c:	da75      	bge.n	40d32a <_realloc_r+0x122>
  40d23e:	4bc9      	ldr	r3, [pc, #804]	; (40d564 <_realloc_r+0x35c>)
  40d240:	6899      	ldr	r1, [r3, #8]
  40d242:	eb08 0004 	add.w	r0, r8, r4
  40d246:	4288      	cmp	r0, r1
  40d248:	6841      	ldr	r1, [r0, #4]
  40d24a:	f000 80d9 	beq.w	40d400 <_realloc_r+0x1f8>
  40d24e:	f021 0301 	bic.w	r3, r1, #1
  40d252:	4403      	add	r3, r0
  40d254:	685b      	ldr	r3, [r3, #4]
  40d256:	07db      	lsls	r3, r3, #31
  40d258:	d57d      	bpl.n	40d356 <_realloc_r+0x14e>
  40d25a:	f01e 0f01 	tst.w	lr, #1
  40d25e:	d035      	beq.n	40d2cc <_realloc_r+0xc4>
  40d260:	4639      	mov	r1, r7
  40d262:	4648      	mov	r0, r9
  40d264:	f7fe ffcc 	bl	40c200 <_malloc_r>
  40d268:	4607      	mov	r7, r0
  40d26a:	b1e0      	cbz	r0, 40d2a6 <_realloc_r+0x9e>
  40d26c:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40d270:	f023 0301 	bic.w	r3, r3, #1
  40d274:	4443      	add	r3, r8
  40d276:	f1a0 0208 	sub.w	r2, r0, #8
  40d27a:	429a      	cmp	r2, r3
  40d27c:	f000 8144 	beq.w	40d508 <_realloc_r+0x300>
  40d280:	1f22      	subs	r2, r4, #4
  40d282:	2a24      	cmp	r2, #36	; 0x24
  40d284:	f200 8131 	bhi.w	40d4ea <_realloc_r+0x2e2>
  40d288:	2a13      	cmp	r2, #19
  40d28a:	f200 8104 	bhi.w	40d496 <_realloc_r+0x28e>
  40d28e:	4603      	mov	r3, r0
  40d290:	4632      	mov	r2, r6
  40d292:	6811      	ldr	r1, [r2, #0]
  40d294:	6019      	str	r1, [r3, #0]
  40d296:	6851      	ldr	r1, [r2, #4]
  40d298:	6059      	str	r1, [r3, #4]
  40d29a:	6892      	ldr	r2, [r2, #8]
  40d29c:	609a      	str	r2, [r3, #8]
  40d29e:	4631      	mov	r1, r6
  40d2a0:	4648      	mov	r0, r9
  40d2a2:	f7fe f8db 	bl	40b45c <_free_r>
  40d2a6:	4648      	mov	r0, r9
  40d2a8:	f7ff fb4a 	bl	40c940 <__malloc_unlock>
  40d2ac:	4638      	mov	r0, r7
  40d2ae:	b003      	add	sp, #12
  40d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2b4:	f025 0507 	bic.w	r5, r5, #7
  40d2b8:	2d00      	cmp	r5, #0
  40d2ba:	462a      	mov	r2, r5
  40d2bc:	dabb      	bge.n	40d236 <_realloc_r+0x2e>
  40d2be:	230c      	movs	r3, #12
  40d2c0:	2000      	movs	r0, #0
  40d2c2:	f8c9 3000 	str.w	r3, [r9]
  40d2c6:	b003      	add	sp, #12
  40d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2cc:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40d2d0:	ebc3 0a08 	rsb	sl, r3, r8
  40d2d4:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d2d8:	f023 0c03 	bic.w	ip, r3, #3
  40d2dc:	eb04 030c 	add.w	r3, r4, ip
  40d2e0:	4293      	cmp	r3, r2
  40d2e2:	dbbd      	blt.n	40d260 <_realloc_r+0x58>
  40d2e4:	4657      	mov	r7, sl
  40d2e6:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d2ea:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40d2ee:	1f22      	subs	r2, r4, #4
  40d2f0:	2a24      	cmp	r2, #36	; 0x24
  40d2f2:	60c1      	str	r1, [r0, #12]
  40d2f4:	6088      	str	r0, [r1, #8]
  40d2f6:	f200 8117 	bhi.w	40d528 <_realloc_r+0x320>
  40d2fa:	2a13      	cmp	r2, #19
  40d2fc:	f240 8112 	bls.w	40d524 <_realloc_r+0x31c>
  40d300:	6831      	ldr	r1, [r6, #0]
  40d302:	f8ca 1008 	str.w	r1, [sl, #8]
  40d306:	6871      	ldr	r1, [r6, #4]
  40d308:	f8ca 100c 	str.w	r1, [sl, #12]
  40d30c:	2a1b      	cmp	r2, #27
  40d30e:	f200 812b 	bhi.w	40d568 <_realloc_r+0x360>
  40d312:	3608      	adds	r6, #8
  40d314:	f10a 0210 	add.w	r2, sl, #16
  40d318:	6831      	ldr	r1, [r6, #0]
  40d31a:	6011      	str	r1, [r2, #0]
  40d31c:	6871      	ldr	r1, [r6, #4]
  40d31e:	6051      	str	r1, [r2, #4]
  40d320:	68b1      	ldr	r1, [r6, #8]
  40d322:	6091      	str	r1, [r2, #8]
  40d324:	463e      	mov	r6, r7
  40d326:	461c      	mov	r4, r3
  40d328:	46d0      	mov	r8, sl
  40d32a:	1b63      	subs	r3, r4, r5
  40d32c:	2b0f      	cmp	r3, #15
  40d32e:	d81d      	bhi.n	40d36c <_realloc_r+0x164>
  40d330:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40d334:	f003 0301 	and.w	r3, r3, #1
  40d338:	4323      	orrs	r3, r4
  40d33a:	4444      	add	r4, r8
  40d33c:	f8c8 3004 	str.w	r3, [r8, #4]
  40d340:	6863      	ldr	r3, [r4, #4]
  40d342:	f043 0301 	orr.w	r3, r3, #1
  40d346:	6063      	str	r3, [r4, #4]
  40d348:	4648      	mov	r0, r9
  40d34a:	f7ff faf9 	bl	40c940 <__malloc_unlock>
  40d34e:	4630      	mov	r0, r6
  40d350:	b003      	add	sp, #12
  40d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d356:	f021 0103 	bic.w	r1, r1, #3
  40d35a:	4421      	add	r1, r4
  40d35c:	4291      	cmp	r1, r2
  40d35e:	db21      	blt.n	40d3a4 <_realloc_r+0x19c>
  40d360:	68c3      	ldr	r3, [r0, #12]
  40d362:	6882      	ldr	r2, [r0, #8]
  40d364:	460c      	mov	r4, r1
  40d366:	60d3      	str	r3, [r2, #12]
  40d368:	609a      	str	r2, [r3, #8]
  40d36a:	e7de      	b.n	40d32a <_realloc_r+0x122>
  40d36c:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40d370:	eb08 0105 	add.w	r1, r8, r5
  40d374:	f002 0201 	and.w	r2, r2, #1
  40d378:	4315      	orrs	r5, r2
  40d37a:	f043 0201 	orr.w	r2, r3, #1
  40d37e:	440b      	add	r3, r1
  40d380:	f8c8 5004 	str.w	r5, [r8, #4]
  40d384:	604a      	str	r2, [r1, #4]
  40d386:	685a      	ldr	r2, [r3, #4]
  40d388:	f042 0201 	orr.w	r2, r2, #1
  40d38c:	3108      	adds	r1, #8
  40d38e:	605a      	str	r2, [r3, #4]
  40d390:	4648      	mov	r0, r9
  40d392:	f7fe f863 	bl	40b45c <_free_r>
  40d396:	e7d7      	b.n	40d348 <_realloc_r+0x140>
  40d398:	4611      	mov	r1, r2
  40d39a:	b003      	add	sp, #12
  40d39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d3a0:	f7fe bf2e 	b.w	40c200 <_malloc_r>
  40d3a4:	f01e 0f01 	tst.w	lr, #1
  40d3a8:	f47f af5a 	bne.w	40d260 <_realloc_r+0x58>
  40d3ac:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40d3b0:	ebc3 0a08 	rsb	sl, r3, r8
  40d3b4:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d3b8:	f023 0c03 	bic.w	ip, r3, #3
  40d3bc:	eb01 0e0c 	add.w	lr, r1, ip
  40d3c0:	4596      	cmp	lr, r2
  40d3c2:	db8b      	blt.n	40d2dc <_realloc_r+0xd4>
  40d3c4:	68c3      	ldr	r3, [r0, #12]
  40d3c6:	6882      	ldr	r2, [r0, #8]
  40d3c8:	4657      	mov	r7, sl
  40d3ca:	60d3      	str	r3, [r2, #12]
  40d3cc:	609a      	str	r2, [r3, #8]
  40d3ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40d3d2:	f8da 300c 	ldr.w	r3, [sl, #12]
  40d3d6:	60cb      	str	r3, [r1, #12]
  40d3d8:	1f22      	subs	r2, r4, #4
  40d3da:	2a24      	cmp	r2, #36	; 0x24
  40d3dc:	6099      	str	r1, [r3, #8]
  40d3de:	f200 8099 	bhi.w	40d514 <_realloc_r+0x30c>
  40d3e2:	2a13      	cmp	r2, #19
  40d3e4:	d962      	bls.n	40d4ac <_realloc_r+0x2a4>
  40d3e6:	6833      	ldr	r3, [r6, #0]
  40d3e8:	f8ca 3008 	str.w	r3, [sl, #8]
  40d3ec:	6873      	ldr	r3, [r6, #4]
  40d3ee:	f8ca 300c 	str.w	r3, [sl, #12]
  40d3f2:	2a1b      	cmp	r2, #27
  40d3f4:	f200 80a0 	bhi.w	40d538 <_realloc_r+0x330>
  40d3f8:	3608      	adds	r6, #8
  40d3fa:	f10a 0310 	add.w	r3, sl, #16
  40d3fe:	e056      	b.n	40d4ae <_realloc_r+0x2a6>
  40d400:	f021 0b03 	bic.w	fp, r1, #3
  40d404:	44a3      	add	fp, r4
  40d406:	f105 0010 	add.w	r0, r5, #16
  40d40a:	4583      	cmp	fp, r0
  40d40c:	da59      	bge.n	40d4c2 <_realloc_r+0x2ba>
  40d40e:	f01e 0f01 	tst.w	lr, #1
  40d412:	f47f af25 	bne.w	40d260 <_realloc_r+0x58>
  40d416:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40d41a:	ebc1 0a08 	rsb	sl, r1, r8
  40d41e:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d422:	f021 0c03 	bic.w	ip, r1, #3
  40d426:	44e3      	add	fp, ip
  40d428:	4558      	cmp	r0, fp
  40d42a:	f73f af57 	bgt.w	40d2dc <_realloc_r+0xd4>
  40d42e:	4657      	mov	r7, sl
  40d430:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d434:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40d438:	1f22      	subs	r2, r4, #4
  40d43a:	2a24      	cmp	r2, #36	; 0x24
  40d43c:	60c1      	str	r1, [r0, #12]
  40d43e:	6088      	str	r0, [r1, #8]
  40d440:	f200 80b4 	bhi.w	40d5ac <_realloc_r+0x3a4>
  40d444:	2a13      	cmp	r2, #19
  40d446:	f240 80a5 	bls.w	40d594 <_realloc_r+0x38c>
  40d44a:	6831      	ldr	r1, [r6, #0]
  40d44c:	f8ca 1008 	str.w	r1, [sl, #8]
  40d450:	6871      	ldr	r1, [r6, #4]
  40d452:	f8ca 100c 	str.w	r1, [sl, #12]
  40d456:	2a1b      	cmp	r2, #27
  40d458:	f200 80af 	bhi.w	40d5ba <_realloc_r+0x3b2>
  40d45c:	3608      	adds	r6, #8
  40d45e:	f10a 0210 	add.w	r2, sl, #16
  40d462:	6831      	ldr	r1, [r6, #0]
  40d464:	6011      	str	r1, [r2, #0]
  40d466:	6871      	ldr	r1, [r6, #4]
  40d468:	6051      	str	r1, [r2, #4]
  40d46a:	68b1      	ldr	r1, [r6, #8]
  40d46c:	6091      	str	r1, [r2, #8]
  40d46e:	eb0a 0105 	add.w	r1, sl, r5
  40d472:	ebc5 020b 	rsb	r2, r5, fp
  40d476:	f042 0201 	orr.w	r2, r2, #1
  40d47a:	6099      	str	r1, [r3, #8]
  40d47c:	604a      	str	r2, [r1, #4]
  40d47e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d482:	f003 0301 	and.w	r3, r3, #1
  40d486:	431d      	orrs	r5, r3
  40d488:	4648      	mov	r0, r9
  40d48a:	f8ca 5004 	str.w	r5, [sl, #4]
  40d48e:	f7ff fa57 	bl	40c940 <__malloc_unlock>
  40d492:	4638      	mov	r0, r7
  40d494:	e75c      	b.n	40d350 <_realloc_r+0x148>
  40d496:	6833      	ldr	r3, [r6, #0]
  40d498:	6003      	str	r3, [r0, #0]
  40d49a:	6873      	ldr	r3, [r6, #4]
  40d49c:	6043      	str	r3, [r0, #4]
  40d49e:	2a1b      	cmp	r2, #27
  40d4a0:	d827      	bhi.n	40d4f2 <_realloc_r+0x2ea>
  40d4a2:	f100 0308 	add.w	r3, r0, #8
  40d4a6:	f106 0208 	add.w	r2, r6, #8
  40d4aa:	e6f2      	b.n	40d292 <_realloc_r+0x8a>
  40d4ac:	463b      	mov	r3, r7
  40d4ae:	6832      	ldr	r2, [r6, #0]
  40d4b0:	601a      	str	r2, [r3, #0]
  40d4b2:	6872      	ldr	r2, [r6, #4]
  40d4b4:	605a      	str	r2, [r3, #4]
  40d4b6:	68b2      	ldr	r2, [r6, #8]
  40d4b8:	609a      	str	r2, [r3, #8]
  40d4ba:	463e      	mov	r6, r7
  40d4bc:	4674      	mov	r4, lr
  40d4be:	46d0      	mov	r8, sl
  40d4c0:	e733      	b.n	40d32a <_realloc_r+0x122>
  40d4c2:	eb08 0105 	add.w	r1, r8, r5
  40d4c6:	ebc5 0b0b 	rsb	fp, r5, fp
  40d4ca:	f04b 0201 	orr.w	r2, fp, #1
  40d4ce:	6099      	str	r1, [r3, #8]
  40d4d0:	604a      	str	r2, [r1, #4]
  40d4d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40d4d6:	f003 0301 	and.w	r3, r3, #1
  40d4da:	431d      	orrs	r5, r3
  40d4dc:	4648      	mov	r0, r9
  40d4de:	f846 5c04 	str.w	r5, [r6, #-4]
  40d4e2:	f7ff fa2d 	bl	40c940 <__malloc_unlock>
  40d4e6:	4630      	mov	r0, r6
  40d4e8:	e732      	b.n	40d350 <_realloc_r+0x148>
  40d4ea:	4631      	mov	r1, r6
  40d4ec:	f7ff f9c2 	bl	40c874 <memmove>
  40d4f0:	e6d5      	b.n	40d29e <_realloc_r+0x96>
  40d4f2:	68b3      	ldr	r3, [r6, #8]
  40d4f4:	6083      	str	r3, [r0, #8]
  40d4f6:	68f3      	ldr	r3, [r6, #12]
  40d4f8:	60c3      	str	r3, [r0, #12]
  40d4fa:	2a24      	cmp	r2, #36	; 0x24
  40d4fc:	d028      	beq.n	40d550 <_realloc_r+0x348>
  40d4fe:	f100 0310 	add.w	r3, r0, #16
  40d502:	f106 0210 	add.w	r2, r6, #16
  40d506:	e6c4      	b.n	40d292 <_realloc_r+0x8a>
  40d508:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40d50c:	f023 0303 	bic.w	r3, r3, #3
  40d510:	441c      	add	r4, r3
  40d512:	e70a      	b.n	40d32a <_realloc_r+0x122>
  40d514:	4631      	mov	r1, r6
  40d516:	4638      	mov	r0, r7
  40d518:	4674      	mov	r4, lr
  40d51a:	46d0      	mov	r8, sl
  40d51c:	f7ff f9aa 	bl	40c874 <memmove>
  40d520:	463e      	mov	r6, r7
  40d522:	e702      	b.n	40d32a <_realloc_r+0x122>
  40d524:	463a      	mov	r2, r7
  40d526:	e6f7      	b.n	40d318 <_realloc_r+0x110>
  40d528:	4631      	mov	r1, r6
  40d52a:	4638      	mov	r0, r7
  40d52c:	461c      	mov	r4, r3
  40d52e:	46d0      	mov	r8, sl
  40d530:	f7ff f9a0 	bl	40c874 <memmove>
  40d534:	463e      	mov	r6, r7
  40d536:	e6f8      	b.n	40d32a <_realloc_r+0x122>
  40d538:	68b3      	ldr	r3, [r6, #8]
  40d53a:	f8ca 3010 	str.w	r3, [sl, #16]
  40d53e:	68f3      	ldr	r3, [r6, #12]
  40d540:	f8ca 3014 	str.w	r3, [sl, #20]
  40d544:	2a24      	cmp	r2, #36	; 0x24
  40d546:	d01b      	beq.n	40d580 <_realloc_r+0x378>
  40d548:	3610      	adds	r6, #16
  40d54a:	f10a 0318 	add.w	r3, sl, #24
  40d54e:	e7ae      	b.n	40d4ae <_realloc_r+0x2a6>
  40d550:	6933      	ldr	r3, [r6, #16]
  40d552:	6103      	str	r3, [r0, #16]
  40d554:	6973      	ldr	r3, [r6, #20]
  40d556:	6143      	str	r3, [r0, #20]
  40d558:	f106 0218 	add.w	r2, r6, #24
  40d55c:	f100 0318 	add.w	r3, r0, #24
  40d560:	e697      	b.n	40d292 <_realloc_r+0x8a>
  40d562:	bf00      	nop
  40d564:	200004bc 	.word	0x200004bc
  40d568:	68b1      	ldr	r1, [r6, #8]
  40d56a:	f8ca 1010 	str.w	r1, [sl, #16]
  40d56e:	68f1      	ldr	r1, [r6, #12]
  40d570:	f8ca 1014 	str.w	r1, [sl, #20]
  40d574:	2a24      	cmp	r2, #36	; 0x24
  40d576:	d00f      	beq.n	40d598 <_realloc_r+0x390>
  40d578:	3610      	adds	r6, #16
  40d57a:	f10a 0218 	add.w	r2, sl, #24
  40d57e:	e6cb      	b.n	40d318 <_realloc_r+0x110>
  40d580:	6933      	ldr	r3, [r6, #16]
  40d582:	f8ca 3018 	str.w	r3, [sl, #24]
  40d586:	6973      	ldr	r3, [r6, #20]
  40d588:	f8ca 301c 	str.w	r3, [sl, #28]
  40d58c:	3618      	adds	r6, #24
  40d58e:	f10a 0320 	add.w	r3, sl, #32
  40d592:	e78c      	b.n	40d4ae <_realloc_r+0x2a6>
  40d594:	463a      	mov	r2, r7
  40d596:	e764      	b.n	40d462 <_realloc_r+0x25a>
  40d598:	6932      	ldr	r2, [r6, #16]
  40d59a:	f8ca 2018 	str.w	r2, [sl, #24]
  40d59e:	6972      	ldr	r2, [r6, #20]
  40d5a0:	f8ca 201c 	str.w	r2, [sl, #28]
  40d5a4:	3618      	adds	r6, #24
  40d5a6:	f10a 0220 	add.w	r2, sl, #32
  40d5aa:	e6b5      	b.n	40d318 <_realloc_r+0x110>
  40d5ac:	4631      	mov	r1, r6
  40d5ae:	4638      	mov	r0, r7
  40d5b0:	9301      	str	r3, [sp, #4]
  40d5b2:	f7ff f95f 	bl	40c874 <memmove>
  40d5b6:	9b01      	ldr	r3, [sp, #4]
  40d5b8:	e759      	b.n	40d46e <_realloc_r+0x266>
  40d5ba:	68b1      	ldr	r1, [r6, #8]
  40d5bc:	f8ca 1010 	str.w	r1, [sl, #16]
  40d5c0:	68f1      	ldr	r1, [r6, #12]
  40d5c2:	f8ca 1014 	str.w	r1, [sl, #20]
  40d5c6:	2a24      	cmp	r2, #36	; 0x24
  40d5c8:	d003      	beq.n	40d5d2 <_realloc_r+0x3ca>
  40d5ca:	3610      	adds	r6, #16
  40d5cc:	f10a 0218 	add.w	r2, sl, #24
  40d5d0:	e747      	b.n	40d462 <_realloc_r+0x25a>
  40d5d2:	6932      	ldr	r2, [r6, #16]
  40d5d4:	f8ca 2018 	str.w	r2, [sl, #24]
  40d5d8:	6972      	ldr	r2, [r6, #20]
  40d5da:	f8ca 201c 	str.w	r2, [sl, #28]
  40d5de:	3618      	adds	r6, #24
  40d5e0:	f10a 0220 	add.w	r2, sl, #32
  40d5e4:	e73d      	b.n	40d462 <_realloc_r+0x25a>
  40d5e6:	bf00      	nop

0040d5e8 <_sbrk_r>:
  40d5e8:	b538      	push	{r3, r4, r5, lr}
  40d5ea:	4c07      	ldr	r4, [pc, #28]	; (40d608 <_sbrk_r+0x20>)
  40d5ec:	2300      	movs	r3, #0
  40d5ee:	4605      	mov	r5, r0
  40d5f0:	4608      	mov	r0, r1
  40d5f2:	6023      	str	r3, [r4, #0]
  40d5f4:	f7f6 fef2 	bl	4043dc <_sbrk>
  40d5f8:	1c43      	adds	r3, r0, #1
  40d5fa:	d000      	beq.n	40d5fe <_sbrk_r+0x16>
  40d5fc:	bd38      	pop	{r3, r4, r5, pc}
  40d5fe:	6823      	ldr	r3, [r4, #0]
  40d600:	2b00      	cmp	r3, #0
  40d602:	d0fb      	beq.n	40d5fc <_sbrk_r+0x14>
  40d604:	602b      	str	r3, [r5, #0]
  40d606:	bd38      	pop	{r3, r4, r5, pc}
  40d608:	2000ae18 	.word	0x2000ae18

0040d60c <nanf>:
  40d60c:	4800      	ldr	r0, [pc, #0]	; (40d610 <nanf+0x4>)
  40d60e:	4770      	bx	lr
  40d610:	7fc00000 	.word	0x7fc00000

0040d614 <__sread>:
  40d614:	b510      	push	{r4, lr}
  40d616:	460c      	mov	r4, r1
  40d618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d61c:	f000 fa74 	bl	40db08 <_read_r>
  40d620:	2800      	cmp	r0, #0
  40d622:	db03      	blt.n	40d62c <__sread+0x18>
  40d624:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d626:	4403      	add	r3, r0
  40d628:	6523      	str	r3, [r4, #80]	; 0x50
  40d62a:	bd10      	pop	{r4, pc}
  40d62c:	89a3      	ldrh	r3, [r4, #12]
  40d62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40d632:	81a3      	strh	r3, [r4, #12]
  40d634:	bd10      	pop	{r4, pc}
  40d636:	bf00      	nop

0040d638 <__swrite>:
  40d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d63c:	4616      	mov	r6, r2
  40d63e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40d642:	461f      	mov	r7, r3
  40d644:	05d3      	lsls	r3, r2, #23
  40d646:	460c      	mov	r4, r1
  40d648:	4605      	mov	r5, r0
  40d64a:	d507      	bpl.n	40d65c <__swrite+0x24>
  40d64c:	2200      	movs	r2, #0
  40d64e:	2302      	movs	r3, #2
  40d650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d654:	f000 fa42 	bl	40dadc <_lseek_r>
  40d658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40d664:	81a2      	strh	r2, [r4, #12]
  40d666:	463b      	mov	r3, r7
  40d668:	4632      	mov	r2, r6
  40d66a:	4628      	mov	r0, r5
  40d66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d670:	f000 b922 	b.w	40d8b8 <_write_r>

0040d674 <__sseek>:
  40d674:	b510      	push	{r4, lr}
  40d676:	460c      	mov	r4, r1
  40d678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d67c:	f000 fa2e 	bl	40dadc <_lseek_r>
  40d680:	89a3      	ldrh	r3, [r4, #12]
  40d682:	1c42      	adds	r2, r0, #1
  40d684:	bf0e      	itee	eq
  40d686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40d68a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40d68e:	6520      	strne	r0, [r4, #80]	; 0x50
  40d690:	81a3      	strh	r3, [r4, #12]
  40d692:	bd10      	pop	{r4, pc}

0040d694 <__sclose>:
  40d694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d698:	f000 b9a6 	b.w	40d9e8 <_close_r>

0040d69c <__ssprint_r>:
  40d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d6a0:	6893      	ldr	r3, [r2, #8]
  40d6a2:	b083      	sub	sp, #12
  40d6a4:	4690      	mov	r8, r2
  40d6a6:	2b00      	cmp	r3, #0
  40d6a8:	d072      	beq.n	40d790 <__ssprint_r+0xf4>
  40d6aa:	4683      	mov	fp, r0
  40d6ac:	f04f 0900 	mov.w	r9, #0
  40d6b0:	6816      	ldr	r6, [r2, #0]
  40d6b2:	6808      	ldr	r0, [r1, #0]
  40d6b4:	688b      	ldr	r3, [r1, #8]
  40d6b6:	460d      	mov	r5, r1
  40d6b8:	464c      	mov	r4, r9
  40d6ba:	2c00      	cmp	r4, #0
  40d6bc:	d045      	beq.n	40d74a <__ssprint_r+0xae>
  40d6be:	429c      	cmp	r4, r3
  40d6c0:	461f      	mov	r7, r3
  40d6c2:	469a      	mov	sl, r3
  40d6c4:	d346      	bcc.n	40d754 <__ssprint_r+0xb8>
  40d6c6:	89ab      	ldrh	r3, [r5, #12]
  40d6c8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40d6cc:	d02d      	beq.n	40d72a <__ssprint_r+0x8e>
  40d6ce:	696f      	ldr	r7, [r5, #20]
  40d6d0:	6929      	ldr	r1, [r5, #16]
  40d6d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40d6d6:	ebc1 0a00 	rsb	sl, r1, r0
  40d6da:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40d6de:	1c60      	adds	r0, r4, #1
  40d6e0:	107f      	asrs	r7, r7, #1
  40d6e2:	4450      	add	r0, sl
  40d6e4:	42b8      	cmp	r0, r7
  40d6e6:	463a      	mov	r2, r7
  40d6e8:	bf84      	itt	hi
  40d6ea:	4607      	movhi	r7, r0
  40d6ec:	463a      	movhi	r2, r7
  40d6ee:	055b      	lsls	r3, r3, #21
  40d6f0:	d533      	bpl.n	40d75a <__ssprint_r+0xbe>
  40d6f2:	4611      	mov	r1, r2
  40d6f4:	4658      	mov	r0, fp
  40d6f6:	f7fe fd83 	bl	40c200 <_malloc_r>
  40d6fa:	2800      	cmp	r0, #0
  40d6fc:	d037      	beq.n	40d76e <__ssprint_r+0xd2>
  40d6fe:	4652      	mov	r2, sl
  40d700:	6929      	ldr	r1, [r5, #16]
  40d702:	9001      	str	r0, [sp, #4]
  40d704:	f7f8 fba4 	bl	405e50 <memcpy>
  40d708:	89aa      	ldrh	r2, [r5, #12]
  40d70a:	9b01      	ldr	r3, [sp, #4]
  40d70c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d714:	81aa      	strh	r2, [r5, #12]
  40d716:	ebca 0207 	rsb	r2, sl, r7
  40d71a:	eb03 000a 	add.w	r0, r3, sl
  40d71e:	616f      	str	r7, [r5, #20]
  40d720:	612b      	str	r3, [r5, #16]
  40d722:	6028      	str	r0, [r5, #0]
  40d724:	60aa      	str	r2, [r5, #8]
  40d726:	4627      	mov	r7, r4
  40d728:	46a2      	mov	sl, r4
  40d72a:	4652      	mov	r2, sl
  40d72c:	4649      	mov	r1, r9
  40d72e:	f7ff f8a1 	bl	40c874 <memmove>
  40d732:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40d736:	68ab      	ldr	r3, [r5, #8]
  40d738:	6828      	ldr	r0, [r5, #0]
  40d73a:	1bdb      	subs	r3, r3, r7
  40d73c:	4450      	add	r0, sl
  40d73e:	1b14      	subs	r4, r2, r4
  40d740:	60ab      	str	r3, [r5, #8]
  40d742:	6028      	str	r0, [r5, #0]
  40d744:	f8c8 4008 	str.w	r4, [r8, #8]
  40d748:	b314      	cbz	r4, 40d790 <__ssprint_r+0xf4>
  40d74a:	f8d6 9000 	ldr.w	r9, [r6]
  40d74e:	6874      	ldr	r4, [r6, #4]
  40d750:	3608      	adds	r6, #8
  40d752:	e7b2      	b.n	40d6ba <__ssprint_r+0x1e>
  40d754:	4627      	mov	r7, r4
  40d756:	46a2      	mov	sl, r4
  40d758:	e7e7      	b.n	40d72a <__ssprint_r+0x8e>
  40d75a:	4658      	mov	r0, fp
  40d75c:	f7ff fd54 	bl	40d208 <_realloc_r>
  40d760:	4603      	mov	r3, r0
  40d762:	2800      	cmp	r0, #0
  40d764:	d1d7      	bne.n	40d716 <__ssprint_r+0x7a>
  40d766:	6929      	ldr	r1, [r5, #16]
  40d768:	4658      	mov	r0, fp
  40d76a:	f7fd fe77 	bl	40b45c <_free_r>
  40d76e:	230c      	movs	r3, #12
  40d770:	f8cb 3000 	str.w	r3, [fp]
  40d774:	89ab      	ldrh	r3, [r5, #12]
  40d776:	2200      	movs	r2, #0
  40d778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d77c:	f04f 30ff 	mov.w	r0, #4294967295
  40d780:	81ab      	strh	r3, [r5, #12]
  40d782:	f8c8 2008 	str.w	r2, [r8, #8]
  40d786:	f8c8 2004 	str.w	r2, [r8, #4]
  40d78a:	b003      	add	sp, #12
  40d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d790:	2000      	movs	r0, #0
  40d792:	f8c8 0004 	str.w	r0, [r8, #4]
  40d796:	b003      	add	sp, #12
  40d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d79c <__swbuf_r>:
  40d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d79e:	460e      	mov	r6, r1
  40d7a0:	4614      	mov	r4, r2
  40d7a2:	4607      	mov	r7, r0
  40d7a4:	b110      	cbz	r0, 40d7ac <__swbuf_r+0x10>
  40d7a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d7a8:	2b00      	cmp	r3, #0
  40d7aa:	d04a      	beq.n	40d842 <__swbuf_r+0xa6>
  40d7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d7b0:	69a3      	ldr	r3, [r4, #24]
  40d7b2:	60a3      	str	r3, [r4, #8]
  40d7b4:	b291      	uxth	r1, r2
  40d7b6:	0708      	lsls	r0, r1, #28
  40d7b8:	d538      	bpl.n	40d82c <__swbuf_r+0x90>
  40d7ba:	6923      	ldr	r3, [r4, #16]
  40d7bc:	2b00      	cmp	r3, #0
  40d7be:	d035      	beq.n	40d82c <__swbuf_r+0x90>
  40d7c0:	0489      	lsls	r1, r1, #18
  40d7c2:	b2f5      	uxtb	r5, r6
  40d7c4:	d515      	bpl.n	40d7f2 <__swbuf_r+0x56>
  40d7c6:	6822      	ldr	r2, [r4, #0]
  40d7c8:	6961      	ldr	r1, [r4, #20]
  40d7ca:	1ad3      	subs	r3, r2, r3
  40d7cc:	428b      	cmp	r3, r1
  40d7ce:	da1c      	bge.n	40d80a <__swbuf_r+0x6e>
  40d7d0:	3301      	adds	r3, #1
  40d7d2:	68a1      	ldr	r1, [r4, #8]
  40d7d4:	1c50      	adds	r0, r2, #1
  40d7d6:	3901      	subs	r1, #1
  40d7d8:	60a1      	str	r1, [r4, #8]
  40d7da:	6020      	str	r0, [r4, #0]
  40d7dc:	7016      	strb	r6, [r2, #0]
  40d7de:	6962      	ldr	r2, [r4, #20]
  40d7e0:	429a      	cmp	r2, r3
  40d7e2:	d01a      	beq.n	40d81a <__swbuf_r+0x7e>
  40d7e4:	89a3      	ldrh	r3, [r4, #12]
  40d7e6:	07db      	lsls	r3, r3, #31
  40d7e8:	d501      	bpl.n	40d7ee <__swbuf_r+0x52>
  40d7ea:	2d0a      	cmp	r5, #10
  40d7ec:	d015      	beq.n	40d81a <__swbuf_r+0x7e>
  40d7ee:	4628      	mov	r0, r5
  40d7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d7f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d7f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40d7f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40d7fc:	81a2      	strh	r2, [r4, #12]
  40d7fe:	6822      	ldr	r2, [r4, #0]
  40d800:	6661      	str	r1, [r4, #100]	; 0x64
  40d802:	6961      	ldr	r1, [r4, #20]
  40d804:	1ad3      	subs	r3, r2, r3
  40d806:	428b      	cmp	r3, r1
  40d808:	dbe2      	blt.n	40d7d0 <__swbuf_r+0x34>
  40d80a:	4621      	mov	r1, r4
  40d80c:	4638      	mov	r0, r7
  40d80e:	f7fd fcc7 	bl	40b1a0 <_fflush_r>
  40d812:	b940      	cbnz	r0, 40d826 <__swbuf_r+0x8a>
  40d814:	6822      	ldr	r2, [r4, #0]
  40d816:	2301      	movs	r3, #1
  40d818:	e7db      	b.n	40d7d2 <__swbuf_r+0x36>
  40d81a:	4621      	mov	r1, r4
  40d81c:	4638      	mov	r0, r7
  40d81e:	f7fd fcbf 	bl	40b1a0 <_fflush_r>
  40d822:	2800      	cmp	r0, #0
  40d824:	d0e3      	beq.n	40d7ee <__swbuf_r+0x52>
  40d826:	f04f 30ff 	mov.w	r0, #4294967295
  40d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d82c:	4621      	mov	r1, r4
  40d82e:	4638      	mov	r0, r7
  40d830:	f7fc fbde 	bl	409ff0 <__swsetup_r>
  40d834:	2800      	cmp	r0, #0
  40d836:	d1f6      	bne.n	40d826 <__swbuf_r+0x8a>
  40d838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d83c:	6923      	ldr	r3, [r4, #16]
  40d83e:	b291      	uxth	r1, r2
  40d840:	e7be      	b.n	40d7c0 <__swbuf_r+0x24>
  40d842:	f7fd fd41 	bl	40b2c8 <__sinit>
  40d846:	e7b1      	b.n	40d7ac <__swbuf_r+0x10>

0040d848 <_wcrtomb_r>:
  40d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d84c:	4605      	mov	r5, r0
  40d84e:	b086      	sub	sp, #24
  40d850:	461e      	mov	r6, r3
  40d852:	460c      	mov	r4, r1
  40d854:	b1a1      	cbz	r1, 40d880 <_wcrtomb_r+0x38>
  40d856:	4b10      	ldr	r3, [pc, #64]	; (40d898 <_wcrtomb_r+0x50>)
  40d858:	4617      	mov	r7, r2
  40d85a:	f8d3 8000 	ldr.w	r8, [r3]
  40d85e:	f7fe fc45 	bl	40c0ec <__locale_charset>
  40d862:	9600      	str	r6, [sp, #0]
  40d864:	4603      	mov	r3, r0
  40d866:	463a      	mov	r2, r7
  40d868:	4621      	mov	r1, r4
  40d86a:	4628      	mov	r0, r5
  40d86c:	47c0      	blx	r8
  40d86e:	1c43      	adds	r3, r0, #1
  40d870:	d103      	bne.n	40d87a <_wcrtomb_r+0x32>
  40d872:	2200      	movs	r2, #0
  40d874:	238a      	movs	r3, #138	; 0x8a
  40d876:	6032      	str	r2, [r6, #0]
  40d878:	602b      	str	r3, [r5, #0]
  40d87a:	b006      	add	sp, #24
  40d87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d880:	4b05      	ldr	r3, [pc, #20]	; (40d898 <_wcrtomb_r+0x50>)
  40d882:	681f      	ldr	r7, [r3, #0]
  40d884:	f7fe fc32 	bl	40c0ec <__locale_charset>
  40d888:	9600      	str	r6, [sp, #0]
  40d88a:	4603      	mov	r3, r0
  40d88c:	4622      	mov	r2, r4
  40d88e:	a903      	add	r1, sp, #12
  40d890:	4628      	mov	r0, r5
  40d892:	47b8      	blx	r7
  40d894:	e7eb      	b.n	40d86e <_wcrtomb_r+0x26>
  40d896:	bf00      	nop
  40d898:	200008cc 	.word	0x200008cc

0040d89c <__ascii_wctomb>:
  40d89c:	b121      	cbz	r1, 40d8a8 <__ascii_wctomb+0xc>
  40d89e:	2aff      	cmp	r2, #255	; 0xff
  40d8a0:	d804      	bhi.n	40d8ac <__ascii_wctomb+0x10>
  40d8a2:	700a      	strb	r2, [r1, #0]
  40d8a4:	2001      	movs	r0, #1
  40d8a6:	4770      	bx	lr
  40d8a8:	4608      	mov	r0, r1
  40d8aa:	4770      	bx	lr
  40d8ac:	238a      	movs	r3, #138	; 0x8a
  40d8ae:	6003      	str	r3, [r0, #0]
  40d8b0:	f04f 30ff 	mov.w	r0, #4294967295
  40d8b4:	4770      	bx	lr
  40d8b6:	bf00      	nop

0040d8b8 <_write_r>:
  40d8b8:	b570      	push	{r4, r5, r6, lr}
  40d8ba:	460d      	mov	r5, r1
  40d8bc:	4c08      	ldr	r4, [pc, #32]	; (40d8e0 <_write_r+0x28>)
  40d8be:	4611      	mov	r1, r2
  40d8c0:	4606      	mov	r6, r0
  40d8c2:	461a      	mov	r2, r3
  40d8c4:	4628      	mov	r0, r5
  40d8c6:	2300      	movs	r3, #0
  40d8c8:	6023      	str	r3, [r4, #0]
  40d8ca:	f7f6 f805 	bl	4038d8 <_write>
  40d8ce:	1c43      	adds	r3, r0, #1
  40d8d0:	d000      	beq.n	40d8d4 <_write_r+0x1c>
  40d8d2:	bd70      	pop	{r4, r5, r6, pc}
  40d8d4:	6823      	ldr	r3, [r4, #0]
  40d8d6:	2b00      	cmp	r3, #0
  40d8d8:	d0fb      	beq.n	40d8d2 <_write_r+0x1a>
  40d8da:	6033      	str	r3, [r6, #0]
  40d8dc:	bd70      	pop	{r4, r5, r6, pc}
  40d8de:	bf00      	nop
  40d8e0:	2000ae18 	.word	0x2000ae18

0040d8e4 <__register_exitproc>:
  40d8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d8e8:	4c25      	ldr	r4, [pc, #148]	; (40d980 <__register_exitproc+0x9c>)
  40d8ea:	6825      	ldr	r5, [r4, #0]
  40d8ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40d8f0:	4606      	mov	r6, r0
  40d8f2:	4688      	mov	r8, r1
  40d8f4:	4692      	mov	sl, r2
  40d8f6:	4699      	mov	r9, r3
  40d8f8:	b3c4      	cbz	r4, 40d96c <__register_exitproc+0x88>
  40d8fa:	6860      	ldr	r0, [r4, #4]
  40d8fc:	281f      	cmp	r0, #31
  40d8fe:	dc17      	bgt.n	40d930 <__register_exitproc+0x4c>
  40d900:	1c43      	adds	r3, r0, #1
  40d902:	b176      	cbz	r6, 40d922 <__register_exitproc+0x3e>
  40d904:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d908:	2201      	movs	r2, #1
  40d90a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40d90e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40d912:	4082      	lsls	r2, r0
  40d914:	4311      	orrs	r1, r2
  40d916:	2e02      	cmp	r6, #2
  40d918:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40d91c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40d920:	d01e      	beq.n	40d960 <__register_exitproc+0x7c>
  40d922:	3002      	adds	r0, #2
  40d924:	6063      	str	r3, [r4, #4]
  40d926:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40d92a:	2000      	movs	r0, #0
  40d92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d930:	4b14      	ldr	r3, [pc, #80]	; (40d984 <__register_exitproc+0xa0>)
  40d932:	b303      	cbz	r3, 40d976 <__register_exitproc+0x92>
  40d934:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d938:	f7fe fc5a 	bl	40c1f0 <malloc>
  40d93c:	4604      	mov	r4, r0
  40d93e:	b1d0      	cbz	r0, 40d976 <__register_exitproc+0x92>
  40d940:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d944:	2700      	movs	r7, #0
  40d946:	e880 0088 	stmia.w	r0, {r3, r7}
  40d94a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d94e:	4638      	mov	r0, r7
  40d950:	2301      	movs	r3, #1
  40d952:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d956:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d95a:	2e00      	cmp	r6, #0
  40d95c:	d0e1      	beq.n	40d922 <__register_exitproc+0x3e>
  40d95e:	e7d1      	b.n	40d904 <__register_exitproc+0x20>
  40d960:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40d964:	430a      	orrs	r2, r1
  40d966:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d96a:	e7da      	b.n	40d922 <__register_exitproc+0x3e>
  40d96c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d970:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d974:	e7c1      	b.n	40d8fa <__register_exitproc+0x16>
  40d976:	f04f 30ff 	mov.w	r0, #4294967295
  40d97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d97e:	bf00      	nop
  40d980:	0040fe94 	.word	0x0040fe94
  40d984:	0040c1f1 	.word	0x0040c1f1

0040d988 <_calloc_r>:
  40d988:	b510      	push	{r4, lr}
  40d98a:	fb02 f101 	mul.w	r1, r2, r1
  40d98e:	f7fe fc37 	bl	40c200 <_malloc_r>
  40d992:	4604      	mov	r4, r0
  40d994:	b1d8      	cbz	r0, 40d9ce <_calloc_r+0x46>
  40d996:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d99a:	f022 0203 	bic.w	r2, r2, #3
  40d99e:	3a04      	subs	r2, #4
  40d9a0:	2a24      	cmp	r2, #36	; 0x24
  40d9a2:	d818      	bhi.n	40d9d6 <_calloc_r+0x4e>
  40d9a4:	2a13      	cmp	r2, #19
  40d9a6:	d914      	bls.n	40d9d2 <_calloc_r+0x4a>
  40d9a8:	2300      	movs	r3, #0
  40d9aa:	2a1b      	cmp	r2, #27
  40d9ac:	6003      	str	r3, [r0, #0]
  40d9ae:	6043      	str	r3, [r0, #4]
  40d9b0:	d916      	bls.n	40d9e0 <_calloc_r+0x58>
  40d9b2:	2a24      	cmp	r2, #36	; 0x24
  40d9b4:	6083      	str	r3, [r0, #8]
  40d9b6:	60c3      	str	r3, [r0, #12]
  40d9b8:	bf11      	iteee	ne
  40d9ba:	f100 0210 	addne.w	r2, r0, #16
  40d9be:	6103      	streq	r3, [r0, #16]
  40d9c0:	6143      	streq	r3, [r0, #20]
  40d9c2:	f100 0218 	addeq.w	r2, r0, #24
  40d9c6:	2300      	movs	r3, #0
  40d9c8:	6013      	str	r3, [r2, #0]
  40d9ca:	6053      	str	r3, [r2, #4]
  40d9cc:	6093      	str	r3, [r2, #8]
  40d9ce:	4620      	mov	r0, r4
  40d9d0:	bd10      	pop	{r4, pc}
  40d9d2:	4602      	mov	r2, r0
  40d9d4:	e7f7      	b.n	40d9c6 <_calloc_r+0x3e>
  40d9d6:	2100      	movs	r1, #0
  40d9d8:	f7f8 fad4 	bl	405f84 <memset>
  40d9dc:	4620      	mov	r0, r4
  40d9de:	bd10      	pop	{r4, pc}
  40d9e0:	f100 0208 	add.w	r2, r0, #8
  40d9e4:	e7ef      	b.n	40d9c6 <_calloc_r+0x3e>
  40d9e6:	bf00      	nop

0040d9e8 <_close_r>:
  40d9e8:	b538      	push	{r3, r4, r5, lr}
  40d9ea:	4c07      	ldr	r4, [pc, #28]	; (40da08 <_close_r+0x20>)
  40d9ec:	2300      	movs	r3, #0
  40d9ee:	4605      	mov	r5, r0
  40d9f0:	4608      	mov	r0, r1
  40d9f2:	6023      	str	r3, [r4, #0]
  40d9f4:	f7f6 fd0c 	bl	404410 <_close>
  40d9f8:	1c43      	adds	r3, r0, #1
  40d9fa:	d000      	beq.n	40d9fe <_close_r+0x16>
  40d9fc:	bd38      	pop	{r3, r4, r5, pc}
  40d9fe:	6823      	ldr	r3, [r4, #0]
  40da00:	2b00      	cmp	r3, #0
  40da02:	d0fb      	beq.n	40d9fc <_close_r+0x14>
  40da04:	602b      	str	r3, [r5, #0]
  40da06:	bd38      	pop	{r3, r4, r5, pc}
  40da08:	2000ae18 	.word	0x2000ae18

0040da0c <_fclose_r>:
  40da0c:	2900      	cmp	r1, #0
  40da0e:	d03d      	beq.n	40da8c <_fclose_r+0x80>
  40da10:	b570      	push	{r4, r5, r6, lr}
  40da12:	4605      	mov	r5, r0
  40da14:	460c      	mov	r4, r1
  40da16:	b108      	cbz	r0, 40da1c <_fclose_r+0x10>
  40da18:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40da1a:	b37b      	cbz	r3, 40da7c <_fclose_r+0x70>
  40da1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40da20:	b90b      	cbnz	r3, 40da26 <_fclose_r+0x1a>
  40da22:	2000      	movs	r0, #0
  40da24:	bd70      	pop	{r4, r5, r6, pc}
  40da26:	4621      	mov	r1, r4
  40da28:	4628      	mov	r0, r5
  40da2a:	f7fd fb15 	bl	40b058 <__sflush_r>
  40da2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40da30:	4606      	mov	r6, r0
  40da32:	b133      	cbz	r3, 40da42 <_fclose_r+0x36>
  40da34:	69e1      	ldr	r1, [r4, #28]
  40da36:	4628      	mov	r0, r5
  40da38:	4798      	blx	r3
  40da3a:	2800      	cmp	r0, #0
  40da3c:	bfb8      	it	lt
  40da3e:	f04f 36ff 	movlt.w	r6, #4294967295
  40da42:	89a3      	ldrh	r3, [r4, #12]
  40da44:	061b      	lsls	r3, r3, #24
  40da46:	d41c      	bmi.n	40da82 <_fclose_r+0x76>
  40da48:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40da4a:	b141      	cbz	r1, 40da5e <_fclose_r+0x52>
  40da4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40da50:	4299      	cmp	r1, r3
  40da52:	d002      	beq.n	40da5a <_fclose_r+0x4e>
  40da54:	4628      	mov	r0, r5
  40da56:	f7fd fd01 	bl	40b45c <_free_r>
  40da5a:	2300      	movs	r3, #0
  40da5c:	6323      	str	r3, [r4, #48]	; 0x30
  40da5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40da60:	b121      	cbz	r1, 40da6c <_fclose_r+0x60>
  40da62:	4628      	mov	r0, r5
  40da64:	f7fd fcfa 	bl	40b45c <_free_r>
  40da68:	2300      	movs	r3, #0
  40da6a:	6463      	str	r3, [r4, #68]	; 0x44
  40da6c:	f7fd fc32 	bl	40b2d4 <__sfp_lock_acquire>
  40da70:	2300      	movs	r3, #0
  40da72:	81a3      	strh	r3, [r4, #12]
  40da74:	f7fd fc30 	bl	40b2d8 <__sfp_lock_release>
  40da78:	4630      	mov	r0, r6
  40da7a:	bd70      	pop	{r4, r5, r6, pc}
  40da7c:	f7fd fc24 	bl	40b2c8 <__sinit>
  40da80:	e7cc      	b.n	40da1c <_fclose_r+0x10>
  40da82:	6921      	ldr	r1, [r4, #16]
  40da84:	4628      	mov	r0, r5
  40da86:	f7fd fce9 	bl	40b45c <_free_r>
  40da8a:	e7dd      	b.n	40da48 <_fclose_r+0x3c>
  40da8c:	2000      	movs	r0, #0
  40da8e:	4770      	bx	lr

0040da90 <_fstat_r>:
  40da90:	b538      	push	{r3, r4, r5, lr}
  40da92:	460b      	mov	r3, r1
  40da94:	4c07      	ldr	r4, [pc, #28]	; (40dab4 <_fstat_r+0x24>)
  40da96:	4605      	mov	r5, r0
  40da98:	4611      	mov	r1, r2
  40da9a:	4618      	mov	r0, r3
  40da9c:	2300      	movs	r3, #0
  40da9e:	6023      	str	r3, [r4, #0]
  40daa0:	f7f6 fcba 	bl	404418 <_fstat>
  40daa4:	1c43      	adds	r3, r0, #1
  40daa6:	d000      	beq.n	40daaa <_fstat_r+0x1a>
  40daa8:	bd38      	pop	{r3, r4, r5, pc}
  40daaa:	6823      	ldr	r3, [r4, #0]
  40daac:	2b00      	cmp	r3, #0
  40daae:	d0fb      	beq.n	40daa8 <_fstat_r+0x18>
  40dab0:	602b      	str	r3, [r5, #0]
  40dab2:	bd38      	pop	{r3, r4, r5, pc}
  40dab4:	2000ae18 	.word	0x2000ae18

0040dab8 <_isatty_r>:
  40dab8:	b538      	push	{r3, r4, r5, lr}
  40daba:	4c07      	ldr	r4, [pc, #28]	; (40dad8 <_isatty_r+0x20>)
  40dabc:	2300      	movs	r3, #0
  40dabe:	4605      	mov	r5, r0
  40dac0:	4608      	mov	r0, r1
  40dac2:	6023      	str	r3, [r4, #0]
  40dac4:	f7f6 fcae 	bl	404424 <_isatty>
  40dac8:	1c43      	adds	r3, r0, #1
  40daca:	d000      	beq.n	40dace <_isatty_r+0x16>
  40dacc:	bd38      	pop	{r3, r4, r5, pc}
  40dace:	6823      	ldr	r3, [r4, #0]
  40dad0:	2b00      	cmp	r3, #0
  40dad2:	d0fb      	beq.n	40dacc <_isatty_r+0x14>
  40dad4:	602b      	str	r3, [r5, #0]
  40dad6:	bd38      	pop	{r3, r4, r5, pc}
  40dad8:	2000ae18 	.word	0x2000ae18

0040dadc <_lseek_r>:
  40dadc:	b570      	push	{r4, r5, r6, lr}
  40dade:	460d      	mov	r5, r1
  40dae0:	4c08      	ldr	r4, [pc, #32]	; (40db04 <_lseek_r+0x28>)
  40dae2:	4611      	mov	r1, r2
  40dae4:	4606      	mov	r6, r0
  40dae6:	461a      	mov	r2, r3
  40dae8:	4628      	mov	r0, r5
  40daea:	2300      	movs	r3, #0
  40daec:	6023      	str	r3, [r4, #0]
  40daee:	f7f6 fc9b 	bl	404428 <_lseek>
  40daf2:	1c43      	adds	r3, r0, #1
  40daf4:	d000      	beq.n	40daf8 <_lseek_r+0x1c>
  40daf6:	bd70      	pop	{r4, r5, r6, pc}
  40daf8:	6823      	ldr	r3, [r4, #0]
  40dafa:	2b00      	cmp	r3, #0
  40dafc:	d0fb      	beq.n	40daf6 <_lseek_r+0x1a>
  40dafe:	6033      	str	r3, [r6, #0]
  40db00:	bd70      	pop	{r4, r5, r6, pc}
  40db02:	bf00      	nop
  40db04:	2000ae18 	.word	0x2000ae18

0040db08 <_read_r>:
  40db08:	b570      	push	{r4, r5, r6, lr}
  40db0a:	460d      	mov	r5, r1
  40db0c:	4c08      	ldr	r4, [pc, #32]	; (40db30 <_read_r+0x28>)
  40db0e:	4611      	mov	r1, r2
  40db10:	4606      	mov	r6, r0
  40db12:	461a      	mov	r2, r3
  40db14:	4628      	mov	r0, r5
  40db16:	2300      	movs	r3, #0
  40db18:	6023      	str	r3, [r4, #0]
  40db1a:	f7f5 fe35 	bl	403788 <_read>
  40db1e:	1c43      	adds	r3, r0, #1
  40db20:	d000      	beq.n	40db24 <_read_r+0x1c>
  40db22:	bd70      	pop	{r4, r5, r6, pc}
  40db24:	6823      	ldr	r3, [r4, #0]
  40db26:	2b00      	cmp	r3, #0
  40db28:	d0fb      	beq.n	40db22 <_read_r+0x1a>
  40db2a:	6033      	str	r3, [r6, #0]
  40db2c:	bd70      	pop	{r4, r5, r6, pc}
  40db2e:	bf00      	nop
  40db30:	2000ae18 	.word	0x2000ae18

0040db34 <__aeabi_drsub>:
  40db34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40db38:	e002      	b.n	40db40 <__adddf3>
  40db3a:	bf00      	nop

0040db3c <__aeabi_dsub>:
  40db3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040db40 <__adddf3>:
  40db40:	b530      	push	{r4, r5, lr}
  40db42:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40db46:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40db4a:	ea94 0f05 	teq	r4, r5
  40db4e:	bf08      	it	eq
  40db50:	ea90 0f02 	teqeq	r0, r2
  40db54:	bf1f      	itttt	ne
  40db56:	ea54 0c00 	orrsne.w	ip, r4, r0
  40db5a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40db5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40db62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40db66:	f000 80e2 	beq.w	40dd2e <__adddf3+0x1ee>
  40db6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40db6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40db72:	bfb8      	it	lt
  40db74:	426d      	neglt	r5, r5
  40db76:	dd0c      	ble.n	40db92 <__adddf3+0x52>
  40db78:	442c      	add	r4, r5
  40db7a:	ea80 0202 	eor.w	r2, r0, r2
  40db7e:	ea81 0303 	eor.w	r3, r1, r3
  40db82:	ea82 0000 	eor.w	r0, r2, r0
  40db86:	ea83 0101 	eor.w	r1, r3, r1
  40db8a:	ea80 0202 	eor.w	r2, r0, r2
  40db8e:	ea81 0303 	eor.w	r3, r1, r3
  40db92:	2d36      	cmp	r5, #54	; 0x36
  40db94:	bf88      	it	hi
  40db96:	bd30      	pophi	{r4, r5, pc}
  40db98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40db9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40dba0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40dba4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40dba8:	d002      	beq.n	40dbb0 <__adddf3+0x70>
  40dbaa:	4240      	negs	r0, r0
  40dbac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40dbb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40dbb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40dbb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40dbbc:	d002      	beq.n	40dbc4 <__adddf3+0x84>
  40dbbe:	4252      	negs	r2, r2
  40dbc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40dbc4:	ea94 0f05 	teq	r4, r5
  40dbc8:	f000 80a7 	beq.w	40dd1a <__adddf3+0x1da>
  40dbcc:	f1a4 0401 	sub.w	r4, r4, #1
  40dbd0:	f1d5 0e20 	rsbs	lr, r5, #32
  40dbd4:	db0d      	blt.n	40dbf2 <__adddf3+0xb2>
  40dbd6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40dbda:	fa22 f205 	lsr.w	r2, r2, r5
  40dbde:	1880      	adds	r0, r0, r2
  40dbe0:	f141 0100 	adc.w	r1, r1, #0
  40dbe4:	fa03 f20e 	lsl.w	r2, r3, lr
  40dbe8:	1880      	adds	r0, r0, r2
  40dbea:	fa43 f305 	asr.w	r3, r3, r5
  40dbee:	4159      	adcs	r1, r3
  40dbf0:	e00e      	b.n	40dc10 <__adddf3+0xd0>
  40dbf2:	f1a5 0520 	sub.w	r5, r5, #32
  40dbf6:	f10e 0e20 	add.w	lr, lr, #32
  40dbfa:	2a01      	cmp	r2, #1
  40dbfc:	fa03 fc0e 	lsl.w	ip, r3, lr
  40dc00:	bf28      	it	cs
  40dc02:	f04c 0c02 	orrcs.w	ip, ip, #2
  40dc06:	fa43 f305 	asr.w	r3, r3, r5
  40dc0a:	18c0      	adds	r0, r0, r3
  40dc0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40dc10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40dc14:	d507      	bpl.n	40dc26 <__adddf3+0xe6>
  40dc16:	f04f 0e00 	mov.w	lr, #0
  40dc1a:	f1dc 0c00 	rsbs	ip, ip, #0
  40dc1e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40dc22:	eb6e 0101 	sbc.w	r1, lr, r1
  40dc26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40dc2a:	d31b      	bcc.n	40dc64 <__adddf3+0x124>
  40dc2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40dc30:	d30c      	bcc.n	40dc4c <__adddf3+0x10c>
  40dc32:	0849      	lsrs	r1, r1, #1
  40dc34:	ea5f 0030 	movs.w	r0, r0, rrx
  40dc38:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40dc3c:	f104 0401 	add.w	r4, r4, #1
  40dc40:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40dc44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40dc48:	f080 809a 	bcs.w	40dd80 <__adddf3+0x240>
  40dc4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40dc50:	bf08      	it	eq
  40dc52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40dc56:	f150 0000 	adcs.w	r0, r0, #0
  40dc5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40dc5e:	ea41 0105 	orr.w	r1, r1, r5
  40dc62:	bd30      	pop	{r4, r5, pc}
  40dc64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40dc68:	4140      	adcs	r0, r0
  40dc6a:	eb41 0101 	adc.w	r1, r1, r1
  40dc6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40dc72:	f1a4 0401 	sub.w	r4, r4, #1
  40dc76:	d1e9      	bne.n	40dc4c <__adddf3+0x10c>
  40dc78:	f091 0f00 	teq	r1, #0
  40dc7c:	bf04      	itt	eq
  40dc7e:	4601      	moveq	r1, r0
  40dc80:	2000      	moveq	r0, #0
  40dc82:	fab1 f381 	clz	r3, r1
  40dc86:	bf08      	it	eq
  40dc88:	3320      	addeq	r3, #32
  40dc8a:	f1a3 030b 	sub.w	r3, r3, #11
  40dc8e:	f1b3 0220 	subs.w	r2, r3, #32
  40dc92:	da0c      	bge.n	40dcae <__adddf3+0x16e>
  40dc94:	320c      	adds	r2, #12
  40dc96:	dd08      	ble.n	40dcaa <__adddf3+0x16a>
  40dc98:	f102 0c14 	add.w	ip, r2, #20
  40dc9c:	f1c2 020c 	rsb	r2, r2, #12
  40dca0:	fa01 f00c 	lsl.w	r0, r1, ip
  40dca4:	fa21 f102 	lsr.w	r1, r1, r2
  40dca8:	e00c      	b.n	40dcc4 <__adddf3+0x184>
  40dcaa:	f102 0214 	add.w	r2, r2, #20
  40dcae:	bfd8      	it	le
  40dcb0:	f1c2 0c20 	rsble	ip, r2, #32
  40dcb4:	fa01 f102 	lsl.w	r1, r1, r2
  40dcb8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40dcbc:	bfdc      	itt	le
  40dcbe:	ea41 010c 	orrle.w	r1, r1, ip
  40dcc2:	4090      	lslle	r0, r2
  40dcc4:	1ae4      	subs	r4, r4, r3
  40dcc6:	bfa2      	ittt	ge
  40dcc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40dccc:	4329      	orrge	r1, r5
  40dcce:	bd30      	popge	{r4, r5, pc}
  40dcd0:	ea6f 0404 	mvn.w	r4, r4
  40dcd4:	3c1f      	subs	r4, #31
  40dcd6:	da1c      	bge.n	40dd12 <__adddf3+0x1d2>
  40dcd8:	340c      	adds	r4, #12
  40dcda:	dc0e      	bgt.n	40dcfa <__adddf3+0x1ba>
  40dcdc:	f104 0414 	add.w	r4, r4, #20
  40dce0:	f1c4 0220 	rsb	r2, r4, #32
  40dce4:	fa20 f004 	lsr.w	r0, r0, r4
  40dce8:	fa01 f302 	lsl.w	r3, r1, r2
  40dcec:	ea40 0003 	orr.w	r0, r0, r3
  40dcf0:	fa21 f304 	lsr.w	r3, r1, r4
  40dcf4:	ea45 0103 	orr.w	r1, r5, r3
  40dcf8:	bd30      	pop	{r4, r5, pc}
  40dcfa:	f1c4 040c 	rsb	r4, r4, #12
  40dcfe:	f1c4 0220 	rsb	r2, r4, #32
  40dd02:	fa20 f002 	lsr.w	r0, r0, r2
  40dd06:	fa01 f304 	lsl.w	r3, r1, r4
  40dd0a:	ea40 0003 	orr.w	r0, r0, r3
  40dd0e:	4629      	mov	r1, r5
  40dd10:	bd30      	pop	{r4, r5, pc}
  40dd12:	fa21 f004 	lsr.w	r0, r1, r4
  40dd16:	4629      	mov	r1, r5
  40dd18:	bd30      	pop	{r4, r5, pc}
  40dd1a:	f094 0f00 	teq	r4, #0
  40dd1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40dd22:	bf06      	itte	eq
  40dd24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40dd28:	3401      	addeq	r4, #1
  40dd2a:	3d01      	subne	r5, #1
  40dd2c:	e74e      	b.n	40dbcc <__adddf3+0x8c>
  40dd2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40dd32:	bf18      	it	ne
  40dd34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40dd38:	d029      	beq.n	40dd8e <__adddf3+0x24e>
  40dd3a:	ea94 0f05 	teq	r4, r5
  40dd3e:	bf08      	it	eq
  40dd40:	ea90 0f02 	teqeq	r0, r2
  40dd44:	d005      	beq.n	40dd52 <__adddf3+0x212>
  40dd46:	ea54 0c00 	orrs.w	ip, r4, r0
  40dd4a:	bf04      	itt	eq
  40dd4c:	4619      	moveq	r1, r3
  40dd4e:	4610      	moveq	r0, r2
  40dd50:	bd30      	pop	{r4, r5, pc}
  40dd52:	ea91 0f03 	teq	r1, r3
  40dd56:	bf1e      	ittt	ne
  40dd58:	2100      	movne	r1, #0
  40dd5a:	2000      	movne	r0, #0
  40dd5c:	bd30      	popne	{r4, r5, pc}
  40dd5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40dd62:	d105      	bne.n	40dd70 <__adddf3+0x230>
  40dd64:	0040      	lsls	r0, r0, #1
  40dd66:	4149      	adcs	r1, r1
  40dd68:	bf28      	it	cs
  40dd6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40dd6e:	bd30      	pop	{r4, r5, pc}
  40dd70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40dd74:	bf3c      	itt	cc
  40dd76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40dd7a:	bd30      	popcc	{r4, r5, pc}
  40dd7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40dd80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40dd84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40dd88:	f04f 0000 	mov.w	r0, #0
  40dd8c:	bd30      	pop	{r4, r5, pc}
  40dd8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40dd92:	bf1a      	itte	ne
  40dd94:	4619      	movne	r1, r3
  40dd96:	4610      	movne	r0, r2
  40dd98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40dd9c:	bf1c      	itt	ne
  40dd9e:	460b      	movne	r3, r1
  40dda0:	4602      	movne	r2, r0
  40dda2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40dda6:	bf06      	itte	eq
  40dda8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ddac:	ea91 0f03 	teqeq	r1, r3
  40ddb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ddb4:	bd30      	pop	{r4, r5, pc}
  40ddb6:	bf00      	nop

0040ddb8 <__aeabi_ui2d>:
  40ddb8:	f090 0f00 	teq	r0, #0
  40ddbc:	bf04      	itt	eq
  40ddbe:	2100      	moveq	r1, #0
  40ddc0:	4770      	bxeq	lr
  40ddc2:	b530      	push	{r4, r5, lr}
  40ddc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ddc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ddcc:	f04f 0500 	mov.w	r5, #0
  40ddd0:	f04f 0100 	mov.w	r1, #0
  40ddd4:	e750      	b.n	40dc78 <__adddf3+0x138>
  40ddd6:	bf00      	nop

0040ddd8 <__aeabi_i2d>:
  40ddd8:	f090 0f00 	teq	r0, #0
  40dddc:	bf04      	itt	eq
  40ddde:	2100      	moveq	r1, #0
  40dde0:	4770      	bxeq	lr
  40dde2:	b530      	push	{r4, r5, lr}
  40dde4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40dde8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ddec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ddf0:	bf48      	it	mi
  40ddf2:	4240      	negmi	r0, r0
  40ddf4:	f04f 0100 	mov.w	r1, #0
  40ddf8:	e73e      	b.n	40dc78 <__adddf3+0x138>
  40ddfa:	bf00      	nop

0040ddfc <__aeabi_f2d>:
  40ddfc:	0042      	lsls	r2, r0, #1
  40ddfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40de02:	ea4f 0131 	mov.w	r1, r1, rrx
  40de06:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40de0a:	bf1f      	itttt	ne
  40de0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40de10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40de14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40de18:	4770      	bxne	lr
  40de1a:	f092 0f00 	teq	r2, #0
  40de1e:	bf14      	ite	ne
  40de20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40de24:	4770      	bxeq	lr
  40de26:	b530      	push	{r4, r5, lr}
  40de28:	f44f 7460 	mov.w	r4, #896	; 0x380
  40de2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40de30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40de34:	e720      	b.n	40dc78 <__adddf3+0x138>
  40de36:	bf00      	nop

0040de38 <__aeabi_ul2d>:
  40de38:	ea50 0201 	orrs.w	r2, r0, r1
  40de3c:	bf08      	it	eq
  40de3e:	4770      	bxeq	lr
  40de40:	b530      	push	{r4, r5, lr}
  40de42:	f04f 0500 	mov.w	r5, #0
  40de46:	e00a      	b.n	40de5e <__aeabi_l2d+0x16>

0040de48 <__aeabi_l2d>:
  40de48:	ea50 0201 	orrs.w	r2, r0, r1
  40de4c:	bf08      	it	eq
  40de4e:	4770      	bxeq	lr
  40de50:	b530      	push	{r4, r5, lr}
  40de52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40de56:	d502      	bpl.n	40de5e <__aeabi_l2d+0x16>
  40de58:	4240      	negs	r0, r0
  40de5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40de5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40de62:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40de66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40de6a:	f43f aedc 	beq.w	40dc26 <__adddf3+0xe6>
  40de6e:	f04f 0203 	mov.w	r2, #3
  40de72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40de76:	bf18      	it	ne
  40de78:	3203      	addne	r2, #3
  40de7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40de7e:	bf18      	it	ne
  40de80:	3203      	addne	r2, #3
  40de82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40de86:	f1c2 0320 	rsb	r3, r2, #32
  40de8a:	fa00 fc03 	lsl.w	ip, r0, r3
  40de8e:	fa20 f002 	lsr.w	r0, r0, r2
  40de92:	fa01 fe03 	lsl.w	lr, r1, r3
  40de96:	ea40 000e 	orr.w	r0, r0, lr
  40de9a:	fa21 f102 	lsr.w	r1, r1, r2
  40de9e:	4414      	add	r4, r2
  40dea0:	e6c1      	b.n	40dc26 <__adddf3+0xe6>
  40dea2:	bf00      	nop

0040dea4 <__aeabi_dmul>:
  40dea4:	b570      	push	{r4, r5, r6, lr}
  40dea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40deaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40deae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40deb2:	bf1d      	ittte	ne
  40deb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40deb8:	ea94 0f0c 	teqne	r4, ip
  40debc:	ea95 0f0c 	teqne	r5, ip
  40dec0:	f000 f8de 	bleq	40e080 <__aeabi_dmul+0x1dc>
  40dec4:	442c      	add	r4, r5
  40dec6:	ea81 0603 	eor.w	r6, r1, r3
  40deca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40dece:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ded2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ded6:	bf18      	it	ne
  40ded8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40dedc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40dee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40dee4:	d038      	beq.n	40df58 <__aeabi_dmul+0xb4>
  40dee6:	fba0 ce02 	umull	ip, lr, r0, r2
  40deea:	f04f 0500 	mov.w	r5, #0
  40deee:	fbe1 e502 	umlal	lr, r5, r1, r2
  40def2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40def6:	fbe0 e503 	umlal	lr, r5, r0, r3
  40defa:	f04f 0600 	mov.w	r6, #0
  40defe:	fbe1 5603 	umlal	r5, r6, r1, r3
  40df02:	f09c 0f00 	teq	ip, #0
  40df06:	bf18      	it	ne
  40df08:	f04e 0e01 	orrne.w	lr, lr, #1
  40df0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40df10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40df14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40df18:	d204      	bcs.n	40df24 <__aeabi_dmul+0x80>
  40df1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40df1e:	416d      	adcs	r5, r5
  40df20:	eb46 0606 	adc.w	r6, r6, r6
  40df24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40df28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40df2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40df30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40df34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40df38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40df3c:	bf88      	it	hi
  40df3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40df42:	d81e      	bhi.n	40df82 <__aeabi_dmul+0xde>
  40df44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40df48:	bf08      	it	eq
  40df4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40df4e:	f150 0000 	adcs.w	r0, r0, #0
  40df52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40df56:	bd70      	pop	{r4, r5, r6, pc}
  40df58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40df5c:	ea46 0101 	orr.w	r1, r6, r1
  40df60:	ea40 0002 	orr.w	r0, r0, r2
  40df64:	ea81 0103 	eor.w	r1, r1, r3
  40df68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40df6c:	bfc2      	ittt	gt
  40df6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40df72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40df76:	bd70      	popgt	{r4, r5, r6, pc}
  40df78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40df7c:	f04f 0e00 	mov.w	lr, #0
  40df80:	3c01      	subs	r4, #1
  40df82:	f300 80ab 	bgt.w	40e0dc <__aeabi_dmul+0x238>
  40df86:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40df8a:	bfde      	ittt	le
  40df8c:	2000      	movle	r0, #0
  40df8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40df92:	bd70      	pople	{r4, r5, r6, pc}
  40df94:	f1c4 0400 	rsb	r4, r4, #0
  40df98:	3c20      	subs	r4, #32
  40df9a:	da35      	bge.n	40e008 <__aeabi_dmul+0x164>
  40df9c:	340c      	adds	r4, #12
  40df9e:	dc1b      	bgt.n	40dfd8 <__aeabi_dmul+0x134>
  40dfa0:	f104 0414 	add.w	r4, r4, #20
  40dfa4:	f1c4 0520 	rsb	r5, r4, #32
  40dfa8:	fa00 f305 	lsl.w	r3, r0, r5
  40dfac:	fa20 f004 	lsr.w	r0, r0, r4
  40dfb0:	fa01 f205 	lsl.w	r2, r1, r5
  40dfb4:	ea40 0002 	orr.w	r0, r0, r2
  40dfb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40dfbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40dfc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40dfc4:	fa21 f604 	lsr.w	r6, r1, r4
  40dfc8:	eb42 0106 	adc.w	r1, r2, r6
  40dfcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40dfd0:	bf08      	it	eq
  40dfd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40dfd6:	bd70      	pop	{r4, r5, r6, pc}
  40dfd8:	f1c4 040c 	rsb	r4, r4, #12
  40dfdc:	f1c4 0520 	rsb	r5, r4, #32
  40dfe0:	fa00 f304 	lsl.w	r3, r0, r4
  40dfe4:	fa20 f005 	lsr.w	r0, r0, r5
  40dfe8:	fa01 f204 	lsl.w	r2, r1, r4
  40dfec:	ea40 0002 	orr.w	r0, r0, r2
  40dff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40dff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40dff8:	f141 0100 	adc.w	r1, r1, #0
  40dffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e000:	bf08      	it	eq
  40e002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e006:	bd70      	pop	{r4, r5, r6, pc}
  40e008:	f1c4 0520 	rsb	r5, r4, #32
  40e00c:	fa00 f205 	lsl.w	r2, r0, r5
  40e010:	ea4e 0e02 	orr.w	lr, lr, r2
  40e014:	fa20 f304 	lsr.w	r3, r0, r4
  40e018:	fa01 f205 	lsl.w	r2, r1, r5
  40e01c:	ea43 0302 	orr.w	r3, r3, r2
  40e020:	fa21 f004 	lsr.w	r0, r1, r4
  40e024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e028:	fa21 f204 	lsr.w	r2, r1, r4
  40e02c:	ea20 0002 	bic.w	r0, r0, r2
  40e030:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40e034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e038:	bf08      	it	eq
  40e03a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e03e:	bd70      	pop	{r4, r5, r6, pc}
  40e040:	f094 0f00 	teq	r4, #0
  40e044:	d10f      	bne.n	40e066 <__aeabi_dmul+0x1c2>
  40e046:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40e04a:	0040      	lsls	r0, r0, #1
  40e04c:	eb41 0101 	adc.w	r1, r1, r1
  40e050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e054:	bf08      	it	eq
  40e056:	3c01      	subeq	r4, #1
  40e058:	d0f7      	beq.n	40e04a <__aeabi_dmul+0x1a6>
  40e05a:	ea41 0106 	orr.w	r1, r1, r6
  40e05e:	f095 0f00 	teq	r5, #0
  40e062:	bf18      	it	ne
  40e064:	4770      	bxne	lr
  40e066:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40e06a:	0052      	lsls	r2, r2, #1
  40e06c:	eb43 0303 	adc.w	r3, r3, r3
  40e070:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40e074:	bf08      	it	eq
  40e076:	3d01      	subeq	r5, #1
  40e078:	d0f7      	beq.n	40e06a <__aeabi_dmul+0x1c6>
  40e07a:	ea43 0306 	orr.w	r3, r3, r6
  40e07e:	4770      	bx	lr
  40e080:	ea94 0f0c 	teq	r4, ip
  40e084:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e088:	bf18      	it	ne
  40e08a:	ea95 0f0c 	teqne	r5, ip
  40e08e:	d00c      	beq.n	40e0aa <__aeabi_dmul+0x206>
  40e090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e094:	bf18      	it	ne
  40e096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e09a:	d1d1      	bne.n	40e040 <__aeabi_dmul+0x19c>
  40e09c:	ea81 0103 	eor.w	r1, r1, r3
  40e0a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e0a4:	f04f 0000 	mov.w	r0, #0
  40e0a8:	bd70      	pop	{r4, r5, r6, pc}
  40e0aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e0ae:	bf06      	itte	eq
  40e0b0:	4610      	moveq	r0, r2
  40e0b2:	4619      	moveq	r1, r3
  40e0b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e0b8:	d019      	beq.n	40e0ee <__aeabi_dmul+0x24a>
  40e0ba:	ea94 0f0c 	teq	r4, ip
  40e0be:	d102      	bne.n	40e0c6 <__aeabi_dmul+0x222>
  40e0c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40e0c4:	d113      	bne.n	40e0ee <__aeabi_dmul+0x24a>
  40e0c6:	ea95 0f0c 	teq	r5, ip
  40e0ca:	d105      	bne.n	40e0d8 <__aeabi_dmul+0x234>
  40e0cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40e0d0:	bf1c      	itt	ne
  40e0d2:	4610      	movne	r0, r2
  40e0d4:	4619      	movne	r1, r3
  40e0d6:	d10a      	bne.n	40e0ee <__aeabi_dmul+0x24a>
  40e0d8:	ea81 0103 	eor.w	r1, r1, r3
  40e0dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e0e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e0e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e0e8:	f04f 0000 	mov.w	r0, #0
  40e0ec:	bd70      	pop	{r4, r5, r6, pc}
  40e0ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e0f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40e0f6:	bd70      	pop	{r4, r5, r6, pc}

0040e0f8 <__aeabi_ddiv>:
  40e0f8:	b570      	push	{r4, r5, r6, lr}
  40e0fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e0fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e106:	bf1d      	ittte	ne
  40e108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e10c:	ea94 0f0c 	teqne	r4, ip
  40e110:	ea95 0f0c 	teqne	r5, ip
  40e114:	f000 f8a7 	bleq	40e266 <__aeabi_ddiv+0x16e>
  40e118:	eba4 0405 	sub.w	r4, r4, r5
  40e11c:	ea81 0e03 	eor.w	lr, r1, r3
  40e120:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e124:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e128:	f000 8088 	beq.w	40e23c <__aeabi_ddiv+0x144>
  40e12c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e130:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40e134:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40e138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40e13c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40e140:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40e144:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40e148:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40e14c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40e150:	429d      	cmp	r5, r3
  40e152:	bf08      	it	eq
  40e154:	4296      	cmpeq	r6, r2
  40e156:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40e15a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40e15e:	d202      	bcs.n	40e166 <__aeabi_ddiv+0x6e>
  40e160:	085b      	lsrs	r3, r3, #1
  40e162:	ea4f 0232 	mov.w	r2, r2, rrx
  40e166:	1ab6      	subs	r6, r6, r2
  40e168:	eb65 0503 	sbc.w	r5, r5, r3
  40e16c:	085b      	lsrs	r3, r3, #1
  40e16e:	ea4f 0232 	mov.w	r2, r2, rrx
  40e172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40e176:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40e17a:	ebb6 0e02 	subs.w	lr, r6, r2
  40e17e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e182:	bf22      	ittt	cs
  40e184:	1ab6      	subcs	r6, r6, r2
  40e186:	4675      	movcs	r5, lr
  40e188:	ea40 000c 	orrcs.w	r0, r0, ip
  40e18c:	085b      	lsrs	r3, r3, #1
  40e18e:	ea4f 0232 	mov.w	r2, r2, rrx
  40e192:	ebb6 0e02 	subs.w	lr, r6, r2
  40e196:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e19a:	bf22      	ittt	cs
  40e19c:	1ab6      	subcs	r6, r6, r2
  40e19e:	4675      	movcs	r5, lr
  40e1a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40e1a4:	085b      	lsrs	r3, r3, #1
  40e1a6:	ea4f 0232 	mov.w	r2, r2, rrx
  40e1aa:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1b2:	bf22      	ittt	cs
  40e1b4:	1ab6      	subcs	r6, r6, r2
  40e1b6:	4675      	movcs	r5, lr
  40e1b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40e1bc:	085b      	lsrs	r3, r3, #1
  40e1be:	ea4f 0232 	mov.w	r2, r2, rrx
  40e1c2:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1ca:	bf22      	ittt	cs
  40e1cc:	1ab6      	subcs	r6, r6, r2
  40e1ce:	4675      	movcs	r5, lr
  40e1d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40e1d4:	ea55 0e06 	orrs.w	lr, r5, r6
  40e1d8:	d018      	beq.n	40e20c <__aeabi_ddiv+0x114>
  40e1da:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40e1de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40e1e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40e1e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40e1ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40e1ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40e1f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40e1f6:	d1c0      	bne.n	40e17a <__aeabi_ddiv+0x82>
  40e1f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e1fc:	d10b      	bne.n	40e216 <__aeabi_ddiv+0x11e>
  40e1fe:	ea41 0100 	orr.w	r1, r1, r0
  40e202:	f04f 0000 	mov.w	r0, #0
  40e206:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40e20a:	e7b6      	b.n	40e17a <__aeabi_ddiv+0x82>
  40e20c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e210:	bf04      	itt	eq
  40e212:	4301      	orreq	r1, r0
  40e214:	2000      	moveq	r0, #0
  40e216:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e21a:	bf88      	it	hi
  40e21c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e220:	f63f aeaf 	bhi.w	40df82 <__aeabi_dmul+0xde>
  40e224:	ebb5 0c03 	subs.w	ip, r5, r3
  40e228:	bf04      	itt	eq
  40e22a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40e22e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e232:	f150 0000 	adcs.w	r0, r0, #0
  40e236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e23a:	bd70      	pop	{r4, r5, r6, pc}
  40e23c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40e240:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40e244:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40e248:	bfc2      	ittt	gt
  40e24a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e24e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e252:	bd70      	popgt	{r4, r5, r6, pc}
  40e254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e258:	f04f 0e00 	mov.w	lr, #0
  40e25c:	3c01      	subs	r4, #1
  40e25e:	e690      	b.n	40df82 <__aeabi_dmul+0xde>
  40e260:	ea45 0e06 	orr.w	lr, r5, r6
  40e264:	e68d      	b.n	40df82 <__aeabi_dmul+0xde>
  40e266:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e26a:	ea94 0f0c 	teq	r4, ip
  40e26e:	bf08      	it	eq
  40e270:	ea95 0f0c 	teqeq	r5, ip
  40e274:	f43f af3b 	beq.w	40e0ee <__aeabi_dmul+0x24a>
  40e278:	ea94 0f0c 	teq	r4, ip
  40e27c:	d10a      	bne.n	40e294 <__aeabi_ddiv+0x19c>
  40e27e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e282:	f47f af34 	bne.w	40e0ee <__aeabi_dmul+0x24a>
  40e286:	ea95 0f0c 	teq	r5, ip
  40e28a:	f47f af25 	bne.w	40e0d8 <__aeabi_dmul+0x234>
  40e28e:	4610      	mov	r0, r2
  40e290:	4619      	mov	r1, r3
  40e292:	e72c      	b.n	40e0ee <__aeabi_dmul+0x24a>
  40e294:	ea95 0f0c 	teq	r5, ip
  40e298:	d106      	bne.n	40e2a8 <__aeabi_ddiv+0x1b0>
  40e29a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e29e:	f43f aefd 	beq.w	40e09c <__aeabi_dmul+0x1f8>
  40e2a2:	4610      	mov	r0, r2
  40e2a4:	4619      	mov	r1, r3
  40e2a6:	e722      	b.n	40e0ee <__aeabi_dmul+0x24a>
  40e2a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e2ac:	bf18      	it	ne
  40e2ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e2b2:	f47f aec5 	bne.w	40e040 <__aeabi_dmul+0x19c>
  40e2b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40e2ba:	f47f af0d 	bne.w	40e0d8 <__aeabi_dmul+0x234>
  40e2be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40e2c2:	f47f aeeb 	bne.w	40e09c <__aeabi_dmul+0x1f8>
  40e2c6:	e712      	b.n	40e0ee <__aeabi_dmul+0x24a>

0040e2c8 <__gedf2>:
  40e2c8:	f04f 3cff 	mov.w	ip, #4294967295
  40e2cc:	e006      	b.n	40e2dc <__cmpdf2+0x4>
  40e2ce:	bf00      	nop

0040e2d0 <__ledf2>:
  40e2d0:	f04f 0c01 	mov.w	ip, #1
  40e2d4:	e002      	b.n	40e2dc <__cmpdf2+0x4>
  40e2d6:	bf00      	nop

0040e2d8 <__cmpdf2>:
  40e2d8:	f04f 0c01 	mov.w	ip, #1
  40e2dc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40e2e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e2e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e2e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e2ec:	bf18      	it	ne
  40e2ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40e2f2:	d01b      	beq.n	40e32c <__cmpdf2+0x54>
  40e2f4:	b001      	add	sp, #4
  40e2f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40e2fa:	bf0c      	ite	eq
  40e2fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40e300:	ea91 0f03 	teqne	r1, r3
  40e304:	bf02      	ittt	eq
  40e306:	ea90 0f02 	teqeq	r0, r2
  40e30a:	2000      	moveq	r0, #0
  40e30c:	4770      	bxeq	lr
  40e30e:	f110 0f00 	cmn.w	r0, #0
  40e312:	ea91 0f03 	teq	r1, r3
  40e316:	bf58      	it	pl
  40e318:	4299      	cmppl	r1, r3
  40e31a:	bf08      	it	eq
  40e31c:	4290      	cmpeq	r0, r2
  40e31e:	bf2c      	ite	cs
  40e320:	17d8      	asrcs	r0, r3, #31
  40e322:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40e326:	f040 0001 	orr.w	r0, r0, #1
  40e32a:	4770      	bx	lr
  40e32c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e334:	d102      	bne.n	40e33c <__cmpdf2+0x64>
  40e336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e33a:	d107      	bne.n	40e34c <__cmpdf2+0x74>
  40e33c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e344:	d1d6      	bne.n	40e2f4 <__cmpdf2+0x1c>
  40e346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e34a:	d0d3      	beq.n	40e2f4 <__cmpdf2+0x1c>
  40e34c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40e350:	4770      	bx	lr
  40e352:	bf00      	nop

0040e354 <__aeabi_cdrcmple>:
  40e354:	4684      	mov	ip, r0
  40e356:	4610      	mov	r0, r2
  40e358:	4662      	mov	r2, ip
  40e35a:	468c      	mov	ip, r1
  40e35c:	4619      	mov	r1, r3
  40e35e:	4663      	mov	r3, ip
  40e360:	e000      	b.n	40e364 <__aeabi_cdcmpeq>
  40e362:	bf00      	nop

0040e364 <__aeabi_cdcmpeq>:
  40e364:	b501      	push	{r0, lr}
  40e366:	f7ff ffb7 	bl	40e2d8 <__cmpdf2>
  40e36a:	2800      	cmp	r0, #0
  40e36c:	bf48      	it	mi
  40e36e:	f110 0f00 	cmnmi.w	r0, #0
  40e372:	bd01      	pop	{r0, pc}

0040e374 <__aeabi_dcmpeq>:
  40e374:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e378:	f7ff fff4 	bl	40e364 <__aeabi_cdcmpeq>
  40e37c:	bf0c      	ite	eq
  40e37e:	2001      	moveq	r0, #1
  40e380:	2000      	movne	r0, #0
  40e382:	f85d fb08 	ldr.w	pc, [sp], #8
  40e386:	bf00      	nop

0040e388 <__aeabi_dcmplt>:
  40e388:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e38c:	f7ff ffea 	bl	40e364 <__aeabi_cdcmpeq>
  40e390:	bf34      	ite	cc
  40e392:	2001      	movcc	r0, #1
  40e394:	2000      	movcs	r0, #0
  40e396:	f85d fb08 	ldr.w	pc, [sp], #8
  40e39a:	bf00      	nop

0040e39c <__aeabi_dcmple>:
  40e39c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3a0:	f7ff ffe0 	bl	40e364 <__aeabi_cdcmpeq>
  40e3a4:	bf94      	ite	ls
  40e3a6:	2001      	movls	r0, #1
  40e3a8:	2000      	movhi	r0, #0
  40e3aa:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3ae:	bf00      	nop

0040e3b0 <__aeabi_dcmpge>:
  40e3b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3b4:	f7ff ffce 	bl	40e354 <__aeabi_cdrcmple>
  40e3b8:	bf94      	ite	ls
  40e3ba:	2001      	movls	r0, #1
  40e3bc:	2000      	movhi	r0, #0
  40e3be:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3c2:	bf00      	nop

0040e3c4 <__aeabi_dcmpgt>:
  40e3c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3c8:	f7ff ffc4 	bl	40e354 <__aeabi_cdrcmple>
  40e3cc:	bf34      	ite	cc
  40e3ce:	2001      	movcc	r0, #1
  40e3d0:	2000      	movcs	r0, #0
  40e3d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3d6:	bf00      	nop

0040e3d8 <__aeabi_dcmpun>:
  40e3d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e3dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e3e0:	d102      	bne.n	40e3e8 <__aeabi_dcmpun+0x10>
  40e3e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e3e6:	d10a      	bne.n	40e3fe <__aeabi_dcmpun+0x26>
  40e3e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e3ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e3f0:	d102      	bne.n	40e3f8 <__aeabi_dcmpun+0x20>
  40e3f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e3f6:	d102      	bne.n	40e3fe <__aeabi_dcmpun+0x26>
  40e3f8:	f04f 0000 	mov.w	r0, #0
  40e3fc:	4770      	bx	lr
  40e3fe:	f04f 0001 	mov.w	r0, #1
  40e402:	4770      	bx	lr

0040e404 <__aeabi_d2iz>:
  40e404:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e408:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e40c:	d215      	bcs.n	40e43a <__aeabi_d2iz+0x36>
  40e40e:	d511      	bpl.n	40e434 <__aeabi_d2iz+0x30>
  40e410:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e414:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e418:	d912      	bls.n	40e440 <__aeabi_d2iz+0x3c>
  40e41a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e41e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e422:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e426:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e42a:	fa23 f002 	lsr.w	r0, r3, r2
  40e42e:	bf18      	it	ne
  40e430:	4240      	negne	r0, r0
  40e432:	4770      	bx	lr
  40e434:	f04f 0000 	mov.w	r0, #0
  40e438:	4770      	bx	lr
  40e43a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e43e:	d105      	bne.n	40e44c <__aeabi_d2iz+0x48>
  40e440:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40e444:	bf08      	it	eq
  40e446:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40e44a:	4770      	bx	lr
  40e44c:	f04f 0000 	mov.w	r0, #0
  40e450:	4770      	bx	lr
  40e452:	bf00      	nop

0040e454 <__aeabi_d2uiz>:
  40e454:	004a      	lsls	r2, r1, #1
  40e456:	d211      	bcs.n	40e47c <__aeabi_d2uiz+0x28>
  40e458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e45c:	d211      	bcs.n	40e482 <__aeabi_d2uiz+0x2e>
  40e45e:	d50d      	bpl.n	40e47c <__aeabi_d2uiz+0x28>
  40e460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e468:	d40e      	bmi.n	40e488 <__aeabi_d2uiz+0x34>
  40e46a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e46e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e476:	fa23 f002 	lsr.w	r0, r3, r2
  40e47a:	4770      	bx	lr
  40e47c:	f04f 0000 	mov.w	r0, #0
  40e480:	4770      	bx	lr
  40e482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e486:	d102      	bne.n	40e48e <__aeabi_d2uiz+0x3a>
  40e488:	f04f 30ff 	mov.w	r0, #4294967295
  40e48c:	4770      	bx	lr
  40e48e:	f04f 0000 	mov.w	r0, #0
  40e492:	4770      	bx	lr

0040e494 <__aeabi_d2f>:
  40e494:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e498:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40e49c:	bf24      	itt	cs
  40e49e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40e4a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40e4a6:	d90d      	bls.n	40e4c4 <__aeabi_d2f+0x30>
  40e4a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40e4ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40e4b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40e4b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40e4b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40e4bc:	bf08      	it	eq
  40e4be:	f020 0001 	biceq.w	r0, r0, #1
  40e4c2:	4770      	bx	lr
  40e4c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40e4c8:	d121      	bne.n	40e50e <__aeabi_d2f+0x7a>
  40e4ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40e4ce:	bfbc      	itt	lt
  40e4d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40e4d4:	4770      	bxlt	lr
  40e4d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e4da:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40e4de:	f1c2 0218 	rsb	r2, r2, #24
  40e4e2:	f1c2 0c20 	rsb	ip, r2, #32
  40e4e6:	fa10 f30c 	lsls.w	r3, r0, ip
  40e4ea:	fa20 f002 	lsr.w	r0, r0, r2
  40e4ee:	bf18      	it	ne
  40e4f0:	f040 0001 	orrne.w	r0, r0, #1
  40e4f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e4f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40e4fc:	fa03 fc0c 	lsl.w	ip, r3, ip
  40e500:	ea40 000c 	orr.w	r0, r0, ip
  40e504:	fa23 f302 	lsr.w	r3, r3, r2
  40e508:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40e50c:	e7cc      	b.n	40e4a8 <__aeabi_d2f+0x14>
  40e50e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40e512:	d107      	bne.n	40e524 <__aeabi_d2f+0x90>
  40e514:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40e518:	bf1e      	ittt	ne
  40e51a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40e51e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40e522:	4770      	bxne	lr
  40e524:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40e528:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40e52c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40e530:	4770      	bx	lr
  40e532:	bf00      	nop

0040e534 <__aeabi_uldivmod>:
  40e534:	b953      	cbnz	r3, 40e54c <__aeabi_uldivmod+0x18>
  40e536:	b94a      	cbnz	r2, 40e54c <__aeabi_uldivmod+0x18>
  40e538:	2900      	cmp	r1, #0
  40e53a:	bf08      	it	eq
  40e53c:	2800      	cmpeq	r0, #0
  40e53e:	bf1c      	itt	ne
  40e540:	f04f 31ff 	movne.w	r1, #4294967295
  40e544:	f04f 30ff 	movne.w	r0, #4294967295
  40e548:	f000 b97e 	b.w	40e848 <__aeabi_idiv0>
  40e54c:	f1ad 0c08 	sub.w	ip, sp, #8
  40e550:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40e554:	f000 f806 	bl	40e564 <__udivmoddi4>
  40e558:	f8dd e004 	ldr.w	lr, [sp, #4]
  40e55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40e560:	b004      	add	sp, #16
  40e562:	4770      	bx	lr

0040e564 <__udivmoddi4>:
  40e564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e568:	468c      	mov	ip, r1
  40e56a:	460e      	mov	r6, r1
  40e56c:	4604      	mov	r4, r0
  40e56e:	9d08      	ldr	r5, [sp, #32]
  40e570:	2b00      	cmp	r3, #0
  40e572:	d150      	bne.n	40e616 <__udivmoddi4+0xb2>
  40e574:	428a      	cmp	r2, r1
  40e576:	4617      	mov	r7, r2
  40e578:	d96c      	bls.n	40e654 <__udivmoddi4+0xf0>
  40e57a:	fab2 fe82 	clz	lr, r2
  40e57e:	f1be 0f00 	cmp.w	lr, #0
  40e582:	d00b      	beq.n	40e59c <__udivmoddi4+0x38>
  40e584:	f1ce 0420 	rsb	r4, lr, #32
  40e588:	fa20 f404 	lsr.w	r4, r0, r4
  40e58c:	fa01 f60e 	lsl.w	r6, r1, lr
  40e590:	ea44 0c06 	orr.w	ip, r4, r6
  40e594:	fa02 f70e 	lsl.w	r7, r2, lr
  40e598:	fa00 f40e 	lsl.w	r4, r0, lr
  40e59c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40e5a0:	0c22      	lsrs	r2, r4, #16
  40e5a2:	fbbc f0f9 	udiv	r0, ip, r9
  40e5a6:	fa1f f887 	uxth.w	r8, r7
  40e5aa:	fb09 c610 	mls	r6, r9, r0, ip
  40e5ae:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40e5b2:	fb00 f308 	mul.w	r3, r0, r8
  40e5b6:	42b3      	cmp	r3, r6
  40e5b8:	d909      	bls.n	40e5ce <__udivmoddi4+0x6a>
  40e5ba:	19f6      	adds	r6, r6, r7
  40e5bc:	f100 32ff 	add.w	r2, r0, #4294967295
  40e5c0:	f080 8122 	bcs.w	40e808 <__udivmoddi4+0x2a4>
  40e5c4:	42b3      	cmp	r3, r6
  40e5c6:	f240 811f 	bls.w	40e808 <__udivmoddi4+0x2a4>
  40e5ca:	3802      	subs	r0, #2
  40e5cc:	443e      	add	r6, r7
  40e5ce:	1af6      	subs	r6, r6, r3
  40e5d0:	b2a2      	uxth	r2, r4
  40e5d2:	fbb6 f3f9 	udiv	r3, r6, r9
  40e5d6:	fb09 6613 	mls	r6, r9, r3, r6
  40e5da:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40e5de:	fb03 f808 	mul.w	r8, r3, r8
  40e5e2:	45a0      	cmp	r8, r4
  40e5e4:	d909      	bls.n	40e5fa <__udivmoddi4+0x96>
  40e5e6:	19e4      	adds	r4, r4, r7
  40e5e8:	f103 32ff 	add.w	r2, r3, #4294967295
  40e5ec:	f080 810a 	bcs.w	40e804 <__udivmoddi4+0x2a0>
  40e5f0:	45a0      	cmp	r8, r4
  40e5f2:	f240 8107 	bls.w	40e804 <__udivmoddi4+0x2a0>
  40e5f6:	3b02      	subs	r3, #2
  40e5f8:	443c      	add	r4, r7
  40e5fa:	ebc8 0404 	rsb	r4, r8, r4
  40e5fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40e602:	2100      	movs	r1, #0
  40e604:	2d00      	cmp	r5, #0
  40e606:	d062      	beq.n	40e6ce <__udivmoddi4+0x16a>
  40e608:	fa24 f40e 	lsr.w	r4, r4, lr
  40e60c:	2300      	movs	r3, #0
  40e60e:	602c      	str	r4, [r5, #0]
  40e610:	606b      	str	r3, [r5, #4]
  40e612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e616:	428b      	cmp	r3, r1
  40e618:	d907      	bls.n	40e62a <__udivmoddi4+0xc6>
  40e61a:	2d00      	cmp	r5, #0
  40e61c:	d055      	beq.n	40e6ca <__udivmoddi4+0x166>
  40e61e:	2100      	movs	r1, #0
  40e620:	e885 0041 	stmia.w	r5, {r0, r6}
  40e624:	4608      	mov	r0, r1
  40e626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e62a:	fab3 f183 	clz	r1, r3
  40e62e:	2900      	cmp	r1, #0
  40e630:	f040 8090 	bne.w	40e754 <__udivmoddi4+0x1f0>
  40e634:	42b3      	cmp	r3, r6
  40e636:	d302      	bcc.n	40e63e <__udivmoddi4+0xda>
  40e638:	4282      	cmp	r2, r0
  40e63a:	f200 80f8 	bhi.w	40e82e <__udivmoddi4+0x2ca>
  40e63e:	1a84      	subs	r4, r0, r2
  40e640:	eb66 0603 	sbc.w	r6, r6, r3
  40e644:	2001      	movs	r0, #1
  40e646:	46b4      	mov	ip, r6
  40e648:	2d00      	cmp	r5, #0
  40e64a:	d040      	beq.n	40e6ce <__udivmoddi4+0x16a>
  40e64c:	e885 1010 	stmia.w	r5, {r4, ip}
  40e650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e654:	b912      	cbnz	r2, 40e65c <__udivmoddi4+0xf8>
  40e656:	2701      	movs	r7, #1
  40e658:	fbb7 f7f2 	udiv	r7, r7, r2
  40e65c:	fab7 fe87 	clz	lr, r7
  40e660:	f1be 0f00 	cmp.w	lr, #0
  40e664:	d135      	bne.n	40e6d2 <__udivmoddi4+0x16e>
  40e666:	1bf3      	subs	r3, r6, r7
  40e668:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40e66c:	fa1f fc87 	uxth.w	ip, r7
  40e670:	2101      	movs	r1, #1
  40e672:	fbb3 f0f8 	udiv	r0, r3, r8
  40e676:	0c22      	lsrs	r2, r4, #16
  40e678:	fb08 3610 	mls	r6, r8, r0, r3
  40e67c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40e680:	fb0c f300 	mul.w	r3, ip, r0
  40e684:	42b3      	cmp	r3, r6
  40e686:	d907      	bls.n	40e698 <__udivmoddi4+0x134>
  40e688:	19f6      	adds	r6, r6, r7
  40e68a:	f100 32ff 	add.w	r2, r0, #4294967295
  40e68e:	d202      	bcs.n	40e696 <__udivmoddi4+0x132>
  40e690:	42b3      	cmp	r3, r6
  40e692:	f200 80ce 	bhi.w	40e832 <__udivmoddi4+0x2ce>
  40e696:	4610      	mov	r0, r2
  40e698:	1af6      	subs	r6, r6, r3
  40e69a:	b2a2      	uxth	r2, r4
  40e69c:	fbb6 f3f8 	udiv	r3, r6, r8
  40e6a0:	fb08 6613 	mls	r6, r8, r3, r6
  40e6a4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40e6a8:	fb0c fc03 	mul.w	ip, ip, r3
  40e6ac:	45a4      	cmp	ip, r4
  40e6ae:	d907      	bls.n	40e6c0 <__udivmoddi4+0x15c>
  40e6b0:	19e4      	adds	r4, r4, r7
  40e6b2:	f103 32ff 	add.w	r2, r3, #4294967295
  40e6b6:	d202      	bcs.n	40e6be <__udivmoddi4+0x15a>
  40e6b8:	45a4      	cmp	ip, r4
  40e6ba:	f200 80b5 	bhi.w	40e828 <__udivmoddi4+0x2c4>
  40e6be:	4613      	mov	r3, r2
  40e6c0:	ebcc 0404 	rsb	r4, ip, r4
  40e6c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40e6c8:	e79c      	b.n	40e604 <__udivmoddi4+0xa0>
  40e6ca:	4629      	mov	r1, r5
  40e6cc:	4628      	mov	r0, r5
  40e6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e6d2:	f1ce 0120 	rsb	r1, lr, #32
  40e6d6:	fa06 f30e 	lsl.w	r3, r6, lr
  40e6da:	fa07 f70e 	lsl.w	r7, r7, lr
  40e6de:	fa20 f901 	lsr.w	r9, r0, r1
  40e6e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40e6e6:	40ce      	lsrs	r6, r1
  40e6e8:	ea49 0903 	orr.w	r9, r9, r3
  40e6ec:	fbb6 faf8 	udiv	sl, r6, r8
  40e6f0:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40e6f4:	fb08 661a 	mls	r6, r8, sl, r6
  40e6f8:	fa1f fc87 	uxth.w	ip, r7
  40e6fc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40e700:	fb0a f20c 	mul.w	r2, sl, ip
  40e704:	429a      	cmp	r2, r3
  40e706:	fa00 f40e 	lsl.w	r4, r0, lr
  40e70a:	d90a      	bls.n	40e722 <__udivmoddi4+0x1be>
  40e70c:	19db      	adds	r3, r3, r7
  40e70e:	f10a 31ff 	add.w	r1, sl, #4294967295
  40e712:	f080 8087 	bcs.w	40e824 <__udivmoddi4+0x2c0>
  40e716:	429a      	cmp	r2, r3
  40e718:	f240 8084 	bls.w	40e824 <__udivmoddi4+0x2c0>
  40e71c:	f1aa 0a02 	sub.w	sl, sl, #2
  40e720:	443b      	add	r3, r7
  40e722:	1a9b      	subs	r3, r3, r2
  40e724:	fa1f f989 	uxth.w	r9, r9
  40e728:	fbb3 f1f8 	udiv	r1, r3, r8
  40e72c:	fb08 3311 	mls	r3, r8, r1, r3
  40e730:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40e734:	fb01 f60c 	mul.w	r6, r1, ip
  40e738:	429e      	cmp	r6, r3
  40e73a:	d907      	bls.n	40e74c <__udivmoddi4+0x1e8>
  40e73c:	19db      	adds	r3, r3, r7
  40e73e:	f101 32ff 	add.w	r2, r1, #4294967295
  40e742:	d26b      	bcs.n	40e81c <__udivmoddi4+0x2b8>
  40e744:	429e      	cmp	r6, r3
  40e746:	d969      	bls.n	40e81c <__udivmoddi4+0x2b8>
  40e748:	3902      	subs	r1, #2
  40e74a:	443b      	add	r3, r7
  40e74c:	1b9b      	subs	r3, r3, r6
  40e74e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40e752:	e78e      	b.n	40e672 <__udivmoddi4+0x10e>
  40e754:	f1c1 0e20 	rsb	lr, r1, #32
  40e758:	fa22 f40e 	lsr.w	r4, r2, lr
  40e75c:	408b      	lsls	r3, r1
  40e75e:	4323      	orrs	r3, r4
  40e760:	fa20 f70e 	lsr.w	r7, r0, lr
  40e764:	fa06 f401 	lsl.w	r4, r6, r1
  40e768:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40e76c:	fa26 f60e 	lsr.w	r6, r6, lr
  40e770:	433c      	orrs	r4, r7
  40e772:	fbb6 f9fc 	udiv	r9, r6, ip
  40e776:	0c27      	lsrs	r7, r4, #16
  40e778:	fb0c 6619 	mls	r6, ip, r9, r6
  40e77c:	fa1f f883 	uxth.w	r8, r3
  40e780:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40e784:	fb09 f708 	mul.w	r7, r9, r8
  40e788:	42b7      	cmp	r7, r6
  40e78a:	fa02 f201 	lsl.w	r2, r2, r1
  40e78e:	fa00 fa01 	lsl.w	sl, r0, r1
  40e792:	d908      	bls.n	40e7a6 <__udivmoddi4+0x242>
  40e794:	18f6      	adds	r6, r6, r3
  40e796:	f109 30ff 	add.w	r0, r9, #4294967295
  40e79a:	d241      	bcs.n	40e820 <__udivmoddi4+0x2bc>
  40e79c:	42b7      	cmp	r7, r6
  40e79e:	d93f      	bls.n	40e820 <__udivmoddi4+0x2bc>
  40e7a0:	f1a9 0902 	sub.w	r9, r9, #2
  40e7a4:	441e      	add	r6, r3
  40e7a6:	1bf6      	subs	r6, r6, r7
  40e7a8:	b2a0      	uxth	r0, r4
  40e7aa:	fbb6 f4fc 	udiv	r4, r6, ip
  40e7ae:	fb0c 6614 	mls	r6, ip, r4, r6
  40e7b2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40e7b6:	fb04 f808 	mul.w	r8, r4, r8
  40e7ba:	45b8      	cmp	r8, r7
  40e7bc:	d907      	bls.n	40e7ce <__udivmoddi4+0x26a>
  40e7be:	18ff      	adds	r7, r7, r3
  40e7c0:	f104 30ff 	add.w	r0, r4, #4294967295
  40e7c4:	d228      	bcs.n	40e818 <__udivmoddi4+0x2b4>
  40e7c6:	45b8      	cmp	r8, r7
  40e7c8:	d926      	bls.n	40e818 <__udivmoddi4+0x2b4>
  40e7ca:	3c02      	subs	r4, #2
  40e7cc:	441f      	add	r7, r3
  40e7ce:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40e7d2:	ebc8 0707 	rsb	r7, r8, r7
  40e7d6:	fba0 8902 	umull	r8, r9, r0, r2
  40e7da:	454f      	cmp	r7, r9
  40e7dc:	4644      	mov	r4, r8
  40e7de:	464e      	mov	r6, r9
  40e7e0:	d314      	bcc.n	40e80c <__udivmoddi4+0x2a8>
  40e7e2:	d029      	beq.n	40e838 <__udivmoddi4+0x2d4>
  40e7e4:	b365      	cbz	r5, 40e840 <__udivmoddi4+0x2dc>
  40e7e6:	ebba 0304 	subs.w	r3, sl, r4
  40e7ea:	eb67 0706 	sbc.w	r7, r7, r6
  40e7ee:	fa07 fe0e 	lsl.w	lr, r7, lr
  40e7f2:	40cb      	lsrs	r3, r1
  40e7f4:	40cf      	lsrs	r7, r1
  40e7f6:	ea4e 0303 	orr.w	r3, lr, r3
  40e7fa:	e885 0088 	stmia.w	r5, {r3, r7}
  40e7fe:	2100      	movs	r1, #0
  40e800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e804:	4613      	mov	r3, r2
  40e806:	e6f8      	b.n	40e5fa <__udivmoddi4+0x96>
  40e808:	4610      	mov	r0, r2
  40e80a:	e6e0      	b.n	40e5ce <__udivmoddi4+0x6a>
  40e80c:	ebb8 0402 	subs.w	r4, r8, r2
  40e810:	eb69 0603 	sbc.w	r6, r9, r3
  40e814:	3801      	subs	r0, #1
  40e816:	e7e5      	b.n	40e7e4 <__udivmoddi4+0x280>
  40e818:	4604      	mov	r4, r0
  40e81a:	e7d8      	b.n	40e7ce <__udivmoddi4+0x26a>
  40e81c:	4611      	mov	r1, r2
  40e81e:	e795      	b.n	40e74c <__udivmoddi4+0x1e8>
  40e820:	4681      	mov	r9, r0
  40e822:	e7c0      	b.n	40e7a6 <__udivmoddi4+0x242>
  40e824:	468a      	mov	sl, r1
  40e826:	e77c      	b.n	40e722 <__udivmoddi4+0x1be>
  40e828:	3b02      	subs	r3, #2
  40e82a:	443c      	add	r4, r7
  40e82c:	e748      	b.n	40e6c0 <__udivmoddi4+0x15c>
  40e82e:	4608      	mov	r0, r1
  40e830:	e70a      	b.n	40e648 <__udivmoddi4+0xe4>
  40e832:	3802      	subs	r0, #2
  40e834:	443e      	add	r6, r7
  40e836:	e72f      	b.n	40e698 <__udivmoddi4+0x134>
  40e838:	45c2      	cmp	sl, r8
  40e83a:	d3e7      	bcc.n	40e80c <__udivmoddi4+0x2a8>
  40e83c:	463e      	mov	r6, r7
  40e83e:	e7d1      	b.n	40e7e4 <__udivmoddi4+0x280>
  40e840:	4629      	mov	r1, r5
  40e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e846:	bf00      	nop

0040e848 <__aeabi_idiv0>:
  40e848:	4770      	bx	lr
  40e84a:	bf00      	nop
  40e84c:	7774654e 	.word	0x7774654e
  40e850:	696b726f 	.word	0x696b726f
  40e854:	203a676e 	.word	0x203a676e
  40e858:	6c696166 	.word	0x6c696166
  40e85c:	74206465 	.word	0x74206465
  40e860:	7263206f 	.word	0x7263206f
  40e864:	65746165 	.word	0x65746165
  40e868:	50435420 	.word	0x50435420
  40e86c:	696c6320 	.word	0x696c6320
  40e870:	20746e65 	.word	0x20746e65
  40e874:	6b636f73 	.word	0x6b636f73
  40e878:	65207465 	.word	0x65207465
  40e87c:	726f7272 	.word	0x726f7272
  40e880:	000a0d21 	.word	0x000a0d21
  40e884:	7774654e 	.word	0x7774654e
  40e888:	696b726f 	.word	0x696b726f
  40e88c:	203a676e 	.word	0x203a676e
  40e890:	6c696166 	.word	0x6c696166
  40e894:	74206465 	.word	0x74206465
  40e898:	6f63206f 	.word	0x6f63206f
  40e89c:	63656e6e 	.word	0x63656e6e
  40e8a0:	43542074 	.word	0x43542074
  40e8a4:	6c632050 	.word	0x6c632050
  40e8a8:	746e6569 	.word	0x746e6569
  40e8ac:	636f7320 	.word	0x636f7320
  40e8b0:	2074656b 	.word	0x2074656b
  40e8b4:	6f727265 	.word	0x6f727265
  40e8b8:	0a0d2172 	.word	0x0a0d2172
  40e8bc:	00000000 	.word	0x00000000
  40e8c0:	5f706374 	.word	0x5f706374
  40e8c4:	74726f70 	.word	0x74726f70
  40e8c8:	6378655f 	.word	0x6378655f
  40e8cc:	676e6168 	.word	0x676e6168
  40e8d0:	6f735f65 	.word	0x6f735f65
  40e8d4:	74656b63 	.word	0x74656b63
  40e8d8:	6f63203a 	.word	0x6f63203a
  40e8dc:	63656e6e 	.word	0x63656e6e
  40e8e0:	75732074 	.word	0x75732074
  40e8e4:	73656363 	.word	0x73656363
  40e8e8:	0a0d2173 	.word	0x0a0d2173
  40e8ec:	00000000 	.word	0x00000000
  40e8f0:	00006425 	.word	0x00006425
  40e8f4:	5f706374 	.word	0x5f706374
  40e8f8:	74726f70 	.word	0x74726f70
  40e8fc:	6378655f 	.word	0x6378655f
  40e900:	676e6168 	.word	0x676e6168
  40e904:	6f735f65 	.word	0x6f735f65
  40e908:	74656b63 	.word	0x74656b63
  40e90c:	6f63203a 	.word	0x6f63203a
  40e910:	63656e6e 	.word	0x63656e6e
  40e914:	72652074 	.word	0x72652074
  40e918:	21726f72 	.word	0x21726f72
  40e91c:	00000a0d 	.word	0x00000a0d
  40e920:	5f706374 	.word	0x5f706374
  40e924:	74726f70 	.word	0x74726f70
  40e928:	6378655f 	.word	0x6378655f
  40e92c:	676e6168 	.word	0x676e6168
  40e930:	6f735f65 	.word	0x6f735f65
  40e934:	74656b63 	.word	0x74656b63
  40e938:	6572203a 	.word	0x6572203a
  40e93c:	73207663 	.word	0x73207663
  40e940:	65636375 	.word	0x65636375
  40e944:	0d217373 	.word	0x0d217373
  40e948:	0000000a 	.word	0x0000000a
  40e94c:	74736f48 	.word	0x74736f48
  40e950:	726f7020 	.word	0x726f7020
  40e954:	65722074 	.word	0x65722074
  40e958:	766c6f73 	.word	0x766c6f73
  40e95c:	74206465 	.word	0x74206465
  40e960:	28203a6f 	.word	0x28203a6f
  40e964:	0d296425 	.word	0x0d296425
  40e968:	0000000a 	.word	0x0000000a
  40e96c:	5f706374 	.word	0x5f706374
  40e970:	74726f70 	.word	0x74726f70
  40e974:	6378655f 	.word	0x6378655f
  40e978:	676e6168 	.word	0x676e6168
  40e97c:	6f735f65 	.word	0x6f735f65
  40e980:	74656b63 	.word	0x74656b63
  40e984:	6572203a 	.word	0x6572203a
  40e988:	65207663 	.word	0x65207663
  40e98c:	726f7272 	.word	0x726f7272
  40e990:	000a0d21 	.word	0x000a0d21
  40e994:	5f706475 	.word	0x5f706475
  40e998:	6d6d6f63 	.word	0x6d6d6f63
  40e99c:	5f646e61 	.word	0x5f646e61
  40e9a0:	6b636f73 	.word	0x6b636f73
  40e9a4:	203a7465 	.word	0x203a7465
  40e9a8:	646e6942 	.word	0x646e6942
  40e9ac:	69614620 	.word	0x69614620
  40e9b0:	0a64656c 	.word	0x0a64656c
  40e9b4:	00000000 	.word	0x00000000
  40e9b8:	5f706475 	.word	0x5f706475
  40e9bc:	6d6d6f63 	.word	0x6d6d6f63
  40e9c0:	5f646e61 	.word	0x5f646e61
  40e9c4:	6b636f73 	.word	0x6b636f73
  40e9c8:	203a7465 	.word	0x203a7465
  40e9cc:	76636572 	.word	0x76636572
  40e9d0:	6d6f7266 	.word	0x6d6f7266
  40e9d4:	63757320 	.word	0x63757320
  40e9d8:	73736563 	.word	0x73736563
  40e9dc:	000a0d21 	.word	0x000a0d21
  40e9e0:	5f706475 	.word	0x5f706475
  40e9e4:	6d6d6f63 	.word	0x6d6d6f63
  40e9e8:	5f646e61 	.word	0x5f646e61
  40e9ec:	6b636f73 	.word	0x6b636f73
  40e9f0:	203a7465 	.word	0x203a7465
  40e9f4:	6d6d6f63 	.word	0x6d6d6f63
  40e9f8:	20646e61 	.word	0x20646e61
  40e9fc:	65636572 	.word	0x65636572
  40ea00:	64657669 	.word	0x64657669
  40ea04:	7325203a 	.word	0x7325203a
  40ea08:	00000a0d 	.word	0x00000a0d
  40ea0c:	5f706374 	.word	0x5f706374
  40ea10:	74746573 	.word	0x74746573
  40ea14:	73676e69 	.word	0x73676e69
  40ea18:	73696c5f 	.word	0x73696c5f
  40ea1c:	5f6e6574 	.word	0x5f6e6574
  40ea20:	6b636f73 	.word	0x6b636f73
  40ea24:	203a7465 	.word	0x203a7465
  40ea28:	646e6942 	.word	0x646e6942
  40ea2c:	69614620 	.word	0x69614620
  40ea30:	0a64656c 	.word	0x0a64656c
  40ea34:	00000000 	.word	0x00000000
  40ea38:	5f706374 	.word	0x5f706374
  40ea3c:	74746573 	.word	0x74746573
  40ea40:	73676e69 	.word	0x73676e69
  40ea44:	73696c5f 	.word	0x73696c5f
  40ea48:	5f6e6574 	.word	0x5f6e6574
  40ea4c:	6b636f73 	.word	0x6b636f73
  40ea50:	203a7465 	.word	0x203a7465
  40ea54:	7473696c 	.word	0x7473696c
  40ea58:	73206e65 	.word	0x73206e65
  40ea5c:	65636375 	.word	0x65636375
  40ea60:	0d217373 	.word	0x0d217373
  40ea64:	0000000a 	.word	0x0000000a
  40ea68:	5f706374 	.word	0x5f706374
  40ea6c:	74746573 	.word	0x74746573
  40ea70:	73676e69 	.word	0x73676e69
  40ea74:	73696c5f 	.word	0x73696c5f
  40ea78:	5f6e6574 	.word	0x5f6e6574
  40ea7c:	6b636f73 	.word	0x6b636f73
  40ea80:	203a7465 	.word	0x203a7465
  40ea84:	7473696c 	.word	0x7473696c
  40ea88:	46206e65 	.word	0x46206e65
  40ea8c:	656c6961 	.word	0x656c6961
  40ea90:	52202e64 	.word	0x52202e64
  40ea94:	61747365 	.word	0x61747365
  40ea98:	6e697472 	.word	0x6e697472
  40ea9c:	2e2e2e67 	.word	0x2e2e2e67
  40eaa0:	0000000a 	.word	0x0000000a
  40eaa4:	5f706374 	.word	0x5f706374
  40eaa8:	74746573 	.word	0x74746573
  40eaac:	73676e69 	.word	0x73676e69
  40eab0:	73696c5f 	.word	0x73696c5f
  40eab4:	5f6e6574 	.word	0x5f6e6574
  40eab8:	6b636f73 	.word	0x6b636f73
  40eabc:	203a7465 	.word	0x203a7465
  40eac0:	65636361 	.word	0x65636361
  40eac4:	73207470 	.word	0x73207470
  40eac8:	65636375 	.word	0x65636375
  40eacc:	0d217373 	.word	0x0d217373
  40ead0:	0000000a 	.word	0x0000000a
  40ead4:	5f706374 	.word	0x5f706374
  40ead8:	74746573 	.word	0x74746573
  40eadc:	73676e69 	.word	0x73676e69
  40eae0:	73696c5f 	.word	0x73696c5f
  40eae4:	5f6e6574 	.word	0x5f6e6574
  40eae8:	6b636f73 	.word	0x6b636f73
  40eaec:	203a7465 	.word	0x203a7465
  40eaf0:	65636341 	.word	0x65636341
  40eaf4:	46207470 	.word	0x46207470
  40eaf8:	656c6961 	.word	0x656c6961
  40eafc:	00000a64 	.word	0x00000a64
  40eb00:	5f706374 	.word	0x5f706374
  40eb04:	74746573 	.word	0x74746573
  40eb08:	73676e69 	.word	0x73676e69
  40eb0c:	7461645f 	.word	0x7461645f
  40eb10:	6f735f61 	.word	0x6f735f61
  40eb14:	74656b63 	.word	0x74656b63
  40eb18:	6573203a 	.word	0x6573203a
  40eb1c:	6e697474 	.word	0x6e697474
  40eb20:	72207367 	.word	0x72207367
  40eb24:	69656365 	.word	0x69656365
  40eb28:	3a646576 	.word	0x3a646576
  40eb2c:	0d732520 	.word	0x0d732520
  40eb30:	0000000a 	.word	0x0000000a
  40eb34:	2a444d43 	.word	0x2a444d43
  40eb38:	00004b4f 	.word	0x00004b4f
  40eb3c:	5f706374 	.word	0x5f706374
  40eb40:	74746573 	.word	0x74746573
  40eb44:	73676e69 	.word	0x73676e69
  40eb48:	7461645f 	.word	0x7461645f
  40eb4c:	6f735f61 	.word	0x6f735f61
  40eb50:	74656b63 	.word	0x74656b63
  40eb54:	6f63203a 	.word	0x6f63203a
  40eb58:	6769666e 	.word	0x6769666e
  40eb5c:	74617275 	.word	0x74617275
  40eb60:	206e6f69 	.word	0x206e6f69
  40eb64:	63637573 	.word	0x63637573
  40eb68:	66737365 	.word	0x66737365
  40eb6c:	202e6c75 	.word	0x202e6c75
  40eb70:	646e6553 	.word	0x646e6553
  40eb74:	20676e69 	.word	0x20676e69
  40eb78:	2e4b4341 	.word	0x2e4b4341
  40eb7c:	0a0d2e2e 	.word	0x0a0d2e2e
  40eb80:	00000000 	.word	0x00000000
  40eb84:	5f706475 	.word	0x5f706475
  40eb88:	74617473 	.word	0x74617473
  40eb8c:	735f7375 	.word	0x735f7375
  40eb90:	656b636f 	.word	0x656b636f
  40eb94:	53203a74 	.word	0x53203a74
  40eb98:	75746174 	.word	0x75746174
  40eb9c:	65732073 	.word	0x65732073
  40eba0:	0d21746e 	.word	0x0d21746e
  40eba4:	0000000a 	.word	0x0000000a
  40eba8:	462d6957 	.word	0x462d6957
  40ebac:	69642069 	.word	0x69642069
  40ebb0:	6e6f6373 	.word	0x6e6f6373
  40ebb4:	7463656e 	.word	0x7463656e
  40ebb8:	0a0d6465 	.word	0x0a0d6465
  40ebbc:	00000000 	.word	0x00000000
  40ebc0:	462d6957 	.word	0x462d6957
  40ebc4:	6f632069 	.word	0x6f632069
  40ebc8:	63656e6e 	.word	0x63656e6e
  40ebcc:	0d646574 	.word	0x0d646574
  40ebd0:	0000000a 	.word	0x0000000a
  40ebd4:	462d6957 	.word	0x462d6957
  40ebd8:	50492069 	.word	0x50492069
  40ebdc:	20736920 	.word	0x20736920
  40ebe0:	252e7525 	.word	0x252e7525
  40ebe4:	75252e75 	.word	0x75252e75
  40ebe8:	0d75252e 	.word	0x0d75252e
  40ebec:	0000000a 	.word	0x0000000a
  40ebf0:	462d6957 	.word	0x462d6957
  40ebf4:	72472069 	.word	0x72472069
  40ebf8:	2070756f 	.word	0x2070756f
  40ebfc:	656e776f 	.word	0x656e776f
  40ec00:	50492072 	.word	0x50492072
  40ec04:	20736920 	.word	0x20736920
  40ec08:	252e7525 	.word	0x252e7525
  40ec0c:	75252e75 	.word	0x75252e75
  40ec10:	0d75252e 	.word	0x0d75252e
  40ec14:	0000000a 	.word	0x0000000a
  40ec18:	69466957 	.word	0x69466957
  40ec1c:	5032505f 	.word	0x5032505f
  40ec20:	326d203a 	.word	0x326d203a
  40ec24:	69775f6d 	.word	0x69775f6d
  40ec28:	695f6966 	.word	0x695f6966
  40ec2c:	2074696e 	.word	0x2074696e
  40ec30:	6c6c6163 	.word	0x6c6c6163
  40ec34:	72726520 	.word	0x72726520
  40ec38:	2821726f 	.word	0x2821726f
  40ec3c:	0d296425 	.word	0x0d296425
  40ec40:	0000000a 	.word	0x0000000a
  40ec44:	68636142 	.word	0x68636142
  40ec48:	726f6c65 	.word	0x726f6c65
  40ec4c:	6f476f47 	.word	0x6f476f47
  40ec50:	626f522a 	.word	0x626f522a
  40ec54:	476f476f 	.word	0x476f476f
  40ec58:	0000006f 	.word	0x0000006f
  40ec5c:	69466957 	.word	0x69466957
  40ec60:	5032505f 	.word	0x5032505f
  40ec64:	326d203a 	.word	0x326d203a
  40ec68:	69775f6d 	.word	0x69775f6d
  40ec6c:	735f6966 	.word	0x735f6966
  40ec70:	645f7465 	.word	0x645f7465
  40ec74:	63697665 	.word	0x63697665
  40ec78:	616e5f65 	.word	0x616e5f65
  40ec7c:	6320656d 	.word	0x6320656d
  40ec80:	206c6c61 	.word	0x206c6c61
  40ec84:	6f727265 	.word	0x6f727265
  40ec88:	0a0d2172 	.word	0x0a0d2172
  40ec8c:	00000000 	.word	0x00000000
  40ec90:	69466957 	.word	0x69466957
  40ec94:	5032505f 	.word	0x5032505f
  40ec98:	326d203a 	.word	0x326d203a
  40ec9c:	69775f6d 	.word	0x69775f6d
  40eca0:	705f6966 	.word	0x705f6966
  40eca4:	63207032 	.word	0x63207032
  40eca8:	206c6c61 	.word	0x206c6c61
  40ecac:	6f727265 	.word	0x6f727265
  40ecb0:	0a0d2172 	.word	0x0a0d2172
  40ecb4:	00000000 	.word	0x00000000
  40ecb8:	20503250 	.word	0x20503250
  40ecbc:	65646f6d 	.word	0x65646f6d
  40ecc0:	61747320 	.word	0x61747320
  40ecc4:	64657472 	.word	0x64657472
  40ecc8:	7325202e 	.word	0x7325202e
  40eccc:	20736920 	.word	0x20736920
  40ecd0:	69617761 	.word	0x69617761
  40ecd4:	676e6974 	.word	0x676e6974
  40ecd8:	6e6f6320 	.word	0x6e6f6320
  40ecdc:	7463656e 	.word	0x7463656e
  40ece0:	2e6e6f69 	.word	0x2e6e6f69
  40ece4:	00000a0d 	.word	0x00000a0d
  40ece8:	2a444d43 	.word	0x2a444d43
  40ecec:	00005443 	.word	0x00005443
  40ecf0:	0000003b 	.word	0x0000003b
  40ecf4:	25203a58 	.word	0x25203a58
  40ecf8:	25282073 	.word	0x25282073
  40ecfc:	0a0d2964 	.word	0x0a0d2964
  40ed00:	00000000 	.word	0x00000000
  40ed04:	25203a59 	.word	0x25203a59
  40ed08:	25282073 	.word	0x25282073
  40ed0c:	0a0d2964 	.word	0x0a0d2964
  40ed10:	00000000 	.word	0x00000000
  40ed14:	00727750 	.word	0x00727750
  40ed18:	3a727750 	.word	0x3a727750
  40ed1c:	20732520 	.word	0x20732520
  40ed20:	29642528 	.word	0x29642528
  40ed24:	00000a0d 	.word	0x00000a0d
  40ed28:	006c6741 	.word	0x006c6741
  40ed2c:	3a676e41 	.word	0x3a676e41
  40ed30:	20732520 	.word	0x20732520
  40ed34:	29642528 	.word	0x29642528
  40ed38:	00000a0d 	.word	0x00000a0d
  40ed3c:	75657551 	.word	0x75657551
  40ed40:	72772065 	.word	0x72772065
  40ed44:	20657469 	.word	0x20657469
  40ed48:	0a0d4b4f 	.word	0x0a0d4b4f
  40ed4c:	00000000 	.word	0x00000000
  40ed50:	4b435546 	.word	0x4b435546
  40ed54:	00000a0d 	.word	0x00000a0d
  40ed58:	2a444d43 	.word	0x2a444d43
  40ed5c:	00004553 	.word	0x00004553
  40ed60:	656d614e 	.word	0x656d614e
  40ed64:	00000000 	.word	0x00000000
  40ed68:	656d614e 	.word	0x656d614e
  40ed6c:	7325203a 	.word	0x7325203a
  40ed70:	00000a0d 	.word	0x00000a0d
  40ed74:	69737341 	.word	0x69737341
  40ed78:	64657473 	.word	0x64657473
  40ed7c:	00000000 	.word	0x00000000
  40ed80:	69737341 	.word	0x69737341
  40ed84:	64657473 	.word	0x64657473
  40ed88:	69724420 	.word	0x69724420
  40ed8c:	4d206576 	.word	0x4d206576
  40ed90:	3a65646f 	.word	0x3a65646f
  40ed94:	0d642520 	.word	0x0d642520
  40ed98:	0000000a 	.word	0x0000000a
  40ed9c:	65776f50 	.word	0x65776f50
  40eda0:	646f4d72 	.word	0x646f4d72
  40eda4:	00000065 	.word	0x00000065
  40eda8:	65776f50 	.word	0x65776f50
  40edac:	61532072 	.word	0x61532072
  40edb0:	4d206576 	.word	0x4d206576
  40edb4:	3a65646f 	.word	0x3a65646f
  40edb8:	0d642520 	.word	0x0d642520
  40edbc:	0000000a 	.word	0x0000000a
  40edc0:	65646956 	.word	0x65646956
  40edc4:	6175516f 	.word	0x6175516f
  40edc8:	7974696c 	.word	0x7974696c
  40edcc:	00000000 	.word	0x00000000
  40edd0:	65646956 	.word	0x65646956
  40edd4:	7551206f 	.word	0x7551206f
  40edd8:	74696c61 	.word	0x74696c61
  40eddc:	25203a79 	.word	0x25203a79
  40ede0:	000a0d64 	.word	0x000a0d64
  40ede4:	2a444d43 	.word	0x2a444d43
  40ede8:	00005453 	.word	0x00005453
  40edec:	74746142 	.word	0x74746142
  40edf0:	00797265 	.word	0x00797265
  40edf4:	656d6143 	.word	0x656d6143
  40edf8:	00006172 	.word	0x00006172
  40edfc:	63617053 	.word	0x63617053
  40ee00:	00000065 	.word	0x00000065
  40ee04:	616d6552 	.word	0x616d6552
  40ee08:	6e696e69 	.word	0x6e696e69
  40ee0c:	00000067 	.word	0x00000067
  40ee10:	50504128 	.word	0x50504128
  40ee14:	52452829 	.word	0x52452829
  40ee18:	255b2952 	.word	0x255b2952
  40ee1c:	255b5d73 	.word	0x255b5d73
  40ee20:	00005d64 	.word	0x00005d64
  40ee24:	61766e69 	.word	0x61766e69
  40ee28:	6564696c 	.word	0x6564696c
  40ee2c:	636f6920 	.word	0x636f6920
  40ee30:	6320746c 	.word	0x6320746c
  40ee34:	000a646d 	.word	0x000a646d
  40ee38:	0000000d 	.word	0x0000000d

0040ee3c <__FUNCTION__.8943>:
  40ee3c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

0040ee4c <__FUNCTION__.10097>:
  40ee4c:	5f666968 00727369                       hif_isr.

0040ee54 <__FUNCTION__.10103>:
  40ee54:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
  40ee64:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
  40ee74:	74207075 63206568 0a706968 00000000     up the chip.....
  40ee84:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40ee94:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40eea4:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40eeb4:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40eec4:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40eed4:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40eee4:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40eef4:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40ef04:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40ef14:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40ef24:	61207473 64207070 276e6469 65732074     st app didn't se
  40ef34:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40ef44:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40ef54:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40ef64:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40ef74:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40ef84:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40ef94:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40efa4:	7075656b 65687420 69686320 00000a70     keup the chip...
  40efb4:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40efc4:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40efd4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40efe4:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40eff4:	696c6176 72612064 656d7567 000a746e     valid argument..
  40f004:	20505041 75716552 65747365 69532064     APP Requested Si
  40f014:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40f024:	6874206e 65722065 65766963 75622064     n the recived bu
  40f034:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40f044:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40f054:	64412064 73657264 65622073 646e6f79     d Address beyond
  40f064:	65687420 63657220 64657669 66756220      the recived buf
  40f074:	20726566 72646461 20737365 20646e61     fer address and 
  40f084:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40f094:	0000000a                                ....

0040f098 <__FUNCTION__.10118>:
  40f098:	5f666968 65636572 00657669              hif_receive.

0040f0a4 <__FUNCTION__.10133>:
  40f0a4:	5f666968 69676572 72657473 0062635f     hif_register_cb.

0040f0b4 <__FUNCTION__.10087>:
  40f0b4:	5f666968 646e6573 00000000              hif_send....

0040f0c0 <__FUNCTION__.8127>:
  40f0c0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040f0cc <__FUNCTION__.8254>:
  40f0cc:	5f6d326d 69666977 7032705f 00000000     m2m_wifi_p2p....

0040f0dc <__FUNCTION__.8151>:
  40f0dc:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...
  40f0ec:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
  40f0fc:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
  40f10c:	75252e75 2075252e 000a2022 20514552     u.%u.%u " ..REQ 
  40f11c:	20746f4e 69666564 2064656e 000a6425     Not defined %d..
  40f12c:	41564e49 2044494c 4e494f50 0a524554     INVALID POINTER.
  40f13c:	00000000 41564e49 2044494c 44495353     ....INVALID SSID
  40f14c:	0000000a 41564e49 2044494c 000a4843     ....INVALID CH..
  40f15c:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
  40f16c:	20524556 000a5049 41564e49 2044494c     VER IP..INVALID 
  40f17c:	2059454b 45444e49 00000a58 41564e49     KEY INDEX...INVA
  40f18c:	2044494c 2059454b 455a4953 0000000a     LID KEY SIZE....
  40f19c:	41564e49 2044494c 20504557 0a59454b     INVALID WEP KEY.
  40f1ac:	00000000 41564e49 2044494c 48545541     ....INVALID AUTH
  40f1bc:	49544e45 49544143 4d204e4f 0a45444f     ENTICATION MODE.
  40f1cc:	00000000 6d726946 65726177 72657620     ....Firmware ver
  40f1dc:	3a202020 2e752520 252e7525 00000a75        : %u.%u.%u...
  40f1ec:	206e694d 76697264 76207265 3a207265     Min driver ver :
  40f1fc:	2e752520 252e7525 00000a75 72727543      %u.%u.%u...Curr
  40f20c:	69726420 20726576 3a726576 2e752520      driver ver: %u.
  40f21c:	252e7525 00000a75 6d73694d 68637461     %u.%u...Mismatch
  40f22c:	72694620 7277616d 65562065 6f697372      Firmawre Versio
  40f23c:	00000a6e 2079654b 6e207369 7620746f     n...Key is not v
  40f24c:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40f25c:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40f26c:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40f27c:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40f28c:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40f29c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40f2ac:	2079656b 676e656c 25206874 00000a64     key length %d...
  40f2bc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40f2cc:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40f2dc:	656e6966 65732064 79742063 000a6570     fined sec type..
  40f2ec:	41564e49 2044494c 6f206f4e 63732066     INVALID No of sc
  40f2fc:	73206e61 73746f6c 00000a21 41564e49     an slots!...INVA
  40f30c:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
  40f31c:	0a21656d 00000000 41564e49 2044494c     me!.....INVALID 
  40f32c:	6f206f4e 72702066 2065626f 75716572     No of probe requ
  40f33c:	73747365 72657020 61637320 6c73206e     ests per scan sl
  40f34c:	000a746f 41564e49 2044494c 49535352     ot..INVALID RSSI
  40f35c:	72687420 6f687365 2520646c 000a2064      threshold %d ..
  40f36c:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
  40f37c:	6420746f 6e696665 000a6465 7473694c     ot defined..List
  40f38c:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
  40f39c:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
  40f3ac:	31312072 0000000a 45574f50 41532052     r 11....POWER SA
  40f3bc:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
  40f3cc:	414d4f44 4e204e49 0a454d41 00000000     DOMAIN NAME.....
  40f3dc:	474e5250 66754220 20726566 65637865     PRNG Buffer exce
  40f3ec:	64656465 78616d20 6d756d69 7a697320     eded maximum siz
  40f3fc:	64252065 20726f20 4c4c554e 66754220     e %d or NULL Buf
  40f40c:	0a726566 00000000                       fer.....

0040f414 <__FUNCTION__.7964>:
  40f414:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  40f424:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40f434:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40f444:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40f454:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40f464:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40f474:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40f484:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  40f494:	69616620 6572206c 72206461 30206765      fail read reg 0
  40f4a4:	31313178 2e2e2038 00000a2e 6c696166     x1118 ......fail
  40f4b4:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40f4c4:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40f4d4:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40f4e4:	00000000 6f727245 68772072 20656c69     ....Error while 
  40f4f4:	64616572 20676e69 0a676572 00000000     reading reg.....
  40f504:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40f514:	656c6961 6f742064 61657220 00000a64     ailed to read...
  40f524:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40f534:	656c6961 6f742064 69727720 000a6574     ailed to write..

0040f544 <__FUNCTION__.8058>:
  40f544:	70696863 6965645f 0074696e 696d6e5b     chip_deinit.[nmi
  40f554:	61747320 3a5d7472 69616620 6e69206c      start]: fail in
  40f564:	62207469 000a7375 70696843 20444920     it bus..Chip ID 
  40f574:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
  40f584:	6e65206f 656c6261 746e6920 75727265     o enable interru
  40f594:	2e737470 00000a2e 696d6e5b 6f747320     pts.....[nmi sto
  40f5a4:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
  40f5b4:	6c696166 0000000a 696d6e5b 6f747320     fail....[nmi sto
  40f5c4:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
  40f5d4:	6c626173 61662065 000a6c69 696d6e5b     sable fail..[nmi
  40f5e4:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
  40f5f4:	75622074 00000a73                       t bus...

0040f5fc <__FUNCTION__.8045>:
  40f5fc:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040f608 <__FUNCTION__.8052>:
  40f608:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0040f618 <__FUNCTION__.7520>:
  40f618:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040f624 <__FUNCTION__.7468>:
  40f624:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040f634 <__FUNCTION__.7478>:
  40f634:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040f644 <__FUNCTION__.7495>:
  40f644:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040f654 <__FUNCTION__.7486>:
  40f654:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....
  40f664:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f674:	6d632064 65722064 6e6f7073 72206573     d cmd response r
  40f684:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
  40f694:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f6a4:	656c6961 61642064 72206174 6f707365     ailed data respo
  40f6b4:	2065736e 64616572 7562202c 72652073     nse read, bus er
  40f6c4:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
  40f6d4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
  40f6e4:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
  40f6f4:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
  40f704:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40f714:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
  40f724:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
  40f734:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40f744:	62206174 6b636f6c 63726320 61657220     ta block crc rea
  40f754:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
  40f764:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f774:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
  40f784:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40f794:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f7a4:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40f7b4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40f7c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40f7d4:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40f7e4:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40f7f4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f804:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
  40f814:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
  40f824:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f834:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
  40f844:	64616572 67657220 30252820 2e297838     read reg (%08x).
  40f854:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f864:	656c6961 61642064 72206174 2e646165     ailed data read.
  40f874:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f884:	656c6961 6e692064 6e726574 72206c61     ailed internal r
  40f894:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
  40f8a4:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
  40f8b4:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
  40f8c4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f8d4:	656c6961 6e692064 6e726574 72206c61     ailed internal r
  40f8e4:	20646165 746f7270 6c6f636f 0a2e2e2e     ead protocol....
  40f8f4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40f904:	656c6961 6e692064 6e726574 77206c61     ailed internal w
  40f914:	65746972 6f727020 6f636f74 6572206c     rite protocol re
  40f924:	2e2e2e67 0000000a 696d6e5b 69707320     g.......[nmi spi
  40f934:	46203a5d 206c6961 20646d63 64616572     ]: Fail cmd read
  40f944:	69686320 64692070 0a2e2e2e 00000000      chip id........
  40f954:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f964:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
  40f974:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
  40f984:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f994:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
  40f9a4:	64616572 6f6c6220 28206b63 78383025     read block (%08x
  40f9b4:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
  40f9c4:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40f9d4:	61746164 61657220 2e2e2e64 0000000a     data read.......
  40f9e4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40f9f4:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
  40fa04:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
  40fa14:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
  40fa24:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
  40fa34:	69727720 62206574 6b636f6c 30252820      write block (%0
  40fa44:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40fa54:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40fa64:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
  40fa74:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40fa84:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40fa94:	61642064 62206174 6b636f6c 69727720     d data block wri
  40faa4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
  40fab4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40fac4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40fad4:	63726320 69727720 202c6574 20737562      crc write, bus 
  40fae4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40faf4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
  40fb04:	206b636f 61746164 69727720 2e2e6574     ock data write..
  40fb14:	00000a2e                                ....

0040fb18 <__FUNCTION__.7429>:
  40fb18:	5f697073 00646d63                       spi_cmd.

0040fb20 <__FUNCTION__.7437>:
  40fb20:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040fb2c <__FUNCTION__.7503>:
  40fb2c:	735f6d6e 725f6970 00646165              nm_spi_read.

0040fb38 <crc7_syndrome_table>:
  40fb38:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40fb48:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40fb58:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40fb68:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40fb78:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40fb88:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40fb98:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40fba8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40fbb8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40fbc8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40fbd8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40fbe8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40fbf8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40fc08:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40fc18:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40fc28:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0040fc38 <__FUNCTION__.7453>:
  40fc38:	5f697073 61746164 6165725f 00000064     spi_data_read...
  40fc48:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
  40fc58:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
  40fc68:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40fc78:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40fc88:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40fc98:	204c5353 6b636f53 000a7465 09097325     SSL Socket..%s..
  40fca8:	25096325 75250975 0d752509 0000000a     %c.%u.%u.%u.....
  40fcb8:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
  40fcc8:	74736554 00000000 74617453 6d207375     Test....Status m
  40fcd8:	61737365 46206567 004c4941 63617473     essage FAIL.stac
  40fce8:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40fcf8:	00000a0d 52202d2d 206f626f 4f474f47     ....-- Robo GOGO
  40fd08:	626f5220 4320746f 72746e6f 4d206c6f      Robot Control M
  40fd18:	50205543 72676f72 2d206d61 2d0a0d2d     CU Program --..-
  40fd28:	4153202d 5f53344d 414c5058 44454e49     - SAM4S_XPLAINED
  40fd38:	4f52505f 0d2d2d20 202d2d0a 706d6f43     _PRO --..-- Comp
  40fd48:	64656c69 6f4e203a 31322076 31303220     iled: Nov 21 201
  40fd58:	36312036 3a36323a 2d203632 000a0d2d     6 16:26:26 --...
  40fd68:	2044454c 6b736154 00000000 6c696146     LED Task....Fail
  40fd78:	74206465 7263206f 65746165 44454c20     ed to create LED
  40fd88:	73615420 000a0d6b 61657243 20646574      Task...Created 
  40fd98:	2044454c 6b736154 00000a0d 434e4957     LED Task....WINC
  40fda8:	73615420 0000006b 6c696146 74206465      Task...Failed t
  40fdb8:	7263206f 65746165 4e495720 61542043     o create WINC Ta
  40fdc8:	0a0d6b73 00000000 61657243 20646574     sk......Created 
  40fdd8:	434e4957 73615420 000a0d6b 746e6f43     WINC Task...Cont
  40fde8:	206c6f72 706f6f4c 73615420 0000006b     rol Loop Task...
  40fdf8:	6c696146 74206465 7263206f 65746165     Failed to create
  40fe08:	6e6f4320 6c6f7274 6f6f4c20 61542070      Control Loop Ta
  40fe18:	0a0d6b73 00000000 61657243 20646574     sk......Created 
  40fe28:	746e6f43 206c6f72 706f6f4c 73615420     Control Loop Tas
  40fe38:	000a0d6b 646e6553 61745320 20737574     k...Send Status 
  40fe48:	6b736154 00000000 6c696146 74206465     Task....Failed t
  40fe58:	7263206f 65746165 6e655320 74532064     o create Send St
  40fe68:	73757461 73615420 000a0d6b 61657243     atus Task...Crea
  40fe78:	20646574 646e6553 61745320 20737574     ted Send Status 
  40fe88:	6b736154 00000a0d 00000043              Task....C...

0040fe94 <_global_impure_ptr>:
  40fe94:	20000030                                0.. 

0040fe98 <fpinan.5370>:
  40fe98:	00000034 fffffbce 000003cb 00000001     4...............
  40fea8:	00000000 0000666e 74696e69 00000079     ....nf..inity...
  40feb8:	00006e61 00000000                       an......

0040fec0 <tinytens>:
  40fec0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  40fed0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  40fee0:	64ac6f43 11680628                       Co.d(.h.

0040fee8 <fpi.5334>:
  40fee8:	00000035 fffffbce 000003cb 00000001     5...............
  40fef8:	00000000                                ....

0040fefc <zeroes.7035>:
  40fefc:	30303030 30303030 30303030 30303030     0000000000000000
  40ff0c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40ff1c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40ff2c:	00000000 33323130 37363534 62613938     ....0123456789ab
  40ff3c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40ff4c:	00000030                                0...

0040ff50 <blanks.7034>:
  40ff50:	20202020 20202020 20202020 20202020                     

0040ff60 <zeroes.6993>:
  40ff60:	30303030 30303030 30303030 30303030     0000000000000000

0040ff70 <blanks.6992>:
  40ff70:	20202020 20202020 20202020 20202020                     

0040ff80 <_ctype_>:
  40ff80:	20202000 20202020 28282020 20282828     .         ((((( 
  40ff90:	20202020 20202020 20202020 20202020                     
  40ffa0:	10108820 10101010 10101010 10101010      ...............
  40ffb0:	04040410 04040404 10040404 10101010     ................
  40ffc0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40ffd0:	01010101 01010101 01010101 10101010     ................
  40ffe0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40fff0:	02020202 02020202 02020202 10101010     ................
  410000:	00000020 00000000 00000000 00000000      ...............
	...
  410084:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00410094 <__hexdig>:
	...
  4100c4:	13121110 17161514 00001918 00000000     ................
  4100d4:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
  4100f4:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
  410194:	49534f50 00000058 0000002e              POSIX.......

004101a0 <__mprec_tens>:
  4101a0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4101b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4101c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4101d0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4101e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4101f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  410200:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  410210:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  410220:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  410230:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  410240:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  410250:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  410260:	79d99db4 44ea7843                       ...yCx.D

00410268 <__mprec_bigtens>:
  410268:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  410278:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  410288:	7f73bf3c 75154fdd                       <.s..O.u

00410290 <p05.5373>:
  410290:	00000005 00000019 0000007d              ........}...

0041029c <_init>:
  41029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41029e:	bf00      	nop
  4102a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4102a2:	bc08      	pop	{r3}
  4102a4:	469e      	mov	lr, r3
  4102a6:	4770      	bx	lr

004102a8 <__init_array_start>:
  4102a8:	0040a0b9 	.word	0x0040a0b9

004102ac <__frame_dummy_init_array_entry>:
  4102ac:	004000f1                                ..@.

004102b0 <_fini>:
  4102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4102b2:	bf00      	nop
  4102b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4102b6:	bc08      	pop	{r3}
  4102b8:	469e      	mov	lr, r3
  4102ba:	4770      	bx	lr

004102bc <__fini_array_start>:
  4102bc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <udp_status_socket>:
2000000c:	ffff                                             .

2000000d <tcp_port_exchange_socket>:
2000000d:	ffff                                             .

2000000e <udp_command_socket>:
2000000e:	ffff                                             .

2000000f <tcp_settings_listen_socket>:
2000000f:	ffff                                             .

20000010 <tcp_settings_data_socket>:
20000010:	00ff 0000                                   ....

20000014 <egstrNmBusCapabilities>:
20000014:	1000 0000                                   ....

20000018 <clk_status_reg_adr>:
20000018:	000f 0000                                   ....

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <uxCriticalNesting>:
20000020:	aaaa aaaa                                   ....

20000024 <xFreeBytesRemaining>:
20000024:	a000 0000                                   ....

20000028 <xNextTaskUnblockTime>:
20000028:	ffff ffff 0000 0000                         ........

20000030 <impure_data>:
20000030:	0000 0000 031c 2000 0384 2000 03ec 2000     ....... ... ... 
	...
20000064:	fe90 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000458 <_impure_ptr>:
20000458:	0030 2000                                   0.. 

2000045c <__ctype_ptr__>:
2000045c:	ff80 0040                                   ..@.

20000460 <lconv>:
20000460:	019c 0041 ec8c 0040 ec8c 0040 ec8c 0040     ..A...@...@...@.
20000470:	ec8c 0040 ec8c 0040 ec8c 0040 ec8c 0040     ..@...@...@...@.
20000480:	ec8c 0040 ec8c 0040 ffff ffff ffff ffff     ..@...@.........
20000490:	ffff ffff ffff 0000                         ........

20000498 <lc_ctype_charset>:
20000498:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004b8 <__mb_cur_max>:
200004b8:	0001 0000                                   ....

200004bc <__malloc_av_>:
	...
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 

200008c4 <__malloc_trim_threshold>:
200008c4:	0000 0002                                   ....

200008c8 <__malloc_sbrk_base>:
200008c8:	ffff ffff                                   ....

200008cc <__wctomb>:
200008cc:	d89d 0040                                   ..@.
